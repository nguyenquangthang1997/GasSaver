{"time":264,"results":[{"type":"struct-data-arrangement ","before":"\naddress collateralAsset\naddress borrowAsset\nuint64 collateralID\nuint64 borrowID","after":"address collateralAsset\naddress borrowAsset\nuint64 collateralID\nuint64 borrowID\n","contract":"IVaultExt","time":0},{"type":"external-function ","before":"function initiateFlashloan(FlashLoan.Info memory info, uint8 _flashnum) public isAuthorized {\n        if (_flashnum == 0) {\n            initiateAaveFlashLoan(info);\n        } else if (_flashnum == 1) {\n            initiateDyDxFlashLoan(info);\n        }\n    }","after":"function initiateFlashloan(FlashLoan.Info calldata info, uint8 _flashnum) public isAuthorized {\n        if (_flashnum == 0) {\n            initiateAaveFlashLoan(info);\n        } else if (_flashnum == 1) {\n            initiateDyDxFlashLoan(info);\n        }\n    }","contract":"Flasher","time":0},{"type":"external-function ","before":"function callFunction(\n        address sender,\n        Account.Info memory account,\n        bytes memory data\n    ) external override isAuthorizedExternal {\n        sender;\n        account;\n\n        FlashLoan.Info memory info = abi.decode(data, (FlashLoan.Info));\n\n        //Estimate flashloan payback + premium fee of 2 wei,\n        uint amountOwing = info.amount.add(2);\n\n        // Transfer to Vault the flashloan Amount\n        IERC20(info.asset).uniTransfer(payable(info.vault), info.amount);\n\n        if (info.callType == FlashLoan.CallType.Switch) {\n            IVault(info.vault)\n            .executeSwitch(info.newProvider, info.amount, 2);\n        }\n        else if (info.callType == FlashLoan.CallType.Close) {\n            IFliquidator(info.fliquidator)\n            .executeFlashClose(info.user, info.vault, info.amount, 2);\n        }\n        else {\n            IFliquidator(info.fliquidator)\n            .executeFlashLiquidation(info.user, info.userliquidator, info.vault, info.amount, 2);\n        }\n\n        //Approve DYDXSolo to spend to repay flashloan\n        IERC20(info.asset).approve(dydx_solo_margin, amountOwing);\n    }","after":"function callFunction(\n        address sender,\n        Account.Info calldata account,\n        bytes calldata data\n    ) external override isAuthorizedExternal {\n        sender;\n        account;\n\n        FlashLoan.Info memory info = abi.decode(data, (FlashLoan.Info));\n\n        //Estimate flashloan payback + premium fee of 2 wei,\n        uint amountOwing = info.amount.add(2);\n\n        // Transfer to Vault the flashloan Amount\n        IERC20(info.asset).uniTransfer(payable(info.vault), info.amount);\n\n        if (info.callType == FlashLoan.CallType.Switch) {\n            IVault(info.vault)\n            .executeSwitch(info.newProvider, info.amount, 2);\n        }\n        else if (info.callType == FlashLoan.CallType.Close) {\n            IFliquidator(info.fliquidator)\n            .executeFlashClose(info.user, info.vault, info.amount, 2);\n        }\n        else {\n            IFliquidator(info.fliquidator)\n            .executeFlashLiquidation(info.user, info.userliquidator, info.vault, info.amount, 2);\n        }\n\n        //Approve DYDXSolo to spend to repay flashloan\n        IERC20(info.asset).approve(dydx_solo_margin, amountOwing);\n    }","contract":"Flasher","time":0},{"type":"immutable-restrict-modification ","before":"address public aave_lending_pool;","after":"address public immutable aave_lending_pool;","contract":"Flasher","time":0},{"type":"immutable-restrict-modification ","before":"address public dydx_solo_margin;","after":"address public immutable dydx_solo_margin;","contract":"Flasher","time":0}]}
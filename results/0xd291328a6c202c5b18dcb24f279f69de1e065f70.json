{"time":131,"results":[{"type":"loop-duplication","before":"\nstart line 162 column 8, end line 172 column 8\nfor (uint256 i = 0; i < length; i++) {\n            token = requiredOutputs[i].token;\n            actualOutputs[i] = AbsoluteTokenAmount({\n            token : token,\n            amount : checkRequirementAndTransfer(\n                    token,\n                    requiredOutputs[i].amount,\n                    account\n                )\n            });\n        }\nstart line 175 column 8, end line 180 column 8\nfor (uint256 i = 0; i < length; i++) {\n            lengthNested = tokensToBeWithdrawn[i].length;\n            for (uint256 j = 0; j < lengthNested; j++) {\n                checkRequirementAndTransfer(tokensToBeWithdrawn[i][j], 0, account);\n            }\n        }","after":"// merge loop\n\nstart line 162 column 8, end line 172 column 8\nfor (uint256 i = 0; i < length; i++) {\n            token = requiredOutputs[i].token;\n            actualOutputs[i] = AbsoluteTokenAmount({\n            token : token,\n            amount : checkRequirementAndTransfer(\n                    token,\n                    requiredOutputs[i].amount,\n                    account\n                )\n            });\n        }\nstart line 175 column 8, end line 180 column 8\nfor (uint256 i = 0; i < length; i++) {\n            lengthNested = tokensToBeWithdrawn[i].length;\n            for (uint256 j = 0; j < lengthNested; j++) {\n                checkRequirementAndTransfer(tokensToBeWithdrawn[i][j], 0, account);\n            }\n        }","contract":"Core","time":0},{"type":"loop-duplication","before":"\nstart line 299 column 8, end line 303 column 8\nfor (uint256 i = 0; i < 32; i++) {\n            if (data[i] != bytes1(0)) {\n                counter++;\n            }\n        }\nstart line 307 column 8, end line 312 column 8\nfor (uint256 i = 0; i < 32; i++) {\n            if (data[i] != bytes1(0)) {\n                result[counter] = data[i];\n                counter++;\n            }\n        }","after":"// merge loop\n\nstart line 299 column 8, end line 303 column 8\nfor (uint256 i = 0; i < 32; i++) {\n            if (data[i] != bytes1(0)) {\n                counter++;\n            }\n        }\nstart line 307 column 8, end line 312 column 8\nfor (uint256 i = 0; i < 32; i++) {\n            if (data[i] != bytes1(0)) {\n                result[counter] = data[i];\n                counter++;\n            }\n        }","contract":"Helpers","time":0},{"type":"loop-duplication","before":"\nstart line 909 column 8, end line 928 column 8\nfor (uint256 i = 0; i < adapterBalancesLength; i++) {\n            // Fill temp variable\n            currentAbsoluteTokenAmounts = adapterBalances[i].absoluteTokenAmounts;\n\n            // Reset counter\n            nonZeroTokensCounters[i] = 0;\n            currentAbsoluteTokenAmountsLength = currentAbsoluteTokenAmounts.length;\n\n            // Increment if token balance is positive\n            for (uint256 j = 0; j < currentAbsoluteTokenAmountsLength; j++) {\n                if (currentAbsoluteTokenAmounts[j].amount > 0) {\n                    nonZeroTokensCounters[i]++;\n                }\n            }\n\n            // Increment if at least one positive token balance\n            if (nonZeroTokensCounters[i] > 0) {\n                nonZeroAdaptersCounter++;\n            }\n        }\nstart line 938 column 8, end line 973 column 8\nfor (uint256 i = 0; i < adapterBalancesLength; i++) {\n            // Skip if no positive token balances\n            if (nonZeroTokensCounters[i] == 0) {\n                continue;\n            }\n\n            // Fill temp variable\n            currentAbsoluteTokenAmounts = adapterBalances[i].absoluteTokenAmounts;\n\n            // Reset temp variable and counter\n            nonZeroAbsoluteTokenAmounts = new AbsoluteTokenAmount[](nonZeroTokensCounters[i]);\n            nonZeroTokensCounters[i] = 0;\n            currentAbsoluteTokenAmountsLength = currentAbsoluteTokenAmounts.length;\n\n            for (uint256 j = 0; j < currentAbsoluteTokenAmountsLength; j++) {\n                // Skip if balance is not positive\n                if (currentAbsoluteTokenAmounts[j].amount == 0) {\n                    continue;\n                }\n\n                // Else fill temp variable\n                nonZeroAbsoluteTokenAmounts[nonZeroTokensCounters[i]] = currentAbsoluteTokenAmounts[j];\n\n                // Increment counter\n                nonZeroTokensCounters[i]++;\n            }\n\n            // Fill resulting variable\n            nonZeroAdapterBalances[nonZeroAdaptersCounter] = AdapterBalance({\n            protocolAdapterName : adapterBalances[i].protocolAdapterName,\n            absoluteTokenAmounts : nonZeroAbsoluteTokenAmounts\n            });\n\n            // Increment counter\n            nonZeroAdaptersCounter++;\n        }","after":"// merge loop\n\nstart line 909 column 8, end line 928 column 8\nfor (uint256 i = 0; i < adapterBalancesLength; i++) {\n            // Fill temp variable\n            currentAbsoluteTokenAmounts = adapterBalances[i].absoluteTokenAmounts;\n\n            // Reset counter\n            nonZeroTokensCounters[i] = 0;\n            currentAbsoluteTokenAmountsLength = currentAbsoluteTokenAmounts.length;\n\n            // Increment if token balance is positive\n            for (uint256 j = 0; j < currentAbsoluteTokenAmountsLength; j++) {\n                if (currentAbsoluteTokenAmounts[j].amount > 0) {\n                    nonZeroTokensCounters[i]++;\n                }\n            }\n\n            // Increment if at least one positive token balance\n            if (nonZeroTokensCounters[i] > 0) {\n                nonZeroAdaptersCounter++;\n            }\n        }\nstart line 938 column 8, end line 973 column 8\nfor (uint256 i = 0; i < adapterBalancesLength; i++) {\n            // Skip if no positive token balances\n            if (nonZeroTokensCounters[i] == 0) {\n                continue;\n            }\n\n            // Fill temp variable\n            currentAbsoluteTokenAmounts = adapterBalances[i].absoluteTokenAmounts;\n\n            // Reset temp variable and counter\n            nonZeroAbsoluteTokenAmounts = new AbsoluteTokenAmount[](nonZeroTokensCounters[i]);\n            nonZeroTokensCounters[i] = 0;\n            currentAbsoluteTokenAmountsLength = currentAbsoluteTokenAmounts.length;\n\n            for (uint256 j = 0; j < currentAbsoluteTokenAmountsLength; j++) {\n                // Skip if balance is not positive\n                if (currentAbsoluteTokenAmounts[j].amount == 0) {\n                    continue;\n                }\n\n                // Else fill temp variable\n                nonZeroAbsoluteTokenAmounts[nonZeroTokensCounters[i]] = currentAbsoluteTokenAmounts[j];\n\n                // Increment counter\n                nonZeroTokensCounters[i]++;\n            }\n\n            // Fill resulting variable\n            nonZeroAdapterBalances[nonZeroAdaptersCounter] = AdapterBalance({\n            protocolAdapterName : adapterBalances[i].protocolAdapterName,\n            absoluteTokenAmounts : nonZeroAbsoluteTokenAmounts\n            });\n\n            // Increment counter\n            nonZeroAdaptersCounter++;\n        }","contract":"ProtocolAdapterRegistry","time":0}]}
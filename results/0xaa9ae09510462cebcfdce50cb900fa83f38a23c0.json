{"time":151,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\nCounters.Counter private _tokenIdCounter;\nCounters.Counter private _postcardIdCounter;\nstring internal _baseURI;\naddress internal _royaltyRecipient;\nuint8 internal _royaltyFee;\nstring public name;\nstring public symbol;\nmapping(uint256 => StampInfo) public tokenIdToStampInfo;","after":"Counters.Counter private _tokenIdCounter;\nCounters.Counter private _postcardIdCounter;\nstring internal _baseURI;\nstring public name;\nstring public symbol;\nmapping(uint256 => StampInfo) public tokenIdToStampInfo;\naddress internal _royaltyRecipient;\nbytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\nuint8 internal _royaltyFee;\n","contract":"Stampu","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) public onlyOwner {\n        _baseURI = newuri;\n    }","after":"function setURI(string calldata newuri) public onlyOwner {\n        _baseURI = newuri;\n    }","contract":"Stampu","time":0},{"type":"external-function ","before":"function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","contract":"Stampu","time":1},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Stampu","time":0},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"Stampu","time":1},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"Stampu","time":1}]}
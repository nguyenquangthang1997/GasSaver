{"time":497,"results":[{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"Reputation","time":0},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"DAOToken","time":0},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"DAOToken","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public cap;","after":"uint256 public immutable cap;","contract":"DAOToken","time":0},{"type":"external-function ","before":"function genericCall(address _contract, bytes memory _data, uint256 _value)\n    public\n    onlyOwner\n    returns (bool success, bytes memory returnValue) {\n        // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }","after":"function genericCall(address _contract, bytes calldata _data, uint256 _value)\n    public\n    onlyOwner\n    returns (bool success, bytes memory returnValue) {\n        // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }","contract":"Avatar","time":0},{"type":"external-function ","before":"function metaData(string memory _metaData) public onlyOwner returns (bool) {\n        emit MetaData(_metaData);\n        return true;\n    }","after":"function metaData(string calldata _metaData) public onlyOwner returns (bool) {\n        emit MetaData(_metaData);\n        return true;\n    }","contract":"Avatar","time":0},{"type":"immutable-restrict-modification ","before":"string public orgName;","after":"string public immutable orgName;","contract":"Avatar","time":0},{"type":"struct-data-arrangement ","before":"\nbytes32 organizationId\naddress callbacks\nProposalState state\nuint256 winningVote\naddress proposer\nuint256 currentBoostedVotePeriodLimit\nbytes32 paramsHash\nuint256 daoBountyRemain\nuint256 daoBounty\nuint256 totalStakes\nuint256 confidenceThreshold\nuint256 secondsFromTimeOutTillExecuteBoosted\nuint[3] times\nbool daoRedeemItsWinnings\nmapping(uint256 => uint256) votes\nmapping(uint256 => uint256) preBoostedVotes\nmapping(address => Voter) voters\nmapping(uint256 => uint256) stakes\nmapping(address => Staker) stakers","after":"bytes32 organizationId\nProposalState state\nuint256 winningVote\nuint256 currentBoostedVotePeriodLimit\nbytes32 paramsHash\nuint256 daoBountyRemain\nuint256 daoBounty\nuint256 totalStakes\nuint256 confidenceThreshold\nuint256 secondsFromTimeOutTillExecuteBoosted\nuint[3] times\nmapping(uint256 => uint256) votes\nmapping(uint256 => uint256) preBoostedVotes\nmapping(address => Voter) voters\nmapping(uint256 => uint256) stakes\nmapping(address => Staker) stakers\naddress callbacks\naddress proposer\nbool daoRedeemItsWinnings\n","contract":"GenesisProtocolLogic","time":0},{"type":"external-function ","before":"function proposeContributionReward(\n        Avatar _avatar,\n        string memory _descriptionHash,\n        int256 _reputationChange,\n        uint[5] memory _rewards,\n        IERC20 _externalToken,\n        address payable _beneficiary\n    )\n    public\n    returns (bytes32)\n    {\n        validateProposalParams(_reputationChange, _rewards);\n        Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];\n\n        bytes32 contributionId = controllerParams.intVote.propose(\n            2,\n            controllerParams.voteApproveParams,\n            msg.sender,\n            address(_avatar)\n        );\n\n        address payable beneficiary = _beneficiary;\n        if (beneficiary == address(0)) {\n            beneficiary = msg.sender;\n        }\n\n        ContributionProposal memory proposal = ContributionProposal({\n        nativeTokenReward : _rewards[0],\n        reputationChange : _reputationChange,\n        ethReward : _rewards[1],\n        externalToken : _externalToken,\n        externalTokenReward : _rewards[2],\n        beneficiary : beneficiary,\n        periodLength : _rewards[3],\n        numberOfPeriods : _rewards[4],\n        executionTime : 0,\n        redeemedPeriods : [uint(0), uint(0), uint(0), uint(0)]\n        });\n        organizationsProposals[address(_avatar)][contributionId] = proposal;\n\n        emit NewContributionProposal(\n            address(_avatar),\n            contributionId,\n            address(controllerParams.intVote),\n            _descriptionHash,\n            _reputationChange,\n            _rewards,\n            _externalToken,\n            beneficiary\n        );\n\n        proposalsInfo[address(controllerParams.intVote)][contributionId] = ProposalInfo({\n        blockNumber : block.number,\n        avatar : _avatar\n        });\n        return contributionId;\n    }","after":"function proposeContributionReward(\n        Avatar _avatar,\n        string calldata _descriptionHash,\n        int256 _reputationChange,\n        uint[5] calldata _rewards,\n        IERC20 _externalToken,\n        address payable _beneficiary\n    )\n    public\n    returns (bytes32)\n    {\n        validateProposalParams(_reputationChange, _rewards);\n        Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];\n\n        bytes32 contributionId = controllerParams.intVote.propose(\n            2,\n            controllerParams.voteApproveParams,\n            msg.sender,\n            address(_avatar)\n        );\n\n        address payable beneficiary = _beneficiary;\n        if (beneficiary == address(0)) {\n            beneficiary = msg.sender;\n        }\n\n        ContributionProposal memory proposal = ContributionProposal({\n        nativeTokenReward : _rewards[0],\n        reputationChange : _reputationChange,\n        ethReward : _rewards[1],\n        externalToken : _externalToken,\n        externalTokenReward : _rewards[2],\n        beneficiary : beneficiary,\n        periodLength : _rewards[3],\n        numberOfPeriods : _rewards[4],\n        executionTime : 0,\n        redeemedPeriods : [uint(0), uint(0), uint(0), uint(0)]\n        });\n        organizationsProposals[address(_avatar)][contributionId] = proposal;\n\n        emit NewContributionProposal(\n            address(_avatar),\n            contributionId,\n            address(controllerParams.intVote),\n            _descriptionHash,\n            _reputationChange,\n            _rewards,\n            _externalToken,\n            beneficiary\n        );\n\n        proposalsInfo[address(controllerParams.intVote)][contributionId] = ProposalInfo({\n        blockNumber : block.number,\n        avatar : _avatar\n        });\n        return contributionId;\n    }","contract":"ContributionReward","time":0},{"type":"external-function ","before":"function redeem(bytes32 _proposalId, Avatar _avatar, bool[4] memory _whatToRedeem)\n    public\n    returns (int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)\n    {\n\n        if (_whatToRedeem[0]) {\n            reputationReward = redeemReputation(_proposalId, _avatar);\n        }\n\n        if (_whatToRedeem[1]) {\n            nativeTokenReward = redeemNativeToken(_proposalId, _avatar);\n        }\n\n        if (_whatToRedeem[2]) {\n            etherReward = redeemEther(_proposalId, _avatar);\n        }\n\n        if (_whatToRedeem[3]) {\n            externalTokenReward = redeemExternalToken(_proposalId, _avatar);\n        }\n    }","after":"function redeem(bytes32 _proposalId, Avatar _avatar, bool[4] calldata _whatToRedeem)\n    public\n    returns (int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)\n    {\n\n        if (_whatToRedeem[0]) {\n            reputationReward = redeemReputation(_proposalId, _avatar);\n        }\n\n        if (_whatToRedeem[1]) {\n            nativeTokenReward = redeemNativeToken(_proposalId, _avatar);\n        }\n\n        if (_whatToRedeem[2]) {\n            etherReward = redeemEther(_proposalId, _avatar);\n        }\n\n        if (_whatToRedeem[3]) {\n            externalTokenReward = redeemExternalToken(_proposalId, _avatar);\n        }\n    }","contract":"ContributionReward","time":0}]}
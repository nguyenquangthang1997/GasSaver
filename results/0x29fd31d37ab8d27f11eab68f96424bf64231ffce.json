{"time":57,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":1},{"type":"external-function ","before":"function deploy(\n        address swapAddress,\n        IERC20[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        uint256 _withdrawFee\n    ) external returns (address) {\n        address swapClone = Clones.clone(swapAddress);\n        ISwap(swapClone).initialize(\n            _pooledTokens,\n            decimals,\n            lpTokenName,\n            lpTokenSymbol,\n            _a,\n            _fee,\n            _adminFee,\n            _withdrawFee\n        );\n        Ownable(swapClone).transferOwnership(owner());\n        emit NewSwapPool(msg.sender, swapClone, _pooledTokens);\n        return swapClone;\n    }","after":"function deploy(\n        address swapAddress,\n        IERC20[] calldata _pooledTokens,\n        uint8[] calldata decimals,\n        string calldata lpTokenName,\n        string calldata lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        uint256 _withdrawFee\n    ) external returns (address) {\n        address swapClone = Clones.clone(swapAddress);\n        ISwap(swapClone).initialize(\n            _pooledTokens,\n            decimals,\n            lpTokenName,\n            lpTokenSymbol,\n            _a,\n            _fee,\n            _adminFee,\n            _withdrawFee\n        );\n        Ownable(swapClone).transferOwnership(owner());\n        emit NewSwapPool(msg.sender, swapClone, _pooledTokens);\n        return swapClone;\n    }","contract":"SwapDeployer","time":0}]}
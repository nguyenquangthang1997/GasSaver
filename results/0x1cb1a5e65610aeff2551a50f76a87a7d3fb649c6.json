{"time":176,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function initializePaymentSplitter(address[] memory payees, uint256[] memory shares_)\n    external\n    onlyOwner\n    {\n        require(\n            !initialized,\n            \"Payment Split Already Initialized!\"\n        );\n        require(\n            payees.length == shares_.length,\n            \"PaymentSplitter: payees and shares length mismatch\"\n        );\n        require(\n            payees.length > 0,\n            \"PaymentSplitter: no payees\"\n        );\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n        initialized = true;\n    }","after":"function initializePaymentSplitter(address[] calldata payees, uint256[] calldata shares_)\n    external\n    onlyOwner\n    {\n        require(\n            !initialized,\n            \"Payment Split Already Initialized!\"\n        );\n        require(\n            payees.length == shares_.length,\n            \"PaymentSplitter: payees and shares length mismatch\"\n        );\n        require(\n            payees.length > 0,\n            \"PaymentSplitter: no payees\"\n        );\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n        initialized = true;\n    }","contract":"Toadz","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI)\n    external\n    onlyOwner\n    {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI)\n    external\n    onlyOwner\n    {\n        _setBaseURI(_baseURI);\n    }","contract":"Toadz","time":0},{"type":"external-function ","before":"function setContractURI(string memory contractURI_)\n    external\n    onlyOwner\n    {\n        _contractURI = contractURI_;\n    }","after":"function setContractURI(string calldata contractURI_)\n    external\n    onlyOwner\n    {\n        _contractURI = contractURI_;\n    }","contract":"Toadz","time":0},{"type":"external-function ","before":"function setProvenance(string memory _provenance)\n    external\n    onlyOwner\n    {\n        require(\n            bytes(provenance).length == 0,\n            \"Provenance already set!\"\n        );\n        provenance = _provenance;\n    }","after":"function setProvenance(string calldata _provenance)\n    external\n    onlyOwner\n    {\n        require(\n            bytes(provenance).length == 0,\n            \"Provenance already set!\"\n        );\n        provenance = _provenance;\n    }","contract":"Toadz","time":0},{"type":"external-function ","before":"function mintSpecial(address [] memory recipients, uint256 [] memory specialId)\n    external\n    onlyOwner\n    {\n        require(!devMintLocked,\n            \"Dev Mint Permanently Locked\"\n        );\n        for (uint256 i = 0; i < recipients.length; i++) {\n            require(specialId[i] != 0);\n            _safeMint(recipients[i], specialId[i] * 1000000);\n        }\n    }","after":"function mintSpecial(address [] calldata recipients, uint256 [] calldata specialId)\n    external\n    onlyOwner\n    {\n        require(!devMintLocked,\n            \"Dev Mint Permanently Locked\"\n        );\n        for (uint256 i = 0; i < recipients.length; i++) {\n            require(specialId[i] != 0);\n            _safeMint(recipients[i], specialId[i] * 1000000);\n        }\n    }","contract":"Toadz","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public tokenPrice = 69000000000000000;","after":"uint256 public constant tokenPrice = 69000000000000000;","contract":"Toadz","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Toadz","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Toadz","time":0}]}
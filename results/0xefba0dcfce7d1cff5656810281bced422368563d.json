{"time":87,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20Detailed","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20Detailed","time":0},{"type":"immutable-restrict-modification ","before":"uint8 private _decimals;","after":"uint8 private immutable _decimals;","contract":"ERC20Detailed","time":0},{"type":"external-function ","before":"function addAddressesToWhitelist(address[] memory addrs) onlyOwner public returns (bool success) {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            if (addAddressToWhitelist(addrs[i])) {\n                success = true;\n            }\n        }\n    }","after":"function addAddressesToWhitelist(address[] calldata addrs) onlyOwner public returns (bool success) {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            if (addAddressToWhitelist(addrs[i])) {\n                success = true;\n            }\n        }\n    }","contract":"WhitelistedStakingRewards","time":0},{"type":"external-function ","before":"function removeAddressesFromWhitelist(address[] memory addrs) onlyOwner public returns (bool success) {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            if (removeAddressFromWhitelist(addrs[i])) {\n                success = true;\n            }\n        }\n    }","after":"function removeAddressesFromWhitelist(address[] calldata addrs) onlyOwner public returns (bool success) {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            if (removeAddressFromWhitelist(addrs[i])) {\n                success = true;\n            }\n        }\n    }","contract":"WhitelistedStakingRewards","time":0}]}
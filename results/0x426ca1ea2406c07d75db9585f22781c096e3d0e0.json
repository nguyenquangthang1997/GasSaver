{"time":178,"results":[{"type":"state-data-arrangement ","before":"\nstring public name;\nstring public symbol;\nuint8 public decimals;\npublicCalls public pc;\npublicArrays public pa;\ngenesisCalls public gn;\nnormalAddress public na;\nstakes public st;\nstakeBuys public stb;\ngenesisBuys public gnb;\ntokenService public tks;\nbaseTransfers public bst;\nmneStaking public mneStk;\nluckyDraw public lkd;\nexternalService public extS1;\nexternalReceiver public extR1;\naddress public updaterAddress = 0x0000000000000000000000000000000000000000;\naddress public payoutOwner = 0x0000000000000000000000000000000000000000;\nbool public payoutBlocked = false;\naddress payable public secondaryPayoutAddress = 0x0000000000000000000000000000000000000000;","after":"string public name;\nstring public symbol;\npublicCalls public pc;\npublicArrays public pa;\ngenesisCalls public gn;\nnormalAddress public na;\nstakes public st;\nstakeBuys public stb;\ngenesisBuys public gnb;\ntokenService public tks;\nbaseTransfers public bst;\nmneStaking public mneStk;\nluckyDraw public lkd;\nexternalService public extS1;\nexternalReceiver public extR1;\naddress public updaterAddress = 0x0000000000000000000000000000000000000000;\naddress public payoutOwner = 0x0000000000000000000000000000000000000000;\naddress payable public secondaryPayoutAddress = 0x0000000000000000000000000000000000000000;\nuint8 public decimals;\nbool public payoutBlocked = false;\n","contract":"Minereum","time":0},{"type":"external-function ","before":"function UpgradeOthersToLevel2FromLevel1(address[] memory _addresses) public payable {\n\n        uint count = _addresses.length;\n\n        if (msg.value != (pc.ethFeeToUpgradeToLevel2() * count)) revert('(msg.value != pc.ethFeeToUpgradeToLevel2()*count)');\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel2FromLevel1(_addresses[i], pc.ethFeeToUpgradeToLevel2());\n\n            i++;\n\n        }\n\n    }","after":"function UpgradeOthersToLevel2FromLevel1(address[] calldata _addresses) public payable {\n\n        uint count = _addresses.length;\n\n        if (msg.value != (pc.ethFeeToUpgradeToLevel2() * count)) revert('(msg.value != pc.ethFeeToUpgradeToLevel2()*count)');\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel2FromLevel1(_addresses[i], pc.ethFeeToUpgradeToLevel2());\n\n            i++;\n\n        }\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function UpgradeOthersToLevel3FromLevel1(address[] memory _addresses) public payable {\n\n        uint count = _addresses.length;\n\n        if (msg.value != ((pc.ethFeeToUpgradeToLevel2() + pc.ethFeeToUpgradeToLevel3()) * count)) revert('(weiValue != ((msg.value + pc.ethFeeToUpgradeToLevel3())*count))');\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel3FromLevel1(_addresses[i], (pc.ethFeeToUpgradeToLevel2() + pc.ethFeeToUpgradeToLevel3()));\n\n            i++;\n\n        }\n\n    }","after":"function UpgradeOthersToLevel3FromLevel1(address[] calldata _addresses) public payable {\n\n        uint count = _addresses.length;\n\n        if (msg.value != ((pc.ethFeeToUpgradeToLevel2() + pc.ethFeeToUpgradeToLevel3()) * count)) revert('(weiValue != ((msg.value + pc.ethFeeToUpgradeToLevel3())*count))');\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel3FromLevel1(_addresses[i], (pc.ethFeeToUpgradeToLevel2() + pc.ethFeeToUpgradeToLevel3()));\n\n            i++;\n\n        }\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function UpgradeOthersToLevel3FromLevel2(address[] memory _addresses) public payable {\n\n        uint count = _addresses.length;\n\n        if (msg.value != (pc.ethFeeToUpgradeToLevel3() * count)) revert('(msg.value != (pc.ethFeeToUpgradeToLevel3()*count))');\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel3FromLevel2(_addresses[i], pc.ethFeeToUpgradeToLevel3());\n\n            i++;\n\n        }\n\n    }","after":"function UpgradeOthersToLevel3FromLevel2(address[] calldata _addresses) public payable {\n\n        uint count = _addresses.length;\n\n        if (msg.value != (pc.ethFeeToUpgradeToLevel3() * count)) revert('(msg.value != (pc.ethFeeToUpgradeToLevel3()*count))');\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel3FromLevel2(_addresses[i], pc.ethFeeToUpgradeToLevel3());\n\n            i++;\n\n        }\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function UpgradeOthersToLevel3FromDev(address[] memory _addresses) public {\n\n        uint count = _addresses.length;\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel3FromDev(_addresses[i]);\n\n            i++;\n\n        }\n\n    }","after":"function UpgradeOthersToLevel3FromDev(address[] calldata _addresses) public {\n\n        uint count = _addresses.length;\n\n        uint i = 0;\n\n        while (i < count)\n\n        {\n\n            gn.UpgradeToLevel3FromDev(_addresses[i]);\n\n            i++;\n\n        }\n\n    }","contract":"Minereum","time":1},{"type":"external-function ","before":"function BurnGenesisAddresses(address[] memory _genesisAddressesToBurn) public\n\n    {\n\n        uint i = 0;\n\n        while (i < _genesisAddressesToBurn.length)\n\n        {\n\n            emit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\n            i++;\n\n        }\n\n        gn.BurnGenesisAddresses(msg.sender, _genesisAddressesToBurn);\n\n    }","after":"function BurnGenesisAddresses(address[] calldata _genesisAddressesToBurn) public\n\n    {\n\n        uint i = 0;\n\n        while (i < _genesisAddressesToBurn.length)\n\n        {\n\n            emit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\n            i++;\n\n        }\n\n        gn.BurnGenesisAddresses(msg.sender, _genesisAddressesToBurn);\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function StakeTransferGenesis(address _to, uint256 _value, address[] memory _genesisAddressesToBurn) public {\n\n        if (_to == address(this)) revert('if (_to == address(this))');\n\n        uint i = 0;\n\n        while (i < _genesisAddressesToBurn.length)\n\n        {\n\n            emit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\n            i++;\n\n        }\n\n        st.StakeTransferGenesis(msg.sender, _to, _value, _genesisAddressesToBurn);\n\n        emit StakeTransfer(msg.sender, _to, _value);\n\n    }","after":"function StakeTransferGenesis(address _to, uint256 _value, address[] calldata _genesisAddressesToBurn) public {\n\n        if (_to == address(this)) revert('if (_to == address(this))');\n\n        uint i = 0;\n\n        while (i < _genesisAddressesToBurn.length)\n\n        {\n\n            emit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\n            i++;\n\n        }\n\n        st.StakeTransferGenesis(msg.sender, _to, _value, _genesisAddressesToBurn);\n\n        emit StakeTransfer(msg.sender, _to, _value);\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function BuyStakeGenesis(address payable _address, address[] memory _genesisAddressesToBurn) public payable {\n\n        uint256 balanceToSend = pc.stakeBalances(_address);\n\n        uint i = 0;\n\n        while (i < _genesisAddressesToBurn.length)\n\n        {\n\n            emit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\n            i++;\n\n        }\n\n        uint256 feesToPayToSeller = stb.BuyStakeGenesis(msg.sender, address(_address), _genesisAddressesToBurn, msg.value);\n\n        if (!_address.send(feesToPayToSeller)) revert();\n\n        emit StakeTransfer(_address, msg.sender, balanceToSend);\n\n    }","after":"function BuyStakeGenesis(address payable _address, address[] calldata _genesisAddressesToBurn) public payable {\n\n        uint256 balanceToSend = pc.stakeBalances(_address);\n\n        uint i = 0;\n\n        while (i < _genesisAddressesToBurn.length)\n\n        {\n\n            emit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\n            i++;\n\n        }\n\n        uint256 feesToPayToSeller = stb.BuyStakeGenesis(msg.sender, address(_address), _genesisAddressesToBurn, msg.value);\n\n        if (!_address.send(feesToPayToSeller)) revert();\n\n        emit StakeTransfer(_address, msg.sender, balanceToSend);\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function BuyLuckyDrawTickets(uint256[] memory max) public payable {\n\n        uint256 _mneToBurn = lkd.BuyTickets.value(msg.value)(msg.sender, max);\n\n        if (_mneToBurn > 0) BurnTokens(_mneToBurn);\n\n    }","after":"function BuyLuckyDrawTickets(uint256[] calldata max) public payable {\n\n        uint256 _mneToBurn = lkd.BuyTickets.value(msg.value)(msg.sender, max);\n\n        if (_mneToBurn > 0) BurnTokens(_mneToBurn);\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function Staking(uint256 _amountToStake, address[] memory _addressList, uint256[] memory uintList) public {\n\n        if (_amountToStake > 0)\n\n        {\n\n            bst.transfer(msg.sender, address(mneStk), _amountToStake);\n\n            emit Transfer(msg.sender, address(mneStk), _amountToStake);\n\n        }\n\n        mneStk.startStaking(msg.sender, _amountToStake, _addressList, uintList);\n\n    }","after":"function Staking(uint256 _amountToStake, address[] calldata _addressList, uint256[] calldata uintList) public {\n\n        if (_amountToStake > 0)\n\n        {\n\n            bst.transfer(msg.sender, address(mneStk), _amountToStake);\n\n            emit Transfer(msg.sender, address(mneStk), _amountToStake);\n\n        }\n\n        mneStk.startStaking(msg.sender, _amountToStake, _addressList, uintList);\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function registerAddresses(address[] memory _addressList) public {\n\n        uint i = 0;\n\n        if (pc.setupRunning() && msg.sender == pc.genesisCallerAddress())\n\n        {\n\n            while (i < _addressList.length)\n\n            {\n\n                emit Transfer(address(this), _addressList[i], gn.balanceOf(_addressList[i]));\n\n                i++;\n\n            }\n\n        }\n\n        else\n\n        {\n\n            revert();\n\n        }\n\n    }","after":"function registerAddresses(address[] calldata _addressList) public {\n\n        uint i = 0;\n\n        if (pc.setupRunning() && msg.sender == pc.genesisCallerAddress())\n\n        {\n\n            while (i < _addressList.length)\n\n            {\n\n                emit Transfer(address(this), _addressList[i], gn.balanceOf(_addressList[i]));\n\n                i++;\n\n            }\n\n        }\n\n        else\n\n        {\n\n            revert();\n\n        }\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function registerAddressesValue(address[] memory _addressList, uint _value) public {\n\n        uint i = 0;\n\n        if (pc.setupRunning() && msg.sender == pc.genesisCallerAddress())\n\n        {\n\n            while (i < _addressList.length)\n\n            {\n\n                emit Transfer(address(this), _addressList[i], _value);\n\n                i++;\n\n            }\n\n        }\n\n        else\n\n        {\n\n            revert();\n\n        }\n\n    }","after":"function registerAddressesValue(address[] calldata _addressList, uint _value) public {\n\n        uint i = 0;\n\n        if (pc.setupRunning() && msg.sender == pc.genesisCallerAddress())\n\n        {\n\n            while (i < _addressList.length)\n\n            {\n\n                emit Transfer(address(this), _addressList[i], _value);\n\n                i++;\n\n            }\n\n        }\n\n        else\n\n        {\n\n            revert();\n\n        }\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function ServiceFunction1(address[] memory _addressList, uint256[] memory _uintList) public payable {\n\n        uint256 _mneToBurn = extS1.externalFunction.value(msg.value)(msg.sender, _addressList, _uintList);\n\n        if (_mneToBurn > 0) BurnTokens(_mneToBurn);\n\n    }","after":"function ServiceFunction1(address[] calldata _addressList, uint256[] calldata _uintList) public payable {\n\n        uint256 _mneToBurn = extS1.externalFunction.value(msg.value)(msg.sender, _addressList, _uintList);\n\n        if (_mneToBurn > 0) BurnTokens(_mneToBurn);\n\n    }","contract":"Minereum","time":0},{"type":"external-function ","before":"function ReceiverFunction1(uint256 _mneAmount, address[] memory _addressList, uint256[] memory _uintList) public payable {\n\n        if (_mneAmount > 0)\n\n        {\n\n            bst.transfer(msg.sender, address(extR1), _mneAmount);\n\n            emit Transfer(msg.sender, address(extR1), _mneAmount);\n\n        }\n\n        extR1.externalFunction.value(msg.value)(msg.sender, _mneAmount, _addressList, _uintList);\n\n    }","after":"function ReceiverFunction1(uint256 _mneAmount, address[] calldata _addressList, uint256[] calldata _uintList) public payable {\n\n        if (_mneAmount > 0)\n\n        {\n\n            bst.transfer(msg.sender, address(extR1), _mneAmount);\n\n            emit Transfer(msg.sender, address(extR1), _mneAmount);\n\n        }\n\n        extR1.externalFunction.value(msg.value)(msg.sender, _mneAmount, _addressList, _uintList);\n\n    }","contract":"Minereum","time":0},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"Minereum","time":0},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"Minereum","time":0},{"type":"immutable-restrict-modification ","before":"uint8 public decimals;","after":"uint8 public immutable decimals;","contract":"Minereum","time":0}]}
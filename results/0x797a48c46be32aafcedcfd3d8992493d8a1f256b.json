{"time":167,"results":[{"type":"external-function ","before":"function addMintPass(\n        bytes32 _merkleRoot,\n        uint256 _windowOpens,\n        uint256 _windowCloses,\n        uint256 _mintPrice,\n        string memory _ipfsMetadataHash,\n        address _redeemableContract\n    ) external onlyOwner {\n        require(_windowOpens < _windowCloses, \"addMintPass: open window must be before close window\");\n        require(_windowOpens > 0 && _windowCloses > 0, \"addMintPass: window cannot be 0\");\n\n        MintPass storage mp = mintPasses[mpCounter.current()];\n        mp.merkleRoot = _merkleRoot;\n        mp.windowOpens = _windowOpens;\n        mp.windowCloses = _windowCloses;\n        mp.mintPrice = _mintPrice;\n        mp.ipfsMetadataHash = _ipfsMetadataHash;\n        mp.redeemableContract = _redeemableContract;\n\n        mpCounter.increment();\n    }","after":"function addMintPass(\n        bytes32 _merkleRoot,\n        uint256 _windowOpens,\n        uint256 _windowCloses,\n        uint256 _mintPrice,\n        string calldata _ipfsMetadataHash,\n        address _redeemableContract\n    ) external onlyOwner {\n        require(_windowOpens < _windowCloses, \"addMintPass: open window must be before close window\");\n        require(_windowOpens > 0 && _windowCloses > 0, \"addMintPass: window cannot be 0\");\n\n        MintPass storage mp = mintPasses[mpCounter.current()];\n        mp.merkleRoot = _merkleRoot;\n        mp.windowOpens = _windowOpens;\n        mp.windowCloses = _windowCloses;\n        mp.mintPrice = _mintPrice;\n        mp.ipfsMetadataHash = _ipfsMetadataHash;\n        mp.redeemableContract = _redeemableContract;\n\n        mpCounter.increment();\n    }","contract":"MintPassFactory","time":0},{"type":"external-function ","before":"function editMintPass(\n        bytes32 _merkleRoot,\n        uint256 _windowOpens,\n        uint256 _windowCloses,\n        uint256 _mintPrice,\n        string memory _ipfsMetadataHash,\n        address _redeemableContract,\n        uint256 _mpIndex\n    ) external onlyOwner {\n        require(_windowOpens < _windowCloses, \"editMintPass: open window must be before close window\");\n        require(_windowOpens > 0 && _windowCloses > 0, \"editMintPass: window cannot be 0\");\n\n        mintPasses[_mpIndex].merkleRoot = _merkleRoot;\n        mintPasses[_mpIndex].windowOpens = _windowOpens;\n        mintPasses[_mpIndex].windowCloses = _windowCloses;\n        mintPasses[_mpIndex].mintPrice = _mintPrice;\n        mintPasses[_mpIndex].ipfsMetadataHash = _ipfsMetadataHash;\n        mintPasses[_mpIndex].redeemableContract = _redeemableContract;\n    }","after":"function editMintPass(\n        bytes32 _merkleRoot,\n        uint256 _windowOpens,\n        uint256 _windowCloses,\n        uint256 _mintPrice,\n        string calldata _ipfsMetadataHash,\n        address _redeemableContract,\n        uint256 _mpIndex\n    ) external onlyOwner {\n        require(_windowOpens < _windowCloses, \"editMintPass: open window must be before close window\");\n        require(_windowOpens > 0 && _windowCloses > 0, \"editMintPass: window cannot be 0\");\n\n        mintPasses[_mpIndex].merkleRoot = _merkleRoot;\n        mintPasses[_mpIndex].windowOpens = _windowOpens;\n        mintPasses[_mpIndex].windowCloses = _windowCloses;\n        mintPasses[_mpIndex].mintPrice = _mintPrice;\n        mintPasses[_mpIndex].ipfsMetadataHash = _ipfsMetadataHash;\n        mintPasses[_mpIndex].redeemableContract = _redeemableContract;\n    }","contract":"MintPassFactory","time":0},{"type":"external-function ","before":"function setURI(string memory baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","after":"function setURI(string calldata baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","contract":"MintPassFactory","time":0},{"type":"external-function ","before":"function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","contract":"MintPassFactory","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"MintPassFactory","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"MintPassFactory","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"MintPassFactory","time":0},{"type":"immutable-restrict-modification ","before":"string public name_;","after":"string public immutable name_;","contract":"MintPassFactory","time":0},{"type":"immutable-restrict-modification ","before":"string public symbol_;","after":"string public immutable symbol_;","contract":"MintPassFactory","time":0}]}
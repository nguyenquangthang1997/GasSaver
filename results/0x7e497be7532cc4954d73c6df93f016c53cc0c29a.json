{"time":182,"results":[{"type":"external-function ","before":"e\n    function queryOracle(address token, uint8 op, bytes memory data) external override payable returns (uint256 _k, uint256 _ethAmount, uint256 _erc20Amount, uint256 _blockNum, uint256 _theta) {\n        require(callerAllowed[msg.sender], \"CoFiXCtrl: caller not allowed\");\n        (_ethAmount, _erc20Amount, _blockNum) = getLatestPrice(token);\n        CoFiX_OP cop = CoFiX_OP(op);\n        uint256 impactCost;\n        if (cop == CoFiX_OP.SWAP_WITH_EXACT) {\n            impactCost = calcImpactCostFor_SWAP_WITH_EXACT(token, data, _ethAmount, _erc20Amount);\n        } else if (cop == CoFiX_OP.SWAP_FOR_EXACT) {\n            revert(\"disabled experimental feature!\");\n            // ctrl-v2: disable swapForExact function\n        } else if (cop == CoFiX_OP.BURN) {\n            impactCost = calcImpactCostFor_BURN(token, data, _ethAmount, _erc20Amount);\n        }\n        _k = K_EXPECTED_VALUE.add(impactCost);\n        // ctrl-v2: adjustable K + impactCost is the final K\n        _theta = KInfoMap[token][2];\n        return (_k, _ethAmount, _erc20Amount, _blockNum, _theta);","after":"e\n    function queryOracle(address token, uint8 op, bytes memory data) external override payable returns (uint256 _k, uint256 _ethAmount, uint256 _erc20Amount, uint256 _blockNum, uint256 _theta) {\n        require(callerAllowed[msg.sender], \"CoFiXCtrl: caller not allowed\");\n        (_ethAmount, _erc20Amount, _blockNum) = getLatestPrice(token);\n        CoFiX_OP cop = CoFiX_OP(op);\n        uint256 impactCost;\n        if (cop == CoFiX_OP.SWAP_WITH_EXACT) {\n            impactCost = calcImpactCostFor_SWAP_WITH_EXACT(token, data, _ethAmount, _erc20Amount);\n        } else if (cop == CoFiX_OP.SWAP_FOR_EXACT) {\n            revert(\"disabled experimental feature!\");\n            // ctrl-v2: disable swapForExact function\n        } else if (cop == CoFiX_OP.BURN) {\n            impactCost = calcImpactCostFor_BURN(token, data, _ethAmount, _erc20Amount);\n        }\n        _k = K_EXPECTED_VALUE.add(impactCost);\n        // ctrl-v2: adjustable K + impactCost is the final K\n        _theta = KInfoMap[token][2];\n        return (_k, _ethAmount, _erc20Amount, _blockNum, _theta);","contract":"CoFiXControllerV2","time":0},{"type":"external-function ","before":"\n\n    function calcImpactCostFor_SWAP_FOR_EXACT(address token, bytes memory data, uint256 ethAmount, uint256 erc20Amount) public pure returns (uint256 impactCost) {\n        (, address outToken, uint256 amountOutExact,) = abi.decode(data, (address, address, uint256, address));\n        if (outToken != token) {\n            // buy in ETH, outToken is ETH, amountOutExact is ETH\n            return impactCostForBuyInETH(amountOutExact);\n        }\n        // sell out ETH, amountIn is ETH, amountOutExact is token\n        // convert to amountOutExact in ETH\n        uint256 vol = uint256(amountOutExact).mul(ethAmount).div(erc20Amount);\n        return impactCostForSellOutETH(vol);","after":"\n\n    function calcImpactCostFor_SWAP_FOR_EXACT(address token, bytes calldata data, uint256 ethAmount, uint256 erc20Amount) public pure returns (uint256 impactCost) {\n        (, address outToken, uint256 amountOutExact,) = abi.decode(data, (address, address, uint256, address));\n        if (outToken != token) {\n            // buy in ETH, outToken is ETH, amountOutExact is ETH\n            return impactCostForBuyInETH(amountOutExact);\n        }\n        // sell out ETH, amountIn is ETH, amountOutExact is token\n        // convert to amountOutExact in ETH\n        uint256 vol = uint256(amountOutExact).mul(ethAmount).div(erc20Amount);\n        return impactCostForSellOutETH(vol);","contract":"CoFiXControllerV2","time":0},{"type":"constant-restrict-modification  ","before":"e\n    int128 public MAX_K0 = 0xCCCCCCCCCC","after":"e\n    int128 public constant MAX_K0 = 0xCCCCCCCCCC","contract":"CoFiXControllerV2","time":0},{"type":"constant-restrict-modification  ","before":")\n    int128 public GAMMA = 0x80000000000","after":")\n    int128 public constant GAMMA = 0x80000000000","contract":"CoFiXControllerV2","time":0}]}
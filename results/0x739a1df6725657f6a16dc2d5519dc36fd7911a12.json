{"time":161,"results":[{"type":"constant-restrict-modification  ","before":" bytes32 FILE = \"Getters\"","after":" bytes32 constant FILE = \"Getters\"","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function callFunction(\n\n        address /* sender */,\n\n        Account.Info memory account,\n\n        bytes memory data\n\n    )\n\n    public\n\n    onlySolo(msg.sender)\n\n    {\n\n        CallFunctionType callType = abi.decode(data, (CallFunctionType));\n\n        if (callType == CallFunctionType.SetExpiry) {\n\n            callFunctionSetExpiry(account.owner, data);\n\n        } else {\n\n            callFunctionSetApproval(account.owner, data);\n\n        }\n\n    ","after":" function callFunction(\n\n        address /* sender */,\n\n        Account.Info calldata account,\n\n        bytes calldata data\n\n    )\n\n    public\n\n    onlySolo(msg.sender)\n\n    {\n\n        CallFunctionType callType = abi.decode(data, (CallFunctionType));\n\n        if (callType == CallFunctionType.SetExpiry) {\n\n            callFunctionSetExpiry(account.owner, data);\n\n        } else {\n\n            callFunctionSetApproval(account.owner, data);\n\n        }\n\n    ","contract":"ExpiryV2","time":0},{"type":"external-function ","before":" function getTradeCost(\n\n        uint256 inputMarketId,\n\n        uint256 outputMarketId,\n\n        Account.Info memory makerAccount,\n\n        Account.Info memory /* takerAccount */,\n\n        Types.Par memory oldInputPar,\n\n        Types.Par memory newInputPar,\n\n        Types.Wei memory inputWei,\n\n        bytes memory data\n\n    )\n\n    public\n\n    onlySolo(msg.sender)\n\n    returns (Types.AssetAmount memory)\n\n    {\n\n        // return zero if input amount is zero\n\n        if (inputWei.isZero()) {\n\n            return Types.AssetAmount({\n\n            sign : true,\n\n            denomination : Types.AssetDenomination.Par,\n\n            ref : Types.AssetReference.Delta,\n\n            value : 0\n\n            });\n\n        }\n\n\n        (uint256 owedMarketId, uint32 maxExpiry) = abi.decode(data, (uint256, uint32));\n\n\n        uint32 expiry = getExpiry(makerAccount, owedMarketId);\n\n\n        // validate expiry\n\n        Require.that(\n\n            expiry != 0,\n\n            FILE,\n\n            \"Expiry not set\",\n\n            makerAccount.owner,\n\n            makerAccount.number,\n\n            owedMarketId\n\n        );\n\n        Require.that(\n\n            expiry <= Time.currentTime(),\n\n            FILE,\n\n            \"Borrow not yet expired\",\n\n            expiry\n\n        );\n\n        Require.that(\n\n            expiry <= maxExpiry,\n\n            FILE,\n\n            \"Expiry past maxExpiry\",\n\n            expiry\n\n        );\n\n\n        return getTradeCostInternal(\n\n            inputMarketId,\n\n            outputMarketId,\n\n            makerAccount,\n\n            oldInputPar,\n\n            newInputPar,\n\n            inputWei,\n\n            owedMarketId,\n\n            expiry\n\n        );\n\n    ","after":" function getTradeCost(\n\n        uint256 inputMarketId,\n\n        uint256 outputMarketId,\n\n        Account.Info calldata makerAccount,\n\n        Account.Info calldata /* takerAccount */,\n\n        Types.Par calldata oldInputPar,\n\n        Types.Par calldata newInputPar,\n\n        Types.Wei calldata inputWei,\n\n        bytes calldata data\n\n    )\n\n    public\n\n    onlySolo(msg.sender)\n\n    returns (Types.AssetAmount memory)\n\n    {\n\n        // return zero if input amount is zero\n\n        if (inputWei.isZero()) {\n\n            return Types.AssetAmount({\n\n            sign : true,\n\n            denomination : Types.AssetDenomination.Par,\n\n            ref : Types.AssetReference.Delta,\n\n            value : 0\n\n            });\n\n        }\n\n\n        (uint256 owedMarketId, uint32 maxExpiry) = abi.decode(data, (uint256, uint32));\n\n\n        uint32 expiry = getExpiry(makerAccount, owedMarketId);\n\n\n        // validate expiry\n\n        Require.that(\n\n            expiry != 0,\n\n            FILE,\n\n            \"Expiry not set\",\n\n            makerAccount.owner,\n\n            makerAccount.number,\n\n            owedMarketId\n\n        );\n\n        Require.that(\n\n            expiry <= Time.currentTime(),\n\n            FILE,\n\n            \"Borrow not yet expired\",\n\n            expiry\n\n        );\n\n        Require.that(\n\n            expiry <= maxExpiry,\n\n            FILE,\n\n            \"Expiry past maxExpiry\",\n\n            expiry\n\n        );\n\n\n        return getTradeCostInternal(\n\n            inputMarketId,\n\n            outputMarketId,\n\n            makerAccount,\n\n            oldInputPar,\n\n            newInputPar,\n\n            inputWei,\n\n            owedMarketId,\n\n            expiry\n\n        );\n\n    ","contract":"ExpiryV2","time":0}]}
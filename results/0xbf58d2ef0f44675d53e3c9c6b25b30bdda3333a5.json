{"time":1350,"results":[{"type":"immutable-restrict-modification ","before":"address public trustedForwarder;","after":"address public immutable trustedForwarder;","contract":"CompoundPrizePoolBuilder","time":0},{"type":"external-function ","before":"function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        CTokenInterface _cToken\n    )\n    public\n    initializer\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        cToken = _cToken;\n\n        emit CompoundPrizePoolInitialized(address(cToken));\n    }","after":"function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        CTokenInterface _cToken\n    )\n    public\n    initializer\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        cToken = _cToken;\n\n        emit CompoundPrizePoolInitialized(address(cToken));\n    }","contract":"CompoundPrizePoolHarness","time":0},{"type":"external-function ","before":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","after":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","contract":"CompoundPrizePoolHarness","time":0},{"type":"loop-calculation","before":"VolumeDrip.State storage state = volumeDrips[source].volumeDrips[measure][dripToken];","after":"// move outside for loop\nVolumeDrip.State storage state = volumeDrips[source].volumeDrips[measure][dripToken];","loc":{"start":{"line":1533,"column":12},"end":{"line":1533,"column":96}},"contract":"Comptroller","time":0},{"type":"loop-calculation","before":"VolumeDrip.State storage referralState = referralVolumeDrips[source].volumeDrips[measure][dripToken];","after":"// move outside for loop\nVolumeDrip.State storage referralState = referralVolumeDrips[source].volumeDrips[measure][dripToken];","loc":{"start":{"line":1549,"column":12},"end":{"line":1549,"column":112}},"contract":"Comptroller","time":0},{"type":"loop-calculation","before":"BalanceDrip.State storage state = balanceDrips[source].balanceDrips[measure][dripToken];","after":"// move outside for loop\nBalanceDrip.State storage state = balanceDrips[source].balanceDrips[measure][dripToken];","loc":{"start":{"line":1603,"column":12},"end":{"line":1603,"column":99}},"contract":"Comptroller","time":0},{"type":"immutable-restrict-modification ","before":"address public trustedForwarder;","after":"address public immutable trustedForwarder;","contract":"ControlledTokenBuilder","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Dai","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Dai","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 public DOMAIN_SEPARATOR;","after":"bytes32 public immutable DOMAIN_SEPARATOR;","contract":"Dai","time":0},{"type":"external-function ","before":"function __waffle__mockReverts(bytes memory data) public {\n        mockConfig[keccak256(data)] = MockCall({\n        initialized : true,\n        reverts : true,\n        returnValue : \"\"\n        });\n    }","after":"function __waffle__mockReverts(bytes calldata data) public {\n        mockConfig[keccak256(data)] = MockCall({\n        initialized : true,\n        reverts : true,\n        returnValue : \"\"\n        });\n    }","contract":"DoppelgangerWithExec","time":0},{"type":"external-function ","before":"function __waffle__mockReturns(bytes memory data, bytes memory value) public {\n        mockConfig[keccak256(data)] = MockCall({\n        initialized : true,\n        reverts : false,\n        returnValue : value\n        });\n    }","after":"function __waffle__mockReturns(bytes calldata data, bytes calldata value) public {\n        mockConfig[keccak256(data)] = MockCall({\n        initialized : true,\n        reverts : false,\n        returnValue : value\n        });\n    }","contract":"DoppelgangerWithExec","time":0},{"type":"state-data-arrangement ","before":"\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a\n   mapping(address => EnumerableSet.UintSet) private _holderToke\n   EnumerableMap.UintToAddressMap private _tokenOwne\n   mapping(uint256 => address) private _tokenApprova\n   mapping(address => mapping(address => bool)) private _operatorApprova\n   string private _na\n   string private _symb\n   mapping(uint256 => string) private _tokenUR\n   string private _baseU\n   bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58\n   bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e13\n   bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d\n   uint256[41] private __g","after":"   mapping(address => EnumerableSet.UintSet) private _holderToke\n   EnumerableMap.UintToAddressMap private _tokenOwne\n   mapping(uint256 => address) private _tokenApprova\n   mapping(address => mapping(address => bool)) private _operatorApprova\n   string private _na\n   string private _symb\n   mapping(uint256 => string) private _tokenUR\n   string private _baseU\n   uint256[41] private __g\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a\n   bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58\n   bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e13\n   bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d\n","contract":"ERC721UpgradeSafe","time":0},{"type":"loop-duplication","before":"\nstart line 6689 column 8, end line 6696 column 8\n   for (i = 0; i < users.length; i++) {\n            address user = users[i];\n            if (_unlockTimestamps[user] <= _currentTime()) {\n                totalWithdrawal = totalWithdrawal.add(_timelockBalances[user]);\n                balances[i] = _timelockBalances[user];\n                delete _timelockBalances[user];\n            }\n      \nstart line 6709 column 8, end line 6717 column 8\n   for (i = 0; i < users.length; i++) {\n            if (balances[i] > 0) {\n                delete _unlockTimestamps[users[i]];\n                uint256 shareMantissa = FixedPoint.calculateMantissa(balances[i], totalWithdrawal);\n                uint256 transferAmount = FixedPoint.multiplyUintByMantissa(redeemed, shareMantissa);\n                underlyingToken.safeTransfer(users[i], transferAmount);\n                emit TimelockedWithdrawalSwept(operator, users[i], balances[i], transferAmount);\n            }\n      ","after":"// merge loop\n\nstart line 6689 column 8, end line 6696 column 8\n   for (i = 0; i < users.length; i++) {\n            address user = users[i];\n            if (_unlockTimestamps[user] <= _currentTime()) {\n                totalWithdrawal = totalWithdrawal.add(_timelockBalances[user]);\n                balances[i] = _timelockBalances[user];\n                delete _timelockBalances[user];\n            }\n      \nstart line 6709 column 8, end line 6717 column 8\n   for (i = 0; i < users.length; i++) {\n            if (balances[i] > 0) {\n                delete _unlockTimestamps[users[i]];\n                uint256 shareMantissa = FixedPoint.calculateMantissa(balances[i], totalWithdrawal);\n                uint256 transferAmount = FixedPoint.multiplyUintByMantissa(redeemed, shareMantissa);\n                underlyingToken.safeTransfer(users[i], transferAmount);\n                emit TimelockedWithdrawalSwept(operator, users[i], balances[i], transferAmount);\n            }\n      ","contract":"PrizePool","time":0},{"type":"external-function ","before":"   function initializeAll(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        YieldSourceStub _stubYieldSource\n    )\n    public\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        stubYieldSource = _stubYieldSource;\n  ","after":"   function initializeAll(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        YieldSourceStub _stubYieldSource\n    )\n    public\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        stubYieldSource = _stubYieldSource;\n  ","contract":"PrizePoolHarness","time":0},{"type":"external-function ","before":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","after":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","contract":"PrizePoolHarness","time":0},{"type":"immutable-restrict-modification ","before":"   address public trustedForward","after":"   address public trustedForward","contract":"SingleRandomWinnerBuilder","time":1},{"type":"external-function ","before":"   function initialize(\n        address _trustedForwarder,\n        uint256 _prizePeriodStart,\n        uint256 _prizePeriodSeconds,\n        PrizePool _prizePool,\n        address _ticket,\n        address _sponsorship,\n        RNGInterface _rng,\n        address[] memory _externalErc20s\n    ) public initializer {\n        require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n        require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n        require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n        require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n        require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n        prizePool = _prizePool;\n        ticket = TicketInterface(_ticket);\n        rng = _rng;\n        sponsorship = IERC20(_sponsorship);\n        trustedForwarder = _trustedForwarder;\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n        for (uint256 i = 0; i < _externalErc20s.length; i++) {\n            require(prizePool.canAwardExternal(_externalErc20s[i]), \"PeriodicPrizeStrategy/cannot-award-external\");\n        }\n        externalErc20s.initialize();\n        externalErc20s.addAddresses(_externalErc20s);\n\n        prizePeriodSeconds = _prizePeriodSeconds;\n        prizePeriodStartedAt = _prizePeriodStart;\n\n        externalErc721s.initialize();\n\n        // 1 hour timeout\n        _setRngRequestTimeout(3600);\n\n        emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  ","after":"   function initialize(\n        address _trustedForwarder,\n        uint256 _prizePeriodStart,\n        uint256 _prizePeriodSeconds,\n        PrizePool _prizePool,\n        address _ticket,\n        address _sponsorship,\n        RNGInterface _rng,\n        address[] calldata _externalErc20s\n    ) public initializer {\n        require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n        require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n        require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n        require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n        require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n        prizePool = _prizePool;\n        ticket = TicketInterface(_ticket);\n        rng = _rng;\n        sponsorship = IERC20(_sponsorship);\n        trustedForwarder = _trustedForwarder;\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n        for (uint256 i = 0; i < _externalErc20s.length; i++) {\n            require(prizePool.canAwardExternal(_externalErc20s[i]), \"PeriodicPrizeStrategy/cannot-award-external\");\n        }\n        externalErc20s.initialize();\n        externalErc20s.addAddresses(_externalErc20s);\n\n        prizePeriodSeconds = _prizePeriodSeconds;\n        prizePeriodStartedAt = _prizePeriodStart;\n\n        externalErc721s.initialize();\n\n        // 1 hour timeout\n        _setRngRequestTimeout(3600);\n\n        emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  ","contract":"SingleRandomWinnerHarness","time":0},{"type":"loop-calculation","before":"   uint nodeValue = tree.nodes[nodeInde","after":"// move outside for loop\n   uint nodeValue = tree.nodes[nodeInde","loc":{"start":{"line":8514,"column":16},"end":{"line":8514,"column":54}},"contract":"SortitionSumTreeFactory","time":0},{"type":"external-function ","before":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        IERC20 _stakeToken\n    )\n    public\n    initializer\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        stakeToken = _stakeToken;\n\n        emit StakePrizePoolInitialized(address(stakeToken));\n  ","after":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        IERC20 _stakeToken\n    )\n    public\n    initializer\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        stakeToken = _stakeToken;\n\n        emit StakePrizePoolInitialized(address(stakeToken));\n  ","contract":"StakePrizePool","time":0},{"type":"external-function ","before":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","after":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","contract":"StakePrizePool","time":0},{"type":"immutable-restrict-modification ","before":"   address public trustedForward","after":"   address public trustedForward","contract":"StakePrizePoolBuilder","time":0},{"type":"external-function ","before":"   function initialize(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        address _trustedForwarder,\n        TokenControllerInterface _controller\n    )\n    public\n    virtual\n    override\n    initializer\n    {\n        super.initialize(_name, _symbol, _decimals, _trustedForwarder, _controller);\n        sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\n  ","after":"   function initialize(\n        string calldata _name,\n        string calldata _symbol,\n        uint8 _decimals,\n        address _trustedForwarder,\n        TokenControllerInterface _controller\n    )\n    public\n    virtual\n    override\n    initializer\n    {\n        super.initialize(_name, _symbol, _decimals, _trustedForwarder, _controller);\n        sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\n  ","contract":"Ticket","time":0},{"type":"external-function ","before":"function initialize(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        address _trustedForwarder,\n        TokenControllerInterface _controller\n    )\n    public\n    virtual\n    initializer\n    {\n        trustedForwarder = _trustedForwarder;\n        __ERC20_init(_name, _symbol);\n        controller = _controller;\n        _setupDecimals(_decimals);\n    }","after":"function initialize(\n        string calldata _name,\n        string calldata _symbol,\n        uint8 _decimals,\n        address _trustedForwarder,\n        TokenControllerInterface _controller\n    )\n    public\n    virtual\n    initializer\n    {\n        trustedForwarder = _trustedForwarder;\n        __ERC20_init(_name, _symbol);\n        controller = _controller;\n        _setupDecimals(_decimals);\n    }","contract":"Ticket","time":0},{"type":"external-function ","before":"   function verify(\n        ForwardRequest memory req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    external override view {\n\n        _verifyNonce(req);\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n  ","after":"   function verify(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    external override view {\n\n        _verifyNonce(req);\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n  ","contract":"TrustedForwarder","time":0},{"type":"external-function ","before":"   function execute(\n        ForwardRequest memory req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig\n    )\n    external payable\n    override\n    returns (bool success, bytes memory ret) {\n        _verifyNonce(req);\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n        _updateNonce(req);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (success, ret) = req.to.call{gas : req.gas, value : req.value}(abi.encodePacked(req.data, req.from));\n        if (address(this).balance > 0) {\n            //can't fail: req.from signed (off-chain) the request, so it must be an EOA...\n            payable(req.from).transfer(address(this).balance);\n        }\n        return (success, ret);\n  ","after":"   function execute(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig\n    )\n    external payable\n    override\n    returns (bool success, bytes memory ret) {\n        _verifyNonce(req);\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n        _updateNonce(req);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (success, ret) = req.to.call{gas : req.gas, value : req.value}(abi.encodePacked(req.data, req.from));\n        if (address(this).balance > 0) {\n            //can't fail: req.from signed (off-chain) the request, so it must be an EOA...\n            payable(req.from).transfer(address(this).balance);\n        }\n        return (success, ret);\n  ","contract":"TrustedForwarder","time":0},{"type":"immutable-restrict-modification ","before":"   address public trustedForward","after":"   address public trustedForward","contract":"yVaultPrizePoolBuilder","time":1},{"type":"external-function ","before":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        yVaultInterface _vault,\n        uint256 _reserveRateMantissa\n    )\n    public\n    initializer\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        vault = _vault;\n        _setReserveRateMantissa(_reserveRateMantissa);\n\n        emit yVaultPrizePoolInitialized(address(vault));\n  ","after":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration,\n        yVaultInterface _vault,\n        uint256 _reserveRateMantissa\n    )\n    public\n    initializer\n    {\n        PrizePool.initialize(\n            _trustedForwarder,\n            _reserveRegistry,\n            _controlledTokens,\n            _maxExitFeeMantissa,\n            _maxTimelockDuration\n        );\n        vault = _vault;\n        _setReserveRateMantissa(_reserveRateMantissa);\n\n        emit yVaultPrizePoolInitialized(address(vault));\n  ","contract":"yVaultPrizePoolHarness","time":0},{"type":"external-function ","before":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] memory _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","after":"   function initialize(\n        address _trustedForwarder,\n        RegistryInterface _reserveRegistry,\n        address[] calldata _controlledTokens,\n        uint256 _maxExitFeeMantissa,\n        uint256 _maxTimelockDuration\n    )\n    public\n    initializer\n    {\n        require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n        require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n        _tokens.initialize();\n        for (uint256 i = 0; i < _controlledTokens.length; i++) {\n            _addControlledToken(_controlledTokens[i]);\n        }\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _setLiquidityCap(uint256(- 1));\n\n        trustedForwarder = _trustedForwarder;\n        reserveRegistry = _reserveRegistry;\n        maxExitFeeMantissa = _maxExitFeeMantissa;\n        maxTimelockDuration = _maxTimelockDuration;\n\n        emit Initialized(\n            _trustedForwarder,\n            address(_reserveRegistry),\n            maxExitFeeMantissa,\n            maxTimelockDuration\n        );\n  ","contract":"yVaultPrizePoolHarness","time":0}]}
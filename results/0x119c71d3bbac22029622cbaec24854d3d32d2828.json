{"time":424,"results":[{"type":"external-function ","before":"   function remainingsRaw(bytes32[] memory orderHashes) external view returns (uint256[] memory) {\n        uint256[] memory results = new uint256[](orderHashes.length);\n        for (uint256 i = 0; i < orderHashes.length; i++) {\n            results[i] = _remaining[orderHashes[i]];\n        }\n        return results;\n  ","after":"   function remainingsRaw(bytes32[] calldata orderHashes) external view returns (uint256[] memory) {\n        uint256[] memory results = new uint256[](orderHashes.length);\n        for (uint256 i = 0; i < orderHashes.length; i++) {\n            results[i] = _remaining[orderHashes[i]];\n        }\n        return results;\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function cancelOrder(Order memory order) external {\n        require(order.maker == msg.sender, \"LOP: Access denied\");\n\n        bytes32 orderHash = hashOrder(order);\n        uint256 orderRemaining = _remaining[orderHash];\n        require(orderRemaining != _ORDER_FILLED, \"LOP: already filled\");\n        emit OrderCanceled(msg.sender, orderHash, orderRemaining);\n        _remaining[orderHash] = _ORDER_FILLED;\n  ","after":"   function cancelOrder(Order calldata order) external {\n        require(order.maker == msg.sender, \"LOP: Access denied\");\n\n        bytes32 orderHash = hashOrder(order);\n        uint256 orderRemaining = _remaining[orderHash];\n        require(orderRemaining != _ORDER_FILLED, \"LOP: already filled\");\n        emit OrderCanceled(msg.sender, orderHash, orderRemaining);\n        _remaining[orderHash] = _ORDER_FILLED;\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function fillOrder(\n        Order memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount\n    ) external returns (uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, msg.sender);\n  ","after":"   function fillOrder(\n        Order calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount\n    ) external returns (uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, msg.sender);\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function fillOrderToWithPermit(\n        Order memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount,\n        address target,\n        bytes calldata permit\n    ) external returns (uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        require(permit.length >= 20, \"LOP: permit length too low\");\n        (address token, bytes calldata permitData) = permit.decodeTargetAndData();\n        _permit(token, permitData);\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, target);\n  ","after":"   function fillOrderToWithPermit(\n        Order calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount,\n        address target,\n        bytes calldata permit\n    ) external returns (uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        require(permit.length >= 20, \"LOP: permit length too low\");\n        (address token, bytes calldata permitData) = permit.decodeTargetAndData();\n        _permit(token, permitData);\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, target);\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"function arbitraryStaticCall(address target, bytes memory data) external view returns (uint256) {\n        (bytes memory result) = target.functionStaticCall(data, \"AC: arbitraryStaticCall\");\n        return abi.decode(result, (uint256));\n    }","after":"function arbitraryStaticCall(address target, bytes calldata data) external view returns (uint256) {\n        (bytes memory result) = target.functionStaticCall(data, \"AC: arbitraryStaticCall\");\n        return abi.decode(result, (uint256));\n    }","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function eq(uint256 value, address target, bytes memory data) external view returns (bool) {\n        bytes memory result = target.functionStaticCall(data, \"PH: eq\");\n        require(result.length == 32, \"PH: invalid call result\");\n        return abi.decode(result, (uint256)) == value;\n  ","after":"   function eq(uint256 value, address target, bytes calldata data) external view returns (bool) {\n        bytes memory result = target.functionStaticCall(data, \"PH: eq\");\n        require(result.length == 32, \"PH: invalid call result\");\n        return abi.decode(result, (uint256)) == value;\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function lt(uint256 value, address target, bytes memory data) external view returns (bool) {\n        bytes memory result = target.functionStaticCall(data, \"PH: lt\");\n        require(result.length == 32, \"PH: invalid call result\");\n        return abi.decode(result, (uint256)) < value;\n  ","after":"   function lt(uint256 value, address target, bytes calldata data) external view returns (bool) {\n        bytes memory result = target.functionStaticCall(data, \"PH: lt\");\n        require(result.length == 32, \"PH: invalid call result\");\n        return abi.decode(result, (uint256)) < value;\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function gt(uint256 value, address target, bytes memory data) external view returns (bool) {\n        bytes memory result = target.functionStaticCall(data, \"PH: gt\");\n        require(result.length == 32, \"PH: invalid call result\");\n        return abi.decode(result, (uint256)) > value;\n  ","after":"   function gt(uint256 value, address target, bytes calldata data) external view returns (bool) {\n        bytes memory result = target.functionStaticCall(data, \"PH: gt\");\n        require(result.length == 32, \"PH: invalid call result\");\n        return abi.decode(result, (uint256)) > value;\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function fillOrderRFQ(\n        OrderRFQ memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount\n    ) external returns (uint256, uint256) {\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, msg.sender);\n  ","after":"   function fillOrderRFQ(\n        OrderRFQ calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount\n    ) external returns (uint256, uint256) {\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, msg.sender);\n  ","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"   function fillOrderRFQToWithPermit(\n        OrderRFQ memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        address target,\n        bytes calldata permit\n    ) external returns (uint256, uint256) {\n        _permit(address(order.takerAsset), permit);\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, target);\n  ","after":"   function fillOrderRFQToWithPermit(\n        OrderRFQ calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        address target,\n        bytes calldata permit\n    ) external returns (uint256, uint256) {\n        _permit(address(order.takerAsset), permit);\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, target);\n  ","contract":"LimitOrderProtocol","time":0}]}
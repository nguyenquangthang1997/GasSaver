{"time":148,"results":[{"type":"state-data-arrangement ","before":"\nbool public breaker = false;\nmapping(address => uint) public voteLock;\nmapping(uint => Proposal) public proposals;\nuint public proposalCount;\nuint public period = 17280;\nuint public lock = 17280;\nuint public minimum = 1e18;\nuint public quorum = 2000;\nbool public config = true;\naddress public governance;\nuint public totalVotes;\nmapping(address => uint) public votes;\nmapping(address => bool) public voters;\nIERC20 public token = IERC20(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\nuint256 public constant DURATION = 7 days;\nuint256 public periodFinish = 0;\nuint256 public rewardRate = 0;\nuint256 public lastUpdateTime;\nuint256 public rewardPerTokenStored;\nmapping(address => uint256) public userRewardPerTokenPaid;\nmapping(address => uint256) public rewards;","after":"mapping(address => uint) public voteLock;\nmapping(uint => Proposal) public proposals;\nuint public proposalCount;\nuint public period = 17280;\nuint public lock = 17280;\nuint public minimum = 1e18;\nuint public quorum = 2000;\nuint public totalVotes;\nmapping(address => uint) public votes;\nmapping(address => bool) public voters;\nIERC20 public token = IERC20(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\nuint256 public constant DURATION = 7 days;\nuint256 public periodFinish = 0;\nuint256 public rewardRate = 0;\nuint256 public lastUpdateTime;\nuint256 public rewardPerTokenStored;\nmapping(address => uint256) public userRewardPerTokenPaid;\nmapping(address => uint256) public rewards;\naddress public governance;\nbool public breaker = false;\nbool public config = true;\n","contract":"YearnGovernance","time":0},{"type":"struct-data-arrangement ","before":"\nuint id\naddress proposer\nmapping(address => uint) forVotes\nmapping(address => uint) againstVotes\nuint totalForVotes\nuint totalAgainstVotes\nuint start\nuint end\naddress executor\nstring hash\nuint totalVotesAvailable\nuint quorum\nuint quorumRequired\nbool open","after":"uint id\nmapping(address => uint) forVotes\nmapping(address => uint) againstVotes\nuint totalForVotes\nuint totalAgainstVotes\nuint start\nuint end\nstring hash\nuint totalVotesAvailable\nuint quorum\nuint quorumRequired\naddress proposer\naddress executor\nbool open\n","contract":"YearnGovernance","time":0},{"type":"external-function ","before":"function propose(address executor, string memory hash) public {\n\n        require(votesOf(msg.sender) > minimum, \"<minimum\");\n\n        proposals[proposalCount++] = Proposal({\n\n        id : proposalCount,\n\n        proposer : msg.sender,\n\n        totalForVotes : 0,\n\n        totalAgainstVotes : 0,\n\n        start : block.number,\n\n        end : period.add(block.number),\n\n        executor : executor,\n\n        hash : hash,\n\n        totalVotesAvailable : totalVotes,\n\n        quorum : 0,\n\n        quorumRequired : quorum,\n\n        open : true\n\n        });\n\n\n        emit NewProposal(proposalCount, msg.sender, block.number, period, executor);\n\n        voteLock[msg.sender] = lock.add(block.number);\n\n    }","after":"function propose(address executor, string calldata hash) public {\n\n        require(votesOf(msg.sender) > minimum, \"<minimum\");\n\n        proposals[proposalCount++] = Proposal({\n\n        id : proposalCount,\n\n        proposer : msg.sender,\n\n        totalForVotes : 0,\n\n        totalAgainstVotes : 0,\n\n        start : block.number,\n\n        end : period.add(block.number),\n\n        executor : executor,\n\n        hash : hash,\n\n        totalVotesAvailable : totalVotes,\n\n        quorum : 0,\n\n        quorumRequired : quorum,\n\n        open : true\n\n        });\n\n\n        emit NewProposal(proposalCount, msg.sender, block.number, period, executor);\n\n        voteLock[msg.sender] = lock.add(block.number);\n\n    }","contract":"YearnGovernance","time":0}]}
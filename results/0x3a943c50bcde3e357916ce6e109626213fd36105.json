{"time":27,"results":[{"type":"external-function ","before":"\n    function getDerivativeHash(Derivative memory _derivative) public pure returns (bytes32 derivativeHash) {\n\n        derivativeHash = keccak256(abi.encodePacked(\n\n                _derivative.margin,\n\n                _derivative.endTime,\n\n                _derivative.params,\n\n                _derivative.oracleId,\n\n                _derivative.token,\n\n                _derivative.syntheticId\n\n            ));\n\n","after":"\n    function getDerivativeHash(Derivative calldata _derivative) public pure returns (bytes32 derivativeHash) {\n\n        derivativeHash = keccak256(abi.encodePacked(\n\n                _derivative.margin,\n\n                _derivative.endTime,\n\n                _derivative.params,\n\n                _derivative.oracleId,\n\n                _derivative.token,\n\n                _derivative.syntheticId\n\n            ));\n\n","contract":"IDerivativeLogic","time":0},{"type":"external-function ","before":"\n    function getAuthorCommission(bytes32 _derivativeHash, Derivative memory _derivative) public nonReentrant returns (uint256 commission) {\n\n        // Initialize derivative if wasn't initialized before\n\n        _initDerivative(_derivativeHash, _derivative);\n\n        commission = commissionByHash[_derivativeHash];\n\n","after":"\n    function getAuthorCommission(bytes32 _derivativeHash, Derivative calldata _derivative) public nonReentrant returns (uint256 commission) {\n\n        // Initialize derivative if wasn't initialized before\n\n        _initDerivative(_derivativeHash, _derivative);\n\n        commission = commissionByHash[_derivativeHash];\n\n","contract":"SyntheticAggregator","time":0},{"type":"external-function ","before":"\n    function getAuthorAddress(bytes32 _derivativeHash, Derivative memory _derivative) public nonReentrant returns (address authorAddress) {\n\n        // Initialize derivative if wasn't initialized before\n\n        _initDerivative(_derivativeHash, _derivative);\n\n        authorAddress = authorAddressByHash[_derivativeHash];\n\n","after":"\n    function getAuthorAddress(bytes32 _derivativeHash, Derivative calldata _derivative) public nonReentrant returns (address authorAddress) {\n\n        // Initialize derivative if wasn't initialized before\n\n        _initDerivative(_derivativeHash, _derivative);\n\n        authorAddress = authorAddressByHash[_derivativeHash];\n\n","contract":"SyntheticAggregator","time":0},{"type":"external-function ","before":"\n    function getMargin(bytes32 _derivativeHash, Derivative memory _derivative) public nonReentrant returns (uint256 buyerMargin, uint256 sellerMargin) {\n\n        // If it's a pool, just return margin from syntheticId contract\n\n        if (_isPool(_derivativeHash, _derivative)) {\n\n            return IDerivativeLogic(_derivative.syntheticId).getMargin(_derivative);\n\n        }\n\n\n        // Initialize derivative if wasn't initialized before\n\n        _initDerivative(_derivativeHash, _derivative);\n\n\n        // Check if margins for _derivativeHash were already cached\n\n        buyerMargin = buyerMarginByHash[_derivativeHash];\n\n        sellerMargin = sellerMarginByHash[_derivativeHash];\n\n","after":"\n    function getMargin(bytes32 _derivativeHash, Derivative calldata _derivative) public nonReentrant returns (uint256 buyerMargin, uint256 sellerMargin) {\n\n        // If it's a pool, just return margin from syntheticId contract\n\n        if (_isPool(_derivativeHash, _derivative)) {\n\n            return IDerivativeLogic(_derivative.syntheticId).getMargin(_derivative);\n\n        }\n\n\n        // Initialize derivative if wasn't initialized before\n\n        _initDerivative(_derivativeHash, _derivative);\n\n\n        // Check if margins for _derivativeHash were already cached\n\n        buyerMargin = buyerMarginByHash[_derivativeHash];\n\n        sellerMargin = sellerMarginByHash[_derivativeHash];\n\n","contract":"SyntheticAggregator","time":0},{"type":"external-function ","before":"\n    function isPool(bytes32 _derivativeHash, Derivative memory _derivative) public nonReentrant returns (bool result) {\n\n        result = _isPool(_derivativeHash, _derivative);\n\n","after":"\n    function isPool(bytes32 _derivativeHash, Derivative calldata _derivative) public nonReentrant returns (bool result) {\n\n        result = _isPool(_derivativeHash, _derivative);\n\n","contract":"SyntheticAggregator","time":0}]}
{"time":263,"results":[{"type":"external-function ","before":"function claim(uint256[] memory tokenIndices) public returns (uint256) {\n        require(block.timestamp > emissionStart, \"Emission has not started yet\");\n\n        uint256 totalClaimQty = 0;\n        for (uint i = 0; i < tokenIndices.length; i++) {\n            // Sanity check for non-minted index\n            require(tokenIndices[i] < IMasks(_masksAddress).totalSupply(), \"NFT at index has not been minted yet\");\n            // Duplicate token index check\n            for (uint j = i + 1; j < tokenIndices.length; j++) {\n                require(tokenIndices[i] != tokenIndices[j], \"Duplicate token index\");\n            }\n\n            uint tokenIndex = tokenIndices[i];\n            require(IMasks(_masksAddress).ownerOf(tokenIndex) == msg.sender, \"Sender is not the owner\");\n\n            uint256 claimQty = accumulated(tokenIndex);\n            if (claimQty != 0) {\n                totalClaimQty = totalClaimQty.add(claimQty);\n                _lastClaim[tokenIndex] = block.timestamp;\n            }\n        }\n\n        require(totalClaimQty != 0, \"No accumulated NCT\");\n        _mint(msg.sender, totalClaimQty);\n        return totalClaimQty;\n    }","after":"function claim(uint256[] calldata tokenIndices) public returns (uint256) {\n        require(block.timestamp > emissionStart, \"Emission has not started yet\");\n\n        uint256 totalClaimQty = 0;\n        for (uint i = 0; i < tokenIndices.length; i++) {\n            // Sanity check for non-minted index\n            require(tokenIndices[i] < IMasks(_masksAddress).totalSupply(), \"NFT at index has not been minted yet\");\n            // Duplicate token index check\n            for (uint j = i + 1; j < tokenIndices.length; j++) {\n                require(tokenIndices[i] != tokenIndices[j], \"Duplicate token index\");\n            }\n\n            uint tokenIndex = tokenIndices[i];\n            require(IMasks(_masksAddress).ownerOf(tokenIndex) == msg.sender, \"Sender is not the owner\");\n\n            uint256 claimQty = accumulated(tokenIndex);\n            if (claimQty != 0) {\n                totalClaimQty = totalClaimQty.add(claimQty);\n                _lastClaim[tokenIndex] = block.timestamp;\n            }\n        }\n\n        require(totalClaimQty != 0, \"No accumulated NCT\");\n        _mint(msg.sender, totalClaimQty);\n        return totalClaimQty;\n    }","contract":"NameChangeToken","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public SECONDS_IN_A_DAY = 86400;","after":"uint256 public constant SECONDS_IN_A_DAY = 86400;","contract":"NameChangeToken","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public emissionStart;","after":"uint256 public immutable emissionStart;","contract":"NameChangeToken","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public emissionEnd;","after":"uint256 public immutable emissionEnd;","contract":"NameChangeToken","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public emissionPerDay = 10 * (10 ** 18);","after":"uint256 public constant emissionPerDay = 10 * (10 ** 18);","contract":"NameChangeToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"NameChangeToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"NameChangeToken","time":0}]}
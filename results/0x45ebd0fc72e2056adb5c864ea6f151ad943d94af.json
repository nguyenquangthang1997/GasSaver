{"time":257,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":0},{"type":"struct-data-arrangement ","before":"\naddress token\nuint256 amount\nuint256 strikePrice\nuint256 expiration\nbool isCall","after":"uint256 amount\nuint256 strikePrice\nuint256 expiration\naddress token\nbool isCall\n","contract":"IPremiaOption","time":0},{"type":"struct-data-arrangement ","before":"\naddress token\nuint256 strikePrice\nuint256 expiration\nbool isCall\nuint256 claimsPreExp\nuint256 claimsPostExp\nuint256 exercised\nuint256 supply\nuint8 decimals","after":"uint256 strikePrice\nuint256 expiration\nuint256 claimsPreExp\nuint256 claimsPostExp\nuint256 exercised\nuint256 supply\naddress token\nbool isCall\nuint8 decimals\n","contract":"IPremiaOption","time":0},{"type":"struct-data-arrangement ","before":"\naddress collateralToken\nuint256 collateral\nuint8 collateralDecimals\nuint256 fee\nuint256 feeReferrer","after":"uint256 collateral\nuint256 fee\nuint256 feeReferrer\naddress collateralToken\nuint8 collateralDecimals\n","contract":"IPremiaOption","time":0},{"type":"struct-data-arrangement ","before":"\naddress inputToken\nuint256 input\nuint8 inputDecimals\naddress outputToken\nuint256 output\nuint8 outputDecimals\nuint256 fee\nuint256 feeReferrer","after":"uint256 input\nuint256 output\nuint256 fee\nuint256 feeReferrer\naddress inputToken\naddress outputToken\nuint8 inputDecimals\nuint8 outputDecimals\n","contract":"IPremiaOption","time":0},{"type":"state-data-arrangement ","before":"\nIPremiaUncutErc20 public uPremia;\nIFeeCalculator public feeCalculator;\nIPremiaReferral public premiaReferral;\nEnumerableSet.AddressSet private _whitelistedOptionContracts;\nEnumerableSet.AddressSet private _whitelistedPaymentTokens;\nmapping(address => uint8) public paymentTokenDecimals;\naddress public feeRecipient;\nuint256 private constant _inverseBasisPoint = 1e4;\nuint256 salt = 0;\nmapping(bytes32 => uint256) public amounts;\nmapping(address => uint256) public uPremiaBalance;\nbool public isDelayedWritingEnabled = true;","after":"IPremiaUncutErc20 public uPremia;\nIFeeCalculator public feeCalculator;\nIPremiaReferral public premiaReferral;\nEnumerableSet.AddressSet private _whitelistedOptionContracts;\nEnumerableSet.AddressSet private _whitelistedPaymentTokens;\nmapping(address => uint8) public paymentTokenDecimals;\nuint256 private constant _inverseBasisPoint = 1e4;\nuint256 salt = 0;\nmapping(bytes32 => uint256) public amounts;\nmapping(address => uint256) public uPremiaBalance;\naddress public feeRecipient;\nbool public isDelayedWritingEnabled = true;\n","contract":"PremiaMarket","time":0},{"type":"struct-data-arrangement ","before":"\naddress maker\nSaleSide side\nbool isDelayedWriting\naddress optionContract\nuint256 optionId\naddress paymentToken\nuint256 pricePerUnit\nuint256 expirationTime\nuint256 salt\nuint8 decimals","after":"SaleSide side\nuint256 optionId\nuint256 pricePerUnit\nuint256 expirationTime\nuint256 salt\naddress maker\naddress optionContract\naddress paymentToken\nbool isDelayedWriting\nuint8 decimals\n","contract":"PremiaMarket","time":0},{"type":"struct-data-arrangement ","before":"\naddress token\nuint256 expiration\nuint256 strikePrice\nbool isCall","after":"uint256 expiration\nuint256 strikePrice\naddress token\nbool isCall\n","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function addWhitelistedOptionContracts(address[] memory _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            _whitelistedOptionContracts.add(_addr[i]);\n\n        }\n\n    }","after":"function addWhitelistedOptionContracts(address[] calldata _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            _whitelistedOptionContracts.add(_addr[i]);\n\n        }\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function removeWhitelistedOptionContracts(address[] memory _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            _whitelistedOptionContracts.remove(_addr[i]);\n\n        }\n\n    }","after":"function removeWhitelistedOptionContracts(address[] calldata _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            _whitelistedOptionContracts.remove(_addr[i]);\n\n        }\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function addWhitelistedPaymentTokens(address[] memory _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            uint8 decimals = IERC20Extended(_addr[i]).decimals();\n\n            require(decimals <= 18, \"Too many decimals\");\n\n            _whitelistedPaymentTokens.add(_addr[i]);\n\n            paymentTokenDecimals[_addr[i]] = decimals;\n\n        }\n\n    }","after":"function addWhitelistedPaymentTokens(address[] calldata _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            uint8 decimals = IERC20Extended(_addr[i]).decimals();\n\n            require(decimals <= 18, \"Too many decimals\");\n\n            _whitelistedPaymentTokens.add(_addr[i]);\n\n            paymentTokenDecimals[_addr[i]] = decimals;\n\n        }\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function removeWhitelistedPaymentTokens(address[] memory _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            _whitelistedPaymentTokens.remove(_addr[i]);\n\n        }\n\n    }","after":"function removeWhitelistedPaymentTokens(address[] calldata _addr) external onlyOwner {\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n\n            _whitelistedPaymentTokens.remove(_addr[i]);\n\n        }\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function getAmountsBatch(bytes32[] memory _orderIds) external view returns (uint256[] memory) {\n\n        uint256[] memory result = new uint256[](_orderIds.length);\n\n\n        for (uint256 i = 0; i < _orderIds.length; i++) {\n\n            result[i] = amounts[_orderIds[i]];\n\n        }\n\n\n        return result;\n\n    }","after":"function getAmountsBatch(bytes32[] calldata _orderIds) external view returns (uint256[] memory) {\n\n        uint256[] memory result = new uint256[](_orderIds.length);\n\n\n        for (uint256 i = 0; i < _orderIds.length; i++) {\n\n            result[i] = amounts[_orderIds[i]];\n\n        }\n\n\n        return result;\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function getOrderHashBatch(Order[] memory _orders) external pure returns (bytes32[] memory) {\n\n        bytes32[] memory result = new bytes32[](_orders.length);\n\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            result[i] = getOrderHash(_orders[i]);\n\n        }\n\n\n        return result;\n\n    }","after":"function getOrderHashBatch(Order[] calldata _orders) external pure returns (bytes32[] memory) {\n\n        bytes32[] memory result = new bytes32[](_orders.length);\n\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            result[i] = getOrderHash(_orders[i]);\n\n        }\n\n\n        return result;\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function areOrdersValid(Order[] memory _orders) external view returns (bool[] memory) {\n\n        bool[] memory result = new bool[](_orders.length);\n\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            result[i] = isOrderValid(_orders[i]);\n\n        }\n\n\n        return result;\n\n    }","after":"function areOrdersValid(Order[] calldata _orders) external view returns (bool[] memory) {\n\n        bool[] memory result = new bool[](_orders.length);\n\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            result[i] = isOrderValid(_orders[i]);\n\n        }\n\n\n        return result;\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function createOrderForNewOption(Order memory _order, uint256 _amount, Option memory _option, address _referrer) external returns (bytes32) {\n\n        // If this is a delayed writing on a sell order, we need to set referrer now, so that it is used when writing is done\n\n        if (address(premiaReferral) != address(0) && _order.isDelayedWriting && _order.side == SaleSide.Sell) {\n\n            _referrer = premiaReferral.trySetReferrer(msg.sender, _referrer);\n\n        }\n\n\n        _order.optionId = IPremiaOption(_order.optionContract).getOptionIdOrCreate(_option.token, _option.expiration, _option.strikePrice, _option.isCall);\n\n        return createOrder(_order, _amount);\n\n    }","after":"function createOrderForNewOption(Order calldata _order, uint256 _amount, Option memory _option, address _referrer) external returns (bytes32) {\n\n        // If this is a delayed writing on a sell order, we need to set referrer now, so that it is used when writing is done\n\n        if (address(premiaReferral) != address(0) && _order.isDelayedWriting && _order.side == SaleSide.Sell) {\n\n            _referrer = premiaReferral.trySetReferrer(msg.sender, _referrer);\n\n        }\n\n\n        _order.optionId = IPremiaOption(_order.optionContract).getOptionIdOrCreate(_option.token, _option.expiration, _option.strikePrice, _option.isCall);\n\n        return createOrder(_order, _amount);\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function createOrders(Order[] memory _orders, uint256[] memory _amounts) external returns (bytes32[] memory) {\n\n        require(_orders.length == _amounts.length, \"Arrays must have same length\");\n\n\n        bytes32[] memory result = new bytes32[](_orders.length);\n\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            result[i] = createOrder(_orders[i], _amounts[i]);\n\n        }\n\n\n        return result;\n\n    }","after":"function createOrders(Order[] calldata _orders, uint256[] calldata _amounts) external returns (bytes32[] memory) {\n\n        require(_orders.length == _amounts.length, \"Arrays must have same length\");\n\n\n        bytes32[] memory result = new bytes32[](_orders.length);\n\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            result[i] = createOrder(_orders[i], _amounts[i]);\n\n        }\n\n\n        return result;\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function createOrderAndTryToFill(Order memory _order, uint256 _amount, Order[] memory _orderCandidates, bool _writeOnBuyFill, address _referrer) external {\n\n        require(_amount > 0, \"Amount must be > 0\");\n\n\n        // Ensure candidate orders are valid\n\n        for (uint256 i = 0; i < _orderCandidates.length; i++) {\n\n            require(_orderCandidates[i].side != _order.side, \"Candidate order : Same order side\");\n\n            require(_orderCandidates[i].optionContract == _order.optionContract, \"Candidate order : Diff option contract\");\n\n            require(_orderCandidates[i].optionId == _order.optionId, \"Candidate order : Diff optionId\");\n\n        }\n\n\n        uint256 totalFilled;\n\n        if (_orderCandidates.length == 1) {\n\n            totalFilled = fillOrder(_orderCandidates[0], _amount, _writeOnBuyFill, _referrer);\n\n        } else if (_orderCandidates.length > 1) {\n\n            totalFilled = fillOrders(_orderCandidates, _amount, _writeOnBuyFill, _referrer);\n\n        }\n\n\n        if (totalFilled < _amount) {\n\n            createOrder(_order, _amount.sub(totalFilled));\n\n        }\n\n    }","after":"function createOrderAndTryToFill(Order calldata _order, uint256 _amount, Order[] calldata _orderCandidates, bool _writeOnBuyFill, address _referrer) external {\n\n        require(_amount > 0, \"Amount must be > 0\");\n\n\n        // Ensure candidate orders are valid\n\n        for (uint256 i = 0; i < _orderCandidates.length; i++) {\n\n            require(_orderCandidates[i].side != _order.side, \"Candidate order : Same order side\");\n\n            require(_orderCandidates[i].optionContract == _order.optionContract, \"Candidate order : Diff option contract\");\n\n            require(_orderCandidates[i].optionId == _order.optionId, \"Candidate order : Diff optionId\");\n\n        }\n\n\n        uint256 totalFilled;\n\n        if (_orderCandidates.length == 1) {\n\n            totalFilled = fillOrder(_orderCandidates[0], _amount, _writeOnBuyFill, _referrer);\n\n        } else if (_orderCandidates.length > 1) {\n\n            totalFilled = fillOrders(_orderCandidates, _amount, _writeOnBuyFill, _referrer);\n\n        }\n\n\n        if (totalFilled < _amount) {\n\n            createOrder(_order, _amount.sub(totalFilled));\n\n        }\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function writeAndCreateOrder(IPremiaOption.OptionWriteArgs memory _option, Order memory _order, address _referrer) public returns (bytes32) {\n\n        require(_order.side == SaleSide.Sell, \"Not a sell order\");\n\n\n        // This cannot be a delayed writing as we are writing the option now\n\n        _order.isDelayedWriting = false;\n\n\n        IPremiaOption optionContract = IPremiaOption(_order.optionContract);\n\n        _order.optionId = optionContract.writeOptionFrom(msg.sender, _option, _referrer);\n\n\n        return createOrder(_order, _option.amount);\n\n    }","after":"function writeAndCreateOrder(IPremiaOption.OptionWriteArgs calldata _option, Order memory _order, address _referrer) public returns (bytes32) {\n\n        require(_order.side == SaleSide.Sell, \"Not a sell order\");\n\n\n        // This cannot be a delayed writing as we are writing the option now\n\n        _order.isDelayedWriting = false;\n\n\n        IPremiaOption optionContract = IPremiaOption(_order.optionContract);\n\n        _order.optionId = optionContract.writeOptionFrom(msg.sender, _option, _referrer);\n\n\n        return createOrder(_order, _option.amount);\n\n    }","contract":"PremiaMarket","time":0},{"type":"external-function ","before":"function cancelOrders(Order[] memory _orders) external {\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            cancelOrder(_orders[i]);\n\n        }\n\n    }","after":"function cancelOrders(Order[] calldata _orders) external {\n\n        for (uint256 i = 0; i < _orders.length; i++) {\n\n            cancelOrder(_orders[i]);\n\n        }\n\n    }","contract":"PremiaMarket","time":0}]}
{"time":78,"results":[{"type":"struct-data-arrangement ","before":"\nuint256 id\naddress proposer\nuint256 eta\naddress[] targets\nuint256[] values\nstring[] signatures\nbytes[] calldatas\nuint256 startBlock\nuint256 endBlock\nuint256 forVotes\nuint256 againstVotes\nbool canceled\nbool executed","after":"uint256 id\nuint256 eta\naddress[] targets\nuint256[] values\nstring[] signatures\nbytes[] calldatas\nuint256 startBlock\nuint256 endBlock\nuint256 forVotes\nuint256 againstVotes\naddress proposer\nbool canceled\nbool executed\n","contract":"GovernorBeta","time":0},{"type":"external-function ","before":"function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public returns (uint256) {\n        require(\n            ctx.getPriorVotes(msg.sender, sub256(block.number, 1)) >\n            proposalThreshold(),\n            \"GovernorBeta::propose: proposer votes below proposal threshold\"\n        );\n        require(\n            targets.length == values.length &&\n            targets.length == signatures.length &&\n            targets.length == calldatas.length,\n            \"GovernorBeta::propose: proposal function information arity mismatch\"\n        );\n        require(targets.length != 0, \"GovernorBeta::propose: must provide actions\");\n        require(\n            targets.length <= proposalMaxOperations(),\n            \"GovernorBeta::propose: too many actions\"\n        );\n\n        uint256 latestProposalId = latestProposalIds[msg.sender];\n        if (latestProposalId != 0) {\n            ProposalState proposersLatestProposalState = state(latestProposalId);\n            require(\n                proposersLatestProposalState != ProposalState.Active,\n                \"GovernorBeta::propose: one live proposal per proposer, found an already active proposal\"\n            );\n            require(\n                proposersLatestProposalState != ProposalState.Pending,\n                \"GovernorBeta::propose: one live proposal per proposer, found an already pending proposal\"\n            );\n        }\n\n        uint256 startBlock = add256(block.number, votingDelay());\n        uint256 endBlock = add256(startBlock, votingPeriod());\n\n        proposalCount++;\n        Proposal memory newProposal =\n        Proposal({\n        id : proposalCount,\n        proposer : msg.sender,\n        eta : 0,\n        targets : targets,\n        values : values,\n        signatures : signatures,\n        calldatas : calldatas,\n        startBlock : startBlock,\n        endBlock : endBlock,\n        forVotes : 0,\n        againstVotes : 0,\n        canceled : false,\n        executed : false\n        });\n\n        proposals[newProposal.id] = newProposal;\n        latestProposalIds[newProposal.proposer] = newProposal.id;\n\n        emit ProposalCreated(\n            newProposal.id,\n            msg.sender,\n            targets,\n            values,\n            signatures,\n            calldatas,\n            startBlock,\n            endBlock,\n            description\n        );\n        return newProposal.id;\n    }","after":"function propose(\n        address[] calldata targets,\n        uint256[] calldata values,\n        string[] calldata signatures,\n        bytes[] calldata calldatas,\n        string calldata description\n    ) public returns (uint256) {\n        require(\n            ctx.getPriorVotes(msg.sender, sub256(block.number, 1)) >\n            proposalThreshold(),\n            \"GovernorBeta::propose: proposer votes below proposal threshold\"\n        );\n        require(\n            targets.length == values.length &&\n            targets.length == signatures.length &&\n            targets.length == calldatas.length,\n            \"GovernorBeta::propose: proposal function information arity mismatch\"\n        );\n        require(targets.length != 0, \"GovernorBeta::propose: must provide actions\");\n        require(\n            targets.length <= proposalMaxOperations(),\n            \"GovernorBeta::propose: too many actions\"\n        );\n\n        uint256 latestProposalId = latestProposalIds[msg.sender];\n        if (latestProposalId != 0) {\n            ProposalState proposersLatestProposalState = state(latestProposalId);\n            require(\n                proposersLatestProposalState != ProposalState.Active,\n                \"GovernorBeta::propose: one live proposal per proposer, found an already active proposal\"\n            );\n            require(\n                proposersLatestProposalState != ProposalState.Pending,\n                \"GovernorBeta::propose: one live proposal per proposer, found an already pending proposal\"\n            );\n        }\n\n        uint256 startBlock = add256(block.number, votingDelay());\n        uint256 endBlock = add256(startBlock, votingPeriod());\n\n        proposalCount++;\n        Proposal memory newProposal =\n        Proposal({\n        id : proposalCount,\n        proposer : msg.sender,\n        eta : 0,\n        targets : targets,\n        values : values,\n        signatures : signatures,\n        calldatas : calldatas,\n        startBlock : startBlock,\n        endBlock : endBlock,\n        forVotes : 0,\n        againstVotes : 0,\n        canceled : false,\n        executed : false\n        });\n\n        proposals[newProposal.id] = newProposal;\n        latestProposalIds[newProposal.proposer] = newProposal.id;\n\n        emit ProposalCreated(\n            newProposal.id,\n            msg.sender,\n            targets,\n            values,\n            signatures,\n            calldatas,\n            startBlock,\n            endBlock,\n            description\n        );\n        return newProposal.id;\n    }","contract":"GovernorBeta","time":0},{"type":"immutable-restrict-modification ","before":"address public guardian;","after":"address public immutable guardian;","contract":"GovernorBeta","time":0}]}
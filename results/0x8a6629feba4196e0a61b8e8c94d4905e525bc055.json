{"time":234,"results":[{"type":"struct-data-arrangement ","before":"\naddress token\nTypes.TotalPar totalPar\nInterest.Index index\nIPriceOracle priceOracle\nIInterestSetter interestSetter\nDecimal.D256 marginPremium\nDecimal.D256 spreadPremium\nbool isClosing","after":"Types.TotalPar totalPar\nInterest.Index index\nIPriceOracle priceOracle\nIInterestSetter interestSetter\nDecimal.D256 marginPremium\nDecimal.D256 spreadPremium\naddress token\nbool isClosing\n","contract":"Storage","time":0},{"type":"external-function ","before":"function ownerAddMarket(\n\n        Storage.State storage state,\n\n        address token,\n\n        IPriceOracle priceOracle,\n\n        IInterestSetter interestSetter,\n\n        Decimal.D256 memory marginPremium,\n\n        Decimal.D256 memory spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _requireNoMarket(state, token);\n\n\n        uint256 marketId = state.numMarkets;\n\n\n        state.numMarkets++;\n\n        state.markets[marketId].token = token;\n\n        state.markets[marketId].index = Interest.newIndex();\n\n\n        emit LogAddMarket(marketId, token);\n\n\n        _setPriceOracle(state, marketId, priceOracle);\n\n        _setInterestSetter(state, marketId, interestSetter);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    }","after":"function ownerAddMarket(\n\n        Storage.State storage state,\n\n        address token,\n\n        IPriceOracle priceOracle,\n\n        IInterestSetter interestSetter,\n\n        Decimal.D256 calldata marginPremium,\n\n        Decimal.D256 calldata spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _requireNoMarket(state, token);\n\n\n        uint256 marketId = state.numMarkets;\n\n\n        state.numMarkets++;\n\n        state.markets[marketId].token = token;\n\n        state.markets[marketId].index = Interest.newIndex();\n\n\n        emit LogAddMarket(marketId, token);\n\n\n        _setPriceOracle(state, marketId, priceOracle);\n\n        _setInterestSetter(state, marketId, interestSetter);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    }","contract":"AdminImpl","time":0},{"type":"external-function ","before":"function ownerSetMarginPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 memory marginPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n    }","after":"function ownerSetMarginPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 calldata marginPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n    }","contract":"AdminImpl","time":0},{"type":"external-function ","before":"function ownerSetSpreadPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 memory spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    }","after":"function ownerSetSpreadPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 calldata spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    }","contract":"AdminImpl","time":0},{"type":"external-function ","before":"function ownerSetMarginRatio(\n\n        Storage.State storage state,\n\n        Decimal.D256 memory ratio\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            ratio.value <= state.riskLimits.marginRatioMax,\n\n            FILE,\n\n            \"Ratio too high\"\n\n        );\n\n        Require.that(\n\n            ratio.value > state.riskParams.liquidationSpread.value,\n\n            FILE,\n\n            \"Ratio cannot be <= spread\"\n\n        );\n\n        state.riskParams.marginRatio = ratio;\n\n        emit LogSetMarginRatio(ratio);\n\n    }","after":"function ownerSetMarginRatio(\n\n        Storage.State storage state,\n\n        Decimal.D256 calldata ratio\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            ratio.value <= state.riskLimits.marginRatioMax,\n\n            FILE,\n\n            \"Ratio too high\"\n\n        );\n\n        Require.that(\n\n            ratio.value > state.riskParams.liquidationSpread.value,\n\n            FILE,\n\n            \"Ratio cannot be <= spread\"\n\n        );\n\n        state.riskParams.marginRatio = ratio;\n\n        emit LogSetMarginRatio(ratio);\n\n    }","contract":"AdminImpl","time":0},{"type":"external-function ","before":"function ownerSetLiquidationSpread(\n\n        Storage.State storage state,\n\n        Decimal.D256 memory spread\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            spread.value <= state.riskLimits.liquidationSpreadMax,\n\n            FILE,\n\n            \"Spread too high\"\n\n        );\n\n        Require.that(\n\n            spread.value < state.riskParams.marginRatio.value,\n\n            FILE,\n\n            \"Spread cannot be >= ratio\"\n\n        );\n\n        state.riskParams.liquidationSpread = spread;\n\n        emit LogSetLiquidationSpread(spread);\n\n    }","after":"function ownerSetLiquidationSpread(\n\n        Storage.State storage state,\n\n        Decimal.D256 calldata spread\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            spread.value <= state.riskLimits.liquidationSpreadMax,\n\n            FILE,\n\n            \"Spread too high\"\n\n        );\n\n        Require.that(\n\n            spread.value < state.riskParams.marginRatio.value,\n\n            FILE,\n\n            \"Spread cannot be >= ratio\"\n\n        );\n\n        state.riskParams.liquidationSpread = spread;\n\n        emit LogSetLiquidationSpread(spread);\n\n    }","contract":"AdminImpl","time":0},{"type":"external-function ","before":"function ownerSetEarningsRate(\n\n        Storage.State storage state,\n\n        Decimal.D256 memory earningsRate\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            earningsRate.value <= state.riskLimits.earningsRateMax,\n\n            FILE,\n\n            \"Rate too high\"\n\n        );\n\n        state.riskParams.earningsRate = earningsRate;\n\n        emit LogSetEarningsRate(earningsRate);\n\n    }","after":"function ownerSetEarningsRate(\n\n        Storage.State storage state,\n\n        Decimal.D256 calldata earningsRate\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            earningsRate.value <= state.riskLimits.earningsRateMax,\n\n            FILE,\n\n            \"Rate too high\"\n\n        );\n\n        state.riskParams.earningsRate = earningsRate;\n\n        emit LogSetEarningsRate(earningsRate);\n\n    }","contract":"AdminImpl","time":0},{"type":"external-function ","before":"function ownerSetMinBorrowedValue(\n\n        Storage.State storage state,\n\n        Monetary.Value memory minBorrowedValue\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            minBorrowedValue.value <= state.riskLimits.minBorrowedValueMax,\n\n            FILE,\n\n            \"Value too high\"\n\n        );\n\n        state.riskParams.minBorrowedValue = minBorrowedValue;\n\n        emit LogSetMinBorrowedValue(minBorrowedValue);\n\n    }","after":"function ownerSetMinBorrowedValue(\n\n        Storage.State storage state,\n\n        Monetary.Value calldata minBorrowedValue\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            minBorrowedValue.value <= state.riskLimits.minBorrowedValueMax,\n\n            FILE,\n\n            \"Value too high\"\n\n        );\n\n        state.riskParams.minBorrowedValue = minBorrowedValue;\n\n        emit LogSetMinBorrowedValue(minBorrowedValue);\n\n    }","contract":"AdminImpl","time":0}]}
{"time":146,"results":[{"type":"immutable-restrict-modification ","before":"address internal masterCopy;","after":"address internal immutable masterCopy;","contract":"GnosisSafeProxy","time":0},{"type":"external-function ","before":"function createProxy(address masterCopy, bytes memory data)\n    public\n    returns (GnosisSafeProxy proxy)\n    {\n        proxy = new GnosisSafeProxy(masterCopy);\n        if (data.length > 0)\n        // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {revert(0, 0)}\n            }\n        emit ProxyCreation(proxy);\n    }","after":"function createProxy(address masterCopy, bytes calldata data)\n    public\n    returns (GnosisSafeProxy proxy)\n    {\n        proxy = new GnosisSafeProxy(masterCopy);\n        if (data.length > 0)\n        // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {revert(0, 0)}\n            }\n        emit ProxyCreation(proxy);\n    }","contract":"GnosisSafeProxyFactory","time":0},{"type":"external-function ","before":"function createProxyWithCallback(address _mastercopy, bytes memory initializer, uint256 saltNonce, IProxyCreationCallback callback)\n    public\n    returns (GnosisSafeProxy proxy)\n    {\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\n        proxy = createProxyWithNonce(_mastercopy, initializer, saltNonceWithCallback);\n        if (address(callback) != address(0))\n            callback.proxyCreated(proxy, _mastercopy, initializer, saltNonce);\n    }","after":"function createProxyWithCallback(address _mastercopy, bytes calldata initializer, uint256 saltNonce, IProxyCreationCallback callback)\n    public\n    returns (GnosisSafeProxy proxy)\n    {\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\n        proxy = createProxyWithNonce(_mastercopy, initializer, saltNonceWithCallback);\n        if (address(callback) != address(0))\n            callback.proxyCreated(proxy, _mastercopy, initializer, saltNonce);\n    }","contract":"GnosisSafeProxyFactory","time":0},{"type":"external-function ","before":"function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }","after":"function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }","contract":"GnosisSafe","time":0},{"type":"external-function ","before":"function execTransactionFromModuleReturnData(address to, uint256 value, bytes memory data, Enum.Operation operation)\n    public\n    returns (bool success, bytes memory returnData)\n    {\n        success = execTransactionFromModule(to, value, data, operation);\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n        // Load free memory location\n            let ptr := mload(0x40)\n        // We allocate memory for the return data by setting the free memory location to\n        // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n        // Store the size\n            mstore(ptr, returndatasize())\n        // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n        // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }","after":"function execTransactionFromModuleReturnData(address to, uint256 value, bytes calldata data, Enum.Operation operation)\n    public\n    returns (bool success, bytes memory returnData)\n    {\n        success = execTransactionFromModule(to, value, data, operation);\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n        // Load free memory location\n            let ptr := mload(0x40)\n        // We allocate memory for the return data by setting the free memory location to\n        // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n        // Store the size\n            mstore(ptr, returndatasize())\n        // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n        // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }","contract":"GnosisSafe","time":0},{"type":"loop-calculation","before":"address payable proxy = address(_proxyFactory.createProxy(template, \"\"));","after":"// move outside for loop\naddress payable proxy = address(_proxyFactory.createProxy(template, \"\"));","loc":{"start":{"line":1163,"column":12},"end":{"line":1163,"column":84}},"contract":"FleetFactory","time":0}]}
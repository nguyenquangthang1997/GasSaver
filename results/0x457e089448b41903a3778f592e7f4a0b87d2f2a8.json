{"time":951,"results":[{"type":"loop-calculation","before":"if (block.timestamp >= public","after":"// move outside for loop\nif (block.timestamp >= public","loc":{"start":{"line":1958,"column":12},"end":{"line":1958,"column":40}},"contract":"SuperFuzzBadBatch","time":0},{"type":"loop-calculation","before":"wTime) public onlyTeam {\n    ","after":"// move outside for loop\nwTime) public onlyTeam {\n    ","loc":{"start":{"line":1969,"column":12},"end":{"line":1969,"column":40}},"contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":" Whitelisted\");\n            require(_amount <= getMaxPerTx(), \"Busted! Cant mint more than one during the Early Access pe","after":" Whitelisted\");\n            require(_amount <= getMaxPerTx(), \"Busted! Cant mint more than one during the Early Access pe","contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":");\n        }\n        require(getStatus() == Status.PresaleStart || getStatus() == Status.PublicSaleStart, ","after":");\n        }\n        require(getStatus() == Status.PresaleStart || getStatus() == Status.PublicSaleStart, ","contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":"\"Dang! You dont have enough ETH!\");\n        require(_totalSupply() < MAX_MONSTERS, \"Error 777: Sold Out!\");\n        require(_totalSupply().add(_amount) <= MAX_MONSTERS, \"Hold up! Purchase would exceed max supply. Try a lower amount.\");\n        r","after":"\"Dang! You dont have enough ETH!\");\n        require(_totalSupply() < MAX_MONSTERS, \"Error 777: Sold Out!\");\n        require(_totalSupply().add(_amount) <= MAX_MONSTERS, \"Hold up! Purchase would exceed max supply. Try a lower amount.\");\n        r","contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":"axPerTx = 2;\n        } else if (block.timestamp >= presaleStartTime) {\n            maxPerTx = 1;\n        }\n        return maxPerTx;\n    }\n\n    function getStatus() public view returns (Status) {\n        if (block.timestamp >= publicSaleStartTime) {\n            return Status.PublicSaleStart;\n        } else if (block.timestamp >= presaleStartTime) {\n            return Status.PresaleStart;\n  ","after":"axPerTx = 2;\n        } else if (block.timestamp >= presaleStartTime) {\n            maxPerTx = 1;\n        }\n        return maxPerTx;\n    }\n\n    function getStatus() public view returns (Status) {\n        if (block.timestamp >= publicSaleStartTime) {\n            return Status.PublicSaleStart;\n        } else if (block.timestamp >= presaleStartTime) {\n            return Status.PresaleStart;\n  ","contract":"SuperFuzzBadBatch","time":0},{"type":"constant-restrict-modification  ","before":"enzeppelin/contracts/token/ERC721/exten","after":"enzeppelin/contracts/token/ERC721/exten","contract":"SuperFuzzBadBatch","time":1},{"type":"constant-restrict-modification  ","before":" \"@openzeppelin/contracts/tok","after":" \"@openzeppelin/contracts/tok","contract":"SuperFuzzBadBatch","time":1},{"type":"constant-restrict-modification  ","before":"Counters.Counter;\n\n    enum Status {\n        Closed,\n        PresaleStart,\n    ","after":"Counters.Counter;\n\n    enum Status {\n        Closed,\n        PresaleStart,\n    ","contract":"SuperFuzzBadBatch","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SuperFuzzBadBatch","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SuperFuzzBadBatch","time":1},{"type":"loop-calculation","before":"   airDropList.push(_to);\n    }\n","after":"// move outside for loop\n   airDropList.push(_to);\n    }\n","loc":{"start":{"line":2150,"column":12},"end":{"line":2150,"column":43}},"contract":"SuperFuzzGoldTicket","time":0},{"type":"external-function ","before":"GoldTicket is Ownable, ERC721URIStorage, ERC721Enumerable {\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n\n","after":"GoldTicket is Ownable, ERC721URIStorage, ERC721Enumerable {\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n\n","contract":"SuperFuzzGoldTicket","time":0},{"type":"external-function ","before":"      TICKET_PRICE = _price;\n    }\n\n    function setMaxTickets(uint256 _newMax) external onlyOwner {\n        MAX_TICKETS = _newMax;\n    }\n\n    function increaseSupply() internal {\n        _tokenIds.increment();\n        mintedTokens = _totalSupply();\n        emit IncreaseSupply(mintedTokens);\n    }\n\n    function _totalSupply() public view returns (uint256) {\n        return _tokenIds.current();\n    }\n\n    function setProvenanceHash(string memory _provenanceHash)\n    external\n    onlyOwner\n    {\n        PROVENANCE = _provenanceHash;\n    }\n\n    function flipSaleState() external onlyOwner {\n        isSaleActive = !isSaleActive;\n    }\n\n    function addToAirDropList(address _to) internal {\n        airDropList.push(_to);\n    }\n\n    function getAirDropList() external view returns (address[] memory) {\n        return airDropList;\n    }\n\n    function airDropTicket(address _to) external onlyOwner {\n        // set rule address can only","after":"      TICKET_PRICE = _price;\n    }\n\n    function setMaxTickets(uint256 _newMax) external onlyOwner {\n        MAX_TICKETS = _newMax;\n    }\n\n    function increaseSupply() internal {\n        _tokenIds.increment();\n        mintedTokens = _totalSupply();\n        emit IncreaseSupply(mintedTokens);\n    }\n\n    function _totalSupply() public view returns (uint256) {\n        return _tokenIds.current();\n    }\n\n    function setProvenanceHash(string memory _provenanceHash)\n    external\n    onlyOwner\n    {\n        PROVENANCE = _provenanceHash;\n    }\n\n    function flipSaleState() external onlyOwner {\n        isSaleActive = !isSaleActive;\n    }\n\n    function addToAirDropList(address _to) internal {\n        airDropList.push(_to);\n    }\n\n    function getAirDropList() external view returns (address[] memory) {\n        return airDropList;\n    }\n\n    function airDropTicket(address _to) external onlyOwner {\n        // set rule address can only","contract":"SuperFuzzGoldTicket","time":0},{"type":"external-function ","before":"  hasTicket[_addr[i]] == false,\n                \"Cannot own more than one Gold Ticket\"\n            );\n     ","after":"  hasTicket[_addr[i]] == false,\n                \"Cannot own more than one Gold Ticket\"\n            );\n     ","contract":"SuperFuzzGoldTicket","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SuperFuzzGoldTicket","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SuperFuzzGoldTicket","time":1}]}
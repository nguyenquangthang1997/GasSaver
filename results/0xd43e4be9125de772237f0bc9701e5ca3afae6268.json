{"time":262,"results":[{"type":"constant-restrict-modification  ","before":"address private immutable _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;","after":"address private immutable constant _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;","contract":"Flasher","time":0},{"type":"constant-restrict-modification  ","before":"address private immutable _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;","after":"address private immutable constant _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;","contract":"Flasher","time":0},{"type":"loop-duplication","before":"\nstart line 1401 column 8, end line 1404 column 8\nfor (uint256 i = 0; i < _userAddrs.length; i += 1) {\n            collateralIds[i] = _vAssets.collateralID;\n            borrowIds[i] = _vAssets.borrowID;\n        }\nstart line 1412 column 8, end line 1425 column 8\nfor (uint256 i = 0; i < _userAddrs.length; i += 1) {\n            // Compute amount of min collateral required including factors\n            neededCollateral = IVault(_vault).getNeededCollateralFor(borrowBals[i], true);\n\n            // Check if User is liquidatable\n            if (collateralBals[i] < neededCollateral) {\n                // If true, add User debt balance to the total balance to be liquidated\n                debtTotal += borrowBals[i];\n                addrs[i] = _userAddrs[i];\n            } else {\n                // set user that is not liquidatable to Zero Address\n                addrs[i] = address(0);\n            }\n        }","after":"// merge loop\n\nstart line 1401 column 8, end line 1404 column 8\nfor (uint256 i = 0; i < _userAddrs.length; i += 1) {\n            collateralIds[i] = _vAssets.collateralID;\n            borrowIds[i] = _vAssets.borrowID;\n        }\nstart line 1412 column 8, end line 1425 column 8\nfor (uint256 i = 0; i < _userAddrs.length; i += 1) {\n            // Compute amount of min collateral required including factors\n            neededCollateral = IVault(_vault).getNeededCollateralFor(borrowBals[i], true);\n\n            // Check if User is liquidatable\n            if (collateralBals[i] < neededCollateral) {\n                // If true, add User debt balance to the total balance to be liquidated\n                debtTotal += borrowBals[i];\n                addrs[i] = _userAddrs[i];\n            } else {\n                // set user that is not liquidatable to Zero Address\n                addrs[i] = address(0);\n            }\n        }","contract":"Fliquidator","time":0},{"type":"struct-data-arrangement ","before":"\naddress collateralAsset\naddress borrowAsset\nuint64 collateralID\nuint64 borrowID","after":"address collateralAsset\naddress borrowAsset\nuint64 collateralID\nuint64 borrowID\n","contract":"IVaultControl","time":0}]}
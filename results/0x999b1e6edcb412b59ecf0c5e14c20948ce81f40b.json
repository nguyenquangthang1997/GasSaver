{"time":475,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant MAX_SUPPLY = 10000000 * 10 ** 18;\nbool public maxSupplyHit = false;\nuint256 public transferFee = 10;\nmapping(address => bool) public senderWhitelist;\nmapping(address => bool) public recipientWhitelist;\naddress public titoAddress;\naddress payable public whirlpoolAddress;\naddress public surfPoolAddress;\nmapping(address => address) internal _delegates;\nmapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\nmapping(address => uint32) public numCheckpoints;\nbytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\nbytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\nmapping(address => uint) public nonces;","after":"uint256 public constant MAX_SUPPLY = 10000000 * 10 ** 18;\nuint256 public transferFee = 10;\nmapping(address => bool) public senderWhitelist;\nmapping(address => bool) public recipientWhitelist;\nmapping(address => address) internal _delegates;\nmapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\nmapping(address => uint32) public numCheckpoints;\nbytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\nbytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\nmapping(address => uint) public nonces;\naddress public titoAddress;\naddress payable public whirlpoolAddress;\naddress public surfPoolAddress;\nbool public maxSupplyHit = false;\n","contract":"SURF","time":0},{"type":"state-data-arrangement ","before":"\nSURF public surf;\naddress public surfPoolAddress;\nWhirlpool public whirlpool;\nIUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\nStakingRewardsFactory internal uniStakingFactory = StakingRewardsFactory(0x3032Ab3Fa8C01d786D29dAdE018d7f2017918e12);\nIERC20 internal uniToken = IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);\nIERC20 internal weth;\naddress payable public devAddress;\nPoolInfo[] public poolInfo;\nmapping(address => bool) public existingPools;\nmapping(uint256 => mapping(address => UserInfo)) public userInfo;\nmapping(address => bool) public contractWhitelist;\nuint256 public startBlock;\nbool public surfPoolActive = false;\nuint256 public initialSurfPoolETH = 0;\nuint256 public surfSentToWhirlpool = 0;\nuint256 public donatedETH = 0;\nuint256 internal constant minimumDonationAmount = 25 * 10 ** 18;\nmapping(address => address) internal donaters;\nmapping(address => uint256) internal donations;\nuint256 internal constant APPROX_BLOCKS_PER_YEAR = uint256(uint256(365 days) / uint256(13 seconds));\nuint256 internal constant DEFAULT_APR = 1000;\nuint256 internal constant SOFT_LAUNCH_DURATION = 1000;\nuint256 internal constant SOFT_LAUNCH_SURF_PER_BLOCK = 40 * 10 ** 18;","after":"SURF public surf;\nWhirlpool public whirlpool;\nIUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\nStakingRewardsFactory internal uniStakingFactory = StakingRewardsFactory(0x3032Ab3Fa8C01d786D29dAdE018d7f2017918e12);\nIERC20 internal uniToken = IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);\nIERC20 internal weth;\nPoolInfo[] public poolInfo;\nmapping(address => bool) public existingPools;\nmapping(uint256 => mapping(address => UserInfo)) public userInfo;\nmapping(address => bool) public contractWhitelist;\nuint256 public startBlock;\nuint256 public initialSurfPoolETH = 0;\nuint256 public surfSentToWhirlpool = 0;\nuint256 public donatedETH = 0;\nuint256 internal constant minimumDonationAmount = 25 * 10 ** 18;\nmapping(address => address) internal donaters;\nmapping(address => uint256) internal donations;\nuint256 internal constant APPROX_BLOCKS_PER_YEAR = uint256(uint256(365 days) / uint256(13 seconds));\nuint256 internal constant DEFAULT_APR = 1000;\nuint256 internal constant SOFT_LAUNCH_DURATION = 1000;\nuint256 internal constant SOFT_LAUNCH_SURF_PER_BLOCK = 40 * 10 ** 18;\naddress public surfPoolAddress;\naddress payable public devAddress;\nbool public surfPoolActive = false;\n","contract":"Tito","time":0}]}
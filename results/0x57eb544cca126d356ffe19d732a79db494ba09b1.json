{"time":293,"results":[{"type":"constant-restrict-modification  ","before":"bytes32 public name;","after":"bytes32 public constant name;","contract":"UniswapExchangeInterface","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public symbol;","after":"bytes32 public constant symbol;","contract":"UniswapExchangeInterface","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public decimals;","after":"uint256 public constant decimals;","contract":"UniswapExchangeInterface","time":0},{"type":"external-function ","before":"function initialize(\n        address operator,\n        address staker,\n        address counterparty,\n        TokenManager.Tokens tokenID,\n        uint256 ratio,\n        Griefing.RatioType ratioType,\n        uint256 countdownLength,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        // set storage values\n        _data.staker = staker;\n        _data.counterparty = counterparty;\n\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // set griefing ratio\n        Griefing._setRatio(staker, tokenID, ratio, ratioType);\n\n        // set countdown length\n        Countdown._setLength(countdownLength);\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, staker, counterparty, tokenID, ratio, ratioType, countdownLength, metadata);\n    }","after":"function initialize(\n        address operator,\n        address staker,\n        address counterparty,\n        TokenManager.Tokens tokenID,\n        uint256 ratio,\n        Griefing.RatioType ratioType,\n        uint256 countdownLength,\n        bytes calldata metadata\n    ) public initializeTemplate() {\n        // set storage values\n        _data.staker = staker;\n        _data.counterparty = counterparty;\n\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // set griefing ratio\n        Griefing._setRatio(staker, tokenID, ratio, ratioType);\n\n        // set countdown length\n        Countdown._setLength(countdownLength);\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, staker, counterparty, tokenID, ratio, ratioType, countdownLength, metadata);\n    }","contract":"CountdownGriefing","time":0},{"type":"external-function ","before":"function setMetadata(bytes memory metadata) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }","after":"function setMetadata(bytes calldata metadata) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }","contract":"CountdownGriefing","time":0},{"type":"external-function ","before":"function punish(uint256 punishment, bytes memory message) public returns (uint256 cost) {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isOperator(msg.sender), \"only counterparty or operator\");\n\n        // require agreement is not ended\n        require(!isTerminated(), \"agreement ended\");\n\n        // execute griefing\n        return Griefing._grief(msg.sender, _data.staker, punishment, message);\n    }","after":"function punish(uint256 punishment, bytes calldata message) public returns (uint256 cost) {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isOperator(msg.sender), \"only counterparty or operator\");\n\n        // require agreement is not ended\n        require(!isTerminated(), \"agreement ended\");\n\n        // execute griefing\n        return Griefing._grief(msg.sender, _data.staker, punishment, message);\n    }","contract":"CountdownGriefing","time":0},{"type":"struct-data-arrangement ","before":"\nuint120 ratio\nGriefing.RatioType ratioType\nuint128 countdownLength","after":"Griefing.RatioType ratioType\nuint128 countdownLength\nuint120 ratio\n","contract":"CountdownGriefingEscrow","time":0},{"type":"external-function ","before":"function initialize(\n        address operator,\n        address buyer,\n        address seller,\n        TokenManager.Tokens tokenID,\n        uint256 paymentAmount,\n        uint256 stakeAmount,\n        uint256 escrowCountdown,\n        bytes memory metadata,\n        bytes memory agreementParams\n    ) public initializeTemplate() {\n        // set participants if defined\n        if (buyer != address(0)) {\n            _data.buyer = buyer;\n        }\n        if (seller != address(0)) {\n            _data.seller = seller;\n        }\n\n        // set operator if defined\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // set token\n        require(TokenManager.isValidTokenID(tokenID), 'invalid token');\n        _data.tokenID = tokenID;\n\n        // set amounts if defined\n        if (paymentAmount != uint256(0)) {\n            require(paymentAmount <= uint256(uint128(paymentAmount)), \"paymentAmount is too large\");\n            _data.paymentAmount = uint128(paymentAmount);\n        }\n        if (stakeAmount != uint256(0)) {\n            require(stakeAmount == uint256(uint128(stakeAmount)), \"stakeAmount is too large\");\n            _data.stakeAmount = uint128(stakeAmount);\n        }\n\n        // set countdown length\n        Countdown._setLength(escrowCountdown);\n\n        // set metadata if defined\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // set agreementParams if defined\n        if (agreementParams.length != 0) {\n            (\n            uint256 ratio,\n            Griefing.RatioType ratioType,\n            uint256 agreementCountdown\n            ) = abi.decode(agreementParams, (uint256, Griefing.RatioType, uint256));\n            require(ratio == uint256(uint120(ratio)), \"ratio out of bounds\");\n            require(agreementCountdown == uint256(uint128(agreementCountdown)), \"agreementCountdown out of bounds\");\n            _data.agreementParams = AgreementParams(uint120(ratio), ratioType, uint128(agreementCountdown));\n        }\n\n        // emit event\n        emit Initialized(operator, buyer, seller, tokenID, paymentAmount, stakeAmount, escrowCountdown, metadata, agreementParams);\n    }","after":"function initialize(\n        address operator,\n        address buyer,\n        address seller,\n        TokenManager.Tokens tokenID,\n        uint256 paymentAmount,\n        uint256 stakeAmount,\n        uint256 escrowCountdown,\n        bytes calldata metadata,\n        bytes calldata agreementParams\n    ) public initializeTemplate() {\n        // set participants if defined\n        if (buyer != address(0)) {\n            _data.buyer = buyer;\n        }\n        if (seller != address(0)) {\n            _data.seller = seller;\n        }\n\n        // set operator if defined\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // set token\n        require(TokenManager.isValidTokenID(tokenID), 'invalid token');\n        _data.tokenID = tokenID;\n\n        // set amounts if defined\n        if (paymentAmount != uint256(0)) {\n            require(paymentAmount <= uint256(uint128(paymentAmount)), \"paymentAmount is too large\");\n            _data.paymentAmount = uint128(paymentAmount);\n        }\n        if (stakeAmount != uint256(0)) {\n            require(stakeAmount == uint256(uint128(stakeAmount)), \"stakeAmount is too large\");\n            _data.stakeAmount = uint128(stakeAmount);\n        }\n\n        // set countdown length\n        Countdown._setLength(escrowCountdown);\n\n        // set metadata if defined\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // set agreementParams if defined\n        if (agreementParams.length != 0) {\n            (\n            uint256 ratio,\n            Griefing.RatioType ratioType,\n            uint256 agreementCountdown\n            ) = abi.decode(agreementParams, (uint256, Griefing.RatioType, uint256));\n            require(ratio == uint256(uint120(ratio)), \"ratio out of bounds\");\n            require(agreementCountdown == uint256(uint128(agreementCountdown)), \"agreementCountdown out of bounds\");\n            _data.agreementParams = AgreementParams(uint120(ratio), ratioType, uint128(agreementCountdown));\n        }\n\n        // emit event\n        emit Initialized(operator, buyer, seller, tokenID, paymentAmount, stakeAmount, escrowCountdown, metadata, agreementParams);\n    }","contract":"CountdownGriefingEscrow","time":0},{"type":"external-function ","before":"function setMetadata(bytes memory metadata) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }","after":"function setMetadata(bytes calldata metadata) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }","contract":"CountdownGriefingEscrow","time":0},{"type":"external-function ","before":"function submitData(bytes memory data) public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n        // restrict state machine\n        require(isFinalized(), \"only after finalized\");\n\n        // emit event\n        emit DataSubmitted(data);\n    }","after":"function submitData(bytes calldata data) public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n        // restrict state machine\n        require(isFinalized(), \"only after finalized\");\n\n        // emit event\n        emit DataSubmitted(data);\n    }","contract":"CountdownGriefingEscrow","time":0},{"type":"external-function ","before":"function create(bytes memory callData) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(msg.sender, getTemplate(), callData);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","after":"function create(bytes calldata callData) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(msg.sender, getTemplate(), callData);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","contract":"CountdownGriefingEscrow_Factory","time":0},{"type":"external-function ","before":"function createSalty(bytes memory callData, bytes32 salt) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawnSalty(msg.sender, getTemplate(), callData, salt);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","after":"function createSalty(bytes calldata callData, bytes32 salt) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawnSalty(msg.sender, getTemplate(), callData, salt);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","contract":"CountdownGriefingEscrow_Factory","time":0},{"type":"external-function ","before":"function getSaltyInstance(\n        address creator,\n        bytes memory callData,\n        bytes32 salt\n    ) public view returns (address instance, bool validity) {\n        return Spawner._getSaltyTarget(creator, getTemplate(), callData, salt);\n    }","after":"function getSaltyInstance(\n        address creator,\n        bytes calldata callData,\n        bytes32 salt\n    ) public view returns (address instance, bool validity) {\n        return Spawner._getSaltyTarget(creator, getTemplate(), callData, salt);\n    }","contract":"CountdownGriefingEscrow_Factory","time":0},{"type":"external-function ","before":"function getNextNonceInstance(\n        address creator,\n        bytes memory callData\n    ) public view returns (address target) {\n        return Spawner._getNextNonceTarget(creator, getTemplate(), callData);\n    }","after":"function getNextNonceInstance(\n        address creator,\n        bytes calldata callData\n    ) public view returns (address target) {\n        return Spawner._getNextNonceTarget(creator, getTemplate(), callData);\n    }","contract":"CountdownGriefingEscrow_Factory","time":0}]}
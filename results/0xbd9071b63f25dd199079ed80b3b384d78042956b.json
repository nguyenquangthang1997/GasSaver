{"time":145,"results":[{"type":"state-data-arrangement ","before":"\n   Counters.Counter public tokenIdCount\n   Counters.Counter public veeFriendsIdCount\n   Counters.Counter public prizeIdCount\n   uint public constant MAX_GRILLZ = 55\n   uint public constant VEEFRIENDS_MINTS = 5\n   uint public constant PRIZE_MINTS = \n   uint public constant RESERVED_MINTS = VEEFRIENDS_MINTS + PRIZE_MIN\n   bool public BLOCK_CONTRACTS = tr\n   bool public ENABLE_DIRECT_MINT = fal\n   bool public SALE_IS_ACTIVE = fal\n   bool public PRESALE_IS_ACTIVE = fal\n   uint public LIMIT_PER_ACCOUNT =\n   uint public mintPrice = 600000000000000\n   uint public startingInd\n   uint public startingIndexBlo\n   string public PROVENANCE_HA\n   mapping(address => uint) public earlyMintAllowan\n   mapping(address => bool) public veeFriendsWinne\n   mapping(address => uint) private _publicSaleMintCoun\n   mapping(string => bool) private _usedNonc\n   string private _baseTokenU\n   address private _signerAddre","after":"   Counters.Counter public tokenIdCount\n   Counters.Counter public veeFriendsIdCount\n   Counters.Counter public prizeIdCount\n   uint public constant MAX_GRILLZ = 55\n   uint public constant VEEFRIENDS_MINTS = 5\n   uint public constant PRIZE_MINTS = \n   uint public constant RESERVED_MINTS = VEEFRIENDS_MINTS + PRIZE_MIN\n   uint public LIMIT_PER_ACCOUNT =\n   uint public mintPrice = 600000000000000\n   uint public startingInd\n   uint public startingIndexBlo\n   string public PROVENANCE_HA\n   mapping(address => uint) public earlyMintAllowan\n   mapping(address => bool) public veeFriendsWinne\n   mapping(address => uint) private _publicSaleMintCoun\n   mapping(string => bool) private _usedNonc\n   string private _baseTokenU\n   address private _signerAddre\n   bool public BLOCK_CONTRACTS = tr\n   bool public ENABLE_DIRECT_MINT = fal\n   bool public SALE_IS_ACTIVE = fal\n   bool public PRESALE_IS_ACTIVE = fal\n","contract":"GrillzGang","time":0},{"type":"external-function ","before":"   function mintGrillz(uint _count, bytes32 hash, bytes memory signature, string memory nonce) external payable {\n        require(SALE_IS_ACTIVE, \"Sale not active\");\n        require(ENABLE_DIRECT_MINT || matchAddresSigner(hash, signature), \"Direct mint not allowed\");\n        require(ENABLE_DIRECT_MINT || !_usedNonces[nonce], \"Hash used\");\n        require(ENABLE_DIRECT_MINT || hashTransaction(_msgSender(), _count, nonce) == hash, \"Hash failed\");\n        require(_publicSaleMintCounts[_msgSender()].add(_count) <= LIMIT_PER_ACCOUNT, \"Exceeds available mints\");\n\n        _mintGrillz(_msgSender(), _count);\n\n        _publicSaleMintCounts[_msgSender()] += _count;\n        _usedNonces[nonce] = true;\n  ","after":"   function mintGrillz(uint _count, bytes32 hash, bytes calldata signature, string calldata nonce) external payable {\n        require(SALE_IS_ACTIVE, \"Sale not active\");\n        require(ENABLE_DIRECT_MINT || matchAddresSigner(hash, signature), \"Direct mint not allowed\");\n        require(ENABLE_DIRECT_MINT || !_usedNonces[nonce], \"Hash used\");\n        require(ENABLE_DIRECT_MINT || hashTransaction(_msgSender(), _count, nonce) == hash, \"Hash failed\");\n        require(_publicSaleMintCounts[_msgSender()].add(_count) <= LIMIT_PER_ACCOUNT, \"Exceeds available mints\");\n\n        _mintGrillz(_msgSender(), _count);\n\n        _publicSaleMintCounts[_msgSender()] += _count;\n        _usedNonces[nonce] = true;\n  ","contract":"GrillzGang","time":0},{"type":"constant-restrict-modification  ","before":"   uint public mintPrice = 600000000000000","after":"   uint public constant mintPrice = 600000000000000","contract":"GrillzGang","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"GrillzGang","time":0},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"GrillzGang","time":0}]}
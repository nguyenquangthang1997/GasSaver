{"time":311,"results":[{"type":"struct-data-arrangement ","before":"\n  address grantManag\n  address grant\n  uint256 revoked\n  uint256 revokedAmou\n  uint256 revokedWithdra\n  bool revocab\n  uint256 amou\n  uint256 durati\n  uint256 sta\n  uint256 cli\n  uint256 withdra\n  uint256 stak\n  GrantStakingPolicy stakingPoli","after":"  uint256 revoked\n  uint256 revokedAmou\n  uint256 revokedWithdra\n  uint256 amou\n  uint256 durati\n  uint256 sta\n  uint256 cli\n  uint256 withdra\n  uint256 stak\n  GrantStakingPolicy stakingPoli\n  address grantManag\n  address grant\n  bool revocab\n","contract":"TokenGrant","time":0},{"type":"external-function ","before":"  function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _extraData) public {\n        require(ERC20Burnable(_token) == token, \"Token contract must be the same one linked to this contract.\");\n        require(_amount <= token.balanceOf(_from), \"Sender must have enough amount.\");\n        (address _grantManager,\n        address _grantee,\n        uint256 _duration,\n        uint256 _start,\n        uint256 _cliffDuration,\n        bool _revocable,\n        address _stakingPolicy) = abi.decode(\n            _extraData,\n            (address, address, uint256, uint256, uint256, bool, address)\n        );\n\n        require(_grantee != address(0), \"Grantee address can't be zero.\");\n        require(\n            _cliffDuration <= _duration,\n            \"Unlocking cliff duration must be less or equal total unlocking duration.\"\n        );\n\n        require(_stakingPolicy != address(0), \"Staking policy can't be zero.\");\n\n        uint256 id = numGrants++;\n        grants[id] = Grant(\n            _grantManager,\n            _grantee,\n            0, 0, 0,\n            _revocable,\n            _amount,\n            _duration,\n            _start,\n            _start.add(_cliffDuration),\n            0, 0,\n            GrantStakingPolicy(_stakingPolicy)\n        );\n\n        // Maintain a record to make it easier to query grants by grant manager.\n        grantIndices[_from].push(id);\n\n        // Maintain a record to make it easier to query grants by grantee.\n        grantIndices[_grantee].push(id);\n\n        token.safeTransferFrom(_from, address(this), _amount);\n\n        // Maintain a record of the unlocked amount\n        balances[_grantee] = balances[_grantee].add(_amount);\n        emit TokenGrantCreated(id);\n   ","after":"  function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _extraData) public {\n        require(ERC20Burnable(_token) == token, \"Token contract must be the same one linked to this contract.\");\n        require(_amount <= token.balanceOf(_from), \"Sender must have enough amount.\");\n        (address _grantManager,\n        address _grantee,\n        uint256 _duration,\n        uint256 _start,\n        uint256 _cliffDuration,\n        bool _revocable,\n        address _stakingPolicy) = abi.decode(\n            _extraData,\n            (address, address, uint256, uint256, uint256, bool, address)\n        );\n\n        require(_grantee != address(0), \"Grantee address can't be zero.\");\n        require(\n            _cliffDuration <= _duration,\n            \"Unlocking cliff duration must be less or equal total unlocking duration.\"\n        );\n\n        require(_stakingPolicy != address(0), \"Staking policy can't be zero.\");\n\n        uint256 id = numGrants++;\n        grants[id] = Grant(\n            _grantManager,\n            _grantee,\n            0, 0, 0,\n            _revocable,\n            _amount,\n            _duration,\n            _start,\n            _start.add(_cliffDuration),\n            0, 0,\n            GrantStakingPolicy(_stakingPolicy)\n        );\n\n        // Maintain a record to make it easier to query grants by grant manager.\n        grantIndices[_from].push(id);\n\n        // Maintain a record to make it easier to query grants by grantee.\n        grantIndices[_grantee].push(id);\n\n        token.safeTransferFrom(_from, address(this), _amount);\n\n        // Maintain a record of the unlocked amount\n        balances[_grantee] = balances[_grantee].add(_amount);\n        emit TokenGrantCreated(id);\n   ","contract":"TokenGrant","time":0},{"type":"external-function ","before":"  function stake(uint256 _id, address _stakingContract, uint256 _amount, bytes memory _extraData) public {\n        require(grants[_id].grantee == msg.sender, \"Only grantee of the grant can stake it.\");\n        require(grants[_id].revokedAt == 0, \"Revoked grant can not be staked\");\n        require(\n            stakingContracts[grants[_id].grantManager][_stakingContract],\n            \"Provided staking contract is not authorized.\"\n        );\n\n        // Expecting 60 bytes _extraData for stake delegation.\n        require(_extraData.length == 60, \"Stake delegation data must be provided.\");\n        address operator = _extraData.toAddress(20);\n\n        // Calculate available amount. Amount of unlocked tokens minus what user already withdrawn and staked.\n        require(_amount <= availableToStake(_id), \"Must have available granted amount to stake.\");\n\n        // Keep staking record.\n        TokenGrantStake grantStake = new TokenGrantStake(\n            address(token),\n            _id,\n            _stakingContract\n        );\n        grantStakes[operator] = grantStake;\n        granteesToOperators[grants[_id].grantee].push(operator);\n        grants[_id].staked += _amount;\n\n        token.transfer(address(grantStake), _amount);\n\n        // Staking contract expects 40 bytes _extraData for stake delegation.\n        // 20 bytes beneficiary's address + 20 bytes operator's address.\n        grantStake.stake(_amount, _extraData);\n        emit TokenGrantStaked(_id, _amount, operator);\n   ","after":"  function stake(uint256 _id, address _stakingContract, uint256 _amount, bytes calldata _extraData) public {\n        require(grants[_id].grantee == msg.sender, \"Only grantee of the grant can stake it.\");\n        require(grants[_id].revokedAt == 0, \"Revoked grant can not be staked\");\n        require(\n            stakingContracts[grants[_id].grantManager][_stakingContract],\n            \"Provided staking contract is not authorized.\"\n        );\n\n        // Expecting 60 bytes _extraData for stake delegation.\n        require(_extraData.length == 60, \"Stake delegation data must be provided.\");\n        address operator = _extraData.toAddress(20);\n\n        // Calculate available amount. Amount of unlocked tokens minus what user already withdrawn and staked.\n        require(_amount <= availableToStake(_id), \"Must have available granted amount to stake.\");\n\n        // Keep staking record.\n        TokenGrantStake grantStake = new TokenGrantStake(\n            address(token),\n            _id,\n            _stakingContract\n        );\n        grantStakes[operator] = grantStake;\n        granteesToOperators[grants[_id].grantee].push(operator);\n        grants[_id].staked += _amount;\n\n        token.transfer(address(grantStake), _amount);\n\n        // Staking contract expects 40 bytes _extraData for stake delegation.\n        // 20 bytes beneficiary's address + 20 bytes operator's address.\n        grantStake.stake(_amount, _extraData);\n        emit TokenGrantStaked(_id, _amount, operator);\n   ","contract":"TokenGrant","time":0},{"type":"external-function ","before":"  function stake(\n        uint256 _amount,\n        bytes memory _extraData\n    ) public onlyGrant {\n        amount = _amount;\n        operator = _extraData.toAddress(20);\n        tokenSender(address(token)).approveAndCall(\n            address(tokenStaking),\n            _amount,\n            _extraData\n        );\n   ","after":"  function stake(\n        uint256 _amount,\n        bytes calldata _extraData\n    ) public onlyGrant {\n        amount = _amount;\n        operator = _extraData.toAddress(20);\n        tokenSender(address(token)).approveAndCall(\n            address(tokenStaking),\n            _amount,\n            _extraData\n        );\n   ","contract":"TokenGrantStake","time":0},{"type":"immutable-restrict-modification ","before":"  address tokenGran","after":"  address tokenGran","contract":"TokenGrantStake","time":0},{"type":"immutable-restrict-modification ","before":"  uint256 grantI","after":"  uint256 grantI","contract":"TokenGrantStake","time":0},{"type":"external-function ","before":"    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        require(ERC20Burnable(_token) == token, \"Token contract must be the same one linked to this contract.\");\n        require(_value >= minimumStake(), \"Tokens amount must be greater than the minimum stake\");\n        require(_extraData.length == 60, \"Stake delegation data must be provided.\");\n\n        address payable beneficiary = address(uint160(_extraData.toAddress(0)));\n        address operator = _extraData.toAddress(20);\n        require(operators[operator].owner == address(0), \"Operator address is already in use.\");\n        address authorizer = _extraData.toAddress(40);\n\n        // Transfer tokens to this contract.\n        token.safeTransferFrom(_from, address(this), _value);\n\n        operators[operator] = Operator(\n            OperatorParams.pack(_value, block.timestamp, 0),\n            _from,\n            beneficiary,\n            authorizer\n        );\n        ownerOperators[_from].push(operator);\n\n        emit Staked(operator, _value);\n ","after":"    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) public {\n        require(ERC20Burnable(_token) == token, \"Token contract must be the same one linked to this contract.\");\n        require(_value >= minimumStake(), \"Tokens amount must be greater than the minimum stake\");\n        require(_extraData.length == 60, \"Stake delegation data must be provided.\");\n\n        address payable beneficiary = address(uint160(_extraData.toAddress(0)));\n        address operator = _extraData.toAddress(20);\n        require(operators[operator].owner == address(0), \"Operator address is already in use.\");\n        address authorizer = _extraData.toAddress(40);\n\n        // Transfer tokens to this contract.\n        token.safeTransferFrom(_from, address(this), _value);\n\n        operators[operator] = Operator(\n            OperatorParams.pack(_value, block.timestamp, 0),\n            _from,\n            beneficiary,\n            authorizer\n        );\n        ownerOperators[_from].push(operator);\n\n        emit Staked(operator, _value);\n ","contract":"TokenStaking","time":0},{"type":"external-function ","before":"    function slash(uint256 amountToSlash, address[] memory misbehavedOperators)\n    public\n    onlyApprovedOperatorContract(msg.sender) {\n\n        uint256 totalAmountToBurn = 0;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(operatorParams),\n                \"Operator stake must be active\"\n            );\n\n            require(\n                !_isStakeReleased(operator, operatorParams, msg.sender),\n                \"Stake is released\"\n            );\n\n            uint256 currentAmount = operatorParams.getAmount();\n\n            if (currentAmount < amountToSlash) {\n                totalAmountToBurn = totalAmountToBurn.add(currentAmount);\n\n                uint256 newAmount = 0;\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSlashed(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSlash);\n\n                uint256 newAmount = currentAmount.sub(amountToSlash);\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSlashed(operator, amountToSlash);\n            }\n        }\n\n        token.burn(totalAmountToBurn);\n ","after":"    function slash(uint256 amountToSlash, address[] calldata misbehavedOperators)\n    public\n    onlyApprovedOperatorContract(msg.sender) {\n\n        uint256 totalAmountToBurn = 0;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(operatorParams),\n                \"Operator stake must be active\"\n            );\n\n            require(\n                !_isStakeReleased(operator, operatorParams, msg.sender),\n                \"Stake is released\"\n            );\n\n            uint256 currentAmount = operatorParams.getAmount();\n\n            if (currentAmount < amountToSlash) {\n                totalAmountToBurn = totalAmountToBurn.add(currentAmount);\n\n                uint256 newAmount = 0;\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSlashed(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSlash);\n\n                uint256 newAmount = currentAmount.sub(amountToSlash);\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSlashed(operator, amountToSlash);\n            }\n        }\n\n        token.burn(totalAmountToBurn);\n ","contract":"TokenStaking","time":0},{"type":"external-function ","before":"    function seize(\n        uint256 amountToSeize,\n        uint256 rewardMultiplier,\n        address tattletale,\n        address[] memory misbehavedOperators\n    ) public onlyApprovedOperatorContract(msg.sender) {\n        uint256 totalAmountToBurn = 0;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(operatorParams),\n                \"Operator stake must be active\"\n            );\n\n            require(\n                !_isStakeReleased(operator, operatorParams, msg.sender),\n                \"Stake is released\"\n            );\n\n            uint256 currentAmount = operatorParams.getAmount();\n\n            if (currentAmount < amountToSeize) {\n                totalAmountToBurn = totalAmountToBurn.add(currentAmount);\n\n                uint256 newAmount = 0;\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSeized(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSeize);\n\n                uint256 newAmount = currentAmount.sub(amountToSeize);\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSeized(operator, amountToSeize);\n            }\n        }\n\n        uint256 tattletaleReward = (totalAmountToBurn.percent(5)).percent(rewardMultiplier);\n\n        token.safeTransfer(tattletale, tattletaleReward);\n        token.burn(totalAmountToBurn.sub(tattletaleReward));\n ","after":"    function seize(\n        uint256 amountToSeize,\n        uint256 rewardMultiplier,\n        address tattletale,\n        address[] calldata misbehavedOperators\n    ) public onlyApprovedOperatorContract(msg.sender) {\n        uint256 totalAmountToBurn = 0;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(operatorParams),\n                \"Operator stake must be active\"\n            );\n\n            require(\n                !_isStakeReleased(operator, operatorParams, msg.sender),\n                \"Stake is released\"\n            );\n\n            uint256 currentAmount = operatorParams.getAmount();\n\n            if (currentAmount < amountToSeize) {\n                totalAmountToBurn = totalAmountToBurn.add(currentAmount);\n\n                uint256 newAmount = 0;\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSeized(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSeize);\n\n                uint256 newAmount = currentAmount.sub(amountToSeize);\n                operators[operator].packedParams = operatorParams.setAmount(newAmount);\n                emit TokensSeized(operator, amountToSeize);\n            }\n        }\n\n        uint256 tattletaleReward = (totalAmountToBurn.percent(5)).percent(rewardMultiplier);\n\n        token.safeTransfer(tattletale, tattletaleReward);\n        token.burn(totalAmountToBurn.sub(tattletaleReward));\n ","contract":"TokenStaking","time":0},{"type":"immutable-restrict-modification ","before":"  uint256 public minimumStakeScheduleStar","after":"  uint256 public minimumStakeScheduleStar","contract":"TokenStaking","time":0},{"type":"immutable-restrict-modification ","before":"  uint256 public initializationPerio","after":"  uint256 public initializationPerio","contract":"TokenStaking","time":0},{"type":"immutable-restrict-modification ","before":"  uint256 public undelegationPerio","after":"  uint256 public undelegationPerio","contract":"TokenStaking","time":0}]}
{"time":127,"results":[{"type":"loop-duplication","before":"\nstart line 937 column 8, end line 939 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(_roaringLeadersContractInstance.ownerOf(tokenIds[i]) == msg.sender, 'Caller is not owner of the token ID');\n   \nstart line 941 column 8, end line 945 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            _roaringLeadersContractInstance.burnForElixir(tokenIds[i]);\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, _tokenIdCounter.current());\n   ","after":"// merge loop\n\nstart line 937 column 8, end line 939 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(_roaringLeadersContractInstance.ownerOf(tokenIds[i]) == msg.sender, 'Caller is not owner of the token ID');\n   \nstart line 941 column 8, end line 945 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            _roaringLeadersContractInstance.burnForElixir(tokenIds[i]);\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, _tokenIdCounter.current());\n   ","contract":"Elixir","time":0},{"type":"external-function ","before":"\n\n    function consumeElixir(uint256 elixirTokenId, uint256 roaringLeadersTokenId, string memory traitName) external {\n        require(_isApprovedOrOwner(_msgSender(), elixirTokenId), \"Caller is not owner nor approved\");\n        require(_roaringLeadersContractInstance.ownerOf(roaringLeadersTokenId) == msg.sender, 'Caller is not owner of the Roaring Leaders token ID');\n\n        _burn(elixirTokenId);\n\n        emit ElixirConsumed(elixirTokenId, roaringLeadersTokenId, traitName);","after":"\n\n    function consumeElixir(uint256 elixirTokenId, uint256 roaringLeadersTokenId, string calldata traitName) external {\n        require(_isApprovedOrOwner(_msgSender(), elixirTokenId), \"Caller is not owner nor approved\");\n        require(_roaringLeadersContractInstance.ownerOf(roaringLeadersTokenId) == msg.sender, 'Caller is not owner of the Roaring Leaders token ID');\n\n        _burn(elixirTokenId);\n\n        emit ElixirConsumed(elixirTokenId, roaringLeadersTokenId, traitName);","contract":"Elixir","time":0},{"type":"external-function ","before":"\n\n    function setBaseURI(string memory newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;","after":"\n\n    function setBaseURI(string calldata newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;","contract":"Elixir","time":0},{"type":"external-function ","before":"/\n    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        provenance = provenanceHash;","after":"/\n    function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        provenance = provenanceHash;","contract":"Elixir","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Elixir","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Elixir","time":1}]}
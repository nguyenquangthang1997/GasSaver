{"time":191,"results":[{"type":"struct-data-arrangement ","before":"\nIERC20 token\nuint256 allocPoint\nuint256 lastRewardBlock\nuint256 accRewardsPerShare\nuint32 vestingPercent\nuint16 vestingPeriod\nuint16 vestingCliff\nuint256 totalStaked\nbool vpForDeposit\nbool vpForVesting","after":"IERC20 token\nuint256 allocPoint\nuint256 lastRewardBlock\nuint256 accRewardsPerShare\nuint256 totalStaked\nuint32 vestingPercent\nuint16 vestingPeriod\nuint16 vestingCliff\nbool vpForDeposit\nbool vpForVesting\n","contract":"RewardsManager","time":0},{"type":"external-function ","before":"function tokenAllow(\n        address[] memory tokensToApprove,\n        uint256[] memory approvalAmounts,\n        address spender\n    ) external onlyOwner {\n        require(tokensToApprove.length == approvalAmounts.length, \"RM::tokenAllow: not same length\");\n        for (uint i = 0; i < tokensToApprove.length; i++) {\n            IERC20 token = IERC20(tokensToApprove[i]);\n            if (token.allowance(address(this), spender) != uint256(- 1)) {\n                token.safeApprove(spender, approvalAmounts[i]);\n            }\n        }\n    }","after":"function tokenAllow(\n        address[] calldata tokensToApprove,\n        uint256[] calldata approvalAmounts,\n        address spender\n    ) external onlyOwner {\n        require(tokensToApprove.length == approvalAmounts.length, \"RM::tokenAllow: not same length\");\n        for (uint i = 0; i < tokensToApprove.length; i++) {\n            IERC20 token = IERC20(tokensToApprove[i]);\n            if (token.allowance(address(this), spender) != uint256(- 1)) {\n                token.safeApprove(spender, approvalAmounts[i]);\n            }\n        }\n    }","contract":"RewardsManager","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public startBlock;","after":"uint256 public immutable startBlock;","contract":"RewardsManager","time":0}]}
{"time":540,"results":[{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"Reputation","time":1},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"DAOToken","time":1},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"DAOToken","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public cap;","after":"uint256 public immutable cap;","contract":"DAOToken","time":1},{"type":"external-function ","before":"function genericCall(address _contract, bytes memory _data, uint256 _value)\n    public\n    onlyOwner\n    returns (bool success, bytes memory returnValue) {\n        // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }","after":"function genericCall(address _contract, bytes calldata _data, uint256 _value)\n    public\n    onlyOwner\n    returns (bool success, bytes memory returnValue) {\n        // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }","contract":"Avatar","time":0},{"type":"external-function ","before":"function metaData(string memory _metaData) public onlyOwner returns (bool) {\n        emit MetaData(_metaData);\n        return true;\n    }","after":"function metaData(string calldata _metaData) public onlyOwner returns (bool) {\n        emit MetaData(_metaData);\n        return true;\n    }","contract":"Avatar","time":0},{"type":"immutable-restrict-modification ","before":"string public orgName;","after":"string public immutable orgName;","contract":"Avatar","time":0},{"type":"struct-data-arrangement ","before":"\nbytes32 organizationId\naddress callbacks\nProposalState state\nuint256 winningVote\naddress proposer\nuint256 currentBoostedVotePeriodLimit\nbytes32 paramsHash\nuint256 daoBountyRemain\nuint256 daoBounty\nuint256 totalStakes\nuint256 confidenceThreshold\nuint256 secondsFromTimeOutTillExecuteBoosted\nuint[3] times\nbool daoRedeemItsWinnings\nmapping(uint256 => uint256) votes\nmapping(uint256 => uint256) preBoostedVotes\nmapping(address => Voter) voters\nmapping(uint256 => uint256) stakes\nmapping(address => Staker) stakers","after":"bytes32 organizationId\nProposalState state\nuint256 winningVote\nuint256 currentBoostedVotePeriodLimit\nbytes32 paramsHash\nuint256 daoBountyRemain\nuint256 daoBounty\nuint256 totalStakes\nuint256 confidenceThreshold\nuint256 secondsFromTimeOutTillExecuteBoosted\nuint[3] times\nmapping(uint256 => uint256) votes\nmapping(uint256 => uint256) preBoostedVotes\nmapping(address => Voter) voters\nmapping(uint256 => uint256) stakes\nmapping(address => Staker) stakers\naddress callbacks\naddress proposer\nbool daoRedeemItsWinnings\n","contract":"GenesisProtocolLogic","time":0},{"type":"struct-data-arrangement ","before":"\naddress scheme\nbool addScheme\nbytes32 parametersHash\nbytes4 permissions","after":"bytes32 parametersHash\naddress scheme\nbytes4 permissions\nbool addScheme\n","contract":"SchemeRegistrar","time":0},{"type":"external-function ","before":"function proposeScheme(\n        Avatar _avatar,\n        address _scheme,\n        bytes32 _parametersHash,\n        bytes4 _permissions,\n        string memory _descriptionHash\n    )\n    public\n    returns (bytes32)\n    {\n        // propose\n        require(_scheme != address(0), \"scheme cannot be zero\");\n        Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];\n\n        bytes32 proposalId = controllerParams.intVote.propose(\n            2,\n            controllerParams.voteRegisterParams,\n            msg.sender,\n            address(_avatar)\n        );\n\n        SchemeProposal memory proposal = SchemeProposal({\n        scheme : _scheme,\n        parametersHash : _parametersHash,\n        addScheme : true,\n        permissions : _permissions\n        });\n        emit NewSchemeProposal(\n            address(_avatar),\n            proposalId,\n            address(controllerParams.intVote),\n            _scheme, _parametersHash,\n            _permissions,\n            _descriptionHash\n        );\n        organizationsProposals[address(_avatar)][proposalId] = proposal;\n        proposalsInfo[address(controllerParams.intVote)][proposalId] = ProposalInfo({\n        blockNumber : block.number,\n        avatar : _avatar\n        });\n        return proposalId;\n    }","after":"function proposeScheme(\n        Avatar _avatar,\n        address _scheme,\n        bytes32 _parametersHash,\n        bytes4 _permissions,\n        string calldata _descriptionHash\n    )\n    public\n    returns (bytes32)\n    {\n        // propose\n        require(_scheme != address(0), \"scheme cannot be zero\");\n        Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];\n\n        bytes32 proposalId = controllerParams.intVote.propose(\n            2,\n            controllerParams.voteRegisterParams,\n            msg.sender,\n            address(_avatar)\n        );\n\n        SchemeProposal memory proposal = SchemeProposal({\n        scheme : _scheme,\n        parametersHash : _parametersHash,\n        addScheme : true,\n        permissions : _permissions\n        });\n        emit NewSchemeProposal(\n            address(_avatar),\n            proposalId,\n            address(controllerParams.intVote),\n            _scheme, _parametersHash,\n            _permissions,\n            _descriptionHash\n        );\n        organizationsProposals[address(_avatar)][proposalId] = proposal;\n        proposalsInfo[address(controllerParams.intVote)][proposalId] = ProposalInfo({\n        blockNumber : block.number,\n        avatar : _avatar\n        });\n        return proposalId;\n    }","contract":"SchemeRegistrar","time":0},{"type":"external-function ","before":"function proposeToRemoveScheme(Avatar _avatar, address _scheme, string memory _descriptionHash)\n    public\n    returns (bytes32)\n    {\n        require(_scheme != address(0), \"scheme cannot be zero\");\n        bytes32 paramsHash = getParametersFromController(_avatar);\n        Parameters memory params = parameters[paramsHash];\n\n        IntVoteInterface intVote = params.intVote;\n        bytes32 proposalId = intVote.propose(2, params.voteRemoveParams, msg.sender, address(_avatar));\n        organizationsProposals[address(_avatar)][proposalId].scheme = _scheme;\n        emit RemoveSchemeProposal(address(_avatar), proposalId, address(intVote), _scheme, _descriptionHash);\n        proposalsInfo[address(params.intVote)][proposalId] = ProposalInfo({\n        blockNumber : block.number,\n        avatar : _avatar\n        });\n        return proposalId;\n    }","after":"function proposeToRemoveScheme(Avatar _avatar, address _scheme, string calldata _descriptionHash)\n    public\n    returns (bytes32)\n    {\n        require(_scheme != address(0), \"scheme cannot be zero\");\n        bytes32 paramsHash = getParametersFromController(_avatar);\n        Parameters memory params = parameters[paramsHash];\n\n        IntVoteInterface intVote = params.intVote;\n        bytes32 proposalId = intVote.propose(2, params.voteRemoveParams, msg.sender, address(_avatar));\n        organizationsProposals[address(_avatar)][proposalId].scheme = _scheme;\n        emit RemoveSchemeProposal(address(_avatar), proposalId, address(intVote), _scheme, _descriptionHash);\n        proposalsInfo[address(params.intVote)][proposalId] = ProposalInfo({\n        blockNumber : block.number,\n        avatar : _avatar\n        });\n        return proposalId;\n    }","contract":"SchemeRegistrar","time":0}]}
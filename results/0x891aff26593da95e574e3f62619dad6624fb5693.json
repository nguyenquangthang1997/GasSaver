{"time":146,"results":[{"type":"loop-calculation","before":"PoolProgram memory program = _programs[poolToken];","after":"// move outside for loop\nPoolProgram memory program = _programs[poolToken];","loc":{"start":{"line":1534,"column":12},"end":{"line":1534,"column":61}},"contract":"StakingRewardsStore","time":0},{"type":"external-function ","before":"function setProviderRewardData(\n        IDSToken poolToken,\n        IERC20Token reserveToken,\n        address[] memory providers,\n        uint256[] memory rewardsPerToken,\n        uint256[] memory pendingBaseRewards,\n        uint256[] memory totalClaimedRewards,\n        uint256[] memory effectiveStakingTimes,\n        uint256[] memory baseRewardsDebts,\n        uint32[] memory baseRewardsDebtMultipliers\n    ) external onlySeeder validAddress(address(poolToken)) validAddress(address(reserveToken)) {\n        uint256 length = providers.length;\n        require(\n            length == rewardsPerToken.length &&\n            length == pendingBaseRewards.length &&\n            length == totalClaimedRewards.length &&\n            length == effectiveStakingTimes.length &&\n            length == baseRewardsDebts.length &&\n            length == baseRewardsDebtMultipliers.length,\n            \"ERR_INVALID_LENGTH\"\n        );\n\n        for (uint256 i = 0; i < length; ++i) {\n            ProviderRewards storage data = _providerRewards[providers[i]][poolToken][reserveToken];\n\n            uint256 baseRewardsDebt = baseRewardsDebts[i];\n            uint32 baseRewardsDebtMultiplier = baseRewardsDebtMultipliers[i];\n            require(\n                baseRewardsDebt == 0 ||\n                (baseRewardsDebtMultiplier >= PPM_RESOLUTION && baseRewardsDebtMultiplier <= 2 * PPM_RESOLUTION),\n                \"ERR_INVALID_MULTIPLIER\"\n            );\n\n            data.rewardPerToken = rewardsPerToken[i];\n            data.pendingBaseRewards = pendingBaseRewards[i];\n            data.totalClaimedRewards = totalClaimedRewards[i];\n            data.effectiveStakingTime = effectiveStakingTimes[i];\n            data.baseRewardsDebt = baseRewardsDebts[i];\n            data.baseRewardsDebtMultiplier = baseRewardsDebtMultiplier;\n        }\n    }","after":"function setProviderRewardData(\n        IDSToken poolToken,\n        IERC20Token reserveToken,\n        address[] calldata providers,\n        uint256[] calldata rewardsPerToken,\n        uint256[] calldata pendingBaseRewards,\n        uint256[] calldata totalClaimedRewards,\n        uint256[] calldata effectiveStakingTimes,\n        uint256[] calldata baseRewardsDebts,\n        uint32[] calldata baseRewardsDebtMultipliers\n    ) external onlySeeder validAddress(address(poolToken)) validAddress(address(reserveToken)) {\n        uint256 length = providers.length;\n        require(\n            length == rewardsPerToken.length &&\n            length == pendingBaseRewards.length &&\n            length == totalClaimedRewards.length &&\n            length == effectiveStakingTimes.length &&\n            length == baseRewardsDebts.length &&\n            length == baseRewardsDebtMultipliers.length,\n            \"ERR_INVALID_LENGTH\"\n        );\n\n        for (uint256 i = 0; i < length; ++i) {\n            ProviderRewards storage data = _providerRewards[providers[i]][poolToken][reserveToken];\n\n            uint256 baseRewardsDebt = baseRewardsDebts[i];\n            uint32 baseRewardsDebtMultiplier = baseRewardsDebtMultipliers[i];\n            require(\n                baseRewardsDebt == 0 ||\n                (baseRewardsDebtMultiplier >= PPM_RESOLUTION && baseRewardsDebtMultiplier <= 2 * PPM_RESOLUTION),\n                \"ERR_INVALID_MULTIPLIER\"\n            );\n\n            data.rewardPerToken = rewardsPerToken[i];\n            data.pendingBaseRewards = pendingBaseRewards[i];\n            data.totalClaimedRewards = totalClaimedRewards[i];\n            data.effectiveStakingTime = effectiveStakingTimes[i];\n            data.baseRewardsDebt = baseRewardsDebts[i];\n            data.baseRewardsDebtMultiplier = baseRewardsDebtMultiplier;\n        }\n    }","contract":"StakingRewardsStore","time":1}]}
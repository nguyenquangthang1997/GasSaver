{"time":217,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":0},{"type":"state-data-arrangement ","before":"\nTokenTransferProxy private _tokenTransferProxy;\nbool private _paused;\nIWhitelisted private _whitelisted;\nIPartnerRegistry private _partnerRegistry;\naddress payable private _feeWallet;\nstring private _version = \"2.1.0\";\nuint256 private _gasMintPrice;","after":"TokenTransferProxy private _tokenTransferProxy;\nIWhitelisted private _whitelisted;\nIPartnerRegistry private _partnerRegistry;\nstring private _version = \"2.1.0\";\nuint256 private _gasMintPrice;\naddress payable private _feeWallet;\nbool private _paused;\n","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function simplBuy(\n\n        IERC20 fromToken,\n\n        IERC20 toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        address[] memory callees,\n\n        bytes memory exchangeData,\n\n        uint256[] memory startIndexes,\n\n        uint256[] memory values,\n\n        address payable beneficiary,\n\n        string memory referrer\n\n    )\n\n    external\n\n    payable\n\n    whenNotPaused\n\n    {\n\n        uint receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            toAmount, //expected amount and to amount are same in case of buy\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            address(fromToken),\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(address(fromToken), msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            beneficiary == address(0) ? msg.sender : beneficiary,\n\n            address(fromToken),\n\n            address(toToken),\n\n            fromAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","after":"function simplBuy(\n\n        IERC20 fromToken,\n\n        IERC20 toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        address[] calldata callees,\n\n        bytes calldata exchangeData,\n\n        uint256[] calldata startIndexes,\n\n        uint256[] calldata values,\n\n        address payable beneficiary,\n\n        string calldata referrer\n\n    )\n\n    external\n\n    payable\n\n    whenNotPaused\n\n    {\n\n        uint receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            toAmount, //expected amount and to amount are same in case of buy\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            address(fromToken),\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(address(fromToken), msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            beneficiary == address(0) ? msg.sender : beneficiary,\n\n            address(fromToken),\n\n            address(toToken),\n\n            fromAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function simpleSwap(\n\n        IERC20 fromToken,\n\n        IERC20 toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        uint256 expectedAmount,\n\n        address[] memory callees,\n\n        bytes memory exchangeData,\n\n        uint256[] memory startIndexes,\n\n        uint256[] memory values,\n\n        address payable beneficiary,\n\n        string memory referrer\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    returns (uint256)\n\n    {\n\n\n        uint receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            expectedAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary == address(0) ? msg.sender : beneficiary,\n\n            address(fromToken),\n\n            address(toToken),\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","after":"function simpleSwap(\n\n        IERC20 fromToken,\n\n        IERC20 toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        uint256 expectedAmount,\n\n        address[] calldata callees,\n\n        bytes calldata exchangeData,\n\n        uint256[] calldata startIndexes,\n\n        uint256[] calldata values,\n\n        address payable beneficiary,\n\n        string calldata referrer\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    returns (uint256)\n\n    {\n\n\n        uint receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            expectedAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary == address(0) ? msg.sender : beneficiary,\n\n            address(fromToken),\n\n            address(toToken),\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function multiSwap(\n\n        Utils.SellData memory data\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    returns (uint256)\n\n    {\n\n        //Referral can never be empty\n\n        require(bytes(data.referrer).length > 0, \"Invalid referrer\");\n\n\n        require(data.toAmount > 0, \"To amount can not be 0\");\n\n\n        uint256 receivedAmount = performSwap(\n\n            data.fromToken,\n\n            data.toToken,\n\n            data.fromAmount,\n\n            data.toAmount,\n\n            data.path\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            data.toToken,\n\n            data.expectedAmount,\n\n            receivedAmount,\n\n            data.beneficiary,\n\n            data.referrer\n\n        );\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            data.beneficiary == address(0) ? msg.sender : data.beneficiary,\n\n            address(data.fromToken),\n\n            address(data.toToken),\n\n            data.fromAmount,\n\n            receivedAmount,\n\n            data.expectedAmount,\n\n            data.referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","after":"function multiSwap(\n\n        Utils.SellData calldata data\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    returns (uint256)\n\n    {\n\n        //Referral can never be empty\n\n        require(bytes(data.referrer).length > 0, \"Invalid referrer\");\n\n\n        require(data.toAmount > 0, \"To amount can not be 0\");\n\n\n        uint256 receivedAmount = performSwap(\n\n            data.fromToken,\n\n            data.toToken,\n\n            data.fromAmount,\n\n            data.toAmount,\n\n            data.path\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            data.toToken,\n\n            data.expectedAmount,\n\n            receivedAmount,\n\n            data.beneficiary,\n\n            data.referrer\n\n        );\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            data.beneficiary == address(0) ? msg.sender : data.beneficiary,\n\n            address(data.fromToken),\n\n            address(data.toToken),\n\n            data.fromAmount,\n\n            receivedAmount,\n\n            data.expectedAmount,\n\n            data.referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function buy(\n\n        Utils.BuyData memory data\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    returns (uint256)\n\n    {\n\n        //Referral id can never be empty\n\n        require(bytes(data.referrer).length > 0, \"Invalid referrer\");\n\n\n        require(data.toAmount > 0, \"To amount can not be 0\");\n\n\n        uint256 receivedAmount = performBuy(\n\n            data.fromToken,\n\n            data.toToken,\n\n            data.fromAmount,\n\n            data.toAmount,\n\n            data.route\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            data.toToken,\n\n            data.toAmount,\n\n            receivedAmount,\n\n            data.beneficiary,\n\n            data.referrer\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            address(data.fromToken),\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(address(data.fromToken), msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            data.beneficiary == address(0) ? msg.sender : data.beneficiary,\n\n            address(data.fromToken),\n\n            address(data.toToken),\n\n            data.fromAmount,\n\n            receivedAmount,\n\n            data.referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","after":"function buy(\n\n        Utils.BuyData calldata data\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    returns (uint256)\n\n    {\n\n        //Referral id can never be empty\n\n        require(bytes(data.referrer).length > 0, \"Invalid referrer\");\n\n\n        require(data.toAmount > 0, \"To amount can not be 0\");\n\n\n        uint256 receivedAmount = performBuy(\n\n            data.fromToken,\n\n            data.toToken,\n\n            data.fromAmount,\n\n            data.toAmount,\n\n            data.route\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            data.toToken,\n\n            data.toAmount,\n\n            receivedAmount,\n\n            data.beneficiary,\n\n            data.referrer\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            address(data.fromToken),\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(address(data.fromToken), msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            data.beneficiary == address(0) ? msg.sender : data.beneficiary,\n\n            address(data.fromToken),\n\n            address(data.toToken),\n\n            data.fromAmount,\n\n            receivedAmount,\n\n            data.referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","contract":"AugustusSwapper","time":0},{"type":"constant-restrict-modification  ","before":"string private _version = \"2.1.0\";","after":"string private constant _version = \"2.1.0\";","contract":"AugustusSwapper","time":0}]}
{"time":553,"results":[{"type":"state-data-arrangement ","before":"\nIERC20 public override token0;\nIERC20 public override token1;\nuint24 public override activeFee;\nIUniswapV3Pool public override activePool;\naddress public override strategy;\naddress public override strategist;\naddress public override keeper;\nPosition public override mainPosition;\nPosition public override rangePosition;\nuint24 public override performanceFee;\nuint24 immutable PERFORMANCE_FEE_PRECISION;\naddress immutable uniV3Factory;","after":"IERC20 public override token0;\nIERC20 public override token1;\nIUniswapV3Pool public override activePool;\nPosition public override mainPosition;\nPosition public override rangePosition;\naddress public override strategy;\naddress public override strategist;\naddress public override keeper;\naddress immutable uniV3Factory;\nuint24 public override activeFee;\nuint24 public override performanceFee;\nuint24 immutable PERFORMANCE_FEE_PRECISION;\n","contract":"LixirVault","time":0},{"type":"external-function ","before":"    function initialize(\n        string memory name,\n        string memory symbol,\n        address _token0,\n        address _token1,\n        address _strategist,\n        address _keeper,\n        address _strategy\n    ) public override(LixirVault, ILixirVault) initializer {\n        LixirVault.initialize(\n            name,\n            symbol,\n            _token0,\n            _token1,\n            _strategist,\n            _keeper,\n            _strategy\n        );\n        TOKEN _WETH_TOKEN;\n        if (_token0 == address(weth9)) {\n            _WETH_TOKEN = TOKEN.ZERO;\n        } else {\n            require(_token1 == address(weth9));\n            _WETH_TOKEN = TOKEN.ONE;\n        }\n        WETH_TOKEN = _WETH_TOKEN;\n ","after":"    function initialize(\n        string calldata name,\n        string calldata symbol,\n        address _token0,\n        address _token1,\n        address _strategist,\n        address _keeper,\n        address _strategy\n    ) public override(LixirVault, ILixirVault) initializer {\n        LixirVault.initialize(\n            name,\n            symbol,\n            _token0,\n            _token1,\n            _strategist,\n            _keeper,\n            _strategy\n        );\n        TOKEN _WETH_TOKEN;\n        if (_token0 == address(weth9)) {\n            _WETH_TOKEN = TOKEN.ZERO;\n        } else {\n            require(_token1 == address(weth9));\n            _WETH_TOKEN = TOKEN.ONE;\n        }\n        WETH_TOKEN = _WETH_TOKEN;\n ","contract":"LixirVaultETH","time":0},{"type":"external-function ","before":"function initialize(\n        string memory name,\n        string memory symbol,\n        address _token0,\n        address _token1,\n        address _strategist,\n        address _keeper,\n        address _strategy\n    )\n    public\n    virtual\n    override\n    hasRole(LixirRoles.strategist_role, _strategist)\n    hasRole(LixirRoles.keeper_role, _keeper)\n    hasRole(LixirRoles.strategy_role, _strategy)\n    initializer\n    {\n        require(_token0 < _token1);\n        __LixirVaultToken__initialize(name, symbol);\n        token0 = IERC20(_token0);\n        token1 = IERC20(_token1);\n        strategist = _strategist;\n        keeper = _keeper;\n        strategy = _strategy;\n    }","after":"function initialize(\n        string calldata name,\n        string calldata symbol,\n        address _token0,\n        address _token1,\n        address _strategist,\n        address _keeper,\n        address _strategy\n    )\n    public\n    virtual\n    override\n    hasRole(LixirRoles.strategist_role, _strategist)\n    hasRole(LixirRoles.keeper_role, _keeper)\n    hasRole(LixirRoles.strategy_role, _strategy)\n    initializer\n    {\n        require(_token0 < _token1);\n        __LixirVaultToken__initialize(name, symbol);\n        token0 = IERC20(_token0);\n        token1 = IERC20(_token1);\n        strategist = _strategist;\n        keeper = _keeper;\n        strategy = _strategy;\n    }","contract":"LixirVaultETH","time":0},{"type":"constant-restrict-modification  ","before":"    bytes32 private immutable _PERMIT_TYPE_HASH =\n    keccak256(\n        'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\n  ","after":"    bytes32 private immutable constant _PERMIT_TYPE_HASH =\n    keccak256(\n        'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\n  ","contract":"LixirVaultETH","time":2}]}
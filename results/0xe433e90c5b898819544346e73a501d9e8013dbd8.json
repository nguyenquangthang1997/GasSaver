{"time":143,"results":[{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n        nonce : nonces[userAddress],\n        from : userAddress,\n        functionSignature : functionSignature\n        });\n\n        require(\n            verifySignature(\n                userAddress,\n                hashMetaTransaction(metaTx),\n                sigR,\n                sigS,\n                sigV\n            ),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n        nonce : nonces[userAddress],\n        from : userAddress,\n        functionSignature : functionSignature\n        });\n\n        require(\n            verifySignature(\n                userAddress,\n                hashMetaTransaction(metaTx),\n                sigR,\n                sigS,\n                sigV\n            ),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"CurrencyPunks","time":0},{"type":"constant-restrict-modification  ","before":"uint16 public reservedByHirst = 3100;","after":"uint16 public constant reservedByHirst = 3100;","contract":"CurrencyPunks","time":1},{"type":"immutable-restrict-modification ","before":"address public fundAddress;","after":"address public immutable fundAddress;","contract":"CurrencyPunks","time":1},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"CurrencyPunks","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"CurrencyPunks","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"CurrencyPunks","time":1}]}
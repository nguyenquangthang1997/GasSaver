{"time":248,"results":[{"type":"external-function ","before":"function unsafeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public {\n        _batchTransferFrom(_from, _to, _ids, _values, bytes(\"\"), false);\n    }","after":"function unsafeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values) public {\n        _batchTransferFrom(_from, _to, _ids, _values, bytes(\"\"), false);\n    }","contract":"ShareToken","time":0},{"type":"external-function ","before":"function lowestBalanceOfMarketOutcomes(IMarket _market, uint256[] memory _outcomes, address _account) public view returns (uint256) {\n        uint256 _lowest = SafeMathUint256.getUint256Max();\n        for (uint256 _i = 0; _i < _outcomes.length; ++_i) {\n            uint256 _tokenId = TokenId.getTokenId(_market, _outcomes[_i]);\n            _lowest = balanceOf(_account, _tokenId).min(_lowest);\n        }\n        return _lowest;\n    }","after":"function lowestBalanceOfMarketOutcomes(IMarket _market, uint256[] calldata _outcomes, address _account) public view returns (uint256) {\n        uint256 _lowest = SafeMathUint256.getUint256Max();\n        for (uint256 _i = 0; _i < _outcomes.length; ++_i) {\n            uint256 _tokenId = TokenId.getTokenId(_market, _outcomes[_i]);\n            _lowest = balanceOf(_account, _tokenId).min(_lowest);\n        }\n        return _lowest;\n    }","contract":"ShareToken","time":0},{"type":"external-function ","before":"function getTokenIds(IMarket _market, uint256[] memory _outcomes) public pure returns (uint256[] memory _tokenIds) {\n        return TokenId.getTokenIds(_market, _outcomes);\n    }","after":"function getTokenIds(IMarket _market, uint256[] calldata _outcomes) public pure returns (uint256[] memory _tokenIds) {\n        return TokenId.getTokenIds(_market, _outcomes);\n    }","contract":"ShareToken","time":0},{"type":"external-function ","before":"function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    )\n    public\n    view\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and IDs must have same lengths\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            require(accounts[i] != address(0), \"ERC1155: some address in batch balance query is zero\");\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    )\n    public\n    view\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and IDs must have same lengths\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            require(accounts[i] != address(0), \"ERC1155: some address in batch balance query is zero\");\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\n        }\n\n        return batchBalances;\n    }","contract":"ShareToken","time":0}]}
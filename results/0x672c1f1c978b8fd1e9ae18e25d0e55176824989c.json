{"time":164,"results":[{"type":"immutable-restrict-modification ","before":"address public owner;","after":"address public immutable owner;","contract":"Migrations","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public _currentTokenId = 0;\nuint256 MAX_SUPPLY = 8888;\nstring public baseTokenURI = \"https://gateway.pinata.cloud/ipfs/QmYrfA72SNSGFjva5UxmNMhF2qHx9kFbcCBgcJMsi1354s/\";\nuint256 public presale_Startdate = 1633069810;\nuint256 public presale_Enddate = 1633070700;\nbool public end_presale = false;\nuint256 public NFT_price = 0.039 ether;\nuint256 public NFT_price_for_3 = 0.099 ether;\nuint256 public startTime = 1633070701;\nstring _name = \"SpaceBoysNFT\";\nstring _symbol = \"SBNFT\";\nbool public isBuy_1_Get_free_enabled = true;\naddress[] public whitelistedAddresses;\nuint256 public reveal_time = 1633062318;","after":"uint256 public _currentTokenId = 0;\nuint256 MAX_SUPPLY = 8888;\nstring public baseTokenURI = \"https://gateway.pinata.cloud/ipfs/QmYrfA72SNSGFjva5UxmNMhF2qHx9kFbcCBgcJMsi1354s/\";\nuint256 public presale_Startdate = 1633069810;\nuint256 public presale_Enddate = 1633070700;\nuint256 public NFT_price = 0.039 ether;\nuint256 public NFT_price_for_3 = 0.099 ether;\nuint256 public startTime = 1633070701;\nstring _name = \"SpaceBoysNFT\";\nstring _symbol = \"SBNFT\";\naddress[] public whitelistedAddresses;\nuint256 public reveal_time = 1633062318;\nbool public end_presale = false;\nbool public isBuy_1_Get_free_enabled = true;\n","contract":"SpaceBoys","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _uri) external onlyOwner {\n\n        baseTokenURI = _uri;\n\n    }","after":"function setBaseUri(string calldata _uri) external onlyOwner {\n\n        baseTokenURI = _uri;\n\n    }","contract":"SpaceBoys","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n\n        address userAddress,\n\n        bytes memory functionSignature,\n\n        bytes32 sigR,\n\n        bytes32 sigS,\n\n        uint8 sigV\n\n    ) public payable returns (bytes memory) {\n\n        MetaTransaction memory metaTx = MetaTransaction({\n\n        nonce : nonces[userAddress],\n\n        from : userAddress,\n\n        functionSignature : functionSignature\n\n        });\n\n\n        require(\n\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n\n            \"Signer and signature do not match\"\n\n        );\n\n\n        // increase nonce for user (to avoid re-use)\n\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n\n        emit MetaTransactionExecuted(\n\n            userAddress,\n\n            payable(msg.sender),\n\n            functionSignature\n\n        );\n\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n\n        (bool success, bytes memory returnData) = address(this).call(\n\n            abi.encodePacked(functionSignature, userAddress)\n\n        );\n\n        require(success, \"Function call not successful\");\n\n\n        return returnData;\n\n    }","after":"function executeMetaTransaction(\n\n        address userAddress,\n\n        bytes calldata functionSignature,\n\n        bytes32 sigR,\n\n        bytes32 sigS,\n\n        uint8 sigV\n\n    ) public payable returns (bytes memory) {\n\n        MetaTransaction memory metaTx = MetaTransaction({\n\n        nonce : nonces[userAddress],\n\n        from : userAddress,\n\n        functionSignature : functionSignature\n\n        });\n\n\n        require(\n\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n\n            \"Signer and signature do not match\"\n\n        );\n\n\n        // increase nonce for user (to avoid re-use)\n\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n\n        emit MetaTransactionExecuted(\n\n            userAddress,\n\n            payable(msg.sender),\n\n            functionSignature\n\n        );\n\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n\n        (bool success, bytes memory returnData) = address(this).call(\n\n            abi.encodePacked(functionSignature, userAddress)\n\n        );\n\n        require(success, \"Function call not successful\");\n\n\n        return returnData;\n\n    }","contract":"SpaceBoys","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public NFT_price = 0.039 ether;","after":"uint256 public constant NFT_price = 0.039 ether;","contract":"SpaceBoys","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public NFT_price_for_3 = 0.099 ether;","after":"uint256 public constant NFT_price_for_3 = 0.099 ether;","contract":"SpaceBoys","time":1},{"type":"immutable-restrict-modification ","before":"string _name = \"SpaceBoysNFT\";","after":"string immutable _name = \"SpaceBoysNFT\";","contract":"SpaceBoys","time":1},{"type":"immutable-restrict-modification ","before":"string _symbol = \"SBNFT\";","after":"string immutable _symbol = \"SBNFT\";","contract":"SpaceBoys","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SpaceBoys","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SpaceBoys","time":1}]}
{"time":493,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"de-morgan-condition ","before":"!(char >= 0x41 && char <= 0x5A) &&\n            !(char >= 0x61 && char <= 0x7A)","after":"!((char >= 0x41 && char <= 0x5A) &&\n            (char >= 0x61 && char <= 0x7A))","loc":{"start":{"line":1699,"column":16},"end":{"line":1700,"column":42}},"contract":"LuckyManekiNFT","time":0},{"type":"external-function ","before":"function setName(uint256 tokenId, string memory name) public {\n        require(revealOffset > 0, \"!reveal\");\n        address owner = ownerOf(tokenId);\n        require(msg.sender == owner, \"!token.owner\");\n        require(validateName(name) == true, \"!name.valid\");\n        require(isNameUsed(name) == false, \"name.used\");\n        if (bytes(_tokenNames[tokenId]).length > 0) {\n            _namesUsed[toLower(_tokenNames[tokenId])] = false;\n        }\n        _namesUsed[toLower(name)] = true;\n        _tokenNames[tokenId] = name;\n        emit Named(tokenId, name);\n    }","after":"function setName(uint256 tokenId, string calldata name) public {\n        require(revealOffset > 0, \"!reveal\");\n        address owner = ownerOf(tokenId);\n        require(msg.sender == owner, \"!token.owner\");\n        require(validateName(name) == true, \"!name.valid\");\n        require(isNameUsed(name) == false, \"name.used\");\n        if (bytes(_tokenNames[tokenId]).length > 0) {\n            _namesUsed[toLower(_tokenNames[tokenId])] = false;\n        }\n        _namesUsed[toLower(name)] = true;\n        _tokenNames[tokenId] = name;\n        emit Named(tokenId, name);\n    }","contract":"LuckyManekiNFT","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"LuckyManekiNFT","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"LuckyManekiNFT","time":0},{"type":"immutable-restrict-modification ","before":"address public creator;","after":"address public immutable creator;","contract":"LuckyProvable","time":1},{"type":"immutable-restrict-modification ","before":"address public creator;","after":"address public immutable creator;","contract":"LuckyRaffle","time":0},{"type":"state-data-arrangement ","before":"\nProvableI provable;\nOracleAddrResolverI OAR;\nuint constant day = 60 * 60 * 24;\nuint constant week = 60 * 60 * 24 * 7;\nuint constant month = 60 * 60 * 24 * 30;\nbyte constant proofType_NONE = 0x00;\nbyte constant proofType_Ledger = 0x30;\nbyte constant proofType_Native = 0xF0;\nbyte constant proofStorage_IPFS = 0x01;\nbyte constant proofType_Android = 0x40;\nbyte constant proofType_TLSNotary = 0x10;\nstring provable_network_name;\nuint8 constant networkID_auto = 0;\nuint8 constant networkID_morden = 2;\nuint8 constant networkID_mainnet = 1;\nuint8 constant networkID_testnet = 2;\nuint8 constant networkID_consensys = 161;\nmapping(bytes32 => bytes32) provable_randomDS_args;\nmapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;","after":"ProvableI provable;\nOracleAddrResolverI OAR;\nuint constant day = 60 * 60 * 24;\nuint constant week = 60 * 60 * 24 * 7;\nuint constant month = 60 * 60 * 24 * 30;\nstring provable_network_name;\nmapping(bytes32 => bytes32) provable_randomDS_args;\nmapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;\nbyte constant proofType_NONE = 0x00;\nbyte constant proofType_Ledger = 0x30;\nbyte constant proofType_Native = 0xF0;\nbyte constant proofStorage_IPFS = 0x01;\nbyte constant proofType_Android = 0x40;\nbyte constant proofType_TLSNotary = 0x10;\nuint8 constant networkID_auto = 0;\nuint8 constant networkID_morden = 2;\nuint8 constant networkID_mainnet = 1;\nuint8 constant networkID_testnet = 2;\nuint8 constant networkID_consensys = 161;\n","contract":"usingProvable","time":0}]}
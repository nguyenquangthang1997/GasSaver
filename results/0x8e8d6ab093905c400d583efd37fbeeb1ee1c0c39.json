{"time":1049,"results":[{"type":"state-data-arrangement ","before":"\n IERC20 public immutable base\n bytes6 public baseId\n address public baseJoin\n ILadle public ladle\n ICauldron public cauldron\n IPool public pool\n bytes6 public seriesId\n IFYToken public fyToken\n IPool public nextPool\n bytes6 public nextSeriesId\n uint256 public cached\n mapping(address => uint128) public invariants","after":" IERC20 public immutable base\n ILadle public ladle\n ICauldron public cauldron\n IPool public pool\n IFYToken public fyToken\n IPool public nextPool\n uint256 public cached\n mapping(address => uint128) public invariants\n address public baseJoin\n bytes6 public baseId\n bytes6 public seriesId\n bytes6 public nextSeriesId\n","contract":"Strategy","time":0},{"type":"external-function ","before":"function grantRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","after":"function grantRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","contract":"Strategy","time":0},{"type":"external-function ","before":"function revokeRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","after":"function revokeRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","contract":"Strategy","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public immutable PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","after":"bytes32 public immutable constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","contract":"Strategy","time":0},{"type":"immutable-restrict-modification ","before":"string                                            public override name = \"???\";","after":"string                                            public override immutable name = \"???\";","contract":"Strategy","time":0},{"type":"immutable-restrict-modification ","before":"string                                            public override symbol = \"???\";","after":"string                                            public override immutable symbol = \"???\";","contract":"Strategy","time":0},{"type":"immutable-restrict-modification ","before":"uint8                                             public override decimals = 18;","after":"uint8                                             public override immutable decimals = 18;","contract":"Strategy","time":0}]}
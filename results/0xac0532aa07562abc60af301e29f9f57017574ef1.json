{"time":179,"results":[{"type":"external-function ","before":"function initialize(\n        string memory name_,\n        string memory symbol_,\n        string memory baseTokenURI_,\n        address royaltyReceiver_,\n        uint256 royaltyBps_,\n        uint256 initialSupply_,\n        address initialSupplyReceiver_\n    ) public initializer {\n        __ERC721_init(name_, symbol_);\n        __ERC721Burnable_init();\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n\n        // Initialize the contents\n        if (bytes(baseTokenURI_).length > 0) {\n            _baseTokenURI = baseTokenURI_;\n        }\n\n        _setRoyaltyInfo(royaltyReceiver_, royaltyBps_);\n\n        for (uint256 i = 0; i < initialSupply_; i++) {\n            // mint the initial supply to the initial owner starting with token ID 1\n            _safeMint(initialSupplyReceiver_, i + 1);\n        }\n    }","after":"function initialize(\n        string calldata name_,\n        string calldata symbol_,\n        string calldata baseTokenURI_,\n        address royaltyReceiver_,\n        uint256 royaltyBps_,\n        uint256 initialSupply_,\n        address initialSupplyReceiver_\n    ) public initializer {\n        __ERC721_init(name_, symbol_);\n        __ERC721Burnable_init();\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n\n        // Initialize the contents\n        if (bytes(baseTokenURI_).length > 0) {\n            _baseTokenURI = baseTokenURI_;\n        }\n\n        _setRoyaltyInfo(royaltyReceiver_, royaltyBps_);\n\n        for (uint256 i = 0; i < initialSupply_; i++) {\n            // mint the initial supply to the initial owner starting with token ID 1\n            _safeMint(initialSupplyReceiver_, i + 1);\n        }\n    }","contract":"ERC721Burnable","time":0},{"type":"external-function ","before":"function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }","after":"function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }","contract":"ERC721Burnable","time":0},{"type":"constant-restrict-modification  ","before":"address private immutable __self = address(this);","after":"address private immutable constant __self = address(this);","contract":"ERC721Burnable","time":0},{"type":"external-function ","before":"function createERC721Burnable(\n        string memory name_,\n        string memory symbol_,\n        string memory baseTokenURI_,\n        address royaltyReceiver_,\n        uint256 royaltyBps_,\n        uint256 initialSupply_,\n        address initialSupplyReceiver_,\n        address contractOwner_\n    ) external returns (address) {\n        ERC1967Proxy proxy = new ERC1967Proxy(\n            implementation,\n            abi.encodeWithSelector(\n                ERC721Burnable(address(0)).initialize.selector,\n                name_,\n                symbol_,\n                baseTokenURI_,\n                royaltyReceiver_,\n                royaltyBps_,\n                initialSupply_,\n                initialSupplyReceiver_\n            )\n        );\n\n        ERC721Burnable(address(proxy)).transferOwnership(contractOwner_);\n\n        emit Deployed(msg.sender, address(proxy));\n        return address(proxy);\n    }","after":"function createERC721Burnable(\n        string calldata name_,\n        string calldata symbol_,\n        string calldata baseTokenURI_,\n        address royaltyReceiver_,\n        uint256 royaltyBps_,\n        uint256 initialSupply_,\n        address initialSupplyReceiver_,\n        address contractOwner_\n    ) external returns (address) {\n        ERC1967Proxy proxy = new ERC1967Proxy(\n            implementation,\n            abi.encodeWithSelector(\n                ERC721Burnable(address(0)).initialize.selector,\n                name_,\n                symbol_,\n                baseTokenURI_,\n                royaltyReceiver_,\n                royaltyBps_,\n                initialSupply_,\n                initialSupplyReceiver_\n            )\n        );\n\n        ERC721Burnable(address(proxy)).transferOwnership(contractOwner_);\n\n        emit Deployed(msg.sender, address(proxy));\n        return address(proxy);\n    }","contract":"ERC721BurnableFactory","time":0},{"type":"immutable-restrict-modification ","before":"address public implementation;","after":"address public immutable implementation;","contract":"ERC721BurnableFactory","time":0}]}
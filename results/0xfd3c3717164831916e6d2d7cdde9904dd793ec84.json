{"time":143,"results":[{"type":"external-function ","before":"function airDrop(address[] memory _to) external onlyOwner {\n\n        uint256 qty = _to.length;\n\n        require((numberMinted + qty) > numberMinted, \"Math overflow error\");\n\n        require((numberMinted + qty) < totalTokens, \"Cannot fill order\");\n\n\n        uint256 mintSeedValue = numberMinted;\n\n        if (reservedTokens >= qty) {\n\n            reservedTokens -= qty;\n\n        } else {\n\n            reservedTokens = 0;\n\n        }\n\n\n        for (uint256 i = 0; i < qty; i++) {\n\n            _safeMint(_to[i], mintSeedValue + i);\n\n            numberMinted ++;\n            //reservedTokens can be reset, numberMinted can not\n\n        }\n\n    }","after":"function airDrop(address[] calldata _to) external onlyOwner {\n\n        uint256 qty = _to.length;\n\n        require((numberMinted + qty) > numberMinted, \"Math overflow error\");\n\n        require((numberMinted + qty) < totalTokens, \"Cannot fill order\");\n\n\n        uint256 mintSeedValue = numberMinted;\n\n        if (reservedTokens >= qty) {\n\n            reservedTokens -= qty;\n\n        } else {\n\n            reservedTokens = 0;\n\n        }\n\n\n        for (uint256 i = 0; i < qty; i++) {\n\n            _safeMint(_to[i], mintSeedValue + i);\n\n            numberMinted ++;\n            //reservedTokens can be reset, numberMinted can not\n\n        }\n\n    }","contract":"Chameleon","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newURI) public onlyOwner {\n\n        _baseURI = newURI;\n\n    }","after":"function setBaseURI(string calldata newURI) public onlyOwner {\n\n        _baseURI = newURI;\n\n    }","contract":"Chameleon","time":0},{"type":"external-function ","before":"function whiteListMany(address[] memory accounts) external onlyOwner {\n\n        for (uint256 i; i < accounts.length; i++) {\n\n            _whitelist[accounts[i]] = true;\n\n        }\n\n    }","after":"function whiteListMany(address[] calldata accounts) external onlyOwner {\n\n        for (uint256 i; i < accounts.length; i++) {\n\n            _whitelist[accounts[i]] = true;\n\n        }\n\n    }","contract":"Chameleon","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Chameleon","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Chameleon","time":0}]}
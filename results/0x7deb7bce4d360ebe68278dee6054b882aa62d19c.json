{"time":216,"results":[{"type":"external-function ","before":"function addPlanet(\n        bytes32 _merkleRoot,\n        uint256 _mintPrice,\n        uint256 _maxSupply,\n        uint256 _maxPurchaseSupply,\n        uint256 _maxPurchaseTx,\n        string memory _ipfsMetadataHash\n    ) public onlyOwner {\n        Planet storage p = planets[counter.current()];\n        p.merkleRoot = _merkleRoot;\n        p.mintPrice = _mintPrice;\n        p.maxSupply = _maxSupply;\n        p.maxPurchaseSupply = _maxPurchaseSupply;\n        p.maxPurchaseTx = _maxPurchaseTx;\n        p.ipfsMetadataHash = _ipfsMetadataHash;\n\n        counter.increment();\n    }","after":"function addPlanet(\n        bytes32 _merkleRoot,\n        uint256 _mintPrice,\n        uint256 _maxSupply,\n        uint256 _maxPurchaseSupply,\n        uint256 _maxPurchaseTx,\n        string calldata _ipfsMetadataHash\n    ) public onlyOwner {\n        Planet storage p = planets[counter.current()];\n        p.merkleRoot = _merkleRoot;\n        p.mintPrice = _mintPrice;\n        p.maxSupply = _maxSupply;\n        p.maxPurchaseSupply = _maxPurchaseSupply;\n        p.maxPurchaseTx = _maxPurchaseTx;\n        p.ipfsMetadataHash = _ipfsMetadataHash;\n\n        counter.increment();\n    }","contract":"Planets","time":0},{"type":"external-function ","before":"function editPlanet(\n        bytes32 _merkleRoot,\n        uint256 _mintPrice,\n        uint256 _maxPurchaseSupply,\n        uint256 _maxPurchaseTx,\n        string memory _ipfsMetadataHash,\n        uint256 _planetIndex\n    ) external onlyOwner {\n        require(exists(_planetIndex), \"EditPlanet: planet does not exist\");\n\n        planets[_planetIndex].merkleRoot = _merkleRoot;\n        planets[_planetIndex].mintPrice = _mintPrice;\n        planets[_planetIndex].maxPurchaseSupply = _maxPurchaseSupply;\n        planets[_planetIndex].maxPurchaseTx = _maxPurchaseTx;\n        planets[_planetIndex].ipfsMetadataHash = _ipfsMetadataHash;\n    }","after":"function editPlanet(\n        bytes32 _merkleRoot,\n        uint256 _mintPrice,\n        uint256 _maxPurchaseSupply,\n        uint256 _maxPurchaseTx,\n        string calldata _ipfsMetadataHash,\n        uint256 _planetIndex\n    ) external onlyOwner {\n        require(exists(_planetIndex), \"EditPlanet: planet does not exist\");\n\n        planets[_planetIndex].merkleRoot = _merkleRoot;\n        planets[_planetIndex].mintPrice = _mintPrice;\n        planets[_planetIndex].maxPurchaseSupply = _maxPurchaseSupply;\n        planets[_planetIndex].maxPurchaseTx = _maxPurchaseTx;\n        planets[_planetIndex].ipfsMetadataHash = _ipfsMetadataHash;\n    }","contract":"Planets","time":0},{"type":"external-function ","before":"function setURI(string memory baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","after":"function setURI(string calldata baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","contract":"Planets","time":0},{"type":"external-function ","before":"function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","contract":"Planets","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Planets","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Planets","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"Planets","time":0},{"type":"immutable-restrict-modification ","before":"string public name_;","after":"string public immutable name_;","contract":"Planets","time":2},{"type":"immutable-restrict-modification ","before":"string public symbol_;","after":"string public immutable symbol_;","contract":"Planets","time":2}]}
{"time":361,"results":[{"type":"state-data-arrangement ","before":"\n IMergeMetadata public _metadataGenerator\n string private _name\n string private _symbol\n bool public _mintingFinalized\n uint256 public _countMint\n uint256 public _countToken\n uint256 immutable public _percentageTotal\n uint256 public _percentageRoyalty\n uint256 public _alphaMass\n uint256 public _alphaId\n uint256 public _massTotal\n address public _pak\n address public _dead\n address public _omnibus\n address public _receiver\n address immutable public _registry\n mapping(address => bool) private _blacklistAddress\n mapping(address => bool) private _whitelistAddress\n mapping(address => uint256) private _tokens\n mapping(address => uint256) private _balances\n mapping(uint256 => address) private _owners\n mapping(uint256 => address) private _tokenApprovals\n mapping(address => mapping(address => bool)) private _operatorApprovals\n mapping(uint256 => uint256) private _values\n mapping(uint256 => uint256) private _mergeCount","after":" IMergeMetadata public _metadataGenerator\n string private _name\n string private _symbol\n uint256 public _countMint\n uint256 public _countToken\n uint256 immutable public _percentageTotal\n uint256 public _percentageRoyalty\n uint256 public _alphaMass\n uint256 public _alphaId\n uint256 public _massTotal\n mapping(address => bool) private _blacklistAddress\n mapping(address => bool) private _whitelistAddress\n mapping(address => uint256) private _tokens\n mapping(address => uint256) private _balances\n mapping(uint256 => address) private _owners\n mapping(uint256 => address) private _tokenApprovals\n mapping(address => mapping(address => bool)) private _operatorApprovals\n mapping(uint256 => uint256) private _values\n mapping(uint256 => uint256) private _mergeCount\n address public _pak\n address public _dead\n address public _omnibus\n address public _receiver\n address immutable public _registry\n bool public _mintingFinalized\n","contract":"Merge","time":0},{"type":"external-function ","before":" function mint(uint256[] memory values_) external onlyValidSender {\n        require(!_mintingFinalized, \"Merge: Minting is finalized.\");\n\n        uint256 index = _countMint;\n        uint256 massAdded = 0;\n\n        uint256 alphaId = _alphaId;\n        uint256 alphaMass = _alphaMass;\n\n        for (uint256 i = 1; i <= values_.length; i++) {\n\n            index = _countMint + i;\n\n            _values[index] = values_[i - 1];\n\n            _owners[index] = _omnibus;\n\n            (uint256 class, uint256 mass) = decodeClassAndMass(values_[i - 1]);\n            require(class > 0 && class <= 4, \"Merge: Class must be between 1 and 4.\");\n            require(mass > 0 && mass < 99999999, \"Merge: Mass must be between 1 and 99999999.\");\n\n            if (alphaMass < mass) {\n                alphaMass = mass;\n                alphaId = index;\n            }\n\n            massAdded += mass;\n\n            emit Transfer(address(0), _omnibus, index);\n        }\n\n        _countMint += values_.length;\n        _countToken += values_.length;\n\n        _balances[_omnibus] = _countMint;\n\n        _massTotal += massAdded;\n\n        if (_alphaId != alphaId) {\n            _alphaId = alphaId;\n            _alphaMass = alphaMass;\n            emit AlphaMassUpdate(alphaId, alphaMass);\n        }\n    ","after":" function mint(uint256[] calldata values_) external onlyValidSender {\n        require(!_mintingFinalized, \"Merge: Minting is finalized.\");\n\n        uint256 index = _countMint;\n        uint256 massAdded = 0;\n\n        uint256 alphaId = _alphaId;\n        uint256 alphaMass = _alphaMass;\n\n        for (uint256 i = 1; i <= values_.length; i++) {\n\n            index = _countMint + i;\n\n            _values[index] = values_[i - 1];\n\n            _owners[index] = _omnibus;\n\n            (uint256 class, uint256 mass) = decodeClassAndMass(values_[i - 1]);\n            require(class > 0 && class <= 4, \"Merge: Class must be between 1 and 4.\");\n            require(mass > 0 && mass < 99999999, \"Merge: Mass must be between 1 and 99999999.\");\n\n            if (alphaMass < mass) {\n                alphaMass = mass;\n                alphaId = index;\n            }\n\n            massAdded += mass;\n\n            emit Transfer(address(0), _omnibus, index);\n        }\n\n        _countMint += values_.length;\n        _countToken += values_.length;\n\n        _balances[_omnibus] = _countMint;\n\n        _massTotal += massAdded;\n\n        if (_alphaId != alphaId) {\n            _alphaId = alphaId;\n            _alphaMass = alphaMass;\n            emit AlphaMassUpdate(alphaId, alphaMass);\n        }\n    ","contract":"Merge","time":0},{"type":"immutable-restrict-modification ","before":" string private _name","after":" string private immutable _name","contract":"Merge","time":0},{"type":"immutable-restrict-modification ","before":" string private _symbol","after":" string private immutable _symbol","contract":"Merge","time":0},{"type":"immutable-restrict-modification ","before":" address public _dead","after":" address public immutable _dead","contract":"Merge","time":0},{"type":"immutable-restrict-modification ","before":" address public _omnibus","after":" address public immutable _omnibus","contract":"Merge","time":0},{"type":"external-function ","before":" function updateImageParts(string[] memory imageParts_) public {\n        _requireOnlyOwner();\n        _imageParts = imageParts_;\n    ","after":" function updateImageParts(string[] calldata imageParts_) public {\n        _requireOnlyOwner();\n        _imageParts = imageParts_;\n    ","contract":"MergeMetadata","time":0},{"type":"immutable-restrict-modification ","before":" address public owner","after":" address public immutable owner","contract":"MergeMetadata","time":0}]}
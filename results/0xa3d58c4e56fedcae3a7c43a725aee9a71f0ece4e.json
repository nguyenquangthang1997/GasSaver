{"time":426,"results":[{"type":"loop-duplication","before":"\nstart line 381 column 8, end line 385 column 8\nfor (i = 0; i < 10; i++) {\n\n            x = x.mul(99).div(100);\n\n        }\nstart line 398 column 8, end line 402 column 8\nfor (i = 0; i < 10; i++) {\n\n            x = x.mul(tentimes).div(METDECMULT);\n\n        }\nstart line 415 column 8, end line 419 column 8\nfor (i = 0; i < 10; i++) {\n\n            x = x.mul(hundredtimes).div(METDECMULT);\n\n        }","after":"// merge loop\n\nstart line 381 column 8, end line 385 column 8\nfor (i = 0; i < 10; i++) {\n\n            x = x.mul(99).div(100);\n\n        }\nstart line 398 column 8, end line 402 column 8\nfor (i = 0; i < 10; i++) {\n\n            x = x.mul(tentimes).div(METDECMULT);\n\n        }\nstart line 415 column 8, end line 419 column 8\nfor (i = 0; i < 10; i++) {\n\n            x = x.mul(hundredtimes).div(METDECMULT);\n\n        }","contract":"Pricer","time":0},{"type":"loop-calculation","before":"TokenLocker tokenLocker = tokenLockers[addr];","after":"// move outside for loop\nTokenLocker tokenLocker = tokenLockers[addr];","loc":{"start":{"line":2458,"column":12},"end":{"line":2458,"column":56}},"contract":"Auctions","time":0},{"type":"state-data-arrangement ","before":"\nMETToken public token;\nProceeds public proceeds;\naddress[] public founders;\nmapping(address => TokenLocker) public tokenLockers;\nuint internal constant DAY_IN_SECONDS = 86400;\nuint internal constant DAY_IN_MINUTES = 1440;\nuint public genesisTime;\nuint public lastPurchaseTick;\nuint public lastPurchasePrice;\nuint public constant INITIAL_GLOBAL_DAILY_SUPPLY = 2880 * METDECMULT;\nuint public INITIAL_FOUNDER_SUPPLY = 1999999 * METDECMULT;\nuint public INITIAL_AC_SUPPLY = 1 * METDECMULT;\nuint public totalMigratedOut = 0;\nuint public totalMigratedIn = 0;\nuint public timeScale = 1;\nuint public constant INITIAL_SUPPLY = 10000000 * METDECMULT;\nuint public mintable = INITIAL_SUPPLY;\nuint public initialAuctionDuration = 7 days;\nuint public initialAuctionEndTime;\nuint public dailyAuctionStartTime;\nuint public constant DAILY_PURCHASE_LIMIT = 1000 ether;\nmapping(address => uint) internal purchaseInTheAuction;\nmapping(address => uint) internal lastPurchaseAuction;\nbool public minted;\nbool public initialized;\nuint public globalSupplyAfterPercentageLogic = 52598080 * METDECMULT;\nuint public constant AUCTION_WHEN_PERCENTAGE_LOGIC_STARTS = 14791;\nbytes8 public chain = \"ETH\";","after":"METToken public token;\nProceeds public proceeds;\naddress[] public founders;\nmapping(address => TokenLocker) public tokenLockers;\nuint internal constant DAY_IN_SECONDS = 86400;\nuint internal constant DAY_IN_MINUTES = 1440;\nuint public genesisTime;\nuint public lastPurchaseTick;\nuint public lastPurchasePrice;\nuint public constant INITIAL_GLOBAL_DAILY_SUPPLY = 2880 * METDECMULT;\nuint public INITIAL_FOUNDER_SUPPLY = 1999999 * METDECMULT;\nuint public INITIAL_AC_SUPPLY = 1 * METDECMULT;\nuint public totalMigratedOut = 0;\nuint public totalMigratedIn = 0;\nuint public timeScale = 1;\nuint public constant INITIAL_SUPPLY = 10000000 * METDECMULT;\nuint public mintable = INITIAL_SUPPLY;\nuint public initialAuctionDuration = 7 days;\nuint public initialAuctionEndTime;\nuint public dailyAuctionStartTime;\nuint public constant DAILY_PURCHASE_LIMIT = 1000 ether;\nmapping(address => uint) internal purchaseInTheAuction;\nmapping(address => uint) internal lastPurchaseAuction;\nuint public globalSupplyAfterPercentageLogic = 52598080 * METDECMULT;\nuint public constant AUCTION_WHEN_PERCENTAGE_LOGIC_STARTS = 14791;\nbytes8 public chain = \"ETH\";\nbool public minted;\nbool public initialized;\n","contract":"Auctions","time":0},{"type":"constant-restrict-modification  ","before":"uint public totalMigratedOut = 0;","after":"uint public constant totalMigratedOut = 0;","contract":"Auctions","time":1},{"type":"constant-restrict-modification  ","before":"uint public totalMigratedIn = 0;","after":"uint public constant totalMigratedIn = 0;","contract":"Auctions","time":1},{"type":"constant-restrict-modification  ","before":"uint public initialAuctionDuration = 7 days;","after":"uint public constant initialAuctionDuration = 7 days;","contract":"Auctions","time":1},{"type":"constant-restrict-modification  ","before":"uint public minimumPriceInDailyAuction = 1;","after":"uint public constant minimumPriceInDailyAuction = 1;","contract":"Auctions","time":1},{"type":"state-data-arrangement ","before":"\nmapping(bytes32 => mapping(address => bool)) public hashAttestations;\nmapping(address => bool) public isValidator;\nmapping(address => uint8) public validatorNum;\naddress[] public validators;\naddress public metToken;\naddress public tokenPorter;\nmapping(bytes32 => bool) public hashClaimed;\nuint8 public threshold = 2;","after":"mapping(bytes32 => mapping(address => bool)) public hashAttestations;\nmapping(address => bool) public isValidator;\nmapping(address => uint8) public validatorNum;\naddress[] public validators;\nmapping(bytes32 => bool) public hashClaimed;\naddress public metToken;\naddress public tokenPorter;\nuint8 public threshold = 2;\n","contract":"Validator","time":0},{"type":"constant-restrict-modification  ","before":"address public metToken;","after":"address public constant metToken;","contract":"Validator","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public threshold = 2;","after":"uint8 public constant threshold = 2;","contract":"Validator","time":0}]}
{"time":61,"results":[{"type":"state-data-arrangement ","before":"\nRate(uint256 burn_rate, uint256 reward_ra\n(address rewardPool);\n    even\nnsfer(address indexed from, address indexed t\nnt256 value);\n    event Mint(address indexed from, address indexed \ns indexed owner, address indexe\nt256 value);\n\n    // for minters\n \nc _minters;\n\n    //token base data\n    uint256 inte\n;\n    mapping(address => uint256) public _balance\ndress => mapping(address => uint256)) publ\nly = 0;\n\n    ///\n    bool public\nnTransfer = false;\n\n    // hardcod\nt rate\n    uint256 public constant \novernValueRate = 2000;//2000/10000\n  \nGovernValueRate = 10;  //10/10000\n    uint256 public constant _rateBase \n variables for use if transaction fees ever became necessary\n    uint2","after":"Rate(uint256 burn_rate, uint256 reward_ra\n(address rewardPool);\n    even\nnsfer(address indexed from, address indexed t\nnt256 value);\n    event Mint(address indexed from, address indexed \ns indexed owner, address indexe\nc _minters;\n\n    //token base data\n    uint256 inte\n;\n    mapping(address => uint256) public _balance\ndress => mapping(address => uint256)) publ\nly = 0;\n\n    ///\n    bool public\nnTransfer = false;\n\n    // hardcod\nt rate\n    uint256 public constant \novernValueRate = 2000;//2000/10000\n  \nGovernValueRate = 10;  //10/10000\n    uint256 public constant _rateBase \n variables for use if transaction fees ever became necessary\n    uint2\nt256 value);\n\n    // for minters\n \n","contract":"DegoToken","time":0}]}
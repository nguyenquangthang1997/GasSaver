{"time":130,"results":[{"type":"state-data-arrangement ","before":"\nbool public transfersEnabled;\nmapping(address => bool) public autoStakingDisabled;\nbool public initialized = false;\naddress public swap;\naddress public rewardRole;\nmapping(address => uint256) public lockedBalanceOf;","after":"mapping(address => bool) public autoStakingDisabled;\nmapping(address => uint256) public lockedBalanceOf;\naddress public swap;\naddress public rewardRole;\nbool public transfersEnabled;\nbool public initialized = false;\n","contract":"StormXToken","time":1},{"type":"external-function ","before":"function transfers(\n\n        address[] memory recipients,\n\n        uint256[] memory values\n\n    ) public transfersAllowed returns (bool) {\n\n        require(recipients.length == values.length, \"Input lengths do not match\");\n\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n\n            transfer(recipients[i], values[i]);\n\n        }\n\n        return true;\n\n    }","after":"function transfers(\n\n        address[] calldata recipients,\n\n        uint256[] calldata values\n\n    ) public transfersAllowed returns (bool) {\n\n        require(recipients.length == values.length, \"Input lengths do not match\");\n\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n\n            transfer(recipients[i], values[i]);\n\n        }\n\n        return true;\n\n    }","contract":"StormXToken","time":0},{"type":"external-function ","before":"function rewards(address[] memory recipients, uint256[] memory values) public onlyAuthorized {\n\n        require(recipients.length == values.length, \"Input lengths do not match\");\n\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n\n            reward(recipients[i], values[i]);\n\n        }\n\n    }","after":"function rewards(address[] calldata recipients, uint256[] calldata values) public onlyAuthorized {\n\n        require(recipients.length == values.length, \"Input lengths do not match\");\n\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n\n            reward(recipients[i], values[i]);\n\n        }\n\n    }","contract":"StormXToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"StormXToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"StormXToken","time":0},{"type":"immutable-restrict-modification ","before":"uint8 private _decimals;","after":"uint8 private immutable _decimals;","contract":"StormXToken","time":0}]}
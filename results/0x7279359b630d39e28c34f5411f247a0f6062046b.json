{"time":10,"results":[{"type":"external-function ","before":"function getVoteCalldata(uint256 _proposalId, bool _support, bytes memory /* _data */) external view returns (address, uint256, bytes memory) {\n\n        // castVote(uint256 _proposalId, uint8 supportNumber)\n\n        uint8 supportNumber = _support ? 1 : 0;\n\n        bytes memory callData = abi.encodeWithSignature(\"castVote(uint256,uint8)\", _proposalId, supportNumber);\n\n\n        return (governorBravo, 0, callData);\n\n    }","after":"function getVoteCalldata(uint256 _proposalId, bool _support, bytes calldata /* _data */) external view returns (address, uint256, bytes memory) {\n\n        // castVote(uint256 _proposalId, uint8 supportNumber)\n\n        uint8 supportNumber = _support ? 1 : 0;\n\n        bytes memory callData = abi.encodeWithSignature(\"castVote(uint256,uint8)\", _proposalId, supportNumber);\n\n\n        return (governorBravo, 0, callData);\n\n    }","contract":"CompoundBravoGovernanceAdapter","time":1},{"type":"external-function ","before":"function getProposeCalldata(bytes memory _proposalData) external view returns (address, uint256, bytes memory) {\n\n        // Decode proposal data\n\n        (\n\n        address[] memory targets,\n\n        uint256[] memory values,\n\n        string[] memory signatures,\n\n        bytes[] memory calldatas,\n\n        string memory description\n\n        ) = abi.decode(_proposalData, (address[], uint256[], string[], bytes[], string));\n\n\n        // propose(address[],uint256[],string[],bytes[],string)\n\n        bytes memory callData = abi.encodeWithSignature(PROPOSE_SIGNATURE, targets, values, signatures, calldatas, description);\n\n\n        return (governorBravo, 0, callData);\n\n    }","after":"function getProposeCalldata(bytes calldata _proposalData) external view returns (address, uint256, bytes memory) {\n\n        // Decode proposal data\n\n        (\n\n        address[] memory targets,\n\n        uint256[] memory values,\n\n        string[] memory signatures,\n\n        bytes[] memory calldatas,\n\n        string memory description\n\n        ) = abi.decode(_proposalData, (address[], uint256[], string[], bytes[], string));\n\n\n        // propose(address[],uint256[],string[],bytes[],string)\n\n        bytes memory callData = abi.encodeWithSignature(PROPOSE_SIGNATURE, targets, values, signatures, calldatas, description);\n\n\n        return (governorBravo, 0, callData);\n\n    }","contract":"CompoundBravoGovernanceAdapter","time":0}]}
{"time":209,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public DSA_SUPPLY;\nuint256 public maxMint;\nuint256 public preSaleMaxMint;\nuint256 public price;\nstring internal blankURI;\nuint256 public beginRandomIndex;\nstring internal celebTokenBaseURI;\nbool internal creatorMinted;\nuint256 internal numberDev;\naddress internal developer;\nSTATUS public status;\nmapping(address => bool) public whitelist;\nmapping(address => uint256) public giveAways;\nmapping(address => uint256) public whitelistCounts;","after":"uint256 public DSA_SUPPLY;\nuint256 public maxMint;\nuint256 public preSaleMaxMint;\nuint256 public price;\nstring internal blankURI;\nuint256 public beginRandomIndex;\nstring internal celebTokenBaseURI;\nuint256 internal numberDev;\nSTATUS public status;\nmapping(address => bool) public whitelist;\nmapping(address => uint256) public giveAways;\nmapping(address => uint256) public whitelistCounts;\naddress internal developer;\nbool internal creatorMinted;\n","contract":"NFTBase","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) public onlyOwner {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) public onlyOwner {\n        _setBaseURI(_baseURI);\n    }","contract":"NFTContract","time":0},{"type":"external-function ","before":"function setBlankURI(string memory _blankURI) public onlyOwner {\n        blankURI = _blankURI;\n    }","after":"function setBlankURI(string calldata _blankURI) public onlyOwner {\n        blankURI = _blankURI;\n    }","contract":"NFTContract","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory _wallets) public onlyOwner {\n        for (uint256 i = 0; i < _wallets.length; ++i) {\n            whitelist[_wallets[i]] = true;\n        }\n    }","after":"function addToWhitelist(address[] calldata _wallets) public onlyOwner {\n        for (uint256 i = 0; i < _wallets.length; ++i) {\n            whitelist[_wallets[i]] = true;\n        }\n    }","contract":"NFTContract","time":0},{"type":"external-function ","before":"function removeFromWhitelist(address[] memory _wallets) public onlyOwner {\n        for (uint256 i = 0; i < _wallets.length; ++i) {\n            whitelist[_wallets[i]] = false;\n        }\n    }","after":"function removeFromWhitelist(address[] calldata _wallets) public onlyOwner {\n        for (uint256 i = 0; i < _wallets.length; ++i) {\n            whitelist[_wallets[i]] = false;\n        }\n    }","contract":"NFTContract","time":0},{"type":"external-function ","before":"function setGiveAways(address[] memory _wallets, uint256[] memory _giveAways)\n    public\n    onlyOwner\n    {\n        for (uint256 i = 0; i < _wallets.length; ++i) {\n            whitelist[_wallets[i]] = true;\n            giveAways[_wallets[i]] = _giveAways[i];\n        }\n    }","after":"function setGiveAways(address[] calldata _wallets, uint256[] calldata _giveAways)\n    public\n    onlyOwner\n    {\n        for (uint256 i = 0; i < _wallets.length; ++i) {\n            whitelist[_wallets[i]] = true;\n            giveAways[_wallets[i]] = _giveAways[i];\n        }\n    }","contract":"NFTContract","time":0},{"type":"external-function ","before":"function reserveByCreator(\n        uint256 _numberCreator,\n        uint256 _numberCreatorCeleb,\n        uint256 _numberDevCeleb,\n        string memory _celebTokenBaseURI\n    ) external onlyOwner {\n        require(!creatorMinted, \"You minted token for creator\");\n        creatorMinted = true;\n        // celeb token URI\n        setCelebDSABaseURI(_celebTokenBaseURI);\n\n        beginRandomIndex = _numberCreatorCeleb.add(_numberDevCeleb);\n\n        numberDev = numberDev.sub(_numberDevCeleb);\n\n        _mintToken(owner(), _numberCreatorCeleb);\n        _mintToken(developer, _numberDevCeleb);\n        _mintToken(owner(), _numberCreator);\n    }","after":"function reserveByCreator(\n        uint256 _numberCreator,\n        uint256 _numberCreatorCeleb,\n        uint256 _numberDevCeleb,\n        string calldata _celebTokenBaseURI\n    ) external onlyOwner {\n        require(!creatorMinted, \"You minted token for creator\");\n        creatorMinted = true;\n        // celeb token URI\n        setCelebDSABaseURI(_celebTokenBaseURI);\n\n        beginRandomIndex = _numberCreatorCeleb.add(_numberDevCeleb);\n\n        numberDev = numberDev.sub(_numberDevCeleb);\n\n        _mintToken(owner(), _numberCreatorCeleb);\n        _mintToken(developer, _numberDevCeleb);\n        _mintToken(owner(), _numberCreator);\n    }","contract":"NFTContract","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public DSA_SUPPLY;","after":"uint256 public immutable DSA_SUPPLY;","contract":"NFTContract","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public preSaleMaxMint;","after":"uint256 public immutable preSaleMaxMint;","contract":"NFTContract","time":0},{"type":"immutable-restrict-modification ","before":"address internal developer;","after":"address internal immutable developer;","contract":"NFTContract","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"NFTContract","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"NFTContract","time":0},{"type":"immutable-restrict-modification ","before":"uint256 internal fee;","after":"uint256 internal immutable fee;","contract":"NFTContract","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"NFTContract","time":0}]}
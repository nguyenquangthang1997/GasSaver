{"time":187,"results":[{"type":"external-function ","before":" function batchSetPoolWeight(address[] memory pools, uint256[] memory weights) external override onlyGovernance {\n        uint256 cnt = pools.length;\n        require(cnt == weights.length, \"CVaultForLP: mismatch len\");\n        for (uint256 i = 0; i < cnt; i++) {\n            require(pools[i] != address(0), \"CVaultForTrader: invalid pool\");\n            require(weights[i] <= WEIGHT_BASE, \"CVaultForLP: invalid weight\");\n            require(poolInfo[pools[i]].state == POOL_STATE.ENABLED, \"CVaultForLP: pool not enabled\");\n            // only set weight if pool is enabled\n            poolInfo[pools[i]].weight = weights[i];\n        }\n        // governance should ensure total weights equal to WEIGHT_BASE\n    ","after":" function batchSetPoolWeight(address[] calldata pools, uint256[] calldata weights) external override onlyGovernance {\n        uint256 cnt = pools.length;\n        require(cnt == weights.length, \"CVaultForLP: mismatch len\");\n        for (uint256 i = 0; i < cnt; i++) {\n            require(pools[i] != address(0), \"CVaultForTrader: invalid pool\");\n            require(weights[i] <= WEIGHT_BASE, \"CVaultForLP: invalid weight\");\n            require(poolInfo[pools[i]].state == POOL_STATE.ENABLED, \"CVaultForLP: pool not enabled\");\n            // only set weight if pool is enabled\n            poolInfo[pools[i]].weight = weights[i];\n        }\n        // governance should ensure total weights equal to WEIGHT_BASE\n    ","contract":"CoFiXVaultForLP","time":0}]}
{"time":245,"results":[{"type":"state-data-arrangement ","before":"\naddress public constant GOV = 0xE43aA28716b0B7531293557D5397F8b12f3F5aBc;\naddress public guardian;\naddress public converter;\naddress public punkProxy;\nuint256 public baseFees;\nbool public openForTrades;\nbool public openForFreeTrades;\nMarketRegistry public marketRegistry;\nAffiliateDetails[] public affiliates;\nSponsoredMarket[] public sponsoredMarkets;","after":"uint256 public baseFees;\nMarketRegistry public marketRegistry;\nAffiliateDetails[] public affiliates;\nSponsoredMarket[] public sponsoredMarkets;\naddress public constant GOV = 0xE43aA28716b0B7531293557D5397F8b12f3F5aBc;\naddress public guardian;\naddress public converter;\naddress public punkProxy;\nbool public openForTrades;\nbool public openForFreeTrades;\n","contract":"GenieSwap","time":0},{"type":"external-function ","before":"  function multiAssetSwap(\n        ERC20Details memory erc20Details,\n        SpecialTransferHelper.ERC721Details[] memory erc721Details,\n        ERC1155Details[] memory erc1155Details,\n        ConverstionDetails[] memory converstionDetails,\n        MarketRegistry.TradeDetails[] memory tradeDetails,\n        address[] memory dustTokens,\n        uint256[2] memory feeDetails    // [affiliateIndex, ETH fee in Wei]\n    ) payable external isOpenForTrades nonReentrant {\n        // collect fees\n        _collectFee(feeDetails);\n\n        // transfer all tokens\n        _transferFromHelper(\n            erc20Details,\n            erc721Details,\n            erc1155Details\n        );\n\n        // Convert any assets if needed\n        _conversionHelper(converstionDetails);\n\n        // execute trades\n        _trade(tradeDetails);\n\n        // return dust tokens (if any)\n        _returnDust(dustTokens);\n   ","after":"  function multiAssetSwap(\n        ERC20Details calldata erc20Details,\n        SpecialTransferHelper.ERC721Details[] calldata erc721Details,\n        ERC1155Details[] calldata erc1155Details,\n        ConverstionDetails[] calldata converstionDetails,\n        MarketRegistry.TradeDetails[] calldata tradeDetails,\n        address[] calldata dustTokens,\n        uint256[2] calldata feeDetails    // [affiliateIndex, ETH fee in Wei]\n    ) payable external isOpenForTrades nonReentrant {\n        // collect fees\n        _collectFee(feeDetails);\n\n        // transfer all tokens\n        _transferFromHelper(\n            erc20Details,\n            erc721Details,\n            erc1155Details\n        );\n\n        // Convert any assets if needed\n        _conversionHelper(converstionDetails);\n\n        // execute trades\n        _trade(tradeDetails);\n\n        // return dust tokens (if any)\n        _returnDust(dustTokens);\n   ","contract":"GenieSwap","time":0},{"type":"external-function ","before":"  function multiAssetSwapWithoutFee(\n        ERC20Details memory erc20Details,\n        SpecialTransferHelper.ERC721Details[] memory erc721Details,\n        ERC1155Details[] memory erc1155Details,\n        ConverstionDetails[] memory converstionDetails,\n        MarketRegistry.TradeDetails[] memory tradeDetails,\n        address[] memory dustTokens,\n        uint256 sponsoredMarketIndex\n    ) payable external isOpenForFreeTrades nonReentrant {\n        // fetch the marketId of the sponsored market\n        SponsoredMarket memory sponsoredMarket = sponsoredMarkets[sponsoredMarketIndex];\n        // check if the market is active\n        require(sponsoredMarket.isActive, \"multiAssetSwapWithoutFee: InActive sponsored market\");\n\n        // transfer all tokens\n        _transferFromHelper(\n            erc20Details,\n            erc721Details,\n            erc1155Details\n        );\n\n        // Convert any assets if needed\n        _conversionHelper(converstionDetails);\n\n        // execute trades\n        bool isSponsored = _tradeSponsored(tradeDetails, sponsoredMarket.marketId);\n\n        // check if the trades include the sponsored market\n        require(isSponsored, \"multiAssetSwapWithoutFee: trades do not include sponsored market\");\n\n        // return dust tokens (if any)\n        _returnDust(dustTokens);\n   ","after":"  function multiAssetSwapWithoutFee(\n        ERC20Details calldata erc20Details,\n        SpecialTransferHelper.ERC721Details[] calldata erc721Details,\n        ERC1155Details[] calldata erc1155Details,\n        ConverstionDetails[] calldata converstionDetails,\n        MarketRegistry.TradeDetails[] calldata tradeDetails,\n        address[] calldata dustTokens,\n        uint256 sponsoredMarketIndex\n    ) payable external isOpenForFreeTrades nonReentrant {\n        // fetch the marketId of the sponsored market\n        SponsoredMarket memory sponsoredMarket = sponsoredMarkets[sponsoredMarketIndex];\n        // check if the market is active\n        require(sponsoredMarket.isActive, \"multiAssetSwapWithoutFee: InActive sponsored market\");\n\n        // transfer all tokens\n        _transferFromHelper(\n            erc20Details,\n            erc721Details,\n            erc1155Details\n        );\n\n        // Convert any assets if needed\n        _conversionHelper(converstionDetails);\n\n        // execute trades\n        bool isSponsored = _tradeSponsored(tradeDetails, sponsoredMarket.marketId);\n\n        // check if the trades include the sponsored market\n        require(isSponsored, \"multiAssetSwapWithoutFee: trades do not include sponsored market\");\n\n        // return dust tokens (if any)\n        _returnDust(dustTokens);\n   ","contract":"GenieSwap","time":0}]}
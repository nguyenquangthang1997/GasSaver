{"time":178,"results":[{"type":"constant-restrict-modification  ","before":"string public name = \"Yat NFT (preview)\";","after":"string public constant name = \"Yat NFT (preview)\";","contract":"Metadata","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"Yats\";","after":"string public constant symbol = \"Yats\";","contract":"Metadata","time":0},{"type":"external-function ","before":"function mint(string calldata _token, address _account, uint256 _expiry, bytes memory _signature) external {\n\n        require(block.timestamp < _expiry);\n\n        require(_verifyMint(_token, _account, _expiry, _signature));\n\n        _mint(_token, _account);\n\n    }","after":"function mint(string calldata _token, address _account, uint256 _expiry, bytes calldata _signature) external {\n\n        require(block.timestamp < _expiry);\n\n        require(_verifyMint(_token, _account, _expiry, _signature));\n\n        _mint(_token, _account);\n\n    }","contract":"YAT","time":0},{"type":"external-function ","before":"function deleteRecord(uint256 _tokenId, string memory _key) external {\n\n        updateRecord(_tokenId, _key, \"\");\n\n    }","after":"function deleteRecord(uint256 _tokenId, string calldata _key) external {\n\n        updateRecord(_tokenId, _key, \"\");\n\n    }","contract":"YAT","time":0},{"type":"external-function ","before":"function reverseResolve(string memory _token) public view returns (address) {\n\n        return info.list[idOf(_token)].resolvesTo;\n\n    }","after":"function reverseResolve(string calldata _token) public view returns (address) {\n\n        return info.list[idOf(_token)].resolvesTo;\n\n    }","contract":"YAT","time":0}]}
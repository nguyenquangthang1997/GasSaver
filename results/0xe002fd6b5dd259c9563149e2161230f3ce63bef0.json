{"time":82,"results":[{"type":"external-function ","before":"function initialize(\n        address _marketWrapper,\n        address _nftContract,\n        uint256 _tokenId,\n        uint256 _auctionId,\n        string memory _name,\n        string memory _symbol\n    ) external initializer {\n        // initialize ReentrancyGuard and ERC721Holder\n        __ReentrancyGuard_init();\n        __ERC721Holder_init();\n        // set storage variables\n        marketWrapper = _marketWrapper;\n        nftContract = _nftContract;\n        tokenId = _tokenId;\n        auctionId = _auctionId;\n        name = _name;\n        symbol = _symbol;\n        // validate token exists\n        require(_getOwner() != address(0), \"PartyBid::initialize: NFT getOwner failed\");\n        // validate auction exists\n        require(\n            IMarketWrapper(_marketWrapper).auctionIdMatchesToken(\n                _auctionId,\n                _nftContract,\n                _tokenId\n            ),\n            \"PartyBid::initialize: auctionId doesn't match token\"\n        );\n    }","after":"function initialize(\n        address _marketWrapper,\n        address _nftContract,\n        uint256 _tokenId,\n        uint256 _auctionId,\n        string calldata _name,\n        string calldata _symbol\n    ) external initializer {\n        // initialize ReentrancyGuard and ERC721Holder\n        __ReentrancyGuard_init();\n        __ERC721Holder_init();\n        // set storage variables\n        marketWrapper = _marketWrapper;\n        nftContract = _nftContract;\n        tokenId = _tokenId;\n        auctionId = _auctionId;\n        name = _name;\n        symbol = _symbol;\n        // validate token exists\n        require(_getOwner() != address(0), \"PartyBid::initialize: NFT getOwner failed\");\n        // validate auction exists\n        require(\n            IMarketWrapper(_marketWrapper).auctionIdMatchesToken(\n                _auctionId,\n                _nftContract,\n                _tokenId\n            ),\n            \"PartyBid::initialize: auctionId doesn't match token\"\n        );\n    }","contract":"PartyBid","time":0},{"type":"external-function ","before":"function emergencyCall(address _contract, bytes memory _calldata)\n    external\n    onlyPartyDAO\n    returns (bool _success, bytes memory _returnData)\n    {\n        (_success, _returnData) = _contract.call(_calldata);\n        require(_success, string(_returnData));\n    }","after":"function emergencyCall(address _contract, bytes calldata _calldata)\n    external\n    onlyPartyDAO\n    returns (bool _success, bytes memory _returnData)\n    {\n        (_success, _returnData) = _contract.call(_calldata);\n        require(_success, string(_returnData));\n    }","contract":"PartyBid","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"PartyBid","time":0}]}
{"time":153,"results":[{"type":"external-function ","before":" function exchangeIssue(\n\n        ExchangeIssuanceLibrary.ExchangeIssuanceParams memory _exchangeIssuanceParams,\n\n        bytes memory _orderData\n\n    )\n\n    public\n\n    nonReentrant\n\n    {\n\n        // Ensures validity of exchangeIssuanceParams\n\n        validateExchangeIssuanceParams(_exchangeIssuanceParams);\n\n\n        // Validate that all receiveTokens are components of the SEt\n\n        SetTokenLibrary.validateTokensAreComponents(\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.receiveTokens\n\n        );\n\n\n        // Transfer the send tokens to the appropriate exchanges\n\n        transferSendTokensToExchangeWrappers(\n\n            _exchangeIssuanceParams.sendTokenExchangeIds,\n\n            _exchangeIssuanceParams.sendTokens,\n\n            _exchangeIssuanceParams.sendTokenAmounts\n\n        );\n\n\n        // Execute the exchange orders using the encoded order data\n\n        executeOrders(_exchangeIssuanceParams, _orderData);\n\n\n        // Issue Set to the caller\n\n        coreInstance.issueModule(\n\n            msg.sender,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.quantity\n\n        );\n\n\n        emit LogExchangeIssue(\n\n            _exchangeIssuanceParams.setAddress,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.quantity,\n\n            _exchangeIssuanceParams.sendTokens,\n\n            _exchangeIssuanceParams.sendTokenAmounts\n\n        );\n\n    ","after":" function exchangeIssue(\n\n        ExchangeIssuanceLibrary.ExchangeIssuanceParams calldata _exchangeIssuanceParams,\n\n        bytes calldata _orderData\n\n    )\n\n    public\n\n    nonReentrant\n\n    {\n\n        // Ensures validity of exchangeIssuanceParams\n\n        validateExchangeIssuanceParams(_exchangeIssuanceParams);\n\n\n        // Validate that all receiveTokens are components of the SEt\n\n        SetTokenLibrary.validateTokensAreComponents(\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.receiveTokens\n\n        );\n\n\n        // Transfer the send tokens to the appropriate exchanges\n\n        transferSendTokensToExchangeWrappers(\n\n            _exchangeIssuanceParams.sendTokenExchangeIds,\n\n            _exchangeIssuanceParams.sendTokens,\n\n            _exchangeIssuanceParams.sendTokenAmounts\n\n        );\n\n\n        // Execute the exchange orders using the encoded order data\n\n        executeOrders(_exchangeIssuanceParams, _orderData);\n\n\n        // Issue Set to the caller\n\n        coreInstance.issueModule(\n\n            msg.sender,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.quantity\n\n        );\n\n\n        emit LogExchangeIssue(\n\n            _exchangeIssuanceParams.setAddress,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.quantity,\n\n            _exchangeIssuanceParams.sendTokens,\n\n            _exchangeIssuanceParams.sendTokenAmounts\n\n        );\n\n    ","contract":"ExchangeIssuanceModule","time":0},{"type":"external-function ","before":" function exchangeRedeem(\n\n        ExchangeIssuanceLibrary.ExchangeIssuanceParams memory _exchangeIssuanceParams,\n\n        bytes memory _orderData\n\n    )\n\n    public\n\n    nonReentrant\n\n    {\n\n        // Validate exchangeIssuanceParams\n\n        validateExchangeIssuanceParams(_exchangeIssuanceParams);\n\n\n        // Validate that all sendTokens are components of the Set\n\n        SetTokenLibrary.validateTokensAreComponents(\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.sendTokens\n\n        );\n\n\n        // Redeem Set into the vault, attributing components to this contract\n\n        coreInstance.redeemModule(\n\n            msg.sender,\n\n            address(this),\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.quantity\n\n        );\n\n\n        // Transfer the send tokens to the appropriate exchanges\n\n        withdrawSendTokensFromVaultToExchangeWrappers(\n\n            _exchangeIssuanceParams.sendTokenExchangeIds,\n\n            _exchangeIssuanceParams.sendTokens,\n\n            _exchangeIssuanceParams.sendTokenAmounts\n\n        );\n\n\n        // Executes the orders, depositing tokens into the Vault to the user\n\n        executeOrders(_exchangeIssuanceParams, _orderData);\n\n\n        // Withdraw receive tokens from the Vault to the user\n\n        coreInstance.batchWithdrawModule(\n\n            msg.sender,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.receiveTokens,\n\n            _exchangeIssuanceParams.receiveTokenAmounts\n\n        );\n\n\n        // Withdraw any remaining non-exchanged components to the user\n\n        withdrawRemainingComponentsToUser(_exchangeIssuanceParams.setAddress);\n\n\n        emit LogExchangeRedeem(\n\n            _exchangeIssuanceParams.setAddress,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.quantity,\n\n            _exchangeIssuanceParams.receiveTokens,\n\n            _exchangeIssuanceParams.receiveTokenAmounts\n\n        );\n\n    ","after":" function exchangeRedeem(\n\n        ExchangeIssuanceLibrary.ExchangeIssuanceParams calldata _exchangeIssuanceParams,\n\n        bytes calldata _orderData\n\n    )\n\n    public\n\n    nonReentrant\n\n    {\n\n        // Validate exchangeIssuanceParams\n\n        validateExchangeIssuanceParams(_exchangeIssuanceParams);\n\n\n        // Validate that all sendTokens are components of the Set\n\n        SetTokenLibrary.validateTokensAreComponents(\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.sendTokens\n\n        );\n\n\n        // Redeem Set into the vault, attributing components to this contract\n\n        coreInstance.redeemModule(\n\n            msg.sender,\n\n            address(this),\n\n            _exchangeIssuanceParams.setAddress,\n\n            _exchangeIssuanceParams.quantity\n\n        );\n\n\n        // Transfer the send tokens to the appropriate exchanges\n\n        withdrawSendTokensFromVaultToExchangeWrappers(\n\n            _exchangeIssuanceParams.sendTokenExchangeIds,\n\n            _exchangeIssuanceParams.sendTokens,\n\n            _exchangeIssuanceParams.sendTokenAmounts\n\n        );\n\n\n        // Executes the orders, depositing tokens into the Vault to the user\n\n        executeOrders(_exchangeIssuanceParams, _orderData);\n\n\n        // Withdraw receive tokens from the Vault to the user\n\n        coreInstance.batchWithdrawModule(\n\n            msg.sender,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.receiveTokens,\n\n            _exchangeIssuanceParams.receiveTokenAmounts\n\n        );\n\n\n        // Withdraw any remaining non-exchanged components to the user\n\n        withdrawRemainingComponentsToUser(_exchangeIssuanceParams.setAddress);\n\n\n        emit LogExchangeRedeem(\n\n            _exchangeIssuanceParams.setAddress,\n\n            msg.sender,\n\n            _exchangeIssuanceParams.quantity,\n\n            _exchangeIssuanceParams.receiveTokens,\n\n            _exchangeIssuanceParams.receiveTokenAmounts\n\n        );\n\n    ","contract":"ExchangeIssuanceModule","time":0},{"type":"immutable-restrict-modification ","before":" address public core","after":" address public immutable core","contract":"ExchangeIssuanceModule","time":0},{"type":"immutable-restrict-modification ","before":" address public vault","after":" address public immutable vault","contract":"ExchangeIssuanceModule","time":0}]}
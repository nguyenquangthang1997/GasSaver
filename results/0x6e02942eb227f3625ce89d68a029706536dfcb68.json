{"time":244,"results":[{"type":"external-function ","before":"function initialize(string memory name, string memory symbol, uint8 decimals, address sender) public initializer {\n\n        ERC20Detailed.initialize(name, symbol, decimals);\n\n        Secondary.initialize(sender);\n\n    }","after":"function initialize(string calldata name, string calldata symbol, uint8 decimals, address sender) public initializer {\n\n        ERC20Detailed.initialize(name, symbol, decimals);\n\n        Secondary.initialize(sender);\n\n    }","contract":"__unstable__ERC20PrimaryAdmin","time":0},{"type":"external-function ","before":"function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n\n        _name = name;\n\n        _symbol = symbol;\n\n        _decimals = decimals;\n\n    }","after":"function initialize(string calldata name, string calldata symbol, uint8 decimals) public initializer {\n\n        _name = name;\n\n        _symbol = symbol;\n\n        _decimals = decimals;\n\n    }","contract":"__unstable__ERC20PrimaryAdmin","time":0},{"type":"struct-data-arrangement ","before":"\naddress destination\nuint value\nbytes data\nbool executed","after":"uint value\nbytes data\naddress destination\nbool executed\n","contract":"GSNMultiSigWallet","time":0},{"type":"external-function ","before":"function initialize(address[] memory _owners, uint _required, uint _dailyLimit)\n\n    public initializer\n\n    {\n\n        GSNMultiSigWallet.initialize(_owners, _required);\n\n        dailyLimit = _dailyLimit;\n\n    }","after":"function initialize(address[] calldata _owners, uint _required, uint _dailyLimit)\n\n    public initializer\n\n    {\n\n        GSNMultiSigWallet.initialize(_owners, _required);\n\n        dailyLimit = _dailyLimit;\n\n    }","contract":"GSNMultiSigWalletWithDailyLimit","time":0},{"type":"external-function ","before":"function initialize(address[] memory _owners, uint _required) public initializer\n\n    validRequirement(_owners.length, _required)\n\n    {\n\n        GSNRecipient.initialize();\n\n        for (uint i = 0; i < _owners.length; i++) {\n\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\n\n            isOwner[_owners[i]] = true;\n\n        }\n\n        owners = _owners;\n\n        required = _required;\n\n    }","after":"function initialize(address[] calldata _owners, uint _required) public initializer\n\n    validRequirement(_owners.length, _required)\n\n    {\n\n        GSNRecipient.initialize();\n\n        for (uint i = 0; i < _owners.length; i++) {\n\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\n\n            isOwner[_owners[i]] = true;\n\n        }\n\n        owners = _owners;\n\n        required = _required;\n\n    }","contract":"GSNMultiSigWalletWithDailyLimit","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint value, bytes memory data)\n\n    public\n\n    returns (uint transactionId)\n\n    {\n\n        transactionId = addTransaction(destination, value, data);\n\n        confirmTransaction(transactionId);\n\n    }","after":"function submitTransaction(address destination, uint value, bytes calldata data)\n\n    public\n\n    returns (uint transactionId)\n\n    {\n\n        transactionId = addTransaction(destination, value, data);\n\n        confirmTransaction(transactionId);\n\n    }","contract":"GSNMultiSigWalletWithDailyLimit","time":0},{"type":"external-function ","before":"function initialize(string memory name, string memory symbol) initializer public\n\n    {\n\n        GSNRecipientERC20Fee.initialize(name, symbol);\n\n        MinterRole.initialize(_msgSender());\n\n        Ownable.initialize(_msgSender());\n\n    }","after":"function initialize(string calldata name, string calldata symbol) initializer public\n\n    {\n\n        GSNRecipientERC20Fee.initialize(name, symbol);\n\n        MinterRole.initialize(_msgSender());\n\n        Ownable.initialize(_msgSender());\n\n    }","contract":"GSNMultisigFactory","time":0},{"type":"external-function ","before":"function create(address[] memory _owners, uint _required, uint _dailyLimit) public returns (address wallet)\n\n    {\n\n        GSNMultiSigWalletWithDailyLimit multisig = new GSNMultiSigWalletWithDailyLimit();\n\n        multisig.initialize(_owners, _required, _dailyLimit);\n\n        wallet = address(multisig);\n\n        isMULTISigWallet[wallet] = true;\n\n        deployedWallets[_msgSender()].push(wallet);\n\n\n        emit ContractInstantiation(_msgSender(), wallet);\n\n    }","after":"function create(address[] calldata _owners, uint _required, uint _dailyLimit) public returns (address wallet)\n\n    {\n\n        GSNMultiSigWalletWithDailyLimit multisig = new GSNMultiSigWalletWithDailyLimit();\n\n        multisig.initialize(_owners, _required, _dailyLimit);\n\n        wallet = address(multisig);\n\n        isMULTISigWallet[wallet] = true;\n\n        deployedWallets[_msgSender()].push(wallet);\n\n\n        emit ContractInstantiation(_msgSender(), wallet);\n\n    }","contract":"GSNMultisigFactory","time":0},{"type":"external-function ","before":"function initialize(string memory name, string memory symbol) public initializer {\n\n        if (_token == __unstable__ERC20PrimaryAdmin(0)) {\n\n            _token = new __unstable__ERC20PrimaryAdmin();\n\n            _token.initialize(name, symbol, 18, address(this));\n\n        }\n\n\n        GSNRecipient.initialize();\n\n    }","after":"function initialize(string calldata name, string calldata symbol) public initializer {\n\n        if (_token == __unstable__ERC20PrimaryAdmin(0)) {\n\n            _token = new __unstable__ERC20PrimaryAdmin();\n\n            _token.initialize(name, symbol, 18, address(this));\n\n        }\n\n\n        GSNRecipient.initialize();\n\n    }","contract":"GSNMultisigFactory","time":0}]}
{"time":399,"results":[{"type":"external-function ","before":"function initialize(address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_) public {\n        // CToken initialize does the bulk of the work\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n\n        // Set underlying and sanity check it\n        underlying = underlying_;\n        EIP20Interface(underlying).totalSupply();\n    }","after":"function initialize(address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string calldata name_,\n        string calldata symbol_,\n        uint8 decimals_) public {\n        // CToken initialize does the bulk of the work\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n\n        // Set underlying and sanity check it\n        underlying = underlying_;\n        EIP20Interface(underlying).totalSupply();\n    }","contract":"CErc20","time":0},{"type":"external-function ","before":"function initialize(ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_) public {\n        require(msg.sender == admin, \"only admin may initialize the market\");\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n        // Set initial exchange rate\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n        // Set the comptroller\n        uint err = _setComptroller(comptroller_);\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        // Set the interest rate model (depends on block number / borrow index)\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n        _notEntered = true;\n    }","after":"function initialize(ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string calldata name_,\n        string calldata symbol_,\n        uint8 decimals_) public {\n        require(msg.sender == admin, \"only admin may initialize the market\");\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n        // Set initial exchange rate\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n        // Set the comptroller\n        uint err = _setComptroller(comptroller_);\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        // Set the interest rate model (depends on block number / borrow index)\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n        _notEntered = true;\n    }","contract":"CErc20","time":0},{"type":"state-data-arrangement ","before":"\n/\n    bool internal _notEn\n/\n    string public\n/\n    string public s\n/\n    uint8 public dec\n\n\n    uint internal constant borrowRateMaxMantissa = 0.00\n/\n    uint internal constant reserveFactorMaxMantissa =\n/\n    address payable public \n/\n    address payable public pending\n/\n    ComptrollerInterface public comptr\n/\n    InterestRateModel public interestRate\n/\n    uint internal initialExchangeRateMan\n/\n    uint public reserveFactorMan\n/\n    uint public accrualBlockN\n/\n    uint public borrow\n/\n    uint public totalBo\n/\n    uint public totalRes\n/\n    uint public totalS\n/\n    mapping(address => uint) internal accountT\n/\n    mapping(address => mapping(address => uint)) internal transferAllow\n/\n    mapping(address => BorrowSnapshot) internal accountBo","after":"/\n    string public\n/\n    string public s\n\n\n    uint internal constant borrowRateMaxMantissa = 0.00\n/\n    uint internal constant reserveFactorMaxMantissa =\n/\n    ComptrollerInterface public comptr\n/\n    InterestRateModel public interestRate\n/\n    uint internal initialExchangeRateMan\n/\n    uint public reserveFactorMan\n/\n    uint public accrualBlockN\n/\n    uint public borrow\n/\n    uint public totalBo\n/\n    uint public totalRes\n/\n    uint public totalS\n/\n    mapping(address => uint) internal accountT\n/\n    mapping(address => mapping(address => uint)) internal transferAllow\n/\n    mapping(address => BorrowSnapshot) internal accountBo\n/\n    address payable public \n/\n    address payable public pending\n/\n    bool internal _notEn\n/\n    uint8 public dec\n","contract":"CTokenStorage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public implement","after":"/\n    address public implement","contract":"CDelegatorInterface","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public implement","after":"/\n    address public implement","contract":"CDelegateInterface","time":0},{"type":"state-data-arrangement ","before":"\n\n\n    string public\n;\n    string public s\n;\n    uint8 public dec\n;\n    uint  public totalS\n;\n    address public ope\n;\n    address public pendingOpe\n;\n    mapping(address => uint) public bala\n;\n    mapping(address => mapping(address => uint)) public allo\n;\n    mapping(address => bool) public mi\n\n\n    bytes32 public DOMAIN_SEPA\n;\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6\n;\n    mapping(address => uint) public n","after":"\n\n    string public\n;\n    string public s\n;\n    uint  public totalS\n;\n    mapping(address => uint) public bala\n;\n    mapping(address => mapping(address => uint)) public allo\n;\n    mapping(address => bool) public mi\n\n\n    bytes32 public DOMAIN_SEPA\n;\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6\n;\n    mapping(address => uint) public n\n;\n    address public ope\n;\n    address public pendingOpe\n;\n    uint8 public dec\n","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"\n\n    string public","after":"\n\n    string public","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":";\n    string public s","after":";\n    string public s","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":";\n    uint8 public dec","after":";\n    uint8 public dec","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"\n\n    bytes32 public DOMAIN_SEPA","after":"\n\n    bytes32 public DOMAIN_SEPA","contract":"ERC20","time":0}]}
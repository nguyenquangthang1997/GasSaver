{"time":265,"results":[{"type":"constant-restrict-modification  ","before":"uint256 public amountRecovered;","after":"uint256 public constant amountRecovered;","contract":"Loan","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Loan","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Loan","time":1},{"type":"external-function ","before":"function createLoan(\n\n        address liquidityAsset,\n\n        address collateralAsset,\n\n        address flFactory,\n\n        address clFactory,\n\n        uint256[5] memory specs,\n\n        address[3] memory calcs\n\n    ) external whenNotPaused returns (address loanAddress) {\n\n        _whenProtocolNotPaused();\n\n        IMapleGlobals _globals = globals;\n\n\n        // Perform validity checks.\n\n        require(_globals.isValidSubFactory(address(this), flFactory, FL_FACTORY), \"LF:INVALID_FLF\");\n\n        require(_globals.isValidSubFactory(address(this), clFactory, CL_FACTORY), \"LF:INVALID_CLF\");\n\n\n        require(_globals.isValidCalc(calcs[0], INTEREST_CALC_TYPE), \"LF:INVALID_INT_C\");\n\n        require(_globals.isValidCalc(calcs[1], LATEFEE_CALC_TYPE), \"LF:INVALID_LATE_FEE_C\");\n\n        require(_globals.isValidCalc(calcs[2], PREMIUM_CALC_TYPE), \"LF:INVALID_PREM_C\");\n\n\n        // Deploy new Loan.\n\n        Loan loan = new Loan(\n\n            msg.sender,\n\n            liquidityAsset,\n\n            collateralAsset,\n\n            flFactory,\n\n            clFactory,\n\n            specs,\n\n            calcs\n\n        );\n\n\n        // Update the LoanFactory identification mappings.\n\n        loanAddress = address(loan);\n\n        loans[loansCreated] = loanAddress;\n\n        isLoan[loanAddress] = true;\n\n        ++loansCreated;\n\n\n        emit LoanCreated(\n\n            loanAddress,\n\n            msg.sender,\n\n            liquidityAsset,\n\n            collateralAsset,\n\n            loan.collateralLocker(),\n\n            loan.fundingLocker(),\n\n            specs,\n\n            calcs,\n\n            loan.name(),\n\n            loan.symbol()\n\n        );\n\n    }","after":"function createLoan(\n\n        address liquidityAsset,\n\n        address collateralAsset,\n\n        address flFactory,\n\n        address clFactory,\n\n        uint256[5] calldata specs,\n\n        address[3] calldata calcs\n\n    ) external whenNotPaused returns (address loanAddress) {\n\n        _whenProtocolNotPaused();\n\n        IMapleGlobals _globals = globals;\n\n\n        // Perform validity checks.\n\n        require(_globals.isValidSubFactory(address(this), flFactory, FL_FACTORY), \"LF:INVALID_FLF\");\n\n        require(_globals.isValidSubFactory(address(this), clFactory, CL_FACTORY), \"LF:INVALID_CLF\");\n\n\n        require(_globals.isValidCalc(calcs[0], INTEREST_CALC_TYPE), \"LF:INVALID_INT_C\");\n\n        require(_globals.isValidCalc(calcs[1], LATEFEE_CALC_TYPE), \"LF:INVALID_LATE_FEE_C\");\n\n        require(_globals.isValidCalc(calcs[2], PREMIUM_CALC_TYPE), \"LF:INVALID_PREM_C\");\n\n\n        // Deploy new Loan.\n\n        Loan loan = new Loan(\n\n            msg.sender,\n\n            liquidityAsset,\n\n            collateralAsset,\n\n            flFactory,\n\n            clFactory,\n\n            specs,\n\n            calcs\n\n        );\n\n\n        // Update the LoanFactory identification mappings.\n\n        loanAddress = address(loan);\n\n        loans[loansCreated] = loanAddress;\n\n        isLoan[loanAddress] = true;\n\n        ++loansCreated;\n\n\n        emit LoanCreated(\n\n            loanAddress,\n\n            msg.sender,\n\n            liquidityAsset,\n\n            collateralAsset,\n\n            loan.collateralLocker(),\n\n            loan.fundingLocker(),\n\n            specs,\n\n            calcs,\n\n            loan.name(),\n\n            loan.symbol()\n\n        );\n\n    }","contract":"LoanFactory","time":0}]}
{"time":109,"results":[{"type":"struct-data-arrangement ","before":"\naddress component\naddress module\nint256 unit\nuint8 positionState\nbytes data","after":"int256 unit\nbytes data\naddress component\naddress module\nuint8 positionState\n","contract":"ISetToken","time":0},{"type":"external-function ","before":"function delegate(\n\n        ISetToken _setToken,\n\n        string memory _governanceName,\n\n        address _delegatee\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getDelegateCalldata(_delegatee);\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit VoteDelegated(_setToken, governanceAdapter, _delegatee);\n\n    }","after":"function delegate(\n\n        ISetToken _setToken,\n\n        string calldata _governanceName,\n\n        address _delegatee\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getDelegateCalldata(_delegatee);\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit VoteDelegated(_setToken, governanceAdapter, _delegatee);\n\n    }","contract":"GovernanceModule","time":0},{"type":"external-function ","before":"function propose(\n\n        ISetToken _setToken,\n\n        string memory _governanceName,\n\n        bytes memory _proposalData\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getProposeCalldata(_proposalData);\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit ProposalCreated(_setToken, governanceAdapter, _proposalData);\n\n    }","after":"function propose(\n\n        ISetToken _setToken,\n\n        string calldata _governanceName,\n\n        bytes calldata _proposalData\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getProposeCalldata(_proposalData);\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit ProposalCreated(_setToken, governanceAdapter, _proposalData);\n\n    }","contract":"GovernanceModule","time":0},{"type":"external-function ","before":"function register(\n\n        ISetToken _setToken,\n\n        string memory _governanceName\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getRegisterCalldata(address(_setToken));\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit RegistrationSubmitted(_setToken, governanceAdapter);\n\n    }","after":"function register(\n\n        ISetToken _setToken,\n\n        string calldata _governanceName\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getRegisterCalldata(address(_setToken));\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit RegistrationSubmitted(_setToken, governanceAdapter);\n\n    }","contract":"GovernanceModule","time":0},{"type":"external-function ","before":"function revoke(\n\n        ISetToken _setToken,\n\n        string memory _governanceName\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getRevokeCalldata();\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit RegistrationRevoked(_setToken, governanceAdapter);\n\n    }","after":"function revoke(\n\n        ISetToken _setToken,\n\n        string calldata _governanceName\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getRevokeCalldata();\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit RegistrationRevoked(_setToken, governanceAdapter);\n\n    }","contract":"GovernanceModule","time":0},{"type":"external-function ","before":"function vote(\n\n        ISetToken _setToken,\n\n        string memory _governanceName,\n\n        uint256 _proposalId,\n\n        bool _support,\n\n        bytes memory _data\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getVoteCalldata(\n\n            _proposalId,\n\n            _support,\n\n            _data\n\n        );\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit ProposalVoted(_setToken, governanceAdapter, _proposalId, _support);\n\n    }","after":"function vote(\n\n        ISetToken _setToken,\n\n        string calldata _governanceName,\n\n        uint256 _proposalId,\n\n        bool _support,\n\n        bytes calldata _data\n\n    )\n\n    external\n\n    nonReentrant\n\n    onlyManagerAndValidSet(_setToken)\n\n    {\n\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\n\n\n        (\n\n        address targetExchange,\n\n        uint256 callValue,\n\n        bytes memory methodData\n\n        ) = governanceAdapter.getVoteCalldata(\n\n            _proposalId,\n\n            _support,\n\n            _data\n\n        );\n\n\n        _setToken.invoke(targetExchange, callValue, methodData);\n\n\n        emit ProposalVoted(_setToken, governanceAdapter, _proposalId, _support);\n\n    }","contract":"GovernanceModule","time":0}]}
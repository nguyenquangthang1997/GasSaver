{"time":266,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":0},{"type":"loop-duplication","before":"\nstart line 2383 column 8, end line 2403 column 8\nfor (uint256 i = 0; i < _spendAssets.length; i++) {\n            // If spend asset's initial balance is 0, then it is an incoming asset\n            if (_preCallSpendAssetBalances[i] == 0) {\n                continue;\n            }\n\n            // Handle SpendAssetsHandleType.Remove separately\n            if (_spendAssetsHandleType == SpendAssetsHandleType.Remove) {\n                outgoingAssetsCount++;\n                continue;\n            }\n\n            // Determine if the asset is outgoing or incoming, and store the post-balance for later use\n            postCallSpendAssetBalances[i] = __getVaultAssetBalance(_vaultProxy, _spendAssets[i]);\n            // If the pre- and post- balances are equal, then the asset is neither incoming nor outgoing\n            if (postCallSpendAssetBalances[i] < _preCallSpendAssetBalances[i]) {\n                outgoingAssetsCount++;\n            } else if (postCallSpendAssetBalances[i] > _preCallSpendAssetBalances[i]) {\n                increasedSpendAssetsCount++;\n            }\n        }\nstart line 2412 column 8, end line 2450 column 8\nfor (uint256 i = 0; i < _spendAssets.length; i++) {\n            // If spend asset's initial balance is 0, then it is an incoming asset.\n            if (_preCallSpendAssetBalances[i] == 0) {\n                continue;\n            }\n\n            // Handle SpendAssetsHandleType.Remove separately.\n            // No need to validate the max spend asset amount.\n            if (_spendAssetsHandleType == SpendAssetsHandleType.Remove) {\n                outgoingAssets_[outgoingAssetsIndex] = _spendAssets[i];\n                outgoingAssetAmounts_[outgoingAssetsIndex] = _preCallSpendAssetBalances[i];\n                outgoingAssetsIndex++;\n                continue;\n            }\n\n            // If the pre- and post- balances are equal, then the asset is neither incoming nor outgoing\n            if (postCallSpendAssetBalances[i] < _preCallSpendAssetBalances[i]) {\n                if (postCallSpendAssetBalances[i] == 0) {\n                    __removeTrackedAsset(msg.sender, _spendAssets[i]);\n                    outgoingAssetAmounts_[outgoingAssetsIndex] = _preCallSpendAssetBalances[i];\n                } else {\n                    outgoingAssetAmounts_[outgoingAssetsIndex] = _preCallSpendAssetBalances[i].sub(\n                        postCallSpendAssetBalances[i]\n                    );\n                }\n                require(\n                    outgoingAssetAmounts_[outgoingAssetsIndex] <= _maxSpendAssetAmounts[i],\n                    \"__reconcileCoISpendAssets: Spent amount greater than expected\"\n                );\n\n                outgoingAssets_[outgoingAssetsIndex] = _spendAssets[i];\n                outgoingAssetsIndex++;\n            } else if (postCallSpendAssetBalances[i] > _preCallSpendAssetBalances[i]) {\n                increasedSpendAssetAmounts_[increasedSpendAssetsIndex] = postCallSpendAssetBalances[i]\n                .sub(_preCallSpendAssetBalances[i]);\n                increasedSpendAssets_[increasedSpendAssetsIndex] = _spendAssets[i];\n                increasedSpendAssetsIndex++;\n            }\n        }","after":"// merge loop\n\nstart line 2383 column 8, end line 2403 column 8\nfor (uint256 i = 0; i < _spendAssets.length; i++) {\n            // If spend asset's initial balance is 0, then it is an incoming asset\n            if (_preCallSpendAssetBalances[i] == 0) {\n                continue;\n            }\n\n            // Handle SpendAssetsHandleType.Remove separately\n            if (_spendAssetsHandleType == SpendAssetsHandleType.Remove) {\n                outgoingAssetsCount++;\n                continue;\n            }\n\n            // Determine if the asset is outgoing or incoming, and store the post-balance for later use\n            postCallSpendAssetBalances[i] = __getVaultAssetBalance(_vaultProxy, _spendAssets[i]);\n            // If the pre- and post- balances are equal, then the asset is neither incoming nor outgoing\n            if (postCallSpendAssetBalances[i] < _preCallSpendAssetBalances[i]) {\n                outgoingAssetsCount++;\n            } else if (postCallSpendAssetBalances[i] > _preCallSpendAssetBalances[i]) {\n                increasedSpendAssetsCount++;\n            }\n        }\nstart line 2412 column 8, end line 2450 column 8\nfor (uint256 i = 0; i < _spendAssets.length; i++) {\n            // If spend asset's initial balance is 0, then it is an incoming asset.\n            if (_preCallSpendAssetBalances[i] == 0) {\n                continue;\n            }\n\n            // Handle SpendAssetsHandleType.Remove separately.\n            // No need to validate the max spend asset amount.\n            if (_spendAssetsHandleType == SpendAssetsHandleType.Remove) {\n                outgoingAssets_[outgoingAssetsIndex] = _spendAssets[i];\n                outgoingAssetAmounts_[outgoingAssetsIndex] = _preCallSpendAssetBalances[i];\n                outgoingAssetsIndex++;\n                continue;\n            }\n\n            // If the pre- and post- balances are equal, then the asset is neither incoming nor outgoing\n            if (postCallSpendAssetBalances[i] < _preCallSpendAssetBalances[i]) {\n                if (postCallSpendAssetBalances[i] == 0) {\n                    __removeTrackedAsset(msg.sender, _spendAssets[i]);\n                    outgoingAssetAmounts_[outgoingAssetsIndex] = _preCallSpendAssetBalances[i];\n                } else {\n                    outgoingAssetAmounts_[outgoingAssetsIndex] = _preCallSpendAssetBalances[i].sub(\n                        postCallSpendAssetBalances[i]\n                    );\n                }\n                require(\n                    outgoingAssetAmounts_[outgoingAssetsIndex] <= _maxSpendAssetAmounts[i],\n                    \"__reconcileCoISpendAssets: Spent amount greater than expected\"\n                );\n\n                outgoingAssets_[outgoingAssetsIndex] = _spendAssets[i];\n                outgoingAssetsIndex++;\n            } else if (postCallSpendAssetBalances[i] > _preCallSpendAssetBalances[i]) {\n                increasedSpendAssetAmounts_[increasedSpendAssetsIndex] = postCallSpendAssetBalances[i]\n                .sub(_preCallSpendAssetBalances[i]);\n                increasedSpendAssets_[increasedSpendAssetsIndex] = _spendAssets[i];\n                increasedSpendAssetsIndex++;\n            }\n        }","contract":"IntegrationManager","time":0}]}
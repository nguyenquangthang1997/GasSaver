{"time":275,"results":[{"type":"external-function ","before":"function createChildUniverse(bytes32 _parentPayoutDistributionHash, uint256[] memory _parentPayoutNumerators) public returns (IUniverse) {\n        IUniverse _parentUniverse = getAndValidateUniverse(msg.sender);\n        return createUniverse(_parentUniverse, _parentPayoutDistributionHash, _parentPayoutNumerators);\n    }","after":"function createChildUniverse(bytes32 _parentPayoutDistributionHash, uint256[] calldata _parentPayoutNumerators) public returns (IUniverse) {\n        IUniverse _parentUniverse = getAndValidateUniverse(msg.sender);\n        return createUniverse(_parentUniverse, _parentPayoutDistributionHash, _parentPayoutNumerators);\n    }","contract":"Augur","time":0},{"type":"external-function ","before":"function disputeCrowdsourcerCreated(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] memory _payoutNumerators, uint256 _size, uint256 _disputeRound) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        crowdsourcers[_disputeCrowdsourcer] = true;\n        emit DisputeCrowdsourcerCreated(address(_universe), _market, _disputeCrowdsourcer, _payoutNumerators, _size, _disputeRound);\n        return true;\n    }","after":"function disputeCrowdsourcerCreated(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] calldata _payoutNumerators, uint256 _size, uint256 _disputeRound) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        crowdsourcers[_disputeCrowdsourcer] = true;\n        emit DisputeCrowdsourcerCreated(address(_universe), _market, _disputeCrowdsourcer, _payoutNumerators, _size, _disputeRound);\n        return true;\n    }","contract":"Augur","time":0},{"type":"external-function ","before":"    function derivePayoutDistributionHash(uint256[] memory _payoutNumerators, uint256 _numTicks, uint256 _numOutcomes) public view returns (bytes32) {\n        uint256 _sum = 0;\n        // This is to force an Invalid report to be entirely payed out to Invalid\n        require(_payoutNumerators[0] == 0 || _payoutNumerators[0] == _numTicks);\n        require(_payoutNumerators.length == _numOutcomes, \"Augur.derivePayoutDistributionHash: Malformed payout length\");\n        for (uint256 i = 0; i < _payoutNumerators.length; i++) {\n            uint256 _value = _payoutNumerators[i];\n            _sum = _sum.add(_value);\n        }\n        require(_sum == _numTicks, \"Augur.derivePayoutDistributionHash: Malformed payout sum\");\n        return keccak256(abi.encodePacked(_payoutNumerators));\n ","after":"    function derivePayoutDistributionHash(uint256[] calldata _payoutNumerators, uint256 _numTicks, uint256 _numOutcomes) public view returns (bytes32) {\n        uint256 _sum = 0;\n        // This is to force an Invalid report to be entirely payed out to Invalid\n        require(_payoutNumerators[0] == 0 || _payoutNumerators[0] == _numTicks);\n        require(_payoutNumerators.length == _numOutcomes, \"Augur.derivePayoutDistributionHash: Malformed payout length\");\n        for (uint256 i = 0; i < _payoutNumerators.length; i++) {\n            uint256 _value = _payoutNumerators[i];\n            _sum = _sum.add(_value);\n        }\n        require(_sum == _numTicks, \"Augur.derivePayoutDistributionHash: Malformed payout sum\");\n        return keccak256(abi.encodePacked(_payoutNumerators));\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function onCategoricalMarketCreated(uint256 _endTime, string memory _extraInfo, IMarket _market, address _marketCreator, address _designatedReporter, uint256 _feePerCashInAttoCash, bytes32[] memory _outcomes) public returns (bool) {\n        IUniverse _universe = getAndValidateUniverse(msg.sender);\n        markets[address(_market)] = true;\n        int256[] memory _prices = new int256[](2);\n        _prices[0] = DEFAULT_MIN_PRICE;\n        _prices[1] = DEFAULT_MAX_PRICE;\n        marketCreationData[address(_market)].extraInfo = _extraInfo;\n        marketCreationData[address(_market)].marketCreator = _marketCreator;\n        marketCreationData[address(_market)].outcomes = _outcomes;\n        marketCreationData[address(_market)].marketType = IMarket.MarketType.CATEGORICAL;\n        marketCreationData[address(_market)].recommendedTradeInterval = DEFAULT_RECOMMENDED_TRADE_INTERVAL;\n        emit MarketCreated(_universe, _endTime, _extraInfo, _market, _marketCreator, _designatedReporter, _feePerCashInAttoCash, _prices, IMarket.MarketType.CATEGORICAL, 1000, _outcomes, _universe.getOrCacheMarketRepBond(), getTimestamp());\n        return true;\n ","after":"    function onCategoricalMarketCreated(uint256 _endTime, string calldata _extraInfo, IMarket _market, address _marketCreator, address _designatedReporter, uint256 _feePerCashInAttoCash, bytes32[] calldata _outcomes) public returns (bool) {\n        IUniverse _universe = getAndValidateUniverse(msg.sender);\n        markets[address(_market)] = true;\n        int256[] memory _prices = new int256[](2);\n        _prices[0] = DEFAULT_MIN_PRICE;\n        _prices[1] = DEFAULT_MAX_PRICE;\n        marketCreationData[address(_market)].extraInfo = _extraInfo;\n        marketCreationData[address(_market)].marketCreator = _marketCreator;\n        marketCreationData[address(_market)].outcomes = _outcomes;\n        marketCreationData[address(_market)].marketType = IMarket.MarketType.CATEGORICAL;\n        marketCreationData[address(_market)].recommendedTradeInterval = DEFAULT_RECOMMENDED_TRADE_INTERVAL;\n        emit MarketCreated(_universe, _endTime, _extraInfo, _market, _marketCreator, _designatedReporter, _feePerCashInAttoCash, _prices, IMarket.MarketType.CATEGORICAL, 1000, _outcomes, _universe.getOrCacheMarketRepBond(), getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function onYesNoMarketCreated(uint256 _endTime, string memory _extraInfo, IMarket _market, address _marketCreator, address _designatedReporter, uint256 _feePerCashInAttoCash) public returns (bool) {\n        IUniverse _universe = getAndValidateUniverse(msg.sender);\n        markets[address(_market)] = true;\n        int256[] memory _prices = new int256[](2);\n        _prices[0] = DEFAULT_MIN_PRICE;\n        _prices[1] = DEFAULT_MAX_PRICE;\n        marketCreationData[address(_market)].extraInfo = _extraInfo;\n        marketCreationData[address(_market)].marketCreator = _marketCreator;\n        marketCreationData[address(_market)].marketType = IMarket.MarketType.YES_NO;\n        marketCreationData[address(_market)].recommendedTradeInterval = DEFAULT_RECOMMENDED_TRADE_INTERVAL;\n        emit MarketCreated(_universe, _endTime, _extraInfo, _market, _marketCreator, _designatedReporter, _feePerCashInAttoCash, _prices, IMarket.MarketType.YES_NO, 1000, new bytes32[](0), _universe.getOrCacheMarketRepBond(), getTimestamp());\n        return true;\n ","after":"    function onYesNoMarketCreated(uint256 _endTime, string calldata _extraInfo, IMarket _market, address _marketCreator, address _designatedReporter, uint256 _feePerCashInAttoCash) public returns (bool) {\n        IUniverse _universe = getAndValidateUniverse(msg.sender);\n        markets[address(_market)] = true;\n        int256[] memory _prices = new int256[](2);\n        _prices[0] = DEFAULT_MIN_PRICE;\n        _prices[1] = DEFAULT_MAX_PRICE;\n        marketCreationData[address(_market)].extraInfo = _extraInfo;\n        marketCreationData[address(_market)].marketCreator = _marketCreator;\n        marketCreationData[address(_market)].marketType = IMarket.MarketType.YES_NO;\n        marketCreationData[address(_market)].recommendedTradeInterval = DEFAULT_RECOMMENDED_TRADE_INTERVAL;\n        emit MarketCreated(_universe, _endTime, _extraInfo, _market, _marketCreator, _designatedReporter, _feePerCashInAttoCash, _prices, IMarket.MarketType.YES_NO, 1000, new bytes32[](0), _universe.getOrCacheMarketRepBond(), getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function onScalarMarketCreated(uint256 _endTime, string memory _extraInfo, IMarket _market, address _marketCreator, address _designatedReporter, uint256 _feePerCashInAttoCash, int256[] memory _prices, uint256 _numTicks) public returns (bool) {\n        IUniverse _universe = getAndValidateUniverse(msg.sender);\n        require(_prices.length == 2);\n        require(_prices[0] < _prices[1]);\n        uint256 _priceRange = uint256(_prices[1] - _prices[0]);\n        require(_priceRange > _numTicks);\n        markets[address(_market)] = true;\n        marketCreationData[address(_market)].extraInfo = _extraInfo;\n        marketCreationData[address(_market)].marketCreator = _marketCreator;\n        marketCreationData[address(_market)].displayPrices = _prices;\n        marketCreationData[address(_market)].marketType = IMarket.MarketType.SCALAR;\n        marketCreationData[address(_market)].recommendedTradeInterval = getTradeInterval(_priceRange, _numTicks);\n        emit MarketCreated(_universe, _endTime, _extraInfo, _market, _marketCreator, _designatedReporter, _feePerCashInAttoCash, _prices, IMarket.MarketType.SCALAR, _numTicks, new bytes32[](0), _universe.getOrCacheMarketRepBond(), getTimestamp());\n        return true;\n ","after":"    function onScalarMarketCreated(uint256 _endTime, string calldata _extraInfo, IMarket _market, address _marketCreator, address _designatedReporter, uint256 _feePerCashInAttoCash, int256[] calldata _prices, uint256 _numTicks) public returns (bool) {\n        IUniverse _universe = getAndValidateUniverse(msg.sender);\n        require(_prices.length == 2);\n        require(_prices[0] < _prices[1]);\n        uint256 _priceRange = uint256(_prices[1] - _prices[0]);\n        require(_priceRange > _numTicks);\n        markets[address(_market)] = true;\n        marketCreationData[address(_market)].extraInfo = _extraInfo;\n        marketCreationData[address(_market)].marketCreator = _marketCreator;\n        marketCreationData[address(_market)].displayPrices = _prices;\n        marketCreationData[address(_market)].marketType = IMarket.MarketType.SCALAR;\n        marketCreationData[address(_market)].recommendedTradeInterval = getTradeInterval(_priceRange, _numTicks);\n        emit MarketCreated(_universe, _endTime, _extraInfo, _market, _marketCreator, _designatedReporter, _feePerCashInAttoCash, _prices, IMarket.MarketType.SCALAR, _numTicks, new bytes32[](0), _universe.getOrCacheMarketRepBond(), getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function logInitialReportSubmitted(IUniverse _universe, address _reporter, address _market, address _initialReporter, uint256 _amountStaked, bool _isDesignatedReporter, uint256[] memory _payoutNumerators, string memory _description, uint256 _nextWindowStartTime, uint256 _nextWindowEndTime) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        emit InitialReportSubmitted(address(_universe), _reporter, _market, _initialReporter, _amountStaked, _isDesignatedReporter, _payoutNumerators, _description, _nextWindowStartTime, _nextWindowEndTime, getTimestamp());\n        return true;\n ","after":"    function logInitialReportSubmitted(IUniverse _universe, address _reporter, address _market, address _initialReporter, uint256 _amountStaked, bool _isDesignatedReporter, uint256[] calldata _payoutNumerators, string calldata _description, uint256 _nextWindowStartTime, uint256 _nextWindowEndTime) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        emit InitialReportSubmitted(address(_universe), _reporter, _market, _initialReporter, _amountStaked, _isDesignatedReporter, _payoutNumerators, _description, _nextWindowStartTime, _nextWindowEndTime, getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function logDisputeCrowdsourcerContribution(IUniverse _universe, address _reporter, address _market, address _disputeCrowdsourcer, uint256 _amountStaked, string memory _description, uint256[] memory _payoutNumerators, uint256 _currentStake, uint256 _stakeRemaining, uint256 _disputeRound) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        emit DisputeCrowdsourcerContribution(address(_universe), _reporter, _market, _disputeCrowdsourcer, _amountStaked, _description, _payoutNumerators, _currentStake, _stakeRemaining, _disputeRound, getTimestamp());\n        return true;\n ","after":"    function logDisputeCrowdsourcerContribution(IUniverse _universe, address _reporter, address _market, address _disputeCrowdsourcer, uint256 _amountStaked, string calldata _description, uint256[] calldata _payoutNumerators, uint256 _currentStake, uint256 _stakeRemaining, uint256 _disputeRound) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        emit DisputeCrowdsourcerContribution(address(_universe), _reporter, _market, _disputeCrowdsourcer, _amountStaked, _description, _payoutNumerators, _currentStake, _stakeRemaining, _disputeRound, getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function logDisputeCrowdsourcerCompleted(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] memory _payoutNumerators, uint256 _nextWindowStartTime, uint256 _nextWindowEndTime, bool _pacingOn, uint256 _totalRepStakedInPayout, uint256 _totalRepStakedInMarket, uint256 _disputeRound) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        emit DisputeCrowdsourcerCompleted(address(_universe), _market, _disputeCrowdsourcer, _payoutNumerators, _nextWindowStartTime, _nextWindowEndTime, _pacingOn, _totalRepStakedInPayout, _totalRepStakedInMarket, _disputeRound, getTimestamp());\n        return true;\n ","after":"    function logDisputeCrowdsourcerCompleted(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] calldata _payoutNumerators, uint256 _nextWindowStartTime, uint256 _nextWindowEndTime, bool _pacingOn, uint256 _totalRepStakedInPayout, uint256 _totalRepStakedInMarket, uint256 _disputeRound) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(IMarket(msg.sender)));\n        emit DisputeCrowdsourcerCompleted(address(_universe), _market, _disputeCrowdsourcer, _payoutNumerators, _nextWindowStartTime, _nextWindowEndTime, _pacingOn, _totalRepStakedInPayout, _totalRepStakedInMarket, _disputeRound, getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function logInitialReporterRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256[] memory _payoutNumerators) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForReportingParticipant(IReportingParticipant(msg.sender)));\n        emit InitialReporterRedeemed(address(_universe), _reporter, _market, msg.sender, _amountRedeemed, _repReceived, _payoutNumerators, getTimestamp());\n        return true;\n ","after":"    function logInitialReporterRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256[] calldata _payoutNumerators) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        require(_universe.isContainerForReportingParticipant(IReportingParticipant(msg.sender)));\n        emit InitialReporterRedeemed(address(_universe), _reporter, _market, msg.sender, _amountRedeemed, _repReceived, _payoutNumerators, getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function logDisputeCrowdsourcerRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256[] memory _payoutNumerators) public returns (bool) {\n        IDisputeCrowdsourcer _disputeCrowdsourcer = IDisputeCrowdsourcer(msg.sender);\n        require(isKnownCrowdsourcer(_disputeCrowdsourcer));\n        emit DisputeCrowdsourcerRedeemed(address(_universe), _reporter, _market, address(_disputeCrowdsourcer), _amountRedeemed, _repReceived, _payoutNumerators, getTimestamp());\n        return true;\n ","after":"    function logDisputeCrowdsourcerRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256[] calldata _payoutNumerators) public returns (bool) {\n        IDisputeCrowdsourcer _disputeCrowdsourcer = IDisputeCrowdsourcer(msg.sender);\n        require(isKnownCrowdsourcer(_disputeCrowdsourcer));\n        emit DisputeCrowdsourcerRedeemed(address(_universe), _reporter, _market, address(_disputeCrowdsourcer), _amountRedeemed, _repReceived, _payoutNumerators, getTimestamp());\n        return true;\n ","contract":"Augur","time":0},{"type":"external-function ","before":"    function logMarketFinalized(IUniverse _universe, uint256[] memory _winningPayoutNumerators) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        IMarket _market = IMarket(msg.sender);\n        require(_universe.isContainerForMarket(_market));\n        emit MarketFinalized(address(_universe), address(_market), getTimestamp(), _winningPayoutNumerators);\n        return true;\n ","after":"    function logMarketFinalized(IUniverse _universe, uint256[] calldata _winningPayoutNumerators) public returns (bool) {\n        require(isKnownUniverse(_universe));\n        IMarket _market = IMarket(msg.sender);\n        require(_universe.isContainerForMarket(_market));\n        emit MarketFinalized(address(_universe), address(_market), getTimestamp(), _winningPayoutNumerators);\n        return true;\n ","contract":"Augur","time":0}]}
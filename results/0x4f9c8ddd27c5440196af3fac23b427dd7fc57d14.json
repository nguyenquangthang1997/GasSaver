{"time":1512,"results":[{"type":"state-data-arrangement ","before":"\nuint16 internal constant REFERRALCODE = 20;\nILendingPoolAddressesProvider public provider;\nERC20 public override stablecoin;\nERC20 public aToken;\nIAaveMining public aaveMining;\naddress public rewards;\nuint256[45] private __gap;","after":"ILendingPoolAddressesProvider public provider;\nERC20 public override stablecoin;\nERC20 public aToken;\nIAaveMining public aaveMining;\nuint256[45] private __gap;\naddress public rewards;\nuint16 internal constant REFERRALCODE = 20;\n","contract":"AaveMarket","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"ERC20","time":0},{"type":"struct-data-arrangement ","before":"\n   uint64 _MaxDepositPer\n   uint256 _MinDepositAmo\n   uint256 _Deposit\n   address _feeMo\n   address _interestMo\n   address _interestOra\n   address _deposit\n   address _fundingMultito\n   address _mphMin","after":"   uint256 _MinDepositAmo\n   uint256 _Deposit\n   address _feeMo\n   address _interestMo\n   address _interestOra\n   address _deposit\n   address _fundingMultito\n   address _mphMin\n   uint64 _MaxDepositPer\n","contract":"Factory","time":0},{"type":"external-function ","before":"   function createFundingMultitoken(\n        address template,\n        bytes32 salt,\n        string calldata _uri,\n        address[] calldata _dividendTokens,\n        address _wrapperTemplate,\n        bool _deployWrapperOnMint,\n        string memory _baseName,\n        string memory _baseSymbol,\n        uint8 _decimals\n    ) external returns (FundingMultitoken) {\n        FundingMultitoken clone =\n        FundingMultitoken(template.cloneDeterministic(salt));\n\n        // initialize\n        clone.initialize(\n            msg.sender,\n            _uri,\n            _dividendTokens,\n            _wrapperTemplate,\n            _deployWrapperOnMint,\n            _baseName,\n            _baseSymbol,\n            _decimals\n        );\n\n        emit CreateClone(\"FundingMultitoken\", template, salt, address(clone));\n        return clone;\n  ","after":"   function createFundingMultitoken(\n        address template,\n        bytes32 salt,\n        string calldata _uri,\n        address[] calldata _dividendTokens,\n        address _wrapperTemplate,\n        bool _deployWrapperOnMint,\n        string calldata _baseName,\n        string calldata _baseSymbol,\n        uint8 _decimals\n    ) external returns (FundingMultitoken) {\n        FundingMultitoken clone =\n        FundingMultitoken(template.cloneDeterministic(salt));\n\n        // initialize\n        clone.initialize(\n            msg.sender,\n            _uri,\n            _dividendTokens,\n            _wrapperTemplate,\n            _deployWrapperOnMint,\n            _baseName,\n            _baseSymbol,\n            _decimals\n        );\n\n        emit CreateClone(\"FundingMultitoken\", template, salt, address(clone));\n        return clone;\n  ","contract":"Factory","time":0},{"type":"external-function ","before":"   function initialize(\n        address admin,\n        string calldata uri,\n        address[] calldata dividendTokens,\n        address _wrapperTemplate,\n        bool _deployWrapperOnMint,\n        string memory _baseName,\n        string memory _baseSymbol,\n        uint8 _decimals\n    ) external virtual initializer {\n        __FundingMultitoken_init(\n            admin,\n            uri,\n            dividendTokens,\n            _wrapperTemplate,\n            _deployWrapperOnMint,\n            _baseName,\n            _baseSymbol,\n            _decimals\n        );\n  ","after":"   function initialize(\n        address admin,\n        string calldata uri,\n        address[] calldata dividendTokens,\n        address _wrapperTemplate,\n        bool _deployWrapperOnMint,\n        string calldata _baseName,\n        string calldata _baseSymbol,\n        uint8 _decimals\n    ) external virtual initializer {\n        __FundingMultitoken_init(\n            admin,\n            uri,\n            dividendTokens,\n            _wrapperTemplate,\n            _deployWrapperOnMint,\n            _baseName,\n            _baseSymbol,\n            _decimals\n        );\n  ","contract":"FundingMultitoken","time":0},{"type":"external-function ","before":"   function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(\n            accounts.length == ids.length,\n            \"ERC1155: accounts and ids length mismatch\"\n        );\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n  ","after":"   function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(\n            accounts.length == ids.length,\n            \"ERC1155: accounts and ids length mismatch\"\n        );\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n  ","contract":"FundingMultitoken","time":0},{"type":"external-function ","before":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","after":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","contract":"FundingMultitoken","time":0},{"type":"external-function ","before":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","after":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","contract":"FundingMultitoken","time":0},{"type":"external-function ","before":"   function constructTokenURI(URIParams memory params)\n    public\n    pure\n    returns (string memory)\n    {\n        return\n        string(\n            abi.encodePacked(\n                \"data:application/json;base64,\",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            '{\"name\":\"',\n                            string(abi.encodePacked(params.name, \"-NFT\")),\n                            '\", \"description\":\"',\n                            generateDescription(),\n                            '\", \"image\": \"',\n                            \"data:image/svg+xml;base64,\",\n                            Base64.encode(bytes(generateSVGImage(params))),\n                            '\"}'\n                        )\n                    )\n                )\n            )\n        );\n  ","after":"   function constructTokenURI(URIParams calldata params)\n    public\n    pure\n    returns (string memory)\n    {\n        return\n        string(\n            abi.encodePacked(\n                \"data:application/json;base64,\",\n                Base64.encode(\n                    bytes(\n                        abi.encodePacked(\n                            '{\"name\":\"',\n                            string(abi.encodePacked(params.name, \"-NFT\")),\n                            '\", \"description\":\"',\n                            generateDescription(),\n                            '\", \"image\": \"',\n                            \"data:image/svg+xml;base64,\",\n                            Base64.encode(bytes(generateSVGImage(params))),\n                            '\"}'\n                        )\n                    )\n                )\n            )\n        );\n  ","contract":"NFTDescriptor","time":0},{"type":"external-function ","before":"}\n\n    function multiWithdraw(uint64[] memory vestIDList) external {\n        for (uint256 i = 0; i < vestIDList.length; i++) {\n            _withdraw(vestIDList[i]);\n        ","after":"}\n\n    function multiWithdraw(uint64[] calldata vestIDList) external {\n        for (uint256 i = 0; i < vestIDList.length; i++) {\n            _withdraw(vestIDList[i]);\n        ","contract":"Vesting02","time":0},{"type":"state-data-arrangement ","before":"\n;\n\n    mapping(uint256 => address) public tokenIDToW\nr;\n    address public wrapperTe\ne;\n    bool public deployWrapper\nt;\n    string public ba\ne;\n    string public base\nl;\n    uint8 public de\n}\n\n    uint256[44] private","after":";\n\n    mapping(uint256 => address) public tokenIDToW\nt;\n    string public ba\ne;\n    string public base\n}\n\n    uint256[44] private\nr;\n    address public wrapperTe\ne;\n    bool public deployWrapper\nl;\n    uint8 public de\n","contract":"WrappedERC1155Token","time":1},{"type":"external-function ","before":"}\n\n    function onERC721Received(\n        address, /*operator*/\n        address, /*from*/\n        uint256, /*tokenId*/\n        bytes memory /*data*/\n    ) external pure override returns (bytes4) {\n        return this.onERC721Received.selector","after":"}\n\n    function onERC721Received(\n        address, /*operator*/\n        address, /*from*/\n        uint256, /*tokenId*/\n        bytes memory /*data*/\n    ) external pure override returns (bytes4) {\n        return this.onERC721Received.selector","contract":"ZeroCouponBond","time":0}]}
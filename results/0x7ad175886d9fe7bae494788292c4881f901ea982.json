{"time":565,"results":[{"type":"state-data-arrangement ","before":"\n address public owner\n string  public constant name = \"Shells\"\n string  public constant symbol = \"SHL\"\n uint8   public constant decimals = 18\n Shell public shell\n mapping(address => PartitionTicket) public partitionTickets\n address[] public derivatives\n address[] public numeraires\n address[] public reserves\n bool public partitioned = false\n bool public frozen = false\n bool internal notEntered = true","after":" string  public constant name = \"Shells\"\n string  public constant symbol = \"SHL\"\n Shell public shell\n mapping(address => PartitionTicket) public partitionTickets\n address[] public derivatives\n address[] public numeraires\n address[] public reserves\n address public owner\n uint8   public constant decimals = 18\n bool public partitioned = false\n bool public frozen = false\n bool internal notEntered = true\n","contract":"ShellStorage","time":0},{"type":"external-function ","before":" function newShell(\n\n        address[] memory _assets,\n\n        uint[] memory _assetWeights,\n\n        address[] memory _derivativeAssimilators\n\n    ) public discountCHI returns (Shell) {\n\n\n        if (msg.sender != cowri) revert(\"Shell/must-be-cowri\");\n\n\n        Shell shell = new Shell(\n\n            _assets,\n\n            _assetWeights,\n\n            _derivativeAssimilators\n\n        );\n\n\n        shell.transferOwnership(msg.sender);\n\n\n        _isShell[address(shell)] = true;\n\n\n        emit NewShell(msg.sender, address(shell));\n\n\n        return shell;\n\n\n    ","after":" function newShell(\n\n        address[] calldata _assets,\n\n        uint[] calldata _assetWeights,\n\n        address[] calldata _derivativeAssimilators\n\n    ) public discountCHI returns (Shell) {\n\n\n        if (msg.sender != cowri) revert(\"Shell/must-be-cowri\");\n\n\n        Shell shell = new Shell(\n\n            _assets,\n\n            _assetWeights,\n\n            _derivativeAssimilators\n\n        );\n\n\n        shell.transferOwnership(msg.sender);\n\n\n        _isShell[address(shell)] = true;\n\n\n        emit NewShell(msg.sender, address(shell));\n\n\n        return shell;\n\n\n    ","contract":"ShellFactory","time":0}]}
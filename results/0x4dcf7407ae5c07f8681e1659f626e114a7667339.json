{"time":324,"results":[{"type":"external-function ","before":"function initialize(ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_) public {\n        require(msg.sender == admin, \"only admin may initialize the market\");\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n        // Set initial exchange rate\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n        // Set the comptroller\n        uint err = _setComptroller(comptroller_);\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        // Set the interest rate model (depends on block number / borrow index)\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n        _notEntered = true;\n    }","after":"function initialize(ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string calldata name_,\n        string calldata symbol_,\n        uint8 decimals_) public {\n        require(msg.sender == admin, \"only admin may initialize the market\");\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n        // Set initial exchange rate\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n        // Set the comptroller\n        uint err = _setComptroller(comptroller_);\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        // Set the interest rate model (depends on block number / borrow index)\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n        _notEntered = true;\n    }","contract":"CToken","time":1},{"type":"state-data-arrangement ","before":"\n/\n    bool internal _notEn\n/\n    string public\n/\n    string public s\n/\n    uint8 public dec\n\n\n    uint internal constant borrowRateMaxMantissa = 0.00\n/\n    uint internal constant reserveFactorMaxMantissa =\n/\n    address payable public \n/\n    address payable public pending\n/\n    ComptrollerInterface public comptr\n/\n    InterestRateModel public interestRate\n/\n    uint internal initialExchangeRateMan\n/\n    uint public reserveFactorMan\n/\n    uint public accrualBlockN\n/\n    uint public borrow\n/\n    uint public totalBo\n/\n    uint public totalRes\n/\n    uint public totalS\n/\n    mapping(address => uint) internal accountT\n/\n    mapping(address => mapping(address => uint)) internal transferAllow\n/\n    mapping(address => BorrowSnapshot) internal accountBo","after":"/\n    string public\n/\n    string public s\n\n\n    uint internal constant borrowRateMaxMantissa = 0.00\n/\n    uint internal constant reserveFactorMaxMantissa =\n/\n    ComptrollerInterface public comptr\n/\n    InterestRateModel public interestRate\n/\n    uint internal initialExchangeRateMan\n/\n    uint public reserveFactorMan\n/\n    uint public accrualBlockN\n/\n    uint public borrow\n/\n    uint public totalBo\n/\n    uint public totalRes\n/\n    uint public totalS\n/\n    mapping(address => uint) internal accountT\n/\n    mapping(address => mapping(address => uint)) internal transferAllow\n/\n    mapping(address => BorrowSnapshot) internal accountBo\n/\n    address payable public \n/\n    address payable public pending\n/\n    bool internal _notEn\n/\n    uint8 public dec\n","contract":"CTokenStorage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public under","after":"/\n    address public under","contract":"CErc20Interface","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public implement","after":"/\n    address public implement","contract":"CDelegatorInterface","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public implement","after":"/\n    address public implement","contract":"CDelegateInterface","time":0},{"type":"struct-data-arrangement ","before":"\n      bool is\n      uint collateralFactorMa\n      mapping(address => bool) accountMemb\n      bool is","after":"      uint collateralFactorMa\n      mapping(address => bool) accountMemb\n      bool is\n      bool is\n","contract":"ComptrollerV2Storage","time":0},{"type":"constant-restrict-modification  ","before":".\n    address public borrowCapGua","after":".\n    address public borrowCapGua","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"k\n    uint public com","after":"k\n    uint public com","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public pauseGua","after":"/\n    address public pauseGua","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":";\n    bool public _mintGuardianP","after":";\n    bool public _mintGuardianP","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":";\n    bool public _borrowGuardianP","after":";\n    bool public _borrowGuardianP","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":";\n    bool public transferGuardianP","after":";\n    bool public transferGuardianP","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":";\n    bool public seizeGuardianP","after":";\n    bool public seizeGuardianP","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    uint public closeFactorMan","after":"/\n    uint public closeFactorMan","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    uint public liquidationIncentiveMan","after":"/\n    uint public liquidationIncentiveMan","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    uint public maxA","after":"/\n    uint public maxA","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public ","after":"/\n    address public ","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public pending","after":"/\n    address public pending","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public comptrollerImplement","after":"/\n    address public comptrollerImplement","contract":"ComptrollerV5Storage","time":0},{"type":"constant-restrict-modification  ","before":"/\n    address public pendingComptrollerImplement","after":"/\n    address public pendingComptrollerImplement","contract":"ComptrollerV5Storage","time":0}]}
{"time":74,"results":[{"type":"external-function ","before":"function init(\n\n        address _creator,\n\n        uint256 _totalSupply,\n\n        string memory _name,\n\n        string memory _symbol,\n\n        uint256 _decimals\n\n    ) public {\n\n        require(!initialized, \"TOKEN_INITIALIZED\");\n\n        initialized = true;\n\n        totalSupply = _totalSupply;\n\n        balances[_creator] = _totalSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        emit Transfer(address(0), _creator, _totalSupply);\n\n    }","after":"function init(\n\n        address _creator,\n\n        uint256 _totalSupply,\n\n        string calldata _name,\n\n        string calldata _symbol,\n\n        uint256 _decimals\n\n    ) public {\n\n        require(!initialized, \"TOKEN_INITIALIZED\");\n\n        initialized = true;\n\n        totalSupply = _totalSupply;\n\n        balances[_creator] = _totalSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        emit Transfer(address(0), _creator, _totalSupply);\n\n    }","contract":"InitializableERC20","time":0},{"type":"external-function ","before":"function init(\n\n        address _creator,\n\n        uint256 _initSupply,\n\n        string memory _name,\n\n        string memory _symbol,\n\n        uint256 _decimals\n\n    ) public {\n\n        initOwner(_creator);\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        totalSupply = _initSupply;\n\n        balances[_creator] = _initSupply;\n\n        emit Transfer(address(0), _creator, _initSupply);\n\n    }","after":"function init(\n\n        address _creator,\n\n        uint256 _initSupply,\n\n        string calldata _name,\n\n        string calldata _symbol,\n\n        uint256 _decimals\n\n    ) public {\n\n        initOwner(_creator);\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        totalSupply = _initSupply;\n\n        balances[_creator] = _initSupply;\n\n        emit Transfer(address(0), _creator, _initSupply);\n\n    }","contract":"InitializableMintableERC20","time":0},{"type":"external-function ","before":"function createStdERC20(\n\n        uint256 totalSupply,\n\n        string memory name,\n\n        string memory symbol,\n\n        uint256 decimals\n\n    ) external returns (address newERC20) {\n\n        newERC20 = ICloneFactory(_CLONE_FACTORY_).clone(_ERC20_TEMPLATE_);\n\n        InitializableERC20(newERC20).init(msg.sender, totalSupply, name, symbol, decimals);\n\n        emit NewERC20(newERC20, msg.sender, false);\n\n    }","after":"function createStdERC20(\n\n        uint256 totalSupply,\n\n        string calldata name,\n\n        string calldata symbol,\n\n        uint256 decimals\n\n    ) external returns (address newERC20) {\n\n        newERC20 = ICloneFactory(_CLONE_FACTORY_).clone(_ERC20_TEMPLATE_);\n\n        InitializableERC20(newERC20).init(msg.sender, totalSupply, name, symbol, decimals);\n\n        emit NewERC20(newERC20, msg.sender, false);\n\n    }","contract":"ERC20Factory","time":0},{"type":"external-function ","before":"function createMintableERC20(\n\n        uint256 initSupply,\n\n        string memory name,\n\n        string memory symbol,\n\n        uint256 decimals\n\n    ) external returns (address newMintableERC20) {\n\n        newMintableERC20 = ICloneFactory(_CLONE_FACTORY_).clone(_MINTABLE_ERC20_TEMPLATE_);\n\n        InitializableMintableERC20(newMintableERC20).init(\n\n            msg.sender,\n\n            initSupply,\n\n            name,\n\n            symbol,\n\n            decimals\n\n        );\n\n        emit NewERC20(newMintableERC20, msg.sender, true);\n\n    }","after":"function createMintableERC20(\n\n        uint256 initSupply,\n\n        string calldata name,\n\n        string calldata symbol,\n\n        uint256 decimals\n\n    ) external returns (address newMintableERC20) {\n\n        newMintableERC20 = ICloneFactory(_CLONE_FACTORY_).clone(_MINTABLE_ERC20_TEMPLATE_);\n\n        InitializableMintableERC20(newMintableERC20).init(\n\n            msg.sender,\n\n            initSupply,\n\n            name,\n\n            symbol,\n\n            decimals\n\n        );\n\n        emit NewERC20(newMintableERC20, msg.sender, true);\n\n    }","contract":"ERC20Factory","time":0}]}
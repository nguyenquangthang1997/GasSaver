{"time":98,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":0},{"type":"loop-calculation","before":"BeaconProxy token = new BeaconProxy(address(this), \"\");","after":"// move outside for loop\nBeaconProxy token = new BeaconProxy(address(this), \"\");","loc":{"start":{"line":2994,"column":12},"end":{"line":2994,"column":66}},"contract":"LiquidVestingTokenFactory","time":0},{"type":"external-function ","before":"function createLiquidVestingToken(\n\n        string[] memory name,\n\n        string[] memory symbol,\n\n        address redeemToken,\n\n        uint256[] memory activationTimestamp,\n\n        uint256[] memory redeemTimestamp,\n\n        ILiquidVestingToken.AddType addRecipientsType\n\n    ) public override {\n\n        require(\n\n            redeemToken != address(0),\n\n            \"Company token cannot be zero address\"\n\n        );\n\n        require(\n\n            name.length == symbol.length &&\n\n            name.length == activationTimestamp.length &&\n\n            name.length == redeemTimestamp.length,\n\n            \"Arrays length should be same\"\n\n        );\n\n\n        uint8 decimals = ERC20(redeemToken).decimals();\n\n        for (uint256 i = 0; i < name.length; i++) {\n\n            require(\n\n                activationTimestamp[i] <= redeemTimestamp[i],\n\n                \"activationTimestamp cannot be more than redeemTimestamp\"\n\n            );\n\n\n            BeaconProxy token = new BeaconProxy(address(this), \"\");\n\n            ILiquidVestingToken(address(token)).initialize(\n\n                name[i],\n\n                symbol[i],\n\n                decimals,\n\n                _msgSender(),\n\n                address(this),\n\n                redeemToken,\n\n                activationTimestamp[i],\n\n                redeemTimestamp[i],\n\n                addRecipientsType\n\n            );\n\n\n            vestingTokensByOriginalToken[redeemToken].push(address(token));\n\n            emit VestingTokenCreated(redeemToken, address(token));\n\n        }\n\n    }","after":"function createLiquidVestingToken(\n\n        string[] calldata name,\n\n        string[] calldata symbol,\n\n        address redeemToken,\n\n        uint256[] calldata activationTimestamp,\n\n        uint256[] calldata redeemTimestamp,\n\n        ILiquidVestingToken.AddType addRecipientsType\n\n    ) public override {\n\n        require(\n\n            redeemToken != address(0),\n\n            \"Company token cannot be zero address\"\n\n        );\n\n        require(\n\n            name.length == symbol.length &&\n\n            name.length == activationTimestamp.length &&\n\n            name.length == redeemTimestamp.length,\n\n            \"Arrays length should be same\"\n\n        );\n\n\n        uint8 decimals = ERC20(redeemToken).decimals();\n\n        for (uint256 i = 0; i < name.length; i++) {\n\n            require(\n\n                activationTimestamp[i] <= redeemTimestamp[i],\n\n                \"activationTimestamp cannot be more than redeemTimestamp\"\n\n            );\n\n\n            BeaconProxy token = new BeaconProxy(address(this), \"\");\n\n            ILiquidVestingToken(address(token)).initialize(\n\n                name[i],\n\n                symbol[i],\n\n                decimals,\n\n                _msgSender(),\n\n                address(this),\n\n                redeemToken,\n\n                activationTimestamp[i],\n\n                redeemTimestamp[i],\n\n                addRecipientsType\n\n            );\n\n\n            vestingTokensByOriginalToken[redeemToken].push(address(token));\n\n            emit VestingTokenCreated(redeemToken, address(token));\n\n        }\n\n    }","contract":"LiquidVestingTokenFactory","time":0},{"type":"immutable-restrict-modification ","before":"address private tokenImplementation;","after":"address private immutable tokenImplementation;","contract":"LiquidVestingTokenFactory","time":0}]}
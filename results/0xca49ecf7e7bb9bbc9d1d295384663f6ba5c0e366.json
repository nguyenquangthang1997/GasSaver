{"time":133,"results":[{"type":"external-function ","before":"ler is not the shop\");\n        _;\n    }\n\n    function mint(address _to, uint256 _amount)\n    external\n    onlyShop\n    returns (bool)\n    {\n        require(mintable, \"LP: minting is disabled\");\n        _mint(_to, _amount);\n        return true;\n    }\n\n    function burn(\n        uint256 _amount,\n        address[] memory _tokens,\n        address[] memory _adapters,\n        address[] memory _pools\n    ) external nonReentrant returns (bool) {\n        require(burnable, \"LP: burning is disabled\");\n        require(msg.sender != dao, \"LP: DAO can't burn LP\");\n        require(_amount <= balanceOf(msg.sender), \"LP: insufficient balance\");\n        require(totalSupply() > 0, \"LP: Zero share\");\n\n        uint256 _share = (1e18 * _amount) / (totalSupply());\n\n    ","after":"ler is not the shop\");\n        _;\n    }\n\n    function mint(address _to, uint256 _amount)\n    external\n    onlyShop\n    returns (bool)\n    {\n        require(mintable, \"LP: minting is disabled\");\n        _mint(_to, _amount);\n        return true;\n    }\n\n    function burn(\n        uint256 _amount,\n        address[] memory _tokens,\n        address[] memory _adapters,\n        address[] memory _pools\n    ) external nonReentrant returns (bool) {\n        require(burnable, \"LP: burning is disabled\");\n        require(msg.sender != dao, \"LP: DAO can't burn LP\");\n        require(_amount <= balanceOf(msg.sender), \"LP: insufficient balance\");\n        require(totalSupply() > 0, \"LP: Zero share\");\n\n        uint256 _share = (1e18 * _amount) / (totalSupply());\n\n    ","contract":"LP","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"LP","time":0},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"LP","time":0},{"type":"constant-restrict-modification  ","before":" * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (s","after":" * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (s","contract":"LP","time":0},{"type":"external-function ","before":"vateOffers[dao][offerId]\n    mapping(address => uint256) public numberOfPrivateOffers;\n\n    event LpCreated(address indexed lp);\n\n    modifier onlyDaoWithLp() {\n        require(\n            IFactory(factory).containsDao(msg.sender) &&\n            IDao(msg.sender).lp() != address(0),\n            \"Shop: this function is only for DAO with LP\"\n        );\n        _;\n    }\n\n    function setFactory(address _factory) external returns (bool) {\n        require(\n            factory == address(0),\n            \"S","after":"vateOffers[dao][offerId]\n    mapping(address => uint256) public numberOfPrivateOffers;\n\n    event LpCreated(address indexed lp);\n\n    modifier onlyDaoWithLp() {\n        require(\n            IFactory(factory).containsDao(msg.sender) &&\n            IDao(msg.sender).lp() != address(0),\n            \"Shop: this function is only for DAO with LP\"\n        );\n        _;\n    }\n\n    function setFactory(address _factory) external returns (bool) {\n        require(\n            factory == address(0),\n            \"S","contract":"Shop","time":0}]}
{"time":292,"results":[{"type":"external-function ","before":"function setTradeMaximums(\n        ISetToken _setToken,\n        address[] memory _components,\n        uint256[] memory _tradeMaximums\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_tradeMaximums);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            executionInfo[_setToken][IERC20(_components[i])].maxSize = _tradeMaximums[i];\n            emit TradeMaximumUpdated(_setToken, _components[i], _tradeMaximums[i]);\n        }\n    }","after":"function setTradeMaximums(\n        ISetToken _setToken,\n        address[] calldata _components,\n        uint256[] calldata _tradeMaximums\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_tradeMaximums);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            executionInfo[_setToken][IERC20(_components[i])].maxSize = _tradeMaximums[i];\n            emit TradeMaximumUpdated(_setToken, _components[i], _tradeMaximums[i]);\n        }\n    }","contract":"GeneralIndexModule","time":0},{"type":"external-function ","before":"function setExchanges(\n        ISetToken _setToken,\n        address[] memory _components,\n        string[] memory _exchangeNames\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_exchangeNames);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            if (_components[i] != address(weth)) {\n\n                require(\n                    controller.getIntegrationRegistry().isValidIntegration(address(this), _exchangeNames[i]),\n                    \"Unrecognized exchange name\"\n                );\n\n                executionInfo[_setToken][IERC20(_components[i])].exchangeName = _exchangeNames[i];\n                emit AssetExchangeUpdated(_setToken, _components[i], _exchangeNames[i]);\n            }\n        }\n    }","after":"function setExchanges(\n        ISetToken _setToken,\n        address[] calldata _components,\n        string[] calldata _exchangeNames\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_exchangeNames);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            if (_components[i] != address(weth)) {\n\n                require(\n                    controller.getIntegrationRegistry().isValidIntegration(address(this), _exchangeNames[i]),\n                    \"Unrecognized exchange name\"\n                );\n\n                executionInfo[_setToken][IERC20(_components[i])].exchangeName = _exchangeNames[i];\n                emit AssetExchangeUpdated(_setToken, _components[i], _exchangeNames[i]);\n            }\n        }\n    }","contract":"GeneralIndexModule","time":0},{"type":"external-function ","before":"function setCoolOffPeriods(\n        ISetToken _setToken,\n        address[] memory _components,\n        uint256[] memory _coolOffPeriods\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_coolOffPeriods);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            executionInfo[_setToken][IERC20(_components[i])].coolOffPeriod = _coolOffPeriods[i];\n            emit CoolOffPeriodUpdated(_setToken, _components[i], _coolOffPeriods[i]);\n        }\n    }","after":"function setCoolOffPeriods(\n        ISetToken _setToken,\n        address[] calldata _components,\n        uint256[] calldata _coolOffPeriods\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_coolOffPeriods);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            executionInfo[_setToken][IERC20(_components[i])].coolOffPeriod = _coolOffPeriods[i];\n            emit CoolOffPeriodUpdated(_setToken, _components[i], _coolOffPeriods[i]);\n        }\n    }","contract":"GeneralIndexModule","time":0},{"type":"external-function ","before":"function setExchangeData(\n        ISetToken _setToken,\n        address[] memory _components,\n        bytes[] memory _exchangeData\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_exchangeData);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            executionInfo[_setToken][IERC20(_components[i])].exchangeData = _exchangeData[i];\n            emit ExchangeDataUpdated(_setToken, _components[i], _exchangeData[i]);\n        }\n    }","after":"function setExchangeData(\n        ISetToken _setToken,\n        address[] calldata _components,\n        bytes[] calldata _exchangeData\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _components.validatePairsWithArray(_exchangeData);\n\n        for (uint256 i = 0; i < _components.length; i++) {\n            executionInfo[_setToken][IERC20(_components[i])].exchangeData = _exchangeData[i];\n            emit ExchangeDataUpdated(_setToken, _components[i], _exchangeData[i]);\n        }\n    }","contract":"GeneralIndexModule","time":0},{"type":"external-function ","before":"function setTraderStatus(\n        ISetToken _setToken,\n        address[] memory _traders,\n        bool[] memory _statuses\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _traders.validatePairsWithArray(_statuses);\n\n        for (uint256 i = 0; i < _traders.length; i++) {\n            _updateTradersHistory(_setToken, _traders[i], _statuses[i]);\n            permissionInfo[_setToken].tradeAllowList[_traders[i]] = _statuses[i];\n            emit TraderStatusUpdated(_setToken, _traders[i], _statuses[i]);\n        }\n    }","after":"function setTraderStatus(\n        ISetToken _setToken,\n        address[] calldata _traders,\n        bool[] calldata _statuses\n    )\n    external\n    onlyManagerAndValidSet(_setToken)\n    {\n        _traders.validatePairsWithArray(_statuses);\n\n        for (uint256 i = 0; i < _traders.length; i++) {\n            _updateTradersHistory(_setToken, _traders[i], _statuses[i]);\n            permissionInfo[_setToken].tradeAllowList[_traders[i]] = _statuses[i];\n            emit TraderStatusUpdated(_setToken, _traders[i], _statuses[i]);\n        }\n    }","contract":"GeneralIndexModule","time":0},{"type":"struct-data-arrangement ","before":"\naddress component\naddress module\nint256 unit\nuint8 positionState\nbytes data","after":"int256 unit\nbytes data\naddress component\naddress module\nuint8 positionState\n","contract":"ISetToken","time":0}]}
{"time":84,"results":[{"type":"external-function ","before":"function withdraw(Claim[] memory claims, IERC20 token) external {\n        require(claims.length > 0, \"CLAIMS_MUST_BE_PROVIDED\");\n        uint256 totalScore = 0;\n        bytes32[] memory rootList = new bytes32[](claims.length);\n        Claim memory claim;\n        for (uint256 i = 0; i < claims.length; i++) {\n            claim = claims[i];\n            require(roots[claim.root], \"ROOT_NOT_ENABLED\");\n            require(!claimed[claim.root][msg.sender], \"CLAIM_ALREADY_MADE\");\n            require(\n                verify(msg.sender, claim.root, claim.score, claim.proof),\n                \"PROOF_INVALID\"\n            );\n            totalScore = totalScore.add(claim.score);\n            claimed[claim.root][msg.sender] = true;\n            rootList[i] = claim.root;\n        }\n        uint256 amount = calculate(totalScore, token);\n        token.safeTransfer(msg.sender, amount);\n        emit Withdraw(rootList, msg.sender, token, amount);\n    }","after":"function withdraw(Claim[] calldata claims, IERC20 token) external {\n        require(claims.length > 0, \"CLAIMS_MUST_BE_PROVIDED\");\n        uint256 totalScore = 0;\n        bytes32[] memory rootList = new bytes32[](claims.length);\n        Claim memory claim;\n        for (uint256 i = 0; i < claims.length; i++) {\n            claim = claims[i];\n            require(roots[claim.root], \"ROOT_NOT_ENABLED\");\n            require(!claimed[claim.root][msg.sender], \"CLAIM_ALREADY_MADE\");\n            require(\n                verify(msg.sender, claim.root, claim.score, claim.proof),\n                \"PROOF_INVALID\"\n            );\n            totalScore = totalScore.add(claim.score);\n            claimed[claim.root][msg.sender] = true;\n            rootList[i] = claim.root;\n        }\n        uint256 amount = calculate(totalScore, token);\n        token.safeTransfer(msg.sender, amount);\n        emit Withdraw(rootList, msg.sender, token, amount);\n    }","contract":"Pool","time":0}]}
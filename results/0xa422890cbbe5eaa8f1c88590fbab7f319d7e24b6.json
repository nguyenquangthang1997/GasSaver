{"time":286,"results":[{"type":"external-function ","before":"*/\n\n    function marketSell0xOrdersFillOrKill(address inputErc20Contract, LibOrder.Order[] memory orders, bytes[] memory signatures, uint256 takerAssetFillAmount) public payable fundEnabled onlyRebalancer {\n\n        // Exchange COMP/ROOK to ETH\n\n        uint256 ethBalanceBefore = address(this).balance;\n\n        uint256[2] memory filledAmounts = ZeroExExchangeController.marketSellOrdersFillOrKill(orders, signatures, takerAssetFillAmount, msg.value);\n\n        uint256 ethBalanceAfter = address(this).balance;\n\n        emit CurrencyTrade(inputErc20Contract, filledAmounts[0], filledAmounts[1]);\n\n\n        // Unwrap outputted WETH\n\n        uint256 wethBalance = _weth.balanceOf(address(this));\n\n        require(wethBalance > 0, \"No WETH outputted.\");\n\n        _weth.withdraw(wethBalance);\n\n\n        // Refund unspent ETH protocol fee\n\n        uint256 refund = ethBalanceAfter.sub(ethBalanceBefore.sub(msg.value));\n\n\n        if (refund > 0) {\n\n            (bool success,) = msg.sender.call.value(refund)(\"\");\n\n            require(success, \"Failed to refund unspent ETH protocol fee.\");\n\n        ","after":"*/\n\n    function marketSell0xOrdersFillOrKill(address inputErc20Contract, LibOrder.Order[] calldata orders, bytes[] calldata signatures, uint256 takerAssetFillAmount) public payable fundEnabled onlyRebalancer {\n\n        // Exchange COMP/ROOK to ETH\n\n        uint256 ethBalanceBefore = address(this).balance;\n\n        uint256[2] memory filledAmounts = ZeroExExchangeController.marketSellOrdersFillOrKill(orders, signatures, takerAssetFillAmount, msg.value);\n\n        uint256 ethBalanceAfter = address(this).balance;\n\n        emit CurrencyTrade(inputErc20Contract, filledAmounts[0], filledAmounts[1]);\n\n\n        // Unwrap outputted WETH\n\n        uint256 wethBalance = _weth.balanceOf(address(this));\n\n        require(wethBalance > 0, \"No WETH outputted.\");\n\n        _weth.withdraw(wethBalance);\n\n\n        // Refund unspent ETH protocol fee\n\n        uint256 refund = ethBalanceAfter.sub(ethBalanceBefore.sub(msg.value));\n\n\n        if (refund > 0) {\n\n            (bool success,) = msg.sender.call.value(refund)(\"\");\n\n            require(success, \"Failed to refund unspent ETH protocol fee.\");\n\n        ","contract":"RariFundController","time":0}]}
{"time":966,"results":[{"type":"state-data-arrangement ","before":"\naddress internal constant ORIGIN_ADDR = 0x9A6a414D6F3497c05E3b1De90520765fA1E07c03;\naddress payable internal constant FLUSH_ADDR = 0xDEC9f2793e3c17cd26eeFb21C4762fA5128E0399;\nstring public constant name = \"HEX\";\nstring public constant symbol = \"HEX\";\nuint8 public constant decimals = 8;\nuint256 private constant HEARTS_PER_HEX = 10 ** uint256(decimals);\nuint256 private constant HEX_PER_BTC = 1e4;\nuint256 private constant SATOSHIS_PER_BTC = 1e8;\nuint256 internal constant HEARTS_PER_SATOSHI = HEARTS_PER_HEX / SATOSHIS_PER_BTC * HEX_PER_BTC;\nuint256 internal constant LAUNCH_TIME = 1575331200;\nuint256 internal constant HEART_UINT_SIZE = 72;\nuint256 internal constant XF_LOBBY_ENTRY_INDEX_SIZE = 40;\nuint256 internal constant XF_LOBBY_ENTRY_INDEX_MASK = (1 << XF_LOBBY_ENTRY_INDEX_SIZE) - 1;\nuint256 internal constant WAAS_LOBBY_SEED_HEX = 1e9;\nuint256 internal constant WAAS_LOBBY_SEED_HEARTS = WAAS_LOBBY_SEED_HEX * HEARTS_PER_HEX;\nuint256 internal constant PRE_CLAIM_DAYS = 1;\nuint256 internal constant CLAIM_PHASE_START_DAY = PRE_CLAIM_DAYS;\nuint256 private constant CLAIM_PHASE_WEEKS = 50;\nuint256 internal constant CLAIM_PHASE_DAYS = CLAIM_PHASE_WEEKS * 7;\nuint256 internal constant CLAIM_PHASE_END_DAY = CLAIM_PHASE_START_DAY + CLAIM_PHASE_DAYS;\nuint256 internal constant XF_LOBBY_DAY_WORDS = (CLAIM_PHASE_END_DAY + 255) >> 8;\nuint256 internal constant BIG_PAY_DAY = CLAIM_PHASE_END_DAY + 1;\nbytes32 internal constant MERKLE_TREE_ROOT = 0x4e831acb4223b66de3b3d2e54a2edeefb0de3d7916e2886a4b134d9764d41bec;\nuint256 internal constant MERKLE_LEAF_SATOSHI_SIZE = 45;\nuint256 internal constant MERKLE_LEAF_FILL_SIZE = 256 - 160 - MERKLE_LEAF_SATOSHI_SIZE;\nuint256 internal constant MERKLE_LEAF_FILL_BASE = (1 << MERKLE_LEAF_FILL_SIZE) - 1;\nuint256 internal constant MERKLE_LEAF_FILL_MASK = MERKLE_LEAF_FILL_BASE << MERKLE_LEAF_SATOSHI_SIZE;\nuint256 internal constant SATOSHI_UINT_SIZE = 51;\nuint256 internal constant SATOSHI_UINT_MASK = (1 << SATOSHI_UINT_SIZE) - 1;\nuint256 internal constant FULL_SATOSHIS_TOTAL = 1807766732160668;\nuint256 internal constant CLAIMABLE_SATOSHIS_TOTAL = 910087996911001;\nuint256 internal constant CLAIMABLE_BTC_ADDR_COUNT = 27997742;\nuint256 internal constant MAX_BTC_ADDR_BALANCE_SATOSHIS = 25550214098481;\nuint256 internal constant AUTO_STAKE_CLAIM_PERCENT = 90;\nuint256 internal constant MIN_STAKE_DAYS = 1;\nuint256 internal constant MIN_AUTO_STAKE_DAYS = 350;\nuint256 internal constant MAX_STAKE_DAYS = 5555;\nuint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\nuint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\nuint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;\nuint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\nuint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;\nuint256 private constant LPB_BONUS_PERCENT = 20;\nuint256 private constant LPB_BONUS_MAX_PERCENT = 200;\nuint256 internal constant LPB = 364 * 100 / LPB_BONUS_PERCENT;\nuint256 internal constant LPB_MAX_DAYS = LPB * LPB_BONUS_MAX_PERCENT / 100;\nuint256 private constant BPB_BONUS_PERCENT = 10;\nuint256 private constant BPB_MAX_HEX = 150 * 1e6;\nuint256 internal constant BPB_MAX_HEARTS = BPB_MAX_HEX * HEARTS_PER_HEX;\nuint256 internal constant BPB = BPB_MAX_HEARTS * 100 / BPB_BONUS_PERCENT;\nuint256 internal constant SHARE_RATE_SCALE = 1e5;\nuint256 internal constant SHARE_RATE_UINT_SIZE = 40;\nuint256 internal constant SHARE_RATE_MAX = (1 << SHARE_RATE_UINT_SIZE) - 1;\nuint8 internal constant ETH_ADDRESS_BYTE_LEN = 20;\nuint8 internal constant ETH_ADDRESS_HEX_LEN = ETH_ADDRESS_BYTE_LEN * 2;\nuint8 internal constant CLAIM_PARAM_HASH_BYTE_LEN = 12;\nuint8 internal constant CLAIM_PARAM_HASH_HEX_LEN = CLAIM_PARAM_HASH_BYTE_LEN * 2;\nuint8 internal constant BITCOIN_SIG_PREFIX_LEN = 24;\nbytes24 internal constant BITCOIN_SIG_PREFIX_STR = \"Bitcoin Signed Message:\\n\";\nbytes internal constant STD_CLAIM_PREFIX_STR = \"Claim_HEX_to_0x\";\nbytes internal constant OLD_CLAIM_PREFIX_STR = \"Claim_BitcoinHEX_to_0x\";\nbytes16 internal constant HEX_DIGITS = \"0123456789abcdef\";\nuint8 internal constant CLAIM_FLAG_MSG_PREFIX_OLD = 1 << 0;\nuint8 internal constant CLAIM_FLAG_BTC_ADDR_COMPRESSED = 1 << 1;\nuint8 internal constant CLAIM_FLAG_BTC_ADDR_P2WPKH_IN_P2SH = 1 << 2;\nuint8 internal constant CLAIM_FLAG_BTC_ADDR_BECH32 = 1 << 3;\nuint8 internal constant CLAIM_FLAG_ETH_ADDR_LOWERCASE = 1 << 4;\nGlobalsStore public globals;\nmapping(bytes20 => bool) public btcAddressClaims;\nmapping(uint256 => DailyDataStore) public dailyData;\nmapping(address => StakeStore[]) public stakeLists;\nmapping(uint256 => uint256) public xfLobby;\nmapping(uint256 => mapping(address => XfLobbyQueueStore)) public xfLobbyMembers;","after":"string public constant name = \"HEX\";\nstring public constant symbol = \"HEX\";\nuint256 private constant HEARTS_PER_HEX = 10 ** uint256(decimals);\nuint256 private constant HEX_PER_BTC = 1e4;\nuint256 private constant SATOSHIS_PER_BTC = 1e8;\nuint256 internal constant HEARTS_PER_SATOSHI = HEARTS_PER_HEX / SATOSHIS_PER_BTC * HEX_PER_BTC;\nuint256 internal constant LAUNCH_TIME = 1575331200;\nuint256 internal constant HEART_UINT_SIZE = 72;\nuint256 internal constant XF_LOBBY_ENTRY_INDEX_SIZE = 40;\nuint256 internal constant XF_LOBBY_ENTRY_INDEX_MASK = (1 << XF_LOBBY_ENTRY_INDEX_SIZE) - 1;\nuint256 internal constant WAAS_LOBBY_SEED_HEX = 1e9;\nuint256 internal constant WAAS_LOBBY_SEED_HEARTS = WAAS_LOBBY_SEED_HEX * HEARTS_PER_HEX;\nuint256 internal constant PRE_CLAIM_DAYS = 1;\nuint256 internal constant CLAIM_PHASE_START_DAY = PRE_CLAIM_DAYS;\nuint256 private constant CLAIM_PHASE_WEEKS = 50;\nuint256 internal constant CLAIM_PHASE_DAYS = CLAIM_PHASE_WEEKS * 7;\nuint256 internal constant CLAIM_PHASE_END_DAY = CLAIM_PHASE_START_DAY + CLAIM_PHASE_DAYS;\nuint256 internal constant XF_LOBBY_DAY_WORDS = (CLAIM_PHASE_END_DAY + 255) >> 8;\nuint256 internal constant BIG_PAY_DAY = CLAIM_PHASE_END_DAY + 1;\nbytes32 internal constant MERKLE_TREE_ROOT = 0x4e831acb4223b66de3b3d2e54a2edeefb0de3d7916e2886a4b134d9764d41bec;\nuint256 internal constant MERKLE_LEAF_SATOSHI_SIZE = 45;\nuint256 internal constant MERKLE_LEAF_FILL_SIZE = 256 - 160 - MERKLE_LEAF_SATOSHI_SIZE;\nuint256 internal constant MERKLE_LEAF_FILL_BASE = (1 << MERKLE_LEAF_FILL_SIZE) - 1;\nuint256 internal constant MERKLE_LEAF_FILL_MASK = MERKLE_LEAF_FILL_BASE << MERKLE_LEAF_SATOSHI_SIZE;\nuint256 internal constant SATOSHI_UINT_SIZE = 51;\nuint256 internal constant SATOSHI_UINT_MASK = (1 << SATOSHI_UINT_SIZE) - 1;\nuint256 internal constant FULL_SATOSHIS_TOTAL = 1807766732160668;\nuint256 internal constant CLAIMABLE_SATOSHIS_TOTAL = 910087996911001;\nuint256 internal constant CLAIMABLE_BTC_ADDR_COUNT = 27997742;\nuint256 internal constant MAX_BTC_ADDR_BALANCE_SATOSHIS = 25550214098481;\nuint256 internal constant AUTO_STAKE_CLAIM_PERCENT = 90;\nuint256 internal constant MIN_STAKE_DAYS = 1;\nuint256 internal constant MIN_AUTO_STAKE_DAYS = 350;\nuint256 internal constant MAX_STAKE_DAYS = 5555;\nuint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\nuint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\nuint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;\nuint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\nuint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;\nuint256 private constant LPB_BONUS_PERCENT = 20;\nuint256 private constant LPB_BONUS_MAX_PERCENT = 200;\nuint256 internal constant LPB = 364 * 100 / LPB_BONUS_PERCENT;\nuint256 internal constant LPB_MAX_DAYS = LPB * LPB_BONUS_MAX_PERCENT / 100;\nuint256 private constant BPB_BONUS_PERCENT = 10;\nuint256 private constant BPB_MAX_HEX = 150 * 1e6;\nuint256 internal constant BPB_MAX_HEARTS = BPB_MAX_HEX * HEARTS_PER_HEX;\nuint256 internal constant BPB = BPB_MAX_HEARTS * 100 / BPB_BONUS_PERCENT;\nuint256 internal constant SHARE_RATE_SCALE = 1e5;\nuint256 internal constant SHARE_RATE_UINT_SIZE = 40;\nuint256 internal constant SHARE_RATE_MAX = (1 << SHARE_RATE_UINT_SIZE) - 1;\nbytes internal constant STD_CLAIM_PREFIX_STR = \"Claim_HEX_to_0x\";\nbytes internal constant OLD_CLAIM_PREFIX_STR = \"Claim_BitcoinHEX_to_0x\";\nGlobalsStore public globals;\nmapping(bytes20 => bool) public btcAddressClaims;\nmapping(uint256 => DailyDataStore) public dailyData;\nmapping(address => StakeStore[]) public stakeLists;\nmapping(uint256 => uint256) public xfLobby;\nmapping(uint256 => mapping(address => XfLobbyQueueStore)) public xfLobbyMembers;\nbytes24 internal constant BITCOIN_SIG_PREFIX_STR = \"Bitcoin Signed Message:\\n\";\naddress internal constant ORIGIN_ADDR = 0x9A6a414D6F3497c05E3b1De90520765fA1E07c03;\naddress payable internal constant FLUSH_ADDR = 0xDEC9f2793e3c17cd26eeFb21C4762fA5128E0399;\nbytes16 internal constant HEX_DIGITS = \"0123456789abcdef\";\nuint8 public constant decimals = 8;\nuint8 internal constant ETH_ADDRESS_BYTE_LEN = 20;\nuint8 internal constant ETH_ADDRESS_HEX_LEN = ETH_ADDRESS_BYTE_LEN * 2;\nuint8 internal constant CLAIM_PARAM_HASH_BYTE_LEN = 12;\nuint8 internal constant CLAIM_PARAM_HASH_HEX_LEN = CLAIM_PARAM_HASH_BYTE_LEN * 2;\nuint8 internal constant BITCOIN_SIG_PREFIX_LEN = 24;\nuint8 internal constant CLAIM_FLAG_MSG_PREFIX_OLD = 1 << 0;\nuint8 internal constant CLAIM_FLAG_BTC_ADDR_COMPRESSED = 1 << 1;\nuint8 internal constant CLAIM_FLAG_BTC_ADDR_P2WPKH_IN_P2SH = 1 << 2;\nuint8 internal constant CLAIM_FLAG_BTC_ADDR_BECH32 = 1 << 3;\nuint8 internal constant CLAIM_FLAG_ETH_ADDR_LOWERCASE = 1 << 4;\n","contract":"GlobalsAndUtility","time":327},{"type":"de-morgan-condition ","before":"!nested && !bech32","after":"!(nested && bech32)","loc":{"start":{"line":4027,"column":20},"end":{"line":4027,"column":32}},"contract":"UTXOClaimValidation","time":0}]}
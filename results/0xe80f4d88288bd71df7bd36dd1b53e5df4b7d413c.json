{"time":2656,"results":[{"type":"state-data-arrangement ","before":"\nTokenController public dAppToken;\nTokenData internal td;\nQuotationData internal qd;\nClaimsReward internal cr;\nGovernance internal gv;\nTokenFunctions internal tf;\nNXMToken public tk;\nMemberRoleDetails[] internal memberRoleData;\nbool internal constructorCheck;\nuint public maxABCount;\nbool public launched;\nuint public launchedOn;","after":"TokenController public dAppToken;\nTokenData internal td;\nQuotationData internal qd;\nClaimsReward internal cr;\nGovernance internal gv;\nTokenFunctions internal tf;\nNXMToken public tk;\nMemberRoleDetails[] internal memberRoleData;\nuint public maxABCount;\nuint public launchedOn;\nbool internal constructorCheck;\nbool public launched;\n","contract":"MemberRoles","time":0},{"type":"state-data-arrangement ","before":"\nMCR internal m1;\nPool1 internal p1;\nPoolData internal pd;\nFactory internal factory;\naddress public uniswapFactoryAddress;\nuint internal constant DECIMAL1E18 = uint(10) ** 18;\nbool internal locked;","after":"MCR internal m1;\nPool1 internal p1;\nPoolData internal pd;\nFactory internal factory;\nuint internal constant DECIMAL1E18 = uint(10) ** 18;\naddress public uniswapFactoryAddress;\nbool internal locked;\n","contract":"Pool2","time":0},{"type":"state-data-arrangement ","before":"\nIARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint64 internal lastDate;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;","after":"IARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint64 internal lastDate;\n","contract":"PoolData","time":0},{"type":"state-data-arrangement ","before":"\nOraclizeI oraclize;\nOraclizeAddrResolverI OAR;\nuint constant day = 60 * 60 * 24;\nuint constant week = 60 * 60 * 24 * 7;\nuint constant month = 60 * 60 * 24 * 30;\nbyte constant proofType_NONE = 0x00;\nbyte constant proofType_Ledger = 0x30;\nbyte constant proofType_Native = 0xF0;\nbyte constant proofStorage_IPFS = 0x01;\nbyte constant proofType_Android = 0x40;\nbyte constant proofType_TLSNotary = 0x10;\nstring oraclize_network_name;\nuint8 constant networkID_auto = 0;\nuint8 constant networkID_morden = 2;\nuint8 constant networkID_mainnet = 1;\nuint8 constant networkID_testnet = 2;\nuint8 constant networkID_consensys = 161;\nmapping(bytes32 => bytes32) oraclize_randomDS_args;\nmapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;","after":"OraclizeI oraclize;\nOraclizeAddrResolverI OAR;\nuint constant day = 60 * 60 * 24;\nuint constant week = 60 * 60 * 24 * 7;\nuint constant month = 60 * 60 * 24 * 30;\nstring oraclize_network_name;\nmapping(bytes32 => bytes32) oraclize_randomDS_args;\nmapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;\nbyte constant proofType_NONE = 0x00;\nbyte constant proofType_Ledger = 0x30;\nbyte constant proofType_Native = 0xF0;\nbyte constant proofStorage_IPFS = 0x01;\nbyte constant proofType_Android = 0x40;\nbyte constant proofType_TLSNotary = 0x10;\nuint8 constant networkID_auto = 0;\nuint8 constant networkID_morden = 2;\nuint8 constant networkID_mainnet = 1;\nuint8 constant networkID_testnet = 2;\nuint8 constant networkID_consensys = 161;\n","contract":"usingOraclize","time":1}]}
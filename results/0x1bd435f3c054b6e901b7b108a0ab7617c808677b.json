{"time":208,"results":[{"type":"struct-data-arrangement ","before":"\naddress fromToken\nuint256 fromAmount\nuint256 toAmount\nuint256 expectedAmount\naddress payable beneficiary\nstring referrer\nbool useReduxToken\nUtils.Path[] path","after":"uint256 fromAmount\nuint256 toAmount\nuint256 expectedAmount\nstring referrer\nUtils.Path[] path\naddress fromToken\naddress payable beneficiary\nbool useReduxToken\n","contract":"Utils","time":0},{"type":"struct-data-arrangement ","before":"\naddress fromToken\nuint256 fromAmount\nuint256 toAmount\nuint256 expectedAmount\naddress payable beneficiary\nstring referrer\nbool useReduxToken\nUtils.MegaSwapPath[] path","after":"uint256 fromAmount\nuint256 toAmount\nuint256 expectedAmount\nstring referrer\nUtils.MegaSwapPath[] path\naddress fromToken\naddress payable beneficiary\nbool useReduxToken\n","contract":"Utils","time":0},{"type":"struct-data-arrangement ","before":"\naddress fromToken\naddress toToken\nuint256 fromAmount\nuint256 toAmount\naddress payable beneficiary\nstring referrer\nbool useReduxToken\nUtils.BuyRoute[] route","after":"uint256 fromAmount\nuint256 toAmount\nstring referrer\nUtils.BuyRoute[] route\naddress fromToken\naddress toToken\naddress payable beneficiary\nbool useReduxToken\n","contract":"Utils","time":0},{"type":"external-function ","before":"function simplBuy(\n\n        address fromToken,\n\n        address toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        address[] memory callees,\n\n        bytes memory exchangeData,\n\n        uint256[] memory startIndexes,\n\n        uint256[] memory values,\n\n        address payable beneficiary,\n\n        string memory referrer,\n\n        bool useReduxToken\n\n    )\n\n    external\n\n    payable\n\n\n    {\n\n        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\n\n        uint receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            toAmount, //expected amount and to amount are same in case of buy\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer,\n\n            useReduxToken\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            fromToken,\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(address(fromToken), msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","after":"function simplBuy(\n\n        address fromToken,\n\n        address toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        address[] calldata callees,\n\n        bytes calldata exchangeData,\n\n        uint256[] calldata startIndexes,\n\n        uint256[] calldata values,\n\n        address payable beneficiary,\n\n        string calldata referrer,\n\n        bool useReduxToken\n\n    )\n\n    external\n\n    payable\n\n\n    {\n\n        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\n\n        uint receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            toAmount, //expected amount and to amount are same in case of buy\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer,\n\n            useReduxToken\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            fromToken,\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(address(fromToken), msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function simpleSwap(\n\n        address fromToken,\n\n        address toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        uint256 expectedAmount,\n\n        address[] memory callees,\n\n        bytes memory exchangeData,\n\n        uint256[] memory startIndexes,\n\n        uint256[] memory values,\n\n        address payable beneficiary,\n\n        string memory referrer,\n\n        bool useReduxToken\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256 receivedAmount)\n\n    {\n\n        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\n\n        receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            expectedAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer,\n\n            useReduxToken\n\n        );\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","after":"function simpleSwap(\n\n        address fromToken,\n\n        address toToken,\n\n        uint256 fromAmount,\n\n        uint256 toAmount,\n\n        uint256 expectedAmount,\n\n        address[] calldata callees,\n\n        bytes calldata exchangeData,\n\n        uint256[] calldata startIndexes,\n\n        uint256[] calldata values,\n\n        address payable beneficiary,\n\n        string calldata referrer,\n\n        bool useReduxToken\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256 receivedAmount)\n\n    {\n\n        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\n\n        receivedAmount = performSimpleSwap(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            expectedAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            beneficiary,\n\n            referrer,\n\n            useReduxToken\n\n        );\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function multiSwap(\n\n        Utils.SellData memory data\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256)\n\n    {\n\n        uint initialGas = gasleft();\n\n\n        address fromToken = data.fromToken;\n\n        uint256 fromAmount = data.fromAmount;\n\n        uint256 toAmount = data.toAmount;\n\n        uint256 expectedAmount = data.expectedAmount;\n\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n\n        string memory referrer = data.referrer;\n\n        Utils.Path[] memory path = data.path;\n\n        address toToken = path[path.length - 1].to;\n\n        bool useReduxToken = data.useReduxToken;\n\n\n        //Referral can never be empty\n\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n\n        //if fromToken is not ETH then transfer tokens from user to this contract\n\n        if (fromToken != Utils.ethAddress()) {\n\n            _tokenTransferProxy.transferFrom(\n\n                fromToken,\n\n                msg.sender,\n\n                address(this),\n\n                fromAmount\n\n            );\n\n        }\n\n\n        performSwap(\n\n            fromToken,\n\n            fromAmount,\n\n            path\n\n        );\n\n\n        uint256 receivedAmount = Utils.tokenBalance(\n\n            toToken,\n\n            address(this)\n\n        );\n\n\n        require(\n\n            receivedAmount >= toAmount,\n\n            \"Received amount of tokens are less then expected\"\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            toToken,\n\n            expectedAmount,\n\n            receivedAmount,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        if (useReduxToken) {\n\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n\n        }\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","after":"function multiSwap(\n\n        Utils.SellData calldata data\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256)\n\n    {\n\n        uint initialGas = gasleft();\n\n\n        address fromToken = data.fromToken;\n\n        uint256 fromAmount = data.fromAmount;\n\n        uint256 toAmount = data.toAmount;\n\n        uint256 expectedAmount = data.expectedAmount;\n\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n\n        string memory referrer = data.referrer;\n\n        Utils.Path[] memory path = data.path;\n\n        address toToken = path[path.length - 1].to;\n\n        bool useReduxToken = data.useReduxToken;\n\n\n        //Referral can never be empty\n\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n\n        //if fromToken is not ETH then transfer tokens from user to this contract\n\n        if (fromToken != Utils.ethAddress()) {\n\n            _tokenTransferProxy.transferFrom(\n\n                fromToken,\n\n                msg.sender,\n\n                address(this),\n\n                fromAmount\n\n            );\n\n        }\n\n\n        performSwap(\n\n            fromToken,\n\n            fromAmount,\n\n            path\n\n        );\n\n\n        uint256 receivedAmount = Utils.tokenBalance(\n\n            toToken,\n\n            address(this)\n\n        );\n\n\n        require(\n\n            receivedAmount >= toAmount,\n\n            \"Received amount of tokens are less then expected\"\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            toToken,\n\n            expectedAmount,\n\n            receivedAmount,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        if (useReduxToken) {\n\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n\n        }\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function megaSwap(\n\n        Utils.MegaSwapSellData memory data\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256)\n\n    {\n\n        uint initialGas = gasleft();\n\n\n        address fromToken = data.fromToken;\n\n        uint256 fromAmount = data.fromAmount;\n\n        uint256 toAmount = data.toAmount;\n\n        uint256 expectedAmount = data.expectedAmount;\n\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n\n        string memory referrer = data.referrer;\n\n        Utils.MegaSwapPath[] memory path = data.path;\n\n        address toToken = path[0].path[path[0].path.length - 1].to;\n\n        bool useReduxToken = data.useReduxToken;\n\n\n        //Referral can never be empty\n\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n\n        //if fromToken is not ETH then transfer tokens from user to this contract\n\n        if (fromToken != Utils.ethAddress()) {\n\n            _tokenTransferProxy.transferFrom(\n\n                fromToken,\n\n                msg.sender,\n\n                address(this),\n\n                fromAmount\n\n            );\n\n        }\n\n\n        for (uint8 i = 0; i < uint8(path.length); i++) {\n\n            uint256 _fromAmount = fromAmount.mul(path[i].fromAmountPercent).div(10000);\n\n            if (i == path.length - 1) {\n\n                _fromAmount = Utils.tokenBalance(address(fromToken), address(this));\n\n            }\n\n            performSwap(\n\n                fromToken,\n\n                _fromAmount,\n\n                path[i].path\n\n            );\n\n        }\n\n\n        uint256 receivedAmount = Utils.tokenBalance(\n\n            toToken,\n\n            address(this)\n\n        );\n\n\n        require(\n\n            receivedAmount >= toAmount,\n\n            \"Received amount of tokens are less then expected\"\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            toToken,\n\n            expectedAmount,\n\n            receivedAmount,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        if (useReduxToken) {\n\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n\n        }\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","after":"function megaSwap(\n\n        Utils.MegaSwapSellData calldata data\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256)\n\n    {\n\n        uint initialGas = gasleft();\n\n\n        address fromToken = data.fromToken;\n\n        uint256 fromAmount = data.fromAmount;\n\n        uint256 toAmount = data.toAmount;\n\n        uint256 expectedAmount = data.expectedAmount;\n\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n\n        string memory referrer = data.referrer;\n\n        Utils.MegaSwapPath[] memory path = data.path;\n\n        address toToken = path[0].path[path[0].path.length - 1].to;\n\n        bool useReduxToken = data.useReduxToken;\n\n\n        //Referral can never be empty\n\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n\n        //if fromToken is not ETH then transfer tokens from user to this contract\n\n        if (fromToken != Utils.ethAddress()) {\n\n            _tokenTransferProxy.transferFrom(\n\n                fromToken,\n\n                msg.sender,\n\n                address(this),\n\n                fromAmount\n\n            );\n\n        }\n\n\n        for (uint8 i = 0; i < uint8(path.length); i++) {\n\n            uint256 _fromAmount = fromAmount.mul(path[i].fromAmountPercent).div(10000);\n\n            if (i == path.length - 1) {\n\n                _fromAmount = Utils.tokenBalance(address(fromToken), address(this));\n\n            }\n\n            performSwap(\n\n                fromToken,\n\n                _fromAmount,\n\n                path[i].path\n\n            );\n\n        }\n\n\n        uint256 receivedAmount = Utils.tokenBalance(\n\n            toToken,\n\n            address(this)\n\n        );\n\n\n        require(\n\n            receivedAmount >= toAmount,\n\n            \"Received amount of tokens are less then expected\"\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            toToken,\n\n            expectedAmount,\n\n            receivedAmount,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        if (useReduxToken) {\n\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\n\n        }\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            expectedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function buy(\n\n        Utils.BuyData memory data\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256)\n\n    {\n\n\n        address fromToken = data.fromToken;\n\n        uint256 fromAmount = data.fromAmount;\n\n        uint256 toAmount = data.toAmount;\n\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n\n        string memory referrer = data.referrer;\n\n        Utils.BuyRoute[] memory route = data.route;\n\n        address toToken = data.toToken;\n\n        bool useReduxToken = data.useReduxToken;\n\n\n        //Referral id can never be empty\n\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n\n        uint256 receivedAmount = performBuy(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            route,\n\n            useReduxToken\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            toToken,\n\n            toAmount,\n\n            receivedAmount,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            fromToken,\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(fromToken, msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","after":"function buy(\n\n        Utils.BuyData calldata data\n\n    )\n\n    public\n\n    payable\n\n    returns (uint256)\n\n    {\n\n\n        address fromToken = data.fromToken;\n\n        uint256 fromAmount = data.fromAmount;\n\n        uint256 toAmount = data.toAmount;\n\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\n\n        string memory referrer = data.referrer;\n\n        Utils.BuyRoute[] memory route = data.route;\n\n        address toToken = data.toToken;\n\n        bool useReduxToken = data.useReduxToken;\n\n\n        //Referral id can never be empty\n\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n\n        uint256 receivedAmount = performBuy(\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            toAmount,\n\n            route,\n\n            useReduxToken\n\n        );\n\n\n        takeFeeAndTransferTokens(\n\n            toToken,\n\n            toAmount,\n\n            receivedAmount,\n\n            beneficiary,\n\n            referrer\n\n        );\n\n\n        uint256 remainingAmount = Utils.tokenBalance(\n\n            fromToken,\n\n            address(this)\n\n        );\n\n\n        if (remainingAmount > 0) {\n\n            Utils.transferTokens(fromToken, msg.sender, remainingAmount);\n\n        }\n\n\n        emit Bought(\n\n            msg.sender,\n\n            beneficiary,\n\n            fromToken,\n\n            toToken,\n\n            fromAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n\n        return receivedAmount;\n\n    }","contract":"AugustusSwapper","time":0}]}
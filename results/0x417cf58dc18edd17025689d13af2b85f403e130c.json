{"time":181,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n\n            !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n\n            (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":4190,"column":16},"end":{"line":4192,"column":42}},"contract":"NFToken","time":0},{"type":"external-function ","before":"function changeArt(\n\n        uint256 tokenId,\n\n        string memory newRoomOwnerName,\n\n        uint256 newTimeStamp\n\n    ) public {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n        require(\n\n            validateFutureTimestamp(newTimeStamp) == true,\n\n            \"Not a valid time\"\n\n        );\n\n        require(validateName(newRoomOwnerName) == true, \"Not a valid new name\");\n\n        require(\n\n            sha256(bytes(newRoomOwnerName)) !=\n\n            sha256(bytes(tokenTitles[tokenId])),\n\n            \"New name is same as the current one\"\n\n        );\n\n        require(\n\n            isNameReserved(newRoomOwnerName) == false,\n\n            \"Name already taken\"\n\n        );\n\n        require(bytes(tokenTitles[tokenId]).length == 0,\n\n            \"This Crypterior already has a name\"\n\n        );\n\n\n        toggleReserveName(newRoomOwnerName, true);\n\n        tokenTitles[tokenId] = newRoomOwnerName;\n\n        tokenTimes[tokenId] = newTimeStamp;\n\n\n        emit ArtChange(tokenId, newRoomOwnerName, newTimeStamp);\n\n    }","after":"function changeArt(\n\n        uint256 tokenId,\n\n        string calldata newRoomOwnerName,\n\n        uint256 newTimeStamp\n\n    ) public {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n        require(\n\n            validateFutureTimestamp(newTimeStamp) == true,\n\n            \"Not a valid time\"\n\n        );\n\n        require(validateName(newRoomOwnerName) == true, \"Not a valid new name\");\n\n        require(\n\n            sha256(bytes(newRoomOwnerName)) !=\n\n            sha256(bytes(tokenTitles[tokenId])),\n\n            \"New name is same as the current one\"\n\n        );\n\n        require(\n\n            isNameReserved(newRoomOwnerName) == false,\n\n            \"Name already taken\"\n\n        );\n\n        require(bytes(tokenTitles[tokenId]).length == 0,\n\n            \"This Crypterior already has a name\"\n\n        );\n\n\n        toggleReserveName(newRoomOwnerName, true);\n\n        tokenTitles[tokenId] = newRoomOwnerName;\n\n        tokenTimes[tokenId] = newTimeStamp;\n\n\n        emit ArtChange(tokenId, newRoomOwnerName, newTimeStamp);\n\n    }","contract":"NFToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"NFToken","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"NFToken","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"NFToken","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"NFToken","time":1}]}
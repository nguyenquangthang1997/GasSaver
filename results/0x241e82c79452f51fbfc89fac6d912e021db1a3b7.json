{"time":652,"results":[{"type":"external-function ","before":"function createMarket(\n\n        Store.State storage state,\n\n        Types.Market memory market\n\n    )\n\n    public\n\n    {\n\n        Requires.requireMarketAssetsValid(state, market);\n\n        Requires.requireMarketNotExist(state, market);\n\n        Requires.requireDecimalLessOrEquanThanOne(market.auctionRatioStart);\n\n        Requires.requireDecimalLessOrEquanThanOne(market.auctionRatioPerBlock);\n\n        Requires.requireDecimalGreaterThanOne(market.liquidateRate);\n\n        Requires.requireDecimalGreaterThanOne(market.withdrawRate);\n\n        require(market.withdrawRate > market.liquidateRate, \"WITHDARW_RATE_LESS_OR_EQUAL_THAN_LIQUIDATE_RATE\");\n\n\n        state.markets[state.marketsCount++] = market;\n\n        Events.logCreateMarket(market);\n\n    }","after":"function createMarket(\n\n        Store.State storage state,\n\n        Types.Market calldata market\n\n    )\n\n    public\n\n    {\n\n        Requires.requireMarketAssetsValid(state, market);\n\n        Requires.requireMarketNotExist(state, market);\n\n        Requires.requireDecimalLessOrEquanThanOne(market.auctionRatioStart);\n\n        Requires.requireDecimalLessOrEquanThanOne(market.auctionRatioPerBlock);\n\n        Requires.requireDecimalGreaterThanOne(market.liquidateRate);\n\n        Requires.requireDecimalGreaterThanOne(market.withdrawRate);\n\n        require(market.withdrawRate > market.liquidateRate, \"WITHDARW_RATE_LESS_OR_EQUAL_THAN_LIQUIDATE_RATE\");\n\n\n        state.markets[state.marketsCount++] = market;\n\n        Events.logCreateMarket(market);\n\n    }","contract":"OperationsComponent","time":0},{"type":"external-function ","before":"\n    }\n\n}\n\n\nlibrary BatchActions {\n\n    using SafeMath for uint256;\n\n    /**\n\n     * All allowed actions types\n\n     */\n\n    enum ActionType {\n\n        Deposit, // Move asset from your wallet to tradeable balance\n\n        Withdraw, // Move asset from your tradeable balance to wallet\n\n        Transfer, // Move asset between tradeable balance and margin account\n\n        Borrow, // Borrow asset from pool\n\n        Repay, // Repay asset to pool\n\n        Supply, // Move asset from tradeable balance to pool to earn interest\n\n        Unsupply   // Move asset from pool back to tradeable balance\n\n    }\n\n\n\n    /**\n\n     * Uniform parameter for an action\n\n     */\n\n    struct Action {\n\n        ActionType actionType;  // The action type\n\n        bytes encodedParams;    // Encoded params, it's different for each action\n\n    }\n\n\n\n    /**\n\n     * Batch actions entrance\n\n     * @param actions List of actions\n\n     */\n\n    function batch(\n\n        Store.State storage state,\n\n        Action[] memory actions,\n\n        uint256 msgValue\n\n    )\n\n    public\n\n    {\n\n        uint256 totalDepositedEtherAmount = 0;\n\n\n        for (uint256 i = 0; i < actions.length; i++) {\n\n            Action memory action = actions[i];\n\n            ActionType actionType = action.actionType;\n\n\n            if (actionType == A","after":"\n    }\n\n}\n\n\nlibrary BatchActions {\n\n    using SafeMath for uint256;\n\n    /**\n\n     * All allowed actions types\n\n     */\n\n    enum ActionType {\n\n        Deposit, // Move asset from your wallet to tradeable balance\n\n        Withdraw, // Move asset from your tradeable balance to wallet\n\n        Transfer, // Move asset between tradeable balance and margin account\n\n        Borrow, // Borrow asset from pool\n\n        Repay, // Repay asset to pool\n\n        Supply, // Move asset from tradeable balance to pool to earn interest\n\n        Unsupply   // Move asset from pool back to tradeable balance\n\n    }\n\n\n\n    /**\n\n     * Uniform parameter for an action\n\n     */\n\n    struct Action {\n\n        ActionType actionType;  // The action type\n\n        bytes encodedParams;    // Encoded params, it's different for each action\n\n    }\n\n\n\n    /**\n\n     * Batch actions entrance\n\n     * @param actions List of actions\n\n     */\n\n    function batch(\n\n        Store.State storage state,\n\n        Action[] memory actions,\n\n        uint256 msgValue\n\n    )\n\n    public\n\n    {\n\n        uint256 totalDepositedEtherAmount = 0;\n\n\n        for (uint256 i = 0; i < actions.length; i++) {\n\n            Action memory action = actions[i];\n\n            ActionType actionType = action.actionType;\n\n\n            if (actionType == A","contract":"BatchActions","time":0},{"type":"external-function ","before":"function batch(\n\n        BatchActions.Action[] memory actions\n\n    )\n\n    public\n\n    payable\n\n    {\n\n        BatchActions.batch(state, actions, msg.value);\n\n    }","after":"function batch(\n\n        BatchActions.Action[] calldata actions\n\n    )\n\n    public\n\n    payable\n\n    {\n\n        BatchActions.batch(state, actions, msg.value);\n\n    }","contract":"Hydro","time":0},{"type":"external-function ","before":"function matchOrders(\n\n        Types.MatchParams memory params\n\n    )\n\n    public\n\n    {\n\n        Exchange.matchOrders(state, params);\n\n    }","after":"function matchOrders(\n\n        Types.MatchParams calldata params\n\n    )\n\n    public\n\n    {\n\n        Exchange.matchOrders(state, params);\n\n    }","contract":"Hydro","time":0},{"type":"external-function ","before":"sender == _owner;\n\n    }\n\n\n\n    /** @dev Allows the current owner to relinquish control of the contract.\n\n     * @notice Renouncing to ownership will leave the cont","after":"sender == _owner;\n\n    }\n\n\n\n    /** @dev Allows the current owner to relinquish control of the contract.\n\n     * @notice Renouncing to ownership will leave the cont","contract":"Hydro","time":0},{"type":"immutable-restrict-modification ","before":" newConfig\n\n       ","after":" newConfig\n\n       ","contract":"LendingPoolToken","time":0},{"type":"immutable-restrict-modification ","before":"   }\n\n\n    function u","after":"   }\n\n\n    function u","contract":"LendingPoolToken","time":0},{"type":"immutable-restrict-modification ","before":"uctionInitiatorRewardR","after":"uctionInitiatorRewardR","contract":"LendingPoolToken","time":0},{"type":"struct-data-arrangement ","before":"\nePath memory path\nuint256 amount\n\n  \nstate);\n\n        bala\n}\n\n\nlibrary Types {\n\ntionStatus {\n\n        InP\n       Finished\n\n    }\n\n\n\n  \neralAccountStatus","after":"state);\n\n        bala\n}\n\n\nlibrary Types {\n\ntionStatus {\n\n        InP\n       Finished\n\n    }\n\n\n\n  \nePath memory path\nuint256 amount\n\n  \neralAccountStatus\n","contract":"Types","time":1},{"type":"struct-data-arrangement ","before":"\nnum Order\n       EXPIRED,\nANCELLED,\n\n        FILLABLE,\n\n\nLY_FILLED\n\n  \n*\n\n     * Signature struct contains ","after":"ANCELLED,\n\n        FILLABLE,\n\n\n*\n\n     * Signature struct contains \nLY_FILLED\n\n  \nnum Order\n       EXPIRED,\n","contract":"Types","time":0},{"type":"struct-data-arrangement ","before":"\n�══�\n��══╤═══\n═══════�\n═════\n��════�\n��═════\n��\n\n         * �\n          │ length(by","after":"��══╤═══\n��════�\n��═════\n��\n\n         * �\n          │ length(by\n�══�\n═══════�\n═════\n","contract":"Types","time":1},{"type":"struct-data-arrangement ","before":"\n ║\n\n         *\n��────�\n─────�\n��───────\n�───────\n�─────────\n�────\n�────\n�────","after":"�───────\n�─────────\n�────\n�────\n ║\n\n         *\n─────�\n��───────\n��────�\n�────\n","contract":"Types","time":1}]}
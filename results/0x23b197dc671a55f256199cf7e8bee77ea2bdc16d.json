{"time":102,"results":[{"type":"external-function ","before":"function flashLoan(address _receiver, uint256 _amount, bytes memory _data) public nonReentrant discountCHI {\n\n        require(loanEnabled == true, \"!loanEnabled\");\n\n        require(_amount > 0, \"amount too small!\");\n\n        uint256 beforeBalance = token.balanceOf(address(this));\n\n        require(beforeBalance > _amount, \"balance not enough!\");\n\n\n        //loanFee\n\n        uint256 _fee = _amount.mul(loanFee).div(loanFeeMax);\n\n\n        require(_fee > 0, \"fee too small\");\n\n\n        //transfer token to _receiver\n\n        token.safeTransfer(_receiver, _amount);\n\n\n        //execute user's logic\n\n        IFlashLoanReceiver(_receiver).mushroomsFlashloan(address(token), _amount, _fee, _data);\n\n\n        uint256 afterBalance = token.balanceOf(address(this));\n\n\n        require(afterBalance == beforeBalance.add(_fee), \"payback amount incorrect!\");\n\n\n        emit FlashLoan(address(token), _receiver, _amount, _fee);\n\n    }","after":"function flashLoan(address _receiver, uint256 _amount, bytes calldata _data) public nonReentrant discountCHI {\n\n        require(loanEnabled == true, \"!loanEnabled\");\n\n        require(_amount > 0, \"amount too small!\");\n\n        uint256 beforeBalance = token.balanceOf(address(this));\n\n        require(beforeBalance > _amount, \"balance not enough!\");\n\n\n        //loanFee\n\n        uint256 _fee = _amount.mul(loanFee).div(loanFeeMax);\n\n\n        require(_fee > 0, \"fee too small\");\n\n\n        //transfer token to _receiver\n\n        token.safeTransfer(_receiver, _amount);\n\n\n        //execute user's logic\n\n        IFlashLoanReceiver(_receiver).mushroomsFlashloan(address(token), _amount, _fee, _data);\n\n\n        uint256 afterBalance = token.balanceOf(address(this));\n\n\n        require(afterBalance == beforeBalance.add(_fee), \"payback amount incorrect!\");\n\n\n        emit FlashLoan(address(token), _receiver, _amount, _fee);\n\n    }","contract":"MMVault","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public loanFeeMax = 10000;","after":"uint256 public constant loanFeeMax = 10000;","contract":"MMVault","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"MMVault","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"MMVault","time":0}]}
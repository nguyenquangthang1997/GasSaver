{"time":241,"results":[{"type":"constant-restrict-modification  ","before":"address private immutable _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;","after":"address private immutable constant _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;","contract":"Flasher","time":1},{"type":"constant-restrict-modification  ","before":"address private immutable _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;","after":"address private immutable constant _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;","contract":"Flasher","time":1},{"type":"struct-data-arrangement ","before":"\naddress collateralAsset\naddress borrowAsset\nuint64 collateralID\nuint64 borrowID","after":"address collateralAsset\naddress borrowAsset\nuint64 collateralID\nuint64 borrowID\n","contract":"IVaultExt","time":0},{"type":"loop-duplication","before":"\nstart line 1035 column 8, end line 1060 column 8\nfor (uint256 i = 0; i < formattedUserAddrs.length; i += 2) {\n\n            // Compute Amount of Minimum Collateral Required including factors\n\n            neededCollateral = IVault(_vault).getNeededCollateralFor(usrsBals[i + 1], true);\n\n\n            // Check if User is liquidatable\n\n            if (usrsBals[i] < neededCollateral) {\n\n                // If true, add User debt balance to the total balance to be liquidated\n\n                debtBalanceTotal = debtBalanceTotal.add(usrsBals[i + 1]);\n\n            } else {\n\n                // Replace User that is not liquidatable by Zero Address\n\n                formattedUserAddrs[i] = address(0);\n\n                formattedUserAddrs[i + 1] = address(0);\n\n            }\n\n        }\nstart line 1135 column 8, end line 1145 column 8\nfor (uint256 i = 0; i < formattedUserAddrs.length; i += 2) {\n\n            if (formattedUserAddrs[i] != address(0)) {\n\n                f1155.burn(formattedUserAddrs[i], vAssets.borrowID, usrsBals[i + 1]);\n\n                emit Liquidate(formattedUserAddrs[i], msg.sender, vAssets.borrowAsset, usrsBals[i + 1]);\n\n            }\n\n        }","after":"// merge loop\n\nstart line 1035 column 8, end line 1060 column 8\nfor (uint256 i = 0; i < formattedUserAddrs.length; i += 2) {\n\n            // Compute Amount of Minimum Collateral Required including factors\n\n            neededCollateral = IVault(_vault).getNeededCollateralFor(usrsBals[i + 1], true);\n\n\n            // Check if User is liquidatable\n\n            if (usrsBals[i] < neededCollateral) {\n\n                // If true, add User debt balance to the total balance to be liquidated\n\n                debtBalanceTotal = debtBalanceTotal.add(usrsBals[i + 1]);\n\n            } else {\n\n                // Replace User that is not liquidatable by Zero Address\n\n                formattedUserAddrs[i] = address(0);\n\n                formattedUserAddrs[i + 1] = address(0);\n\n            }\n\n        }\nstart line 1135 column 8, end line 1145 column 8\nfor (uint256 i = 0; i < formattedUserAddrs.length; i += 2) {\n\n            if (formattedUserAddrs[i] != address(0)) {\n\n                f1155.burn(formattedUserAddrs[i], vAssets.borrowID, usrsBals[i + 1]);\n\n                emit Liquidate(formattedUserAddrs[i], msg.sender, vAssets.borrowAsset, usrsBals[i + 1]);\n\n            }\n\n        }","contract":"Fliquidator","time":0}]}
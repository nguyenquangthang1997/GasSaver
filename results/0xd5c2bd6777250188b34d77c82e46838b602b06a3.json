{"time":70,"results":[{"type":"external-function ","before":"mal proxy contract and initializes it with the given split terms.\n   * If the contract had already been created, its address is returned.\n   * This must be called on the original implementation and not a proxy created previously.\n   */\n    function createSplit(Share[] memory shares) public returns (PercentSplitETH splitInstance) {\n        bytes32 salt = keccak256(abi.encode(shares));\n        address clone = Clones.predictDeterministicAddress(address(this), salt);\n        splitInsta","after":"mal proxy contract and initializes it with the given split terms.\n   * If the contract had already been created, its address is returned.\n   * This must be called on the original implementation and not a proxy created previously.\n   */\n    function createSplit(Share[] memory shares) public returns (PercentSplitETH splitInstance) {\n        bytes32 salt = keccak256(abi.encode(shares));\n        address clone = Clones.predictDeterministicAddress(address(this), salt);\n        splitInsta","contract":"PercentSplitETH","time":0},{"type":"external-function ","before":" address for the proxy contract which would represent the given split terms.\n   * @dev The contract may or may not already be deployed at the address returned.\n   * Ensure that it is deployed before sending funds to this","after":" address for the proxy contract which would represent the given split terms.\n   * @dev The contract may or may not already be deployed at the address returned.\n   * Ensure that it is deployed before sending funds to this","contract":"PercentSplitETH","time":0},{"type":"external-function ","before":"dress(this), salt);\n    }\n\n    /**\n     * @notice Called once to configure the contract after the initial deployment.\n   * @dev This will be called by `createSplit` after deploying the proxy so it should never be called directly.\n   */\n    function initialize(Share[] memory shares) public initializer {\n        require(shares.length >= 2, \"Split: Too few recipients\");\n        require(shares.length <= 5, \"Split: Too many recipients\");\n        uint256 total;\n        for (uint256 i = 0; i < shares.length; i++) {\n            total += shares[i].pe","after":"dress(this), salt);\n    }\n\n    /**\n     * @notice Called once to configure the contract after the initial deployment.\n   * @dev This will be called by `createSplit` after deploying the proxy so it should never be called directly.\n   */\n    function initialize(Share[] memory shares) public initializer {\n        require(shares.length >= 2, \"Split: Too few recipients\");\n        require(shares.length <= 5, \"Split: Too many recipients\");\n        uint256 total;\n        for (uint256 i = 0; i < shares.length; i++) {\n            total += shares[i].pe","contract":"PercentSplitETH","time":0},{"type":"external-function ","before":"ns before proceeding.\n   *\n   * This contract is built to split ETH payments. The ability to attempt to make other calls is here\n   * just in case other assets were also sent so that they don't get locked forever in the contract.\n   */\n    function proxyCall(address payable target, by","after":"ns before proceeding.\n   *\n   * This contract is built to split ETH payments. The ability to attempt to make other calls is here\n   * just in case other assets were also sent so that they don't get locked forever in the contract.\n   */\n    function proxyCall(address payable target, by","contract":"PercentSplitETH","time":0}]}
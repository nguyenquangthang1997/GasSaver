{"time":188,"results":[{"type":"external-function ","before":"function Log(\n\n        address _contract,\n\n        address _caller,\n\n        string memory _logName,\n\n        bytes memory _data\n\n    ) public {\n\n        emit LogEvent(_contract, _caller, _logName, _data);\n\n    }","after":"function Log(\n\n        address _contract,\n\n        address _caller,\n\n        string calldata _logName,\n\n        bytes calldata _data\n\n    ) public {\n\n        emit LogEvent(_contract, _caller, _logName, _data);\n\n    }","contract":"DefisaverLogger","time":0},{"type":"struct-data-arrangement ","before":"\naddress contractAddr\nuint256 waitPeriod\nuint256 changeStartTime\nbool inContractChange\nbool inWaitPeriodChange\nbool exists","after":"uint256 waitPeriod\nuint256 changeStartTime\naddress contractAddr\nbool inContractChange\nbool inWaitPeriodChange\nbool exists\n","contract":"DFSRegistry","time":0},{"type":"state-data-arrangement ","before":"\naddress public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;\nDFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\nDefisaverLogger public constant logger = DefisaverLogger(\n\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n\n    );\nstring public constant ERR_SUB_INDEX_VALUE = \"Wrong sub index value\";\nstring public constant ERR_RETURN_INDEX_VALUE = \"Wrong return index value\";\nuint8 public constant SUB_MIN_INDEX_VALUE = 128;\nuint8 public constant SUB_MAX_INDEX_VALUE = 255;\nuint8 public constant RETURN_MIN_INDEX_VALUE = 1;\nuint8 public constant RETURN_MAX_INDEX_VALUE = 127;\nuint8 public constant NO_PARAM_MAPPING = 0;","after":"DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\nDefisaverLogger public constant logger = DefisaverLogger(\n\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n\n    );\nstring public constant ERR_SUB_INDEX_VALUE = \"Wrong sub index value\";\nstring public constant ERR_RETURN_INDEX_VALUE = \"Wrong return index value\";\naddress public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;\nuint8 public constant SUB_MIN_INDEX_VALUE = 128;\nuint8 public constant SUB_MAX_INDEX_VALUE = 255;\nuint8 public constant RETURN_MIN_INDEX_VALUE = 1;\nuint8 public constant RETURN_MAX_INDEX_VALUE = 127;\nuint8 public constant NO_PARAM_MAPPING = 0;\n","contract":"ActionBase","time":1},{"type":"struct-data-arrangement ","before":"\nuint templateId\naddress proxy\nbytes[][] subData\nbytes[][] triggerData\nbool active\nuint posInUserArr","after":"uint templateId\nbytes[][] subData\nbytes[][] triggerData\nuint posInUserArr\naddress proxy\nbool active\n","contract":"StrategyData","time":0},{"type":"external-function ","before":"function createStrategy(\n\n        uint _templateId,\n\n        bool _active,\n\n        bytes[][] memory _subData,\n\n        bytes[][] memory _triggerData\n\n    ) public returns (uint) {\n\n        strategies.push(\n\n            Strategy({\n\n        templateId : _templateId,\n\n        proxy : msg.sender,\n\n        active : _active,\n\n        subData : _subData,\n\n        triggerData : _triggerData,\n\n        posInUserArr : (usersPos[msg.sender].length - 1)\n\n        })\n\n        );\n\n\n        usersPos[msg.sender].push(strategies.length - 1);\n\n\n        updateCounter++;\n\n\n        logger.Log(address(this), msg.sender, \"CreateStrategy\", abi.encode(strategies.length - 1));\n\n\n        return strategies.length - 1;\n\n    }","after":"function createStrategy(\n\n        uint _templateId,\n\n        bool _active,\n\n        bytes[][] calldata _subData,\n\n        bytes[][] calldata _triggerData\n\n    ) public returns (uint) {\n\n        strategies.push(\n\n            Strategy({\n\n        templateId : _templateId,\n\n        proxy : msg.sender,\n\n        active : _active,\n\n        subData : _subData,\n\n        triggerData : _triggerData,\n\n        posInUserArr : (usersPos[msg.sender].length - 1)\n\n        })\n\n        );\n\n\n        usersPos[msg.sender].push(strategies.length - 1);\n\n\n        updateCounter++;\n\n\n        logger.Log(address(this), msg.sender, \"CreateStrategy\", abi.encode(strategies.length - 1));\n\n\n        return strategies.length - 1;\n\n    }","contract":"Subscriptions","time":0},{"type":"external-function ","before":"function createTemplate(\n\n        string memory _name,\n\n        bytes32[] memory _triggerIds,\n\n        bytes32[] memory _actionIds,\n\n        uint8[][] memory _paramMapping\n\n    ) public returns (uint) {\n\n\n        templates.push(\n\n            Template({\n\n        name : _name,\n\n        triggerIds : _triggerIds,\n\n        actionIds : _actionIds,\n\n        paramMapping : _paramMapping\n\n        })\n\n        );\n\n\n        updateCounter++;\n\n\n        logger.Log(address(this), msg.sender, \"CreateTemplate\", abi.encode(templates.length - 1));\n\n\n        return templates.length - 1;\n\n    }","after":"function createTemplate(\n\n        string calldata _name,\n\n        bytes32[] calldata _triggerIds,\n\n        bytes32[] calldata _actionIds,\n\n        uint8[][] calldata _paramMapping\n\n    ) public returns (uint) {\n\n\n        templates.push(\n\n            Template({\n\n        name : _name,\n\n        triggerIds : _triggerIds,\n\n        actionIds : _actionIds,\n\n        paramMapping : _paramMapping\n\n        })\n\n        );\n\n\n        updateCounter++;\n\n\n        logger.Log(address(this), msg.sender, \"CreateTemplate\", abi.encode(templates.length - 1));\n\n\n        return templates.length - 1;\n\n    }","contract":"Subscriptions","time":0},{"type":"external-function ","before":"function updateStrategy(\n\n        uint _strategyId,\n\n        uint _templateId,\n\n        bool _active,\n\n        bytes[][] memory _subData,\n\n        bytes[][] memory _triggerData\n\n    ) public {\n\n        Strategy storage s = strategies[_strategyId];\n\n\n        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\n\n        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\n\n\n        s.templateId = _templateId;\n\n        s.active = _active;\n\n        s.subData = _subData;\n\n        s.triggerData = _triggerData;\n\n\n        updateCounter++;\n\n\n        logger.Log(address(this), msg.sender, \"UpdateStrategy\", abi.encode(_strategyId));\n\n    }","after":"function updateStrategy(\n\n        uint _strategyId,\n\n        uint _templateId,\n\n        bool _active,\n\n        bytes[][] calldata _subData,\n\n        bytes[][] calldata _triggerData\n\n    ) public {\n\n        Strategy storage s = strategies[_strategyId];\n\n\n        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\n\n        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\n\n\n        s.templateId = _templateId;\n\n        s.active = _active;\n\n        s.subData = _subData;\n\n        s.triggerData = _triggerData;\n\n\n        updateCounter++;\n\n\n        logger.Log(address(this), msg.sender, \"UpdateStrategy\", abi.encode(_strategyId));\n\n    }","contract":"Subscriptions","time":0},{"type":"external-function ","before":"function executeTask(Task memory _currTask) public payable {\n\n        _executeActions(_currTask);\n\n    }","after":"function executeTask(Task calldata _currTask) public payable {\n\n        _executeActions(_currTask);\n\n    }","contract":"TaskExecutor","time":0},{"type":"external-function ","before":"function executeStrategyTask(uint256 _strategyId, bytes[][] memory _actionCallData)\n\n    public\n\n    payable\n\n    {\n\n        address subAddr = registry.getAddr(SUBSCRIPTION_ID);\n\n        Strategy memory strategy = Subscriptions(subAddr).getStrategy(_strategyId);\n\n        Template memory template = Subscriptions(subAddr).getTemplate(strategy.templateId);\n\n\n        Task memory currTask =\n\n        Task({\n\n        name : template.name,\n\n        callData : _actionCallData,\n\n        subData : strategy.subData,\n\n        actionIds : template.actionIds,\n\n        paramMapping : template.paramMapping\n\n        });\n\n\n        _executeActions(currTask);\n\n    }","after":"function executeStrategyTask(uint256 _strategyId, bytes[][] calldata _actionCallData)\n\n    public\n\n    payable\n\n    {\n\n        address subAddr = registry.getAddr(SUBSCRIPTION_ID);\n\n        Strategy memory strategy = Subscriptions(subAddr).getStrategy(_strategyId);\n\n        Template memory template = Subscriptions(subAddr).getTemplate(strategy.templateId);\n\n\n        Task memory currTask =\n\n        Task({\n\n        name : template.name,\n\n        callData : _actionCallData,\n\n        subData : strategy.subData,\n\n        actionIds : template.actionIds,\n\n        paramMapping : template.paramMapping\n\n        });\n\n\n        _executeActions(currTask);\n\n    }","contract":"TaskExecutor","time":0},{"type":"external-function ","before":"function _executeActionsFromFL(Task memory _currTask, bytes32 _flAmount) public payable {\n\n        bytes32[] memory returnValues = new bytes32[](_currTask.actionIds.length);\n\n        returnValues[0] = _flAmount;\n        // set the flash loan action as first return value\n\n\n\n        // skips the first actions as it was the fl action\n\n        for (uint256 i = 1; i < _currTask.actionIds.length; ++i) {\n\n            returnValues[i] = _executeAction(_currTask, i, returnValues);\n\n        }\n\n    }","after":"function _executeActionsFromFL(Task calldata _currTask, bytes32 _flAmount) public payable {\n\n        bytes32[] memory returnValues = new bytes32[](_currTask.actionIds.length);\n\n        returnValues[0] = _flAmount;\n        // set the flash loan action as first return value\n\n\n\n        // skips the first actions as it was the fl action\n\n        for (uint256 i = 1; i < _currTask.actionIds.length; ++i) {\n\n            returnValues[i] = _executeAction(_currTask, i, returnValues);\n\n        }\n\n    }","contract":"TaskExecutor","time":0}]}
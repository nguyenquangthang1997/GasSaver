{"time":164,"results":[{"type":"external-function ","before":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) external virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"RocketFactoryMarket","time":0},{"type":"external-function ","before":"function proposeTrade(\n        Item[] memory _offers,\n        Item[] memory _requests,\n        address _offeree\n    ) external callerIsUser() {\n        Trade storage trade = trades[_offeree][msg.sender];\n\n        require(\n            trade.offerer == address(0x0),\n            \"There is already a trade offering for the specified recipient\"\n        );\n\n        for (uint256 i = 0; i < _offers.length; i++) {\n            require(\n                itemTypeToTokenAddress[_offers[i].itemType] != address(0x0),\n                \"The item type does not exist\"\n            );\n            IERC721(itemTypeToTokenAddress[_offers[i].itemType])\n            .safeTransferFrom(msg.sender, address(this), _offers[i].itemId);\n            trade.offering.push(Item(_offers[i].itemId, _offers[i].itemType));\n        }\n\n        for (uint256 i = 0; i < _requests.length; i++) {\n            require(\n                itemTypeToTokenAddress[_requests[i].itemType] != address(0x0),\n                \"The item type does not exist\"\n            );\n            require(\n                IERC721(itemTypeToTokenAddress[_requests[i].itemType]).ownerOf(\n                    _requests[i].itemId\n                ) == _offeree,\n                \"A requested item does not belong to the specified wallet\"\n            );\n            trade.requesting.push(\n                Item(_requests[i].itemId, _requests[i].itemType)\n            );\n        }\n\n        trade.offerer = msg.sender;\n        trade.offeree = _offeree;\n\n        emit TradeCreated(uint32(block.timestamp % 2 ** 32), trade);\n    }","after":"function proposeTrade(\n        Item[] calldata _offers,\n        Item[] calldata _requests,\n        address _offeree\n    ) external callerIsUser() {\n        Trade storage trade = trades[_offeree][msg.sender];\n\n        require(\n            trade.offerer == address(0x0),\n            \"There is already a trade offering for the specified recipient\"\n        );\n\n        for (uint256 i = 0; i < _offers.length; i++) {\n            require(\n                itemTypeToTokenAddress[_offers[i].itemType] != address(0x0),\n                \"The item type does not exist\"\n            );\n            IERC721(itemTypeToTokenAddress[_offers[i].itemType])\n            .safeTransferFrom(msg.sender, address(this), _offers[i].itemId);\n            trade.offering.push(Item(_offers[i].itemId, _offers[i].itemType));\n        }\n\n        for (uint256 i = 0; i < _requests.length; i++) {\n            require(\n                itemTypeToTokenAddress[_requests[i].itemType] != address(0x0),\n                \"The item type does not exist\"\n            );\n            require(\n                IERC721(itemTypeToTokenAddress[_requests[i].itemType]).ownerOf(\n                    _requests[i].itemId\n                ) == _offeree,\n                \"A requested item does not belong to the specified wallet\"\n            );\n            trade.requesting.push(\n                Item(_requests[i].itemId, _requests[i].itemType)\n            );\n        }\n\n        trade.offerer = msg.sender;\n        trade.offeree = _offeree;\n\n        emit TradeCreated(uint32(block.timestamp % 2 ** 32), trade);\n    }","contract":"RocketFactoryMarket","time":0}]}
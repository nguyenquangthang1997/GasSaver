{"time":80,"results":[{"type":"state-data-arrangement ","before":"\naddress public cubePool;\nstring public spotSymbol;\nbool public inverse;","after":"string public spotSymbol;\naddress public cubePool;\nbool public inverse;\n","contract":"CubeToken","time":0},{"type":"external-function ","before":"function initialize(\n        address _cubePool,\n        string memory _spotSymbol,\n        bool _inverse\n    ) external initializer {\n        // Example name: 3X Long BTC\n        // Example symbol: cubeBTC\n        string memory name = string(abi.encodePacked(\"3X \", _inverse ? \"Short \" : \"Long \", _spotSymbol));\n        string memory symbol = string(abi.encodePacked(_inverse ? \"inv\" : \"cube\", _spotSymbol));\n        __ERC20_init(name, symbol);\n\n        cubePool = _cubePool;\n        spotSymbol = _spotSymbol;\n        inverse = _inverse;\n    }","after":"function initialize(\n        address _cubePool,\n        string calldata _spotSymbol,\n        bool _inverse\n    ) external initializer {\n        // Example name: 3X Long BTC\n        // Example symbol: cubeBTC\n        string memory name = string(abi.encodePacked(\"3X \", _inverse ? \"Short \" : \"Long \", _spotSymbol));\n        string memory symbol = string(abi.encodePacked(_inverse ? \"inv\" : \"cube\", _spotSymbol));\n        __ERC20_init(name, symbol);\n\n        cubePool = _cubePool;\n        spotSymbol = _spotSymbol;\n        inverse = _inverse;\n    }","contract":"CubeToken","time":0}]}
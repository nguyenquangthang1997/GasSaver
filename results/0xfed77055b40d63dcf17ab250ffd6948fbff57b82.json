{"time":300,"results":[{"type":"state-data-arrangement ","before":"\nbytes32 internal constant ETH = \"ETH\";\nuint256 internal constant ONE_THOUSAND = 1e18 * 1000;\nuint256 internal constant ONE_HUNDRED = 1e18 * 100;\nuint256 internal constant SECONDS_IN_A_YEAR = 31536000;\naddress internal constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF;\nuint256 internal constant ACCOUNT_LOAN_LIMIT_CAP = 1000;\nbytes32 private constant sUSD = \"sUSD\";\nbytes32 public constant COLLATERAL = \"ETH\";\nuint256 public collateralizationRatio = SafeDecimalMath.unit() * 150;\nuint256 public interestRate = (5 * SafeDecimalMath.unit()) / 100;\nuint256 public interestPerSecond = interestRate.div(SECONDS_IN_A_YEAR);\nuint256 public issueFeeRate = (5 * SafeDecimalMath.unit()) / 1000;\nuint256 public issueLimit = SafeDecimalMath.unit() * 10000000;\nuint256 public minLoanCollateralSize = SafeDecimalMath.unit() * 1;\nuint256 public accountLoanLimit = 50;\nbool public loanLiquidationOpen = false;\nuint256 public liquidationDeadline;\nuint256 public liquidationRatio = (150 * SafeDecimalMath.unit()) / 100;\nuint256 public liquidationPenalty = SafeDecimalMath.unit() / 10;\nuint256 public totalIssuedSynths;\nuint256 public totalLoansCreated;\nuint256 public totalOpenLoanCount;\nmapping(address => SynthLoanStruct[]) public accountsSynthLoans;\nmapping(address => uint256) public accountOpenLoanCounter;\nbytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\nbytes32 private constant CONTRACT_SYNTHSUSD = \"SynthsUSD\";\nbytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\nbytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\nbytes32[24] private addressesToCache = [CONTRACT_SYSTEMSTATUS, CONTRACT_SYNTHSUSD, CONTRACT_EXRATES, CONTRACT_FEEPOOL];","after":"bytes32 internal constant ETH = \"ETH\";\nuint256 internal constant ONE_THOUSAND = 1e18 * 1000;\nuint256 internal constant ONE_HUNDRED = 1e18 * 100;\nuint256 internal constant SECONDS_IN_A_YEAR = 31536000;\nuint256 internal constant ACCOUNT_LOAN_LIMIT_CAP = 1000;\nbytes32 private constant sUSD = \"sUSD\";\nbytes32 public constant COLLATERAL = \"ETH\";\nuint256 public collateralizationRatio = SafeDecimalMath.unit() * 150;\nuint256 public interestRate = (5 * SafeDecimalMath.unit()) / 100;\nuint256 public interestPerSecond = interestRate.div(SECONDS_IN_A_YEAR);\nuint256 public issueFeeRate = (5 * SafeDecimalMath.unit()) / 1000;\nuint256 public issueLimit = SafeDecimalMath.unit() * 10000000;\nuint256 public minLoanCollateralSize = SafeDecimalMath.unit() * 1;\nuint256 public accountLoanLimit = 50;\nuint256 public liquidationDeadline;\nuint256 public liquidationRatio = (150 * SafeDecimalMath.unit()) / 100;\nuint256 public liquidationPenalty = SafeDecimalMath.unit() / 10;\nuint256 public totalIssuedSynths;\nuint256 public totalLoansCreated;\nuint256 public totalOpenLoanCount;\nmapping(address => SynthLoanStruct[]) public accountsSynthLoans;\nmapping(address => uint256) public accountOpenLoanCounter;\nbytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\nbytes32 private constant CONTRACT_SYNTHSUSD = \"SynthsUSD\";\nbytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\nbytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\nbytes32[24] private addressesToCache = [CONTRACT_SYSTEMSTATUS, CONTRACT_SYNTHSUSD, CONTRACT_EXRATES, CONTRACT_FEEPOOL];\naddress internal constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF;\nbool public loanLiquidationOpen = false;\n","contract":"EtherCollateralsUSD","time":0}]}
{"time":692,"results":[{"type":"external-function ","before":"kStableMath is StableMath {\n    function invariant(uint256 amp, uint256[] memory balances, bool roundUp) external pure returns (uint256) {\n        return _calculateInvarian","after":"kStableMath is StableMath {\n    function invariant(uint256 amp, uint256[] memory balances, bool roundUp) external pure returns (uint256) {\n        return _calculateInvarian","contract":"MockStableMath","time":0},{"type":"external-function ","before":" balances, roundUp);\n    }\n\n    function outGivenIn(\n        uint256 amp,\n        uint256[] memory balances,\n        uint256 tokenIndexIn,\n        uint256 tokenIndexOut,\n        uint256 tokenAmountIn\n    ) external pure returns (uint256) {\n        return _calcOutGivenIn(amp, balances, tokenIndexIn, toke","after":" balances, roundUp);\n    }\n\n    function outGivenIn(\n        uint256 amp,\n        uint256[] calldata balances,\n        uint256 tokenIndexIn,\n        uint256 tokenIndexOut,\n        uint256 tokenAmountIn\n    ) external pure returns (uint256) {\n        return _calcOutGivenIn(amp, balances, tokenIndexIn, toke","contract":"MockStableMath","time":0},{"type":"external-function ","before":"Out, tokenAmountIn);\n    }\n\n    function inGivenOut(\n        uint256 amp,\n        uint256[] memory balances,\n        uint256 tokenIndexIn,\n        uint256 tokenIndexOut,\n        uint256 tokenAmountOut\n    ) external pure returns (uint256) {\n        return _calcInGivenOut(amp, balances, tokenIndexIn, token","after":"Out, tokenAmountIn);\n    }\n\n    function inGivenOut(\n        uint256 amp,\n        uint256[] calldata balances,\n        uint256 tokenIndexIn,\n        uint256 tokenIndexOut,\n        uint256 tokenAmountOut\n    ) external pure returns (uint256) {\n        return _calcInGivenOut(amp, balances, tokenIndexIn, token","contract":"MockStableMath","time":0},{"type":"external-function ","before":"ut, tokenAmountOut);\n    }\n\n    function exactTokensInForBPTOut(\n        uint256 amp,\n        uint256[] memory balances,\n        uint256[] memory amountsIn,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcBptOutGivenExactTokensIn(amp, balances, amountsIn,","after":"ut, tokenAmountOut);\n    }\n\n    function exactTokensInForBPTOut(\n        uint256 amp,\n        uint256[] calldata balances,\n        uint256[] calldata amountsIn,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcBptOutGivenExactTokensIn(amp, balances, amountsIn,","contract":"MockStableMath","time":0},{"type":"external-function ","before":"talSupply, swapFee);\n    }\n\n    function tokenInForExactBPTOut(\n        uint256 amp,\n        uint256[] memory balances,\n        uint256 tokenIndex,\n        uint256 bptAmountOut,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcTokenInGivenExactBptOut(amp, balances, tokenIndex, bptAmountOut,","after":"talSupply, swapFee);\n    }\n\n    function tokenInForExactBPTOut(\n        uint256 amp,\n        uint256[] calldata balances,\n        uint256 tokenIndex,\n        uint256 bptAmountOut,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcTokenInGivenExactBptOut(amp, balances, tokenIndex, bptAmountOut,","contract":"MockStableMath","time":0},{"type":"external-function ","before":"talSupply, swapFee);\n    }\n\n    function exactBPTInForTokenOut(\n        uint256 amp,\n        uint256[] memory balances,\n        uint256 tokenIndex,\n        uint256 bptAmountIn,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcTokenOutGivenExactBptIn(amp, balances, tokenIndex, bptAmountIn,","after":"talSupply, swapFee);\n    }\n\n    function exactBPTInForTokenOut(\n        uint256 amp,\n        uint256[] calldata balances,\n        uint256 tokenIndex,\n        uint256 bptAmountIn,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcTokenOutGivenExactBptIn(amp, balances, tokenIndex, bptAmountIn,","contract":"MockStableMath","time":0},{"type":"external-function ","before":"talSupply, swapFee);\n    }\n\n    function exactBPTInForTokensOut(\n        uint256[] memory balances,\n        uint256 bptAmountIn,\n        uint256 bptTotalSupply\n    ) external pure returns (uint256[] memory) {\n        return _calcTokensOutGivenExactBptIn(balances, bpt","after":"talSupply, swapFee);\n    }\n\n    function exactBPTInForTokensOut(\n        uint256[] calldata balances,\n        uint256 bptAmountIn,\n        uint256 bptTotalSupply\n    ) external pure returns (uint256[] memory) {\n        return _calcTokensOutGivenExactBptIn(balances, bpt","contract":"MockStableMath","time":0},{"type":"external-function ","before":"In, bptTotalSupply);\n    }\n\n    function bptInForExactTokensOut(\n        uint256 amp,\n        uint256[] memory balances,\n        uint256[] memory amountsOut,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcBptInGivenExactTokensOut(amp, balances, amountsOut,","after":"In, bptTotalSupply);\n    }\n\n    function bptInForExactTokensOut(\n        uint256 amp,\n        uint256[] calldata balances,\n        uint256[] calldata amountsOut,\n        uint256 bptTotalSupply,\n        uint256 swapFee\n    ) external pure returns (uint256) {\n        return _calcBptInGivenExactTokensOut(amp, balances, amountsOut,","contract":"MockStableMath","time":0},{"type":"external-function ","before":"talSupply, swapFee);\n    }\n\n    function calculateDueTokenProtocolSwapFeeAmount(\n        uint256 amp,\n        uint256[] memory balances,\n        uint256 lastInvariant,\n        uint256 tokenIndex,\n        uint256 protocolSwapFeePercentage\n    ) external pure returns (uint256) {\n        return _calcDueTokenProtocolSwapFeeAmount(amp, balances, lastInvariant, tokenIndex, p","after":"talSupply, swapFee);\n    }\n\n    function calculateDueTokenProtocolSwapFeeAmount(\n        uint256 amp,\n        uint256[] calldata balances,\n        uint256 lastInvariant,\n        uint256 tokenIndex,\n        uint256 protocolSwapFeePercentage\n    ) external pure returns (uint256) {\n        return _calcDueTokenProtocolSwapFeeAmount(amp, balances, lastInvariant, tokenIndex, p","contract":"MockStableMath","time":0},{"type":"external-function ","before":"function onSwap(\n        SwapRequest memory swapRequest,\n        uint256[] memory balances,\n        uint256 indexIn,\n        uint256 indexOut\n    ) external view virtual override returns (uint256) {\n        _validateIndexes(indexIn, indexOut, _getTotalTokens());\n        uint256[] memory scalingFactors = _scalingFactors();\n\n        return\n        swapRequest.kind == IVault.SwapKind.GIVEN_IN\n        ? _swapGivenIn(swapRequest, balances, indexIn, indexOut, scalingFactors)\n        : _swapGivenOut(swapRequest, balances, indexIn, indexOut, scalingFactors);\n    }","after":"function onSwap(\n        SwapRequest calldata swapRequest,\n        uint256[] calldata balances,\n        uint256 indexIn,\n        uint256 indexOut\n    ) external view virtual override returns (uint256) {\n        _validateIndexes(indexIn, indexOut, _getTotalTokens());\n        uint256[] memory scalingFactors = _scalingFactors();\n\n        return\n        swapRequest.kind == IVault.SwapKind.GIVEN_IN\n        ? _swapGivenIn(swapRequest, balances, indexIn, indexOut, scalingFactors)\n        : _swapGivenOut(swapRequest, balances, indexIn, indexOut, scalingFactors);\n    }","contract":"StablePool","time":0},{"type":"external-function ","before":"function setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig)\n    public\n    virtual\n    authenticate\n    whenNotPaused\n    {\n        _setAssetManagerPoolConfig(token, poolConfig);\n    }","after":"function setAssetManagerPoolConfig(IERC20 token, bytes calldata poolConfig)\n    public\n    virtual\n    authenticate\n    whenNotPaused\n    {\n        _setAssetManagerPoolConfig(token, poolConfig);\n    }","contract":"StablePool","time":0},{"type":"external-function ","before":"function onJoinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) public virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\n        uint256[] memory scalingFactors = _scalingFactors();\n\n        if (totalSupply() == 0) {\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(\n                poolId,\n                sender,\n                recipient,\n                scalingFactors,\n                userData\n            );\n\n            // On initialization, we lock _MINIMUM_BPT by minting it for the zero address. This BPT acts as a minimum\n            // as it will never be burned, which reduces potential issues with rounding, and also prevents the Pool from\n            // ever being fully drained.\n            _require(bptAmountOut >= _MINIMUM_BPT, Errors.MINIMUM_BPT);\n            _mintPoolTokens(address(0), _MINIMUM_BPT);\n            _mintPoolTokens(recipient, bptAmountOut - _MINIMUM_BPT);\n\n            // amountsIn are amounts entering the Pool, so we round up.\n            _downscaleUpArray(amountsIn, scalingFactors);\n\n            return (amountsIn, new uint256[](_getTotalTokens()));\n        } else {\n            _upscaleArray(balances, scalingFactors);\n            (uint256 bptAmountOut, uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) = _onJoinPool(\n                poolId,\n                sender,\n                recipient,\n                balances,\n                lastChangeBlock,\n                protocolSwapFeePercentage,\n                scalingFactors,\n                userData\n            );\n\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\n\n            _mintPoolTokens(recipient, bptAmountOut);\n\n            // amountsIn are amounts entering the Pool, so we round up.\n            _downscaleUpArray(amountsIn, scalingFactors);\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\n            _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\n\n            return (amountsIn, dueProtocolFeeAmounts);\n        }\n    }","after":"function onJoinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] calldata balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes calldata userData\n    ) public virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\n        uint256[] memory scalingFactors = _scalingFactors();\n\n        if (totalSupply() == 0) {\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(\n                poolId,\n                sender,\n                recipient,\n                scalingFactors,\n                userData\n            );\n\n            // On initialization, we lock _MINIMUM_BPT by minting it for the zero address. This BPT acts as a minimum\n            // as it will never be burned, which reduces potential issues with rounding, and also prevents the Pool from\n            // ever being fully drained.\n            _require(bptAmountOut >= _MINIMUM_BPT, Errors.MINIMUM_BPT);\n            _mintPoolTokens(address(0), _MINIMUM_BPT);\n            _mintPoolTokens(recipient, bptAmountOut - _MINIMUM_BPT);\n\n            // amountsIn are amounts entering the Pool, so we round up.\n            _downscaleUpArray(amountsIn, scalingFactors);\n\n            return (amountsIn, new uint256[](_getTotalTokens()));\n        } else {\n            _upscaleArray(balances, scalingFactors);\n            (uint256 bptAmountOut, uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) = _onJoinPool(\n                poolId,\n                sender,\n                recipient,\n                balances,\n                lastChangeBlock,\n                protocolSwapFeePercentage,\n                scalingFactors,\n                userData\n            );\n\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\n\n            _mintPoolTokens(recipient, bptAmountOut);\n\n            // amountsIn are amounts entering the Pool, so we round up.\n            _downscaleUpArray(amountsIn, scalingFactors);\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\n            _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\n\n            return (amountsIn, dueProtocolFeeAmounts);\n        }\n    }","contract":"StablePool","time":0},{"type":"external-function ","before":"function onExitPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) public virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\n        uint256[] memory scalingFactors = _scalingFactors();\n        _upscaleArray(balances, scalingFactors);\n\n        (uint256 bptAmountIn, uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) = _onExitPool(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            scalingFactors,\n            userData\n        );\n\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\n\n        _burnPoolTokens(sender, bptAmountIn);\n\n        // Both amountsOut and dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\n        _downscaleDownArray(amountsOut, scalingFactors);\n        _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\n\n        return (amountsOut, dueProtocolFeeAmounts);\n    }","after":"function onExitPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] calldata balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes calldata userData\n    ) public virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\n        uint256[] memory scalingFactors = _scalingFactors();\n        _upscaleArray(balances, scalingFactors);\n\n        (uint256 bptAmountIn, uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) = _onExitPool(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            scalingFactors,\n            userData\n        );\n\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\n\n        _burnPoolTokens(sender, bptAmountIn);\n\n        // Both amountsOut and dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\n        _downscaleDownArray(amountsOut, scalingFactors);\n        _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\n\n        return (amountsOut, dueProtocolFeeAmounts);\n    }","contract":"StablePool","time":0},{"type":"external-function ","before":"function queryJoin(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onJoinPool,\n            _downscaleUpArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptOut, amountsIn);\n    }","after":"function queryJoin(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] calldata balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes calldata userData\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onJoinPool,\n            _downscaleUpArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptOut, amountsIn);\n    }","contract":"StablePool","time":0},{"type":"external-function ","before":"function queryExit(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onExitPool,\n            _downscaleDownArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptIn, amountsOut);\n    }","after":"function queryExit(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] calldata balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes calldata userData\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onExitPool,\n            _downscaleDownArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptIn, amountsOut);\n    }","contract":"StablePool","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"StablePool","time":2},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"StablePool","time":2},{"type":"constant-restrict-modification  ","before":"bytes32 private immutable _PERMIT_TYPEHASH =\n    keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","after":"bytes32 private immutable constant _PERMIT_TYPEHASH =\n    keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","contract":"StablePool","time":2},{"type":"external-function ","before":"a new `StablePool`.\n     */\n    function create(\n        string memory name,\n        string memory symbol,\n        IERC20[] memory tokens,\n        uint256 amplificationParameter,\n        uint256 swapFeePercentage,\n        address owner\n    ) external returns (address) {\n        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();\n\n        address pool = address(\n            new StablePool(\n                getVault(),\n                name,\n                symbol,\n                tokens,\n                amplificationParameter,\n                swapFeePercentage,\n                pauseWindowDuration,\n                bufferPeriodDuration,\n                owner\n            )\n        );\n        _register(p","after":"a new `StablePool`.\n     */\n    function create(\n        string calldata name,\n        string calldata symbol,\n        IERC20[] calldata tokens,\n        uint256 amplificationParameter,\n        uint256 swapFeePercentage,\n        address owner\n    ) external returns (address) {\n        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();\n\n        address pool = address(\n            new StablePool(\n                getVault(),\n                name,\n                symbol,\n                tokens,\n                amplificationParameter,\n                swapFeePercentage,\n                pauseWindowDuration,\n                bufferPeriodDuration,\n                owner\n            )\n        );\n        _register(p","contract":"StablePoolFactory","time":1}]}
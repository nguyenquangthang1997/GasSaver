{"time":218,"results":[{"type":"state-data-arrangement ","before":"\nbytes32 constant private FILE = \"LimitOrders\";\nbytes2 constant private EIP191_HEADER = 0x1901;\nstring constant private EIP712_DOMAIN_NAME = \"LimitOrders\";\nstring constant private EIP712_DOMAIN_VERSION = \"1.1\";\nbytes32 constant private EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n\n            \"EIP712Domain(\",\n\n            \"string name,\",\n\n            \"string version,\",\n\n            \"uint256 chainId,\",\n\n            \"address verifyingContract\",\n\n            \")\"\n\n        ));\nbytes32 constant private EIP712_LIMIT_ORDER_STRUCT_SCHEMA_HASH = keccak256(abi.encodePacked(\n\n            \"LimitOrder(\",\n\n            \"uint256 makerMarket,\",\n\n            \"uint256 takerMarket,\",\n\n            \"uint256 makerAmount,\",\n\n            \"uint256 takerAmount,\",\n\n            \"address makerAccountOwner,\",\n\n            \"uint256 makerAccountNumber,\",\n\n            \"address takerAccountOwner,\",\n\n            \"uint256 takerAccountNumber,\",\n\n            \"uint256 expiration,\",\n\n            \"uint256 salt\",\n\n            \")\"\n\n        ));\nuint256 constant private NUM_ORDER_BYTES = 320;\nuint256 constant private NUM_SIGNATURE_BYTES = 66;\nuint256 constant private NUM_CALLFUNCTIONDATA_BYTES = 32 + NUM_ORDER_BYTES;\nbytes32 public EIP712_DOMAIN_HASH;\nbool public g_isOperational;\nmapping(bytes32 => uint256) public g_makerFilledAmount;\nmapping(bytes32 => OrderStatus) public g_status;","after":"bytes32 constant private FILE = \"LimitOrders\";\nstring constant private EIP712_DOMAIN_NAME = \"LimitOrders\";\nstring constant private EIP712_DOMAIN_VERSION = \"1.1\";\nbytes32 constant private EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n\n            \"EIP712Domain(\",\n\n            \"string name,\",\n\n            \"string version,\",\n\n            \"uint256 chainId,\",\n\n            \"address verifyingContract\",\n\n            \")\"\n\n        ));\nbytes32 constant private EIP712_LIMIT_ORDER_STRUCT_SCHEMA_HASH = keccak256(abi.encodePacked(\n\n            \"LimitOrder(\",\n\n            \"uint256 makerMarket,\",\n\n            \"uint256 takerMarket,\",\n\n            \"uint256 makerAmount,\",\n\n            \"uint256 takerAmount,\",\n\n            \"address makerAccountOwner,\",\n\n            \"uint256 makerAccountNumber,\",\n\n            \"address takerAccountOwner,\",\n\n            \"uint256 takerAccountNumber,\",\n\n            \"uint256 expiration,\",\n\n            \"uint256 salt\",\n\n            \")\"\n\n        ));\nuint256 constant private NUM_ORDER_BYTES = 320;\nuint256 constant private NUM_SIGNATURE_BYTES = 66;\nuint256 constant private NUM_CALLFUNCTIONDATA_BYTES = 32 + NUM_ORDER_BYTES;\nbytes32 public EIP712_DOMAIN_HASH;\nmapping(bytes32 => uint256) public g_makerFilledAmount;\nmapping(bytes32 => OrderStatus) public g_status;\nbytes2 constant private EIP191_HEADER = 0x1901;\nbool public g_isOperational;\n","contract":"LimitOrders","time":0}]}
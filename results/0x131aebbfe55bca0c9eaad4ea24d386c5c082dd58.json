{"time":206,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(uint256 => address) private _tokenOwner;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => Counters.Counter) private _ownedTokensCount;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping(uint256 => address) private _tokenOwner;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => Counters.Counter) private _ownedTokensCount;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, Fee[] memory _fees, string memory tokenURI) public {\n\n        require(owner() == ecrecover(keccak256(abi.encodePacked(this, tokenId)), v, r, s), \"owner should sign tokenId\");\n\n        _mint(msg.sender, tokenId, _fees);\n\n        _setTokenURI(tokenId, tokenURI);\n\n    }","after":"function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, Fee[] calldata _fees, string calldata tokenURI) public {\n\n        require(owner() == ecrecover(keccak256(abi.encodePacked(this, tokenId)), v, r, s), \"owner should sign tokenId\");\n\n        _mint(msg.sender, tokenId, _fees);\n\n        _setTokenURI(tokenId, tokenURI);\n\n    }","contract":"MintableToken","time":0},{"type":"external-function ","before":"function setTokenURIPrefix(string memory tokenURIPrefix) public onlyOwner {\n\n        _setTokenURIPrefix(tokenURIPrefix);\n\n    }","after":"function setTokenURIPrefix(string calldata tokenURIPrefix) public onlyOwner {\n\n        _setTokenURIPrefix(tokenURIPrefix);\n\n    }","contract":"MintableToken","time":0},{"type":"external-function ","before":"function setContractURI(string memory contractURI) public onlyOwner {\n\n        _setContractURI(contractURI);\n\n    }","after":"function setContractURI(string calldata contractURI) public onlyOwner {\n\n        _setContractURI(contractURI);\n\n    }","contract":"MintableToken","time":0},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"MintableToken","time":1},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"MintableToken","time":1},{"type":"state-data-arrangement ","before":"\nbytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\nuint public buyerFee = 0;\naddress payable public beneficiary;","after":"uint public buyerFee = 0;\naddress payable public beneficiary;\nbytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\n","contract":"AbstractSale","time":0},{"type":"external-function ","before":"function buy(IERC721 token, uint256 tokenId, uint256 price, uint256 sellerFee, Sig memory signature) public payable {\n\n        address payable owner = address(uint160(token.ownerOf(tokenId)));\n\n        uint256 nonce = nonceHolder.getNonce(token, tokenId);\n\n        uint256 buyerFeeValue = price.mul(buyerFee).div(10000);\n\n        require(msg.value == price + buyerFeeValue, \"msg.value is incorrect\");\n\n        require(owner == prepareMessage(address(token), tokenId, price, sellerFee, nonce).recover(signature.v, signature.r, signature.s), \"owner should sign correct message\");\n\n        transferProxy.erc721safeTransferFrom(token, owner, msg.sender, tokenId);\n\n        transferEther(token, tokenId, owner, price, sellerFee);\n\n        nonceHolder.setNonce(token, tokenId, nonce + 1);\n\n        emit Buy(address(token), tokenId, owner, msg.sender, price, nonce + 1);\n\n    }","after":"function buy(IERC721 token, uint256 tokenId, uint256 price, uint256 sellerFee, Sig calldata signature) public payable {\n\n        address payable owner = address(uint160(token.ownerOf(tokenId)));\n\n        uint256 nonce = nonceHolder.getNonce(token, tokenId);\n\n        uint256 buyerFeeValue = price.mul(buyerFee).div(10000);\n\n        require(msg.value == price + buyerFeeValue, \"msg.value is incorrect\");\n\n        require(owner == prepareMessage(address(token), tokenId, price, sellerFee, nonce).recover(signature.v, signature.r, signature.s), \"owner should sign correct message\");\n\n        transferProxy.erc721safeTransferFrom(token, owner, msg.sender, tokenId);\n\n        transferEther(token, tokenId, owner, price, sellerFee);\n\n        nonceHolder.setNonce(token, tokenId, nonce + 1);\n\n        emit Buy(address(token), tokenId, owner, msg.sender, price, nonce + 1);\n\n    }","contract":"ERC721Sale","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\n\n        return this.onERC721Received.selector;\n\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public returns (bytes4) {\n\n        return this.onERC721Received.selector;\n\n    }","contract":"ERC721Sale","time":0}]}
{"time":146,"results":[{"type":"external-function ","before":"function add(\n        IERC20 _lpToken,\n        uint256 _addPerBlock,\n        uint256 _fromBlock,\n        uint256[] memory _epochMultiplers,\n        uint256[] memory _epochMultiplersValue,\n        uint256 _toBlock\n    ) public onlyOwner {\n        require(address(_lpToken) != address(0), \"MC: _lpToken should not be address zero\");\n\n        uint256 lastRewardBlock = block.number > _fromBlock ? block.number : _fromBlock;\n\n        PoolInfo memory currentPool;\n\n        currentPool.lpToken = _lpToken;\n        currentPool.addPerBlock = _addPerBlock;\n        currentPool.fromBlock = _fromBlock;\n        currentPool.toBlock = _toBlock;\n        currentPool.accAddPerShare = 0;\n        currentPool.lastRewardBlock = lastRewardBlock;\n        currentPool.isStopped = false;\n        currentPool.epochMultiplers = _epochMultiplers;\n        currentPool.epochMultiplersValue = _epochMultiplersValue;\n\n        poolInfo.push(currentPool);\n\n    }","after":"function add(\n        IERC20 _lpToken,\n        uint256 _addPerBlock,\n        uint256 _fromBlock,\n        uint256[] calldata _epochMultiplers,\n        uint256[] calldata _epochMultiplersValue,\n        uint256 _toBlock\n    ) public onlyOwner {\n        require(address(_lpToken) != address(0), \"MC: _lpToken should not be address zero\");\n\n        uint256 lastRewardBlock = block.number > _fromBlock ? block.number : _fromBlock;\n\n        PoolInfo memory currentPool;\n\n        currentPool.lpToken = _lpToken;\n        currentPool.addPerBlock = _addPerBlock;\n        currentPool.fromBlock = _fromBlock;\n        currentPool.toBlock = _toBlock;\n        currentPool.accAddPerShare = 0;\n        currentPool.lastRewardBlock = lastRewardBlock;\n        currentPool.isStopped = false;\n        currentPool.epochMultiplers = _epochMultiplers;\n        currentPool.epochMultiplersValue = _epochMultiplersValue;\n\n        poolInfo.push(currentPool);\n\n    }","contract":"AddChef","time":0}]}
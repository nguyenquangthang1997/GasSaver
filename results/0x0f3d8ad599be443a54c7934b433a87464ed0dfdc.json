{"time":113,"results":[{"type":"state-data-arrangement ","before":"\n uint256 constant ONE_THOUSAND = SafeDecimalMath.unit() * 1000\n uint256 constant ONE_HUNDRED = SafeDecimalMath.unit() * 100\n uint256 constant SECONDS_IN_A_YEAR = 31536000\n address constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF\n uint256 public collateralizationRatio = SafeDecimalMath.unit() * 150\n uint256 public interestRate = (5 * SafeDecimalMath.unit()) / 100\n uint256 public interestPerSecond = interestRate.div(SECONDS_IN_A_YEAR)\n uint256 public issueFeeRate = (5 * SafeDecimalMath.unit()) / 1000\n uint256 public issueLimit = SafeDecimalMath.unit() * 5000\n uint256 public minLoanSize = SafeDecimalMath.unit() * 1\n uint256 public accountLoanLimit = 50\n bool public loanLiquidationOpen = false\n uint256 public liquidationDeadline\n uint256 public totalIssuedSynths\n uint256 public totalLoansCreated\n uint256 public totalOpenLoanCount\n mapping(address => synthLoanStruct[]) public accountsSynthLoans\n mapping(address => uint256) public accountOpenLoanCounter","after":" uint256 constant ONE_THOUSAND = SafeDecimalMath.unit() * 1000\n uint256 constant ONE_HUNDRED = SafeDecimalMath.unit() * 100\n uint256 constant SECONDS_IN_A_YEAR = 31536000\n uint256 public collateralizationRatio = SafeDecimalMath.unit() * 150\n uint256 public interestRate = (5 * SafeDecimalMath.unit()) / 100\n uint256 public interestPerSecond = interestRate.div(SECONDS_IN_A_YEAR)\n uint256 public issueFeeRate = (5 * SafeDecimalMath.unit()) / 1000\n uint256 public issueLimit = SafeDecimalMath.unit() * 5000\n uint256 public minLoanSize = SafeDecimalMath.unit() * 1\n uint256 public accountLoanLimit = 50\n uint256 public liquidationDeadline\n uint256 public totalIssuedSynths\n uint256 public totalLoansCreated\n uint256 public totalOpenLoanCount\n mapping(address => synthLoanStruct[]) public accountsSynthLoans\n mapping(address => uint256) public accountOpenLoanCounter\n address constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF\n bool public loanLiquidationOpen = false\n","contract":"EtherCollateral","time":0}]}
{"time":202,"results":[{"type":"state-data-arrangement ","before":"\nIERC20 public token;\nIChiToken public constant chi = IChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\nuint256 public min = 9500;\nuint256 public constant max = 10000;\nuint256 public loanFee = 20;\nuint256 public loanFeeMax = 10000;\nbool public loanEnabled = true;\naddress public governance;\naddress public timelock;\naddress public controller;\nmapping(address => bool) public keepers;\nuint256 public DAY_SECONDS = 86400;\nuint256 public lockWindowBuffer = DAY_SECONDS / 12;\nuint256 public lockStartTime;\nuint256 public lockWindow;\nuint256 public withdrawWindow;\nuint256 public earnedTimestamp;\nbool public lockEnabled = true;\nbool public earnOnceEnabled = true;","after":"IERC20 public token;\nIChiToken public constant chi = IChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\nuint256 public min = 9500;\nuint256 public constant max = 10000;\nuint256 public loanFee = 20;\nuint256 public loanFeeMax = 10000;\nmapping(address => bool) public keepers;\nuint256 public DAY_SECONDS = 86400;\nuint256 public lockWindowBuffer = DAY_SECONDS / 12;\nuint256 public lockStartTime;\nuint256 public lockWindow;\nuint256 public withdrawWindow;\nuint256 public earnedTimestamp;\naddress public governance;\naddress public timelock;\naddress public controller;\nbool public loanEnabled = true;\nbool public lockEnabled = true;\nbool public earnOnceEnabled = true;\n","contract":"MMVault","time":1},{"type":"external-function ","before":"function flashLoan(address _receiver, uint256 _amount, bytes memory _data) public nonReentrant discountCHI {\n\n        require(loanEnabled == true, \"!loanEnabled\");\n\n        require(_amount > 0, \"amount too small!\");\n\n        uint256 beforeBalance = token.balanceOf(address(this));\n\n        require(beforeBalance > _amount, \"balance not enough!\");\n\n\n        //loanFee\n\n        uint256 _fee = _amount.mul(loanFee).div(loanFeeMax);\n\n\n        require(_fee > 0, \"fee too small\");\n\n\n        //transfer token to _receiver\n\n        token.safeTransfer(_receiver, _amount);\n\n\n        //execute user's logic\n\n        IFlashLoanReceiver(_receiver).mushroomsFlashloan(address(token), _amount, _fee, _data);\n\n\n        uint256 afterBalance = token.balanceOf(address(this));\n\n\n        require(afterBalance == beforeBalance.add(_fee), \"payback amount incorrect!\");\n\n\n        emit FlashLoan(address(token), _receiver, _amount, _fee);\n\n    }","after":"function flashLoan(address _receiver, uint256 _amount, bytes calldata _data) public nonReentrant discountCHI {\n\n        require(loanEnabled == true, \"!loanEnabled\");\n\n        require(_amount > 0, \"amount too small!\");\n\n        uint256 beforeBalance = token.balanceOf(address(this));\n\n        require(beforeBalance > _amount, \"balance not enough!\");\n\n\n        //loanFee\n\n        uint256 _fee = _amount.mul(loanFee).div(loanFeeMax);\n\n\n        require(_fee > 0, \"fee too small\");\n\n\n        //transfer token to _receiver\n\n        token.safeTransfer(_receiver, _amount);\n\n\n        //execute user's logic\n\n        IFlashLoanReceiver(_receiver).mushroomsFlashloan(address(token), _amount, _fee, _data);\n\n\n        uint256 afterBalance = token.balanceOf(address(this));\n\n\n        require(afterBalance == beforeBalance.add(_fee), \"payback amount incorrect!\");\n\n\n        emit FlashLoan(address(token), _receiver, _amount, _fee);\n\n    }","contract":"MMVault","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public loanFeeMax = 10000;","after":"uint256 public constant loanFeeMax = 10000;","contract":"MMVault","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public DAY_SECONDS = 86400;","after":"uint256 public constant DAY_SECONDS = 86400;","contract":"MMVault","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public lockWindowBuffer = DAY_SECONDS / 12;","after":"uint256 public constant lockWindowBuffer = DAY_SECONDS / 12;","contract":"MMVault","time":1},{"type":"constant-restrict-modification  ","before":"bytes32 public immutable PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","after":"bytes32 public immutable constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","contract":"MMVault","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"MMVault","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"MMVault","time":1}]}
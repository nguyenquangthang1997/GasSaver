{"time":543,"results":[{"type":"external-function ","before":"function grantRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","after":"function grantRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","contract":"Cauldron","time":0},{"type":"external-function ","before":"function revokeRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","after":"function revokeRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","contract":"Cauldron","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 CHI = \"CHI\";","after":"bytes32 constant CHI = \"CHI\";","contract":"Cauldron","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 RATE = \"RATE\";","after":"bytes32 constant RATE = \"RATE\";","contract":"Cauldron","time":1},{"type":"constant-restrict-modification  ","before":"bytes6 ETH = \"00\";","after":"bytes6 constant ETH = \"00\";","contract":"Cauldron","time":1}]}
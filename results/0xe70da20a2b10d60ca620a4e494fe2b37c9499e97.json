{"time":178,"results":[{"type":"external-function ","before":"function setBaseURI(string memory _uri) external onlyOwner {\n        m_baseUri = _uri;\n    }","after":"function setBaseURI(string calldata _uri) external onlyOwner {\n        m_baseUri = _uri;\n    }","contract":"GenesisApostle","time":0},{"type":"external-function ","before":"function changeName(uint256 _tokenId, string memory _newName) public override isTokenEnabled {\n        m_trypContract.burn(msg.sender, m_nameChangePrice);\n        super.changeName(_tokenId, _newName);\n    }","after":"function changeName(uint256 _tokenId, string calldata _newName) public override isTokenEnabled {\n        m_trypContract.burn(msg.sender, m_nameChangePrice);\n        super.changeName(_tokenId, _newName);\n    }","contract":"GenesisApostle","time":0},{"type":"external-function ","before":"function changeBio(uint256 _tokenId, string memory _newBio) public override isTokenEnabled {\n        m_trypContract.burn(msg.sender, m_bioChangePrice);\n        super.changeBio(_tokenId, _newBio);\n    }","after":"function changeBio(uint256 _tokenId, string calldata _newBio) public override isTokenEnabled {\n        m_trypContract.burn(msg.sender, m_bioChangePrice);\n        super.changeBio(_tokenId, _newBio);\n    }","contract":"GenesisApostle","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) public virtual {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"You do not own this token.\");\n        require(validateName(newName) == true, \"Invalid name.\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one.\");\n        require(isNameReserved(newName) == false, \"Name already reserved.\");\n\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        emit NameChange(tokenId, newName);\n    }","after":"function changeName(uint256 tokenId, string calldata newName) public virtual {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"You do not own this token.\");\n        require(validateName(newName) == true, \"Invalid name.\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one.\");\n        require(isNameReserved(newName) == false, \"Name already reserved.\");\n\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        emit NameChange(tokenId, newName);\n    }","contract":"GenesisApostle","time":0},{"type":"external-function ","before":"function changeBio(uint256 _tokenId, string memory _bio) public virtual {\n        address owner = ownerOf(_tokenId);\n        require(_msgSender() == owner, \"You do not own this token.\");\n\n        _tokenBio[_tokenId] = _bio;\n        emit BioChange(_tokenId, _bio);\n    }","after":"function changeBio(uint256 _tokenId, string calldata _bio) public virtual {\n        address owner = ownerOf(_tokenId);\n        require(_msgSender() == owner, \"You do not own this token.\");\n\n        _tokenBio[_tokenId] = _bio;\n        emit BioChange(_tokenId, _bio);\n    }","contract":"GenesisApostle","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"GenesisApostle","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"GenesisApostle","time":1},{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) &&\n            !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) &&\n            (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":1335,"column":16},"end":{"line":1336,"column":42}},"contract":"IERC721EnumerableNameable","time":0}]}
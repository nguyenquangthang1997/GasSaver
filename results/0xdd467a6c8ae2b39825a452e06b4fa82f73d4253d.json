{"time":533,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash)\n    public onlyOwner\n    {\n        MCV_PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash)\n    public onlyOwner\n    {\n        MCV_PROVENANCE = provenanceHash;\n    }","contract":"MarsCatsVoyage","time":0},{"type":"external-function ","before":"function mintCat(address sender, uint numberOfTokens, string memory metadataURI)\n    public payable\n    {\n        require(saleIsActive, \"Sale must be active to mint Cat\");\n        require(numberOfTokens <= maxCatPurchase, \"Can only mint 10 tokens at a time\");\n        require(catPrice.mul(numberOfTokens) <= msg.value, \"Ether value sent is not correct\");\n        require(_tokenIds.current().add(numberOfTokens) <= maxCatTokens, \"That's all! No more tokens\");\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            _tokenIds.increment();\n\n            uint256 id = _tokenIds.current();\n            _safeMint(sender, id);\n            _setTokenURI(id, metadataURI);\n        }\n    }","after":"function mintCat(address sender, uint numberOfTokens, string calldata metadataURI)\n    public payable\n    {\n        require(saleIsActive, \"Sale must be active to mint Cat\");\n        require(numberOfTokens <= maxCatPurchase, \"Can only mint 10 tokens at a time\");\n        require(catPrice.mul(numberOfTokens) <= msg.value, \"Ether value sent is not correct\");\n        require(_tokenIds.current().add(numberOfTokens) <= maxCatTokens, \"That's all! No more tokens\");\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            _tokenIds.increment();\n\n            uint256 id = _tokenIds.current();\n            _safeMint(sender, id);\n            _setTokenURI(id, metadataURI);\n        }\n    }","contract":"MarsCatsVoyage","time":0},{"type":"external-function ","before":"function setTokenUri(uint tokenId, string memory metadataURI)\n    public onlyOwner\n    {\n        _setTokenURI(tokenId, metadataURI);\n    }","after":"function setTokenUri(uint tokenId, string calldata metadataURI)\n    public onlyOwner\n    {\n        _setTokenURI(tokenId, metadataURI);\n    }","contract":"MarsCatsVoyage","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"MarsCatsVoyage","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"MarsCatsVoyage","time":1}]}
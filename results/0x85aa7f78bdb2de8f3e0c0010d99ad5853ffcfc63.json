{"time":432,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC721","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC721","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"ERC721Holder","time":0},{"type":"state-data-arrangement ","before":"\naddress public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\naddress public token;\nuint256 public id;\nuint256 public auctionEnd;\nuint256 public auctionLength;\nuint256 public reserveTotal;\nuint256 public livePrice;\naddress payable public winning;\nState public auctionState;\naddress public immutable settings;\naddress public curator;\nuint256 public fee;\nuint256 public lastClaimed;\nbool public vaultClosed;\nuint256 public votingTokens;\nmapping(address => uint256) public userPrices;","after":"uint256 public id;\nuint256 public auctionEnd;\nuint256 public auctionLength;\nuint256 public reserveTotal;\nuint256 public livePrice;\nState public auctionState;\nuint256 public fee;\nuint256 public lastClaimed;\nuint256 public votingTokens;\nmapping(address => uint256) public userPrices;\naddress public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\naddress public token;\naddress payable public winning;\naddress public immutable settings;\naddress public curator;\nbool public vaultClosed;\n","contract":"TokenVault","time":0},{"type":"external-function ","before":"function initialize(address _curator, address _token, uint256 _id, uint256 _supply, uint256 _listPrice, uint256 _fee, string memory _name, string memory _symbol) external initializer {\n        // initialize inherited contracts\n        __ERC20_init(_name, _symbol);\n        __ERC721Holder_init();\n        // set storage variables\n        token = _token;\n        id = _id;\n        reserveTotal = _listPrice * _supply;\n        auctionLength = 7 days;\n        curator = _curator;\n        fee = _fee;\n        lastClaimed = block.timestamp;\n        votingTokens = _listPrice == 0 ? 0 : _supply;\n\n        auctionState = State.inactive;\n\n        _mint(_curator, _supply);\n        userPrices[_curator] = _listPrice;\n    }","after":"function initialize(address _curator, address _token, uint256 _id, uint256 _supply, uint256 _listPrice, uint256 _fee, string calldata _name, string calldata _symbol) external initializer {\n        // initialize inherited contracts\n        __ERC20_init(_name, _symbol);\n        __ERC721Holder_init();\n        // set storage variables\n        token = _token;\n        id = _id;\n        reserveTotal = _listPrice * _supply;\n        auctionLength = 7 days;\n        curator = _curator;\n        fee = _fee;\n        lastClaimed = block.timestamp;\n        votingTokens = _listPrice == 0 ? 0 : _supply;\n\n        auctionState = State.inactive;\n\n        _mint(_curator, _supply);\n        userPrices[_curator] = _listPrice;\n    }","contract":"TokenVault","time":0},{"type":"external-function ","before":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"TokenVault","time":0},{"type":"constant-restrict-modification  ","before":"bool public vaultClosed;","after":"bool public constant vaultClosed;","contract":"TokenVault","time":1},{"type":"external-function ","before":"function mint(string memory _name, string memory _symbol, address _token, uint256 _id, uint256 _supply, uint256 _listPrice, uint256 _fee) external whenNotPaused returns (uint256) {\n        bytes memory _initializationCalldata =\n        abi.encodeWithSignature(\n            \"initialize(address,address,uint256,uint256,uint256,uint256,string,string)\",\n            msg.sender,\n            _token,\n            _id,\n            _supply,\n            _listPrice,\n            _fee,\n            _name,\n            _symbol\n        );\n\n        address vault = address(\n            new InitializedProxy(\n                logic,\n                _initializationCalldata\n            )\n        );\n\n        emit Mint(_token, _id, _listPrice, vault, vaultCount);\n\n        IERC721(_token).safeTransferFrom(msg.sender, vault, _id);\n\n        vaults[vaultCount] = vault;\n        vaultCount++;\n\n        return vaultCount - 1;\n    }","after":"function mint(string calldata _name, string calldata _symbol, address _token, uint256 _id, uint256 _supply, uint256 _listPrice, uint256 _fee) external whenNotPaused returns (uint256) {\n        bytes memory _initializationCalldata =\n        abi.encodeWithSignature(\n            \"initialize(address,address,uint256,uint256,uint256,uint256,string,string)\",\n            msg.sender,\n            _token,\n            _id,\n            _supply,\n            _listPrice,\n            _fee,\n            _name,\n            _symbol\n        );\n\n        address vault = address(\n            new InitializedProxy(\n                logic,\n                _initializationCalldata\n            )\n        );\n\n        emit Mint(_token, _id, _listPrice, vault, vaultCount);\n\n        IERC721(_token).safeTransferFrom(msg.sender, vault, _id);\n\n        vaults[vaultCount] = vault;\n        vaultCount++;\n\n        return vaultCount - 1;\n    }","contract":"ERC721VaultFactory","time":0}]}
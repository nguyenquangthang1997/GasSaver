{"time":36,"results":[{"type":"state-data-arrangement ","before":"\nuint public constant GRACE_PERIOD = 14 days;\nuint public constant MINIMUM_DELAY = 2 days;\nuint public constant MAXIMUM_DELAY = 30 days;\naddress public admin;\naddress public pendingAdmin;\nuint public delay;\nbool public admin_initialized;\nmapping(bytes32 => bool) public queuedTransactions;","after":"uint public constant GRACE_PERIOD = 14 days;\nuint public constant MINIMUM_DELAY = 2 days;\nuint public constant MAXIMUM_DELAY = 30 days;\nuint public delay;\nmapping(bytes32 => bool) public queuedTransactions;\naddress public admin;\naddress public pendingAdmin;\nbool public admin_initialized;\n","contract":"Timelock","time":0},{"type":"external-function ","before":"function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n\n        queuedTransactions[txHash] = true;\n\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n\n        return txHash;\n\n    }","after":"function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) public returns (bytes32) {\n\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n\n        queuedTransactions[txHash] = true;\n\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n\n        return txHash;\n\n    }","contract":"Timelock","time":0},{"type":"external-function ","before":"function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n\n        queuedTransactions[txHash] = false;\n\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n\n    }","after":"function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) public {\n\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n\n        queuedTransactions[txHash] = false;\n\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n\n    }","contract":"Timelock","time":0},{"type":"external-function ","before":"function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n\n        queuedTransactions[txHash] = false;\n\n\n        bytes memory callData;\n\n\n        if (bytes(signature).length == 0) {\n\n            callData = data;\n\n        } else {\n\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n\n        }\n\n\n        // solium-disable-next-line security/no-call-value\n\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\n\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n\n        return returnData;\n\n    }","after":"function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) public payable returns (bytes memory) {\n\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n\n        queuedTransactions[txHash] = false;\n\n\n        bytes memory callData;\n\n\n        if (bytes(signature).length == 0) {\n\n            callData = data;\n\n        } else {\n\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n\n        }\n\n\n        // solium-disable-next-line security/no-call-value\n\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\n\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n\n        return returnData;\n\n    }","contract":"Timelock","time":0}]}
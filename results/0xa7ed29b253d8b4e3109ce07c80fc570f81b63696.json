{"time":684,"results":[{"type":"constant-restrict-modification  ","before":"uint256 public DURATION = 5 days;","after":"uint256 public constant DURATION = 5 days;","contract":"BACDAIPool","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public starttime;","after":"uint256 public immutable starttime;","contract":"BACDAIPool","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public DURATION = 5 days;","after":"uint256 public constant DURATION = 5 days;","contract":"BACSUSDPool","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public starttime;","after":"uint256 public immutable starttime;","contract":"BACSUSDPool","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public DURATION = 5 days;","after":"uint256 public constant DURATION = 5 days;","contract":"BACUSDCPool","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public starttime;","after":"uint256 public immutable starttime;","contract":"BACUSDCPool","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public DURATION = 5 days;","after":"uint256 public constant DURATION = 5 days;","contract":"BACUSDTPool","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public starttime;","after":"uint256 public immutable starttime;","contract":"BACUSDTPool","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public DURATION = 5 days;","after":"uint256 public constant DURATION = 5 days;","contract":"BACyCRVPool","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public starttime;","after":"uint256 public immutable starttime;","contract":"BACyCRVPool","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Bond","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Bond","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Cash","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Cash","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public starttime;","after":"uint256 public immutable starttime;","contract":"DAIBACLPTokenSharePool","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public DURATION = 365 days;","after":"uint256 public constant DURATION = 365 days;","contract":"DAIBASLPTokenSharePool","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public starttime;","after":"uint256 public immutable starttime;","contract":"DAIBASLPTokenSharePool","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public totalInitialBalance;","after":"uint256 public immutable totalInitialBalance;","contract":"InitialCashDistributor","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public daibacInitialBalance;","after":"uint256 public immutable daibacInitialBalance;","contract":"InitialShareDistributor","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public daibasInitialBalance;","after":"uint256 public immutable daibasInitialBalance;","contract":"InitialShareDistributor","time":0},{"type":"immutable-restrict-modification ","before":"address public owner;","after":"address public immutable owner;","contract":"Migrations","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"MockDai","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"MockDai","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public constant PERIOD = 10 minutes;\nIUniswapV2Pair public pair;\naddress public token0;\naddress public token1;\nuint256 public price0CumulativeLast;\nuint256 public price1CumulativeLast;\nuint32 public blockTimestampLast;\nFixedPoint.uq112x112 public price0Average;\nFixedPoint.uq112x112 public price1Average;","after":"uint256 public constant PERIOD = 10 minutes;\nIUniswapV2Pair public pair;\nuint256 public price0CumulativeLast;\nuint256 public price1CumulativeLast;\nFixedPoint.uq112x112 public price0Average;\nFixedPoint.uq112x112 public price1Average;\naddress public token0;\naddress public token1;\nuint32 public blockTimestampLast;\n","contract":"Oracle","time":0},{"type":"immutable-restrict-modification ","before":"address public token0;","after":"address public immutable token0;","contract":"Oracle","time":0},{"type":"immutable-restrict-modification ","before":"address public token1;","after":"address public immutable token1;","contract":"Oracle","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Share","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Share","time":0},{"type":"external-function ","before":"function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public returns (bytes32) {\n        require(\n            msg.sender == admin,\n            'Timelock::queueTransaction: Call must come from admin.'\n        );\n        require(\n            eta >= getBlockTimestamp().add(delay),\n            'Timelock::queueTransaction: Estimated execution block must satisfy delay.'\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }","after":"function queueTransaction(\n        address target,\n        uint256 value,\n        string calldata signature,\n        bytes calldata data,\n        uint256 eta\n    ) public returns (bytes32) {\n        require(\n            msg.sender == admin,\n            'Timelock::queueTransaction: Call must come from admin.'\n        );\n        require(\n            eta >= getBlockTimestamp().add(delay),\n            'Timelock::queueTransaction: Estimated execution block must satisfy delay.'\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }","contract":"Timelock","time":0},{"type":"external-function ","before":"function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public {\n        require(\n            msg.sender == admin,\n            'Timelock::cancelTransaction: Call must come from admin.'\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }","after":"function cancelTransaction(\n        address target,\n        uint256 value,\n        string calldata signature,\n        bytes calldata data,\n        uint256 eta\n    ) public {\n        require(\n            msg.sender == admin,\n            'Timelock::cancelTransaction: Call must come from admin.'\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }","contract":"Timelock","time":0},{"type":"external-function ","before":"function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public payable returns (bytes memory) {\n        require(\n            msg.sender == admin,\n            'Timelock::executeTransaction: Call must come from admin.'\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        require(\n            queuedTransactions[txHash],\n            \"Timelock::executeTransaction: Transaction hasn't been queued.\"\n        );\n        require(\n            getBlockTimestamp() >= eta,\n            \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\n        );\n        require(\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\n            'Timelock::executeTransaction: Transaction is stale.'\n        );\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(\n                bytes4(keccak256(bytes(signature))),\n                data\n            );\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value : value}(\n            callData\n        );\n        require(\n            success,\n            'Timelock::executeTransaction: Transaction execution reverted.'\n        );\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }","after":"function executeTransaction(\n        address target,\n        uint256 value,\n        string calldata signature,\n        bytes calldata data,\n        uint256 eta\n    ) public payable returns (bytes memory) {\n        require(\n            msg.sender == admin,\n            'Timelock::executeTransaction: Call must come from admin.'\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(target, value, signature, data, eta)\n        );\n        require(\n            queuedTransactions[txHash],\n            \"Timelock::executeTransaction: Transaction hasn't been queued.\"\n        );\n        require(\n            getBlockTimestamp() >= eta,\n            \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\n        );\n        require(\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\n            'Timelock::executeTransaction: Transaction is stale.'\n        );\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(\n                bytes4(keccak256(bytes(signature))),\n                data\n            );\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value : value}(\n            callData\n        );\n        require(\n            success,\n            'Timelock::executeTransaction: Transaction execution reverted.'\n        );\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }","contract":"Timelock","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public constant allocationDelay = 1 days;\naddress private cash;\naddress private bond;\naddress private share;\naddress private boardroom;\nIOracle private cashOracle;\nbool private migrated = false;\nuint256 private seigniorageSaved = 0;\nuint256 public startTime;\nuint256 public cashPriceCeiling;\nuint256 public cashPriceOne;\nuint256 private bondDepletionFloor;\nuint256 private lastAllocated;","after":"uint256 public constant allocationDelay = 1 days;\nIOracle private cashOracle;\nuint256 private seigniorageSaved = 0;\nuint256 public startTime;\nuint256 public cashPriceCeiling;\nuint256 public cashPriceOne;\nuint256 private bondDepletionFloor;\nuint256 private lastAllocated;\naddress private cash;\naddress private bond;\naddress private share;\naddress private boardroom;\nbool private migrated = false;\n","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"address private cash;","after":"address private immutable cash;","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"address private bond;","after":"address private immutable bond;","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"address private share;","after":"address private immutable share;","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"address private boardroom;","after":"address private immutable boardroom;","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public startTime;","after":"uint256 public immutable startTime;","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public cashPriceCeiling;","after":"uint256 public immutable cashPriceCeiling;","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public cashPriceOne;","after":"uint256 public immutable cashPriceOne;","contract":"Treasury","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private bondDepletionFloor;","after":"uint256 private immutable bondDepletionFloor;","contract":"Treasury","time":0}]}
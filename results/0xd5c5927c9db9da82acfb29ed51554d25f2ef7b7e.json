{"time":129,"results":[{"type":"loop-duplication","before":"\nstart line 2767 column 8, end line 2775 column 8\nfor (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarIds[i]);\n\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n\n            require(!isClaimed(angryBoarIds[i]), \"The token has been already claimed\");\n\n        }\nstart line 2778 column 8, end line 2784 column 8\nfor (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            _safeMint(msg.sender, totalSupply());\n\n            _claimedBoars[angryBoarIds[i]] = true;\n\n        }","after":"// merge loop\n\nstart line 2767 column 8, end line 2775 column 8\nfor (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarIds[i]);\n\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n\n            require(!isClaimed(angryBoarIds[i]), \"The token has been already claimed\");\n\n        }\nstart line 2778 column 8, end line 2784 column 8\nfor (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            _safeMint(msg.sender, totalSupply());\n\n            _claimedBoars[angryBoarIds[i]] = true;\n\n        }","contract":"AngryMeerkats","time":1},{"type":"state-data-arrangement ","before":"\nbool public claimIsActive = false;\naddress public angryBoarsContractAddress = 0xA66CC78067fd1E6Aa3eEC4CcdFF88D81527F92c1;\nmapping(uint256 => bool) _claimedBoars;\nbool public isMetadataLocked = false;\nstring private _baseURIExtended;\nmapping(uint256 => string) _tokenURIs;","after":"mapping(uint256 => bool) _claimedBoars;\nstring private _baseURIExtended;\nmapping(uint256 => string) _tokenURIs;\naddress public angryBoarsContractAddress = 0xA66CC78067fd1E6Aa3eEC4CcdFF88D81527F92c1;\nbool public claimIsActive = false;\nbool public isMetadataLocked = false;\n","contract":"AngryMeerkats","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner {\n\n        require(!isMetadataLocked, \"Metadata is locked\");\n\n        _baseURIExtended = baseURI_;\n\n    }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner {\n\n        require(!isMetadataLocked, \"Metadata is locked\");\n\n        _baseURIExtended = baseURI_;\n\n    }","contract":"AngryMeerkats","time":0},{"type":"external-function ","before":"function claimByIds(uint256[] memory angryBoarIds) public {\n\n        require(claimIsActive, \"Claiming is not active at the moment\");\n\n        AngryBoarsContractInterface angryBoarsContractCaller = AngryBoarsContractInterface(angryBoarsContractAddress);\n\n        for (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarIds[i]);\n\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n\n            require(!isClaimed(angryBoarIds[i]), \"The token has been already claimed\");\n\n        }\n\n\n        for (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            _safeMint(msg.sender, totalSupply());\n\n            _claimedBoars[angryBoarIds[i]] = true;\n\n        }\n\n    }","after":"function claimByIds(uint256[] calldata angryBoarIds) public {\n\n        require(claimIsActive, \"Claiming is not active at the moment\");\n\n        AngryBoarsContractInterface angryBoarsContractCaller = AngryBoarsContractInterface(angryBoarsContractAddress);\n\n        for (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarIds[i]);\n\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n\n            require(!isClaimed(angryBoarIds[i]), \"The token has been already claimed\");\n\n        }\n\n\n        for (uint256 i = 0; i < angryBoarIds.length; i++) {\n\n            _safeMint(msg.sender, totalSupply());\n\n            _claimedBoars[angryBoarIds[i]] = true;\n\n        }\n\n    }","contract":"AngryMeerkats","time":0},{"type":"constant-restrict-modification  ","before":"address public angryBoarsContractAddress = 0xA66CC78067fd1E6Aa3eEC4CcdFF88D81527F92c1;","after":"address public constant angryBoarsContractAddress = 0xA66CC78067fd1E6Aa3eEC4CcdFF88D81527F92c1;","contract":"AngryMeerkats","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"AngryMeerkats","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"AngryMeerkats","time":0}]}
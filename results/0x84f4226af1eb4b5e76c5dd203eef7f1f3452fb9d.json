{"time":156,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function airdrop(address[] memory recipient)\n    external\n    onlyOwner\n    returns (bool)\n    {\n        uint256 supply = totalSupply();\n        require(\n            recipient.length <= reservedSupplyAllocation,\n            \"Amount exceeds reserved allocation\"\n        );\n        require(\n            supply.add(recipient.length) <= mintableSupply,\n            \"Mintable hardcap reached\"\n        );\n        for (uint256 i = 0; i < recipient.length; i++) {\n            _safeMint(recipient[i], supply.add(i));\n        }\n        reservedSupplyAllocation = reservedSupplyAllocation.sub(\n            recipient.length\n        );\n        return true;\n    }","after":"function airdrop(address[] calldata recipient)\n    external\n    onlyOwner\n    returns (bool)\n    {\n        uint256 supply = totalSupply();\n        require(\n            recipient.length <= reservedSupplyAllocation,\n            \"Amount exceeds reserved allocation\"\n        );\n        require(\n            supply.add(recipient.length) <= mintableSupply,\n            \"Mintable hardcap reached\"\n        );\n        for (uint256 i = 0; i < recipient.length; i++) {\n            _safeMint(recipient[i], supply.add(i));\n        }\n        reservedSupplyAllocation = reservedSupplyAllocation.sub(\n            recipient.length\n        );\n        return true;\n    }","contract":"MetaMaraudersL1","time":0},{"type":"external-function ","before":"function migrate(address[] memory recipient, uint256[] memory tokenIds)\n    external\n    onlyOwner\n    returns (bool)\n    {\n        require(\n            recipient.length == tokenIds.length,\n            \"Incorrect migration parameters\"\n        );\n        require(\n            recipient.length <= reservedSupplyAllocation,\n            \"Amount exceeds reserved allocation\"\n        );\n        require(\n            totalSupply().add(recipient.length) <= mintableSupply,\n            \"Mintable hardcap reached\"\n        );\n        for (uint256 i = 0; i < recipient.length; i++) {\n            _safeMint(recipient[i], tokenIds[i]);\n        }\n        reservedSupplyAllocation = reservedSupplyAllocation.sub(\n            recipient.length\n        );\n        return true;\n    }","after":"function migrate(address[] calldata recipient, uint256[] calldata tokenIds)\n    external\n    onlyOwner\n    returns (bool)\n    {\n        require(\n            recipient.length == tokenIds.length,\n            \"Incorrect migration parameters\"\n        );\n        require(\n            recipient.length <= reservedSupplyAllocation,\n            \"Amount exceeds reserved allocation\"\n        );\n        require(\n            totalSupply().add(recipient.length) <= mintableSupply,\n            \"Mintable hardcap reached\"\n        );\n        for (uint256 i = 0; i < recipient.length; i++) {\n            _safeMint(recipient[i], tokenIds[i]);\n        }\n        reservedSupplyAllocation = reservedSupplyAllocation.sub(\n            recipient.length\n        );\n        return true;\n    }","contract":"MetaMaraudersL1","time":0},{"type":"external-function ","before":"function setPreRevealURI(string memory preRevealURI_) external onlyOwner {\n        preRevealURI = preRevealURI_;\n    }","after":"function setPreRevealURI(string calldata preRevealURI_) external onlyOwner {\n        preRevealURI = preRevealURI_;\n    }","contract":"MetaMaraudersL1","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _setBaseURI(baseURI);\n    }","contract":"MetaMaraudersL1","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public mintableSupply;","after":"uint256 public immutable mintableSupply;","contract":"MetaMaraudersL1","time":1},{"type":"immutable-restrict-modification ","before":"address public reserveAddress;","after":"address public immutable reserveAddress;","contract":"MetaMaraudersL1","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"MetaMaraudersL1","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"MetaMaraudersL1","time":1}]}
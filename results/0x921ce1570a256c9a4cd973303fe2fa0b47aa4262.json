{"time":303,"results":[{"type":"state-data-arrangement ","before":"\nbool public _IS_BUYOUT_;\nuint256 public _BUYOUT_TIMESTAMP_;\nuint256 public _BUYOUT_PRICE_;\nuint256 public _DISTRIBUTION_RATIO_;\naddress public _COLLATERAL_VAULT_;\naddress public _VAULT_PRE_OWNER_;\naddress public _QUOTE_;\naddress public _DVM_;\naddress public _DEFAULT_MAINTAINER_;\naddress public _BUYOUT_MODEL_;\nbool internal _FRAG_INITIALIZED_;","after":"uint256 public _BUYOUT_TIMESTAMP_;\nuint256 public _BUYOUT_PRICE_;\nuint256 public _DISTRIBUTION_RATIO_;\naddress public _COLLATERAL_VAULT_;\naddress public _VAULT_PRE_OWNER_;\naddress public _QUOTE_;\naddress public _DVM_;\naddress public _DEFAULT_MAINTAINER_;\naddress public _BUYOUT_MODEL_;\nbool public _IS_BUYOUT_;\nbool internal _FRAG_INITIALIZED_;\n","contract":"Fragment","time":0},{"type":"external-function ","before":"function init(\n\n        address dvm,\n\n        address vaultPreOwner,\n\n        address collateralVault,\n\n        uint256 _totalSupply,\n\n        uint256 ownerRatio,\n\n        uint256 buyoutTimestamp,\n\n        address defaultMaintainer,\n\n        address buyoutModel,\n\n        uint256 distributionRatio,\n\n        string memory _symbol\n\n    ) external {\n\n        require(!_FRAG_INITIALIZED_, \"DODOFragment: ALREADY_INITIALIZED\");\n\n        _FRAG_INITIALIZED_ = true;\n\n\n        // init local variables\n\n        _DVM_ = dvm;\n\n        _QUOTE_ = IDVM(_DVM_)._QUOTE_TOKEN_();\n\n        _VAULT_PRE_OWNER_ = vaultPreOwner;\n\n        _COLLATERAL_VAULT_ = collateralVault;\n\n        _BUYOUT_TIMESTAMP_ = buyoutTimestamp;\n\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\n\n        _BUYOUT_MODEL_ = buyoutModel;\n\n        _DISTRIBUTION_RATIO_ = distributionRatio;\n\n\n        // init FRAG meta data\n\n        name = string(abi.encodePacked(\"DODO_FRAG_\", _symbol));\n\n        // symbol = string(abi.encodePacked(\"d_\", _symbol));\n\n        symbol = _symbol;\n\n        super.init(address(this), _totalSupply, name, symbol);\n\n\n        // init FRAG distribution\n\n        uint256 vaultPreOwnerBalance = DecimalMath.mulFloor(_totalSupply, ownerRatio);\n\n        uint256 distributionBalance = DecimalMath.mulFloor(vaultPreOwnerBalance, distributionRatio);\n\n\n        if (distributionBalance > 0) _transfer(address(this), _DEFAULT_MAINTAINER_, distributionBalance);\n\n        _transfer(address(this), _VAULT_PRE_OWNER_, vaultPreOwnerBalance.sub(distributionBalance));\n\n        _transfer(address(this), _DVM_, _totalSupply.sub(vaultPreOwnerBalance));\n\n\n        // init DVM liquidity\n\n        IDVM(_DVM_).buyShares(address(this));\n\n    }","after":"function init(\n\n        address dvm,\n\n        address vaultPreOwner,\n\n        address collateralVault,\n\n        uint256 _totalSupply,\n\n        uint256 ownerRatio,\n\n        uint256 buyoutTimestamp,\n\n        address defaultMaintainer,\n\n        address buyoutModel,\n\n        uint256 distributionRatio,\n\n        string calldata _symbol\n\n    ) external {\n\n        require(!_FRAG_INITIALIZED_, \"DODOFragment: ALREADY_INITIALIZED\");\n\n        _FRAG_INITIALIZED_ = true;\n\n\n        // init local variables\n\n        _DVM_ = dvm;\n\n        _QUOTE_ = IDVM(_DVM_)._QUOTE_TOKEN_();\n\n        _VAULT_PRE_OWNER_ = vaultPreOwner;\n\n        _COLLATERAL_VAULT_ = collateralVault;\n\n        _BUYOUT_TIMESTAMP_ = buyoutTimestamp;\n\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\n\n        _BUYOUT_MODEL_ = buyoutModel;\n\n        _DISTRIBUTION_RATIO_ = distributionRatio;\n\n\n        // init FRAG meta data\n\n        name = string(abi.encodePacked(\"DODO_FRAG_\", _symbol));\n\n        // symbol = string(abi.encodePacked(\"d_\", _symbol));\n\n        symbol = _symbol;\n\n        super.init(address(this), _totalSupply, name, symbol);\n\n\n        // init FRAG distribution\n\n        uint256 vaultPreOwnerBalance = DecimalMath.mulFloor(_totalSupply, ownerRatio);\n\n        uint256 distributionBalance = DecimalMath.mulFloor(vaultPreOwnerBalance, distributionRatio);\n\n\n        if (distributionBalance > 0) _transfer(address(this), _DEFAULT_MAINTAINER_, distributionBalance);\n\n        _transfer(address(this), _VAULT_PRE_OWNER_, vaultPreOwnerBalance.sub(distributionBalance));\n\n        _transfer(address(this), _DVM_, _totalSupply.sub(vaultPreOwnerBalance));\n\n\n        // init DVM liquidity\n\n        IDVM(_DVM_).buyShares(address(this));\n\n    }","contract":"Fragment","time":0},{"type":"external-function ","before":"function init(\n\n        address _creator,\n\n        uint256 _totalSupply,\n\n        string memory _name,\n\n        string memory _symbol\n\n    ) public {\n\n        require(!initialized, \"TOKEN_INITIALIZED\");\n\n        initialized = true;\n\n        totalSupply = _totalSupply;\n\n        balances[_creator] = _totalSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        emit Transfer(address(0), _creator, _totalSupply);\n\n    }","after":"function init(\n\n        address _creator,\n\n        uint256 _totalSupply,\n\n        string calldata _name,\n\n        string calldata _symbol\n\n    ) public {\n\n        require(!initialized, \"TOKEN_INITIALIZED\");\n\n        initialized = true;\n\n        totalSupply = _totalSupply;\n\n        balances[_creator] = _totalSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        emit Transfer(address(0), _creator, _totalSupply);\n\n    }","contract":"Fragment","time":0}]}
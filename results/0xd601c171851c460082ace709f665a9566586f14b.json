{"time":154,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        provenance = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        provenance = provenanceHash;\n    }","contract":"HewerClan","time":0},{"type":"external-function ","before":"function initPresaleWhitelist(address [] memory addr, uint [] memory quantities) public onlyOwner {\n        for (uint i = 0; i < addr.length; i++) {\n            whitelist[addr[i]] = WhitelistEntry(true, quantities[i]);\n        }\n    }","after":"function initPresaleWhitelist(address [] calldata addr, uint [] calldata quantities) public onlyOwner {\n        for (uint i = 0; i < addr.length; i++) {\n            whitelist[addr[i]] = WhitelistEntry(true, quantities[i]);\n        }\n    }","contract":"HewerClan","time":0},{"type":"immutable-restrict-modification ","before":"address public teamWallet;","after":"address public immutable teamWallet;","contract":"HewerClan","time":1},{"type":"immutable-restrict-modification ","before":"address public communityWallet;","after":"address public immutable communityWallet;","contract":"HewerClan","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"HewerClan","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"HewerClan","time":1}]}
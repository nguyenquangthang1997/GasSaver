{"time":168,"results":[{"type":"external-function ","before":"function initialize(string memory uri) public virtual initializer {\n\n        __ERC1155PresetMinterPauser_init(uri);\n\n    }","after":"function initialize(string calldata uri) public virtual initializer {\n\n        __ERC1155PresetMinterPauser_init(uri);\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0},{"type":"external-function ","before":"function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual {\n\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n\n        _mint(to, id, amount, data);\n\n    }","after":"function mint(address to, uint256 id, uint256 amount, bytes calldata data) public virtual {\n\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n\n        _mint(to, id, amount, data);\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0},{"type":"external-function ","before":"function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual {\n\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n\n        _mintBatch(to, ids, amounts, data);\n\n    }","after":"function mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) public virtual {\n\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n\n        _mintBatch(to, ids, amounts, data);\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0},{"type":"external-function ","before":"function setURI(string memory _newURI) public onlyOwner {\n\n        _setURI(_newURI);\n\n    }","after":"function setURI(string calldata _newURI) public onlyOwner {\n\n        _setURI(_newURI);\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0},{"type":"external-function ","before":"function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n\n        require(\n\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n\n            \"ERC1155: caller is not owner nor approved\"\n\n        );\n\n\n        _burnBatch(account, ids, values);\n\n    }","after":"function burnBatch(address account, uint256[] calldata ids, uint256[] calldata values) public virtual {\n\n        require(\n\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n\n            \"ERC1155: caller is not owner nor approved\"\n\n        );\n\n\n        _burnBatch(account, ids, values);\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0},{"type":"external-function ","before":"function balanceOfBatch(\n\n        address[] memory accounts,\n\n        uint256[] memory ids\n\n    )\n\n    public\n\n    view\n\n    virtual\n\n    override\n\n    returns (uint256[] memory)\n\n    {\n\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n\n        }\n\n\n        return batchBalances;\n\n    }","after":"function balanceOfBatch(\n\n        address[] calldata accounts,\n\n        uint256[] calldata ids\n\n    )\n\n    public\n\n    view\n\n    virtual\n\n    override\n\n    returns (uint256[] memory)\n\n    {\n\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n\n        }\n\n\n        return batchBalances;\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 id,\n\n        uint256 amount,\n\n        bytes memory data\n\n    )\n\n    public\n\n    virtual\n\n    override\n\n    {\n\n        require(\n\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n\n            \"ERC1155: caller is not owner nor approved\"\n\n        );\n\n        _safeTransferFrom(from, to, id, amount, data);\n\n    }","after":"function safeTransferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 id,\n\n        uint256 amount,\n\n        bytes calldata data\n\n    )\n\n    public\n\n    virtual\n\n    override\n\n    {\n\n        require(\n\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n\n            \"ERC1155: caller is not owner nor approved\"\n\n        );\n\n        _safeTransferFrom(from, to, id, amount, data);\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n\n        address from,\n\n        address to,\n\n        uint256[] memory ids,\n\n        uint256[] memory amounts,\n\n        bytes memory data\n\n    )\n\n    public\n\n    virtual\n\n    override\n\n    {\n\n        require(\n\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n\n            \"ERC1155: transfer caller is not owner nor approved\"\n\n        );\n\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n\n    }","after":"function safeBatchTransferFrom(\n\n        address from,\n\n        address to,\n\n        uint256[] calldata ids,\n\n        uint256[] calldata amounts,\n\n        bytes calldata data\n\n    )\n\n    public\n\n    virtual\n\n    override\n\n    {\n\n        require(\n\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n\n            \"ERC1155: transfer caller is not owner nor approved\"\n\n        );\n\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n\n    }","contract":"ERC1155PresetMinterPauserUpgradeable","time":0}]}
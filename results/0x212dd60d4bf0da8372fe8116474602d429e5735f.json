{"time":81,"results":[{"type":"external-function ","before":"function vest(address[] memory _owners, uint[] memory _amounts) public onlyOwner {\n\n        require(_owners.length == _amounts.length, \"Length of addresses & token amounts are not the same\");\n\n        for (uint i = 0; i < _owners.length; i++) {\n\n            _amounts[i] = _amounts[i].mul(10 ** 18);\n\n            require(_owners[i] != address(0), \"Vesting funds cannot be sent to 0x0\");\n\n            require(_amounts[i] > 0, \"Amount must be > 0\");\n\n            require(balances[owner] > _amounts[i], \"Not enough balance to vest\");\n\n            require(balances[_owners[i]].add(_amounts[i]) > balances[_owners[i]], \"Internal vesting error\");\n\n\n            // SafeMath.sub will throw if there is not enough balance.\n\n            balances[owner] = balances[owner].sub(_amounts[i]);\n\n            balances[_owners[i]] = balances[_owners[i]].add(_amounts[i]);\n\n            emit Transfer(owner, _owners[i], _amounts[i]);\n\n            lockup = Lockup({lockupAmount : _amounts[i]});\n\n            lockupParticipants[_owners[i]] = lockup;\n\n        }\n\n    }","after":"function vest(address[] calldata _owners, uint[] memory _amounts) public onlyOwner {\n\n        require(_owners.length == _amounts.length, \"Length of addresses & token amounts are not the same\");\n\n        for (uint i = 0; i < _owners.length; i++) {\n\n            _amounts[i] = _amounts[i].mul(10 ** 18);\n\n            require(_owners[i] != address(0), \"Vesting funds cannot be sent to 0x0\");\n\n            require(_amounts[i] > 0, \"Amount must be > 0\");\n\n            require(balances[owner] > _amounts[i], \"Not enough balance to vest\");\n\n            require(balances[_owners[i]].add(_amounts[i]) > balances[_owners[i]], \"Internal vesting error\");\n\n\n            // SafeMath.sub will throw if there is not enough balance.\n\n            balances[owner] = balances[owner].sub(_amounts[i]);\n\n            balances[_owners[i]] = balances[_owners[i]].add(_amounts[i]);\n\n            emit Transfer(owner, _owners[i], _amounts[i]);\n\n            lockup = Lockup({lockupAmount : _amounts[i]});\n\n            lockupParticipants[_owners[i]] = lockup;\n\n        }\n\n    }","contract":"StoboxToken","time":1},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"StoboxToken","time":0},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"StoboxToken","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"StoboxToken","time":0}]}
{"time":515,"results":[{"type":"external-function ","before":"function mintRareMoonCat(uint _cryptoRareTokenId, string memory _rareMoonCatTokenURI, uint _acclimatedMoonCatTokenId) public {\n\n        CryptoRares cryptoRares = CryptoRares(cryptoRaresAddress);\n        AcclimatedMoonCats acclimatedMoonCats = AcclimatedMoonCats(acclimatedMoonCatsAddress);\n\n        require(_exists(_acclimatedMoonCatTokenId) == false, \"RareMoonCat was already minted with passed in AcclimatedMoonCat.\");\n        require(invalidTypes[uint(cryptoRares.tokenIdToType(_cryptoRareTokenId))] == false, \"CryptoRare is not a valid wearable\");\n        require(cryptoRares.ownerOf(_cryptoRareTokenId) == msg.sender, \"msg.sender is not owner of rare token\");\n        require(acclimatedMoonCats.ownerOf(_acclimatedMoonCatTokenId) == msg.sender, \"msg.sender is not owner of mooncat id passed\");\n\n        cryptoRares.transferFrom(msg.sender, address(this), _cryptoRareTokenId);\n        acclimatedMoonCats.transferFrom(msg.sender, address(this), _acclimatedMoonCatTokenId);\n\n        // acclimatedMoonCat id is stored within token id of RareMoonCat\n        _safeMint(msg.sender, _acclimatedMoonCatTokenId);\n        _setTokenURI(_acclimatedMoonCatTokenId, _rareMoonCatTokenURI);\n\n        // update wValue\n        uint sectionForType = cryptoRareTypeToSection(uint(cryptoRares.tokenIdToType(_cryptoRareTokenId)));\n        rareMoonCatToWValue[_acclimatedMoonCatTokenId][sectionForType] = _cryptoRareTokenId;\n    }","after":"function mintRareMoonCat(uint _cryptoRareTokenId, string calldata _rareMoonCatTokenURI, uint _acclimatedMoonCatTokenId) public {\n\n        CryptoRares cryptoRares = CryptoRares(cryptoRaresAddress);\n        AcclimatedMoonCats acclimatedMoonCats = AcclimatedMoonCats(acclimatedMoonCatsAddress);\n\n        require(_exists(_acclimatedMoonCatTokenId) == false, \"RareMoonCat was already minted with passed in AcclimatedMoonCat.\");\n        require(invalidTypes[uint(cryptoRares.tokenIdToType(_cryptoRareTokenId))] == false, \"CryptoRare is not a valid wearable\");\n        require(cryptoRares.ownerOf(_cryptoRareTokenId) == msg.sender, \"msg.sender is not owner of rare token\");\n        require(acclimatedMoonCats.ownerOf(_acclimatedMoonCatTokenId) == msg.sender, \"msg.sender is not owner of mooncat id passed\");\n\n        cryptoRares.transferFrom(msg.sender, address(this), _cryptoRareTokenId);\n        acclimatedMoonCats.transferFrom(msg.sender, address(this), _acclimatedMoonCatTokenId);\n\n        // acclimatedMoonCat id is stored within token id of RareMoonCat\n        _safeMint(msg.sender, _acclimatedMoonCatTokenId);\n        _setTokenURI(_acclimatedMoonCatTokenId, _rareMoonCatTokenURI);\n\n        // update wValue\n        uint sectionForType = cryptoRareTypeToSection(uint(cryptoRares.tokenIdToType(_cryptoRareTokenId)));\n        rareMoonCatToWValue[_acclimatedMoonCatTokenId][sectionForType] = _cryptoRareTokenId;\n    }","contract":"RareMoonCats","time":0},{"type":"external-function ","before":"function addRareToRareMoonCat(uint _cryptoRareTokenId, string memory _rareMoonCatTokenURI, uint _rareMoonCatTokenId) public {\n        CryptoRares cryptoRares = CryptoRares(cryptoRaresAddress);\n\n        require(invalidTypes[uint(cryptoRares.tokenIdToType(_cryptoRareTokenId))] == false, \"CryptoRare is not a valid wearable\");\n        require(cryptoRares.ownerOf(_cryptoRareTokenId) == msg.sender, \"msg.sender is not owner of rare token\");\n        require(ownerOf(_rareMoonCatTokenId) == msg.sender, \"msg.sender is not owner of raremooncat\");\n\n        // make sure section is not being occupied by another wearable\n        uint sectionForType = cryptoRareTypeToSection(uint(cryptoRares.tokenIdToType(_cryptoRareTokenId)));\n        require(rareMoonCatToWValue[_rareMoonCatTokenId][sectionForType] == 0, \"RareMoonCat already has CryptoRare on corresponding section\");\n\n        // update URI\n        _setTokenURI(_rareMoonCatTokenId, _rareMoonCatTokenURI);\n        // transfer rare        \n        cryptoRares.transferFrom(msg.sender, address(this), _cryptoRareTokenId);\n        // update wValuye\n        rareMoonCatToWValue[_rareMoonCatTokenId][sectionForType] = _cryptoRareTokenId;\n    }","after":"function addRareToRareMoonCat(uint _cryptoRareTokenId, string calldata _rareMoonCatTokenURI, uint _rareMoonCatTokenId) public {\n        CryptoRares cryptoRares = CryptoRares(cryptoRaresAddress);\n\n        require(invalidTypes[uint(cryptoRares.tokenIdToType(_cryptoRareTokenId))] == false, \"CryptoRare is not a valid wearable\");\n        require(cryptoRares.ownerOf(_cryptoRareTokenId) == msg.sender, \"msg.sender is not owner of rare token\");\n        require(ownerOf(_rareMoonCatTokenId) == msg.sender, \"msg.sender is not owner of raremooncat\");\n\n        // make sure section is not being occupied by another wearable\n        uint sectionForType = cryptoRareTypeToSection(uint(cryptoRares.tokenIdToType(_cryptoRareTokenId)));\n        require(rareMoonCatToWValue[_rareMoonCatTokenId][sectionForType] == 0, \"RareMoonCat already has CryptoRare on corresponding section\");\n\n        // update URI\n        _setTokenURI(_rareMoonCatTokenId, _rareMoonCatTokenURI);\n        // transfer rare        \n        cryptoRares.transferFrom(msg.sender, address(this), _cryptoRareTokenId);\n        // update wValuye\n        rareMoonCatToWValue[_rareMoonCatTokenId][sectionForType] = _cryptoRareTokenId;\n    }","contract":"RareMoonCats","time":0},{"type":"external-function ","before":"function removeCryptoRareFromRareMoonCat(uint _section, string memory _newTokenURI, uint _rareMoonCatTokenId) public {\n\n        require(msg.sender == ownerOf(_rareMoonCatTokenId), \"Msg.sender is not owner of RareMoonCat\");\n        require(rareMoonCatIsNaked(_rareMoonCatTokenId) == false, \"RareMoonCat is already naked!\");\n\n        CryptoRares cryptoRares = CryptoRares(cryptoRaresAddress);\n\n        // check that rare is worn     \n        uint cryptoRareTokenId = rareMoonCatToWValue[_rareMoonCatTokenId][_section];\n        require(cryptoRareTokenId != 0, \"RareMoonCat is not wearing rare on passed in section\");\n\n        // transfer back cryptorare                \n        cryptoRares.transferFrom(address(this), msg.sender, cryptoRareTokenId);\n        // update wValue for RareMoonCat\n        rareMoonCatToWValue[_rareMoonCatTokenId][_section] = 0;\n\n        // if no rares are left worn, return mooncat to owner and burn raremooncat\n        if (rareMoonCatIsNaked(_rareMoonCatTokenId) == true) {\n            transferBackAcclimatedMoonCatAndBurnRareMoonCat(_rareMoonCatTokenId);\n        } else {\n            // else if there are still rares worn, set the new tokenURI\n            _setTokenURI(_rareMoonCatTokenId, _newTokenURI);\n        }\n    }","after":"function removeCryptoRareFromRareMoonCat(uint _section, string calldata _newTokenURI, uint _rareMoonCatTokenId) public {\n\n        require(msg.sender == ownerOf(_rareMoonCatTokenId), \"Msg.sender is not owner of RareMoonCat\");\n        require(rareMoonCatIsNaked(_rareMoonCatTokenId) == false, \"RareMoonCat is already naked!\");\n\n        CryptoRares cryptoRares = CryptoRares(cryptoRaresAddress);\n\n        // check that rare is worn     \n        uint cryptoRareTokenId = rareMoonCatToWValue[_rareMoonCatTokenId][_section];\n        require(cryptoRareTokenId != 0, \"RareMoonCat is not wearing rare on passed in section\");\n\n        // transfer back cryptorare                \n        cryptoRares.transferFrom(address(this), msg.sender, cryptoRareTokenId);\n        // update wValue for RareMoonCat\n        rareMoonCatToWValue[_rareMoonCatTokenId][_section] = 0;\n\n        // if no rares are left worn, return mooncat to owner and burn raremooncat\n        if (rareMoonCatIsNaked(_rareMoonCatTokenId) == true) {\n            transferBackAcclimatedMoonCatAndBurnRareMoonCat(_rareMoonCatTokenId);\n        } else {\n            // else if there are still rares worn, set the new tokenURI\n            _setTokenURI(_rareMoonCatTokenId, _newTokenURI);\n        }\n    }","contract":"RareMoonCats","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"RareMoonCats","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"RareMoonCats","time":1}]}
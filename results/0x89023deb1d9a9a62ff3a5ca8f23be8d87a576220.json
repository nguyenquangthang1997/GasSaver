{"time":311,"results":[{"type":"external-function ","before":"function balanceOfBatch(\n        address[] memory owners,\n        uint256[] memory ids\n    )\n    public\n    view\n    returns (uint256[] memory)\n    {\n        require(owners.length == ids.length, \"ERC1155: owners and IDs must have same lengths\");\n\n        uint256[] memory batchBalances = new uint256[](owners.length);\n\n        for (uint256 i = 0; i < owners.length; ++i) {\n            require(owners[i] != address(0), \"ERC1155: some address in batch balance query is zero\");\n            batchBalances[i] = _balances[ids[i]][owners[i]];\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(\n        address[] calldata owners,\n        uint256[] calldata ids\n    )\n    public\n    view\n    returns (uint256[] memory)\n    {\n        require(owners.length == ids.length, \"ERC1155: owners and IDs must have same lengths\");\n\n        uint256[] memory batchBalances = new uint256[](owners.length);\n\n        for (uint256 i = 0; i < owners.length; ++i) {\n            require(owners[i] != address(0), \"ERC1155: some address in batch balance query is zero\");\n            batchBalances[i] = _balances[ids[i]][owners[i]];\n        }\n\n        return batchBalances;\n    }","contract":"ConditionalTokens","time":0},{"type":"loop-duplication","before":"\nstart line 1850 column 12, end line 1854 column 12\nfor (uint i = 0; i < poolBalances.length; i++) {\n                uint balance = poolBalances[i];\n                if (poolWeight < balance)\n                    poolWeight = balance;\n            }\nstart line 1856 column 12, end line 1859 column 12\nfor (uint i = 0; i < poolBalances.length; i++) {\n                uint remaining = addedFunds.mul(poolBalances[i]) / poolWeight;\n                sendBackAmounts[i] = addedFunds.sub(remaining);\n            }","after":"// merge loop\n\nstart line 1850 column 12, end line 1854 column 12\nfor (uint i = 0; i < poolBalances.length; i++) {\n                uint balance = poolBalances[i];\n                if (poolWeight < balance)\n                    poolWeight = balance;\n            }\nstart line 1856 column 12, end line 1859 column 12\nfor (uint i = 0; i < poolBalances.length; i++) {\n                uint remaining = addedFunds.mul(poolBalances[i]) / poolWeight;\n                sendBackAmounts[i] = addedFunds.sub(remaining);\n            }","contract":"FixedProductMarketMaker","time":0},{"type":"loop-duplication","before":"\nstart line 1866 column 16, end line 1870 column 16\nfor (uint i = 0; i < distributionHint.length; i++) {\n                    uint hint = distributionHint[i];\n                    if (maxHint < hint)\n                        maxHint = hint;\n                }\nstart line 1872 column 16, end line 1876 column 16\nfor (uint i = 0; i < distributionHint.length; i++) {\n                    uint remaining = addedFunds.mul(distributionHint[i]) / maxHint;\n                    require(remaining > 0, \"must hint a valid distribution\");\n                    sendBackAmounts[i] = addedFunds.sub(remaining);\n                }","after":"// merge loop\n\nstart line 1866 column 16, end line 1870 column 16\nfor (uint i = 0; i < distributionHint.length; i++) {\n                    uint hint = distributionHint[i];\n                    if (maxHint < hint)\n                        maxHint = hint;\n                }\nstart line 1872 column 16, end line 1876 column 16\nfor (uint i = 0; i < distributionHint.length; i++) {\n                    uint remaining = addedFunds.mul(distributionHint[i]) / maxHint;\n                    require(remaining > 0, \"must hint a valid distribution\");\n                    sendBackAmounts[i] = addedFunds.sub(remaining);\n                }","contract":"FixedProductMarketMaker","time":0},{"type":"constant-restrict-modification  ","before":"uint public fee;","after":"uint public constant fee;","contract":"FixedProductMarketMaker","time":1},{"type":"constant-restrict-modification  ","before":"uint256 internal _totalSupply;","after":"uint256 internal constant _totalSupply;","contract":"FPMMDeterministicFactory","time":0},{"type":"constant-restrict-modification  ","before":"uint internal feePoolWeight;","after":"uint internal constant feePoolWeight;","contract":"FPMMDeterministicFactory","time":0},{"type":"constant-restrict-modification  ","before":"uint internal totalWithdrawnFees;","after":"uint internal constant totalWithdrawnFees;","contract":"FPMMDeterministicFactory","time":0}]}
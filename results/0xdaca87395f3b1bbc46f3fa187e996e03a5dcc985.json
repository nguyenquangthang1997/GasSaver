{"time":185,"results":[{"type":"external-function ","before":"   function mint(address to, bytes memory signature) external payable returns (uint256) {\n        uint256 mintPrice = _curve(_supply);\n        require(msg.value >= mintPrice, \"NOT_ENOUGH_ETH\");\n\n\n        // -------------------------- MINTING ---------------------------------------------------------\n        bytes32 hashedData = keccak256(abi.encodePacked(\"Mandala\", to));\n        address signer = hashedData.toEthSignedMessageHash().recover(signature);\n        _mint(uint256(signer), to);\n        // -------------------------- MINTING ---------------------------------------------------------\n\n        uint256 forCreator = mintPrice - _forReserve(mintPrice);\n\n        // responsibility of the creator to ensure it can receive the fund\n        bool success = true;\n        if (forCreator > 0) {\n            // solhint-disable-next-line check-send-result\n            success = creator.send(forCreator);\n        }\n\n        if (!success || msg.value > mintPrice) {\n            msg.sender.transfer(msg.value - mintPrice + (!success ? forCreator : 0));\n        }\n\n        emit Minted(uint256(signer), mintPrice);\n        return uint256(signer);\n  ","after":"   function mint(address to, bytes calldata signature) external payable returns (uint256) {\n        uint256 mintPrice = _curve(_supply);\n        require(msg.value >= mintPrice, \"NOT_ENOUGH_ETH\");\n\n\n        // -------------------------- MINTING ---------------------------------------------------------\n        bytes32 hashedData = keccak256(abi.encodePacked(\"Mandala\", to));\n        address signer = hashedData.toEthSignedMessageHash().recover(signature);\n        _mint(uint256(signer), to);\n        // -------------------------- MINTING ---------------------------------------------------------\n\n        uint256 forCreator = mintPrice - _forReserve(mintPrice);\n\n        // responsibility of the creator to ensure it can receive the fund\n        bool success = true;\n        if (forCreator > 0) {\n            // solhint-disable-next-line check-send-result\n            success = creator.send(forCreator);\n        }\n\n        if (!success || msg.value > mintPrice) {\n            msg.sender.transfer(msg.value - mintPrice + (!success ? forCreator : 0));\n        }\n\n        emit Minted(uint256(signer), mintPrice);\n        return uint256(signer);\n  ","contract":"MandalaToken","time":0}]}
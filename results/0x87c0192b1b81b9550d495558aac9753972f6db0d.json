{"time":89,"results":[{"type":"de-morgan-condition ","before":"!_bots[from] && !_bots[to]","after":"!(_bots[from] && _bots[to])","loc":{"start":{"line":453,"column":20},"end":{"line":453,"column":45}},"contract":"UNICAT","time":0},{"type":"state-data-arrangement ","before":"\nmapping(address => uint256) private _rOwned;\nmapping(address => uint256) private _tOwned;\nmapping(address => mapping(address => uint256)) private _allowances;\nmapping(address => bool) private _isExcludedFromFee;\nmapping(address => bool) private _bots;\nuint256 private constant MAX = ~uint256(0);\nuint256 private constant _tTotal = 1e12 * 10 ** 9;\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\nuint256 private _tFeeTotal;\nstring private constant _name = unicode\"UniCat Token\";\nstring private constant _symbol = unicode\"UNICAT\";\nuint8 private constant _decimals = 9;\nuint256 private _taxFee = 2;\nuint256 private _teamFee = 6;\nuint256 private _previousTaxFee = _taxFee;\nuint256 private _previousteamFee = _teamFee;\naddress payable private _FeeAddress;\naddress payable private _marketingWalletAddress;\nIUniswapV2Router02 private uniswapV2Router;\naddress private uniswapV2Pair;\nbool private tradingOpen = false;\nbool private _noTaxMode = false;\nbool private inSwap = false;\nuint256 private walletLimitDuration;","after":"mapping(address => uint256) private _rOwned;\nmapping(address => uint256) private _tOwned;\nmapping(address => mapping(address => uint256)) private _allowances;\nmapping(address => bool) private _isExcludedFromFee;\nmapping(address => bool) private _bots;\nuint256 private constant MAX = ~uint256(0);\nuint256 private constant _tTotal = 1e12 * 10 ** 9;\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\nuint256 private _tFeeTotal;\nstring private constant _name = unicode\"UniCat Token\";\nstring private constant _symbol = unicode\"UNICAT\";\nuint256 private _taxFee = 2;\nuint256 private _teamFee = 6;\nuint256 private _previousTaxFee = _taxFee;\nuint256 private _previousteamFee = _teamFee;\nIUniswapV2Router02 private uniswapV2Router;\nuint256 private walletLimitDuration;\naddress payable private _FeeAddress;\naddress payable private _marketingWalletAddress;\naddress private uniswapV2Pair;\nuint8 private constant _decimals = 9;\nbool private tradingOpen = false;\nbool private _noTaxMode = false;\nbool private inSwap = false;\n","contract":"UNICAT","time":1},{"type":"external-function ","before":"function setBots(address[] memory bots_) public onlyOwner {\n\n        for (uint i = 0; i < bots_.length; i++) {\n\n            if (bots_[i] != uniswapV2Pair && bots_[i] != address(uniswapV2Router)) {\n\n                _bots[bots_[i]] = true;\n\n            }\n\n        }\n\n    }","after":"function setBots(address[] calldata bots_) public onlyOwner {\n\n        for (uint i = 0; i < bots_.length; i++) {\n\n            if (bots_[i] != uniswapV2Pair && bots_[i] != address(uniswapV2Router)) {\n\n                _bots[bots_[i]] = true;\n\n            }\n\n        }\n\n    }","contract":"UNICAT","time":0},{"type":"immutable-restrict-modification ","before":"address payable private _FeeAddress;","after":"address payable private immutable _FeeAddress;","contract":"UNICAT","time":0},{"type":"constant-restrict-modification  ","before":"address private _previousOwner;","after":"address private constant _previousOwner;","contract":"UNICAT","time":0}]}
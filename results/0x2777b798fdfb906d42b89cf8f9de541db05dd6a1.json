{"time":86,"results":[{"type":"external-function ","before":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes memory _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","after":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes calldata _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","contract":"KeeperDistributor","time":0},{"type":"external-function ","before":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes memory _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","after":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes calldata _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","contract":"LPDistributor","time":0},{"type":"external-function ","before":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes memory _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","after":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes calldata _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","contract":"LPPreDistributor","time":0},{"type":"external-function ","before":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes memory _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","after":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes calldata _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","contract":"LPQ2Distributor","time":0},{"type":"external-function ","before":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes memory _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","after":"function claim(address _to, uint256 _earningsToDate, uint256 _nonce, bytes calldata _signature) external {\n        require(_earningsToDate > claimedAmount[_to], \"nothing to claim\");\n        require(_nonce > lastUsedNonce[_to], \"nonce is too old\");\n\n        address signer = ECDSA.recover(hashForSignature(_to, _earningsToDate, _nonce), _signature);\n        require(signer == accountManager, \"signer is not the account manager\");\n\n        lastUsedNonce[_to] = _nonce;\n        uint256 claimableAmount = _earningsToDate.sub(claimedAmount[_to]);\n        claimedAmount[_to] = _earningsToDate;\n\n        kprToken.transfer(_to, claimableAmount);\n        emit Claimed(_to, claimableAmount);\n    }","contract":"HidingGameDistributor","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"ERC20","time":0}]}
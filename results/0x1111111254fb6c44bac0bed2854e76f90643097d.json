{"time":222,"results":[{"type":"external-function ","before":"IERC20 {\n\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n\n}\n\n\n\n\n\n// File contracts/LimitOrderProtocolRFQ.sol\n\n\n\n\n\npragma solidity ^0.7.6;\n\npragma abicoder v2;\n\n\ncontract LimitOrderProtocolRFQ is EthReceiver, EIP712(\"1inch RFQ\", \"2\"), Permitable {\n\n    using SafeMath for uint256;\n\n    using SafeERC20 for IERC20;\n\n\n\n","after":"IERC20 {\n\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n\n}\n\n\n\n\n\n// File contracts/LimitOrderProtocolRFQ.sol\n\n\n\n\n\npragma solidity ^0.7.6;\n\npragma abicoder v2;\n\n\ncontract LimitOrderProtocolRFQ is EthReceiver, EIP712(\"1inch RFQ\", \"2\"), Permitable {\n\n    using SafeMath for uint256;\n\n    using SafeERC20 for IERC20;\n\n\n\n","contract":"AggregationRouterV4","time":0},{"type":"external-function ","before":"   }\n\n\n    bytes32 constant public LIMIT_ORDER_RFQ_TYPEHASH = keccak256(\n\n        \"OrderRFQ(uint256 info,address makerAsset,address takerAsset,address maker,address allowedSender,uint256 makingAmount,uint256 takingAmount)\"\n\n    );\n\n    uint256 private constant _UNWRAP_WETH_MASK = 1 << 255;\n\n\n    IWETH private immutable _WETH;  // solhint-disable-line var-name-mixedcase\n\n    mapping(address => mapping(uint256 => uint256)) private _invalidator;\n\n\n\n    constructor(ad","after":"   }\n\n\n    bytes32 constant public LIMIT_ORDER_RFQ_TYPEHASH = keccak256(\n\n        \"OrderRFQ(uint256 info,address makerAsset,address takerAsset,address maker,address allowedSender,uint256 makingAmount,uint256 takingAmount)\"\n\n    );\n\n    uint256 private constant _UNWRAP_WETH_MASK = 1 << 255;\n\n\n    IWETH private immutable _WETH;  // solhint-disable-line var-name-mixedcase\n\n    mapping(address => mapping(uint256 => uint256)) private _invalidator;\n\n\n\n    constructor(ad","contract":"AggregationRouterV4","time":0}]}
{"time":89,"results":[{"type":"external-function ","before":"function claimWeek(\n\n        address _liquidityProvider,\n\n        uint256 _week,\n\n        uint256 _claimedBalance,\n\n        bytes32[] memory _merkleProof\n\n    ) public {\n\n        require(!claimed[_week][_liquidityProvider]);\n\n        require(\n\n            verifyClaim(\n\n                _liquidityProvider,\n\n                _week,\n\n                _claimedBalance,\n\n                _merkleProof\n\n            ),\n\n            \"Incorrect merkle proof\"\n\n        );\n\n\n        claimed[_week][_liquidityProvider] = true;\n\n        disburse(_liquidityProvider, _claimedBalance);\n\n    }","after":"function claimWeek(\n\n        address _liquidityProvider,\n\n        uint256 _week,\n\n        uint256 _claimedBalance,\n\n        bytes32[] calldata _merkleProof\n\n    ) public {\n\n        require(!claimed[_week][_liquidityProvider]);\n\n        require(\n\n            verifyClaim(\n\n                _liquidityProvider,\n\n                _week,\n\n                _claimedBalance,\n\n                _merkleProof\n\n            ),\n\n            \"Incorrect merkle proof\"\n\n        );\n\n\n        claimed[_week][_liquidityProvider] = true;\n\n        disburse(_liquidityProvider, _claimedBalance);\n\n    }","contract":"MerkleRedeem","time":0},{"type":"external-function ","before":"function claimWeeks(address _liquidityProvider, Claim[] memory claims)\n\n    public\n\n    {\n\n        uint256 totalBalance = 0;\n\n        Claim memory claim;\n\n        for (uint256 i = 0; i < claims.length; i++) {\n\n            claim = claims[i];\n\n\n            require(!claimed[claim.week][_liquidityProvider]);\n\n            require(\n\n                verifyClaim(\n\n                    _liquidityProvider,\n\n                    claim.week,\n\n                    claim.balance,\n\n                    claim.merkleProof\n\n                ),\n\n                \"Incorrect merkle proof\"\n\n            );\n\n\n            totalBalance += claim.balance;\n\n            claimed[claim.week][_liquidityProvider] = true;\n\n        }\n\n        disburse(_liquidityProvider, totalBalance);\n\n    }","after":"function claimWeeks(address _liquidityProvider, Claim[] calldata claims)\n\n    public\n\n    {\n\n        uint256 totalBalance = 0;\n\n        Claim memory claim;\n\n        for (uint256 i = 0; i < claims.length; i++) {\n\n            claim = claims[i];\n\n\n            require(!claimed[claim.week][_liquidityProvider]);\n\n            require(\n\n                verifyClaim(\n\n                    _liquidityProvider,\n\n                    claim.week,\n\n                    claim.balance,\n\n                    claim.merkleProof\n\n                ),\n\n                \"Incorrect merkle proof\"\n\n            );\n\n\n            totalBalance += claim.balance;\n\n            claimed[claim.week][_liquidityProvider] = true;\n\n        }\n\n        disburse(_liquidityProvider, totalBalance);\n\n    }","contract":"MerkleRedeem","time":0},{"type":"external-function ","before":"function claimWeek(\n\n        address user,\n\n        uint256 week,\n\n        uint256 balance,\n\n        bytes32[] memory merkleProof\n\n    ) public {\n\n        redeemable.claimWeek(user, week, balance, merkleProof);\n\n    }","after":"function claimWeek(\n\n        address user,\n\n        uint256 week,\n\n        uint256 balance,\n\n        bytes32[] calldata merkleProof\n\n    ) public {\n\n        redeemable.claimWeek(user, week, balance, merkleProof);\n\n    }","contract":"Staking","time":0},{"type":"external-function ","before":"function claimWeeks(address user, MerkleRedeem.Claim[] memory claims)\n\n    public\n\n    {\n\n        redeemable.claimWeeks(user, claims);\n\n    }","after":"function claimWeeks(address user, MerkleRedeem.Claim[] calldata claims)\n\n    public\n\n    {\n\n        redeemable.claimWeeks(user, claims);\n\n    }","contract":"Staking","time":0}]}
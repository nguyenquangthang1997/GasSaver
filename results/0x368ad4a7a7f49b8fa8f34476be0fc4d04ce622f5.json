{"time":162,"results":[{"type":"state-data-arrangement ","before":"\naddress payable private withdrawAddress;\nuint8 public constant MAX_PURCHASE = 10;\nuint256 public constant OG_PRICE = 103010000000000000 wei;\nuint8 public constant COLORS_VARIATIONS = 6;\nbool public isFreeze;\nuint256 public maxTotalSupply;\nstring private _baseTokenURI;\nbool private _privateSale;\nbool private _publicSale;\nmapping(address => uint8) private _whiteList;\nmapping(address => uint8) private _publicSlots;\nmapping(uint256 => string) private _tokenURIs;\nmapping(uint256 => uint8) private _tokenColors;","after":"uint256 public constant OG_PRICE = 103010000000000000 wei;\nuint256 public maxTotalSupply;\nstring private _baseTokenURI;\nmapping(address => uint8) private _whiteList;\nmapping(address => uint8) private _publicSlots;\nmapping(uint256 => string) private _tokenURIs;\nmapping(uint256 => uint8) private _tokenColors;\naddress payable private withdrawAddress;\nuint8 public constant MAX_PURCHASE = 10;\nuint8 public constant COLORS_VARIATIONS = 6;\nbool public isFreeze;\nbool private _privateSale;\nbool private _publicSale;\n","contract":"Og","time":1},{"type":"external-function ","before":"function mintPrivate(uint8 numberOfTokens, uint8[] memory colors) public payable {\n        require(_privateSale, \"Private sale is not active!\");\n        require(numberOfTokens > 0, \"Number of tokens cannot be lower than, or equal to 0!\");\n        require(totalSupply() + numberOfTokens <= maxTotalSupply, \"Total Supply limit have reached!\");\n        require(numberOfTokens <= _whiteList[msg.sender], \"Not enough presale slots to mint tokens!\");\n        require(OG_PRICE * numberOfTokens == msg.value, \"Ether value sent is not correct!\");\n\n        _whiteList[msg.sender] = uint8(_whiteList[msg.sender].sub(numberOfTokens));\n        _mintTokens(msg.sender, numberOfTokens, colors);\n\n        payable(withdrawAddress).transfer(msg.value);\n\n        emit addressPrivateSlotsChange(msg.sender, _whiteList[msg.sender]);\n    }","after":"function mintPrivate(uint8 numberOfTokens, uint8[] calldata colors) public payable {\n        require(_privateSale, \"Private sale is not active!\");\n        require(numberOfTokens > 0, \"Number of tokens cannot be lower than, or equal to 0!\");\n        require(totalSupply() + numberOfTokens <= maxTotalSupply, \"Total Supply limit have reached!\");\n        require(numberOfTokens <= _whiteList[msg.sender], \"Not enough presale slots to mint tokens!\");\n        require(OG_PRICE * numberOfTokens == msg.value, \"Ether value sent is not correct!\");\n\n        _whiteList[msg.sender] = uint8(_whiteList[msg.sender].sub(numberOfTokens));\n        _mintTokens(msg.sender, numberOfTokens, colors);\n\n        payable(withdrawAddress).transfer(msg.value);\n\n        emit addressPrivateSlotsChange(msg.sender, _whiteList[msg.sender]);\n    }","contract":"Og","time":0},{"type":"external-function ","before":"function mintPublic(uint8 numberOfTokens, uint8[] memory colors) public payable {\n        require(_publicSale, \"Public sale is not active!\");\n        require(numberOfTokens > 0, \"Number of tokens cannot be lower than, or equal to 0!\");\n        require(numberOfTokens <= MAX_PURCHASE, \"Trying to mint too many tokens!\");\n        require(totalSupply() + numberOfTokens <= maxTotalSupply, \"Total Supply limit have reached!\");\n        require(numberOfTokens + _publicSlots[msg.sender] <= MAX_PURCHASE, \"Address limit have reached!\");\n        require(OG_PRICE * numberOfTokens == msg.value, \"Ether value sent is not correct!\");\n\n        _publicSlots[msg.sender] = uint8(_publicSlots[msg.sender].add(numberOfTokens));\n        _mintTokens(msg.sender, numberOfTokens, colors);\n\n        payable(withdrawAddress).transfer(msg.value);\n\n        emit addressPublicSlotsChange(msg.sender, MAX_PURCHASE - _publicSlots[msg.sender], maxTotalSupply - totalSupply());\n    }","after":"function mintPublic(uint8 numberOfTokens, uint8[] calldata colors) public payable {\n        require(_publicSale, \"Public sale is not active!\");\n        require(numberOfTokens > 0, \"Number of tokens cannot be lower than, or equal to 0!\");\n        require(numberOfTokens <= MAX_PURCHASE, \"Trying to mint too many tokens!\");\n        require(totalSupply() + numberOfTokens <= maxTotalSupply, \"Total Supply limit have reached!\");\n        require(numberOfTokens + _publicSlots[msg.sender] <= MAX_PURCHASE, \"Address limit have reached!\");\n        require(OG_PRICE * numberOfTokens == msg.value, \"Ether value sent is not correct!\");\n\n        _publicSlots[msg.sender] = uint8(_publicSlots[msg.sender].add(numberOfTokens));\n        _mintTokens(msg.sender, numberOfTokens, colors);\n\n        payable(withdrawAddress).transfer(msg.value);\n\n        emit addressPublicSlotsChange(msg.sender, MAX_PURCHASE - _publicSlots[msg.sender], maxTotalSupply - totalSupply());\n    }","contract":"Og","time":0},{"type":"external-function ","before":"function mintGiftToken(address to, uint8 numberOfTokens, uint8[] memory colors) public onlyOwner {\n        require(numberOfTokens > 0, \"Number of tokens cannot be lower than, or equal to 0!\");\n        require(totalSupply() + numberOfTokens <= maxTotalSupply, \"Total Supply limit have reached!\");\n\n        _mintTokens(to, numberOfTokens, colors);\n    }","after":"function mintGiftToken(address to, uint8 numberOfTokens, uint8[] calldata colors) public onlyOwner {\n        require(numberOfTokens > 0, \"Number of tokens cannot be lower than, or equal to 0!\");\n        require(totalSupply() + numberOfTokens <= maxTotalSupply, \"Total Supply limit have reached!\");\n\n        _mintTokens(to, numberOfTokens, colors);\n    }","contract":"Og","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyOwner {\n        require(!isFreeze, \"contract have already frozen!\");\n        _setTokenURI(tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata _tokenURI) external onlyOwner {\n        require(!isFreeze, \"contract have already frozen!\");\n        _setTokenURI(tokenId, _tokenURI);\n    }","contract":"Og","time":0},{"type":"immutable-restrict-modification ","before":"address payable private withdrawAddress;","after":"address payable private immutable withdrawAddress;","contract":"Og","time":0},{"type":"immutable-restrict-modification ","before":"string private _baseTokenURI;","after":"string private immutable _baseTokenURI;","contract":"Og","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Og","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Og","time":0}]}
{"time":273,"results":[{"type":"constant-restrict-modification  ","before":"uint256 public MAX_TOKENS = 100000 ether;","after":"uint256 public constant MAX_TOKENS = 100000 ether;","contract":"SFI","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SFI","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SFI","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SaffronLPBalanceToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SaffronLPBalanceToken","time":0},{"type":"external-function ","before":"function new_epoch(uint256 epoch, address[] memory saffron_v1_dsec_token_addresses, address[] memory saffron_v1_principal_token_addresses) public {\n\n        require(tranche_total_principal.length == epoch, \"improper new epoch\");\n\n\n        epoch_principal.push(0);\n\n        tranche_total_dsec.push([0, 0, 0, 0, 0]);\n\n        tranche_total_principal.push([0, 0, 0, 0, 0]);\n\n        tranche_total_vdsec_AA.push([0, 0, 0]);\n\n        tranche_total_vdsec_A.push([0, 0, 0]);\n\n        tranche_interest_earned.push([0, 0, 0, 0, 0]);\n\n        tranche_SFI_earned.push([0, 0, 0, 0, 0]);\n\n\n        dsec_token_addresses.push([// Address for each dsec token\n\n            saffron_v1_dsec_token_addresses[uint256(Tranche.S)],\n\n            saffron_v1_dsec_token_addresses[uint256(Tranche.AA)],\n\n            saffron_v1_dsec_token_addresses[uint256(Tranche.A)]\n\n            ]);\n\n\n        principal_token_addresses.push([// Address for each principal token\n\n            saffron_v1_principal_token_addresses[uint256(Tranche.S)],\n\n            saffron_v1_principal_token_addresses[uint256(Tranche.AA)],\n\n            saffron_v1_principal_token_addresses[uint256(Tranche.A)]\n\n            ]);\n\n\n        // Token info for looking up epoch and tranche of dsec tokens by token contract address\n\n        saffron_v1_token_info[saffron_v1_dsec_token_addresses[uint256(Tranche.S)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.S,\n\n        token_type : LPTokenType.dsec\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_dsec_token_addresses[uint256(Tranche.AA)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.AA,\n\n        token_type : LPTokenType.dsec\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_dsec_token_addresses[uint256(Tranche.A)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.A,\n\n        token_type : LPTokenType.dsec\n\n        });\n\n\n        // for looking up epoch and tranche of PRINCIPAL tokens by token contract address\n\n        saffron_v1_token_info[saffron_v1_principal_token_addresses[uint256(Tranche.S)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.S,\n\n        token_type : LPTokenType.principal\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_principal_token_addresses[uint256(Tranche.AA)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.AA,\n\n        token_type : LPTokenType.principal\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_principal_token_addresses[uint256(Tranche.A)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.A,\n\n        token_type : LPTokenType.principal\n\n        });\n\n    }","after":"function new_epoch(uint256 epoch, address[] calldata saffron_v1_dsec_token_addresses, address[] calldata saffron_v1_principal_token_addresses) public {\n\n        require(tranche_total_principal.length == epoch, \"improper new epoch\");\n\n\n        epoch_principal.push(0);\n\n        tranche_total_dsec.push([0, 0, 0, 0, 0]);\n\n        tranche_total_principal.push([0, 0, 0, 0, 0]);\n\n        tranche_total_vdsec_AA.push([0, 0, 0]);\n\n        tranche_total_vdsec_A.push([0, 0, 0]);\n\n        tranche_interest_earned.push([0, 0, 0, 0, 0]);\n\n        tranche_SFI_earned.push([0, 0, 0, 0, 0]);\n\n\n        dsec_token_addresses.push([// Address for each dsec token\n\n            saffron_v1_dsec_token_addresses[uint256(Tranche.S)],\n\n            saffron_v1_dsec_token_addresses[uint256(Tranche.AA)],\n\n            saffron_v1_dsec_token_addresses[uint256(Tranche.A)]\n\n            ]);\n\n\n        principal_token_addresses.push([// Address for each principal token\n\n            saffron_v1_principal_token_addresses[uint256(Tranche.S)],\n\n            saffron_v1_principal_token_addresses[uint256(Tranche.AA)],\n\n            saffron_v1_principal_token_addresses[uint256(Tranche.A)]\n\n            ]);\n\n\n        // Token info for looking up epoch and tranche of dsec tokens by token contract address\n\n        saffron_v1_token_info[saffron_v1_dsec_token_addresses[uint256(Tranche.S)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.S,\n\n        token_type : LPTokenType.dsec\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_dsec_token_addresses[uint256(Tranche.AA)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.AA,\n\n        token_type : LPTokenType.dsec\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_dsec_token_addresses[uint256(Tranche.A)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.A,\n\n        token_type : LPTokenType.dsec\n\n        });\n\n\n        // for looking up epoch and tranche of PRINCIPAL tokens by token contract address\n\n        saffron_v1_token_info[saffron_v1_principal_token_addresses[uint256(Tranche.S)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.S,\n\n        token_type : LPTokenType.principal\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_principal_token_addresses[uint256(Tranche.AA)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.AA,\n\n        token_type : LPTokenType.principal\n\n        });\n\n\n        saffron_v1_token_info[saffron_v1_principal_token_addresses[uint256(Tranche.A)]] = SaffronV1TokenInfo({\n\n        exists : true,\n\n        epoch : epoch,\n\n        tranche : Tranche.A,\n\n        token_type : LPTokenType.principal\n\n        });\n\n    }","contract":"SaffronPool","time":0},{"type":"immutable-restrict-modification ","before":"address public base_asset_address;","after":"address public immutable base_asset_address;","contract":"SaffronPool","time":1},{"type":"immutable-restrict-modification ","before":"address public SFI_address;","after":"address public immutable SFI_address;","contract":"SaffronPool","time":1},{"type":"immutable-restrict-modification ","before":"address public team_address;","after":"address public immutable team_address;","contract":"SaffronPool","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public tranche_A_multiplier;","after":"uint256 public immutable tranche_A_multiplier;","contract":"SaffronPool","time":1}]}
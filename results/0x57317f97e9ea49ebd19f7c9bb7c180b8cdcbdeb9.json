{"time":17,"results":[{"type":"external-function ","before":"function createToken(\n        string memory blob,\n        string memory name,\n        string memory symbol,\n        uint256 cap\n    )\n    public\n    returns (address token)\n    {\n        require(\n            cap != 0,\n            'DTFactory: zero cap is not allowed'\n        );\n\n        token = deploy(tokenTemplate);\n\n        require(\n            token != address(0),\n            'DTFactory: Failed to perform minimal deploy of a new token'\n        );\n        IERC20Template tokenInstance = IERC20Template(token);\n        require(\n            tokenInstance.initialize(\n                name,\n                symbol,\n                msg.sender,\n                cap,\n                blob,\n                communityFeeCollector\n            ),\n            'DTFactory: Unable to initialize token instance'\n        );\n        emit TokenCreated(token, tokenTemplate, name);\n        emit TokenRegistered(\n            token,\n            name,\n            symbol,\n            cap,\n            msg.sender,\n            blob\n        );\n        currentTokenCount += 1;\n    }","after":"function createToken(\n        string calldata blob,\n        string calldata name,\n        string calldata symbol,\n        uint256 cap\n    )\n    public\n    returns (address token)\n    {\n        require(\n            cap != 0,\n            'DTFactory: zero cap is not allowed'\n        );\n\n        token = deploy(tokenTemplate);\n\n        require(\n            token != address(0),\n            'DTFactory: Failed to perform minimal deploy of a new token'\n        );\n        IERC20Template tokenInstance = IERC20Template(token);\n        require(\n            tokenInstance.initialize(\n                name,\n                symbol,\n                msg.sender,\n                cap,\n                blob,\n                communityFeeCollector\n            ),\n            'DTFactory: Unable to initialize token instance'\n        );\n        emit TokenCreated(token, tokenTemplate, name);\n        emit TokenRegistered(\n            token,\n            name,\n            symbol,\n            cap,\n            msg.sender,\n            blob\n        );\n        currentTokenCount += 1;\n    }","contract":"DTFactory","time":0},{"type":"immutable-restrict-modification ","before":"address private tokenTemplate;","after":"address private immutable tokenTemplate;","contract":"DTFactory","time":0},{"type":"immutable-restrict-modification ","before":"address private communityFeeCollector;","after":"address private immutable communityFeeCollector;","contract":"DTFactory","time":0}]}
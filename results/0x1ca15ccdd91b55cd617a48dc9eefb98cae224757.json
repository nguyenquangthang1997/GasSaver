{"time":291,"results":[{"type":"state-data-arrangement ","before":"\n   bool private _isSlotRestricted = tr\n   mapping(bytes32 => bool) private _usedMessag\n   address private _sign","after":"   mapping(bytes32 => bool) private _usedMessag\n   address private _sign\n   bool private _isSlotRestricted = tr\n","contract":"SignedSlotRestrictable","time":0},{"type":"state-data-arrangement ","before":"\n   uint8 private constant MAX_PER_SYSTEM = 1\n   uint8 private constant OWNER_ALLOCATION =\n   uint256 public constant MINT_PRICE = (35 ether) / 1\n   AttractorSystem[] private _syste\n   mapping(uint256 => Token) private _toke\n   bool public isFullsetMintEnabled = fal\n   uint256 private constant _tokenIdSystemMultiplier = 1","after":"   uint256 public constant MINT_PRICE = (35 ether) / 1\n   AttractorSystem[] private _syste\n   mapping(uint256 => Token) private _toke\n   uint256 private constant _tokenIdSystemMultiplier = 1\n   uint8 private constant MAX_PER_SYSTEM = 1\n   uint8 private constant OWNER_ALLOCATION =\n   bool public isFullsetMintEnabled = fal\n","contract":"StrangeAttractors","time":0},{"type":"struct-data-arrangement ","before":"\n   string descript\n   uint8 numLeftForM\n   bool loc\n   ISvgRenderer rende\n   uint8 defaultRenderS\n   uint32[] defaultColorAnch\n   IAttractorSolver sol\n   SolverParameters solverParamet","after":"   string descript\n   ISvgRenderer rende\n   uint32[] defaultColorAnch\n   IAttractorSolver sol\n   SolverParameters solverParamet\n   uint8 numLeftForM\n   bool loc\n   uint8 defaultRenderS\n","contract":"StrangeAttractors","time":0},{"type":"external-function ","before":"   function isValidSlot(\n        address grantee,\n        uint256 nonce,\n        bytes memory signature\n    ) external view returns (bool) {\n        bytes32 message = createSlotMessage(grantee, nonce);\n        return ((!_usedMessages[message]) &&\n        (message.toEthSignedMessageHash().recover(signature) == _signer));\n  ","after":"   function isValidSlot(\n        address grantee,\n        uint256 nonce,\n        bytes calldata signature\n    ) external view returns (bool) {\n        bytes32 message = createSlotMessage(grantee, nonce);\n        return ((!_usedMessages[message]) &&\n        (message.toEthSignedMessageHash().recover(signature) == _signer));\n  ","contract":"StrangeAttractors","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"StrangeAttractors","time":1},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"StrangeAttractors","time":1}]}
{"time":162,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function createNFTMould(\n\n        string memory artworkHashIPFS,\n\n        string memory artworkHashArweave,\n\n        string memory artistName,\n\n        string memory artistNote,\n\n        address signatureAddress,\n\n        string memory signatureHash,\n\n        string memory signatureMessage,\n\n        uint256 editionSize,\n\n        string memory artTitle,\n\n        string memory artworkType,\n\n        string memory boxDetails,\n\n        address payable[] memory royaltyAddress,\n\n        uint256[] memory royaltyBps)\n\n    public authorised {\n\n        mintingActive[NFTIndex] = true;\n\n\n        hashIPFSMemory[NFTIndex] = artworkHashIPFS;\n\n        hashArweaveMemory[NFTIndex] = artworkHashArweave;\n\n        artistNameMemory[NFTIndex] = artistName;\n\n        artistNoteMemory[NFTIndex] = artistNote;\n\n\n        signatureAddressMemory[NFTIndex] = signatureAddress;\n\n        signatureHashMemory[NFTIndex] = signatureHash;\n\n        signatureMessageMemory[NFTIndex] = signatureMessage;\n\n\n        editionSizeMemory[NFTIndex] = editionSize;\n\n        artTitleMemory[NFTIndex] = artTitle;\n\n        artworkTypeMemory[NFTIndex] = artworkType;\n\n        boxDetailsMemory[NFTIndex] = boxDetails;\n\n\n        totalCreated[NFTIndex] = 0;\n\n        totalMinted[NFTIndex] = 0;\n\n\n        royaltyAddressMemory[NFTIndex] = royaltyAddress;\n\n        royaltyMemory[NFTIndex] = royaltyBps;\n\n\n        emit NewNFTMouldCreated(NFTIndex, artworkHashIPFS, artworkHashArweave, artistName, editionSize, artTitle, artworkType, boxDetails);\n\n        emit NewNFTMouldSignatures(NFTIndex, signatureAddress, signatureHash, signatureMessage);\n\n\n        NFTIndex = NFTIndex + 1;\n\n    }","after":"function createNFTMould(\n\n        string calldata artworkHashIPFS,\n\n        string calldata artworkHashArweave,\n\n        string calldata artistName,\n\n        string calldata artistNote,\n\n        address signatureAddress,\n\n        string calldata signatureHash,\n\n        string calldata signatureMessage,\n\n        uint256 editionSize,\n\n        string calldata artTitle,\n\n        string calldata artworkType,\n\n        string calldata boxDetails,\n\n        address payable[] calldata royaltyAddress,\n\n        uint256[] calldata royaltyBps)\n\n    public authorised {\n\n        mintingActive[NFTIndex] = true;\n\n\n        hashIPFSMemory[NFTIndex] = artworkHashIPFS;\n\n        hashArweaveMemory[NFTIndex] = artworkHashArweave;\n\n        artistNameMemory[NFTIndex] = artistName;\n\n        artistNoteMemory[NFTIndex] = artistNote;\n\n\n        signatureAddressMemory[NFTIndex] = signatureAddress;\n\n        signatureHashMemory[NFTIndex] = signatureHash;\n\n        signatureMessageMemory[NFTIndex] = signatureMessage;\n\n\n        editionSizeMemory[NFTIndex] = editionSize;\n\n        artTitleMemory[NFTIndex] = artTitle;\n\n        artworkTypeMemory[NFTIndex] = artworkType;\n\n        boxDetailsMemory[NFTIndex] = boxDetails;\n\n\n        totalCreated[NFTIndex] = 0;\n\n        totalMinted[NFTIndex] = 0;\n\n\n        royaltyAddressMemory[NFTIndex] = royaltyAddress;\n\n        royaltyMemory[NFTIndex] = royaltyBps;\n\n\n        emit NewNFTMouldCreated(NFTIndex, artworkHashIPFS, artworkHashArweave, artistName, editionSize, artTitle, artworkType, boxDetails);\n\n        emit NewNFTMouldSignatures(NFTIndex, signatureAddress, signatureHash, signatureMessage);\n\n\n        NFTIndex = NFTIndex + 1;\n\n    }","contract":"NFTBoxesNFT","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"NFTBoxesNFT","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"NFTBoxesNFT","time":1}]}
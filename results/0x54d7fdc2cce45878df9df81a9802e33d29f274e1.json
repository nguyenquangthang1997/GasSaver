{"time":194,"results":[{"type":"immutable-restrict-modification ","before":"ess\n   */\n    address publ","after":"ess\n   */\n    address publ","contract":"Account","time":0},{"type":"immutable-restrict-modification ","before":"    address public regis","after":"    address public regis","contract":"Account","time":0},{"type":"constant-restrict-modification  ","before":"uint256;\n\n    strin","after":"uint256;\n\n    strin","contract":"ERC20Token","time":1},{"type":"constant-restrict-modification  ","before":"lic name;\n    string ","after":"lic name;\n    string ","contract":"ERC20Token","time":1},{"type":"constant-restrict-modification  ","before":"c symbol;\n    uint8 pu","after":"c symbol;\n    uint8 pu","contract":"ERC20Token","time":1},{"type":"external-function ","before":"ch data\n   */\n    function sendBatch(\n        address[] memory to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            msg.sender,\n            msg.sender,\n            to,\n            dat","after":"ch data\n   */\n    function sendBatch(\n        address[] calldata to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            msg.sender,\n            msg.sender,\n            to,\n            dat","contract":"Gateway","time":0},{"type":"external-function ","before":"ch data\n   */\n    function sendBatchFromAccount(\n        address account,\n        address[] memory to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            account,\n            msg.sender,\n            to,\n            dat","after":"ch data\n   */\n    function sendBatchFromAccount(\n        address account,\n        address[] calldata to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            account,\n            msg.sender,\n            to,\n            dat","contract":"Gateway","time":0},{"type":"external-function ","before":"gnature\n   */\n    function delegateBatch(\n        address account,\n        uint256 nonce,\n        address[] memory to,\n        bytes[] memory data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n            dat","after":"gnature\n   */\n    function delegateBatch(\n        address account,\n        uint256 nonce,\n        address[] calldata to,\n        bytes[] calldata data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n            dat","contract":"Gateway","time":0},{"type":"external-function ","before":"gnature\n   */\n    function delegateBatchWithGasPrice(\n        address account,\n        uint256 nonce,\n        address[] memory to,\n        bytes[] memory data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data,\n                tx.gasprice\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n            dat","after":"gnature\n   */\n    function delegateBatchWithGasPrice(\n        address account,\n        uint256 nonce,\n        address[] calldata to,\n        bytes[] calldata data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data,\n                tx.gasprice\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n            dat","contract":"Gateway","time":0},{"type":"external-function ","before":"y error\n   */\n    function delegateBatches(\n        bytes[] memory batches,\n        bool revertOnFailure\n    )\n    public\n    {\n        require(\n            batches.length > 0,\n            \"Gateway: cannot delegate empty batches\"\n        );\n\n        bool anySucceeded;\n\n        for (uint256 i = 0; i < batches.length; i++) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool succeeded,) = address(this).call(batches[i]);\n\n            if (revertOnFailure) {\n                require(\n                    succeeded,\n                    \"Gateway: batch reverted\"\n                );\n            } else if (succeeded && !anySucceeded) {\n                anySucceeded = true;\n            }\n\n            emit BatchDelegated(\n                msg.sender,\n                batches[i],\n                succeeded\n            );\n        }\n\n        if (!anySucceeded) {\n            revert(\"Gateway: all batches reverted\"","after":"y error\n   */\n    function delegateBatches(\n        bytes[] calldata batches,\n        bool revertOnFailure\n    )\n    public\n    {\n        require(\n            batches.length > 0,\n            \"Gateway: cannot delegate empty batches\"\n        );\n\n        bool anySucceeded;\n\n        for (uint256 i = 0; i < batches.length; i++) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool succeeded,) = address(this).call(batches[i]);\n\n            if (revertOnFailure) {\n                require(\n                    succeeded,\n                    \"Gateway: batch reverted\"\n                );\n            } else if (succeeded && !anySucceeded) {\n                anySucceeded = true;\n            }\n\n            emit BatchDelegated(\n                msg.sender,\n                batches[i],\n                succeeded\n            );\n        }\n\n        if (!anySucceeded) {\n            revert(\"Gateway: all batches reverted\"","contract":"Gateway","time":0},{"type":"external-function ","before":"rn hash\n   */\n    function hashDelegatedBatch(\n        DelegatedBatch memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data\n            ","after":"rn hash\n   */\n    function hashDelegatedBatch(\n        DelegatedBatch memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data\n            ","contract":"Gateway","time":0},{"type":"external-function ","before":"rn hash\n   */\n    function hashDelegatedBatchWithGasPrice(\n        DelegatedBatchWithGasPrice memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data,\n                delegatedBatch.gasPrice\n            ","after":"rn hash\n   */\n    function hashDelegatedBatchWithGasPrice(\n        DelegatedBatchWithGasPrice memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data,\n                delegatedBatch.gasPrice\n            ","contract":"Gateway","time":0}]}
{"time":567,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"DAI","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"DAI","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public constant FLOOR_BASIS_POINTS = 5000;\nuint256 public constant BASIS_POINTS_DIVISOR = 10000;\nbool public isInitialized;\nuint256 public lgeEndTime;\nuint256 public lpUnlockTime;\nbool public lgeIsActive;\nuint256 public ethReceived;\naddress public xvix;\naddress public weth;\naddress public dai;\naddress public lgeTokenWETH;\naddress public lgeTokenDAI;\naddress public floor;\naddress public minter;\naddress public router;\naddress public factory;\naddress[] public path;\naddress public gov;","after":"uint256 public constant FLOOR_BASIS_POINTS = 5000;\nuint256 public constant BASIS_POINTS_DIVISOR = 10000;\nuint256 public lgeEndTime;\nuint256 public lpUnlockTime;\nuint256 public ethReceived;\naddress[] public path;\naddress public xvix;\naddress public weth;\naddress public dai;\naddress public lgeTokenWETH;\naddress public lgeTokenDAI;\naddress public floor;\naddress public minter;\naddress public router;\naddress public factory;\naddress public gov;\nbool public isInitialized;\nbool public lgeIsActive;\n","contract":"Distributor","time":2},{"type":"external-function ","before":"function initialize(\n        address[] memory _addresses,\n        uint256 _lgeEndTime,\n        uint256 _lpUnlockTime\n    ) public nonReentrant {\n        require(msg.sender == gov, \"Distributor: forbidden\");\n        require(!isInitialized, \"Distributor: already initialized\");\n        isInitialized = true;\n\n        xvix = _addresses[0];\n        weth = _addresses[1];\n        dai = _addresses[2];\n        lgeTokenWETH = _addresses[3];\n        lgeTokenDAI = _addresses[4];\n        floor = _addresses[5];\n        minter = _addresses[6];\n        router = _addresses[7];\n        factory = _addresses[8];\n\n        require(ILGEToken(lgeTokenWETH).token() == weth, \"Distributor: misconfigured lgeTokenWETH\");\n        require(ILGEToken(lgeTokenDAI).token() == dai, \"Distributor: misconfigured lgeTokenDAI\");\n\n        path.push(weth);\n        path.push(dai);\n\n        lgeEndTime = _lgeEndTime;\n        lpUnlockTime = _lpUnlockTime;\n    }","after":"function initialize(\n        address[] calldata _addresses,\n        uint256 _lgeEndTime,\n        uint256 _lpUnlockTime\n    ) public nonReentrant {\n        require(msg.sender == gov, \"Distributor: forbidden\");\n        require(!isInitialized, \"Distributor: already initialized\");\n        isInitialized = true;\n\n        xvix = _addresses[0];\n        weth = _addresses[1];\n        dai = _addresses[2];\n        lgeTokenWETH = _addresses[3];\n        lgeTokenDAI = _addresses[4];\n        floor = _addresses[5];\n        minter = _addresses[6];\n        router = _addresses[7];\n        factory = _addresses[8];\n\n        require(ILGEToken(lgeTokenWETH).token() == weth, \"Distributor: misconfigured lgeTokenWETH\");\n        require(ILGEToken(lgeTokenDAI).token() == dai, \"Distributor: misconfigured lgeTokenDAI\");\n\n        path.push(weth);\n        path.push(dai);\n\n        lgeEndTime = _lgeEndTime;\n        lpUnlockTime = _lpUnlockTime;\n    }","contract":"Distributor","time":0},{"type":"immutable-restrict-modification ","before":"address public gov;","after":"address public immutable gov;","contract":"Distributor","time":0},{"type":"state-data-arrangement ","before":"\nstring public name;\nstring public symbol;\nuint8 public decimals;\nuint256 public override totalSupply;\naddress public distributor;\naddress public override token;\nuint256 public override refBalance;\nuint256 public override refSupply;\nmapping(address => uint256) public balances;\nmapping(address => mapping(address => uint256)) public allowances;","after":"string public name;\nstring public symbol;\nuint256 public override totalSupply;\nuint256 public override refBalance;\nuint256 public override refSupply;\nmapping(address => uint256) public balances;\nmapping(address => mapping(address => uint256)) public allowances;\naddress public distributor;\naddress public override token;\nuint8 public decimals;\n","contract":"LGEToken","time":0},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"LGEToken","time":0},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"LGEToken","time":0},{"type":"immutable-restrict-modification ","before":"uint8 public decimals;","after":"uint8 public immutable decimals;","contract":"LGEToken","time":0},{"type":"immutable-restrict-modification ","before":"address public distributor;","after":"address public immutable distributor;","contract":"LGEToken","time":0},{"type":"immutable-restrict-modification ","before":"address public override token;","after":"address public override immutable token;","contract":"LGEToken","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public constant BASIS_POINTS_DIVISOR = 10000;\naddress public immutable xvix;\naddress public immutable floor;\naddress public immutable distributor;\nuint256 public ethReserve;\nbool public active = false;","after":"uint256 public constant BASIS_POINTS_DIVISOR = 10000;\nuint256 public ethReserve;\naddress public immutable xvix;\naddress public immutable floor;\naddress public immutable distributor;\nbool public active = false;\n","contract":"Minter","time":0},{"type":"immutable-restrict-modification ","before":"address public override factory;","after":"address public override immutable factory;","contract":"UniswapV2Pair","time":1},{"type":"external-function ","before":"function getAmountsOut(uint amountIn, address[] memory path)\n    public\n    view\n    virtual\n    returns (uint[] memory amounts)\n    {\n        return UniswapV2LibraryMock.getAmountsOut(factory, amountIn, path);\n    }","after":"function getAmountsOut(uint amountIn, address[] calldata path)\n    public\n    view\n    virtual\n    returns (uint[] memory amounts)\n    {\n        return UniswapV2LibraryMock.getAmountsOut(factory, amountIn, path);\n    }","contract":"UniswapV2Router","time":0},{"type":"external-function ","before":"function getAmountsIn(uint amountOut, address[] memory path)\n    public\n    view\n    virtual\n    returns (uint[] memory amounts)\n    {\n        return UniswapV2LibraryMock.getAmountsIn(factory, amountOut, path);\n    }","after":"function getAmountsIn(uint amountOut, address[] calldata path)\n    public\n    view\n    virtual\n    returns (uint[] memory amounts)\n    {\n        return UniswapV2LibraryMock.getAmountsIn(factory, amountOut, path);\n    }","contract":"UniswapV2Router","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"WETH","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"WETH","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public constant BASIS_POINTS_DIVISOR = 10000;\nuint256 public constant MAX_FUND_BASIS_POINTS = 20;\nuint256 public constant MAX_BURN_BASIS_POINTS = 500;\nuint256 public constant MIN_REBASE_INTERVAL = 30 minutes;\nuint256 public constant MAX_REBASE_INTERVAL = 1 weeks;\nuint256 public constant MAX_INTERVALS_PER_REBASE = 10;\nuint256 public constant MAX_REBASE_BASIS_POINTS = 500;\nuint256 public constant MAX_NORMAL_DIVISOR = 10 ** 23;\nuint256 public constant SAFE_DIVISOR = 10 ** 8;\nstring public constant name = \"XVIX\";\nstring public constant symbol = \"XVIX\";\nuint8 public constant decimals = 18;\nstring public website = \"https://xvix.finance/\";\naddress public gov;\naddress public minter;\naddress public floor;\naddress public distributor;\naddress public fund;\nuint256 public _normalSupply;\nuint256 public _safeSupply;\nuint256 public override maxSupply;\nuint256 public normalDivisor = 10 ** 8;\nuint256 public rebaseInterval = 1 hours;\nuint256 public rebaseBasisPoints = 2;\nuint256 public nextRebaseTime = 0;\nuint256 public defaultSenderBurnBasisPoints = 0;\nuint256 public defaultSenderFundBasisPoints = 0;\nuint256 public defaultReceiverBurnBasisPoints = 43;\nuint256 public defaultReceiverFundBasisPoints = 7;\nuint256 public govHandoverTime;\nmapping(address => uint256) public balances;\nmapping(address => mapping(address => uint256)) public allowances;\nmapping(address => TransferConfig) public transferConfigs;\nmapping(address => bool) public safes;","after":"uint256 public constant BASIS_POINTS_DIVISOR = 10000;\nuint256 public constant MAX_FUND_BASIS_POINTS = 20;\nuint256 public constant MAX_BURN_BASIS_POINTS = 500;\nuint256 public constant MIN_REBASE_INTERVAL = 30 minutes;\nuint256 public constant MAX_REBASE_INTERVAL = 1 weeks;\nuint256 public constant MAX_INTERVALS_PER_REBASE = 10;\nuint256 public constant MAX_REBASE_BASIS_POINTS = 500;\nuint256 public constant MAX_NORMAL_DIVISOR = 10 ** 23;\nuint256 public constant SAFE_DIVISOR = 10 ** 8;\nstring public constant name = \"XVIX\";\nstring public constant symbol = \"XVIX\";\nstring public website = \"https://xvix.finance/\";\nuint256 public _normalSupply;\nuint256 public _safeSupply;\nuint256 public override maxSupply;\nuint256 public normalDivisor = 10 ** 8;\nuint256 public rebaseInterval = 1 hours;\nuint256 public rebaseBasisPoints = 2;\nuint256 public nextRebaseTime = 0;\nuint256 public defaultSenderBurnBasisPoints = 0;\nuint256 public defaultSenderFundBasisPoints = 0;\nuint256 public defaultReceiverBurnBasisPoints = 43;\nuint256 public defaultReceiverFundBasisPoints = 7;\nuint256 public govHandoverTime;\nmapping(address => uint256) public balances;\nmapping(address => mapping(address => uint256)) public allowances;\nmapping(address => TransferConfig) public transferConfigs;\nmapping(address => bool) public safes;\naddress public gov;\naddress public minter;\naddress public floor;\naddress public distributor;\naddress public fund;\nuint8 public constant decimals = 18;\n","contract":"XVIX","time":0},{"type":"external-function ","before":"function setWebsite(string memory _website) public onlyGov {\n        website = _website;\n    }","after":"function setWebsite(string calldata _website) public onlyGov {\n        website = _website;\n    }","contract":"XVIX","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public govHandoverTime;","after":"uint256 public immutable govHandoverTime;","contract":"XVIX","time":0}]}
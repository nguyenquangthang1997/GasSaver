{"time":182,"results":[{"type":"external-function ","before":"function setAddress(string memory _name, address _address) external onlyOwner {\n        bytes32 nameHash = _getNameHash(_name);\n        address oldAddress = addresses[nameHash];\n        addresses[nameHash] = _address;\n\n        emit AddressSet(_name, _address, oldAddress);\n    }","after":"function setAddress(string calldata _name, address _address) external onlyOwner {\n        bytes32 nameHash = _getNameHash(_name);\n        address oldAddress = addresses[nameHash];\n        addresses[nameHash] = _address;\n\n        emit AddressSet(_name, _address, oldAddress);\n    }","contract":"Lib_AddressManager","time":0},{"type":"external-function ","before":"function getAddress(string memory _name) external view returns (address) {\n        return addresses[_getNameHash(_name)];\n    }","after":"function getAddress(string calldata _name) external view returns (address) {\n        return addresses[_getNameHash(_name)];\n    }","contract":"Lib_AddressManager","time":0},{"type":"loop-calculation","before":"uint256 listPtr;","after":"// move outside for loop\nuint256 listPtr;","loc":{"start":{"line":2046,"column":12},"end":{"line":2046,"column":27}},"contract":"Lib_RLPWriter","time":0},{"type":"external-function ","before":"function appendStateBatch(bytes32[] memory _batch, uint256 _shouldStartAtElement) public {\n        require(1 == 0, \"don't use\");\n        //appendStateBatchByChainId(DEFAULT_CHAINID, _batch, _shouldStartAtElement, \"1088_MVM_Proposer\");\n    }","after":"function appendStateBatch(bytes32[] calldata _batch, uint256 _shouldStartAtElement) public {\n        require(1 == 0, \"don't use\");\n        //appendStateBatchByChainId(DEFAULT_CHAINID, _batch, _shouldStartAtElement, \"1088_MVM_Proposer\");\n    }","contract":"StateCommitmentChain","time":0},{"type":"external-function ","before":"function deleteStateBatch(Lib_OVMCodec.ChainBatchHeader memory _batchHeader) public {\n        deleteStateBatchByChainId(DEFAULT_CHAINID, _batchHeader);\n    }","after":"function deleteStateBatch(Lib_OVMCodec.ChainBatchHeader calldata _batchHeader) public {\n        deleteStateBatchByChainId(DEFAULT_CHAINID, _batchHeader);\n    }","contract":"StateCommitmentChain","time":0},{"type":"external-function ","before":"function verifyStateCommitment(\n        bytes32 _element,\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\n        Lib_OVMCodec.ChainInclusionProof memory _proof\n    ) public view returns (bool) {\n        return verifyStateCommitmentByChainId(DEFAULT_CHAINID, _element, _batchHeader, _proof);\n    }","after":"function verifyStateCommitment(\n        bytes32 _element,\n        Lib_OVMCodec.ChainBatchHeader calldata _batchHeader,\n        Lib_OVMCodec.ChainInclusionProof calldata _proof\n    ) public view returns (bool) {\n        return verifyStateCommitmentByChainId(DEFAULT_CHAINID, _element, _batchHeader, _proof);\n    }","contract":"StateCommitmentChain","time":0},{"type":"external-function ","before":"function insideFraudProofWindow(Lib_OVMCodec.ChainBatchHeader memory _batchHeader)\n    public\n    view\n    returns (bool _inside)\n    {\n        (uint256 timestamp,) = abi.decode(_batchHeader.extraData, (uint256, address));\n\n        require(timestamp != 0, \"Batch header timestamp cannot be zero\");\n        return (timestamp + FRAUD_PROOF_WINDOW) > block.timestamp;\n    }","after":"function insideFraudProofWindow(Lib_OVMCodec.ChainBatchHeader calldata _batchHeader)\n    public\n    view\n    returns (bool _inside)\n    {\n        (uint256 timestamp,) = abi.decode(_batchHeader.extraData, (uint256, address));\n\n        require(timestamp != 0, \"Batch header timestamp cannot be zero\");\n        return (timestamp + FRAUD_PROOF_WINDOW) > block.timestamp;\n    }","contract":"StateCommitmentChain","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public SEQUENCER_PUBLISH_WINDOW;","after":"uint256 public immutable SEQUENCER_PUBLISH_WINDOW;","contract":"StateCommitmentChain","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public DEFAULT_CHAINID = 1088;","after":"uint256 public constant DEFAULT_CHAINID = 1088;","contract":"StateCommitmentChain","time":0}]}
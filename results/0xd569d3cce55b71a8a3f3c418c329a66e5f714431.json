{"time":332,"results":[{"type":"external-function ","before":"ce \n      Deploys a project. This will mint an ERC-721 into the `_owner`'s account, configure a first funding cycle, and set up any mods.\n\n      @dev\n      Each operation withing this transaction can be done in sequence separately.\n\n      @dev\n      Anyone can deploy a project on an owner's behalf.\n\n      @param _owner The address that will own the project.\n      @param _handle The project's unique handle.\n      @param _uri A link to information about the project and this funding cycle.\n      @param _properties The funding cycle configuration.\n        @dev _properties.target The amount that the project wants to receive in this funding cycle. Sent as a wad.\n        @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\n        @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time.\n        @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle.\n        @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage.\n          If it's ","after":"ce \n      Deploys a project. This will mint an ERC-721 into the `_owner`'s account, configure a first funding cycle, and set up any mods.\n\n      @dev\n      Each operation withing this transaction can be done in sequence separately.\n\n      @dev\n      Anyone can deploy a project on an owner's behalf.\n\n      @param _owner The address that will own the project.\n      @param _handle The project's unique handle.\n      @param _uri A link to information about the project and this funding cycle.\n      @param _properties The funding cycle configuration.\n        @dev _properties.target The amount that the project wants to receive in this funding cycle. Sent as a wad.\n        @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\n        @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time.\n        @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle.\n        @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage.\n          If it's ","contract":"TerminalV1","time":1},{"type":"external-function ","before":"sn't distributed tickets yet, or\n      sets the properties of the proposed funding cycle that will take effect once the current one expires\n      if it is approved by the current funding cycle's ballot.\n\n      @dev\n      Only a project's owner or a designated operator can configure its funding cycles.\n\n      @param _projectId The ID of the project being reconfigured. \n      @param _properties The funding cycle configuration.\n        @dev _properties.target The amount that the project wants to receive in this funding stage. Sent as a wad.\n        @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\n        @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time.\n        @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle.\n        @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage.\n          If it's 200, each funding stage will have equal weight.\n          If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage.\n          If the number is 0, an non-recurring funding stage will get made.\n        @dev _properties.ballot The new ballot that will be used to approve subsequent rec","after":"sn't distributed tickets yet, or\n      sets the properties of the proposed funding cycle that will take effect once the current one expires\n      if it is approved by the current funding cycle's ballot.\n\n      @dev\n      Only a project's owner or a designated operator can configure its funding cycles.\n\n      @param _projectId The ID of the project being reconfigured. \n      @param _properties The funding cycle configuration.\n        @dev _properties.target The amount that the project wants to receive in this funding stage. Sent as a wad.\n        @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD.\n        @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time.\n        @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle.\n        @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage.\n          If it's 200, each funding stage will have equal weight.\n          If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage.\n          If the number is 0, an non-recurring funding stage will get made.\n        @dev _properties.ballot The new ballot that will be used to approve subsequent rec","contract":"TerminalV1","time":0},{"type":"external-function ","before":"here is an active ballot.\n\n      @return The ID of the funding cycle that was successfully configured.\n    */\n    function configure(\n        uint256 _projectId,\n        FundingCycleProperties calldata _properties,\n        FundingCycleMetadata calldata _metadata,\n        PayoutMod[] memory _payoutMods,\n        TicketMod[] memory _ticketMods\n    )\n    external\n    override\n    requirePermission(\n        projects.ownerOf(_projectId),\n        _projectId,\n        Operations.Configure\n    )\n    returns (uint256)\n    {\n        // Make sure the metadata is validated, and pack it into a uint256.\n        uint256 _packedMetadata = _validateAndPackFundingCycleMetadata(\n            _metadata\n        );\n\n        // If the project can still print premined tickets configure the active funding cycle instead of creating a standby one.\n        bool _shouldConfigureActive = canPrintPreminedTickets(_projectId);\n\n        // Configure the funding stage's state.\n        FundingCycle memory _fundingCycle = fundingCycles.configure(\n            _projectId,\n            _properties,\n            _packedMetadata,\n            fee,\n            _shouldConfigureActive\n        );\n\n        // Set payout mods for the new configuration if there are any.\n        if (_payoutMods.length > 0)\n            modStore.setPayoutMods(\n                _projectId,\n                _fundingCycle.configured,\n                _payoutMods\n            );\n\n        // Set payout mods for the new configuration if there are any.\n        if (_ticketMods.length > 0)\n            modStore.setTicketMods(\n                _projectId,\n                _fundingCycle.configured,\n                _ticketMods\n            );\n\n        return _fundingCycle.id;\n    }\n\n    /** \n      @notice \n      Allows a project to print tickets for a specified beneficiary before payments have been received.\n\n      @dev \n      This can only be done if the project hasn't yet received a payment after configuring a funding cycle.\n\n      @dev\n      Only a project's owner or a designated operator can print premined tickets.\n\n      @param _projectId The ID of the project to premine tickets for.\n      @param _amount The amount to base the ticket premine off of.\n      @param _currency The currency of the amount to base the ticket premine off of. \n      @param _beneficiary The address to send the printed tickets to.\n      @param _memo A memo to leave with the printing.\n      @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.\n    */\n    function printPreminedTickets(\n        uint256 _projectId,\n        uint256 _amount,\n        uint2","after":"here is an active ballot.\n\n      @return The ID of the funding cycle that was successfully configured.\n    */\n    function configure(\n        uint256 _projectId,\n        FundingCycleProperties calldata _properties,\n        FundingCycleMetadata calldata _metadata,\n        PayoutMod[] memory _payoutMods,\n        TicketMod[] memory _ticketMods\n    )\n    external\n    override\n    requirePermission(\n        projects.ownerOf(_projectId),\n        _projectId,\n        Operations.Configure\n    )\n    returns (uint256)\n    {\n        // Make sure the metadata is validated, and pack it into a uint256.\n        uint256 _packedMetadata = _validateAndPackFundingCycleMetadata(\n            _metadata\n        );\n\n        // If the project can still print premined tickets configure the active funding cycle instead of creating a standby one.\n        bool _shouldConfigureActive = canPrintPreminedTickets(_projectId);\n\n        // Configure the funding stage's state.\n        FundingCycle memory _fundingCycle = fundingCycles.configure(\n            _projectId,\n            _properties,\n            _packedMetadata,\n            fee,\n            _shouldConfigureActive\n        );\n\n        // Set payout mods for the new configuration if there are any.\n        if (_payoutMods.length > 0)\n            modStore.setPayoutMods(\n                _projectId,\n                _fundingCycle.configured,\n                _payoutMods\n            );\n\n        // Set payout mods for the new configuration if there are any.\n        if (_ticketMods.length > 0)\n            modStore.setTicketMods(\n                _projectId,\n                _fundingCycle.configured,\n                _ticketMods\n            );\n\n        return _fundingCycle.id;\n    }\n\n    /** \n      @notice \n      Allows a project to print tickets for a specified beneficiary before payments have been received.\n\n      @dev \n      This can only be done if the project hasn't yet received a payment after configuring a funding cycle.\n\n      @dev\n      Only a project's owner or a designated operator can print premined tickets.\n\n      @param _projectId The ID of the project to premine tickets for.\n      @param _amount The amount to base the ticket premine off of.\n      @param _currency The currency of the amount to base the ticket premine off of. \n      @param _beneficiary The address to send the printed tickets to.\n      @param _memo A memo to leave with the printing.\n      @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.\n    */\n    function printPreminedTickets(\n        uint256 _projectId,\n        uint256 _amount,\n        uint2","contract":"TerminalV1","time":0}]}
{"time":1128,"results":[{"type":"state-data-arrangement ","before":"\n�▓▓▓\n▓▓▓�\n��▓ ▐▓▓▓▓▓�\n▓▓▓  ▓▓▓▓▓▓�\nport \"./api/IBondingMan\nmport \"openzeppelin-so\nndedECDSAKeep is IBondedECDSAKeep {\n    usi\n    // Status of the keep.\n    // Active mean\nAddress of the keep's owner.\n    addres\nof honest keep members required to produce a signature.\nbytes, where X and Y coordinates\n    // are padded with\nests requested to be signed. Used to validate submit\nionStartTimestamp;\n\n   \ne timestamp at which signing process\nress. When set to `0` indica","after":"��▓ ▐▓▓▓▓▓�\n▓▓▓  ▓▓▓▓▓▓�\nport \"./api/IBondingMan\nmport \"openzeppelin-so\nndedECDSAKeep is IBondedECDSAKeep {\n    usi\n    // Status of the keep.\n    // Active mean\nAddress of the keep's owner.\n    addres\nof honest keep members required to produce a signature.\nbytes, where X and Y coordinates\n    // are padded with\nests requested to be signed. Used to validate submit\nionStartTimestamp;\n\n   \ne timestamp at which signing process\n�▓▓▓\n▓▓▓�\nress. When set to `0` indica\n","contract":"AbstractBondedECDSAKeep","time":0},{"type":"state-data-arrangement ","before":"\n_BITS;\n    uint256 cons\n/////\n\n    struct State {\n       \nedIndex;\n        // The ra\nrated random numbers are in [0, fullRan\n are left to consider.\n     \npped to the full range by skipping\n     uint256 expectedSkippedCoun\nd(\n        State memory self,\n    \nrrentSeed = keccak256(\n            abi.\nemory self) internal view {\n        uint25\ndex < self.truncatedRange) {\n            self.current\n  generateNewIndex(self);\n        }\n    }\n\n    function up\nge = uint256(int256(self.tr\n;\n    }\n\n    function addSkippedInterval(\n    State memory self,\n        uint256 st\ndex,\n        uint256 weight\n    ) ","after":"_BITS;\n    uint256 cons\n/////\n\n    struct State {\n       \nedIndex;\n        // The ra\nrated random numbers are in [0, fullRan\n are left to consider.\n     \npped to the full range by skipping\n     uint256 expectedSkippedCoun\nd(\n        State memory self,\n    \nrrentSeed = keccak256(\n            abi.\nemory self) internal view {\n        uint25\ndex < self.truncatedRange) {\n            self.current\n  generateNewIndex(self);\n        }\n    }\n\n    function up\n;\n    }\n\n    function addSkippedInterval(\n    State memory self,\n        uint256 st\ndex,\n        uint256 weight\n    ) \nge = uint256(int256(self.tr\n","contract":"Rewards","time":0}]}
{"time":414,"results":[{"type":"external-function ","before":"function setContractURI(string memory uri) external onlyOwner {\n        _setContractURI(uri);\n    }","after":"function setContractURI(string calldata uri) external onlyOwner {\n        _setContractURI(uri);\n    }","contract":"BlockArt","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 id, string memory uri) external onlyOwner {\n        _setTokenURI(id, uri);\n    }","after":"function setTokenURI(uint256 id, string calldata uri) external onlyOwner {\n        _setTokenURI(id, uri);\n    }","contract":"BlockArt","time":0},{"type":"external-function ","before":"function mint(\n        address to,\n        uint256 blockNumber,\n        uint256 styleId,\n        uint256 value,\n        string memory metadata\n    ) external onlyOwner returns (uint256) {\n        _ids.increment();\n        uint256 newId = _ids.current();\n\n        _bas[blockNumber] = _bas[blockNumber].add(1);\n        _sas[styleId] = _sas[styleId].add(1);\n        _ats[newId] = styleId;\n        _atb[newId] = blockNumber;\n        _atv[newId] = value;\n\n        _safeMint(to, newId);\n        _setTokenURI(newId, metadata);\n\n        return newId;\n    }","after":"function mint(\n        address to,\n        uint256 blockNumber,\n        uint256 styleId,\n        uint256 value,\n        string calldata metadata\n    ) external onlyOwner returns (uint256) {\n        _ids.increment();\n        uint256 newId = _ids.current();\n\n        _bas[blockNumber] = _bas[blockNumber].add(1);\n        _sas[styleId] = _sas[styleId].add(1);\n        _ats[newId] = styleId;\n        _atb[newId] = blockNumber;\n        _atv[newId] = value;\n\n        _safeMint(to, newId);\n        _setTokenURI(newId, metadata);\n\n        return newId;\n    }","contract":"BlockArt","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"BlockArt","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"BlockArt","time":1},{"type":"external-function ","before":"function mintArt(\n        address to,\n        uint256 blockNumber,\n        uint256 styleId,\n        string memory metadata\n    ) external payable {\n        uint256 price = calcArtPrice(blockNumber, styleId);\n        uint256 canMint = canMintWithStyle(styleId);\n        require(msg.value >= price, \"Value too low\");\n        require(canMint > 0, \"Cannot mint style\");\n\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.mint(to, blockNumber, styleId, msg.value, metadata);\n\n        psfb[blockNumber] = msg.value;\n\n        BlockStyle _style = BlockStyle(stylesAddr);\n        uint256 sfm = _style.getStyleFeeMul(styleId);\n        // style fee multiplier\n        uint256 msf = _style.getStyleFeeMin(styleId);\n        // minimum style fee\n        uint256 sf = msg.value.sub(msg.value.div(sfm).mul(100));\n        // style fee\n\n        if (msf > sf) sf = msf;\n        // whichever is higher\n        scfb[styleId] = scfb[styleId].add(sf);\n        coinsBalance = coinsBalance.add(msg.value.sub(sf));\n    }","after":"function mintArt(\n        address to,\n        uint256 blockNumber,\n        uint256 styleId,\n        string calldata metadata\n    ) external payable {\n        uint256 price = calcArtPrice(blockNumber, styleId);\n        uint256 canMint = canMintWithStyle(styleId);\n        require(msg.value >= price, \"Value too low\");\n        require(canMint > 0, \"Cannot mint style\");\n\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.mint(to, blockNumber, styleId, msg.value, metadata);\n\n        psfb[blockNumber] = msg.value;\n\n        BlockStyle _style = BlockStyle(stylesAddr);\n        uint256 sfm = _style.getStyleFeeMul(styleId);\n        // style fee multiplier\n        uint256 msf = _style.getStyleFeeMin(styleId);\n        // minimum style fee\n        uint256 sf = msg.value.sub(msg.value.div(sfm).mul(100));\n        // style fee\n\n        if (msf > sf) sf = msf;\n        // whichever is higher\n        scfb[styleId] = scfb[styleId].add(sf);\n        coinsBalance = coinsBalance.add(msg.value.sub(sf));\n    }","contract":"BlockArtFactory","time":0},{"type":"external-function ","before":"function remint(uint256 tokenId, string memory metadata)\n    external\n    payable\n    onlyArtOwner(tokenId)\n    {\n        require(msg.value >= remintFee, \"Value too low\");\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.setTokenURI(tokenId, metadata);\n        coinsBalance = coinsBalance.add(msg.value);\n        emit ReMint(msg.sender, tokenId);\n    }","after":"function remint(uint256 tokenId, string calldata metadata)\n    external\n    payable\n    onlyArtOwner(tokenId)\n    {\n        require(msg.value >= remintFee, \"Value too low\");\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.setTokenURI(tokenId, metadata);\n        coinsBalance = coinsBalance.add(msg.value);\n        emit ReMint(msg.sender, tokenId);\n    }","contract":"BlockArtFactory","time":0},{"type":"external-function ","before":"function mintStyle(\n        address to,\n        uint256 cap,\n        uint256 feeMul,\n        uint256 feeMin,\n        string memory canvas\n    ) external payable {\n        require(msg.value >= stylePrice, \"Value too low\");\n\n        BlockStyle _blockStyle = BlockStyle(stylesAddr);\n        _blockStyle.mint(to, cap, feeMul, feeMin, canvas);\n\n        coinsBalance = coinsBalance.add(msg.value);\n    }","after":"function mintStyle(\n        address to,\n        uint256 cap,\n        uint256 feeMul,\n        uint256 feeMin,\n        string calldata canvas\n    ) external payable {\n        require(msg.value >= stylePrice, \"Value too low\");\n\n        BlockStyle _blockStyle = BlockStyle(stylesAddr);\n        _blockStyle.mint(to, cap, feeMul, feeMin, canvas);\n\n        coinsBalance = coinsBalance.add(msg.value);\n    }","contract":"BlockArtFactory","time":0},{"type":"external-function ","before":"function setStyleBaseURI(string memory uri) external onlyOwner {\n        BlockStyle _style = BlockStyle(stylesAddr);\n        _style.setBase(uri);\n    }","after":"function setStyleBaseURI(string calldata uri) external onlyOwner {\n        BlockStyle _style = BlockStyle(stylesAddr);\n        _style.setBase(uri);\n    }","contract":"BlockArtFactory","time":0},{"type":"external-function ","before":"function setArtContractURI(string memory uri) external onlyOwner {\n        BlockArt _art = BlockArt(artsAddr);\n        _art.setContractURI(uri);\n    }","after":"function setArtContractURI(string calldata uri) external onlyOwner {\n        BlockArt _art = BlockArt(artsAddr);\n        _art.setContractURI(uri);\n    }","contract":"BlockArtFactory","time":0},{"type":"immutable-restrict-modification ","before":"address public artsAddr;","after":"address public immutable artsAddr;","contract":"BlockArtFactory","time":0},{"type":"immutable-restrict-modification ","before":"address public stylesAddr;","after":"address public immutable stylesAddr;","contract":"BlockArtFactory","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public burnFee;","after":"uint256 public immutable burnFee;","contract":"BlockArtFactory","time":0},{"type":"external-function ","before":"function mintArt(\n        address to,\n        uint256 blockNumber,\n        uint256 styleId,\n        string memory metadata\n    ) external payable {\n        uint256 price = calcArtPrice(blockNumber, styleId);\n        bool canMint = canMintWithStyle(styleId);\n        require(msg.value >= price, \"Value too low\");\n        require(canMint, \"Cannot mint style\");\n\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.mint(to, blockNumber, styleId, msg.value, metadata);\n\n        BlockArtFactory _oldFa = BlockArtFactory(oldFactoryAddr);\n        _oldFa.setPsfb(blockNumber, msg.value);\n\n        BlockStyle _style = BlockStyle(stylesAddr);\n        uint256 sfm = _style.getStyleFeeMul(styleId);\n        // style fee multiplier\n        uint256 msf = _style.getStyleFeeMin(styleId);\n        // minimum style fee\n        uint256 sf = msg.value.sub(msg.value.div(sfm).mul(100));\n        // style fee\n\n        if (msf > sf) sf = msf;\n        // whichever is higher\n        scfb[styleId] = scfb[styleId].add(sf);\n        coinsBalance = coinsBalance.add(msg.value.sub(sf));\n    }","after":"function mintArt(\n        address to,\n        uint256 blockNumber,\n        uint256 styleId,\n        string calldata metadata\n    ) external payable {\n        uint256 price = calcArtPrice(blockNumber, styleId);\n        bool canMint = canMintWithStyle(styleId);\n        require(msg.value >= price, \"Value too low\");\n        require(canMint, \"Cannot mint style\");\n\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.mint(to, blockNumber, styleId, msg.value, metadata);\n\n        BlockArtFactory _oldFa = BlockArtFactory(oldFactoryAddr);\n        _oldFa.setPsfb(blockNumber, msg.value);\n\n        BlockStyle _style = BlockStyle(stylesAddr);\n        uint256 sfm = _style.getStyleFeeMul(styleId);\n        // style fee multiplier\n        uint256 msf = _style.getStyleFeeMin(styleId);\n        // minimum style fee\n        uint256 sf = msg.value.sub(msg.value.div(sfm).mul(100));\n        // style fee\n\n        if (msf > sf) sf = msf;\n        // whichever is higher\n        scfb[styleId] = scfb[styleId].add(sf);\n        coinsBalance = coinsBalance.add(msg.value.sub(sf));\n    }","contract":"BlockArtFactoryV2","time":0},{"type":"external-function ","before":"function remint(uint256 tokenId, string memory metadata)\n    external\n    payable\n    onlyArtOwner(tokenId)\n    {\n        require(msg.value >= remintFee, \"Value too low\");\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.setTokenURI(tokenId, metadata);\n        coinsBalance = coinsBalance.add(msg.value);\n        emit ReMint(msg.sender, tokenId);\n    }","after":"function remint(uint256 tokenId, string calldata metadata)\n    external\n    payable\n    onlyArtOwner(tokenId)\n    {\n        require(msg.value >= remintFee, \"Value too low\");\n        BlockArt _blockArt = BlockArt(artsAddr);\n        _blockArt.setTokenURI(tokenId, metadata);\n        coinsBalance = coinsBalance.add(msg.value);\n        emit ReMint(msg.sender, tokenId);\n    }","contract":"BlockArtFactoryV2","time":0},{"type":"external-function ","before":"function mintStyle(\n        address to,\n        uint256 cap,\n        uint256 feeMul,\n        uint256 feeMin,\n        string memory canvas\n    ) external payable {\n        require(msg.value >= stylePrice, \"Value too low\");\n\n        BlockStyle _blockStyle = BlockStyle(stylesAddr);\n        _blockStyle.mint(to, cap, feeMul, feeMin, canvas);\n\n        coinsBalance = coinsBalance.add(msg.value);\n    }","after":"function mintStyle(\n        address to,\n        uint256 cap,\n        uint256 feeMul,\n        uint256 feeMin,\n        string calldata canvas\n    ) external payable {\n        require(msg.value >= stylePrice, \"Value too low\");\n\n        BlockStyle _blockStyle = BlockStyle(stylesAddr);\n        _blockStyle.mint(to, cap, feeMul, feeMin, canvas);\n\n        coinsBalance = coinsBalance.add(msg.value);\n    }","contract":"BlockArtFactoryV2","time":0},{"type":"external-function ","before":"function setStyleBaseURI(string memory uri) external onlyOwner {\n        BlockStyle _style = BlockStyle(stylesAddr);\n        _style.setBase(uri);\n    }","after":"function setStyleBaseURI(string calldata uri) external onlyOwner {\n        BlockStyle _style = BlockStyle(stylesAddr);\n        _style.setBase(uri);\n    }","contract":"BlockArtFactoryV2","time":0},{"type":"external-function ","before":"function setArtContractURI(string memory uri) external onlyOwner {\n        BlockArt _art = BlockArt(artsAddr);\n        _art.setContractURI(uri);\n    }","after":"function setArtContractURI(string calldata uri) external onlyOwner {\n        BlockArt _art = BlockArt(artsAddr);\n        _art.setContractURI(uri);\n    }","contract":"BlockArtFactoryV2","time":0},{"type":"immutable-restrict-modification ","before":"address public artsAddr;","after":"address public immutable artsAddr;","contract":"BlockArtFactoryV2","time":1},{"type":"immutable-restrict-modification ","before":"address public stylesAddr;","after":"address public immutable stylesAddr;","contract":"BlockArtFactoryV2","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public burnFee;","after":"uint256 public immutable burnFee;","contract":"BlockArtFactoryV2","time":1},{"type":"external-function ","before":"function setContractURI(string memory uri) external onlyOwner {\n        _setContractURI(uri);\n    }","after":"function setContractURI(string calldata uri) external onlyOwner {\n        _setContractURI(uri);\n    }","contract":"BlockStyle","time":0},{"type":"external-function ","before":"function setBase(string memory uri) external onlyOwner {\n        _setBaseURI(uri);\n    }","after":"function setBase(string calldata uri) external onlyOwner {\n        _setBaseURI(uri);\n    }","contract":"BlockStyle","time":0},{"type":"external-function ","before":"function setCanvas(uint256 id, string memory canvas) external {\n        require(\n            _isApprovedOrOwner(_msgSender(), id),\n            \"Operator is not approved\"\n        );\n        _setCanvasURI(id, canvas);\n    }","after":"function setCanvas(uint256 id, string calldata canvas) external {\n        require(\n            _isApprovedOrOwner(_msgSender(), id),\n            \"Operator is not approved\"\n        );\n        _setCanvasURI(id, canvas);\n    }","contract":"BlockStyle","time":0},{"type":"external-function ","before":"function setToken(uint256 id, string memory uri) external {\n        require(\n            _isApprovedOrOwner(_msgSender(), id),\n            \"Operator is not approved\"\n        );\n        _setTokenURI(id, uri);\n    }","after":"function setToken(uint256 id, string calldata uri) external {\n        require(\n            _isApprovedOrOwner(_msgSender(), id),\n            \"Operator is not approved\"\n        );\n        _setTokenURI(id, uri);\n    }","contract":"BlockStyle","time":0},{"type":"external-function ","before":"function mint(\n        address to,\n        uint256 cap,\n        uint256 feeMul,\n        uint256 feeMin,\n        string memory canvas\n    ) external onlyOwner {\n        _ids.increment();\n        uint256 newId = _ids.current();\n\n        _safeMint(to, newId);\n        _setCreator(newId, to);\n        _setStyleSupplyCap(newId, cap);\n        _setStyleFeeMul(newId, feeMul);\n        _setStyleFeeMin(newId, feeMin);\n        _setCanvasURI(newId, canvas);\n    }","after":"function mint(\n        address to,\n        uint256 cap,\n        uint256 feeMul,\n        uint256 feeMin,\n        string calldata canvas\n    ) external onlyOwner {\n        _ids.increment();\n        uint256 newId = _ids.current();\n\n        _safeMint(to, newId);\n        _setCreator(newId, to);\n        _setStyleSupplyCap(newId, cap);\n        _setStyleFeeMul(newId, feeMul);\n        _setStyleFeeMin(newId, feeMin);\n        _setCanvasURI(newId, canvas);\n    }","contract":"BlockStyle","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"BlockStyle","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"BlockStyle","time":0},{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0}]}
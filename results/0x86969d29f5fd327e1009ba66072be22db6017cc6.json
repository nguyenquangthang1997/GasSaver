{"time":139,"results":[{"type":"state-data-arrangement ","before":"\nTokenTransferProxy private _tokenTransferProxy;\nbool private _paused;\nIWhitelisted private _whitelisted;\nIPartnerRegistry private _partnerRegistry;\naddress payable private _feeWallet;","after":"TokenTransferProxy private _tokenTransferProxy;\nIWhitelisted private _whitelisted;\nIPartnerRegistry private _partnerRegistry;\naddress payable private _feeWallet;\nbool private _paused;\n","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function multiSwap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 fromAmount,\n        uint256 toAmount,\n        uint256 expectedAmount,\n        Utils.Path[] memory path,\n        uint256 mintPrice,\n        address payable beneficiary,\n        uint256 donationPercentage,\n        string memory referrer\n    )\n    public\n    payable\n    whenNotPaused\n    returns (uint256)\n    {\n        //Referral id can never be empty\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n        require(donationPercentage <= 10000, \"Invalid value\");\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n        uint256 receivedAmount = performSwap(\n            fromToken,\n            toToken,\n            fromAmount,\n            toAmount,\n            path,\n            mintPrice\n        );\n\n        takeFeeAndTransferTokens(\n            toToken,\n            toAmount,\n            receivedAmount,\n            beneficiary,\n            donationPercentage,\n            referrer\n        );\n\n        //If any ether is left at this point then we transfer it back to the user\n        uint256 remEthBalance = Utils.tokenBalance(\n            Utils.ethAddress(),\n            address(this)\n        );\n        if (remEthBalance > 0) {\n            msg.sender.transfer(remEthBalance);\n        }\n\n        //Contract should not have any remaining balance after entire execution\n        require(\n            Utils.tokenBalance(address(toToken), address(this)) == 0,\n            \"Destination tokens are stuck\"\n        );\n\n        emit Swapped(\n            msg.sender,\n            beneficiary == address(0) ? msg.sender : beneficiary,\n            address(fromToken),\n            address(toToken),\n            fromAmount,\n            receivedAmount,\n            expectedAmount,\n            referrer\n        );\n\n        return receivedAmount;\n    }","after":"function multiSwap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 fromAmount,\n        uint256 toAmount,\n        uint256 expectedAmount,\n        Utils.Path[] calldata path,\n        uint256 mintPrice,\n        address payable beneficiary,\n        uint256 donationPercentage,\n        string calldata referrer\n    )\n    public\n    payable\n    whenNotPaused\n    returns (uint256)\n    {\n        //Referral id can never be empty\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\n\n        require(donationPercentage <= 10000, \"Invalid value\");\n\n        require(toAmount > 0, \"To amount can not be 0\");\n\n        uint256 receivedAmount = performSwap(\n            fromToken,\n            toToken,\n            fromAmount,\n            toAmount,\n            path,\n            mintPrice\n        );\n\n        takeFeeAndTransferTokens(\n            toToken,\n            toAmount,\n            receivedAmount,\n            beneficiary,\n            donationPercentage,\n            referrer\n        );\n\n        //If any ether is left at this point then we transfer it back to the user\n        uint256 remEthBalance = Utils.tokenBalance(\n            Utils.ethAddress(),\n            address(this)\n        );\n        if (remEthBalance > 0) {\n            msg.sender.transfer(remEthBalance);\n        }\n\n        //Contract should not have any remaining balance after entire execution\n        require(\n            Utils.tokenBalance(address(toToken), address(this)) == 0,\n            \"Destination tokens are stuck\"\n        );\n\n        emit Swapped(\n            msg.sender,\n            beneficiary == address(0) ? msg.sender : beneficiary,\n            address(fromToken),\n            address(toToken),\n            fromAmount,\n            receivedAmount,\n            expectedAmount,\n            referrer\n        );\n\n        return receivedAmount;\n    }","contract":"AugustusSwapper","time":0}]}
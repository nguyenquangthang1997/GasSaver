{"time":191,"results":[{"type":"loop-duplication","before":"\nstart line 647 column 8, end line 652 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 659 column 8, end line 665 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = i;\n                j++;\n            }\n        }","after":"// merge loop\n\nstart line 647 column 8, end line 652 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 659 column 8, end line 665 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = i;\n                j++;\n            }\n        }","contract":"Vault","time":0},{"type":"loop-duplication","before":"\nstart line 677 column 8, end line 682 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 689 column 8, end line 695 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = lock;\n                j++;\n            }\n        }","after":"// merge loop\n\nstart line 677 column 8, end line 682 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 689 column 8, end line 695 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = lock;\n                j++;\n            }\n        }","contract":"Vault","time":0},{"type":"loop-duplication","before":"\nstart line 707 column 8, end line 712 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 719 column 8, end line 725 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = lockBalance(i);\n                j++;\n            }\n        }","after":"// merge loop\n\nstart line 707 column 8, end line 712 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 719 column 8, end line 725 column 8\nfor (uint256 i; i < numLocks; i++) {\n            Lock memory lock = tokenLocks[i];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = lockBalance(i);\n                j++;\n            }\n        }","contract":"Vault","time":0},{"type":"loop-duplication","before":"\nstart line 739 column 8, end line 744 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 751 column 8, end line 757 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = receiverLockIds[i];\n                j++;\n            }\n        }","after":"// merge loop\n\nstart line 739 column 8, end line 744 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 751 column 8, end line 757 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = receiverLockIds[i];\n                j++;\n            }\n        }","contract":"Vault","time":0},{"type":"loop-duplication","before":"\nstart line 785 column 8, end line 790 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 797 column 8, end line 803 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = tokenLocks[receiverLockIds[i]];\n                j++;\n            }\n        }","after":"// merge loop\n\nstart line 785 column 8, end line 790 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 797 column 8, end line 803 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = tokenLocks[receiverLockIds[i]];\n                j++;\n            }\n        }","contract":"Vault","time":0},{"type":"loop-duplication","before":"\nstart line 817 column 8, end line 822 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 829 column 8, end line 835 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = lockBalance(receiverLockIds[i]);\n                j++;\n            }\n        }","after":"// merge loop\n\nstart line 817 column 8, end line 822 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                activeCount++;\n            }\n        }\nstart line 829 column 8, end line 835 column 8\nfor (uint256 i; i < receiverLockIds.length; i++) {\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\n            if (lock.amount != lock.amountClaimed) {\n                result[j] = lockBalance(receiverLockIds[i]);\n                j++;\n            }\n        }","contract":"Vault","time":0},{"type":"external-function ","before":"function claimAllUnlockedTokens(uint256[] memory locks) external {\n        for (uint i = 0; i < locks.length; i++) {\n            uint256 claimableAmount = claimableBalance(locks[i]);\n            require(claimableAmount > 0, \"Vault::claimAllUnlockedTokens: claimableAmount is 0\");\n            _claimTokens(locks[i], claimableAmount);\n        }\n    }","after":"function claimAllUnlockedTokens(uint256[] calldata locks) external {\n        for (uint i = 0; i < locks.length; i++) {\n            uint256 claimableAmount = claimableBalance(locks[i]);\n            require(claimableAmount > 0, \"Vault::claimAllUnlockedTokens: claimableAmount is 0\");\n            _claimTokens(locks[i], claimableAmount);\n        }\n    }","contract":"Vault","time":0},{"type":"external-function ","before":"function claimUnlockedTokenAmounts(uint256[] memory locks, uint256[] memory amounts) external {\n        require(locks.length == amounts.length, \"Vault::claimUnlockedTokenAmounts: arrays must be same length\");\n        for (uint i = 0; i < locks.length; i++) {\n            uint256 claimableAmount = claimableBalance(locks[i]);\n            require(claimableAmount >= amounts[i], \"Vault::claimUnlockedTokenAmounts: claimableAmount < amount\");\n            _claimTokens(locks[i], amounts[i]);\n        }\n    }","after":"function claimUnlockedTokenAmounts(uint256[] calldata locks, uint256[] calldata amounts) external {\n        require(locks.length == amounts.length, \"Vault::claimUnlockedTokenAmounts: arrays must be same length\");\n        for (uint i = 0; i < locks.length; i++) {\n            uint256 claimableAmount = claimableBalance(locks[i]);\n            require(claimableAmount >= amounts[i], \"Vault::claimUnlockedTokenAmounts: claimableAmount < amount\");\n            _claimTokens(locks[i], amounts[i]);\n        }\n    }","contract":"Vault","time":0}]}
{"time":84,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(uint256 => address) private _tokenOwner;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => uint256) private _ownedTokensCount;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping(uint256 => address) private _tokenOwner;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => uint256) private _ownedTokensCount;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function createMulti(uint256 _tokenIdStart, address[] memory _owners)\n\n    public\n\n    onlyCreateControl\n\n    requireMinting\n\n    {\n\n        // Make sure we do not get any holes in Ids so we can do more optimizations.\n\n        require(_tokenIdStart == 0 || _exists(_tokenIdStart.sub(1)), \"Previous token ID has to exist.\");\n\n        uint256 addrcount = _owners.length;\n\n        for (uint256 i = 0; i < addrcount; i++) {\n\n            // Make sure this is in sync with what create() does.\n\n            _mint(_owners[i], _tokenIdStart + i);\n\n        }\n\n    }","after":"function createMulti(uint256 _tokenIdStart, address[] calldata _owners)\n\n    public\n\n    onlyCreateControl\n\n    requireMinting\n\n    {\n\n        // Make sure we do not get any holes in Ids so we can do more optimizations.\n\n        require(_tokenIdStart == 0 || _exists(_tokenIdStart.sub(1)), \"Previous token ID has to exist.\");\n\n        uint256 addrcount = _owners.length;\n\n        for (uint256 i = 0; i < addrcount; i++) {\n\n            // Make sure this is in sync with what create() does.\n\n            _mint(_owners[i], _tokenIdStart + i);\n\n        }\n\n    }","contract":"Cryptostamp","time":1},{"type":"external-function ","before":"function newUriBase(string memory _newUriBase)\n\n    public\n\n    onlyCreateControl\n\n    {\n\n        uribase = _newUriBase;\n\n    }","after":"function newUriBase(string calldata _newUriBase)\n\n    public\n\n    onlyCreateControl\n\n    {\n\n        uribase = _newUriBase;\n\n    }","contract":"Cryptostamp","time":0},{"type":"immutable-restrict-modification ","before":"address public createControl;","after":"address public immutable createControl;","contract":"Cryptostamp","time":0},{"type":"immutable-restrict-modification ","before":"address public tokenAssignmentControl;","after":"address public immutable tokenAssignmentControl;","contract":"Cryptostamp","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Cryptostamp","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Cryptostamp","time":0}]}
{"time":225,"results":[{"type":"state-data-arrangement ","before":"\naddress public tokenSwapManager;\naddress public bridge;\nbool public isPaused;\nbool public isShutdown;\nuint256 public lastActivityDay;\nuint256 public minRebalanceAmount;\nuint256 public managementFee;\nuint256 public minimumMintingFee;\nuint256 public minimumTrade;\nuint8 public balancePrecision;\nmapping(uint256 => Accounting[]) private accounting;\nuint256[] public mintingFeeBracket;\nmapping(uint256 => uint256) public mintingFee;\nOrder[] public allOrders;\nmapping(address => Order[]) public orderByUser;\nmapping(address => uint256) public delayedRedemptionsByUser;","after":"uint256 public lastActivityDay;\nuint256 public minRebalanceAmount;\nuint256 public managementFee;\nuint256 public minimumMintingFee;\nuint256 public minimumTrade;\nmapping(uint256 => Accounting[]) private accounting;\nuint256[] public mintingFeeBracket;\nmapping(uint256 => uint256) public mintingFee;\nOrder[] public allOrders;\nmapping(address => Order[]) public orderByUser;\nmapping(address => uint256) public delayedRedemptionsByUser;\naddress public tokenSwapManager;\naddress public bridge;\nbool public isPaused;\nbool public isShutdown;\nuint8 public balancePrecision;\n","contract":"PersistentStorage","time":0},{"type":"external-function ","before":"function setOrderByUser(\n\n        address whitelistedAddress,\n\n        string memory orderType,\n\n        uint256 tokensGiven,\n\n        uint256 tokensRecieved,\n\n        uint256 avgBlendedFee,\n\n        uint256 orderIndex,\n\n        bool overwrite\n\n    ) public onlyOwnerOrTokenSwap() {\n\n        Order memory newOrder = Order(\n\n            orderType,\n\n            tokensGiven,\n\n            tokensRecieved,\n\n            avgBlendedFee\n\n        );\n\n\n        if (!overwrite) {\n\n            orderByUser[whitelistedAddress].push(newOrder);\n\n            setOrder(\n\n                orderType,\n\n                tokensGiven,\n\n                tokensRecieved,\n\n                avgBlendedFee,\n\n                orderIndex,\n\n                overwrite\n\n            );\n\n        } else {\n\n            orderByUser[whitelistedAddress][orderIndex] = newOrder;\n\n        }\n\n    }","after":"function setOrderByUser(\n\n        address whitelistedAddress,\n\n        string calldata orderType,\n\n        uint256 tokensGiven,\n\n        uint256 tokensRecieved,\n\n        uint256 avgBlendedFee,\n\n        uint256 orderIndex,\n\n        bool overwrite\n\n    ) public onlyOwnerOrTokenSwap() {\n\n        Order memory newOrder = Order(\n\n            orderType,\n\n            tokensGiven,\n\n            tokensRecieved,\n\n            avgBlendedFee\n\n        );\n\n\n        if (!overwrite) {\n\n            orderByUser[whitelistedAddress].push(newOrder);\n\n            setOrder(\n\n                orderType,\n\n                tokensGiven,\n\n                tokensRecieved,\n\n                avgBlendedFee,\n\n                orderIndex,\n\n                overwrite\n\n            );\n\n        } else {\n\n            orderByUser[whitelistedAddress][orderIndex] = newOrder;\n\n        }\n\n    }","contract":"PersistentStorage","time":0}]}
{"time":107,"results":[{"type":"external-function ","before":"function redeem(uint256 amount, string memory comment) public notOnPause {\n\n        require(amount > goodbyeFee);\n\n        uint256 value = amount.sub(goodbyeFee);\n\n        if (goodbyeFee > 0) {\n\n            _transfer(msg.sender, boss, goodbyeFee);\n\n        }\n\n        _burn(msg.sender, value);\n\n        emit OnRedeemed(msg.sender, amount, value, comment, now);\n\n    }","after":"function redeem(uint256 amount, string calldata comment) public notOnPause {\n\n        require(amount > goodbyeFee);\n\n        uint256 value = amount.sub(goodbyeFee);\n\n        if (goodbyeFee > 0) {\n\n            _transfer(msg.sender, boss, goodbyeFee);\n\n        }\n\n        _burn(msg.sender, value);\n\n        emit OnRedeemed(msg.sender, amount, value, comment, now);\n\n    }","contract":"SIMBA","time":0},{"type":"external-function ","before":"function issue(address customerAddress, uint256 amount, string memory comment) public notOnPause {\n\n        require(msg.sender == admin1);\n\n        require(amount > welcomeFee);\n\n        uint256 value = amount.sub(welcomeFee);\n\n        if (welcomeFee > 0) {\n\n            _mint(boss, welcomeFee);\n\n        }\n\n        _mint(customerAddress, value);\n\n        emit OnIssued(customerAddress, amount, value, comment, now);\n\n    }","after":"function issue(address customerAddress, uint256 amount, string calldata comment) public notOnPause {\n\n        require(msg.sender == admin1);\n\n        require(amount > welcomeFee);\n\n        uint256 value = amount.sub(welcomeFee);\n\n        if (welcomeFee > 0) {\n\n            _mint(boss, welcomeFee);\n\n        }\n\n        _mint(customerAddress, value);\n\n        emit OnIssued(customerAddress, amount, value, comment, now);\n\n    }","contract":"SIMBA","time":0},{"type":"external-function ","before":"function addBlacklisted(address[] memory accounts) public onlyOwnerAndBoss {\n\n        super.addBlacklisted(accounts);\n\n    }","after":"function addBlacklisted(address[] calldata accounts) public onlyOwnerAndBoss {\n\n        super.addBlacklisted(accounts);\n\n    }","contract":"SIMBA","time":0},{"type":"external-function ","before":"function removeBlacklisted(address[] memory accounts) public onlyOwnerAndBoss {\n\n        super.removeBlacklisted(accounts);\n\n    }","after":"function removeBlacklisted(address[] calldata accounts) public onlyOwnerAndBoss {\n\n        super.removeBlacklisted(accounts);\n\n    }","contract":"SIMBA","time":0},{"type":"external-function ","before":"function destroyBlackFunds(address[] memory accounts) public {\n\n        require(msg.sender == boss);\n\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            require(isBlacklisted(accounts[i]));\n\n\n            uint256 amount = balanceOf(accounts[i]);\n\n            _burn(accounts[i], amount);\n\n        }\n\n\n    }","after":"function destroyBlackFunds(address[] calldata accounts) public {\n\n        require(msg.sender == boss);\n\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            require(isBlacklisted(accounts[i]));\n\n\n            uint256 amount = balanceOf(accounts[i]);\n\n            _burn(accounts[i], amount);\n\n        }\n\n\n    }","contract":"SIMBA","time":0},{"type":"external-function ","before":"function setName(string memory newName, string memory newSymbol) public onlyOwner {\n\n        emit OnNameSet(_name, _symbol, newName, newSymbol, now);\n\n\n        _name = newName;\n\n        _symbol = newSymbol;\n\n    }","after":"function setName(string calldata newName, string calldata newSymbol) public onlyOwner {\n\n        emit OnNameSet(_name, _symbol, newName, newSymbol, now);\n\n\n        _name = newName;\n\n        _symbol = newSymbol;\n\n    }","contract":"SIMBA","time":0},{"type":"external-function ","before":"function addBlacklisted(address[] memory accounts) public {\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            _blacklisteds.add(accounts[i]);\n\n            emit BlacklistedAdded(accounts[i]);\n\n        }\n\n    }","after":"function addBlacklisted(address[] calldata accounts) public {\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            _blacklisteds.add(accounts[i]);\n\n            emit BlacklistedAdded(accounts[i]);\n\n        }\n\n    }","contract":"SIMBA","time":0},{"type":"external-function ","before":"function removeBlacklisted(address[] memory accounts) public {\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            _blacklisteds.remove(accounts[i]);\n\n            emit BlacklistedRemoved(accounts[i]);\n\n        }\n\n    }","after":"function removeBlacklisted(address[] calldata accounts) public {\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            _blacklisteds.remove(accounts[i]);\n\n            emit BlacklistedRemoved(accounts[i]);\n\n        }\n\n    }","contract":"SIMBA","time":0},{"type":"immutable-restrict-modification ","before":"uint8 internal _decimals;","after":"uint8 internal immutable _decimals;","contract":"SIMBA","time":0}]}
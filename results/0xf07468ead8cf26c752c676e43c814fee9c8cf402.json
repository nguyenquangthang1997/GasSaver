{"time":315,"results":[{"type":"external-function ","before":"function seedFreeRolls(\n        address[] memory tokenOwners,\n        uint256[] memory numOfFreeRolls\n    ) public onlyOwner {\n        require(\n            !saleHasBeenStarted,\n            \"cannot seed free rolls after sale has started\"\n        );\n        require(\n            tokenOwners.length == numOfFreeRolls.length,\n            \"tokenOwners does not match numOfFreeRolls length\"\n        );\n\n        // light check to make sure the proper values are being passed\n        require(numOfFreeRolls[0] <= 3, \"cannot give more than 3 free rolls\");\n\n        for (uint256 i = 0; i < tokenOwners.length; i++) {\n            freeRollPhunks[tokenOwners[i]] = numOfFreeRolls[i];\n        }\n    }","after":"function seedFreeRolls(\n        address[] calldata tokenOwners,\n        uint256[] calldata numOfFreeRolls\n    ) public onlyOwner {\n        require(\n            !saleHasBeenStarted,\n            \"cannot seed free rolls after sale has started\"\n        );\n        require(\n            tokenOwners.length == numOfFreeRolls.length,\n            \"tokenOwners does not match numOfFreeRolls length\"\n        );\n\n        // light check to make sure the proper values are being passed\n        require(numOfFreeRolls[0] <= 3, \"cannot give more than 3 free rolls\");\n\n        for (uint256 i = 0; i < tokenOwners.length; i++) {\n            freeRollPhunks[tokenOwners[i]] = numOfFreeRolls[i];\n        }\n    }","contract":"CryptoPhunksV2","time":0},{"type":"external-function ","before":"function seedInitialContractState(\n        address[] memory tokenOwners,\n        uint256[] memory tokens\n    ) public onlyOwner {\n        require(\n            !saleHasBeenStarted,\n            \"cannot initial phunk mint if sale has started\"\n        );\n        require(\n            tokenOwners.length == tokens.length,\n            \"tokenOwners does not match tokens length\"\n        );\n\n        uint256 lastTokenIdMintedInInitialSetCopy = _lastTokenIdMintedInInitialSet;\n        for (uint256 i = 0; i < tokenOwners.length; i++) {\n            uint256 token = tokens[i];\n            require(\n                lastTokenIdMintedInInitialSetCopy > token,\n                \"initial phunk mints must be in decreasing order for our availableToken index to work\"\n            );\n            lastTokenIdMintedInInitialSetCopy = token;\n\n            useAvailableTokenAtIndex(token);\n            _safeMint(tokenOwners[i], token);\n        }\n        _lastTokenIdMintedInInitialSet = lastTokenIdMintedInInitialSetCopy;\n    }","after":"function seedInitialContractState(\n        address[] calldata tokenOwners,\n        uint256[] calldata tokens\n    ) public onlyOwner {\n        require(\n            !saleHasBeenStarted,\n            \"cannot initial phunk mint if sale has started\"\n        );\n        require(\n            tokenOwners.length == tokens.length,\n            \"tokenOwners does not match tokens length\"\n        );\n\n        uint256 lastTokenIdMintedInInitialSetCopy = _lastTokenIdMintedInInitialSet;\n        for (uint256 i = 0; i < tokenOwners.length; i++) {\n            uint256 token = tokens[i];\n            require(\n                lastTokenIdMintedInInitialSetCopy > token,\n                \"initial phunk mints must be in decreasing order for our availableToken index to work\"\n            );\n            lastTokenIdMintedInInitialSetCopy = token;\n\n            useAvailableTokenAtIndex(token);\n            _safeMint(tokenOwners[i], token);\n        }\n        _lastTokenIdMintedInInitialSet = lastTokenIdMintedInInitialSetCopy;\n    }","contract":"CryptoPhunksV2","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","contract":"CryptoPhunksV2","time":0},{"type":"external-function ","before":"function setContractURI(string memory _contractURI) external onlyOwner {\n        contractURI = _contractURI;\n    }","after":"function setContractURI(string calldata _contractURI) external onlyOwner {\n        contractURI = _contractURI;\n    }","contract":"CryptoPhunksV2","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"CryptoPhunksV2","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"CryptoPhunksV2","time":0}]}
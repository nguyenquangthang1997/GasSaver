{"time":48,"results":[{"type":"external-function ","before":"   function claim(\n        bytes32 hash,\n        bytes memory signature,\n        address tokenAddress,\n        uint256 tokenQuantity,\n        uint256 nonce\n    ) external payable {\n        require(tokenQuantity > 0, \"No funds allocated\");\n        require(!usedNonces[msg.sender][nonce], \"Hash used\");\n        require(_matchVerifier(hash, signature), \"Invalid signature\");\n        require(\n            generateHash(tokenAddress, msg.sender, tokenQuantity, nonce) ==\n            hash,\n            \"Hash fail\"\n        );\n        usedNonces[msg.sender][nonce] = true;\n        IERC20(tokenAddress).transfer(msg.sender, tokenQuantity);\n        emit Withdrawal(tokenAddress, msg.sender, tokenQuantity);\n  ","after":"   function claim(\n        bytes32 hash,\n        bytes calldata signature,\n        address tokenAddress,\n        uint256 tokenQuantity,\n        uint256 nonce\n    ) external payable {\n        require(tokenQuantity > 0, \"No funds allocated\");\n        require(!usedNonces[msg.sender][nonce], \"Hash used\");\n        require(_matchVerifier(hash, signature), \"Invalid signature\");\n        require(\n            generateHash(tokenAddress, msg.sender, tokenQuantity, nonce) ==\n            hash,\n            \"Hash fail\"\n        );\n        usedNonces[msg.sender][nonce] = true;\n        IERC20(tokenAddress).transfer(msg.sender, tokenQuantity);\n        emit Withdrawal(tokenAddress, msg.sender, tokenQuantity);\n  ","contract":"TempleCashback","time":0},{"type":"constant-restrict-modification  ","before":"   bytes32 public immutable VERIFY_TYPEHASH =\n    keccak256(\n        \"Claim(address tokenAddress,address recipient,uint256 tokenQuantity,uint256 nonce)\"\n   ","after":"   bytes32 public immutable constant VERIFY_TYPEHASH =\n    keccak256(\n        \"Claim(address tokenAddress,address recipient,uint256 tokenQuantity,uint256 nonce)\"\n   ","contract":"TempleCashback","time":0}]}
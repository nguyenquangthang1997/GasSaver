{"time":359,"results":[{"type":"loop-calculation","before":"uint a;","after":"// move outside for loop\nuint a;","loc":{"start":{"line":682,"column":12},"end":{"line":682,"column":18}},"contract":"BytesUtils","time":0},{"type":"loop-calculation","before":"uint b;","after":"// move outside for loop\nuint b;","loc":{"start":{"line":683,"column":12},"end":{"line":683,"column":18}},"contract":"BytesUtils","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"ERC721","time":1},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"ERC721","time":1},{"type":"external-function ","before":"   function register(string memory label)\n    public\n    virtual\n    override\n    onlyUnrestricted\n    {\n        bytes32 labelHash = keccak256(bytes(label));\n\n        _register(_msgSender(), labelHash);\n  ","after":"   function register(string calldata label)\n    public\n    virtual\n    override\n    onlyUnrestricted\n    {\n        bytes32 labelHash = keccak256(bytes(label));\n\n        _register(_msgSender(), labelHash);\n  ","contract":"SismoSDaoRegistrar","time":0},{"type":"external-function ","before":"   function registerWithAccessCode(\n        string memory label,\n        address recipient,\n        bytes memory accessCode\n    ) external override {\n        uint256 groupId = _getCurrentGroupId();\n\n        CodeOrigin memory codeOrigin = CodeOrigin({\n        recipient : recipient,\n        groupId : groupId\n        });\n        bytes32 digest = DOMAIN_SEPARATOR.toTypedDataHash(_hash(codeOrigin));\n\n        require(\n            !_consumed[digest],\n            'SDAO_REGISTRAR_LIMITED_CODE_ACCESSIBLE: ACCESS_CODE_ALREADY_CONSUMED'\n        );\n\n        require(\n            digest.recover(accessCode) == _codeSigner,\n            'SDAO_REGISTRAR_LIMITED_CODE_ACCESSIBLE: INVALID_ACCESS_CODE OR INVALID_SENDER'\n        );\n\n        bytes32 labelHash = keccak256(bytes(label));\n        _register(recipient, labelHash);\n\n        _consumed[digest] = true;\n\n        emit AccessCodeConsumed(groupId, accessCode);\n  ","after":"   function registerWithAccessCode(\n        string calldata label,\n        address recipient,\n        bytes calldata accessCode\n    ) external override {\n        uint256 groupId = _getCurrentGroupId();\n\n        CodeOrigin memory codeOrigin = CodeOrigin({\n        recipient : recipient,\n        groupId : groupId\n        });\n        bytes32 digest = DOMAIN_SEPARATOR.toTypedDataHash(_hash(codeOrigin));\n\n        require(\n            !_consumed[digest],\n            'SDAO_REGISTRAR_LIMITED_CODE_ACCESSIBLE: ACCESS_CODE_ALREADY_CONSUMED'\n        );\n\n        require(\n            digest.recover(accessCode) == _codeSigner,\n            'SDAO_REGISTRAR_LIMITED_CODE_ACCESSIBLE: INVALID_ACCESS_CODE OR INVALID_SENDER'\n        );\n\n        bytes32 labelHash = keccak256(bytes(label));\n        _register(recipient, labelHash);\n\n        _consumed[digest] = true;\n\n        emit AccessCodeConsumed(groupId, accessCode);\n  ","contract":"SismoSDaoRegistrar","time":0}]}
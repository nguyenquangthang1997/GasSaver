{"time":93,"results":[{"type":"external-function ","before":"function createEditions(\n        EditionTier[] memory tiers,\n    // The account that should receive the revenue.\n        address payable fundingRecipient,\n    // The address (e.g. crowdfund proxy) that is allowed to mint\n    // tokens in this edition.\n        address minter\n    ) external override {\n        // Only the crowdfund factory can create editions.\n        require(msg.sender == editionCreator);\n        // Copy the next edition id, which we reference in the loop.\n        uint256 firstEditionId = nextEditionId;\n        // Update the next edition id to what we expect after the loop.\n        nextEditionId += tiers.length;\n        // Execute a loop that created editions.\n        for (uint8 x = 0; x < tiers.length; x++) {\n            uint256 id = firstEditionId + x;\n            uint256 quantity = tiers[x].quantity;\n            uint256 price = tiers[x].price;\n            bytes32 contentHash = tiers[x].contentHash;\n\n            editions[id] = Edition({\n            quantity : quantity,\n            price : price,\n            fundingRecipient : fundingRecipient,\n            numSold : 0,\n            contentHash : contentHash\n            });\n\n            editionToMinter[id] = minter;\n\n            emit EditionCreated(quantity, price, fundingRecipient, id);\n        }\n    }","after":"function createEditions(\n        EditionTier[] calldata tiers,\n    // The account that should receive the revenue.\n        address payable fundingRecipient,\n    // The address (e.g. crowdfund proxy) that is allowed to mint\n    // tokens in this edition.\n        address minter\n    ) external override {\n        // Only the crowdfund factory can create editions.\n        require(msg.sender == editionCreator);\n        // Copy the next edition id, which we reference in the loop.\n        uint256 firstEditionId = nextEditionId;\n        // Update the next edition id to what we expect after the loop.\n        nextEditionId += tiers.length;\n        // Execute a loop that created editions.\n        for (uint8 x = 0; x < tiers.length; x++) {\n            uint256 id = firstEditionId + x;\n            uint256 quantity = tiers[x].quantity;\n            uint256 price = tiers[x].price;\n            bytes32 contentHash = tiers[x].contentHash;\n\n            editions[id] = Edition({\n            quantity : quantity,\n            price : price,\n            fundingRecipient : fundingRecipient,\n            numSold : 0,\n            contentHash : contentHash\n            });\n\n            editionToMinter[id] = minter;\n\n            emit EditionCreated(quantity, price, fundingRecipient, id);\n        }\n    }","contract":"CrowdfundWithEditions","time":0},{"type":"external-function ","before":"function changeBaseURI(string memory baseURI_) public onlyOwner {\n        baseURI = baseURI_;\n    }","after":"function changeBaseURI(string calldata baseURI_) public onlyOwner {\n        baseURI = baseURI_;\n    }","contract":"CrowdfundWithEditions","time":0},{"type":"constant-restrict-modification  ","before":"uint256 internal reentrancyStatus;","after":"uint256 internal constant reentrancyStatus;","contract":"CrowdfundWithEditions","time":0}]}
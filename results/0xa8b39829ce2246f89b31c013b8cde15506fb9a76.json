{"time":570,"results":[{"type":"constant-restrict-modification  ","before":"string public name = \"Wrapped Ether\";","after":"string public constant name = \"Wrapped Ether\";","contract":"WETH9","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"WETH\";","after":"string public constant symbol = \"WETH\";","contract":"WETH9","time":0},{"type":"constant-restrict-modification  ","before":"uint8  public decimals = 18;","after":"uint8  public constant decimals = 18;","contract":"WETH9","time":0},{"type":"struct-data-arrangement ","before":"\n address toke\n Types.TotalPar totalPa\n Interest.Index inde\n IPriceOracle priceOracl\n IInterestSetter interestSette\n Decimal.D256 marginPremiu\n Decimal.D256 spreadPremiu\n bool isClosin","after":" Types.TotalPar totalPa\n Interest.Index inde\n IPriceOracle priceOracl\n IInterestSetter interestSette\n Decimal.D256 marginPremiu\n Decimal.D256 spreadPremiu\n address toke\n bool isClosin\n","contract":"Storage","time":0},{"type":"external-function ","before":" function ownerAddMarket(\n\n        Storage.State storage state,\n\n        address token,\n\n        IPriceOracle priceOracle,\n\n        IInterestSetter interestSetter,\n\n        Decimal.D256 memory marginPremium,\n\n        Decimal.D256 memory spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _requireNoMarket(state, token);\n\n\n        uint256 marketId = state.numMarkets;\n\n\n        state.numMarkets++;\n\n        state.markets[marketId].token = token;\n\n        state.markets[marketId].index = Interest.newIndex();\n\n\n        emit LogAddMarket(marketId, token);\n\n\n        _setPriceOracle(state, marketId, priceOracle);\n\n        _setInterestSetter(state, marketId, interestSetter);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    ","after":" function ownerAddMarket(\n\n        Storage.State storage state,\n\n        address token,\n\n        IPriceOracle priceOracle,\n\n        IInterestSetter interestSetter,\n\n        Decimal.D256 calldata marginPremium,\n\n        Decimal.D256 calldata spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _requireNoMarket(state, token);\n\n\n        uint256 marketId = state.numMarkets;\n\n\n        state.numMarkets++;\n\n        state.markets[marketId].token = token;\n\n        state.markets[marketId].index = Interest.newIndex();\n\n\n        emit LogAddMarket(marketId, token);\n\n\n        _setPriceOracle(state, marketId, priceOracle);\n\n        _setInterestSetter(state, marketId, interestSetter);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetMarginPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 memory marginPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n    ","after":" function ownerSetMarginPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 calldata marginPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setMarginPremium(state, marketId, marginPremium);\n\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetSpreadPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 memory spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    ","after":" function ownerSetSpreadPremium(\n\n        Storage.State storage state,\n\n        uint256 marketId,\n\n        Decimal.D256 calldata spreadPremium\n\n    )\n\n    public\n\n    {\n\n        _validateMarketId(state, marketId);\n\n        _setSpreadPremium(state, marketId, spreadPremium);\n\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetMarginRatio(\n\n        Storage.State storage state,\n\n        Decimal.D256 memory ratio\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            ratio.value <= state.riskLimits.marginRatioMax,\n\n            FILE,\n\n            \"Ratio too high\"\n\n        );\n\n        Require.that(\n\n            ratio.value > state.riskParams.liquidationSpread.value,\n\n            FILE,\n\n            \"Ratio cannot be <= spread\"\n\n        );\n\n        state.riskParams.marginRatio = ratio;\n\n        emit LogSetMarginRatio(ratio);\n\n    ","after":" function ownerSetMarginRatio(\n\n        Storage.State storage state,\n\n        Decimal.D256 calldata ratio\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            ratio.value <= state.riskLimits.marginRatioMax,\n\n            FILE,\n\n            \"Ratio too high\"\n\n        );\n\n        Require.that(\n\n            ratio.value > state.riskParams.liquidationSpread.value,\n\n            FILE,\n\n            \"Ratio cannot be <= spread\"\n\n        );\n\n        state.riskParams.marginRatio = ratio;\n\n        emit LogSetMarginRatio(ratio);\n\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetLiquidationSpread(\n\n        Storage.State storage state,\n\n        Decimal.D256 memory spread\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            spread.value <= state.riskLimits.liquidationSpreadMax,\n\n            FILE,\n\n            \"Spread too high\"\n\n        );\n\n        Require.that(\n\n            spread.value < state.riskParams.marginRatio.value,\n\n            FILE,\n\n            \"Spread cannot be >= ratio\"\n\n        );\n\n        state.riskParams.liquidationSpread = spread;\n\n        emit LogSetLiquidationSpread(spread);\n\n    ","after":" function ownerSetLiquidationSpread(\n\n        Storage.State storage state,\n\n        Decimal.D256 calldata spread\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            spread.value <= state.riskLimits.liquidationSpreadMax,\n\n            FILE,\n\n            \"Spread too high\"\n\n        );\n\n        Require.that(\n\n            spread.value < state.riskParams.marginRatio.value,\n\n            FILE,\n\n            \"Spread cannot be >= ratio\"\n\n        );\n\n        state.riskParams.liquidationSpread = spread;\n\n        emit LogSetLiquidationSpread(spread);\n\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetEarningsRate(\n\n        Storage.State storage state,\n\n        Decimal.D256 memory earningsRate\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            earningsRate.value <= state.riskLimits.earningsRateMax,\n\n            FILE,\n\n            \"Rate too high\"\n\n        );\n\n        state.riskParams.earningsRate = earningsRate;\n\n        emit LogSetEarningsRate(earningsRate);\n\n    ","after":" function ownerSetEarningsRate(\n\n        Storage.State storage state,\n\n        Decimal.D256 calldata earningsRate\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            earningsRate.value <= state.riskLimits.earningsRateMax,\n\n            FILE,\n\n            \"Rate too high\"\n\n        );\n\n        state.riskParams.earningsRate = earningsRate;\n\n        emit LogSetEarningsRate(earningsRate);\n\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetMinBorrowedValue(\n\n        Storage.State storage state,\n\n        Monetary.Value memory minBorrowedValue\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            minBorrowedValue.value <= state.riskLimits.minBorrowedValueMax,\n\n            FILE,\n\n            \"Value too high\"\n\n        );\n\n        state.riskParams.minBorrowedValue = minBorrowedValue;\n\n        emit LogSetMinBorrowedValue(minBorrowedValue);\n\n    ","after":" function ownerSetMinBorrowedValue(\n\n        Storage.State storage state,\n\n        Monetary.Value calldata minBorrowedValue\n\n    )\n\n    public\n\n    {\n\n        Require.that(\n\n            minBorrowedValue.value <= state.riskLimits.minBorrowedValueMax,\n\n            FILE,\n\n            \"Value too high\"\n\n        );\n\n        state.riskParams.minBorrowedValue = minBorrowedValue;\n\n        emit LogSetMinBorrowedValue(minBorrowedValue);\n\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function operate(\n\n        Storage.State storage state,\n\n        Account.Info[] memory accounts,\n\n        Actions.ActionArgs[] memory actions\n\n    )\n\n    public\n\n    {\n\n        Events.logOperation();\n\n\n        _verifyInputs(accounts, actions);\n\n\n        (\n\n        bool[] memory primaryAccounts,\n\n        Cache.MarketCache memory cache\n\n        ) = _runPreprocessing(\n\n            state,\n\n            accounts,\n\n            actions\n\n        );\n\n\n        _runActions(\n\n            state,\n\n            accounts,\n\n            actions,\n\n            cache\n\n        );\n\n\n        _verifyFinalState(\n\n            state,\n\n            accounts,\n\n            primaryAccounts,\n\n            cache\n\n        );\n\n    ","after":" function operate(\n\n        Storage.State storage state,\n\n        Account.Info[] calldata accounts,\n\n        Actions.ActionArgs[] calldata actions\n\n    )\n\n    public\n\n    {\n\n        Events.logOperation();\n\n\n        _verifyInputs(accounts, actions);\n\n\n        (\n\n        bool[] memory primaryAccounts,\n\n        Cache.MarketCache memory cache\n\n        ) = _runPreprocessing(\n\n            state,\n\n            accounts,\n\n            actions\n\n        );\n\n\n        _runActions(\n\n            state,\n\n            accounts,\n\n            actions,\n\n            cache\n\n        );\n\n\n        _verifyFinalState(\n\n            state,\n\n            accounts,\n\n            primaryAccounts,\n\n            cache\n\n        );\n\n    ","contract":"OperationImpl","time":0},{"type":"external-function ","before":" function ownerAddMarket(\n\n        address token,\n\n        IPriceOracle priceOracle,\n\n        IInterestSetter interestSetter,\n\n        Decimal.D256 memory marginPremium,\n\n        Decimal.D256 memory spreadPremium\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerAddMarket(\n\n            g_state,\n\n            token,\n\n            priceOracle,\n\n            interestSetter,\n\n            marginPremium,\n\n            spreadPremium\n\n        );\n\n    ","after":" function ownerAddMarket(\n\n        address token,\n\n        IPriceOracle priceOracle,\n\n        IInterestSetter interestSetter,\n\n        Decimal.D256 calldata marginPremium,\n\n        Decimal.D256 calldata spreadPremium\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerAddMarket(\n\n            g_state,\n\n            token,\n\n            priceOracle,\n\n            interestSetter,\n\n            marginPremium,\n\n            spreadPremium\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetMarginPremium(\n\n        uint256 marketId,\n\n        Decimal.D256 memory marginPremium\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetMarginPremium(\n\n            g_state,\n\n            marketId,\n\n            marginPremium\n\n        );\n\n    ","after":" function ownerSetMarginPremium(\n\n        uint256 marketId,\n\n        Decimal.D256 calldata marginPremium\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetMarginPremium(\n\n            g_state,\n\n            marketId,\n\n            marginPremium\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetSpreadPremium(\n\n        uint256 marketId,\n\n        Decimal.D256 memory spreadPremium\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetSpreadPremium(\n\n            g_state,\n\n            marketId,\n\n            spreadPremium\n\n        );\n\n    ","after":" function ownerSetSpreadPremium(\n\n        uint256 marketId,\n\n        Decimal.D256 calldata spreadPremium\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetSpreadPremium(\n\n            g_state,\n\n            marketId,\n\n            spreadPremium\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetMarginRatio(\n\n        Decimal.D256 memory ratio\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetMarginRatio(\n\n            g_state,\n\n            ratio\n\n        );\n\n    ","after":" function ownerSetMarginRatio(\n\n        Decimal.D256 calldata ratio\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetMarginRatio(\n\n            g_state,\n\n            ratio\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetLiquidationSpread(\n\n        Decimal.D256 memory spread\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetLiquidationSpread(\n\n            g_state,\n\n            spread\n\n        );\n\n    ","after":" function ownerSetLiquidationSpread(\n\n        Decimal.D256 calldata spread\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetLiquidationSpread(\n\n            g_state,\n\n            spread\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetEarningsRate(\n\n        Decimal.D256 memory earningsRate\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetEarningsRate(\n\n            g_state,\n\n            earningsRate\n\n        );\n\n    ","after":" function ownerSetEarningsRate(\n\n        Decimal.D256 calldata earningsRate\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetEarningsRate(\n\n            g_state,\n\n            earningsRate\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetMinBorrowedValue(\n\n        Monetary.Value memory minBorrowedValue\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetMinBorrowedValue(\n\n            g_state,\n\n            minBorrowedValue\n\n        );\n\n    ","after":" function ownerSetMinBorrowedValue(\n\n        Monetary.Value calldata minBorrowedValue\n\n    )\n\n    public\n\n    onlyOwner\n\n    nonReentrant\n\n    {\n\n        AdminImpl.ownerSetMinBorrowedValue(\n\n            g_state,\n\n            minBorrowedValue\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function getAccountStatus(\n\n        Account.Info memory account\n\n    )\n\n    public\n\n    view\n\n    returns (Account.Status)\n\n    {\n\n        return g_state.getStatus(account);\n\n    ","after":" function getAccountStatus(\n\n        Account.Info calldata account\n\n    )\n\n    public\n\n    view\n\n    returns (Account.Status)\n\n    {\n\n        return g_state.getStatus(account);\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function getAccountValues(\n\n        Account.Info memory account\n\n    )\n\n    public\n\n    view\n\n    returns (Monetary.Value memory, Monetary.Value memory)\n\n    {\n\n        return getAccountValuesInternal(account, /* adjustForLiquidity = */ false);\n\n    ","after":" function getAccountValues(\n\n        Account.Info calldata account\n\n    )\n\n    public\n\n    view\n\n    returns (Monetary.Value memory, Monetary.Value memory)\n\n    {\n\n        return getAccountValuesInternal(account, /* adjustForLiquidity = */ false);\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function getAdjustedAccountValues(\n\n        Account.Info memory account\n\n    )\n\n    public\n\n    view\n\n    returns (Monetary.Value memory, Monetary.Value memory)\n\n    {\n\n        return getAccountValuesInternal(account, /* adjustForLiquidity = */ true);\n\n    ","after":" function getAdjustedAccountValues(\n\n        Account.Info calldata account\n\n    )\n\n    public\n\n    view\n\n    returns (Monetary.Value memory, Monetary.Value memory)\n\n    {\n\n        return getAccountValuesInternal(account, /* adjustForLiquidity = */ true);\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function getAccountBalances(\n\n        Account.Info memory account\n\n    )\n\n    public\n\n    view\n\n    returns (\n\n        address[] memory,\n\n        Types.Par[] memory,\n\n        Types.Wei[] memory\n\n    )\n\n    {\n\n        uint256 numMarkets = g_state.numMarkets;\n\n        address[] memory tokens = new address[](numMarkets);\n\n        Types.Par[] memory pars = new Types.Par[](numMarkets);\n\n        Types.Wei[] memory weis = new Types.Wei[](numMarkets);\n\n\n        for (uint256 m = 0; m < numMarkets; m++) {\n\n            tokens[m] = getMarketTokenAddress(m);\n\n            pars[m] = getAccountPar(account, m);\n\n            weis[m] = getAccountWei(account, m);\n\n        }\n\n\n        return (\n\n        tokens,\n\n        pars,\n\n        weis\n\n        );\n\n    ","after":" function getAccountBalances(\n\n        Account.Info calldata account\n\n    )\n\n    public\n\n    view\n\n    returns (\n\n        address[] memory,\n\n        Types.Par[] memory,\n\n        Types.Wei[] memory\n\n    )\n\n    {\n\n        uint256 numMarkets = g_state.numMarkets;\n\n        address[] memory tokens = new address[](numMarkets);\n\n        Types.Par[] memory pars = new Types.Par[](numMarkets);\n\n        Types.Wei[] memory weis = new Types.Wei[](numMarkets);\n\n\n        for (uint256 m = 0; m < numMarkets; m++) {\n\n            tokens[m] = getMarketTokenAddress(m);\n\n            pars[m] = getAccountPar(account, m);\n\n            weis[m] = getAccountWei(account, m);\n\n        }\n\n\n        return (\n\n        tokens,\n\n        pars,\n\n        weis\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function operate(\n\n        Account.Info[] memory accounts,\n\n        Actions.ActionArgs[] memory actions\n\n    )\n\n    public\n\n    nonReentrant\n\n    {\n\n        OperationImpl.operate(\n\n            g_state,\n\n            accounts,\n\n            actions\n\n        );\n\n    ","after":" function operate(\n\n        Account.Info[] calldata accounts,\n\n        Actions.ActionArgs[] calldata actions\n\n    )\n\n    public\n\n    nonReentrant\n\n    {\n\n        OperationImpl.operate(\n\n            g_state,\n\n            accounts,\n\n            actions\n\n        );\n\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function setOperators(\n\n        OperatorArg[] memory args\n\n    )\n\n    public\n\n    {\n\n        for (uint256 i = 0; i < args.length; i++) {\n\n            address operator = args[i].operator;\n\n            bool trusted = args[i].trusted;\n\n            g_state.operators[msg.sender][operator] = trusted;\n\n            emit LogOperatorSet(msg.sender, operator, trusted);\n\n        }\n\n    ","after":" function setOperators(\n\n        OperatorArg[] calldata args\n\n    )\n\n    public\n\n    {\n\n        for (uint256 i = 0; i < args.length; i++) {\n\n            address operator = args[i].operator;\n\n            bool trusted = args[i].trusted;\n\n            g_state.operators[msg.sender][operator] = trusted;\n\n            emit LogOperatorSet(msg.sender, operator, trusted);\n\n        }\n\n    ","contract":"SoloMargin","time":0},{"type":"constant-restrict-modification  ","before":" bytes32 FILE = \"Getters\"","after":" bytes32 constant FILE = \"Getters\"","contract":"SoloMargin","time":0},{"type":"loop-calculation","before":" address owner1 = accounts[action.accountId].owner","after":"// move outside for loop\n address owner1 = accounts[action.accountId].owner","loc":{"start":{"line":11384,"column":12},"end":{"line":11384,"column":61}},"contract":"PayableProxyForSoloMargin","time":0},{"type":"external-function ","before":" function operate(\n\n        Account.Info[] memory accounts,\n\n        Actions.ActionArgs[] memory actions,\n\n        address payable sendEthTo\n\n    )\n\n    public\n\n    payable\n\n    nonReentrant\n\n    {\n\n        WETH9 weth = WETH;\n\n\n        // create WETH from ETH\n\n        if (msg.value != 0) {\n\n            weth.deposit.value(msg.value)();\n\n        }\n\n\n        // validate the input\n\n        for (uint256 i = 0; i < actions.length; i++) {\n\n            Actions.ActionArgs memory action = actions[i];\n\n\n            // Can only operate on accounts owned by msg.sender\n\n            address owner1 = accounts[action.accountId].owner;\n\n            Require.that(\n\n                owner1 == msg.sender,\n\n                FILE,\n\n                \"Sender must be primary account\",\n\n                owner1\n\n            );\n\n\n            // For a transfer both accounts must be owned by msg.sender\n\n            if (action.actionType == Actions.ActionType.Transfer) {\n\n                address owner2 = accounts[action.otherAccountId].owner;\n\n                Require.that(\n\n                    owner2 == msg.sender,\n\n                    FILE,\n\n                    \"Sender must be secondary account\",\n\n                    owner2\n\n                );\n\n            }\n\n        }\n\n\n        SOLO_MARGIN.operate(accounts, actions);\n\n\n        // return all remaining WETH to the sendEthTo as ETH\n\n        uint256 remainingWeth = weth.balanceOf(address(this));\n\n        if (remainingWeth != 0) {\n\n            Require.that(\n\n                sendEthTo != address(0),\n\n                FILE,\n\n                \"Must set sendEthTo\"\n\n            );\n\n\n            weth.withdraw(remainingWeth);\n\n            sendEthTo.transfer(remainingWeth);\n\n        }\n\n    ","after":" function operate(\n\n        Account.Info[] calldata accounts,\n\n        Actions.ActionArgs[] calldata actions,\n\n        address payable sendEthTo\n\n    )\n\n    public\n\n    payable\n\n    nonReentrant\n\n    {\n\n        WETH9 weth = WETH;\n\n\n        // create WETH from ETH\n\n        if (msg.value != 0) {\n\n            weth.deposit.value(msg.value)();\n\n        }\n\n\n        // validate the input\n\n        for (uint256 i = 0; i < actions.length; i++) {\n\n            Actions.ActionArgs memory action = actions[i];\n\n\n            // Can only operate on accounts owned by msg.sender\n\n            address owner1 = accounts[action.accountId].owner;\n\n            Require.that(\n\n                owner1 == msg.sender,\n\n                FILE,\n\n                \"Sender must be primary account\",\n\n                owner1\n\n            );\n\n\n            // For a transfer both accounts must be owned by msg.sender\n\n            if (action.actionType == Actions.ActionType.Transfer) {\n\n                address owner2 = accounts[action.otherAccountId].owner;\n\n                Require.that(\n\n                    owner2 == msg.sender,\n\n                    FILE,\n\n                    \"Sender must be secondary account\",\n\n                    owner2\n\n                );\n\n            }\n\n        }\n\n\n        SOLO_MARGIN.operate(accounts, actions);\n\n\n        // return all remaining WETH to the sendEthTo as ETH\n\n        uint256 remainingWeth = weth.balanceOf(address(this));\n\n        if (remainingWeth != 0) {\n\n            Require.that(\n\n                sendEthTo != address(0),\n\n                FILE,\n\n                \"Must set sendEthTo\"\n\n            );\n\n\n            weth.withdraw(remainingWeth);\n\n            sendEthTo.transfer(remainingWeth);\n\n        }\n\n    ","contract":"PayableProxyForSoloMargin","time":0}]}
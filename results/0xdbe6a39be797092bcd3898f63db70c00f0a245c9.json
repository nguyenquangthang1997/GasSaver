{"time":109,"results":[{"type":"external-function ","before":"function newConverter(\n\n        uint16 _type,\n\n        string memory _name,\n\n        string memory _symbol,\n\n        uint8 _decimals,\n\n        uint32 _maxConversionFee,\n\n        IERC20Token[] memory _reserveTokens,\n\n        uint32[] memory _reserveWeights\n\n    )\n\n    public virtual returns (IConverter)\n\n    {\n\n        uint256 length = _reserveTokens.length;\n\n        require(length == _reserveWeights.length, \"ERR_INVALID_RESERVES\");\n\n        require(getLiquidityPoolByConfig(_type, _reserveTokens, _reserveWeights) == IConverterAnchor(0), \"ERR_ALREADY_EXISTS\");\n\n\n        IConverterFactory factory = IConverterFactory(addressOf(CONVERTER_FACTORY));\n\n        IConverterAnchor anchor = IConverterAnchor(factory.createAnchor(_type, _name, _symbol, _decimals));\n\n        IConverter converter = IConverter(factory.createConverter(_type, anchor, registry, _maxConversionFee));\n\n\n        anchor.acceptOwnership();\n\n        converter.acceptOwnership();\n\n\n        for (uint256 i = 0; i < length; i++)\n\n            converter.addReserve(_reserveTokens[i], _reserveWeights[i]);\n\n\n        anchor.transferOwnership(address(converter));\n\n        converter.acceptAnchorOwnership();\n\n        converter.transferOwnership(msg.sender);\n\n\n        addConverterInternal(converter);\n\n        return converter;\n\n    }","after":"function newConverter(\n\n        uint16 _type,\n\n        string calldata _name,\n\n        string calldata _symbol,\n\n        uint8 _decimals,\n\n        uint32 _maxConversionFee,\n\n        IERC20Token[] calldata _reserveTokens,\n\n        uint32[] calldata _reserveWeights\n\n    )\n\n    public virtual returns (IConverter)\n\n    {\n\n        uint256 length = _reserveTokens.length;\n\n        require(length == _reserveWeights.length, \"ERR_INVALID_RESERVES\");\n\n        require(getLiquidityPoolByConfig(_type, _reserveTokens, _reserveWeights) == IConverterAnchor(0), \"ERR_ALREADY_EXISTS\");\n\n\n        IConverterFactory factory = IConverterFactory(addressOf(CONVERTER_FACTORY));\n\n        IConverterAnchor anchor = IConverterAnchor(factory.createAnchor(_type, _name, _symbol, _decimals));\n\n        IConverter converter = IConverter(factory.createConverter(_type, anchor, registry, _maxConversionFee));\n\n\n        anchor.acceptOwnership();\n\n        converter.acceptOwnership();\n\n\n        for (uint256 i = 0; i < length; i++)\n\n            converter.addReserve(_reserveTokens[i], _reserveWeights[i]);\n\n\n        anchor.transferOwnership(address(converter));\n\n        converter.acceptAnchorOwnership();\n\n        converter.transferOwnership(msg.sender);\n\n\n        addConverterInternal(converter);\n\n        return converter;\n\n    }","contract":"ConverterRegistry","time":0},{"type":"external-function ","before":"function getConvertersBySmartTokens(address[] memory _smartTokens) public view returns (IConverter[] memory) {\n\n        return getConvertersByAnchors(_smartTokens);\n\n    }","after":"function getConvertersBySmartTokens(address[] calldata _smartTokens) public view returns (IConverter[] memory) {\n\n        return getConvertersByAnchors(_smartTokens);\n\n    }","contract":"ConverterRegistry","time":0},{"type":"external-function ","before":"function getLiquidityPoolByReserveConfig(IERC20Token[] memory _reserveTokens, uint32[] memory _reserveWeights) public view returns (IConverterAnchor) {\n\n        return getLiquidityPoolByConfig(_reserveTokens.length > 1 ? 1 : 0, _reserveTokens, _reserveWeights);\n\n    }","after":"function getLiquidityPoolByReserveConfig(IERC20Token[] calldata _reserveTokens, uint32[] calldata _reserveWeights) public view returns (IConverterAnchor) {\n\n        return getLiquidityPoolByConfig(_reserveTokens.length > 1 ? 1 : 0, _reserveTokens, _reserveWeights);\n\n    }","contract":"ConverterRegistry","time":0}]}
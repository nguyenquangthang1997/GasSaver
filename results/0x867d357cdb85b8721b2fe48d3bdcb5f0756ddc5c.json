{"time":174,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":1},{"type":"struct-data-arrangement ","before":"\naddress component\naddress module\nint256 unit\nuint8 positionState\nbytes data","after":"int256 unit\nbytes data\naddress component\naddress module\nuint8 positionState\n","contract":"ISetToken","time":0},{"type":"external-function ","before":"function batchFetchManagers(ISetToken[] memory _setTokens) external view returns (address[] memory) {\n\n        address[] memory managers = new address[](_setTokens.length);\n\n\n        for (uint256 i = 0; i < _setTokens.length; i++) {\n\n            managers[i] = _setTokens[i].manager();\n\n        }\n\n        return managers;\n\n    }","after":"function batchFetchManagers(ISetToken[] calldata _setTokens) external view returns (address[] memory) {\n\n        address[] memory managers = new address[](_setTokens.length);\n\n\n        for (uint256 i = 0; i < _setTokens.length; i++) {\n\n            managers[i] = _setTokens[i].manager();\n\n        }\n\n        return managers;\n\n    }","contract":"ProtocolViewer","time":0},{"type":"external-function ","before":"function batchFetchStreamingFeeInfo(\n\n        IStreamingFeeModule _streamingFeeModule,\n\n        ISetToken[] memory _setTokens\n\n    )\n\n    external\n\n    view\n\n    returns (StreamingFeeInfo[] memory)\n\n    {\n\n        StreamingFeeInfo[] memory feeInfo = new StreamingFeeInfo[](_setTokens.length);\n\n\n        for (uint256 i = 0; i < _setTokens.length; i++) {\n\n            StreamingFeeModule.FeeState memory feeState = _streamingFeeModule.feeStates(_setTokens[i]);\n\n            uint256 unaccruedFees = _streamingFeeModule.getFee(_setTokens[i]);\n\n\n            feeInfo[i] = StreamingFeeInfo({\n\n            feeRecipient : feeState.feeRecipient,\n\n            streamingFeePercentage : feeState.streamingFeePercentage,\n\n            unaccruedFees : unaccruedFees\n\n            });\n\n        }\n\n\n        return feeInfo;\n\n    }","after":"function batchFetchStreamingFeeInfo(\n\n        IStreamingFeeModule _streamingFeeModule,\n\n        ISetToken[] calldata _setTokens\n\n    )\n\n    external\n\n    view\n\n    returns (StreamingFeeInfo[] memory)\n\n    {\n\n        StreamingFeeInfo[] memory feeInfo = new StreamingFeeInfo[](_setTokens.length);\n\n\n        for (uint256 i = 0; i < _setTokens.length; i++) {\n\n            StreamingFeeModule.FeeState memory feeState = _streamingFeeModule.feeStates(_setTokens[i]);\n\n            uint256 unaccruedFees = _streamingFeeModule.getFee(_setTokens[i]);\n\n\n            feeInfo[i] = StreamingFeeInfo({\n\n            feeRecipient : feeState.feeRecipient,\n\n            streamingFeePercentage : feeState.streamingFeePercentage,\n\n            unaccruedFees : unaccruedFees\n\n            });\n\n        }\n\n\n        return feeInfo;\n\n    }","contract":"ProtocolViewer","time":0}]}
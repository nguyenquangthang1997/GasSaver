{"time":182,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n            !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n            (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":412,"column":16},"end":{"line":413,"column":42}},"contract":"Colorverse","time":0},{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\nuint256 public constant TOTAL_MAX_SUPPLY = 16777216;\nuint256 public PRICE = 5e26;\naddress public priceFeedAddress;\nAggregatorV3Interface internal priceFeed;\naddress payable private safe;\naddress public founderContract;\naddress private _owner;\nstring datajson = \"data:application/json;utf8,\";\nstring datasvg = \"data:image/svg+xml;utf8,\";\nstring svg1 = \"<svg xmlns='http://www.w3.org/2000/svg'><rect width='350' height='350' style='fill: \";\nstring svg2 = \"'><title>\";\nstring svg3 = \"</title></rect></svg>\";\nstring svga = \"<svg%20xmlns='http://www.w3.org/2000/svg'><rect%20width='350'%20height='350'%20style='fill:%20\";\nmapping(uint256 => string) private _tokenName;\nmapping(string => bool) private _nameReserved;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nuint256 public constant TOTAL_MAX_SUPPLY = 16777216;\nuint256 public PRICE = 5e26;\nAggregatorV3Interface internal priceFeed;\nstring datajson = \"data:application/json;utf8,\";\nstring datasvg = \"data:image/svg+xml;utf8,\";\nstring svg1 = \"<svg xmlns='http://www.w3.org/2000/svg'><rect width='350' height='350' style='fill: \";\nstring svg2 = \"'><title>\";\nstring svg3 = \"</title></rect></svg>\";\nstring svga = \"<svg%20xmlns='http://www.w3.org/2000/svg'><rect%20width='350'%20height='350'%20style='fill:%20\";\nmapping(uint256 => string) private _tokenName;\nmapping(string => bool) private _nameReserved;\naddress public priceFeedAddress;\naddress payable private safe;\naddress public founderContract;\naddress private _owner;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"Colorverse","time":1},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) public payable {\n        address colorOwner = ownerOf(tokenId);\n        require(_msgSender() == colorOwner, \"ERC721: caller is not the owner\");\n        //GSN Network????\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n        uint256 currentPrice = getPrice();\n        require(msg.value >= (currentPrice - ((currentPrice * 2) / 100)), \"Insufficient ETH amount\");\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        emit NameChange(tokenId, newName);\n    }","after":"function changeName(uint256 tokenId, string calldata newName) public payable {\n        address colorOwner = ownerOf(tokenId);\n        require(_msgSender() == colorOwner, \"ERC721: caller is not the owner\");\n        //GSN Network????\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n        uint256 currentPrice = getPrice();\n        require(msg.value >= (currentPrice - ((currentPrice * 2) / 100)), \"Insufficient ETH amount\");\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        emit NameChange(tokenId, newName);\n    }","contract":"Colorverse","time":0},{"type":"external-function ","before":"function mintAll(uint256[] memory _tokenIds) public payable {\n        require(_tokenIds.length > 0, \"No colors specified\");\n        require(_tokenIds.length < 17, \"Color minting exceeded\");\n        uint256 currentAmount = getPrice() * uint256(_tokenIds.length);\n        require(msg.value >= (currentAmount - ((currentAmount * 2) / 100)), \"Insufficient ETH amount\");\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            mint(_tokenIds[i]);\n        }\n        //register founders token if 16 tokens\n        if (_tokenIds.length == 16) {\n            uint256[16] memory tmpArr;\n            for (uint i = 0; i < _tokenIds.length; i++) {\n                tmpArr[i] = _tokenIds[i];\n            }\n            Founder(founderContract).register(tmpArr, msg.sender);\n        }\n    }","after":"function mintAll(uint256[] calldata _tokenIds) public payable {\n        require(_tokenIds.length > 0, \"No colors specified\");\n        require(_tokenIds.length < 17, \"Color minting exceeded\");\n        uint256 currentAmount = getPrice() * uint256(_tokenIds.length);\n        require(msg.value >= (currentAmount - ((currentAmount * 2) / 100)), \"Insufficient ETH amount\");\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            mint(_tokenIds[i]);\n        }\n        //register founders token if 16 tokens\n        if (_tokenIds.length == 16) {\n            uint256[16] memory tmpArr;\n            for (uint i = 0; i < _tokenIds.length; i++) {\n                tmpArr[i] = _tokenIds[i];\n            }\n            Founder(founderContract).register(tmpArr, msg.sender);\n        }\n    }","contract":"Colorverse","time":0},{"type":"external-function ","before":"function batchTransfer(uint256[] memory tokenIds, address to) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            safeTransferFrom(_msgSender(), to, tokenIds[i], \"\");\n        }\n    }","after":"function batchTransfer(uint256[] calldata tokenIds, address to) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            safeTransferFrom(_msgSender(), to, tokenIds[i], \"\");\n        }\n    }","contract":"Colorverse","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Colorverse","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Colorverse","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public PRICE = 5e26;","after":"uint256 public constant PRICE = 5e26;","contract":"Colorverse","time":1},{"type":"constant-restrict-modification  ","before":"string datajson = \"data:application/json;utf8,\";","after":"string constant datajson = \"data:application/json;utf8,\";","contract":"Colorverse","time":1},{"type":"constant-restrict-modification  ","before":"string datasvg = \"data:image/svg+xml;utf8,\";","after":"string constant datasvg = \"data:image/svg+xml;utf8,\";","contract":"Colorverse","time":1},{"type":"constant-restrict-modification  ","before":"string svg1 = \"<svg xmlns='http://www.w3.org/2000/svg'><rect width='350' height='350' style='fill: \";","after":"string constant svg1 = \"<svg xmlns='http://www.w3.org/2000/svg'><rect width='350' height='350' style='fill: \";","contract":"Colorverse","time":1},{"type":"constant-restrict-modification  ","before":"string svg2 = \"'><title>\";","after":"string constant svg2 = \"'><title>\";","contract":"Colorverse","time":1},{"type":"constant-restrict-modification  ","before":"string svg3 = \"</title></rect></svg>\";","after":"string constant svg3 = \"</title></rect></svg>\";","contract":"Colorverse","time":1},{"type":"constant-restrict-modification  ","before":"string svga = \"<svg%20xmlns='http://www.w3.org/2000/svg'><rect%20width='350'%20height='350'%20style='fill:%20\";","after":"string constant svga = \"<svg%20xmlns='http://www.w3.org/2000/svg'><rect%20width='350'%20height='350'%20style='fill:%20\";","contract":"Colorverse","time":1}]}
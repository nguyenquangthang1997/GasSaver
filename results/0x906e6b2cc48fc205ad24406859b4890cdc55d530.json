{"time":288,"results":[{"type":"external-function ","before":"();\n\n        if (totalSupply == 0) {\n\n            fairSupply = BASE_SUPPLY.mul(99);\n\n            _mint(address(this), BASE_SUPPLY);\n            // Donate up to 1%\n\n\n\n            // Use the greatest token amount but not less than 99k for the initial supply\n\n            for (uint i = 0; i < amounts.length; i++) {\n\n                fairSupply = Math.max(fairSupply, amounts[i]);\n\n            }\n\n        }\n\n        else {\n\n            // Pre-compute fair supply\n\n            fairSupply = type(uint256).max;\n\n            for (uint i = 0; i < amounts.length; i++) {\n\n                fairSupply = Math.min(fairSupply, totalSupply.mul(amounts[i]).div(realBalances[i]));\n\n            }\n\n        }\n\n\n        uint256 fairSupplyCached = fairSupply;\n\n        for (uint i = 0; i < amounts.length; i++) {\n\n            require(amounts[i] > 0, \"M","after":"();\n\n        if (totalSupply == 0) {\n\n            fairSupply = BASE_SUPPLY.mul(99);\n\n            _mint(address(this), BASE_SUPPLY);\n            // Donate up to 1%\n\n\n\n            // Use the greatest token amount but not less than 99k for the initial supply\n\n            for (uint i = 0; i < amounts.length; i++) {\n\n                fairSupply = Math.max(fairSupply, amounts[i]);\n\n            }\n\n        }\n\n        else {\n\n            // Pre-compute fair supply\n\n            fairSupply = type(uint256).max;\n\n            for (uint i = 0; i < amounts.length; i++) {\n\n                fairSupply = Math.min(fairSupply, totalSupply.mul(amounts[i]).div(realBalances[i]));\n\n            }\n\n        }\n\n\n        uint256 fairSupplyCached = fairSupply;\n\n        for (uint i = 0; i < amounts.length; i++) {\n\n            require(amounts[i] > 0, \"M","contract":"Mooniswap","time":0},{"type":"immutable-restrict-modification ","before":"bubble the revert rea","after":"bubble the revert rea","contract":"Mooniswap","time":0},{"type":"immutable-restrict-modification ","before":" using memory via assem","after":" using memory via assem","contract":"Mooniswap","time":0}]}
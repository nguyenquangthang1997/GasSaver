{"time":140,"results":[{"type":"loop-calculation","before":"uint256 mintIndex = _tokenIdCounter.current() + 1;","after":"// move outside for loop\nuint256 mintIndex = _tokenIdCounter.current() + 1;","loc":{"start":{"line":379,"column":12},"end":{"line":379,"column":61}},"contract":"Colonists","time":0},{"type":"external-function ","before":"function rerollTrait(uint256 tokenId, string memory trait, uint256 powerupTokenId) public payable {\n        require(rerollIsActive, \"Rerolling is not currently active\");\n        require(rerollPrice <= msg.value, \"Ether value sent is not correct\");\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Caller is not owner nor approved\");\n\n        if (powerupTokenId != 0) {\n            require(powerupContractInstance.ownerOf(powerupTokenId) == msg.sender, \"Caller is not owner of power up token ID\");\n            powerupContractInstance.burn(powerupTokenId);\n        }\n\n        emit TraitRerolled(tokenId, trait, powerupTokenId);\n    }","after":"function rerollTrait(uint256 tokenId, string calldata trait, uint256 powerupTokenId) public payable {\n        require(rerollIsActive, \"Rerolling is not currently active\");\n        require(rerollPrice <= msg.value, \"Ether value sent is not correct\");\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Caller is not owner nor approved\");\n\n        if (powerupTokenId != 0) {\n            require(powerupContractInstance.ownerOf(powerupTokenId) == msg.sender, \"Caller is not owner of power up token ID\");\n            powerupContractInstance.burn(powerupTokenId);\n        }\n\n        emit TraitRerolled(tokenId, trait, powerupTokenId);\n    }","contract":"Colonists","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }","after":"function setBaseURI(string calldata newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }","contract":"Colonists","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        provenance = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        provenance = provenanceHash;\n    }","contract":"Colonists","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Colonists","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Colonists","time":1}]}
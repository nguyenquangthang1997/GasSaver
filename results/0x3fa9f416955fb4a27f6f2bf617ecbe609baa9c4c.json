{"time":36,"results":[{"type":"external-function ","before":"function setUserPoints(address[] memory users, uint256[] memory points) external onlyOwner {\n        for (uint256 i = 0; i < users.length; i++) {\n            userPoints[users[i]] = UserData(points[i], 0, false);\n        }\n    }","after":"function setUserPoints(address[] calldata users, uint256[] calldata points) external onlyOwner {\n        for (uint256 i = 0; i < users.length; i++) {\n            userPoints[users[i]] = UserData(points[i], 0, false);\n        }\n    }","contract":"NFTClaimManager","time":0},{"type":"external-function ","before":"function setPrices(\n        uint256[] memory ids,\n        uint248[] memory prices,\n        string[] memory uris\n    ) external onlyOwner {\n        for (uint256 i = 0; i < ids.length; i++) {\n            nftPrices[ids[i]] = Nft(prices[i], false, uris[i]);\n        }\n    }","after":"function setPrices(\n        uint256[] calldata ids,\n        uint248[] calldata prices,\n        string[] calldata uris\n    ) external onlyOwner {\n        for (uint256 i = 0; i < ids.length; i++) {\n            nftPrices[ids[i]] = Nft(prices[i], false, uris[i]);\n        }\n    }","contract":"NFTClaimManager","time":0},{"type":"external-function ","before":"function setBadges(uint256[] memory ids) external onlyOwner {\n        for (uint256 i = 0; i < ids.length; i++) {\n            nftPrices[ids[i]].isBadge = true;\n        }\n    }","after":"function setBadges(uint256[] calldata ids) external onlyOwner {\n        for (uint256 i = 0; i < ids.length; i++) {\n            nftPrices[ids[i]].isBadge = true;\n        }\n    }","contract":"NFTClaimManager","time":0},{"type":"external-function ","before":"function setCollectionURI(string memory newURI) external onlyOwner {\n        collection.setURI(newURI);\n    }","after":"function setCollectionURI(string calldata newURI) external onlyOwner {\n        collection.setURI(newURI);\n    }","contract":"NFTClaimManager","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 id, string memory newURI) external onlyOwner {\n        collection.setTokenURI(id, newURI);\n    }","after":"function setTokenURI(uint256 id, string calldata newURI) external onlyOwner {\n        collection.setTokenURI(id, newURI);\n    }","contract":"NFTClaimManager","time":0}]}
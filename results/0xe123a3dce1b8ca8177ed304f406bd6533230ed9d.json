{"time":127,"results":[{"type":"state-data-arrangement ","before":"\nISetToken public setToken;\naddress[] internal extensions;\nmapping(address => bool) public isExtension;\naddress public operator;\naddress public methodologist;\nuint256 public emergencies;\nmapping(address => ProtectedModule) public protectedModules;\naddress[] public protectedModulesList;\nbool public initialized;","after":"ISetToken public setToken;\naddress[] internal extensions;\nmapping(address => bool) public isExtension;\nuint256 public emergencies;\nmapping(address => ProtectedModule) public protectedModules;\naddress[] public protectedModulesList;\naddress public operator;\naddress public methodologist;\nbool public initialized;\n","contract":"BaseManagerV2","time":0},{"type":"external-function ","before":"function interactManager(address _module, bytes memory _data) external onlyExtension {\n        require(initialized, \"Manager not initialized\");\n        require(_module != address(setToken), \"Extensions cannot call SetToken\");\n        require(_senderAuthorizedForModule(_module, msg.sender), \"Extension not authorized for module\");\n\n        // Invoke call to module, assume value will always be 0\n        _module.functionCallWithValue(_data, 0);\n    }","after":"function interactManager(address _module, bytes calldata _data) external onlyExtension {\n        require(initialized, \"Manager not initialized\");\n        require(_module != address(setToken), \"Extensions cannot call SetToken\");\n        require(_senderAuthorizedForModule(_module, msg.sender), \"Extension not authorized for module\");\n\n        // Invoke call to module, assume value will always be 0\n        _module.functionCallWithValue(_data, 0);\n    }","contract":"BaseManagerV2","time":0},{"type":"external-function ","before":"function protectModule(address _module, address[] memory _extensions)\n    external\n    upgradesPermitted\n    onlyOperator\n    {\n        require(setToken.getModules().contains(_module), \"Module not added yet\");\n        _protectModule(_module, _extensions);\n\n        emit ModuleProtected(_module, _extensions);\n    }","after":"function protectModule(address _module, address[] calldata _extensions)\n    external\n    upgradesPermitted\n    onlyOperator\n    {\n        require(setToken.getModules().contains(_module), \"Module not added yet\");\n        _protectModule(_module, _extensions);\n\n        emit ModuleProtected(_module, _extensions);\n    }","contract":"BaseManagerV2","time":0},{"type":"external-function ","before":"function replaceProtectedModule(address _oldModule, address _newModule, address[] memory _newExtensions)\n    external\n    mutualUpgrade(operator, methodologist)\n    {\n        _unProtectModule(_oldModule);\n\n        setToken.removeModule(_oldModule);\n        setToken.addModule(_newModule);\n\n        _protectModule(_newModule, _newExtensions);\n\n        emit ReplacedProtectedModule(_oldModule, _newModule, _newExtensions);\n    }","after":"function replaceProtectedModule(address _oldModule, address _newModule, address[] calldata _newExtensions)\n    external\n    mutualUpgrade(operator, methodologist)\n    {\n        _unProtectModule(_oldModule);\n\n        setToken.removeModule(_oldModule);\n        setToken.addModule(_newModule);\n\n        _protectModule(_newModule, _newExtensions);\n\n        emit ReplacedProtectedModule(_oldModule, _newModule, _newExtensions);\n    }","contract":"BaseManagerV2","time":0},{"type":"external-function ","before":"function emergencyReplaceProtectedModule(\n        address _module,\n        address[] memory _extensions\n    )\n    external\n    mutualUpgrade(operator, methodologist)\n    onlyEmergency\n    {\n        setToken.addModule(_module);\n        _protectModule(_module, _extensions);\n\n        emergencies -= 1;\n\n        emit EmergencyReplacedProtectedModule(_module, _extensions);\n    }","after":"function emergencyReplaceProtectedModule(\n        address _module,\n        address[] calldata _extensions\n    )\n    external\n    mutualUpgrade(operator, methodologist)\n    onlyEmergency\n    {\n        setToken.addModule(_module);\n        _protectModule(_module, _extensions);\n\n        emergencies -= 1;\n\n        emit EmergencyReplacedProtectedModule(_module, _extensions);\n    }","contract":"BaseManagerV2","time":0},{"type":"struct-data-arrangement ","before":"\naddress component\naddress module\nint256 unit\nuint8 positionState\nbytes data","after":"int256 unit\nbytes data\naddress component\naddress module\nuint8 positionState\n","contract":"ISetToken","time":0}]}
{"time":197,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n\n            !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n\n            (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":3729,"column":16},"end":{"line":3731,"column":42}},"contract":"ElevenEleven","time":0},{"type":"state-data-arrangement ","before":"\nstring public constant SMOL1111_PROVENANCE = \"cd61f013c65c0e5459aa8deff0a87079fca0de310f6d2ac3b9add99120cd979e\";\nuint256 public constant SALE_START_TIMESTAMP = 1617120671;\nuint256 public constant REVEAL_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 11);\nuint256 public constant NAME_CHANGE_PRICE = 1111 * (10 ** 18);\nuint256 public constant MAX_NFT_SUPPLY = 1111;\nuint256 public startingIndexBlock;\nuint256 public startingIndex;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(uint256 => string) private _tokenName;\nmapping(string => bool) private _nameReserved;\nmapping(uint256 => bool) private _mintedBeforeReveal;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nstring private baseTokenURI;\naddress private _smolAddress;\naddress private _tingAddress;\naddress private _treasury;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x93254542;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"string public constant SMOL1111_PROVENANCE = \"cd61f013c65c0e5459aa8deff0a87079fca0de310f6d2ac3b9add99120cd979e\";\nuint256 public constant SALE_START_TIMESTAMP = 1617120671;\nuint256 public constant REVEAL_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 11);\nuint256 public constant NAME_CHANGE_PRICE = 1111 * (10 ** 18);\nuint256 public constant MAX_NFT_SUPPLY = 1111;\nuint256 public startingIndexBlock;\nuint256 public startingIndex;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(uint256 => string) private _tokenName;\nmapping(string => bool) private _nameReserved;\nmapping(uint256 => bool) private _mintedBeforeReveal;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nstring private baseTokenURI;\naddress private _smolAddress;\naddress private _tingAddress;\naddress private _treasury;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x93254542;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ElevenEleven","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) public {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n        require(validateName(newName) == true, \"Not a valid new name\");\n\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n\n        IERC20(_tingAddress).burn(msg.sender, NAME_CHANGE_PRICE);\n\n        // If already named, dereserve old name\n\n        if (bytes(_tokenName[tokenId]).length > 0) {\n\n            toggleReserveName(_tokenName[tokenId], false);\n\n        }\n\n        toggleReserveName(newName, true);\n\n        _tokenName[tokenId] = newName;\n\n        emit NameChange(tokenId, newName);\n\n    }","after":"function changeName(uint256 tokenId, string calldata newName) public {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n        require(validateName(newName) == true, \"Not a valid new name\");\n\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n\n        IERC20(_tingAddress).burn(msg.sender, NAME_CHANGE_PRICE);\n\n        // If already named, dereserve old name\n\n        if (bytes(_tokenName[tokenId]).length > 0) {\n\n            toggleReserveName(_tokenName[tokenId], false);\n\n        }\n\n        toggleReserveName(newName, true);\n\n        _tokenName[tokenId] = newName;\n\n        emit NameChange(tokenId, newName);\n\n    }","contract":"ElevenEleven","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory newURI) public onlyOwner {\n\n        baseTokenURI = newURI;\n\n    }","after":"function setBaseTokenURI(string calldata newURI) public onlyOwner {\n\n        baseTokenURI = newURI;\n\n    }","contract":"ElevenEleven","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ElevenEleven","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ElevenEleven","time":0},{"type":"immutable-restrict-modification ","before":"address private _smolAddress;","after":"address private immutable _smolAddress;","contract":"ElevenEleven","time":0},{"type":"immutable-restrict-modification ","before":"address private _tingAddress;","after":"address private immutable _tingAddress;","contract":"ElevenEleven","time":0},{"type":"immutable-restrict-modification ","before":"address private _treasury;","after":"address private immutable _treasury;","contract":"ElevenEleven","time":0}]}
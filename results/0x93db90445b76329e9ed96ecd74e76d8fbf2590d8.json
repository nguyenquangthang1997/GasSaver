{"time":93,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20","time":0},{"type":"external-function ","before":"function addList(string memory _listName) public onlyOwner returns (uint256) {\n\n        listCount++;\n\n        tcrs[listCount].listId = listCount;\n\n        tcrs[listCount].listName = _listName;\n\n        tcrs[listCount].activeTokenCount = 0;\n\n        emit AddList(listCount, _listName);\n\n        return listCount;\n\n    }","after":"function addList(string calldata _listName) public onlyOwner returns (uint256) {\n\n        listCount++;\n\n        tcrs[listCount].listId = listCount;\n\n        tcrs[listCount].listName = _listName;\n\n        tcrs[listCount].activeTokenCount = 0;\n\n        emit AddList(listCount, _listName);\n\n        return listCount;\n\n    }","contract":"DXTokenRegistry","time":0},{"type":"external-function ","before":"function addTokens(uint256 _listId, address[] memory _tokens) public onlyOwner {\n\n        require(_listId <= listCount, 'DXTokenRegistry : INVALID_LIST');\n\n        for (uint32 i = 0; i < _tokens.length; i++) {\n\n            require(\n\n                tcrs[_listId].status[_tokens[i]] != TokenStatus.ACTIVE,\n\n                'DXTokenRegistry : DUPLICATE_TOKEN'\n\n            );\n\n            tcrs[_listId].tokens.push(_tokens[i]);\n\n            tcrs[_listId].status[_tokens[i]] = TokenStatus.ACTIVE;\n\n            tcrs[_listId].activeTokenCount++;\n\n            emit AddToken(_listId, _tokens[i]);\n\n        }\n\n    }","after":"function addTokens(uint256 _listId, address[] calldata _tokens) public onlyOwner {\n\n        require(_listId <= listCount, 'DXTokenRegistry : INVALID_LIST');\n\n        for (uint32 i = 0; i < _tokens.length; i++) {\n\n            require(\n\n                tcrs[_listId].status[_tokens[i]] != TokenStatus.ACTIVE,\n\n                'DXTokenRegistry : DUPLICATE_TOKEN'\n\n            );\n\n            tcrs[_listId].tokens.push(_tokens[i]);\n\n            tcrs[_listId].status[_tokens[i]] = TokenStatus.ACTIVE;\n\n            tcrs[_listId].activeTokenCount++;\n\n            emit AddToken(_listId, _tokens[i]);\n\n        }\n\n    }","contract":"DXTokenRegistry","time":0},{"type":"external-function ","before":"function removeTokens(uint256 _listId, address[] memory _tokens) public onlyOwner {\n\n        require(_listId <= listCount, 'DXTokenRegistry : INVALID_LIST');\n\n        for (uint32 i = 0; i < _tokens.length; i++) {\n\n            require(\n\n                tcrs[_listId].status[_tokens[i]] == TokenStatus.ACTIVE,\n\n                'DXTokenRegistry : INACTIVE_TOKEN'\n\n            );\n\n            tcrs[_listId].status[_tokens[i]] = TokenStatus.NULL;\n\n            uint256 tokenIndex = getTokenIndex(_listId, _tokens[i]);\n\n            tcrs[_listId].tokens[tokenIndex] = tcrs[_listId].tokens[tcrs[_listId].tokens.length -\n\n            1];\n\n            tcrs[_listId].tokens.pop();\n\n            tcrs[_listId].activeTokenCount--;\n\n            emit RemoveToken(_listId, _tokens[i]);\n\n        }\n\n    }","after":"function removeTokens(uint256 _listId, address[] calldata _tokens) public onlyOwner {\n\n        require(_listId <= listCount, 'DXTokenRegistry : INVALID_LIST');\n\n        for (uint32 i = 0; i < _tokens.length; i++) {\n\n            require(\n\n                tcrs[_listId].status[_tokens[i]] == TokenStatus.ACTIVE,\n\n                'DXTokenRegistry : INACTIVE_TOKEN'\n\n            );\n\n            tcrs[_listId].status[_tokens[i]] = TokenStatus.NULL;\n\n            uint256 tokenIndex = getTokenIndex(_listId, _tokens[i]);\n\n            tcrs[_listId].tokens[tokenIndex] = tcrs[_listId].tokens[tcrs[_listId].tokens.length -\n\n            1];\n\n            tcrs[_listId].tokens.pop();\n\n            tcrs[_listId].activeTokenCount--;\n\n            emit RemoveToken(_listId, _tokens[i]);\n\n        }\n\n    }","contract":"DXTokenRegistry","time":0},{"type":"external-function ","before":"function getTokensData(address[] memory _tokens)\n\n    public\n\n    view\n\n    returns (\n\n        string[] memory names,\n\n        string[] memory symbols,\n\n        uint256[] memory decimals\n\n    )\n\n    {\n\n        names = new string[](_tokens.length);\n\n        symbols = new string[](_tokens.length);\n\n        decimals = new uint256[](_tokens.length);\n\n        for (uint32 i = 0; i < _tokens.length; i++) {\n\n            names[i] = ERC20(_tokens[i]).name();\n\n            symbols[i] = ERC20(_tokens[i]).symbol();\n\n            decimals[i] = ERC20(_tokens[i]).decimals();\n\n        }\n\n    }","after":"function getTokensData(address[] calldata _tokens)\n\n    public\n\n    view\n\n    returns (\n\n        string[] memory names,\n\n        string[] memory symbols,\n\n        uint256[] memory decimals\n\n    )\n\n    {\n\n        names = new string[](_tokens.length);\n\n        symbols = new string[](_tokens.length);\n\n        decimals = new uint256[](_tokens.length);\n\n        for (uint32 i = 0; i < _tokens.length; i++) {\n\n            names[i] = ERC20(_tokens[i]).name();\n\n            symbols[i] = ERC20(_tokens[i]).symbol();\n\n            decimals[i] = ERC20(_tokens[i]).decimals();\n\n        }\n\n    }","contract":"DXTokenRegistry","time":0},{"type":"external-function ","before":"function getExternalBalances(address _trader, address[] memory _assetAddresses)\n\n    public\n\n    view\n\n    returns (uint256[] memory)\n\n    {\n\n        uint256[] memory balances = new uint256[](_assetAddresses.length);\n\n        for (uint256 i = 0; i < _assetAddresses.length; i++) {\n\n            balances[i] = ERC20(_assetAddresses[i]).balanceOf(_trader);\n\n        }\n\n        return balances;\n\n    }","after":"function getExternalBalances(address _trader, address[] calldata _assetAddresses)\n\n    public\n\n    view\n\n    returns (uint256[] memory)\n\n    {\n\n        uint256[] memory balances = new uint256[](_assetAddresses.length);\n\n        for (uint256 i = 0; i < _assetAddresses.length; i++) {\n\n            balances[i] = ERC20(_assetAddresses[i]).balanceOf(_trader);\n\n        }\n\n        return balances;\n\n    }","contract":"DXTokenRegistry","time":0}]}
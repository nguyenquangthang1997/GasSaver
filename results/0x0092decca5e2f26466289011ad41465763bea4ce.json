{"time":125,"results":[{"type":"external-function ","before":"function batchStake(\n\n        address[] memory _lp,\n\n        uint256[] memory _amount,\n\n        address[] memory _adapter\n\n    )\n\n    external\n\n    {\n\n        require(_lp.length == _amount.length, \"LiquidityMigration#batchStake: not same length\");\n\n        require(_amount.length == _adapter.length, \"LiquidityMigration#batchStake: not same length\");\n\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            stake(_lp[i], _amount[i], _adapter[i]);\n\n        }\n\n    }","after":"function batchStake(\n\n        address[] calldata _lp,\n\n        uint256[] calldata _amount,\n\n        address[] calldata _adapter\n\n    )\n\n    external\n\n    {\n\n        require(_lp.length == _amount.length, \"LiquidityMigration#batchStake: not same length\");\n\n        require(_amount.length == _adapter.length, \"LiquidityMigration#batchStake: not same length\");\n\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            stake(_lp[i], _amount[i], _adapter[i]);\n\n        }\n\n    }","contract":"LiquidityMigration","time":0},{"type":"external-function ","before":"function batchBuyAndStake(\n\n        address[] memory _lp,\n\n        uint256[] memory _amount,\n\n        address[] memory _adapter,\n\n        address[] memory _exchange,\n\n        uint256[] memory _minAmountOut,\n\n        uint256 _deadline\n\n    )\n\n    external\n\n    payable\n\n    {\n\n        require(_amount.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n        require(_adapter.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n        require(_exchange.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n        require(_minAmountOut.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n\n        uint256 total = 0;\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            total = total + _amount[i];\n\n            _buyAndStake(_lp[i], _amount[i], _adapter[i], _exchange[i], _minAmountOut[i], _deadline);\n\n        }\n\n        require(msg.value == total, \"LiquidityMigration#batchBuyAndStake: incorrect amounts\");\n\n    }","after":"function batchBuyAndStake(\n\n        address[] calldata _lp,\n\n        uint256[] calldata _amount,\n\n        address[] calldata _adapter,\n\n        address[] calldata _exchange,\n\n        uint256[] calldata _minAmountOut,\n\n        uint256 _deadline\n\n    )\n\n    external\n\n    payable\n\n    {\n\n        require(_amount.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n        require(_adapter.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n        require(_exchange.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n        require(_minAmountOut.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\n\n\n        uint256 total = 0;\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            total = total + _amount[i];\n\n            _buyAndStake(_lp[i], _amount[i], _adapter[i], _exchange[i], _minAmountOut[i], _deadline);\n\n        }\n\n        require(msg.value == total, \"LiquidityMigration#batchBuyAndStake: incorrect amounts\");\n\n    }","contract":"LiquidityMigration","time":0},{"type":"external-function ","before":"function batchMigrate(\n\n        address[] memory _lp,\n\n        address[] memory _adapter,\n\n        IStrategy[] memory _strategy,\n\n        uint256[] memory _slippage\n\n    )\n\n    external\n\n    onlyUnlocked\n\n    {\n\n        require(_lp.length == _adapter.length);\n\n        require(_adapter.length == _strategy.length);\n\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            _migrate(msg.sender, _lp[i], _adapter[i], _strategy[i], _slippage[i]);\n\n        }\n\n    }","after":"function batchMigrate(\n\n        address[] calldata _lp,\n\n        address[] calldata _adapter,\n\n        IStrategy[] calldata _strategy,\n\n        uint256[] calldata _slippage\n\n    )\n\n    external\n\n    onlyUnlocked\n\n    {\n\n        require(_lp.length == _adapter.length);\n\n        require(_adapter.length == _strategy.length);\n\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            _migrate(msg.sender, _lp[i], _adapter[i], _strategy[i], _slippage[i]);\n\n        }\n\n    }","contract":"LiquidityMigration","time":0},{"type":"external-function ","before":"function batchMigrate(\n\n        address[] memory _user,\n\n        address[] memory _lp,\n\n        address[] memory _adapter,\n\n        IStrategy[] memory _strategy,\n\n        uint256[] memory _slippage\n\n    )\n\n    external\n\n    onlyOwner\n\n    onlyUnlocked\n\n    {\n\n        require(_user.length == _lp.length);\n\n        require(_lp.length == _adapter.length);\n\n        require(_adapter.length == _strategy.length);\n\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            _migrate(_user[i], _lp[i], _adapter[i], _strategy[i], _slippage[i]);\n\n        }\n\n    }","after":"function batchMigrate(\n\n        address[] calldata _user,\n\n        address[] calldata _lp,\n\n        address[] calldata _adapter,\n\n        IStrategy[] calldata _strategy,\n\n        uint256[] calldata _slippage\n\n    )\n\n    external\n\n    onlyOwner\n\n    onlyUnlocked\n\n    {\n\n        require(_user.length == _lp.length);\n\n        require(_lp.length == _adapter.length);\n\n        require(_adapter.length == _strategy.length);\n\n\n        for (uint256 i = 0; i < _lp.length; i++) {\n\n            _migrate(_user[i], _lp[i], _adapter[i], _strategy[i], _slippage[i]);\n\n        }\n\n    }","contract":"LiquidityMigration","time":0},{"type":"external-function ","before":"function batchRefund(address[] memory _users, address _lp)\n\n    public\n\n    onlyOwner\n\n    {\n\n        for (uint256 i = 0; i < _users.length; i++) {\n\n            _refund(_users[i], _lp);\n\n        }\n\n    }","after":"function batchRefund(address[] calldata _users, address _lp)\n\n    public\n\n    onlyOwner\n\n    {\n\n        for (uint256 i = 0; i < _users.length; i++) {\n\n            _refund(_users[i], _lp);\n\n        }\n\n    }","contract":"LiquidityMigration","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public modify;","after":"uint256 public immutable modify;","contract":"LiquidityMigration","time":0}]}
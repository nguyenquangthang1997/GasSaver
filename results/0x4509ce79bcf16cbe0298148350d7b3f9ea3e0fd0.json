{"time":50,"results":[{"type":"struct-data-arrangement ","before":"\nbool finished\nuint256 yesVotes\nuint256 noVotes\nuint256 totalVoters\nmapping(address => bool) votedFor\nmapping(address => bool) votedAgainst\naddress targetContract\nbytes data","after":"uint256 yesVotes\nuint256 noVotes\nuint256 totalVoters\nmapping(address => bool) votedFor\nmapping(address => bool) votedAgainst\nbytes data\naddress targetContract\nbool finished\n","contract":"Governance","time":0},{"type":"external-function ","before":"function newProposal(address _targetContract, bytes memory _data) public onlyVoter {\n        require(_targetContract != address(0), \"Address must be non-zero\");\n        require(_data.length >= 4, \"Tx must be 4+ bytes\");\n        // solhint-disable not-rely-on-time\n        bytes32 _proposalHash = keccak256(abi.encodePacked(_targetContract, _data, block.timestamp));\n        require(proposals[_proposalHash].data.length == 0, \"The poll has already been initiated\");\n        proposals[_proposalHash].targetContract = _targetContract;\n        proposals[_proposalHash].data = _data;\n        proposals[_proposalHash].totalVoters = votersCount;\n        proposalsHashes.push(_proposalHash);\n        proposalsCount = proposalsCount + 1;\n        emit ProposalStarted(_proposalHash);\n    }","after":"function newProposal(address _targetContract, bytes calldata _data) public onlyVoter {\n        require(_targetContract != address(0), \"Address must be non-zero\");\n        require(_data.length >= 4, \"Tx must be 4+ bytes\");\n        // solhint-disable not-rely-on-time\n        bytes32 _proposalHash = keccak256(abi.encodePacked(_targetContract, _data, block.timestamp));\n        require(proposals[_proposalHash].data.length == 0, \"The poll has already been initiated\");\n        proposals[_proposalHash].targetContract = _targetContract;\n        proposals[_proposalHash].data = _data;\n        proposals[_proposalHash].totalVoters = votersCount;\n        proposalsHashes.push(_proposalHash);\n        proposalsCount = proposalsCount + 1;\n        emit ProposalStarted(_proposalHash);\n    }","contract":"Governance","time":0}]}
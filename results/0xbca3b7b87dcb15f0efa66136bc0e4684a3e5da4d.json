{"time":63,"results":[{"type":"state-data-arrangement ","before":"\n` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to \nure there are no nested\n * (reent\ncalls to them.\n *\n * Not\nt because there is a single `\nentrant` guard, functions marked\n* `nonReentrant` may not call one \ner. This can be worked around by \ng\n * those functions `private\nd then adding `external` `nonReent\nvent changing it from \nto a non-zero\n        // value, \n is a more expen","after":"ure there are no nested\n * (reent\ncalls to them.\n *\n * Not\nt because there is a single `\nentrant` guard, functions marked\n* `nonReentrant` may not call one \ner. This can be worked around by \ng\n * those functions `private\nvent changing it from \n is a more expen\n` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to \nto a non-zero\n        // value, \nd then adding `external` `nonReent\n","contract":"SharedDeposit","time":0},{"type":"constant-restrict-modification  ","before":"` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to ","after":"` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to ","contract":"SharedDeposit","time":0},{"type":"immutable-restrict-modification ","before":"vent changing it from ","after":"vent changing it from ","contract":"SharedDeposit","time":0},{"type":"immutable-restrict-modification ","before":"to a non-zero\n        // value, ","after":"to a non-zero\n        // value, ","contract":"SharedDeposit","time":0}]}
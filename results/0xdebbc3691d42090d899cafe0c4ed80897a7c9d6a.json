{"time":397,"results":[{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"ERC1155Burnable","time":0},{"type":"external-function ","before":"function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","contract":"ERC1155Burnable","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"ERC1155Burnable","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"ERC1155Burnable","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC721Pausable","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC721Pausable","time":0},{"type":"external-function ","before":"    }\n\n\n    function setImageUrl(string memory _imageUrl) onlyOwner public {\n        IMAGE_URL = _ima","after":"    }\n\n\n    function setImageUrl(string memory _imageUrl) onlyOwner public {\n        IMAGE_URL = _ima","contract":"FluffyPolarBears","time":0},{"type":"external-function ","before":"isted;\n\n    function addToBlacklist(address[] memory _addresses, bool _value) onlyOwner public {\n        for (uint i = 0; i < _addresses.length; i++) {\n            isBlacklisted[_addresses[i]] = _value;\n   ","after":"isted;\n\n    function addToBlacklist(address[] calldata _addresses, bool _value) onlyOwner public {\n        for (uint i = 0; i < _addresses.length; i++) {\n            isBlacklisted[_addresses[i]] = _value;\n   ","contract":"FluffyPolarBears","time":0},{"type":"external-function ","before":"    }\n\n\n    function setMetadataProvenance(string memory _hash) onlyOwner public {\n        metadataProvenance = ","after":"    }\n\n\n    function setMetadataProvenance(string memory _hash) onlyOwner public {\n        metadataProvenance = ","contract":"FluffyPolarBears","time":0},{"type":"constant-restrict-modification  ","before":"BdD74;\n\n    uint public CONTRACT_DEVELO","after":"BdD74;\n\n    uint public CONTRACT_DEVELO","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"EE = 3;\n    uint public ARTI","after":"EE = 3;\n    uint public ARTI","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"E = 25;\n    uint public PO","after":"E = 25;\n    uint public PO","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"E = 12;\n    uint public WEB_DEVELO","after":"E = 12;\n    uint public WEB_DEVELO","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"EE = 7;\n    uint public COMMUNITY_MANAG","after":"EE = 7;\n    uint public COMMUNITY_MANAG","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"E = 24;\n    uint public SHAREHOLD","after":"E = 24;\n    uint public SHAREHOLD","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"E = 24;\n    uint public CHAR","after":"E = 24;\n    uint public CHAR","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":" 9999;\n\n    uint256 public REROLL_PRICE = ","after":" 9999;\n\n    uint256 public constant REROLL_PRICE = ","contract":"FluffyPolarBears","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"FluffyPolarBears","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"FluffyPolarBears","time":1},{"type":"immutable-restrict-modification ","before":"\n\n    bytes32 internal ke","after":"\n\n    bytes32 internal ke","contract":"FluffyPolarBears","time":1},{"type":"immutable-restrict-modification ","before":";\n    uint256 interna","after":";\n    uint256 interna","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"\n\n    uint8 BG","after":"\n\n    uint8 BG","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint8 COSTUMES","after":";\n    uint8 constant COSTUMES","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint8 EYES","after":";\n    uint8 constant EYES","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint8 HEADS","after":";\n    uint8 constant HEADS","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint8 NOSES","after":";\n    uint8 constant NOSES","contract":"FluffyPolarBears","time":1}]}
{"time":268,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"state-data-arrangement ","before":"\nIRNG rng;\nuint256   constant oStart = 10;\nuint256   constant aStart = 100;\nuint256   constant cStart = 1000;\nuint256   constant oMax = 99;\nuint256   constant aMax = 999;\nuint256   constant cMax = 9999;\nuint256   constant tr_ass_order_length = 14;\nuint256   constant tr_ass_order_mask = 0x3ff;\nuint256   extra_trait_offset;\nuint256   immutable sale_start;\nuint256   immutable sale_end;\nbool      curve_set;\nuint256   public oSold;\nuint256   public aSold;\nuint256   public cSold;\nuint256   public oPending;\nuint256   public aPending;\nuint256   public cPending;\nuint256   public nextTokenId = 10;\nmapping(uint256 => bytes32) public randomRequests;\nuint256                      public lastRandomRequested;\nuint256                      public lastRandomProcessed;\nuint256                      public randomOneOfEight;\nuint256[]                   og_stop;\nuint256[]                   og_price;\nuint256[]                   alpha_stop;\nuint256[]                   alpha_price;\nuint256[]                   common_stop;\nuint256[]                   common_price;\nuint256                     og_pointer;\nuint256                     alpha_pointer;\nuint256                     common_pointer;\naddress payable             wallet;\nbytes32[50] public           traitHashes;\nmapping(uint256 => uint256)  traitAssignmentOrder;\nuint256                     startPos;\nbytes32                     tokenIdHash;\nmapping(uint256 => uint256) cardTraits;\nbytes32      public fullTokenIDHash;\nbytes32[50]  public allTokenIDHashes;\nbool    presale_closed;\nbool    founders_done;\naddress oracle;\naddress controller;\nbool _FuzeBlown;\nuint launch_date = 1616072400;","after":"IRNG rng;\nuint256   constant oStart = 10;\nuint256   constant aStart = 100;\nuint256   constant cStart = 1000;\nuint256   constant oMax = 99;\nuint256   constant aMax = 999;\nuint256   constant cMax = 9999;\nuint256   constant tr_ass_order_length = 14;\nuint256   constant tr_ass_order_mask = 0x3ff;\nuint256   extra_trait_offset;\nuint256   immutable sale_start;\nuint256   immutable sale_end;\nuint256   public oSold;\nuint256   public aSold;\nuint256   public cSold;\nuint256   public oPending;\nuint256   public aPending;\nuint256   public cPending;\nuint256   public nextTokenId = 10;\nmapping(uint256 => bytes32) public randomRequests;\nuint256                      public lastRandomRequested;\nuint256                      public lastRandomProcessed;\nuint256                      public randomOneOfEight;\nuint256[]                   og_stop;\nuint256[]                   og_price;\nuint256[]                   alpha_stop;\nuint256[]                   alpha_price;\nuint256[]                   common_stop;\nuint256[]                   common_price;\nuint256                     og_pointer;\nuint256                     alpha_pointer;\nuint256                     common_pointer;\nbytes32[50] public           traitHashes;\nmapping(uint256 => uint256)  traitAssignmentOrder;\nuint256                     startPos;\nbytes32                     tokenIdHash;\nmapping(uint256 => uint256) cardTraits;\nbytes32      public fullTokenIDHash;\nbytes32[50]  public allTokenIDHashes;\nuint launch_date = 1616072400;\naddress payable             wallet;\naddress oracle;\naddress controller;\nbool      curve_set;\nbool    presale_closed;\nbool    founders_done;\nbool _FuzeBlown;\n","contract":"ethercards","time":1},{"type":"external-function ","before":"function setTraitHashes(bytes32[50] memory _traitHashes) external onlyOwner {\n\n        traitHashes = _traitHashes;\n\n        emit HashesSet();\n\n    }","after":"function setTraitHashes(bytes32[50] calldata _traitHashes) external onlyOwner {\n\n        traitHashes = _traitHashes;\n\n        emit HashesSet();\n\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function setCurve(\n\n        uint256[] memory _og_stop, uint256[] memory _og_price,\n\n        uint256[] memory _alpha_stop, uint256[] memory _alpha_price,\n\n        uint256[] memory _random_stop, uint256[] memory _random_price) external onlyOwner {\n\n        og_stop = _og_stop;\n\n        og_price = _og_price;\n\n        alpha_stop = _alpha_stop;\n\n        alpha_price = _alpha_price;\n\n        common_stop = _random_stop;\n\n        common_price = _random_price;\n\n        curve_set = true;\n\n        _setBaseURI(\"temp.ether.cards/metadata\");\n\n    }","after":"function setCurve(\n\n        uint256[] calldata _og_stop, uint256[] calldata _og_price,\n\n        uint256[] calldata _alpha_stop, uint256[] calldata _alpha_price,\n\n        uint256[] calldata _random_stop, uint256[] calldata _random_price) external onlyOwner {\n\n        og_stop = _og_stop;\n\n        og_price = _og_price;\n\n        alpha_stop = _alpha_stop;\n\n        alpha_price = _alpha_price;\n\n        common_stop = _random_stop;\n\n        common_price = _random_price;\n\n        curve_set = true;\n\n        _setBaseURI(\"temp.ether.cards/metadata\");\n\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function allocateManyCards(address[] memory buyers, uint256 card_type) external onlyOwner {\n\n        require(curve_set, \"price curve not set\");\n\n        require(founders_done, \"mint founders first\");\n\n        require(card_type < 3, \"Invalid Card Type\");\n\n        require(!presale_closed, \"Presale is over\");\n\n        for (uint j = 0; j < buyers.length; j++) {\n\n            assignCard(buyers[j], card_type);\n\n        }\n\n    }","after":"function allocateManyCards(address[] calldata buyers, uint256 card_type) external onlyOwner {\n\n        require(curve_set, \"price curve not set\");\n\n        require(founders_done, \"mint founders first\");\n\n        require(card_type < 3, \"Invalid Card Type\");\n\n        require(!presale_closed, \"Presale is over\");\n\n        for (uint j = 0; j < buyers.length; j++) {\n\n            assignCard(buyers[j], card_type);\n\n        }\n\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function mintFounders(address[10] memory founders) external onlyOwner {\n\n        require(!founders_done, \"Founders already minted\");\n\n        for (uint j = 0; j < 10; j++) {\n\n            _mint(founders[j], j);\n\n            traitAssignmentOrder[j] = 1;\n\n        }\n\n        founders_done = true;\n\n    }","after":"function mintFounders(address[10] calldata founders) external onlyOwner {\n\n        require(!founders_done, \"Founders already minted\");\n\n        for (uint j = 0; j < 10; j++) {\n\n            _mint(founders[j], j);\n\n            traitAssignmentOrder[j] = 1;\n\n        }\n\n        founders_done = true;\n\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function hash10k(uint256[10000] memory data) public pure returns (bytes32) {\n\n        return keccak256(abi.encodePacked(data));\n\n    }","after":"function hash10k(uint256[10000] calldata data) public pure returns (bytes32) {\n\n        return keccak256(abi.encodePacked(data));\n\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function revealTokenAt(uint256 hashBlock, uint256 hashBlockPos, uint256[200] memory _tokenIds, uint256[200] memory _traits) external {\n\n        require(hash200(_tokenIds) == allTokenIDHashes[hashBlock], \"IDs in wrong order\");\n\n        require(hash200(_traits) == traitHashes[hashBlock], \"Traits in wrong order\");\n\n\n        uint tokenID = _tokenIds[hashBlockPos];\n\n        require(ownerOf(tokenID) == msg.sender, \"Not your token\");\n\n        if (cardTraits[tokenID] == 0) {\n\n            cardTraits[tokenID] = _traits[hashBlockPos];\n\n            emit TraitsClaimed(tokenID, _traits[hashBlockPos]);\n\n        } else {\n\n            emit TraitsAlreadyClaimed(tokenID);\n\n        }\n\n    }","after":"function revealTokenAt(uint256 hashBlock, uint256 hashBlockPos, uint256[200] calldata _tokenIds, uint256[200] calldata _traits) external {\n\n        require(hash200(_tokenIds) == allTokenIDHashes[hashBlock], \"IDs in wrong order\");\n\n        require(hash200(_traits) == traitHashes[hashBlock], \"Traits in wrong order\");\n\n\n        uint tokenID = _tokenIds[hashBlockPos];\n\n        require(ownerOf(tokenID) == msg.sender, \"Not your token\");\n\n        if (cardTraits[tokenID] == 0) {\n\n            cardTraits[tokenID] = _traits[hashBlockPos];\n\n            emit TraitsClaimed(tokenID, _traits[hashBlockPos]);\n\n        } else {\n\n            emit TraitsAlreadyClaimed(tokenID);\n\n        }\n\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function setDataFolder(string memory _baseURI) external onlyAllowed {\n\n        require(!_FuzeBlown, \"This data can no longer be changed\");\n\n        _setBaseURI(_baseURI);\n\n    }","after":"function setDataFolder(string calldata _baseURI) external onlyAllowed {\n\n        require(!_FuzeBlown, \"This data can no longer be changed\");\n\n        _setBaseURI(_baseURI);\n\n    }","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"uint256   public nextTokenId = 10;","after":"uint256   public constant nextTokenId = 10;","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"uint256                      public lastRandomRequested;","after":"uint256                      public constant lastRandomRequested;","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"uint256                      public lastRandomProcessed;","after":"uint256                      public constant lastRandomProcessed;","contract":"ethercards","time":0},{"type":"immutable-restrict-modification ","before":"address payable             wallet;","after":"address payable             immutable wallet;","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"uint256                     startPos;","after":"uint256                     constant startPos;","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"bytes32                     tokenIdHash;","after":"bytes32                     constant tokenIdHash;","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"bytes32      public fullTokenIDHash;","after":"bytes32      public constant fullTokenIDHash;","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"uint launch_date = 1616072400;","after":"uint constant launch_date = 1616072400;","contract":"ethercards","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ethercards","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ethercards","time":0}]}
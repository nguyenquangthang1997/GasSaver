{"time":218,"results":[{"type":"struct-data-arrangement ","before":"\naddress component\naddress module\nint256 unit\nuint8 positionState\nbytes data","after":"int256 unit\nbytes data\naddress component\naddress module\nuint8 positionState\n","contract":"ISetToken","time":0},{"type":"state-data-arrangement ","before":"\nuint8 internal constant DEFAULT = 0;\nuint8 internal constant EXTERNAL = 1;\nIController public controller;\naddress public manager;\naddress public locker;\naddress[] public modules;\nmapping(address => ISetToken.ModuleState) public moduleStates;\nbool public isLocked;\naddress[] public components;\nmapping(address => ISetToken.ComponentPosition) private componentPositions;\nint256 public positionMultiplier;","after":"IController public controller;\naddress[] public modules;\nmapping(address => ISetToken.ModuleState) public moduleStates;\naddress[] public components;\nmapping(address => ISetToken.ComponentPosition) private componentPositions;\nint256 public positionMultiplier;\naddress public manager;\naddress public locker;\nuint8 internal constant DEFAULT = 0;\nuint8 internal constant EXTERNAL = 1;\nbool public isLocked;\n","contract":"SetToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SetToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SetToken","time":0},{"type":"external-function ","before":"function create(\n\n        address[] memory _components,\n\n        int256[] memory _units,\n\n        address[] memory _modules,\n\n        address _manager,\n\n        string memory _name,\n\n        string memory _symbol\n\n    )\n\n    external\n\n    returns (address)\n\n    {\n\n        require(_components.length > 0, \"Must have at least 1 component\");\n\n        require(_components.length == _units.length, \"Component and unit lengths must be the same\");\n\n        require(!_components.hasDuplicate(), \"Components must not have a duplicate\");\n\n        require(_modules.length > 0, \"Must have at least 1 module\");\n\n        require(_manager != address(0), \"Manager must not be empty\");\n\n\n        for (uint256 i = 0; i < _components.length; i++) {\n\n            require(_components[i] != address(0), \"Component must not be null address\");\n\n            require(_units[i] > 0, \"Units must be greater than 0\");\n\n        }\n\n\n        for (uint256 j = 0; j < _modules.length; j++) {\n\n            require(controller.isModule(_modules[j]), \"Must be enabled module\");\n\n        }\n\n\n        // Creates a new SetToken instance\n\n        SetToken setToken = new SetToken(\n\n            _components,\n\n            _units,\n\n            _modules,\n\n            controller,\n\n            _manager,\n\n            _name,\n\n            _symbol\n\n        );\n\n\n        // Registers Set with controller\n\n        controller.addSet(address(setToken));\n\n\n        emit SetTokenCreated(address(setToken), _manager, _name, _symbol);\n\n\n        return address(setToken);\n\n    }","after":"function create(\n\n        address[] calldata _components,\n\n        int256[] calldata _units,\n\n        address[] calldata _modules,\n\n        address _manager,\n\n        string calldata _name,\n\n        string calldata _symbol\n\n    )\n\n    external\n\n    returns (address)\n\n    {\n\n        require(_components.length > 0, \"Must have at least 1 component\");\n\n        require(_components.length == _units.length, \"Component and unit lengths must be the same\");\n\n        require(!_components.hasDuplicate(), \"Components must not have a duplicate\");\n\n        require(_modules.length > 0, \"Must have at least 1 module\");\n\n        require(_manager != address(0), \"Manager must not be empty\");\n\n\n        for (uint256 i = 0; i < _components.length; i++) {\n\n            require(_components[i] != address(0), \"Component must not be null address\");\n\n            require(_units[i] > 0, \"Units must be greater than 0\");\n\n        }\n\n\n        for (uint256 j = 0; j < _modules.length; j++) {\n\n            require(controller.isModule(_modules[j]), \"Must be enabled module\");\n\n        }\n\n\n        // Creates a new SetToken instance\n\n        SetToken setToken = new SetToken(\n\n            _components,\n\n            _units,\n\n            _modules,\n\n            controller,\n\n            _manager,\n\n            _name,\n\n            _symbol\n\n        );\n\n\n        // Registers Set with controller\n\n        controller.addSet(address(setToken));\n\n\n        emit SetTokenCreated(address(setToken), _manager, _name, _symbol);\n\n\n        return address(setToken);\n\n    }","contract":"SetTokenCreator","time":0}]}
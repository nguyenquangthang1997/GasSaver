{"time":449,"results":[{"type":"loop-calculation","before":"uint256 srcAmount = amount;","after":"// move outside for loop\nuint256 srcAmount = amount;","loc":{"start":{"line":1596,"column":12},"end":{"line":1596,"column":38}},"contract":"OneSplitBaseView","time":0},{"type":"loop-duplication","before":"\nstart line 2216 column 8, end line 2226 column 8\nfor (uint i = 0; i < reserves.length; i++) {\n\n            if (distribution[i] > 0) {\n\n                parts = parts.add(distribution[i]);\n\n                lastNonZeroIndex = i;\n\n            }\n\n        }\nstart line 2234 column 8, end line 2255 column 8\nfor (uint i = 0; i < reserves.length; i++) {\n\n            if (distribution[i] == 0) {\n\n                continue;\n\n            }\n\n\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\n\n            if (i == lastNonZeroIndex) {\n\n                swapAmount = remainingAmount;\n\n            }\n\n            remainingAmount -= swapAmount;\n\n            reserves[i](fromToken, toToken, swapAmount);\n\n        }","after":"// merge loop\n\nstart line 2216 column 8, end line 2226 column 8\nfor (uint i = 0; i < reserves.length; i++) {\n\n            if (distribution[i] > 0) {\n\n                parts = parts.add(distribution[i]);\n\n                lastNonZeroIndex = i;\n\n            }\n\n        }\nstart line 2234 column 8, end line 2255 column 8\nfor (uint i = 0; i < reserves.length; i++) {\n\n            if (distribution[i] == 0) {\n\n                continue;\n\n            }\n\n\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\n\n            if (i == lastNonZeroIndex) {\n\n                swapAmount = remainingAmount;\n\n            }\n\n            remainingAmount -= swapAmount;\n\n            reserves[i](fromToken, toToken, swapAmount);\n\n        }","contract":"OneSplitBase","time":0},{"type":"de-morgan-condition ","before":"!fromToken.isETH() && !toToken.isETH()","after":"!(fromToken.isETH() && toToken.isETH())","loc":{"start":{"line":2650,"column":12},"end":{"line":2650,"column":49}},"contract":"OneSplitMultiPathView","time":0},{"type":"de-morgan-condition ","before":"!fromToken.isETH() && !toToken.isETH()","after":"!(fromToken.isETH() && toToken.isETH())","loc":{"start":{"line":2817,"column":12},"end":{"line":2817,"column":49}},"contract":"OneSplitMultiPath","time":0},{"type":"loop-duplication","before":"\nstart line 2821 column 12, end line 2825 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = distribution[i] & 0xFF;\n\n            }\nstart line 2842 column 12, end line 2846 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = (distribution[i] >> 8) & 0xFF;\n\n            }","after":"// merge loop\n\nstart line 2821 column 12, end line 2825 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = distribution[i] & 0xFF;\n\n            }\nstart line 2842 column 12, end line 2846 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = (distribution[i] >> 8) & 0xFF;\n\n            }","contract":"OneSplitMultiPath","time":0},{"type":"loop-duplication","before":"\nstart line 2871 column 12, end line 2875 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = distribution[i] & 0xFF;\n\n            }\nstart line 2892 column 12, end line 2896 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = (distribution[i] >> 8) & 0xFF;\n\n            }","after":"// merge loop\n\nstart line 2871 column 12, end line 2875 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = distribution[i] & 0xFF;\n\n            }\nstart line 2892 column 12, end line 2896 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = (distribution[i] >> 8) & 0xFF;\n\n            }","contract":"OneSplitMultiPath","time":0},{"type":"loop-duplication","before":"\nstart line 2921 column 12, end line 2925 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = distribution[i] & 0xFF;\n\n            }\nstart line 2942 column 12, end line 2946 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = (distribution[i] >> 8) & 0xFF;\n\n            }","after":"// merge loop\n\nstart line 2921 column 12, end line 2925 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = distribution[i] & 0xFF;\n\n            }\nstart line 2942 column 12, end line 2946 column 12\nfor (uint i = 0; i < distribution.length; i++) {\n\n                dist[i] = (distribution[i] >> 8) & 0xFF;\n\n            }","contract":"OneSplitMultiPath","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC20Detailed","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC20Detailed","time":0},{"type":"immutable-restrict-modification ","before":"uint8 private _decimals;","after":"uint8 private immutable _decimals;","contract":"ERC20Detailed","time":0},{"type":"loop-duplication","before":"\nstart line 4767 column 12, end line 4791 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (fromToken == IERC20(yTokens[i])) {\n\n                    return _iearnGetExpectedReturn(\n\n                        yTokens[i].token(),\n\n                        toToken,\n\n                        amount\n\n                        .mul(yTokens[i].calcPoolValueInToken())\n\n                        .div(yTokens[i].totalSupply()),\n\n                        parts,\n\n                        disableFlags\n\n                    );\n\n                }\n\n            }\nstart line 4794 column 12, end line 4827 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (toToken == IERC20(yTokens[i])) {\n\n                    (uint256 ret, uint256[] memory dist) = super.getExpectedReturn(\n\n                        fromToken,\n\n                        yTokens[i].token(),\n\n                        amount,\n\n                        parts,\n\n                        disableFlags\n\n                    );\n\n\n                    return (\n\n                    ret\n\n                    .mul(yTokens[i].totalSupply())\n\n                    .div(yTokens[i].calcPoolValueInToken()),\n\n                    dist\n\n                    );\n\n                }\n\n            }","after":"// merge loop\n\nstart line 4767 column 12, end line 4791 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (fromToken == IERC20(yTokens[i])) {\n\n                    return _iearnGetExpectedReturn(\n\n                        yTokens[i].token(),\n\n                        toToken,\n\n                        amount\n\n                        .mul(yTokens[i].calcPoolValueInToken())\n\n                        .div(yTokens[i].totalSupply()),\n\n                        parts,\n\n                        disableFlags\n\n                    );\n\n                }\n\n            }\nstart line 4794 column 12, end line 4827 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (toToken == IERC20(yTokens[i])) {\n\n                    (uint256 ret, uint256[] memory dist) = super.getExpectedReturn(\n\n                        fromToken,\n\n                        yTokens[i].token(),\n\n                        amount,\n\n                        parts,\n\n                        disableFlags\n\n                    );\n\n\n                    return (\n\n                    ret\n\n                    .mul(yTokens[i].totalSupply())\n\n                    .div(yTokens[i].calcPoolValueInToken()),\n\n                    dist\n\n                    );\n\n                }\n\n            }","contract":"OneSplitIearnView","time":0},{"type":"loop-duplication","before":"\nstart line 4910 column 12, end line 4924 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (fromToken == IERC20(yTokens[i])) {\n\n                    IERC20 underlying = yTokens[i].token();\n\n                    yTokens[i].withdraw(amount);\n\n                    _iearnSwap(underlying, toToken, underlying.balanceOf(address(this)), distribution, disableFlags);\n\n                    return;\n\n                }\n\n            }\nstart line 4927 column 12, end line 4943 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (toToken == IERC20(yTokens[i])) {\n\n                    IERC20 underlying = yTokens[i].token();\n\n                    super._swap(fromToken, underlying, amount, distribution, disableFlags);\n\n                    _infiniteApproveIfNeeded(underlying, address(yTokens[i]));\n\n                    yTokens[i].deposit(underlying.balanceOf(address(this)));\n\n                    return;\n\n                }\n\n            }","after":"// merge loop\n\nstart line 4910 column 12, end line 4924 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (fromToken == IERC20(yTokens[i])) {\n\n                    IERC20 underlying = yTokens[i].token();\n\n                    yTokens[i].withdraw(amount);\n\n                    _iearnSwap(underlying, toToken, underlying.balanceOf(address(this)), distribution, disableFlags);\n\n                    return;\n\n                }\n\n            }\nstart line 4927 column 12, end line 4943 column 12\nfor (uint i = 0; i < yTokens.length; i++) {\n\n                if (toToken == IERC20(yTokens[i])) {\n\n                    IERC20 underlying = yTokens[i].token();\n\n                    super._swap(fromToken, underlying, amount, distribution, disableFlags);\n\n                    _infiniteApproveIfNeeded(underlying, address(yTokens[i]));\n\n                    yTokens[i].deposit(underlying.balanceOf(address(this)));\n\n                    return;\n\n                }\n\n            }","contract":"OneSplitIearn","time":0}]}
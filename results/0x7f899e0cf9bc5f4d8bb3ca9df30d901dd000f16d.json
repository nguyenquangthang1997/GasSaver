{"time":226,"results":[{"type":"state-data-arrangement ","before":"\nuint256 constant base = 10 ** 18;\nuint256 public override vaultId;\naddress public override manager;\naddress public override assetAddress;\nINFTXVaultFactory public override vaultFactory;\nINFTXEligibility public override eligibilityStorage;\nuint256 randNonce;\nuint256 public override mintFee;\nuint256 public override randomRedeemFee;\nuint256 public override targetRedeemFee;\nbool public override is1155;\nbool public override allowAllItems;\nbool public override enableMint;\nbool public override enableRandomRedeem;\nbool public override enableTargetRedeem;\nEnumerableSetUpgradeable.UintSet holdings;\nmapping(uint256 => uint256) quantity1155;","after":"uint256 constant base = 10 ** 18;\nuint256 public override vaultId;\nINFTXVaultFactory public override vaultFactory;\nINFTXEligibility public override eligibilityStorage;\nuint256 randNonce;\nuint256 public override mintFee;\nuint256 public override randomRedeemFee;\nuint256 public override targetRedeemFee;\nEnumerableSetUpgradeable.UintSet holdings;\nmapping(uint256 => uint256) quantity1155;\naddress public override manager;\naddress public override assetAddress;\nbool public override is1155;\nbool public override allowAllItems;\nbool public override enableMint;\nbool public override enableRandomRedeem;\nbool public override enableTargetRedeem;\n","contract":"NFTXVaultUpgradeable","time":0},{"type":"external-function ","before":"function __NFTXVault_init(\n\n        string memory _name,\n\n        string memory _symbol,\n\n        address _assetAddress,\n\n        bool _is1155,\n\n        bool _allowAllItems\n\n    ) public override virtual initializer {\n\n        __Ownable_init();\n\n        __ERC20_init(_name, _symbol);\n\n        require(_assetAddress != address(0), \"Asset != address(0)\");\n\n        assetAddress = _assetAddress;\n\n        vaultFactory = INFTXVaultFactory(msg.sender);\n\n        vaultId = vaultFactory.numVaults();\n\n        is1155 = _is1155;\n\n        allowAllItems = _allowAllItems;\n\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\n\n        setVaultFeatures(true /*enableMint*/, true /*enableRandomRedeem*/, true /*enableTargetRedeem*/);\n\n        setFees(0.01 ether /*mintFee*/, 0 /*randomRedeemFee*/, 0.05 ether /*targetRedeemFee*/);\n\n    }","after":"function __NFTXVault_init(\n\n        string calldata _name,\n\n        string calldata _symbol,\n\n        address _assetAddress,\n\n        bool _is1155,\n\n        bool _allowAllItems\n\n    ) public override virtual initializer {\n\n        __Ownable_init();\n\n        __ERC20_init(_name, _symbol);\n\n        require(_assetAddress != address(0), \"Asset != address(0)\");\n\n        assetAddress = _assetAddress;\n\n        vaultFactory = INFTXVaultFactory(msg.sender);\n\n        vaultId = vaultFactory.numVaults();\n\n        is1155 = _is1155;\n\n        allowAllItems = _allowAllItems;\n\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\n\n        setVaultFeatures(true /*enableMint*/, true /*enableRandomRedeem*/, true /*enableTargetRedeem*/);\n\n        setFees(0.01 ether /*mintFee*/, 0 /*randomRedeemFee*/, 0.05 ether /*targetRedeemFee*/);\n\n    }","contract":"NFTXVaultUpgradeable","time":0},{"type":"external-function ","before":"function flashLoan(\n\n        IERC3156FlashBorrowerUpgradeable receiver,\n\n        address token,\n\n        uint256 amount,\n\n        bytes memory data\n\n    ) public override virtual returns (bool) {\n\n        onlyOwnerIfPaused(4);\n\n        return super.flashLoan(receiver, token, amount, data);\n\n    }","after":"function flashLoan(\n\n        IERC3156FlashBorrowerUpgradeable receiver,\n\n        address token,\n\n        uint256 amount,\n\n        bytes calldata data\n\n    ) public override virtual returns (bool) {\n\n        onlyOwnerIfPaused(4);\n\n        return super.flashLoan(receiver, token, amount, data);\n\n    }","contract":"NFTXVaultUpgradeable","time":0},{"type":"external-function ","before":"function flashLoan(\n\n        IERC3156FlashBorrowerUpgradeable receiver,\n\n        address token,\n\n        uint256 amount,\n\n        bytes memory data\n\n    )\n\n    public virtual override returns (bool)\n\n    {\n\n        uint256 fee = flashFee(token, amount);\n\n        _mint(address(receiver), amount);\n\n        require(receiver.onFlashLoan(msg.sender, token, amount, fee, data) == RETURN_VALUE, \"ERC20FlashMint: invalid return value\");\n\n        uint256 currentAllowance = allowance(address(receiver), address(this));\n\n        require(currentAllowance >= amount + fee, \"ERC20FlashMint: allowance does not allow refund\");\n\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\n\n        _burn(address(receiver), amount + fee);\n\n        return true;\n\n    }","after":"function flashLoan(\n\n        IERC3156FlashBorrowerUpgradeable receiver,\n\n        address token,\n\n        uint256 amount,\n\n        bytes calldata data\n\n    )\n\n    public virtual override returns (bool)\n\n    {\n\n        uint256 fee = flashFee(token, amount);\n\n        _mint(address(receiver), amount);\n\n        require(receiver.onFlashLoan(msg.sender, token, amount, fee, data) == RETURN_VALUE, \"ERC20FlashMint: invalid return value\");\n\n        uint256 currentAllowance = allowance(address(receiver), address(this));\n\n        require(currentAllowance >= amount + fee, \"ERC20FlashMint: allowance does not allow refund\");\n\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\n\n        _burn(address(receiver), amount + fee);\n\n        return true;\n\n    }","contract":"NFTXVaultUpgradeable","time":0},{"type":"external-function ","before":"function onERC721Received(\n\n        address,\n\n        address,\n\n        uint256,\n\n        bytes memory\n\n    ) public virtual override returns (bytes4) {\n\n        return this.onERC721Received.selector;\n\n    }","after":"function onERC721Received(\n\n        address,\n\n        address,\n\n        uint256,\n\n        bytes calldata\n\n    ) public virtual override returns (bytes4) {\n\n        return this.onERC721Received.selector;\n\n    }","contract":"NFTXVaultUpgradeable","time":0},{"type":"external-function ","before":"function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n\n        return this.onERC1155Received.selector;\n\n    }","after":"function onERC1155Received(address, address, uint256, uint256, bytes calldata) public virtual override returns (bytes4) {\n\n        return this.onERC1155Received.selector;\n\n    }","contract":"NFTXVaultUpgradeable","time":0},{"type":"external-function ","before":"function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n\n        return this.onERC1155BatchReceived.selector;\n\n    }","after":"function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) public virtual override returns (bytes4) {\n\n        return this.onERC1155BatchReceived.selector;\n\n    }","contract":"NFTXVaultUpgradeable","time":0},{"type":"external-function ","before":"function createVault(\n\n        string memory name,\n\n        string memory symbol,\n\n        address _assetAddress,\n\n        bool is1155,\n\n        bool allowAllItems\n\n    ) external virtual override returns (uint256) {\n\n        onlyOwnerIfPaused(0);\n\n        require(feeDistributor != address(0), \"NFTX: Fee receiver unset\");\n\n        require(childImplementation() != address(0), \"NFTX: Vault implementation unset\");\n\n        address vaultAddr = deployVault(name, symbol, _assetAddress, is1155, allowAllItems);\n\n        uint256 _vaultId = numVaults;\n\n        vault[_vaultId] = vaultAddr;\n\n        _vaultsForAsset[_assetAddress].push(vaultAddr);\n\n        allVaults.push(vaultAddr);\n\n        numVaults = _vaultId + 1;\n\n        INFTXFeeDistributor(feeDistributor).initializeVaultReceivers(_vaultId);\n\n        emit NewVault(_vaultId, vaultAddr, _assetAddress);\n\n        return _vaultId;\n\n    }","after":"function createVault(\n\n        string calldata name,\n\n        string calldata symbol,\n\n        address _assetAddress,\n\n        bool is1155,\n\n        bool allowAllItems\n\n    ) external virtual override returns (uint256) {\n\n        onlyOwnerIfPaused(0);\n\n        require(feeDistributor != address(0), \"NFTX: Fee receiver unset\");\n\n        require(childImplementation() != address(0), \"NFTX: Vault implementation unset\");\n\n        address vaultAddr = deployVault(name, symbol, _assetAddress, is1155, allowAllItems);\n\n        uint256 _vaultId = numVaults;\n\n        vault[_vaultId] = vaultAddr;\n\n        _vaultsForAsset[_assetAddress].push(vaultAddr);\n\n        allVaults.push(vaultAddr);\n\n        numVaults = _vaultId + 1;\n\n        INFTXFeeDistributor(feeDistributor).initializeVaultReceivers(_vaultId);\n\n        emit NewVault(_vaultId, vaultAddr, _assetAddress);\n\n        return _vaultId;\n\n    }","contract":"NFTXVaultFactoryUpgradeable","time":0}]}
{"time":28,"results":[{"type":"struct-data-arrangement ","before":"\nbool exists\nuint256 price\nuint256 tokenId\naddress contractAddress\nbool multiple","after":"uint256 price\nuint256 tokenId\naddress contractAddress\nbool exists\nbool multiple\n","contract":"ChizShop","time":0},{"type":"external-function ","before":"function createProduct(\n\n        string memory slug,\n\n        uint256 price,\n\n        uint256 tokenId,\n\n        address contractAddress,\n\n        bool multiple\n\n    ) public pauseable onlyShopManager {\n\n        Product memory product = Products[slug];\n\n        require(\n\n            product.exists == false,\n\n            \"a product with this slug already exists\"\n\n        );\n\n\n        ERC721 tokenContract = ERC721(contractAddress);\n\n\n        if (!multiple) {\n\n            address tokenOwner = tokenContract.ownerOf(tokenId);\n\n            require(\n\n                tokenOwner == address(this),\n\n                \"contract is not the owner of this token\"\n\n            );\n\n        } else {\n\n            uint256 balance = tokenContract.balanceOf(address(this));\n\n            require(balance != 0, \"contract does not own any of these tokens\");\n\n        }\n\n\n        Products[slug] = Product(\n\n            true,\n\n            price,\n\n            tokenId,\n\n            contractAddress,\n\n            multiple\n\n        );\n\n        emit ProductCreated(slug);\n\n    }","after":"function createProduct(\n\n        string calldata slug,\n\n        uint256 price,\n\n        uint256 tokenId,\n\n        address contractAddress,\n\n        bool multiple\n\n    ) public pauseable onlyShopManager {\n\n        Product memory product = Products[slug];\n\n        require(\n\n            product.exists == false,\n\n            \"a product with this slug already exists\"\n\n        );\n\n\n        ERC721 tokenContract = ERC721(contractAddress);\n\n\n        if (!multiple) {\n\n            address tokenOwner = tokenContract.ownerOf(tokenId);\n\n            require(\n\n                tokenOwner == address(this),\n\n                \"contract is not the owner of this token\"\n\n            );\n\n        } else {\n\n            uint256 balance = tokenContract.balanceOf(address(this));\n\n            require(balance != 0, \"contract does not own any of these tokens\");\n\n        }\n\n\n        Products[slug] = Product(\n\n            true,\n\n            price,\n\n            tokenId,\n\n            contractAddress,\n\n            multiple\n\n        );\n\n        emit ProductCreated(slug);\n\n    }","contract":"ChizShop","time":1},{"type":"external-function ","before":"function deleteProduct(string memory slug)\n\n    public\n\n    pauseable\n\n    onlyShopManager\n\n    {\n\n        delete Products[slug];\n\n        emit ProductDeleted(slug);\n\n    }","after":"function deleteProduct(string calldata slug)\n\n    public\n\n    pauseable\n\n    onlyShopManager\n\n    {\n\n        delete Products[slug];\n\n        emit ProductDeleted(slug);\n\n    }","contract":"ChizShop","time":0},{"type":"external-function ","before":"function purchaseProduct(string memory slug) public payable pauseable {\n\n        Product memory product = Products[slug];\n\n        require(\n\n            product.exists == true,\n\n            \"a product with this slug does not exist\"\n\n        );\n\n\n        ERC721 tokenContract = ERC721(product.contractAddress);\n\n        uint256 tokenId;\n\n\n        if (product.multiple) {\n\n            tokenId = tokenContract.tokenOfOwnerByIndex(address(this), 0);\n\n        } else {\n\n            tokenId = product.tokenId;\n\n            address tokenOwner = tokenContract.ownerOf(tokenId);\n\n            require(\n\n                tokenOwner == address(this),\n\n                \"contract is sold out of these tokens\"\n\n            );\n\n        }\n\n\n        chizToken.transferFrom(msg.sender, address(this), product.price);\n\n        tokenContract.transferFrom(address(this), msg.sender, tokenId);\n\n\n        Products[slug] = Product(\n\n            true,\n\n            product.price,\n\n            product.tokenId,\n\n            product.contractAddress,\n\n            product.multiple\n\n        );\n\n        emit ProductPurchased(slug, msg.sender);\n\n    }","after":"function purchaseProduct(string calldata slug) public payable pauseable {\n\n        Product memory product = Products[slug];\n\n        require(\n\n            product.exists == true,\n\n            \"a product with this slug does not exist\"\n\n        );\n\n\n        ERC721 tokenContract = ERC721(product.contractAddress);\n\n        uint256 tokenId;\n\n\n        if (product.multiple) {\n\n            tokenId = tokenContract.tokenOfOwnerByIndex(address(this), 0);\n\n        } else {\n\n            tokenId = product.tokenId;\n\n            address tokenOwner = tokenContract.ownerOf(tokenId);\n\n            require(\n\n                tokenOwner == address(this),\n\n                \"contract is sold out of these tokens\"\n\n            );\n\n        }\n\n\n        chizToken.transferFrom(msg.sender, address(this), product.price);\n\n        tokenContract.transferFrom(address(this), msg.sender, tokenId);\n\n\n        Products[slug] = Product(\n\n            true,\n\n            product.price,\n\n            product.tokenId,\n\n            product.contractAddress,\n\n            product.multiple\n\n        );\n\n        emit ProductPurchased(slug, msg.sender);\n\n    }","contract":"ChizShop","time":0},{"type":"external-function ","before":"function onERC721Received(\n\n        address,\n\n        address,\n\n        uint256,\n\n        bytes memory\n\n    ) public virtual override returns (bytes4) {\n\n        return this.onERC721Received.selector;\n\n    }","after":"function onERC721Received(\n\n        address,\n\n        address,\n\n        uint256,\n\n        bytes calldata\n\n    ) public virtual override returns (bytes4) {\n\n        return this.onERC721Received.selector;\n\n    }","contract":"ChizShop","time":0}]}
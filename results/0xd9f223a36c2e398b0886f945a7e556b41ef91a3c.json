{"time":274,"results":[{"type":"state-data-arrangement ","before":"\n\n\n    bool public constant IS_RARI_FUND_CONTROLLER =\n\n\n    bool private _fundDis\n\n\n    address payable private _rariFundManagerCon\n\n\n    address private _rariFundRebalancerAd\n\n\n    uint8[] private _supported\n\n\n    address constant private COMP_TOKEN = 0xc00e94Cb662C3520282E6f5717214004A7f\n\n\n    IEtherToken constant private _weth = IEtherToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C75\n\n\n    uint256[] private _cachedBal\n\n\n    mapping(uint8 => bool) _poolsWith\n\n\n    uint16 _aaveReferra","after":"\n\n    uint8[] private _supported\n\n\n    IEtherToken constant private _weth = IEtherToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C75\n\n\n    uint256[] private _cachedBal\n\n\n    mapping(uint8 => bool) _poolsWith\n\n\n    address payable private _rariFundManagerCon\n\n\n    address private _rariFundRebalancerAd\n\n\n    address constant private COMP_TOKEN = 0xc00e94Cb662C3520282E6f5717214004A7f\n\n\n    uint16 _aaveReferra\n\n\n    bool public constant IS_RARI_FUND_CONTROLLER =\n\n\n    bool private _fundDis\n","contract":"RariFundController","time":0},{"type":"external-function ","before":"\n\n    function marketSell0xOrdersFillOrKill(LibOrder.Order[] memory orders, bytes[] memory signatures, uint256 takerAssetFillAmount) public payable fundEnabled onlyRebalancer {\n\n        // Exchange COMP to ETH\n\n        uint256 ethBalanceBefore = address(this).balance;\n\n        uint256[2] memory filledAmounts = ZeroExExchangeController.marketSellOrdersFillOrKill(orders, signatures, takerAssetFillAmount, msg.value);\n\n        uint256 ethBalanceAfter = address(this).balance;\n\n        emit CompToEthTrade(filledAmounts[0], filledAmounts[1]);\n\n\n        // Unwrap outputted WETH\n\n        uint256 wethBalance = _weth.balanceOf(address(this));\n\n        require(wethBalance > 0, \"No WETH outputted.\");\n\n        _weth.withdraw(wethBalance);\n\n\n        // Refund unspent ETH protocol fee\n\n        uint256 refund = ethBalanceAfter.sub(ethBalanceBefore.sub(msg.value));\n\n\n        if (refund > 0) {\n\n            (bool success,) = msg.sender.call.value(refund)(\"\");\n\n            require(success, \"Failed to refund unspent ETH protocol fee.\");\n\n        }\n","after":"\n\n    function marketSell0xOrdersFillOrKill(LibOrder.Order[] calldata orders, bytes[] calldata signatures, uint256 takerAssetFillAmount) public payable fundEnabled onlyRebalancer {\n\n        // Exchange COMP to ETH\n\n        uint256 ethBalanceBefore = address(this).balance;\n\n        uint256[2] memory filledAmounts = ZeroExExchangeController.marketSellOrdersFillOrKill(orders, signatures, takerAssetFillAmount, msg.value);\n\n        uint256 ethBalanceAfter = address(this).balance;\n\n        emit CompToEthTrade(filledAmounts[0], filledAmounts[1]);\n\n\n        // Unwrap outputted WETH\n\n        uint256 wethBalance = _weth.balanceOf(address(this));\n\n        require(wethBalance > 0, \"No WETH outputted.\");\n\n        _weth.withdraw(wethBalance);\n\n\n        // Refund unspent ETH protocol fee\n\n        uint256 refund = ethBalanceAfter.sub(ethBalanceBefore.sub(msg.value));\n\n\n        if (refund > 0) {\n\n            (bool success,) = msg.sender.call.value(refund)(\"\");\n\n            require(success, \"Failed to refund unspent ETH protocol fee.\");\n\n        }\n","contract":"RariFundController","time":0}]}
{"time":210,"results":[{"type":"immutable-restrict-modification ","before":"address internal deployer;","after":"address internal immutable deployer;","contract":"GeneratedToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"GeneratedToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"GeneratedToken","time":0},{"type":"external-function ","before":"function addPool(\n        address _stakeToken,\n        uint32 _startBlock,\n        uint32 _endBlock,\n        uint256[] calldata _rewardPerBlocks,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) external override onlyAdmin {\n        require(!poolExists[_stakeToken], 'add: duplicated pool');\n        require(_stakeToken != address(0), 'add: invalid stake token');\n        require(rewardTokens.length == _rewardPerBlocks.length, 'add: invalid length');\n\n        require(_startBlock > block.number && _endBlock > _startBlock, 'add: invalid blocks');\n\n        poolInfo[poolLength].stakeToken = _stakeToken;\n        poolInfo[poolLength].startBlock = _startBlock;\n        poolInfo[poolLength].endBlock = _endBlock;\n        poolInfo[poolLength].lastRewardBlock = _startBlock;\n\n        GeneratedToken _generatedToken = new GeneratedToken(\n            _tokenName, _tokenSymbol\n        );\n        poolToGeneratedToken[_stakeToken] = _generatedToken;\n\n        for (uint256 i = 0; i < _rewardPerBlocks.length; i++) {\n            poolInfo[poolLength].poolRewardData[i] = PoolRewardData({\n            rewardPerBlock : _rewardPerBlocks[i],\n            accRewardPerShare : 0\n            });\n        }\n\n        poolLength++;\n\n        poolExists[_stakeToken] = true;\n\n        emit AddNewPool(_stakeToken, _startBlock, _endBlock, _rewardPerBlocks);\n    }","after":"function addPool(\n        address _stakeToken,\n        uint32 _startBlock,\n        uint32 _endBlock,\n        uint256[] calldata _rewardPerBlocks,\n        string calldata _tokenName,\n        string calldata _tokenSymbol\n    ) external override onlyAdmin {\n        require(!poolExists[_stakeToken], 'add: duplicated pool');\n        require(_stakeToken != address(0), 'add: invalid stake token');\n        require(rewardTokens.length == _rewardPerBlocks.length, 'add: invalid length');\n\n        require(_startBlock > block.number && _endBlock > _startBlock, 'add: invalid blocks');\n\n        poolInfo[poolLength].stakeToken = _stakeToken;\n        poolInfo[poolLength].startBlock = _startBlock;\n        poolInfo[poolLength].endBlock = _endBlock;\n        poolInfo[poolLength].lastRewardBlock = _startBlock;\n\n        GeneratedToken _generatedToken = new GeneratedToken(\n            _tokenName, _tokenSymbol\n        );\n        poolToGeneratedToken[_stakeToken] = _generatedToken;\n\n        for (uint256 i = 0; i < _rewardPerBlocks.length; i++) {\n            poolInfo[poolLength].poolRewardData[i] = PoolRewardData({\n            rewardPerBlock : _rewardPerBlocks[i],\n            accRewardPerShare : 0\n            });\n        }\n\n        poolLength++;\n\n        poolExists[_stakeToken] = true;\n\n        emit AddNewPool(_stakeToken, _startBlock, _endBlock, _rewardPerBlocks);\n    }","contract":"KyberFairLaunchWithToken","time":0}]}
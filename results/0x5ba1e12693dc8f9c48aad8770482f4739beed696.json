{"time":24,"results":[{"type":"external-function ","before":"function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n\n        blockNumber = block.number;\n\n        returnData = new bytes[](calls.length);\n\n        for (uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n\n            require(success, \"Multicall aggregate: call failed\");\n\n            returnData[i] = ret;\n\n        }\n\n    }","after":"function aggregate(Call[] calldata calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n\n        blockNumber = block.number;\n\n        returnData = new bytes[](calls.length);\n\n        for (uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n\n            require(success, \"Multicall aggregate: call failed\");\n\n            returnData[i] = ret;\n\n        }\n\n    }","contract":"Multicall2","time":0},{"type":"external-function ","before":"function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\n\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\n\n    }","after":"function blockAndAggregate(Call[] calldata calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\n\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\n\n    }","contract":"Multicall2","time":0}]}
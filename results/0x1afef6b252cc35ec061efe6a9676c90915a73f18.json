{"time":144,"results":[{"type":"external-function ","before":"function setImmutableIPFSBucket(string memory immutableIPFSBucket_)\n\n    public\n\n    onlyOwner\n\n    {\n\n        require(\n\n            bytes(_immutableIPFSBucket).length == 0,\n\n            \"This IPFS bucket is immuable and can only be set once.\"\n\n        );\n\n        _immutableIPFSBucket = immutableIPFSBucket_;\n\n    }","after":"function setImmutableIPFSBucket(string calldata immutableIPFSBucket_)\n\n    public\n\n    onlyOwner\n\n    {\n\n        require(\n\n            bytes(_immutableIPFSBucket).length == 0,\n\n            \"This IPFS bucket is immuable and can only be set once.\"\n\n        );\n\n        _immutableIPFSBucket = immutableIPFSBucket_;\n\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function setMutableIPFSBucket(string memory mutableIPFSBucket_)\n\n    public\n\n    onlyOwner\n\n    {\n\n        _mutableIPFSBucket = mutableIPFSBucket_;\n\n    }","after":"function setMutableIPFSBucket(string calldata mutableIPFSBucket_)\n\n    public\n\n    onlyOwner\n\n    {\n\n        _mutableIPFSBucket = mutableIPFSBucket_;\n\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function setTokenURI(string memory tokenUriBase_) public onlyOwner {\n\n        _tokenUriBase = tokenUriBase_;\n\n    }","after":"function setTokenURI(string calldata tokenUriBase_) public onlyOwner {\n\n        _tokenUriBase = tokenUriBase_;\n\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function changeNameAndDescription(\n\n        uint256 tokenId,\n\n        string memory newName,\n\n        string memory newDescription\n\n    ) public payable {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"This isn't your Thingie.\");\n\n\n        uint256 amountPaid = msg.value;\n\n\n        if (_nameChanged[tokenId]) {\n\n            require(\n\n                amountPaid == RENAME_PRICE,\n\n                \"It costs to create a new identity.\"\n\n            );\n\n        } else {\n\n            require(\n\n                amountPaid == 0,\n\n                \"First time's free my fluffy little friend.\"\n\n            );\n\n            _nameChanged[tokenId] = true;\n\n        }\n\n\n        emit NameAndDescriptionChanged(tokenId, newName, newDescription);\n\n    }","after":"function changeNameAndDescription(\n\n        uint256 tokenId,\n\n        string calldata newName,\n\n        string calldata newDescription\n\n    ) public payable {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"This isn't your Thingie.\");\n\n\n        uint256 amountPaid = msg.value;\n\n\n        if (_nameChanged[tokenId]) {\n\n            require(\n\n                amountPaid == RENAME_PRICE,\n\n                \"It costs to create a new identity.\"\n\n            );\n\n        } else {\n\n            require(\n\n                amountPaid == 0,\n\n                \"First time's free my fluffy little friend.\"\n\n            );\n\n            _nameChanged[tokenId] = true;\n\n        }\n\n\n        emit NameAndDescriptionChanged(tokenId, newName, newDescription);\n\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function mintThingieBatch(uint256[] memory flufId)\n\n    public\n\n    virtual\n\n    nonReentrant\n\n    returns (uint256)\n\n    {\n\n        address human = msg.sender;\n\n        if (human != owner()) {\n\n            require(_state != State.Setup, \"THINGIES aren't ready yet!\");\n\n        }\n\n        require(\n\n            totalSupply().add(1) <= MAX_THINGIES,\n\n            \"Sorry, there's not that many THINGIES left.\"\n\n        );\n\n        require(\n\n            flufId.length <= MAX_MINT,\n\n            \"You can only mint 10 THINGIES at a time.\"\n\n        );\n\n\n        uint256 firstThingieRecieved = flufId[0];\n\n\n        for (uint256 i = 0; i < flufId.length; i++) {\n\n            require(\n\n                !_thingieForFluf[flufId[i]],\n\n                \"The Thingie for this FLUF has already been minted.\"\n\n            );\n\n            if (msg.sender == owner()) {\n\n                _safeMint(human, flufId[i]);\n\n                _thingieForFluf[flufId[i]] = true;\n\n            } else {\n\n                require(\n\n                    isFlufOwner(flufId[i], human),\n\n                    \"You are not the owner of this FLUF\"\n\n                );\n\n                _safeMint(human, flufId[i]);\n\n                _thingieForFluf[flufId[i]] = true;\n\n            }\n\n        }\n\n\n        return firstThingieRecieved;\n\n    }","after":"function mintThingieBatch(uint256[] calldata flufId)\n\n    public\n\n    virtual\n\n    nonReentrant\n\n    returns (uint256)\n\n    {\n\n        address human = msg.sender;\n\n        if (human != owner()) {\n\n            require(_state != State.Setup, \"THINGIES aren't ready yet!\");\n\n        }\n\n        require(\n\n            totalSupply().add(1) <= MAX_THINGIES,\n\n            \"Sorry, there's not that many THINGIES left.\"\n\n        );\n\n        require(\n\n            flufId.length <= MAX_MINT,\n\n            \"You can only mint 10 THINGIES at a time.\"\n\n        );\n\n\n        uint256 firstThingieRecieved = flufId[0];\n\n\n        for (uint256 i = 0; i < flufId.length; i++) {\n\n            require(\n\n                !_thingieForFluf[flufId[i]],\n\n                \"The Thingie for this FLUF has already been minted.\"\n\n            );\n\n            if (msg.sender == owner()) {\n\n                _safeMint(human, flufId[i]);\n\n                _thingieForFluf[flufId[i]] = true;\n\n            } else {\n\n                require(\n\n                    isFlufOwner(flufId[i], human),\n\n                    \"You are not the owner of this FLUF\"\n\n                );\n\n                _safeMint(human, flufId[i]);\n\n                _thingieForFluf[flufId[i]] = true;\n\n            }\n\n        }\n\n\n        return firstThingieRecieved;\n\n    }","contract":"Thingies","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"Thingies","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"Thingies","time":1}]}
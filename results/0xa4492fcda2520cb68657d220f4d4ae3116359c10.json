{"time":290,"results":[{"type":"external-function ","before":"   function quotePrice(QuoteArgs memory args)\n    external\n    pure\n    returns (\n        int128 premiaPrice64x64,\n        int128 cLevel64x64,\n        int128 slippageCoefficient64x64\n    )\n    {\n        int128 deltaPoolState64x64 = args\n        .newPoolState\n        .sub(args.oldPoolState)\n        .div(args.oldPoolState)\n        .mul(args.steepness64x64);\n        int128 tradingDelta64x64 = deltaPoolState64x64.neg().exp();\n\n        int128 blackScholesPrice64x64 = _blackScholesPrice(\n            args.varianceAnnualized64x64,\n            args.strike64x64,\n            args.spot64x64,\n            args.timeToMaturity64x64,\n            args.isCall\n        );\n\n        cLevel64x64 = tradingDelta64x64.mul(args.oldCLevel64x64);\n        slippageCoefficient64x64 = ONE_64x64.sub(tradingDelta64x64).div(\n            deltaPoolState64x64\n        );\n\n        premiaPrice64x64 = blackScholesPrice64x64.mul(cLevel64x64).mul(\n            slippageCoefficient64x64\n        );\n\n        int128 intrinsicValue64x64;\n\n        if (args.isCall && args.strike64x64 < args.spot64x64) {\n            intrinsicValue64x64 = args.spot64x64.sub(args.strike64x64);\n        } else if (!args.isCall && args.strike64x64 > args.spot64x64) {\n            intrinsicValue64x64 = args.strike64x64.sub(args.spot64x64);\n        }\n\n        int128 collateralValue64x64 = args.isCall\n        ? args.spot64x64\n        : args.strike64x64;\n\n        int128 minPrice64x64 = intrinsicValue64x64.add(\n            collateralValue64x64.mul(args.minAPY64x64).mul(\n                args.timeToMaturity64x64\n            )\n        );\n\n        if (minPrice64x64 > premiaPrice64x64) {\n            premiaPrice64x64 = minPrice64x64;\n        }\n  ","after":"   function quotePrice(QuoteArgs calldata args)\n    external\n    pure\n    returns (\n        int128 premiaPrice64x64,\n        int128 cLevel64x64,\n        int128 slippageCoefficient64x64\n    )\n    {\n        int128 deltaPoolState64x64 = args\n        .newPoolState\n        .sub(args.oldPoolState)\n        .div(args.oldPoolState)\n        .mul(args.steepness64x64);\n        int128 tradingDelta64x64 = deltaPoolState64x64.neg().exp();\n\n        int128 blackScholesPrice64x64 = _blackScholesPrice(\n            args.varianceAnnualized64x64,\n            args.strike64x64,\n            args.spot64x64,\n            args.timeToMaturity64x64,\n            args.isCall\n        );\n\n        cLevel64x64 = tradingDelta64x64.mul(args.oldCLevel64x64);\n        slippageCoefficient64x64 = ONE_64x64.sub(tradingDelta64x64).div(\n            deltaPoolState64x64\n        );\n\n        premiaPrice64x64 = blackScholesPrice64x64.mul(cLevel64x64).mul(\n            slippageCoefficient64x64\n        );\n\n        int128 intrinsicValue64x64;\n\n        if (args.isCall && args.strike64x64 < args.spot64x64) {\n            intrinsicValue64x64 = args.spot64x64.sub(args.strike64x64);\n        } else if (!args.isCall && args.strike64x64 > args.spot64x64) {\n            intrinsicValue64x64 = args.strike64x64.sub(args.spot64x64);\n        }\n\n        int128 collateralValue64x64 = args.isCall\n        ? args.spot64x64\n        : args.strike64x64;\n\n        int128 minPrice64x64 = intrinsicValue64x64.add(\n            collateralValue64x64.mul(args.minAPY64x64).mul(\n                args.timeToMaturity64x64\n            )\n        );\n\n        if (minPrice64x64 > premiaPrice64x64) {\n            premiaPrice64x64 = minPrice64x64;\n        }\n  ","contract":"OptionMath","time":0},{"type":"external-function ","before":"   function calculateCLevelDecay(CalculateCLevelDecayArgs memory args)\n    external\n    pure\n    returns (int128 cLevelDecayed64x64)\n    {\n        int128 convFHighU64x64 = (args.utilization64x64 >=\n        args.utilizationUpperBound64x64 &&\n        args.oldCLevel64x64 <= args.cLevelLowerBound64x64)\n        ? ONE_64x64\n        : int128(0);\n\n        int128 convFLowU64x64 = (args.utilization64x64 <=\n        args.utilizationLowerBound64x64 &&\n        args.oldCLevel64x64 >= args.cLevelUpperBound64x64)\n        ? ONE_64x64\n        : int128(0);\n\n        cLevelDecayed64x64 = args\n        .oldCLevel64x64\n        .sub(args.cConvergenceULowerBound64x64.mul(convFLowU64x64))\n        .sub(args.cConvergenceUUpperBound64x64.mul(convFHighU64x64))\n        .mul(\n            convFLowU64x64\n            .mul(ONE_64x64.sub(args.utilization64x64))\n            .add(convFHighU64x64.mul(args.utilization64x64))\n            .mul(args.timeIntervalsElapsed64x64)\n            .neg()\n            .exp()\n        )\n        .add(\n            args.cConvergenceULowerBound64x64.mul(convFLowU64x64).add(\n                args.cConvergenceUUpperBound64x64.mul(convFHighU64x64)\n            )\n        );\n  ","after":"   function calculateCLevelDecay(CalculateCLevelDecayArgs calldata args)\n    external\n    pure\n    returns (int128 cLevelDecayed64x64)\n    {\n        int128 convFHighU64x64 = (args.utilization64x64 >=\n        args.utilizationUpperBound64x64 &&\n        args.oldCLevel64x64 <= args.cLevelLowerBound64x64)\n        ? ONE_64x64\n        : int128(0);\n\n        int128 convFLowU64x64 = (args.utilization64x64 <=\n        args.utilizationLowerBound64x64 &&\n        args.oldCLevel64x64 >= args.cLevelUpperBound64x64)\n        ? ONE_64x64\n        : int128(0);\n\n        cLevelDecayed64x64 = args\n        .oldCLevel64x64\n        .sub(args.cConvergenceULowerBound64x64.mul(convFLowU64x64))\n        .sub(args.cConvergenceUUpperBound64x64.mul(convFHighU64x64))\n        .mul(\n            convFLowU64x64\n            .mul(ONE_64x64.sub(args.utilization64x64))\n            .add(convFHighU64x64.mul(args.utilization64x64))\n            .mul(args.timeIntervalsElapsed64x64)\n            .neg()\n            .exp()\n        )\n        .add(\n            args.cConvergenceULowerBound64x64.mul(convFLowU64x64).add(\n                args.cConvergenceUUpperBound64x64.mul(convFHighU64x64)\n            )\n        );\n  ","contract":"OptionMath","time":0},{"type":"struct-data-arrangement ","before":"\n     address fee\n     uint64 mat\n     int128 strike\n     int128 spot\n     uint256 contrac\n     bool i","after":"     uint256 contrac\n     address fee\n     int128 strike\n     int128 spot\n     uint64 mat\n     bool i\n","contract":"PoolStorage","time":0}]}
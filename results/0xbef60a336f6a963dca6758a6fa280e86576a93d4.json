{"time":252,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(uint256 => address) private _tokenOwner;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => Counters.Counter) private _ownedTokensCount;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping(uint256 => address) private _tokenOwner;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => Counters.Counter) private _ownedTokensCount;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, string memory tokenURI) onlyOwner public {\n\n        require(isSigner(ecrecover(keccak256(abi.encodePacked(tokenId)), v, r, s)), \"signer should sign tokenId\");\n\n        _mint(msg.sender, tokenId);\n\n        _setTokenURI(tokenId, tokenURI);\n\n    }","after":"function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, string calldata tokenURI) onlyOwner public {\n\n        require(isSigner(ecrecover(keccak256(abi.encodePacked(tokenId)), v, r, s)), \"signer should sign tokenId\");\n\n        _mint(msg.sender, tokenId);\n\n        _setTokenURI(tokenId, tokenURI);\n\n    }","contract":"MintableOwnableToken","time":0},{"type":"external-function ","before":"function setTokenURIPrefix(string memory tokenURIPrefix) public onlyOwner {\n\n        _setTokenURIPrefix(tokenURIPrefix);\n\n    }","after":"function setTokenURIPrefix(string calldata tokenURIPrefix) public onlyOwner {\n\n        _setTokenURIPrefix(tokenURIPrefix);\n\n    }","contract":"MintableOwnableToken","time":0},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"MintableOwnableToken","time":0},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"MintableOwnableToken","time":0}]}
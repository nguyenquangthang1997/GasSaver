{"time":175,"results":[{"type":"immutable-restrict-modification ","before":"bool public isActiveBehaviour;","after":"bool public immutable isActiveBehaviour;","contract":"NoteRegistryBehaviour","time":0},{"type":"constant-restrict-modification  ","before":"bool public initialised;","after":"bool public constant initialised;","contract":"NoteRegistryBehaviour","time":0},{"type":"constant-restrict-modification  ","before":"address public dataLocation;","after":"address public constant dataLocation;","contract":"NoteRegistryBehaviour","time":0},{"type":"external-function ","before":"  function setCommonReferenceString(bytes32[6] memory _commonReferenceString) public {\n        require(isOwner(), \"only the owner can set the common reference string\");\n        commonReferenceString = _commonReferenceString;\n        emit SetCommonReferenceString(_commonReferenceString);\n   ","after":"  function setCommonReferenceString(bytes32[6] calldata _commonReferenceString) public {\n        require(isOwner(), \"only the owner can set the common reference string\");\n        commonReferenceString = _commonReferenceString;\n        emit SetCommonReferenceString(_commonReferenceString);\n   ","contract":"ACE","time":0},{"type":"external-function ","before":"function updateNoteRegistry(\n        uint24 _proof,\n        bytes memory _proofOutput,\n        address _proofSender\n    ) public {\n        NoteRegistry memory registry = registries[msg.sender];\n        require(address(registry.behaviour) != address(0x0), \"note registry does not exist\");\n        bytes32 proofHash = keccak256(_proofOutput);\n        bytes32 validatedProofHash = keccak256(abi.encode(proofHash, _proof, msg.sender));\n\n        require(\n            validateProofByHash(_proof, proofHash, _proofSender) == true,\n            \"ACE has not validated a matching proof\"\n        );\n        // clear record of valid proof - stops re-entrancy attacks and saves some gas\n        validatedProofs[validatedProofHash] = false;\n\n        (\n        address publicOwner,\n        uint256 transferValue,\n        int256 publicValue\n        ) = registry.behaviour.updateNoteRegistry(_proof, _proofOutput);\n        if (publicValue != 0) {\n            transferPublicTokens(publicOwner, transferValue, publicValue, proofHash);\n        }\n    }","after":"function updateNoteRegistry(\n        uint24 _proof,\n        bytes calldata _proofOutput,\n        address _proofSender\n    ) public {\n        NoteRegistry memory registry = registries[msg.sender];\n        require(address(registry.behaviour) != address(0x0), \"note registry does not exist\");\n        bytes32 proofHash = keccak256(_proofOutput);\n        bytes32 validatedProofHash = keccak256(abi.encode(proofHash, _proof, msg.sender));\n\n        require(\n            validateProofByHash(_proof, proofHash, _proofSender) == true,\n            \"ACE has not validated a matching proof\"\n        );\n        // clear record of valid proof - stops re-entrancy attacks and saves some gas\n        validatedProofs[validatedProofHash] = false;\n\n        (\n        address publicOwner,\n        uint256 transferValue,\n        int256 publicValue\n        ) = registry.behaviour.updateNoteRegistry(_proof, _proofOutput);\n        if (publicValue != 0) {\n            transferPublicTokens(publicOwner, transferValue, publicValue, proofHash);\n        }\n    }","contract":"ACE","time":0}]}
{"time":82,"results":[{"type":"external-function ","before":"function createEditions(\n\n        EditionTier[] memory tiers,\n\n    // The account that should receive the revenue.\n\n        address payable fundingRecipient,\n\n    // The address (e.g. crowdfund proxy) that is allowed to mint\n\n    // tokens in this edition.\n\n        address minter\n\n    ) external override {\n\n        // Only the crowdfund factory can create editions.\n\n        require(msg.sender == editionCreator);\n\n        // Copy the next edition id, which we reference in the loop.\n\n        uint256 firstEditionId = nextEditionId;\n\n        // Update the next edition id to what we expect after the loop.\n\n        nextEditionId += tiers.length;\n\n        // Execute a loop that created editions.\n\n        for (uint8 x = 0; x < tiers.length; x++) {\n\n            uint256 id = firstEditionId + x;\n\n            uint256 quantity = tiers[x].quantity;\n\n            uint256 price = tiers[x].price;\n\n            bytes32 contentHash = tiers[x].contentHash;\n\n\n            editions[id] = Edition({\n\n            quantity : quantity,\n\n            price : price,\n\n            fundingRecipient : fundingRecipient,\n\n            numSold : 0,\n\n            contentHash : contentHash\n\n            });\n\n\n            editionToMinter[id] = minter;\n\n\n            emit EditionCreated(\n\n                quantity,\n\n                price,\n\n                fundingRecipient,\n\n                id,\n\n                contentHash\n\n            );\n\n        }\n\n    }","after":"function createEditions(\n\n        EditionTier[] calldata tiers,\n\n    // The account that should receive the revenue.\n\n        address payable fundingRecipient,\n\n    // The address (e.g. crowdfund proxy) that is allowed to mint\n\n    // tokens in this edition.\n\n        address minter\n\n    ) external override {\n\n        // Only the crowdfund factory can create editions.\n\n        require(msg.sender == editionCreator);\n\n        // Copy the next edition id, which we reference in the loop.\n\n        uint256 firstEditionId = nextEditionId;\n\n        // Update the next edition id to what we expect after the loop.\n\n        nextEditionId += tiers.length;\n\n        // Execute a loop that created editions.\n\n        for (uint8 x = 0; x < tiers.length; x++) {\n\n            uint256 id = firstEditionId + x;\n\n            uint256 quantity = tiers[x].quantity;\n\n            uint256 price = tiers[x].price;\n\n            bytes32 contentHash = tiers[x].contentHash;\n\n\n            editions[id] = Edition({\n\n            quantity : quantity,\n\n            price : price,\n\n            fundingRecipient : fundingRecipient,\n\n            numSold : 0,\n\n            contentHash : contentHash\n\n            });\n\n\n            editionToMinter[id] = minter;\n\n\n            emit EditionCreated(\n\n                quantity,\n\n                price,\n\n                fundingRecipient,\n\n                id,\n\n                contentHash\n\n            );\n\n        }\n\n    }","contract":"CrowdfundEditions","time":1},{"type":"external-function ","before":"function changeBaseURI(string memory baseURI_) public onlyOwner {\n\n        baseURI = baseURI_;\n\n    }","after":"function changeBaseURI(string calldata baseURI_) public onlyOwner {\n\n        baseURI = baseURI_;\n\n    }","contract":"CrowdfundEditions","time":0},{"type":"constant-restrict-modification  ","before":"uint256 internal reentrancyStatus;","after":"uint256 internal constant reentrancyStatus;","contract":"CrowdfundEditions","time":0}]}
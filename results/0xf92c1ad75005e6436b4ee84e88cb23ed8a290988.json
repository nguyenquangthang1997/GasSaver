{"time":95,"results":[{"type":"state-data-arrangement ","before":"\naddress constant private ETH_ADDRESS = address(\n\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n\n    );\nmapping(address => bool) private _whitelisteds;\nuint256 private _fee;\naddress payable private _feeWallet;\nIGST2 private _gasToken;\nbool private _paused;\nTokenTransferProxy private _tokenTransferProxy;","after":"mapping(address => bool) private _whitelisteds;\nuint256 private _fee;\nIGST2 private _gasToken;\nTokenTransferProxy private _tokenTransferProxy;\naddress constant private ETH_ADDRESS = address(\n\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n\n    );\naddress payable private _feeWallet;\nbool private _paused;\n","contract":"AugustusSwapper","time":1},{"type":"external-function ","before":"function pay(\n\n        address payable receiver,\n\n        address sourceToken,\n\n        address destinationToken,\n\n        uint256 sourceAmount,\n\n        uint256 destinationAmount,\n\n        address[] memory callees,\n\n        bytes memory exchangeData,\n\n        uint256[] memory startIndexes,\n\n        uint256[] memory values,\n\n        string memory referrer,\n\n        uint256 mintPrice\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    nonReentrant\n\n    {\n\n        uint receivedAmount = performSwap(\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            destinationAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            mintPrice\n\n        );\n\n\n        address payable payer = msg.sender;\n\n\n        transferTokens(destinationToken, receiver, destinationAmount);\n\n\n        //Transfers the rest of destinationToken, if any, to the sender\n\n        if (receivedAmount > destinationAmount) {\n\n            uint rest = receivedAmount.sub(destinationAmount);\n\n\n            transferTokens(destinationToken, payer, rest);\n\n        }\n\n\n        emit Payed(\n\n            receiver,\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","after":"function pay(\n\n        address payable receiver,\n\n        address sourceToken,\n\n        address destinationToken,\n\n        uint256 sourceAmount,\n\n        uint256 destinationAmount,\n\n        address[] calldata callees,\n\n        bytes calldata exchangeData,\n\n        uint256[] calldata startIndexes,\n\n        uint256[] calldata values,\n\n        string calldata referrer,\n\n        uint256 mintPrice\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    nonReentrant\n\n    {\n\n        uint receivedAmount = performSwap(\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            destinationAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            mintPrice\n\n        );\n\n\n        address payable payer = msg.sender;\n\n\n        transferTokens(destinationToken, receiver, destinationAmount);\n\n\n        //Transfers the rest of destinationToken, if any, to the sender\n\n        if (receivedAmount > destinationAmount) {\n\n            uint rest = receivedAmount.sub(destinationAmount);\n\n\n            transferTokens(destinationToken, payer, rest);\n\n        }\n\n\n        emit Payed(\n\n            receiver,\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function swap(\n\n        address sourceToken,\n\n        address destinationToken,\n\n        uint256 sourceAmount,\n\n        uint256 minDestinationAmount,\n\n        address[] memory callees,\n\n        bytes memory exchangeData,\n\n        uint256[] memory startIndexes,\n\n        uint256[] memory values,\n\n        string memory referrer,\n\n        uint256 mintPrice\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    nonReentrant\n\n    {\n\n        uint receivedAmount = performSwap(\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            minDestinationAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            mintPrice\n\n        );\n\n\n        transferTokens(destinationToken, msg.sender, receivedAmount);\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","after":"function swap(\n\n        address sourceToken,\n\n        address destinationToken,\n\n        uint256 sourceAmount,\n\n        uint256 minDestinationAmount,\n\n        address[] calldata callees,\n\n        bytes calldata exchangeData,\n\n        uint256[] calldata startIndexes,\n\n        uint256[] calldata values,\n\n        string calldata referrer,\n\n        uint256 mintPrice\n\n    )\n\n    public\n\n    payable\n\n    whenNotPaused\n\n    nonReentrant\n\n    {\n\n        uint receivedAmount = performSwap(\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            minDestinationAmount,\n\n            callees,\n\n            exchangeData,\n\n            startIndexes,\n\n            values,\n\n            mintPrice\n\n        );\n\n\n        transferTokens(destinationToken, msg.sender, receivedAmount);\n\n\n        emit Swapped(\n\n            msg.sender,\n\n            sourceToken,\n\n            destinationToken,\n\n            sourceAmount,\n\n            receivedAmount,\n\n            referrer\n\n        );\n\n    }","contract":"AugustusSwapper","time":0}]}
{"time":65,"results":[{"type":"external-function ","before":"   }\n\n\n        require(_weights >= weights, \"insufficient weights\");\n\n    }\n\n\n    function multiSigSetACLs(\n\n        uint8[] memory v,\n\n        bytes32[] memory r,\n\n        bytes32[] memory s,\n\n        address[] memory execTargets,\n\n        address newACL) public {\n\n        bytes32 inputHash = keccak256(abi.encode(newACL, msg.sender, nonce, this.multiSigSetACLs.selector));\n\n        bytes32 totalHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", inputHash));\n\n        mulsigauth(totalHash, v, r, s, msg.sender);\n\n        nonce += 1;\n\n        for (uint i = 0; i < execTargets.length;","after":"   }\n\n\n        require(_weights >= weights, \"insufficient weights\");\n\n    }\n\n\n    function multiSigSetACLs(\n\n        uint8[] calldata v,\n\n        bytes32[] calldata r,\n\n        bytes32[] memory s,\n\n        address[] memory execTargets,\n\n        address newACL) public {\n\n        bytes32 inputHash = keccak256(abi.encode(newACL, msg.sender, nonce, this.multiSigSetACLs.selector));\n\n        bytes32 totalHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", inputHash));\n\n        mulsigauth(totalHash, v, r, s, msg.sender);\n\n        nonce += 1;\n\n        for (uint i = 0; i < execTargets.length;","contract":"ACL","time":0}]}
{"time":359,"results":[{"type":"state-data-arrangement ","before":"\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a\n   mapping(address => EnumerableSet.UintSet) private _holderToke\n   EnumerableMap.UintToAddressMap private _tokenOwne\n   mapping(uint256 => address) private _tokenApprova\n   mapping(address => mapping(address => bool)) private _operatorApprova\n   string private _na\n   string private _symb\n   mapping(uint256 => string) private _tokenUR\n   string private _baseU\n   bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58\n   bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e13\n   bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d","after":"   mapping(address => EnumerableSet.UintSet) private _holderToke\n   EnumerableMap.UintToAddressMap private _tokenOwne\n   mapping(uint256 => address) private _tokenApprova\n   mapping(address => mapping(address => bool)) private _operatorApprova\n   string private _na\n   string private _symb\n   mapping(uint256 => string) private _tokenUR\n   string private _baseU\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a\n   bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58\n   bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e13\n   bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d\n","contract":"ERC721","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"MethodNFTFactory","time":0},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"MethodNFTFactory","time":0},{"type":"external-function ","before":"   function isValidSignature(bytes32 permissionHash, bytes memory signature)\n    public\n    view\n    override\n    returns (bytes4)\n    {\n        return\n        SignatureChecker.isValidSignature(_getOwner(), permissionHash, signature)\n        ? VALID_SIG\n        : INVALID_SIG;\n  ","after":"   function isValidSignature(bytes32 permissionHash, bytes calldata signature)\n    public\n    view\n    override\n    returns (bytes4)\n    {\n        return\n        SignatureChecker.isValidSignature(_getOwner(), permissionHash, signature)\n        ? VALID_SIG\n        : INVALID_SIG;\n  ","contract":"MethodVault","time":0}]}
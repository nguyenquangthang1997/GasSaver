{"time":243,"results":[{"type":"loop-duplication","before":"\nstart line 1081 column 8, end line 1085 column 8\nfor (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0) continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].sub(_amounts[i].mul(precisions[i]));\n        }\nstart line 1105 column 8, end line 1108 column 8\nfor (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0) continue;\n            IERC20(tokens[i]).safeTransfer(msg.sender, _amounts[i]);\n        }","after":"// merge loop\n\nstart line 1081 column 8, end line 1085 column 8\nfor (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0) continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].sub(_amounts[i].mul(precisions[i]));\n        }\nstart line 1105 column 8, end line 1108 column 8\nfor (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0) continue;\n            IERC20(tokens[i]).safeTransfer(msg.sender, _amounts[i]);\n        }","contract":"ACoconutSwap","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public constant feeDenominator = 10 ** 10;\naddress[] public tokens;\nuint256[] public precisions;\nuint256[] public balances;\nuint256 public mintFee;\nuint256 public swapFee;\nuint256 public redeemFee;\naddress public feeRecipient;\naddress public poolToken;\nuint256 public totalSupply;\naddress public governance;\nmapping(address => bool) public admins;\nbool public paused;\nuint256 public initialA;","after":"uint256 public constant feeDenominator = 10 ** 10;\naddress[] public tokens;\nuint256[] public precisions;\nuint256[] public balances;\nuint256 public mintFee;\nuint256 public swapFee;\nuint256 public redeemFee;\nuint256 public totalSupply;\nmapping(address => bool) public admins;\nuint256 public initialA;\naddress public feeRecipient;\naddress public poolToken;\naddress public governance;\nbool public paused;\n","contract":"ACoconutSwap","time":1},{"type":"external-function ","before":"function initialize(address[] memory _tokens, uint256[] memory _precisions, uint256[] memory _fees,\n        address _poolToken, uint256 _A) public initializer {\n        require(_tokens.length == _precisions.length, \"input mismatch\");\n        require(_fees.length == 3, \"no fees\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            require(_tokens[i] != address(0x0), \"token not set\");\n            require(_precisions[i] != 0, \"precision not set\");\n            balances.push(0);\n        }\n        require(_poolToken != address(0x0), \"pool token not set\");\n\n        governance = msg.sender;\n        feeRecipient = msg.sender;\n        tokens = _tokens;\n        precisions = _precisions;\n        mintFee = _fees[0];\n        swapFee = _fees[1];\n        redeemFee = _fees[2];\n        poolToken = _poolToken;\n\n        initialA = _A;\n\n        // The swap must start with paused state!\n        paused = true;\n    }","after":"function initialize(address[] calldata _tokens, uint256[] calldata _precisions, uint256[] calldata _fees,\n        address _poolToken, uint256 _A) public initializer {\n        require(_tokens.length == _precisions.length, \"input mismatch\");\n        require(_fees.length == 3, \"no fees\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            require(_tokens[i] != address(0x0), \"token not set\");\n            require(_precisions[i] != 0, \"precision not set\");\n            balances.push(0);\n        }\n        require(_poolToken != address(0x0), \"pool token not set\");\n\n        governance = msg.sender;\n        feeRecipient = msg.sender;\n        tokens = _tokens;\n        precisions = _precisions;\n        mintFee = _fees[0];\n        swapFee = _fees[1];\n        redeemFee = _fees[2];\n        poolToken = _poolToken;\n\n        initialA = _A;\n\n        // The swap must start with paused state!\n        paused = true;\n    }","contract":"ACoconutSwap","time":0}]}
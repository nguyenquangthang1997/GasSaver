{"time":15,"results":[{"type":"external-function ","before":"function setK0InBatch(uint256[] memory tIdxs, uint256[] memory sigmaIdxs, int128[] memory k0s) external override {\n        require(msg.sender == governance, \"CKTable: !governance\");\n        uint256 loopCnt = tIdxs.length;\n        require(loopCnt == sigmaIdxs.length, \"CKTable: tIdxs sigmaIdx not match\");\n        require(loopCnt == k0s.length, \"CKTable: tIdxs k0s not match\");\n        for (uint256 i = 0; i < loopCnt; i++) {\n            require(k0Table[tIdxs[i]][sigmaIdxs[i]] == 0, \"CKTable: already set\");\n            // only once, and not changeable\n            k0Table[tIdxs[i]][sigmaIdxs[i]] = k0s[i];\n        }\n    }","after":"function setK0InBatch(uint256[] calldata tIdxs, uint256[] calldata sigmaIdxs, int128[] calldata k0s) external override {\n        require(msg.sender == governance, \"CKTable: !governance\");\n        uint256 loopCnt = tIdxs.length;\n        require(loopCnt == sigmaIdxs.length, \"CKTable: tIdxs sigmaIdx not match\");\n        require(loopCnt == k0s.length, \"CKTable: tIdxs k0s not match\");\n        for (uint256 i = 0; i < loopCnt; i++) {\n            require(k0Table[tIdxs[i]][sigmaIdxs[i]] == 0, \"CKTable: already set\");\n            // only once, and not changeable\n            k0Table[tIdxs[i]][sigmaIdxs[i]] = k0s[i];\n        }\n    }","contract":"CoFiXKTable","time":0},{"type":"immutable-restrict-modification ","before":"address public governance;","after":"address public immutable governance;","contract":"CoFiXKTable","time":0}]}
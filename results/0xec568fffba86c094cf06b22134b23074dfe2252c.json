{"time":115,"results":[{"type":"external-function ","before":"function create(\n\n        IExecutorWithTimelock executor,\n\n        address[] memory targets,\n\n        uint256[] memory values,\n\n        string[] memory signatures,\n\n        bytes[] memory calldatas,\n\n        bool[] memory withDelegatecalls,\n\n        bytes32 ipfsHash\n\n    ) external override returns (uint256) {\n\n        require(targets.length != 0, 'INVALID_EMPTY_TARGETS');\n\n        require(\n\n            targets.length == values.length &&\n\n            targets.length == signatures.length &&\n\n            targets.length == calldatas.length &&\n\n            targets.length == withDelegatecalls.length,\n\n            'INCONSISTENT_PARAMS_LENGTH'\n\n        );\n\n\n        require(isExecutorAuthorized(address(executor)), 'EXECUTOR_NOT_AUTHORIZED');\n\n\n        require(\n\n            IProposalValidator(address(executor)).validateCreatorOfProposal(\n\n                this,\n\n                msg.sender,\n\n                block.number - 1\n\n            ),\n\n            'PROPOSITION_CREATION_INVALID'\n\n        );\n\n\n        CreateVars memory vars;\n\n\n        vars.startBlock = block.number.add(_votingDelay);\n\n        vars.endBlock = vars.startBlock.add(IProposalValidator(address(executor)).VOTING_DURATION());\n\n\n        vars.previousProposalsCount = _proposalsCount;\n\n\n        Proposal storage newProposal = _proposals[vars.previousProposalsCount];\n\n        newProposal.id = vars.previousProposalsCount;\n\n        newProposal.creator = msg.sender;\n\n        newProposal.executor = executor;\n\n        newProposal.targets = targets;\n\n        newProposal.values = values;\n\n        newProposal.signatures = signatures;\n\n        newProposal.calldatas = calldatas;\n\n        newProposal.withDelegatecalls = withDelegatecalls;\n\n        newProposal.startBlock = vars.startBlock;\n\n        newProposal.endBlock = vars.endBlock;\n\n        newProposal.strategy = _governanceStrategy;\n\n        newProposal.ipfsHash = ipfsHash;\n\n        _proposalsCount++;\n\n\n        emit ProposalCreated(\n\n            vars.previousProposalsCount,\n\n            msg.sender,\n\n            executor,\n\n            targets,\n\n            values,\n\n            signatures,\n\n            calldatas,\n\n            withDelegatecalls,\n\n            vars.startBlock,\n\n            vars.endBlock,\n\n            _governanceStrategy,\n\n            ipfsHash\n\n        );\n\n\n        return newProposal.id;\n\n    }","after":"function create(\n\n        IExecutorWithTimelock executor,\n\n        address[] calldata targets,\n\n        uint256[] calldata values,\n\n        string[] calldata signatures,\n\n        bytes[] calldata calldatas,\n\n        bool[] calldata withDelegatecalls,\n\n        bytes32 ipfsHash\n\n    ) external override returns (uint256) {\n\n        require(targets.length != 0, 'INVALID_EMPTY_TARGETS');\n\n        require(\n\n            targets.length == values.length &&\n\n            targets.length == signatures.length &&\n\n            targets.length == calldatas.length &&\n\n            targets.length == withDelegatecalls.length,\n\n            'INCONSISTENT_PARAMS_LENGTH'\n\n        );\n\n\n        require(isExecutorAuthorized(address(executor)), 'EXECUTOR_NOT_AUTHORIZED');\n\n\n        require(\n\n            IProposalValidator(address(executor)).validateCreatorOfProposal(\n\n                this,\n\n                msg.sender,\n\n                block.number - 1\n\n            ),\n\n            'PROPOSITION_CREATION_INVALID'\n\n        );\n\n\n        CreateVars memory vars;\n\n\n        vars.startBlock = block.number.add(_votingDelay);\n\n        vars.endBlock = vars.startBlock.add(IProposalValidator(address(executor)).VOTING_DURATION());\n\n\n        vars.previousProposalsCount = _proposalsCount;\n\n\n        Proposal storage newProposal = _proposals[vars.previousProposalsCount];\n\n        newProposal.id = vars.previousProposalsCount;\n\n        newProposal.creator = msg.sender;\n\n        newProposal.executor = executor;\n\n        newProposal.targets = targets;\n\n        newProposal.values = values;\n\n        newProposal.signatures = signatures;\n\n        newProposal.calldatas = calldatas;\n\n        newProposal.withDelegatecalls = withDelegatecalls;\n\n        newProposal.startBlock = vars.startBlock;\n\n        newProposal.endBlock = vars.endBlock;\n\n        newProposal.strategy = _governanceStrategy;\n\n        newProposal.ipfsHash = ipfsHash;\n\n        _proposalsCount++;\n\n\n        emit ProposalCreated(\n\n            vars.previousProposalsCount,\n\n            msg.sender,\n\n            executor,\n\n            targets,\n\n            values,\n\n            signatures,\n\n            calldatas,\n\n            withDelegatecalls,\n\n            vars.startBlock,\n\n            vars.endBlock,\n\n            _governanceStrategy,\n\n            ipfsHash\n\n        );\n\n\n        return newProposal.id;\n\n    }","contract":"AaveGovernanceV2","time":0},{"type":"external-function ","before":"function unauthorizeExecutors(address[] memory executors) public override onlyOwner {\n\n        for (uint256 i = 0; i < executors.length; i++) {\n\n            _unauthorizeExecutor(executors[i]);\n\n        }\n\n    }","after":"function unauthorizeExecutors(address[] calldata executors) public override onlyOwner {\n\n        for (uint256 i = 0; i < executors.length; i++) {\n\n            _unauthorizeExecutor(executors[i]);\n\n        }\n\n    }","contract":"AaveGovernanceV2","time":0}]}
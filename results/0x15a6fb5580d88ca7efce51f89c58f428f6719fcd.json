{"time":370,"results":[{"type":"immutable-restrict-modification ","before":"unt address\n   */\n    addr","after":"unt address\n   */\n    addr","contract":"Account","time":0},{"type":"immutable-restrict-modification ","before":"    address public regis","after":"    address public regis","contract":"Account","time":0},{"type":"external-function ","before":" */\n    function executeAccountTransaction(\n        address account,\n        address to,\n        uint256 value,\n        bytes memory data\n    )\n    external\n    {\n        _executeAccountTransaction(account, to, value, data, true","after":" */\n    function executeAccountTransaction(\n        address account,\n        address to,\n        uint256 value,\n        bytes memory data\n    )\n    external\n    {\n        _executeAccountTransaction(account, to, value, data, true","contract":"AccountControllerMock","time":0},{"type":"external-function ","before":" functions\n\n    function mockAccountOwners(\n        address account,\n        address[] memory owners\n    )\n    external\n    {\n        uint ownersLen = owners.length;\n        for (uint i = 0; i < ownersLen; i++) {\n            mockedAccountsOwners[account][owners[i]] = true;","after":" functions\n\n    function mockAccountOwners(\n        address account,\n        address[] memory owners\n    )\n    external\n    {\n        uint ownersLen = owners.length;\n        for (uint i = 0; i < ownersLen; i++) {\n            mockedAccountsOwners[account][owners[i]] = true;","contract":"AccountRegistryMock","time":0},{"type":"external-function ","before":" @return hash\n   */\n    function hashSubNodeRegistration(\n        SubNodeRegistration memory subNodeRegistration\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                subNodeRegistration.account,\n                subNodeRegistration.node,\n                subNodeRegistration.label\n      ","after":" @return hash\n   */\n    function hashSubNodeRegistration(\n        SubNodeRegistration memory subNodeRegistration\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                subNodeRegistration.account,\n                subNodeRegistration.node,\n                subNodeRegistration.label\n      ","contract":"ENSController","time":0},{"type":"external-function ","before":"ray of batch data\n   */\n    function sendBatch(\n        address[] memory to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            msg.sender,\n            msg.sender,\n            to,\n     ","after":"ray of batch data\n   */\n    function sendBatch(\n        address[] calldata to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            msg.sender,\n            msg.sender,\n            to,\n     ","contract":"Gateway","time":0},{"type":"external-function ","before":"ray of batch data\n   */\n    function sendBatchFromAccount(\n        address account,\n        address[] memory to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            account,\n            msg.sender,\n            to,\n     ","after":"ray of batch data\n   */\n    function sendBatchFromAccount(\n        address account,\n        address[] calldata to,\n        bytes[] memory data\n    )\n    public\n    {\n        _sendBatch(\n            account,\n            msg.sender,\n            to,\n     ","contract":"Gateway","time":0},{"type":"external-function ","before":" sender signature\n   */\n    function delegateBatch(\n        address account,\n        uint256 nonce,\n        address[] memory to,\n        bytes[] memory data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n     ","after":" sender signature\n   */\n    function delegateBatch(\n        address account,\n        uint256 nonce,\n        address[] calldata to,\n        bytes[] calldata data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n     ","contract":"Gateway","time":0},{"type":"external-function ","before":" sender signature\n   */\n    function delegateBatchWithGasPrice(\n        address account,\n        uint256 nonce,\n        address[] memory to,\n        bytes[] memory data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data,\n                tx.gasprice\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n     ","after":" sender signature\n   */\n    function delegateBatchWithGasPrice(\n        address account,\n        uint256 nonce,\n        address[] calldata to,\n        bytes[] calldata data,\n        bytes memory senderSignature\n    )\n    public\n    {\n        require(\n            nonce > accountNonce[account],\n            \"Gateway: nonce is lower than current account nonce\"\n        );\n\n        address sender = _hashPrimaryTypedData(\n            _hashTypedData(\n                account,\n                nonce,\n                to,\n                data,\n                tx.gasprice\n            )\n        ).recoverAddress(senderSignature);\n\n        accountNonce[account] = nonce;\n\n        _sendBatch(\n            account,\n            sender,\n            to,\n     ","contract":"Gateway","time":0},{"type":"external-function ","before":"erts on any error\n   */\n    function delegateBatches(\n        bytes[] memory batches,\n        bool revertOnFailure\n    )\n    public\n    {\n        require(\n            batches.length > 0,\n            \"Gateway: cannot delegate empty batches\"\n        );\n\n        bool anySucceeded;\n\n        for (uint256 i = 0; i < batches.length; i++) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool succeeded,) = address(this).call(batches[i]);\n\n            if (revertOnFailure) {\n                require(\n                    succeeded,\n                    \"Gateway: batch reverted\"\n                );\n            } else if (succeeded && !anySucceeded) {\n                anySucceeded = true;\n            }\n\n            emit BatchDelegated(\n                msg.sender,\n                batches[i],\n                succeeded\n            );\n        }\n\n        if (!anySucceeded) {\n            revert(\"Gateway: all batches","after":"erts on any error\n   */\n    function delegateBatches(\n        bytes[] calldata batches,\n        bool revertOnFailure\n    )\n    public\n    {\n        require(\n            batches.length > 0,\n            \"Gateway: cannot delegate empty batches\"\n        );\n\n        bool anySucceeded;\n\n        for (uint256 i = 0; i < batches.length; i++) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool succeeded,) = address(this).call(batches[i]);\n\n            if (revertOnFailure) {\n                require(\n                    succeeded,\n                    \"Gateway: batch reverted\"\n                );\n            } else if (succeeded && !anySucceeded) {\n                anySucceeded = true;\n            }\n\n            emit BatchDelegated(\n                msg.sender,\n                batches[i],\n                succeeded\n            );\n        }\n\n        if (!anySucceeded) {\n            revert(\"Gateway: all batches","contract":"Gateway","time":0},{"type":"external-function ","before":"   * @return hash\n   */\n    function hashDelegatedBatch(\n        DelegatedBatch memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data\n  ","after":"   * @return hash\n   */\n    function hashDelegatedBatch(\n        DelegatedBatch memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data\n  ","contract":"Gateway","time":0},{"type":"external-function ","before":"   * @return hash\n   */\n    function hashDelegatedBatchWithGasPrice(\n        DelegatedBatchWithGasPrice memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data,\n                delegatedBatch.gasPrice\n  ","after":"   * @return hash\n   */\n    function hashDelegatedBatchWithGasPrice(\n        DelegatedBatchWithGasPrice memory delegatedBatch\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                delegatedBatch.account,\n                delegatedBatch.nonce,\n                delegatedBatch.to,\n                delegatedBatch.data,\n                delegatedBatch.gasPrice\n  ","contract":"Gateway","time":0},{"type":"immutable-restrict-modification ","before":"unt address\n   */\n    addr","after":"unt address\n   */\n    addr","contract":"PaymentDepositAccount","time":0},{"type":"external-function ","before":"drawal struct\n   * @return hash\n   */\n    function hashDepositWithdrawal(\n        DepositWithdrawal memory depositWithdrawal\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                depositWithdrawal.owner,\n                depositWithdrawal.token,\n                depositWithdr","after":"drawal struct\n   * @return hash\n   */\n    function hashDepositWithdrawal(\n        DepositWithdrawal memory depositWithdrawal\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                depositWithdrawal.owner,\n                depositWithdrawal.token,\n                depositWithdr","contract":"PaymentRegistry","time":0},{"type":"external-function ","before":"Commit struct\n   * @return hash\n   */\n    function hashPaymentChannelCommit(\n        PaymentChannelCommit memory paymentChannelCommit\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                paymentChannelCommit.sender,\n                paymentChannelCommit.recipient,\n                paymentChannelCommit.token,\n                paymentChannelCommit.uid,\n                paymentChannelCommit.blockNumber,\n                paymentChannelCo","after":"Commit struct\n   * @return hash\n   */\n    function hashPaymentChannelCommit(\n        PaymentChannelCommit memory paymentChannelCommit\n    )\n    public\n    view\n    returns (bytes32)\n    {\n        return _hashPrimaryTypedData(\n            _hashTypedData(\n                paymentChannelCommit.sender,\n                paymentChannelCommit.recipient,\n                paymentChannelCommit.token,\n                paymentChannelCommit.uid,\n                paymentChannelCommit.blockNumber,\n                paymentChannelCo","contract":"PaymentRegistry","time":0},{"type":"immutable-restrict-modification ","before":"thLib for uint256;\n","after":"thLib for uint256;\n","contract":"WrappedWeiToken","time":0},{"type":"immutable-restrict-modification ","before":"string public name;\n ","after":"string public name;\n ","contract":"WrappedWeiToken","time":0},{"type":"constant-restrict-modification  ","before":"ring public symbol;\n  ","after":"ring public symbol;\n  ","contract":"WrappedWeiToken","time":0}]}
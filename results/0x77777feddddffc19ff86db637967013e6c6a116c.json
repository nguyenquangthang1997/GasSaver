{"time":119,"results":[{"type":"external-function ","before":"   function addToAllowedList(address[] memory target) public onlyGovernance {\n\n        for (uint256 i = 0; i < target.length; i++) {\n\n            allowedTransferee[target[i]] = true;\n\n            emit Allowed(target[i]);\n\n        }\n\n  ","after":"   function addToAllowedList(address[] calldata target) public onlyGovernance {\n\n        for (uint256 i = 0; i < target.length; i++) {\n\n            allowedTransferee[target[i]] = true;\n\n            emit Allowed(target[i]);\n\n        }\n\n  ","contract":"TORN","time":0},{"type":"external-function ","before":"   function removeFromAllowedList(address[] memory target) public onlyGovernance {\n\n        for (uint256 i = 0; i < target.length; i++) {\n\n            allowedTransferee[target[i]] = false;\n\n            emit Disallowed(target[i]);\n\n        }\n\n  ","after":"   function removeFromAllowedList(address[] calldata target) public onlyGovernance {\n\n        for (uint256 i = 0; i < target.length; i++) {\n\n            allowedTransferee[target[i]] = false;\n\n            emit Disallowed(target[i]);\n\n        }\n\n  ","contract":"TORN","time":0},{"type":"external-function ","before":"   function bulkResolve(bytes32[] memory domains) public view returns (address[] memory result) {\n\n        result = new address[](domains.length);\n\n        for (uint256 i = 0; i < domains.length; i++) {\n\n            result[i] = resolve(domains[i]);\n\n        }\n\n  ","after":"   function bulkResolve(bytes32[] calldata domains) public view returns (address[] memory result) {\n\n        result = new address[](domains.length);\n\n        for (uint256 i = 0; i < domains.length; i++) {\n\n            result[i] = resolve(domains[i]);\n\n        }\n\n  ","contract":"TORN","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"TORN","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"TORN","time":0}]}
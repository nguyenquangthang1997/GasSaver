{"time":109,"results":[{"type":"external-function ","before":"   function stake(address contractAddress, uint[] memory tokenIds) external incrementNonce {\n        StakedContract storage _contract = contracts[contractAddress];\n        require(_contract.active, \"token contract is not active\");\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            uint tokenId = tokenIds[i];\n\n            // Assign token to his owner\n            contractTokenIdToOwner[contractAddress][tokenId] = msg.sender;\n\n            // Transfer token to this smart contract\n            _contract.instance.safeTransferFrom(msg.sender, address(this), tokenId);\n\n            // Add this token to user staked tokens\n            addressToStakedTokensSet[contractAddress][msg.sender].add(tokenId);\n\n            // Save stake timestamp\n            contractTokenIdToStakedTimestamp[contractAddress][tokenId] = block.timestamp;\n\n            emit Stake(tokenId, contractAddress, msg.sender);\n        }\n  ","after":"   function stake(address contractAddress, uint[] calldata tokenIds) external incrementNonce {\n        StakedContract storage _contract = contracts[contractAddress];\n        require(_contract.active, \"token contract is not active\");\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            uint tokenId = tokenIds[i];\n\n            // Assign token to his owner\n            contractTokenIdToOwner[contractAddress][tokenId] = msg.sender;\n\n            // Transfer token to this smart contract\n            _contract.instance.safeTransferFrom(msg.sender, address(this), tokenId);\n\n            // Add this token to user staked tokens\n            addressToStakedTokensSet[contractAddress][msg.sender].add(tokenId);\n\n            // Save stake timestamp\n            contractTokenIdToStakedTimestamp[contractAddress][tokenId] = block.timestamp;\n\n            emit Stake(tokenId, contractAddress, msg.sender);\n        }\n  ","contract":"FeudalzStaking","time":0},{"type":"external-function ","before":"   function unstake(address contractAddress, uint[] memory tokenIds) external incrementNonce ifContractExists(contractAddress) {\n        StakedContract storage _contract = contracts[contractAddress];\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            uint tokenId = tokenIds[i];\n            require(addressToStakedTokensSet[contractAddress][msg.sender].contains(tokenId), \"token is not staked\");\n\n            // Remove owner of this token\n            delete contractTokenIdToOwner[contractAddress][tokenId];\n\n            // Transfer token to his owner\n            _contract.instance.safeTransferFrom(address(this), msg.sender, tokenId);\n\n            // Remove this token from user staked tokens\n            addressToStakedTokensSet[contractAddress][msg.sender].remove(tokenId);\n\n            // Remove stake timestamp\n            delete contractTokenIdToStakedTimestamp[contractAddress][tokenId];\n\n            emit Unstake(tokenId, contractAddress, msg.sender);\n        }\n  ","after":"   function unstake(address contractAddress, uint[] calldata tokenIds) external incrementNonce ifContractExists(contractAddress) {\n        StakedContract storage _contract = contracts[contractAddress];\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            uint tokenId = tokenIds[i];\n            require(addressToStakedTokensSet[contractAddress][msg.sender].contains(tokenId), \"token is not staked\");\n\n            // Remove owner of this token\n            delete contractTokenIdToOwner[contractAddress][tokenId];\n\n            // Transfer token to his owner\n            _contract.instance.safeTransferFrom(address(this), msg.sender, tokenId);\n\n            // Remove this token from user staked tokens\n            addressToStakedTokensSet[contractAddress][msg.sender].remove(tokenId);\n\n            // Remove stake timestamp\n            delete contractTokenIdToStakedTimestamp[contractAddress][tokenId];\n\n            emit Unstake(tokenId, contractAddress, msg.sender);\n        }\n  ","contract":"FeudalzStaking","time":0}]}
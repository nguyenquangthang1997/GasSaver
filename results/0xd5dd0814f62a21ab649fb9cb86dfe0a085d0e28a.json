{"time":151,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public immutable MAX_TOKENS;\nuint256 public immutable MAX_FOR_SALE;\nuint256 public immutable MAX_FOR_CHILL_SALE;\nuint256 public immutable OFFSET_START;\nstring public PROVENANCE;\nuint256 public SALE_END;\nuint256 public cupPrice = 0.025 ether;\nuint256 public cupChillPrice = 750 ether;\nuint public constant maxCupsPurchase = 20;\nbool public saleIsActive = false;\nstring public baseMetadataURI;\nmapping(uint256 => string) public backupURIs;\nbool public locked = false;\nuint256 public cupsPurchasedWithEth = 0;\nuint256 public cupsPurchasedWithChill = 0;\nmapping(uint256 => bool) public burntCups;\nNFTContract public immutable loopyDonuts;\nIChill public immutable chillToken;","after":"uint256 public immutable MAX_TOKENS;\nuint256 public immutable MAX_FOR_SALE;\nuint256 public immutable MAX_FOR_CHILL_SALE;\nuint256 public immutable OFFSET_START;\nstring public PROVENANCE;\nuint256 public SALE_END;\nuint256 public cupPrice = 0.025 ether;\nuint256 public cupChillPrice = 750 ether;\nuint public constant maxCupsPurchase = 20;\nstring public baseMetadataURI;\nmapping(uint256 => string) public backupURIs;\nuint256 public cupsPurchasedWithEth = 0;\nuint256 public cupsPurchasedWithChill = 0;\nmapping(uint256 => bool) public burntCups;\nNFTContract public immutable loopyDonuts;\nIChill public immutable chillToken;\nbool public saleIsActive = false;\nbool public locked = false;\n","contract":"LoopyCups","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner notLocked {\n        PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner notLocked {\n        PROVENANCE = provenanceHash;\n    }","contract":"LoopyCups","time":0},{"type":"external-function ","before":"function setMetadataBaseURI(string memory newURI) public onlyOwner notLocked {\n        baseMetadataURI = newURI;\n    }","after":"function setMetadataBaseURI(string calldata newURI) public onlyOwner notLocked {\n        baseMetadataURI = newURI;\n    }","contract":"LoopyCups","time":0},{"type":"external-function ","before":"function modifyBackupBaseURI(uint256 backupNumber, string memory newURI) external onlyOwner notLocked {\n        backupURIs[backupNumber] = newURI;\n    }","after":"function modifyBackupBaseURI(uint256 backupNumber, string calldata newURI) external onlyOwner notLocked {\n        backupURIs[backupNumber] = newURI;\n    }","contract":"LoopyCups","time":0},{"type":"external-function ","before":"function addBackupBaseURI(uint256 backupNumber, string memory newURI) external onlyOwner {\n        require(bytes(backupURIs[backupNumber]).length == 0, \"LoopyCups: URI already exists for backupNumber\");\n        backupURIs[backupNumber] = newURI;\n    }","after":"function addBackupBaseURI(uint256 backupNumber, string calldata newURI) external onlyOwner {\n        require(bytes(backupURIs[backupNumber]).length == 0, \"LoopyCups: URI already exists for backupNumber\");\n        backupURIs[backupNumber] = newURI;\n    }","contract":"LoopyCups","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"LoopyCups","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"LoopyCups","time":1}]}
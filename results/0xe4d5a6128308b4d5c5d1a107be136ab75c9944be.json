{"time":1039,"results":[{"type":"constant-restrict-modification  ","before":"bytes32 public immutable PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","after":"bytes32 public immutable constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","contract":"Pool","time":1},{"type":"immutable-restrict-modification ","before":"string                                            public override name = \"???\";","after":"string                                            public override immutable name = \"???\";","contract":"Pool","time":1},{"type":"immutable-restrict-modification ","before":"string                                            public override symbol = \"???\";","after":"string                                            public override immutable symbol = \"???\";","contract":"Pool","time":1},{"type":"immutable-restrict-modification ","before":"uint8                                             public override decimals = 18;","after":"uint8                                             public override immutable decimals = 18;","contract":"Pool","time":1},{"type":"external-function ","before":"function grantRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","after":"function grantRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","contract":"PoolFactory","time":0},{"type":"external-function ","before":"function revokeRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","after":"function revokeRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","contract":"PoolFactory","time":0}]}
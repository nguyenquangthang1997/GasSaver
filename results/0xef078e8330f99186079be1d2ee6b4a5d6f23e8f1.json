{"time":78,"results":[{"type":"external-function ","before":"function initialize(\n        address operator,\n        bytes32 proofHash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // submit proofHash\n        if (proofHash != bytes32(0)) {\n            ProofHashes._submitHash(proofHash);\n        }\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, proofHash, metadata);\n    }","after":"function initialize(\n        address operator,\n        bytes32 proofHash,\n        bytes calldata metadata\n    ) public initializeTemplate() {\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // submit proofHash\n        if (proofHash != bytes32(0)) {\n            ProofHashes._submitHash(proofHash);\n        }\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, proofHash, metadata);\n    }","contract":"Feed","time":0},{"type":"external-function ","before":"function setMetadata(bytes memory metadata) public {\n        // only operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isOperator(msg.sender), \"only operator or creator\");\n\n        // set metadata\n        EventMetadata._setMetadata(metadata);\n    }","after":"function setMetadata(bytes calldata metadata) public {\n        // only operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isOperator(msg.sender), \"only operator or creator\");\n\n        // set metadata\n        EventMetadata._setMetadata(metadata);\n    }","contract":"Feed","time":0},{"type":"external-function ","before":"function create(bytes memory callData) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(msg.sender, getTemplate(), callData);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","after":"function create(bytes calldata callData) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(msg.sender, getTemplate(), callData);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","contract":"Feed_Factory","time":0},{"type":"external-function ","before":"function createSalty(bytes memory callData, bytes32 salt) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawnSalty(msg.sender, getTemplate(), callData, salt);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","after":"function createSalty(bytes calldata callData, bytes32 salt) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawnSalty(msg.sender, getTemplate(), callData, salt);\n\n        _createHelper(instance, callData);\n\n        return instance;\n    }","contract":"Feed_Factory","time":0},{"type":"external-function ","before":"function getSaltyInstance(\n        address creator,\n        bytes memory callData,\n        bytes32 salt\n    ) public view returns (address instance, bool validity) {\n        return Spawner._getSaltyTarget(creator, getTemplate(), callData, salt);\n    }","after":"function getSaltyInstance(\n        address creator,\n        bytes calldata callData,\n        bytes32 salt\n    ) public view returns (address instance, bool validity) {\n        return Spawner._getSaltyTarget(creator, getTemplate(), callData, salt);\n    }","contract":"Feed_Factory","time":0},{"type":"external-function ","before":"function getNextNonceInstance(\n        address creator,\n        bytes memory callData\n    ) public view returns (address target) {\n        return Spawner._getNextNonceTarget(creator, getTemplate(), callData);\n    }","after":"function getNextNonceInstance(\n        address creator,\n        bytes calldata callData\n    ) public view returns (address target) {\n        return Spawner._getNextNonceTarget(creator, getTemplate(), callData);\n    }","contract":"Feed_Factory","time":0}]}
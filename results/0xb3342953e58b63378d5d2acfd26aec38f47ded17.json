{"time":283,"results":[{"type":"state-data-arrangement ","before":"\nuint64 public constant BUCKET_STEP = 86400;\nmapping(uint64 => Bucket) public checkPoints;\nuint96 public head;\nuint96 public tail;\nmapping(uint96 => ExpireMetadata) public infos;\nuint256[50] private __gap;","after":"mapping(uint64 => Bucket) public checkPoints;\nmapping(uint96 => ExpireMetadata) public infos;\nuint256[50] private __gap;\nuint96 public head;\nuint96 public tail;\nuint64 public constant BUCKET_STEP = 86400;\n","contract":"ExpireTracker","time":0},{"type":"state-data-arrangement ","before":"\nbytes4 public constant ETH_SIG = bytes4(0x45544800);\nbool ufOn;\nuint256 withdrawalDelay;\nmapping(address => bool) public allowedProtocol;\nmapping(address => uint64) public override protocolId;\nmapping(uint64 => address) public override protocolAddress;\nuint64 protocolCount;\nmapping(address => uint256) public override totalStakedAmount;\nmapping(uint256 => address) public nftOwners;\nmapping(uint256 => uint256) public pendingWithdrawals;\nmapping(uint256 => bool) public submitted;","after":"uint256 withdrawalDelay;\nmapping(address => bool) public allowedProtocol;\nmapping(address => uint64) public override protocolId;\nmapping(uint64 => address) public override protocolAddress;\nmapping(address => uint256) public override totalStakedAmount;\nmapping(uint256 => address) public nftOwners;\nmapping(uint256 => uint256) public pendingWithdrawals;\nmapping(uint256 => bool) public submitted;\nuint64 protocolCount;\nbytes4 public constant ETH_SIG = bytes4(0x45544800);\nbool ufOn;\n","contract":"StakeManager","time":0},{"type":"external-function ","before":"function batchStakeNft(uint256[] memory _nftIds)\n\n    public\n\n    doKeep\n\n    {\n\n        // Loop through all submitted NFT IDs and stake them.\n\n        for (uint256 i = 0; i < _nftIds.length; i++) {\n\n            _stake(_nftIds[i], msg.sender);\n\n        }\n\n    }","after":"function batchStakeNft(uint256[] calldata _nftIds)\n\n    public\n\n    doKeep\n\n    {\n\n        // Loop through all submitted NFT IDs and stake them.\n\n        for (uint256 i = 0; i < _nftIds.length; i++) {\n\n            _stake(_nftIds[i], msg.sender);\n\n        }\n\n    }","contract":"StakeManager","time":0}]}
{"time":178,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nmapping(address => mapping(uint256 => uint256)) internal balances;\nmapping(address => mapping(address => bool)) internal operators;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;","after":"mapping(address => mapping(uint256 => uint256)) internal balances;\nmapping(address => mapping(address => bool)) internal operators;\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n","contract":"ERC1155","time":0},{"type":"external-function ","before":"function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyWhitelistAdmin {\n        _setBaseMetadataURI(_newBaseMetadataURI);\n    }","after":"function setBaseMetadataURI(string calldata _newBaseMetadataURI) public onlyWhitelistAdmin {\n        _setBaseMetadataURI(_newBaseMetadataURI);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function mint(\n        address _to,\n        uint256 _id,\n        uint256 _quantity,\n        bytes memory _data\n    ) public onlyMinter {\n        uint256 tokenId = _id;\n        require(tokenSupply[tokenId] < tokenMaxSupply[tokenId], \"Max supply reached\");\n        _mint(_to, _id, _quantity, _data);\n        tokenSupply[_id] = tokenSupply[_id].add(_quantity);\n    }","after":"function mint(\n        address _to,\n        uint256 _id,\n        uint256 _quantity,\n        bytes calldata _data\n    ) public onlyMinter {\n        uint256 tokenId = _id;\n        require(tokenSupply[tokenId] < tokenMaxSupply[tokenId], \"Max supply reached\");\n        _mint(_to, _id, _quantity, _data);\n        tokenSupply[_id] = tokenSupply[_id].add(_quantity);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\n    public\n    {\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0), \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\n\n        _safeTransferFrom(_from, _to, _id, _amount);\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\n    }","after":"function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data)\n    public\n    {\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0), \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\n\n        _safeTransferFrom(_from, _to, _id, _amount);\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\n    public\n    {\n        // Requirements\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\n\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n    }","after":"function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data)\n    public\n    {\n        // Requirements\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\n\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\n    public view returns (uint256[] memory)\n    {\n        require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\n\n        // Variables\n        uint256[] memory batchBalances = new uint256[](_owners.length);\n\n        // Iterate over each owner and token ID\n        for (uint256 i = 0; i < _owners.length; i++) {\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\n    public view returns (uint256[] memory)\n    {\n        require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\n\n        // Variables\n        uint256[] memory batchBalances = new uint256[](_owners.length);\n\n        // Iterate over each owner and token ID\n        for (uint256 i = 0; i < _owners.length; i++) {\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\n        }\n\n        return batchBalances;\n    }","contract":"ERC1155Tradable","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"ERC1155Tradable","time":1},{"type":"immutable-restrict-modification ","before":"string public name;","after":"string public immutable name;","contract":"ERC1155Tradable","time":1},{"type":"immutable-restrict-modification ","before":"string public symbol;","after":"string public immutable symbol;","contract":"ERC1155Tradable","time":1}]}
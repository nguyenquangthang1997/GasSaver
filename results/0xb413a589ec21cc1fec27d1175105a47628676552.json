{"time":204,"results":[{"type":"external-function ","before":"function mint(\n\n        address account,\n\n        uint256 amount,\n\n        bytes memory userData,\n\n        bytes memory operatorData\n\n    ) public {\n\n        require(hasRole(MINTER_ROLE, msg.sender), \"HoprToken: caller does not have minter role\");\n\n        _mint(account, amount, userData, operatorData);\n\n    }","after":"function mint(\n\n        address account,\n\n        uint256 amount,\n\n        bytes calldata userData,\n\n        bytes calldata operatorData\n\n    ) public {\n\n        require(hasRole(MINTER_ROLE, msg.sender), \"HoprToken: caller does not have minter role\");\n\n        _mint(account, amount, userData, operatorData);\n\n    }","contract":"HoprToken","time":0},{"type":"external-function ","before":"function send(address recipient, uint256 amount, bytes memory data) public virtual override {\n\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n\n    }","after":"function send(address recipient, uint256 amount, bytes calldata data) public virtual override {\n\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n\n    }","contract":"HoprToken","time":0},{"type":"external-function ","before":"function burn(uint256 amount, bytes memory data) public virtual override {\n\n        _burn(_msgSender(), amount, data, \"\");\n\n    }","after":"function burn(uint256 amount, bytes calldata data) public virtual override {\n\n        _burn(_msgSender(), amount, data, \"\");\n\n    }","contract":"HoprToken","time":0},{"type":"external-function ","before":"function operatorSend(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount,\n\n        bytes memory data,\n\n        bytes memory operatorData\n\n    )\n\n    public\n\n    virtual\n\n    override\n\n    {\n\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n\n        _send(sender, recipient, amount, data, operatorData, true);\n\n    }","after":"function operatorSend(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount,\n\n        bytes calldata data,\n\n        bytes calldata operatorData\n\n    )\n\n    public\n\n    virtual\n\n    override\n\n    {\n\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n\n        _send(sender, recipient, amount, data, operatorData, true);\n\n    }","contract":"HoprToken","time":0},{"type":"external-function ","before":"function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\n\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n\n        _burn(account, amount, data, operatorData);\n\n    }","after":"function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) public virtual override {\n\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n\n        _burn(account, amount, data, operatorData);\n\n    }","contract":"HoprToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"HoprToken","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"HoprToken","time":1},{"type":"immutable-restrict-modification ","before":"uint128 public maxMintAmount;","after":"uint128 public immutable maxMintAmount;","contract":"HoprDistributor","time":1}]}
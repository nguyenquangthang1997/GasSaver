{"time":538,"results":[{"type":"external-function ","before":"function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes memory data)\nexternal override\nbeforeMaturity\nreturns(bool)\n{\nrequire(token == address(this), \"Unsupported currency\");\n_mint(address(receiver), amount);\nrequire(receiver.onFlashLoan(msg.sender, token, amount, 0, data) == FLASH_LOAN_RETURN, \"Non-compliant borrower\");\n_burn(address(receiver), amount);\nreturn true;\n}","after":"function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes calldata data)\nexternal override\nbeforeMaturity\nreturns(bool)\n{\nrequire(token == address(this), \"Unsupported currency\");\n_mint(address(receiver), amount);\nrequire(receiver.onFlashLoan(msg.sender, token, amount, 0, data) == FLASH_LOAN_RETURN, \"Non-compliant borrower\");\n_burn(address(receiver), amount);\nreturn true;\n}","contract":"FYToken","time":0},{"type":"external-function ","before":"function grantRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","after":"function grantRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","contract":"FYToken","time":0},{"type":"external-function ","before":"function revokeRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","after":"function revokeRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","contract":"FYToken","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public immutable PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","after":"bytes32 public immutable constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","contract":"FYToken","time":0},{"type":"immutable-restrict-modification ","before":"string                                            public override name = \"???\";","after":"string                                            public override immutable name = \"???\";","contract":"FYToken","time":0},{"type":"immutable-restrict-modification ","before":"string                                            public override symbol = \"???\";","after":"string                                            public override immutable symbol = \"???\";","contract":"FYToken","time":0},{"type":"immutable-restrict-modification ","before":"uint8                                             public override decimals = 18;","after":"uint8                                             public override immutable decimals = 18;","contract":"FYToken","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 CHI = \"CHI\";","after":"bytes32 constant CHI = \"CHI\";","contract":"FYToken","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 RATE = \"RATE\";","after":"bytes32 constant RATE = \"RATE\";","contract":"FYToken","time":0},{"type":"constant-restrict-modification  ","before":"bytes6 ETH = \"00\";","after":"bytes6 constant ETH = \"00\";","contract":"FYToken","time":0},{"type":"external-function ","before":"function grantRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","after":"function grantRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _grantRole(roles[i], account);\n        }\n    }","contract":"FYTokenFactory","time":0},{"type":"external-function ","before":"function revokeRoles(bytes4[] memory roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","after":"function revokeRoles(bytes4[] calldata roles, address account) external virtual {\n        for (uint256 i = 0; i < roles.length; i++) {\n            require(_hasRole(_getRoleAdmin(roles[i]), msg.sender), \"Only admin\");\n            _revokeRole(roles[i], account);\n        }\n    }","contract":"FYTokenFactory","time":0}]}
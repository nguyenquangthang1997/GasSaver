{"time":172,"results":[{"type":"state-data-arrangement ","before":"\nuint8 private flag;\nuint256 public minedNestAmount;\naddress override public governance;\naddress public addrOfNestBurning = address(0x1);\naddress public C_NestDAO;\naddress public C_NestMining;\nERC20   public C_NestToken;\naddress public C_NTokenController;\naddress public C_NNToken;\naddress public C_NNRewardPool;\naddress public C_NestStaking;\naddress public C_NestQuery;\nmapping(address => uint256) _eth_ledger;\nmapping(address => mapping(address => uint256)) _token_ledger;\nmapping(address => address) _token_ntoken_mapping;","after":"uint256 public minedNestAmount;\nERC20   public C_NestToken;\nmapping(address => uint256) _eth_ledger;\nmapping(address => mapping(address => uint256)) _token_ledger;\nmapping(address => address) _token_ntoken_mapping;\naddress override public governance;\naddress public addrOfNestBurning = address(0x1);\naddress public C_NestDAO;\naddress public C_NestMining;\naddress public C_NTokenController;\naddress public C_NNToken;\naddress public C_NNRewardPool;\naddress public C_NestStaking;\naddress public C_NestQuery;\nuint8 private flag;\n","contract":"NestPool","time":1},{"type":"external-function ","before":"function assetsList(uint256 len, address[] memory tokenList)\npublic view returns (uint256[] memory)\n{\n// len < = length(tokenList) + 1\nrequire(len == tokenList.length + 1, \"Nest: Pool: !assetsList\");\nuint256[] memory list = new uint256[](len);\nlist[0] = _eth_ledger[address(msg.sender)];\nfor (uint i = 0; i < len - 1; i++) {\naddress _token = tokenList[i];\nlist[i + 1] = _token_ledger[_token][address(msg.sender)];\n}\nreturn list;\n}","after":"function assetsList(uint256 len, address[] calldata tokenList)\npublic view returns (uint256[] memory)\n{\n// len < = length(tokenList) + 1\nrequire(len == tokenList.length + 1, \"Nest: Pool: !assetsList\");\nuint256[] memory list = new uint256[](len);\nlist[0] = _eth_ledger[address(msg.sender)];\nfor (uint i = 0; i < len - 1; i++) {\naddress _token = tokenList[i];\nlist[i + 1] = _token_ledger[_token][address(msg.sender)];\n}\nreturn list;\n}","contract":"NestPool","time":0},{"type":"constant-restrict-modification  ","before":"uint8 private flag;","after":"uint8 private constant flag;","contract":"NestPool","time":0},{"type":"constant-restrict-modification  ","before":"address public addrOfNestBurning = address(0x1);","after":"address public constant addrOfNestBurning = address(0x1);","contract":"NestPool","time":0}]}
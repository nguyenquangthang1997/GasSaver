{"time":1673,"results":[{"type":"state-data-arrangement ","before":"\n   string public na\n   uint8 public decima\n   string public symb\n   string public version = \"MMT_0.\n   MiniMeToken public parentTok\n   uint public parentSnapShotBlo\n   uint public creationBlo\n   mapping(address => Checkpoint[]) balanc\n   mapping(address => mapping(address => uint256)) allow\n   Checkpoint[] totalSupplyHisto\n   bool public transfersEnabl\n   MiniMeTokenFactory public tokenFacto","after":"   string public na\n   string public symb\n   string public version = \"MMT_0.\n   MiniMeToken public parentTok\n   uint public parentSnapShotBlo\n   uint public creationBlo\n   mapping(address => Checkpoint[]) balanc\n   mapping(address => mapping(address => uint256)) allow\n   Checkpoint[] totalSupplyHisto\n   MiniMeTokenFactory public tokenFacto\n   uint8 public decima\n   bool public transfersEnabl\n","contract":"MiniMeToken","time":0},{"type":"state-data-arrangement ","before":"\n   uint256 public constant COMMISSION_RATE = 15 * (10 ** 1\n   uint256 public constant ASSET_FEE_RATE = 1 * (10 ** 1\n   uint256 public constant NEXT_PHASE_REWARD = 1 * (10 ** 1\n   uint256 public constant COLLATERAL_RATIO_MODIFIER = 75 * (10 ** 1\n   uint256 public constant MIN_RISK_TIME = 3 da\n   uint256 public constant INACTIVE_THRESHOLD =\n   uint256 public constant ROI_PUNISH_THRESHOLD = 1 * (10 ** 1\n   uint256 public constant ROI_BURN_THRESHOLD = 25 * (10 ** 1\n   uint256 public constant ROI_PUNISH_SLOPE =\n   uint256 public constant ROI_PUNISH_NEG_BIAS = 5 * (10 ** 1\n   uint256 public constant PEAK_COMMISSION_RATE = 20 * (10 ** 1\n   bool public hasInitializedTokenListin\n   bool public isInitializ\n   address public controlTokenAd\n   address public shareTokenAd\n   address payable public proxyAd\n   address public compoundFactoryAd\n   address public peakdefiLog\n   address public peakdefiLogi\n   address public peakdefiLogi\n   address payable public devFundingAccou\n   address payable public previousVersi\n   uint256 public cycleNumb\n   uint256 public totalFundsInUS\n   uint256 public totalFundsAtManagePhaseSta\n   uint256 public startTimeOfCyclePha\n   uint256 public devFundingRa\n   uint256 public totalCommissionLe\n   uint256[2] public phaseLengt\n   uint256 public managersOnboardedThisCyc\n   uint256 public newManagerRepTok\n   uint256 public maxNewManagersPerCyc\n   uint256 public reptokenPri\n   mapping(address => uint256) internal _lastCommissionRedempti\n   mapping(address => mapping(uint256 => bool))\n    internal _hasRedeemedCommissionForCyc\n   mapping(address => mapping(uint256 => uint256)) internal _riskTakenInCyc\n   mapping(address => uint256) internal _baseRiskStakeFallba\n   mapping(address => Investment[]) public userInvestmen\n   mapping(address => address payable[]) public userCompoundOrde\n   mapping(uint256 => uint256) internal _totalCommissionOfCyc\n   mapping(uint256 => uint256) internal _managePhaseEndBlo\n   mapping(address => uint256) internal _lastActiveCyc\n   mapping(address => bool) public isKyberTok\n   mapping(address => bool) public isCompoundTok\n   CyclePhase public cyclePha\n   bool public hasFinalizedNextVersi\n   address payable public nextVersi\n   IMiniMeToken internal cTok\n   IMiniMeToken internal sTok\n   PeakDeFiProxyInterface internal pro\n   uint256 public peakReferralTotalCommissionLe\n   uint256 public peakManagerStakeRequir\n   mapping(uint256 => uint256) internal _peakReferralTotalCommissionOfCyc\n   mapping(address => uint256) internal _peakReferralLastCommissionRedempti\n   mapping(address => mapping(uint256 => bool))\n    internal _peakReferralHasRedeemedCommissionForCyc\n   IMiniMeToken public peakReferralTok\n   PeakReward public peakRewa\n   PeakStaking public peakStaki\n   bool public isPermission\n   mapping(address => mapping(uint256 => bool)) public hasUsedSa","after":"   uint256 public constant COMMISSION_RATE = 15 * (10 ** 1\n   uint256 public constant ASSET_FEE_RATE = 1 * (10 ** 1\n   uint256 public constant NEXT_PHASE_REWARD = 1 * (10 ** 1\n   uint256 public constant COLLATERAL_RATIO_MODIFIER = 75 * (10 ** 1\n   uint256 public constant MIN_RISK_TIME = 3 da\n   uint256 public constant INACTIVE_THRESHOLD =\n   uint256 public constant ROI_PUNISH_THRESHOLD = 1 * (10 ** 1\n   uint256 public constant ROI_BURN_THRESHOLD = 25 * (10 ** 1\n   uint256 public constant ROI_PUNISH_SLOPE =\n   uint256 public constant ROI_PUNISH_NEG_BIAS = 5 * (10 ** 1\n   uint256 public constant PEAK_COMMISSION_RATE = 20 * (10 ** 1\n   uint256 public cycleNumb\n   uint256 public totalFundsInUS\n   uint256 public totalFundsAtManagePhaseSta\n   uint256 public startTimeOfCyclePha\n   uint256 public devFundingRa\n   uint256 public totalCommissionLe\n   uint256[2] public phaseLengt\n   uint256 public managersOnboardedThisCyc\n   uint256 public newManagerRepTok\n   uint256 public maxNewManagersPerCyc\n   uint256 public reptokenPri\n   mapping(address => uint256) internal _lastCommissionRedempti\n   mapping(address => mapping(uint256 => bool))\n    internal _hasRedeemedCommissionForCyc\n   mapping(address => mapping(uint256 => uint256)) internal _riskTakenInCyc\n   mapping(address => uint256) internal _baseRiskStakeFallba\n   mapping(address => Investment[]) public userInvestmen\n   mapping(address => address payable[]) public userCompoundOrde\n   mapping(uint256 => uint256) internal _totalCommissionOfCyc\n   mapping(uint256 => uint256) internal _managePhaseEndBlo\n   mapping(address => uint256) internal _lastActiveCyc\n   mapping(address => bool) public isKyberTok\n   mapping(address => bool) public isCompoundTok\n   CyclePhase public cyclePha\n   IMiniMeToken internal cTok\n   IMiniMeToken internal sTok\n   PeakDeFiProxyInterface internal pro\n   uint256 public peakReferralTotalCommissionLe\n   uint256 public peakManagerStakeRequir\n   mapping(uint256 => uint256) internal _peakReferralTotalCommissionOfCyc\n   mapping(address => uint256) internal _peakReferralLastCommissionRedempti\n   mapping(address => mapping(uint256 => bool))\n    internal _peakReferralHasRedeemedCommissionForCyc\n   IMiniMeToken public peakReferralTok\n   PeakReward public peakRewa\n   PeakStaking public peakStaki\n   mapping(address => mapping(uint256 => bool)) public hasUsedSa\n   address public controlTokenAd\n   address public shareTokenAd\n   address payable public proxyAd\n   address public compoundFactoryAd\n   address public peakdefiLog\n   address public peakdefiLogi\n   address public peakdefiLogi\n   address payable public devFundingAccou\n   address payable public previousVersi\n   address payable public nextVersi\n   bool public hasInitializedTokenListin\n   bool public isInitializ\n   bool public hasFinalizedNextVersi\n   bool public isPermission\n","contract":"PeakDeFiStorage","time":14},{"type":"state-data-arrangement ","before":"\n   uint256 public constant PEAK_MINT_CAP = 5 * 10 ** \n   uint256 internal constant COMMISSION_RATE = 20 * (10 ** 1\n   uint256 internal constant PEAK_PRECISION = 10 **\n   uint256 internal constant USDC_PRECISION = 10 **\n   uint8 internal constant COMMISSION_LEVELS =\n   mapping(address => address) public referrer\n   mapping(address => bool) public isUs\n   mapping(address => uint256) public careerVal\n   mapping(address => uint256) public rank\n   mapping(uint256 => mapping(uint256 => uint256)) public rankRewa\n   mapping(address => mapping(uint256 => uint256)) public downlineRan\n   uint256[] public commissionPercentag\n   uint256[] public commissionStakeRequiremen\n   uint256 public mintedPeakToke\n   address public marketPeakWall\n   PeakStaking public peakStaki\n   PeakToken public peakTok\n   address public stableco\n   IUniswapOracle public orac","after":"   uint256 public constant PEAK_MINT_CAP = 5 * 10 ** \n   uint256 internal constant COMMISSION_RATE = 20 * (10 ** 1\n   uint256 internal constant PEAK_PRECISION = 10 **\n   uint256 internal constant USDC_PRECISION = 10 **\n   mapping(address => address) public referrer\n   mapping(address => bool) public isUs\n   mapping(address => uint256) public careerVal\n   mapping(address => uint256) public rank\n   mapping(uint256 => mapping(uint256 => uint256)) public rankRewa\n   mapping(address => mapping(uint256 => uint256)) public downlineRan\n   uint256[] public commissionPercentag\n   uint256[] public commissionStakeRequiremen\n   uint256 public mintedPeakToke\n   PeakStaking public peakStaki\n   PeakToken public peakTok\n   IUniswapOracle public orac\n   address public marketPeakWall\n   address public stableco\n   uint8 internal constant COMMISSION_LEVELS =\n","contract":"PeakReward","time":1}]}
{"time":215,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;","after":"mapping(address => EnumerableSet.UintSet) private _holderTokens;\nEnumerableMap.UintToAddressMap private _tokenOwners;\nmapping(uint256 => address) private _tokenApprovals;\nmapping(address => mapping(address => bool)) private _operatorApprovals;\nstring private _name;\nstring private _symbol;\nmapping(uint256 => string) private _tokenURIs;\nstring private _baseURI;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\nbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\nbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n","contract":"ERC721","time":0},{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n            !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n            (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":2704,"column":16},"end":{"line":2705,"column":42}},"contract":"SHIBOSHIS","time":0},{"type":"state-data-arrangement ","before":"\nIERC20Burnable public immutable LEASH;\nIERC20Burnable public immutable SHIB;\nMyDataConsumerForLeash public immutable LeashPrice;\nMyDataConsumerForShib public immutable ShibPrice;\nstring public SHIBOSHIS_PROVENANCE = \"\";\nuint256 public constant SALE_START_TIMESTAMP = 1634247000;\nuint256 public constant ALLOW_ETH_TIMESTAMP = SALE_START_TIMESTAMP + 86400;\nuint256 public constant MAX_NFT_SUPPLY = 10000;\nuint256 public CAPPED_NFT_LIMIT_PER_USER = 10;\nuint256 public NAME_CHANGE_PRICE;\nuint256 public LEASH_PRICE;\nuint256 public startingIndexBlock;\nuint256 public startingIndex;\naddress public moderator;\nuint256 private tier1Leash = 10;\nuint256 private tier2Leash = 20;\nuint256 private tier3Leash = 30;\nuint256 private tier1ETH = 100000000000000000;\nuint256 private tier2ETH = 200000000000000000;\nuint256 private tier3ETH = 300000000000000000;\nbool public pausedShibOracle = false;\nbool public pausedLeashOracle = false;\nmapping(uint256 => string) private _tokenName;\nmapping(string => bool) private _nameReserved;","after":"IERC20Burnable public immutable LEASH;\nIERC20Burnable public immutable SHIB;\nMyDataConsumerForLeash public immutable LeashPrice;\nMyDataConsumerForShib public immutable ShibPrice;\nstring public SHIBOSHIS_PROVENANCE = \"\";\nuint256 public constant SALE_START_TIMESTAMP = 1634247000;\nuint256 public constant ALLOW_ETH_TIMESTAMP = SALE_START_TIMESTAMP + 86400;\nuint256 public constant MAX_NFT_SUPPLY = 10000;\nuint256 public CAPPED_NFT_LIMIT_PER_USER = 10;\nuint256 public NAME_CHANGE_PRICE;\nuint256 public LEASH_PRICE;\nuint256 public startingIndexBlock;\nuint256 public startingIndex;\nuint256 private tier1Leash = 10;\nuint256 private tier2Leash = 20;\nuint256 private tier3Leash = 30;\nuint256 private tier1ETH = 100000000000000000;\nuint256 private tier2ETH = 200000000000000000;\nuint256 private tier3ETH = 300000000000000000;\nmapping(uint256 => string) private _tokenName;\nmapping(string => bool) private _nameReserved;\naddress public moderator;\nbool public pausedShibOracle = false;\nbool public pausedLeashOracle = false;\n","contract":"SHIBOSHIS","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) external {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n        SHIB.transferFrom(msg.sender, address(this), getNameChangePrice());\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        SHIB.burn(getNameChangePrice());\n        emit NameChange(tokenId, newName);\n    }","after":"function changeName(uint256 tokenId, string calldata newName) external {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n        SHIB.transferFrom(msg.sender, address(this), getNameChangePrice());\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        SHIB.burn(getNameChangePrice());\n        emit NameChange(tokenId, newName);\n    }","contract":"SHIBOSHIS","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        SHIBOSHIS_PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        SHIBOSHIS_PROVENANCE = provenanceHash;\n    }","contract":"SHIBOSHIS","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyModerator {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyModerator {\n        _setBaseURI(baseURI);\n    }","contract":"SHIBOSHIS","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SHIBOSHIS","time":0},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SHIBOSHIS","time":0}]}
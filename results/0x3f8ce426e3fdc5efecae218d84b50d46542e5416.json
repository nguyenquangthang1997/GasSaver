{"time":379,"results":[{"type":"struct-data-arrangement ","before":"\nbool initialized\nuint256 cumulative\nuint256 pegCumulative\nuint32 timestamp\nuint32 pegTimestamp","after":"uint256 cumulative\nuint256 pegCumulative\nuint32 timestamp\nuint32 pegTimestamp\nbool initialized\n","contract":"Storage","time":0},{"type":"state-data-arrangement ","before":"\nuint256 private constant CHAIN_ID = 1;\nuint256 private constant CURRENT_SEASON_PERIOD = 3600;\nuint256 private constant HARVESET_PERCENTAGE = 5e17;\nuint256 private constant POD_RATE_LOWER_BOUND = 5e16;\nuint256 private constant OPTIMAL_POD_RATE = 15e16;\nuint256 private constant POD_RATE_UPPER_BOUND = 25e16;\nuint256 private constant DELTA_POD_DEMAND_LOWER_BOUND = 95e16;\nuint256 private constant DELTA_POD_DEMAND_UPPER_BOUND = 105e16;\nuint256 private constant STEADY_SOW_TIME = 60;\nuint256 private constant RAIN_TIME = 24;\nuint32 private constant GOVERNANCE_PERIOD = 168;\nuint32 private constant GOVERNANCE_EMERGENCY_PERIOD = 86400;\nuint256 private constant GOVERNANCE_PASS_THRESHOLD = 5e17;\nuint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR = 2;\nuint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR = 3;\nuint32 private constant GOVERNANCE_EXPIRATION = 24;\nuint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 1e15;\nuint256 private constant BASE_COMMIT_INCENTIVE = 1e8;\nuint256 private constant MAX_PROPOSITIONS = 5;\nuint256 private constant BASE_ADVANCE_INCENTIVE = 1e8;\nuint32 private constant WITHDRAW_TIME = 25;\nuint256 private constant SEEDS_PER_BEAN = 2;\nuint256 private constant SEEDS_PER_LP_BEAN = 4;\nuint256 private constant STALK_PER_BEAN = 10000;\nuint256 private constant ROOTS_BASE = 1e12;\nuint256 private constant MAX_SOIL_DENOMINATOR = 4;\nuint256 private constant COMPLEX_WEATHER_DENOMINATOR = 1000;","after":"uint256 private constant CHAIN_ID = 1;\nuint256 private constant CURRENT_SEASON_PERIOD = 3600;\nuint256 private constant HARVESET_PERCENTAGE = 5e17;\nuint256 private constant POD_RATE_LOWER_BOUND = 5e16;\nuint256 private constant OPTIMAL_POD_RATE = 15e16;\nuint256 private constant POD_RATE_UPPER_BOUND = 25e16;\nuint256 private constant DELTA_POD_DEMAND_LOWER_BOUND = 95e16;\nuint256 private constant DELTA_POD_DEMAND_UPPER_BOUND = 105e16;\nuint256 private constant STEADY_SOW_TIME = 60;\nuint256 private constant RAIN_TIME = 24;\nuint256 private constant GOVERNANCE_PASS_THRESHOLD = 5e17;\nuint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR = 2;\nuint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR = 3;\nuint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 1e15;\nuint256 private constant BASE_COMMIT_INCENTIVE = 1e8;\nuint256 private constant MAX_PROPOSITIONS = 5;\nuint256 private constant BASE_ADVANCE_INCENTIVE = 1e8;\nuint256 private constant SEEDS_PER_BEAN = 2;\nuint256 private constant SEEDS_PER_LP_BEAN = 4;\nuint256 private constant STALK_PER_BEAN = 10000;\nuint256 private constant ROOTS_BASE = 1e12;\nuint256 private constant MAX_SOIL_DENOMINATOR = 4;\nuint256 private constant COMPLEX_WEATHER_DENOMINATOR = 1000;\nuint32 private constant GOVERNANCE_PERIOD = 168;\nuint32 private constant GOVERNANCE_EMERGENCY_PERIOD = 86400;\nuint32 private constant GOVERNANCE_EXPIRATION = 24;\nuint32 private constant WITHDRAW_TIME = 25;\n","contract":"C","time":1},{"type":"external-function ","before":"function convertDepositedBeans(\n        uint256 beans,\n        uint256 minLP,\n        uint32[] memory crates,\n        uint256[] memory amounts\n    )\n    external\n    {\n        LibInternal.updateSilo(msg.sender);\n        (uint256 lp, uint256 beansConverted) = LibConvert.sellToPegAndAddLiquidity(beans, minLP);\n        (uint256 beansRemoved, uint256 stalkRemoved) = _withdrawBeansForConvert(crates, amounts, beansConverted);\n        require(beansRemoved == beansConverted, \"Silo: Wrong Beans removed.\");\n        uint32 _s = uint32(stalkRemoved.div(beansConverted.mul(C.getSeedsPerLPBean())));\n        _s = getDepositSeason(_s);\n\n        _depositLP(lp, beansConverted, _s);\n        LibCheck.balanceCheck();\n        updateBalanceOfRainStalk(msg.sender);\n    }","after":"function convertDepositedBeans(\n        uint256 beans,\n        uint256 minLP,\n        uint32[] calldata crates,\n        uint256[] calldata amounts\n    )\n    external\n    {\n        LibInternal.updateSilo(msg.sender);\n        (uint256 lp, uint256 beansConverted) = LibConvert.sellToPegAndAddLiquidity(beans, minLP);\n        (uint256 beansRemoved, uint256 stalkRemoved) = _withdrawBeansForConvert(crates, amounts, beansConverted);\n        require(beansRemoved == beansConverted, \"Silo: Wrong Beans removed.\");\n        uint32 _s = uint32(stalkRemoved.div(beansConverted.mul(C.getSeedsPerLPBean())));\n        _s = getDepositSeason(_s);\n\n        _depositLP(lp, beansConverted, _s);\n        LibCheck.balanceCheck();\n        updateBalanceOfRainStalk(msg.sender);\n    }","contract":"ConvertFacet","time":0},{"type":"external-function ","before":"function convertDepositedLP(\n        uint256 lp,\n        uint256 minBeans,\n        uint32[] memory crates,\n        uint256[] memory amounts\n    )\n    external\n    {\n        LibInternal.updateSilo(msg.sender);\n        (uint256 beans, uint256 lpConverted) = LibConvert.removeLPAndBuyToPeg(lp, minBeans);\n        (uint256 lpRemoved, uint256 stalkRemoved) = _withdrawLPForConvert(crates, amounts, lpConverted);\n        require(lpRemoved == lpConverted, \"Silo: Wrong LP removed.\");\n        uint32 _s = uint32(stalkRemoved.div(beans.mul(C.getSeedsPerBean())));\n        _s = getDepositSeason(_s);\n        _depositBeans(beans, _s);\n        LibCheck.balanceCheck();\n        updateBalanceOfRainStalk(msg.sender);\n    }","after":"function convertDepositedLP(\n        uint256 lp,\n        uint256 minBeans,\n        uint32[] calldata crates,\n        uint256[] calldata amounts\n    )\n    external\n    {\n        LibInternal.updateSilo(msg.sender);\n        (uint256 beans, uint256 lpConverted) = LibConvert.removeLPAndBuyToPeg(lp, minBeans);\n        (uint256 lpRemoved, uint256 stalkRemoved) = _withdrawLPForConvert(crates, amounts, lpConverted);\n        require(lpRemoved == lpConverted, \"Silo: Wrong LP removed.\");\n        uint32 _s = uint32(stalkRemoved.div(beans.mul(C.getSeedsPerBean())));\n        _s = getDepositSeason(_s);\n        _depositBeans(beans, _s);\n        LibCheck.balanceCheck();\n        updateBalanceOfRainStalk(msg.sender);\n    }","contract":"ConvertFacet","time":0},{"type":"external-function ","before":"function claimConvertAddAndDepositLP(\n        uint256 lp,\n        LibMarket.AddLiquidity calldata al,\n        uint32[] memory crates,\n        uint256[] memory amounts,\n        LibClaim.Claim calldata claim\n    )\n    external\n    payable\n    {\n        _convertAddAndDepositLP(lp, al, crates, amounts, LibClaim.claim(claim, true));\n    }","after":"function claimConvertAddAndDepositLP(\n        uint256 lp,\n        LibMarket.AddLiquidity calldata al,\n        uint32[] calldata crates,\n        uint256[] calldata amounts,\n        LibClaim.Claim calldata claim\n    )\n    external\n    payable\n    {\n        _convertAddAndDepositLP(lp, al, crates, amounts, LibClaim.claim(claim, true));\n    }","contract":"ConvertFacet","time":0},{"type":"external-function ","before":"function convertAddAndDepositLP(\n        uint256 lp,\n        LibMarket.AddLiquidity calldata al,\n        uint32[] memory crates,\n        uint256[] memory amounts\n    )\n    public\n    payable\n    {\n        _convertAddAndDepositLP(lp, al, crates, amounts, 0);\n    }","after":"function convertAddAndDepositLP(\n        uint256 lp,\n        LibMarket.AddLiquidity calldata al,\n        uint32[] calldata crates,\n        uint256[] calldata amounts\n    )\n    public\n    payable\n    {\n        _convertAddAndDepositLP(lp, al, crates, amounts, 0);\n    }","contract":"ConvertFacet","time":0}]}
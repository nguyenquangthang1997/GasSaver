{"time":612,"results":[{"type":"loop-duplication","before":"\nstart line 681 column 8, end line 683 column 8\nfor (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount = totalAmount.add(amounts[i]);\n        }\nstart line 690 column 8, end line 692 column 8\nfor (uint256 i = 0; i < amounts.length; i++) {\n            creditDesk.pay(creditLines[i], amounts[i]);\n        }","after":"// merge loop\n\nstart line 681 column 8, end line 683 column 8\nfor (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount = totalAmount.add(amounts[i]);\n        }\nstart line 690 column 8, end line 692 column 8\nfor (uint256 i = 0; i < amounts.length; i++) {\n            creditDesk.pay(creditLines[i], amounts[i]);\n        }","contract":"Borrower","time":0},{"type":"loop-duplication","before":"\nstart line 727 column 8, end line 729 column 8\nfor (uint256 i = 0; i < minAmounts.length; i++) {\n            totalMinAmount = totalMinAmount.add(minAmounts[i]);\n        }\nstart line 737 column 8, end line 739 column 8\nfor (uint256 i = 0; i < minAmounts.length; i++) {\n            creditDesk.pay(creditLines[i], minAmounts[i]);\n        }","after":"// merge loop\n\nstart line 727 column 8, end line 729 column 8\nfor (uint256 i = 0; i < minAmounts.length; i++) {\n            totalMinAmount = totalMinAmount.add(minAmounts[i]);\n        }\nstart line 737 column 8, end line 739 column 8\nfor (uint256 i = 0; i < minAmounts.length; i++) {\n            creditDesk.pay(creditLines[i], minAmounts[i]);\n        }","contract":"Borrower","time":0},{"type":"external-function ","before":"function payWithSwapOnOneInch(\n        address creditLineAddress,\n        uint256 originAmount,\n        address fromToken,\n        uint256 minTargetAmount,\n        uint256[] memory exchangeDistribution\n    ) external onlyAdmin {\n        transferFrom(fromToken, _msgSender(), address(this), originAmount);\n        IERC20withDec usdc = config.getUSDC();\n        swapOnOneInch(fromToken, address(usdc), originAmount, minTargetAmount, exchangeDistribution);\n        uint256 usdcBalance = usdc.balanceOf(address(this));\n        config.getCreditDesk().pay(creditLineAddress, usdcBalance);\n    }","after":"function payWithSwapOnOneInch(\n        address creditLineAddress,\n        uint256 originAmount,\n        address fromToken,\n        uint256 minTargetAmount,\n        uint256[] calldata exchangeDistribution\n    ) external onlyAdmin {\n        transferFrom(fromToken, _msgSender(), address(this), originAmount);\n        IERC20withDec usdc = config.getUSDC();\n        swapOnOneInch(fromToken, address(usdc), originAmount, minTargetAmount, exchangeDistribution);\n        uint256 usdcBalance = usdc.balanceOf(address(this));\n        config.getCreditDesk().pay(creditLineAddress, usdcBalance);\n    }","contract":"Borrower","time":0},{"type":"external-function ","before":"function payMultipleWithSwapOnOneInch(\n        address[] memory creditLines,\n        uint256[] memory minAmounts,\n        uint256 originAmount,\n        address fromToken,\n        uint256[] memory exchangeDistribution\n    ) external onlyAdmin {\n        require(creditLines.length == minAmounts.length, \"Creditlines and amounts must be the same length\");\n\n        uint256 totalMinAmount = 0;\n        for (uint256 i = 0; i < minAmounts.length; i++) {\n            totalMinAmount = totalMinAmount.add(minAmounts[i]);\n        }\n\n        transferFrom(fromToken, _msgSender(), address(this), originAmount);\n\n        IERC20withDec usdc = config.getUSDC();\n        swapOnOneInch(fromToken, address(usdc), originAmount, totalMinAmount, exchangeDistribution);\n\n        ICreditDesk creditDesk = config.getCreditDesk();\n        for (uint256 i = 0; i < minAmounts.length; i++) {\n            creditDesk.pay(creditLines[i], minAmounts[i]);\n        }\n\n        uint256 remainingUSDC = usdc.balanceOf(address(this));\n        if (remainingUSDC > 0) {\n            bool success = usdc.transfer(creditLines[0], remainingUSDC);\n            require(success, \"Failed to transfer USDC\");\n        }\n    }","after":"function payMultipleWithSwapOnOneInch(\n        address[] calldata creditLines,\n        uint256[] calldata minAmounts,\n        uint256 originAmount,\n        address fromToken,\n        uint256[] calldata exchangeDistribution\n    ) external onlyAdmin {\n        require(creditLines.length == minAmounts.length, \"Creditlines and amounts must be the same length\");\n\n        uint256 totalMinAmount = 0;\n        for (uint256 i = 0; i < minAmounts.length; i++) {\n            totalMinAmount = totalMinAmount.add(minAmounts[i]);\n        }\n\n        transferFrom(fromToken, _msgSender(), address(this), originAmount);\n\n        IERC20withDec usdc = config.getUSDC();\n        swapOnOneInch(fromToken, address(usdc), originAmount, totalMinAmount, exchangeDistribution);\n\n        ICreditDesk creditDesk = config.getCreditDesk();\n        for (uint256 i = 0; i < minAmounts.length; i++) {\n            creditDesk.pay(creditLines[i], minAmounts[i]);\n        }\n\n        uint256 remainingUSDC = usdc.balanceOf(address(this));\n        if (remainingUSDC > 0) {\n            bool success = usdc.transfer(creditLines[0], remainingUSDC);\n            require(success, \"Failed to transfer USDC\");\n        }\n    }","contract":"Borrower","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public totalWritedowns;","after":"uint256 public constant totalWritedowns;","contract":"FakeV2CreditDesk","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public totalLoansOutstanding;","after":"uint256 public constant totalLoansOutstanding;","contract":"FakeV2CreditDesk","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public balance;","after":"uint256 public constant balance;","contract":"FakeV2CreditLine","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public interestOwed;","after":"uint256 public constant interestOwed;","contract":"FakeV2CreditLine","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public principalOwed;","after":"uint256 public constant principalOwed;","contract":"FakeV2CreditLine","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public termEndBlock;","after":"uint256 public constant termEndBlock;","contract":"FakeV2CreditLine","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public nextDueBlock;","after":"uint256 public constant nextDueBlock;","contract":"FakeV2CreditLine","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public writedownAmount;","after":"uint256 public constant writedownAmount;","contract":"FakeV2CreditLine","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public lastFullPaymentBlock;","after":"uint256 public constant lastFullPaymentBlock;","contract":"FakeV2CreditLine","time":0},{"type":"external-function ","before":"function initialize(string memory name, string memory symbol) public {\n        __ERC20PresetMinterPauser_init(name, symbol);\n    }","after":"function initialize(string calldata name, string calldata symbol) public {\n        __ERC20PresetMinterPauser_init(name, symbol);\n    }","contract":"Fidu","time":0},{"type":"constant-restrict-modification  ","before":"address public poolAddress = 0xBAc2781706D0aA32Fb5928c9a5191A13959Dc4AE;","after":"address public constant poolAddress = 0xBAc2781706D0aA32Fb5928c9a5191A13959Dc4AE;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public clImplAddress = 0xc783df8a850f42e7F7e57013759C285caa701eB6;","after":"address public constant clImplAddress = 0xc783df8a850f42e7F7e57013759C285caa701eB6;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public clFactoryAddress = 0x0afFE1972479c386A2Ab21a27a7f835361B6C0e9;","after":"address public constant clFactoryAddress = 0x0afFE1972479c386A2Ab21a27a7f835361B6C0e9;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public fiduAddress = 0xf3c9B38c155410456b5A98fD8bBf5E35B87F6d96;","after":"address public constant fiduAddress = 0xf3c9B38c155410456b5A98fD8bBf5E35B87F6d96;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public creditDeskAddress = 0xeAD9C93b79Ae7C1591b1FB5323BD777E86e150d4;","after":"address public constant creditDeskAddress = 0xeAD9C93b79Ae7C1591b1FB5323BD777E86e150d4;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public treasuryReserveAddress = 0xECd9C93B79AE7C1591b1fB5323BD777e86E150d5;","after":"address public constant treasuryReserveAddress = 0xECd9C93B79AE7C1591b1fB5323BD777e86E150d5;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public trustedForwarderAddress = 0x956868751Cc565507B3B58E53a6f9f41B56bed74;","after":"address public constant trustedForwarderAddress = 0x956868751Cc565507B3B58E53a6f9f41B56bed74;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public cUSDCAddress = 0x5B281A6DdA0B271e91ae35DE655Ad301C976edb1;","after":"address public constant cUSDCAddress = 0x5B281A6DdA0B271e91ae35DE655Ad301C976edb1;","contract":"TestTheConfig","time":1},{"type":"constant-restrict-modification  ","before":"address public goldfinchConfigAddress = address(8);","after":"address public constant goldfinchConfigAddress = address(8);","contract":"TestTheConfig","time":1}]}
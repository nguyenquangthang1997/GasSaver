{"time":95,"results":[{"type":"loop-duplication","before":"\nstart line 646 column 8, end line 654 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose >= block.number) {\n\n                nbActive++;\n\n            }\n\n        }\nstart line 661 column 8, end line 671 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose >= block.number) {\n\n                _result[idx] = i;\n\n                idx++;\n\n            }\n\n        }","after":"// merge loop\n\nstart line 646 column 8, end line 654 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose >= block.number) {\n\n                nbActive++;\n\n            }\n\n        }\nstart line 661 column 8, end line 671 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose >= block.number) {\n\n                _result[idx] = i;\n\n                idx++;\n\n            }\n\n        }","contract":"PepemonStake","time":0},{"type":"loop-duplication","before":"\nstart line 689 column 8, end line 697 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose < block.number) {\n\n                nbCompleted++;\n\n            }\n\n        }\nstart line 704 column 8, end line 714 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose < block.number) {\n\n                _result[idx] = i;\n\n                idx++;\n\n            }\n\n        }","after":"// merge loop\n\nstart line 689 column 8, end line 697 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose < block.number) {\n\n                nbCompleted++;\n\n            }\n\n        }\nstart line 704 column 8, end line 714 column 8\nfor (uint256 i = 0; i < _events.length; i++) {\n\n            if (_events[i].blockEventClose < block.number) {\n\n                _result[idx] = i;\n\n                idx++;\n\n            }\n\n        }","contract":"PepemonStake","time":0},{"type":"loop-duplication","before":"\nstart line 861 column 8, end line 865 column 8\nfor (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            require(_isInArray(_cardIdList[i], _event.cardIdList), \"Card not accepted\");\n\n        }\nstart line 885 column 8, end line 894 column 8\nfor (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            uint256 cardId = _cardIdList[i];\n\n            uint256 amount = _cardAmountList[i];\n\n\n            cardsStaked[msg.sender][_eventId][cardId] = amount;\n\n        }","after":"// merge loop\n\nstart line 861 column 8, end line 865 column 8\nfor (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            require(_isInArray(_cardIdList[i], _event.cardIdList), \"Card not accepted\");\n\n        }\nstart line 885 column 8, end line 894 column 8\nfor (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            uint256 cardId = _cardIdList[i];\n\n            uint256 amount = _cardAmountList[i];\n\n\n            cardsStaked[msg.sender][_eventId][cardId] = amount;\n\n        }","contract":"PepemonStake","time":0},{"type":"external-function ","before":"function createStakingEvent(uint256[] memory _cardIdList, uint256 _cardAmountAny, uint256[] memory _cardAmountList, uint256 _cardRewardId,\n\n        uint256 _blockStakeLength, uint256 _blockEventClose, uint256[] memory _toBurnIdList, uint256[] memory _toBurnAmountList) public onlyOwner {\n\n\n        require(_cardIdList.length > 0, \"Accepted card list is empty\");\n\n        require(_cardAmountAny > 0 || _cardAmountList.length > 0, \"Card amount required not specified\");\n\n        require(_blockEventClose > block.number, \"blockEventClose < current block\");\n\n        require(_toBurnIdList.length == _toBurnAmountList.length, \"ToBurn arrays have different length\");\n\n        require(_cardAmountAny == 0 || _toBurnIdList.length == 0, \"ToBurn not supported with anyEvent\");\n\n\n        stakingEvents.push(StakingEvent({\n\n        cardIdList : _cardIdList,\n\n        cardAmountAny : _cardAmountAny,\n\n        cardAmountList : _cardAmountList,\n\n        cardRewardId : _cardRewardId,\n\n        blockStakeLength : _blockStakeLength,\n\n        blockEventClose : _blockEventClose,\n\n        toBurnIdList : _toBurnIdList,\n\n        toBurnAmountList : _toBurnAmountList\n\n        }));\n\n\n        emit StakingEventCreated(stakingEvents.length - 1);\n\n    }","after":"function createStakingEvent(uint256[] calldata _cardIdList, uint256 _cardAmountAny, uint256[] calldata _cardAmountList, uint256 _cardRewardId,\n\n        uint256 _blockStakeLength, uint256 _blockEventClose, uint256[] calldata _toBurnIdList, uint256[] calldata _toBurnAmountList) public onlyOwner {\n\n\n        require(_cardIdList.length > 0, \"Accepted card list is empty\");\n\n        require(_cardAmountAny > 0 || _cardAmountList.length > 0, \"Card amount required not specified\");\n\n        require(_blockEventClose > block.number, \"blockEventClose < current block\");\n\n        require(_toBurnIdList.length == _toBurnAmountList.length, \"ToBurn arrays have different length\");\n\n        require(_cardAmountAny == 0 || _toBurnIdList.length == 0, \"ToBurn not supported with anyEvent\");\n\n\n        stakingEvents.push(StakingEvent({\n\n        cardIdList : _cardIdList,\n\n        cardAmountAny : _cardAmountAny,\n\n        cardAmountList : _cardAmountList,\n\n        cardRewardId : _cardRewardId,\n\n        blockStakeLength : _blockStakeLength,\n\n        blockEventClose : _blockEventClose,\n\n        toBurnIdList : _toBurnIdList,\n\n        toBurnAmountList : _toBurnAmountList\n\n        }));\n\n\n        emit StakingEventCreated(stakingEvents.length - 1);\n\n    }","contract":"PepemonStake","time":0},{"type":"external-function ","before":"function stakeAny(uint256 _eventId, uint256[] memory _cardIdList, uint256[] memory _cardAmountList) public {\n\n        require(_cardIdList.length == _cardAmountList.length, \"Arrays have different length\");\n\n\n        StakingEvent storage _event = stakingEvents[_eventId];\n\n        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\n\n\n        require(block.number <= _event.blockEventClose, \"Event is closed\");\n\n        require(_userInfo.isCompleted == false, \"Address already completed event\");\n\n        require(_userInfo.blockEnd == 0, \"Address already staked for this event\");\n\n        require(_event.cardAmountAny > 0, \"Not a stakeAny event\");\n\n\n        for (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            require(_isInArray(_cardIdList[i], _event.cardIdList), \"Card not accepted\");\n\n        }\n\n\n        uint256 total = 0;\n\n        for (uint256 i = 0; i < _cardAmountList.length; i++) {\n\n            total = total.add(_cardAmountList[i]);\n\n        }\n\n\n        require(total == _event.cardAmountAny, \"Wrong card total\");\n\n\n        pepemonFactory.safeBatchTransferFrom(msg.sender, address(this), _cardIdList, _cardAmountList, \"\");\n\n\n        // Save list cards staked in storage\n\n        for (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            uint256 cardId = _cardIdList[i];\n\n            uint256 amount = _cardAmountList[i];\n\n\n            cardsStaked[msg.sender][_eventId][cardId] = amount;\n\n        }\n\n\n        _userInfo.blockEnd = block.number.add(_event.blockStakeLength);\n\n\n        emit StakingEventEntered(msg.sender, _eventId);\n\n    }","after":"function stakeAny(uint256 _eventId, uint256[] calldata _cardIdList, uint256[] calldata _cardAmountList) public {\n\n        require(_cardIdList.length == _cardAmountList.length, \"Arrays have different length\");\n\n\n        StakingEvent storage _event = stakingEvents[_eventId];\n\n        UserInfo storage _userInfo = userInfo[msg.sender][_eventId];\n\n\n        require(block.number <= _event.blockEventClose, \"Event is closed\");\n\n        require(_userInfo.isCompleted == false, \"Address already completed event\");\n\n        require(_userInfo.blockEnd == 0, \"Address already staked for this event\");\n\n        require(_event.cardAmountAny > 0, \"Not a stakeAny event\");\n\n\n        for (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            require(_isInArray(_cardIdList[i], _event.cardIdList), \"Card not accepted\");\n\n        }\n\n\n        uint256 total = 0;\n\n        for (uint256 i = 0; i < _cardAmountList.length; i++) {\n\n            total = total.add(_cardAmountList[i]);\n\n        }\n\n\n        require(total == _event.cardAmountAny, \"Wrong card total\");\n\n\n        pepemonFactory.safeBatchTransferFrom(msg.sender, address(this), _cardIdList, _cardAmountList, \"\");\n\n\n        // Save list cards staked in storage\n\n        for (uint256 i = 0; i < _cardIdList.length; i++) {\n\n            uint256 cardId = _cardIdList[i];\n\n            uint256 amount = _cardAmountList[i];\n\n\n            cardsStaked[msg.sender][_eventId][cardId] = amount;\n\n        }\n\n\n        _userInfo.blockEnd = block.number.add(_event.blockStakeLength);\n\n\n        emit StakingEventEntered(msg.sender, _eventId);\n\n    }","contract":"PepemonStake","time":0}]}
{"time":239,"results":[{"type":"state-data-arrangement ","before":"\naddress public dexConfigor;\nmapping(uint8 => uint32) public dexSwapFee;\nmapping(uint8 => bool) public dexSupported;\nuint256 private constant ONE = 1;\nuint8 private constant MIN_PRECISION = 32;\nuint8 private constant MAX_PRECISION = 127;\nuint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\nuint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\nuint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\nuint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\nuint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\nuint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\nuint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\nuint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\nuint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\nuint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\nuint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\nuint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\nuint256[128] private maxExpArray;","after":"mapping(uint8 => uint32) public dexSwapFee;\nmapping(uint8 => bool) public dexSupported;\nuint256 private constant ONE = 1;\nuint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\nuint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\nuint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\nuint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\nuint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\nuint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\nuint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\nuint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\nuint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\nuint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\nuint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\nuint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\nuint256[128] private maxExpArray;\naddress public dexConfigor;\nuint8 private constant MIN_PRECISION = 32;\nuint8 private constant MAX_PRECISION = 127;\n","contract":"FireBirdFormula","time":1},{"type":"external-function ","before":"function getFactoryAmountsOut(address factory, address tokenIn, address tokenOut, uint amountIn, address[] memory path, uint8[] memory dexIds) external override view returns (uint[] memory amounts) {\n\n        require(path.length > 0, 'FireBirdFormula: INVALID_PATH');\n\n        amounts = new uint[](path.length + 1);\n\n        amounts[0] = amountIn;\n\n        address currentTokenIn = tokenIn;\n\n        for (uint i = 0; i < path.length; i++) {\n\n            (address currentTokenOut, uint reserveIn, uint reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(factory, path[i], currentTokenIn, dexIds[i]);\n\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\n\n            currentTokenIn = currentTokenOut;\n\n        }\n\n        require(currentTokenIn == tokenOut, 'FireBirdFormula: INVALID_TOKEN_OUT_PATH');\n\n    }","after":"function getFactoryAmountsOut(address factory, address tokenIn, address tokenOut, uint amountIn, address[] calldata path, uint8[] calldata dexIds) external override view returns (uint[] memory amounts) {\n\n        require(path.length > 0, 'FireBirdFormula: INVALID_PATH');\n\n        amounts = new uint[](path.length + 1);\n\n        amounts[0] = amountIn;\n\n        address currentTokenIn = tokenIn;\n\n        for (uint i = 0; i < path.length; i++) {\n\n            (address currentTokenOut, uint reserveIn, uint reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(factory, path[i], currentTokenIn, dexIds[i]);\n\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\n\n            currentTokenIn = currentTokenOut;\n\n        }\n\n        require(currentTokenIn == tokenOut, 'FireBirdFormula: INVALID_TOKEN_OUT_PATH');\n\n    }","contract":"FireBirdFormula","time":0},{"type":"external-function ","before":"function getFactoryAmountsIn(address factory, address tokenIn, address tokenOut, uint amountOut, address[] memory path, uint8[] memory dexIds) external override view returns (uint[] memory amounts) {\n\n        require(path.length > 0, 'FireBirdFormula: INVALID_PATH');\n\n        amounts = new uint[](path.length + 1);\n\n        amounts[amounts.length - 1] = amountOut;\n\n        address currentTokenIn = tokenOut;\n\n        for (uint i = path.length; i > 0; i--) {\n\n            (address currentTokenOut, uint reserveIn, uint reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(factory, path[i - 1], currentTokenIn, dexIds[i - 1]);\n\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\n\n            currentTokenIn = currentTokenOut;\n\n\n        }\n\n        require(currentTokenIn == tokenIn, 'FireBirdFormula: INVALID_TOKEN_IN_PATH');\n\n    }","after":"function getFactoryAmountsIn(address factory, address tokenIn, address tokenOut, uint amountOut, address[] calldata path, uint8[] calldata dexIds) external override view returns (uint[] memory amounts) {\n\n        require(path.length > 0, 'FireBirdFormula: INVALID_PATH');\n\n        amounts = new uint[](path.length + 1);\n\n        amounts[amounts.length - 1] = amountOut;\n\n        address currentTokenIn = tokenOut;\n\n        for (uint i = path.length; i > 0; i--) {\n\n            (address currentTokenOut, uint reserveIn, uint reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(factory, path[i - 1], currentTokenIn, dexIds[i - 1]);\n\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\n\n            currentTokenIn = currentTokenOut;\n\n\n        }\n\n        require(currentTokenIn == tokenIn, 'FireBirdFormula: INVALID_TOKEN_IN_PATH');\n\n    }","contract":"FireBirdFormula","time":0}]}
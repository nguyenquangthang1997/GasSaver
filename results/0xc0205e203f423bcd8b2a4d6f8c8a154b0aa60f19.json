{"time":113,"results":[{"type":"external-function ","before":"function newConverter(\n        uint16 _type,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        uint32 _maxConversionFee,\n        IERC20Token[] memory _reserveTokens,\n        uint32[] memory _reserveWeights\n    ) public virtual returns (IConverter) {\n        uint256 length = _reserveTokens.length;\n        require(length == _reserveWeights.length, \"ERR_INVALID_RESERVES\");\n\n        // for standard pools, change type 1 to type 3\n        if (_type == 1 && isStandardPool(_reserveWeights)) {\n            _type = 3;\n        }\n\n        require(\n            getLiquidityPoolByConfig(_type, _reserveTokens, _reserveWeights) == IConverterAnchor(0),\n            \"ERR_ALREADY_EXISTS\"\n        );\n\n        IConverterFactory factory = IConverterFactory(addressOf(CONVERTER_FACTORY));\n        IConverterAnchor anchor = IConverterAnchor(factory.createAnchor(_type, _name, _symbol, _decimals));\n        IConverter converter = IConverter(factory.createConverter(_type, anchor, registry, _maxConversionFee));\n\n        anchor.acceptOwnership();\n        converter.acceptOwnership();\n\n        for (uint256 i = 0; i < length; i++) converter.addReserve(_reserveTokens[i], _reserveWeights[i]);\n\n        anchor.transferOwnership(address(converter));\n        converter.acceptAnchorOwnership();\n        converter.transferOwnership(msg.sender);\n\n        addConverterInternal(converter);\n        return converter;\n    }","after":"function newConverter(\n        uint16 _type,\n        string calldata _name,\n        string calldata _symbol,\n        uint8 _decimals,\n        uint32 _maxConversionFee,\n        IERC20Token[] calldata _reserveTokens,\n        uint32[] calldata _reserveWeights\n    ) public virtual returns (IConverter) {\n        uint256 length = _reserveTokens.length;\n        require(length == _reserveWeights.length, \"ERR_INVALID_RESERVES\");\n\n        // for standard pools, change type 1 to type 3\n        if (_type == 1 && isStandardPool(_reserveWeights)) {\n            _type = 3;\n        }\n\n        require(\n            getLiquidityPoolByConfig(_type, _reserveTokens, _reserveWeights) == IConverterAnchor(0),\n            \"ERR_ALREADY_EXISTS\"\n        );\n\n        IConverterFactory factory = IConverterFactory(addressOf(CONVERTER_FACTORY));\n        IConverterAnchor anchor = IConverterAnchor(factory.createAnchor(_type, _name, _symbol, _decimals));\n        IConverter converter = IConverter(factory.createConverter(_type, anchor, registry, _maxConversionFee));\n\n        anchor.acceptOwnership();\n        converter.acceptOwnership();\n\n        for (uint256 i = 0; i < length; i++) converter.addReserve(_reserveTokens[i], _reserveWeights[i]);\n\n        anchor.transferOwnership(address(converter));\n        converter.acceptAnchorOwnership();\n        converter.transferOwnership(msg.sender);\n\n        addConverterInternal(converter);\n        return converter;\n    }","contract":"ConverterRegistry","time":0},{"type":"external-function ","before":"function getConvertersBySmartTokens(address[] memory _smartTokens) public view returns (IConverter[] memory) {\n        return getConvertersByAnchors(_smartTokens);\n    }","after":"function getConvertersBySmartTokens(address[] calldata _smartTokens) public view returns (IConverter[] memory) {\n        return getConvertersByAnchors(_smartTokens);\n    }","contract":"ConverterRegistry","time":0},{"type":"external-function ","before":"function getLiquidityPoolByReserveConfig(IERC20Token[] memory _reserveTokens, uint32[] memory _reserveWeights)\n    public\n    view\n    returns (IConverterAnchor)\n    {\n        return getLiquidityPoolByConfig(_reserveTokens.length > 1 ? 1 : 0, _reserveTokens, _reserveWeights);\n    }","after":"function getLiquidityPoolByReserveConfig(IERC20Token[] calldata _reserveTokens, uint32[] calldata _reserveWeights)\n    public\n    view\n    returns (IConverterAnchor)\n    {\n        return getLiquidityPoolByConfig(_reserveTokens.length > 1 ? 1 : 0, _reserveTokens, _reserveWeights);\n    }","contract":"ConverterRegistry","time":0}]}
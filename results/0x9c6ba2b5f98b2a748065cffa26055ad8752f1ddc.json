{"time":72,"results":[{"type":"external-function ","before":"function hasDeposits(address owner, uint256[] memory tokenIds) external view returns (bool) {\n\n        EnumerableSet.UintSet storage depositSet = _deposits[owner];\n\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n\n            if (!depositSet.contains(tokenIds[i])) {\n\n                return false;\n\n            }\n\n        }\n\n\n        return true;\n\n    }","after":"function hasDeposits(address owner, uint256[] calldata tokenIds) external view returns (bool) {\n\n        EnumerableSet.UintSet storage depositSet = _deposits[owner];\n\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n\n            if (!depositSet.contains(tokenIds[i])) {\n\n                return false;\n\n            }\n\n        }\n\n\n        return true;\n\n    }","contract":"RoarStaking","time":0},{"type":"external-function ","before":"function hasDepositsOrOwns(address owner, uint256[] memory tokenIds) external view returns (bool) {\n\n        EnumerableSet.UintSet storage depositSet = _deposits[owner];\n\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n\n            if (!depositSet.contains(tokenIds[i]) && roaringLeadersContractInstance.ownerOf(tokenIds[i]) != owner) {\n\n                return false;\n\n            }\n\n        }\n\n\n        return true;\n\n    }","after":"function hasDepositsOrOwns(address owner, uint256[] calldata tokenIds) external view returns (bool) {\n\n        EnumerableSet.UintSet storage depositSet = _deposits[owner];\n\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n\n            if (!depositSet.contains(tokenIds[i]) && roaringLeadersContractInstance.ownerOf(tokenIds[i]) != owner) {\n\n                return false;\n\n            }\n\n        }\n\n\n        return true;\n\n    }","contract":"RoarStaking","time":0},{"type":"external-function ","before":"function calculateRewards(address owner, uint256[] memory tokenIds) external view returns (uint256) {\n\n        uint256 reward = 0;\n\n\n        for (uint256 i; i < tokenIds.length; i++) {\n\n            reward += calculateReward(owner, tokenIds[i]);\n\n        }\n\n\n        return reward;\n\n    }","after":"function calculateRewards(address owner, uint256[] calldata tokenIds) external view returns (uint256) {\n\n        uint256 reward = 0;\n\n\n        for (uint256 i; i < tokenIds.length; i++) {\n\n            reward += calculateReward(owner, tokenIds[i]);\n\n        }\n\n\n        return reward;\n\n    }","contract":"RoarStaking","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"RoarStaking","time":0}]}
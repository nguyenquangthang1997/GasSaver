{"time":271,"results":[{"type":"external-function ","before":"function changeMultipleReceiverAlloc(\n\n        uint256[] memory _vaultIds,\n\n        uint256[] memory _receiverIdxs,\n\n        uint256[] memory allocPoints\n\n    ) public override virtual onlyOwner {\n\n        require(_vaultIds.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        require(allocPoints.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        for (uint256 i = 0; i < _vaultIds.length; i++) {\n\n            changeReceiverAlloc(_vaultIds[i], _receiverIdxs[i], allocPoints[i]);\n\n        }\n\n    }","after":"function changeMultipleReceiverAlloc(\n\n        uint256[] calldata _vaultIds,\n\n        uint256[] calldata _receiverIdxs,\n\n        uint256[] calldata allocPoints\n\n    ) public override virtual onlyOwner {\n\n        require(_vaultIds.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        require(allocPoints.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        for (uint256 i = 0; i < _vaultIds.length; i++) {\n\n            changeReceiverAlloc(_vaultIds[i], _receiverIdxs[i], allocPoints[i]);\n\n        }\n\n    }","contract":"NFTXFeeDistributor","time":0},{"type":"external-function ","before":"function changeMultipleReceiverAddress(\n\n        uint256[] memory _vaultIds,\n\n        uint256[] memory _receiverIdxs,\n\n        address[] memory addresses,\n\n        bool[] memory isContracts\n\n    ) public override virtual onlyOwner {\n\n        require(_vaultIds.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        require(addresses.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        require(addresses.length == isContracts.length, \"Lengths not equal\");\n\n        for (uint256 i = 0; i < _vaultIds.length; i++) {\n\n            changeReceiverAddress(_vaultIds[i], _receiverIdxs[i], addresses[i], isContracts[i]);\n\n        }\n\n    }","after":"function changeMultipleReceiverAddress(\n\n        uint256[] calldata _vaultIds,\n\n        uint256[] calldata _receiverIdxs,\n\n        address[] calldata addresses,\n\n        bool[] calldata isContracts\n\n    ) public override virtual onlyOwner {\n\n        require(_vaultIds.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        require(addresses.length == _receiverIdxs.length, \"Lengths not equal\");\n\n        require(addresses.length == isContracts.length, \"Lengths not equal\");\n\n        for (uint256 i = 0; i < _vaultIds.length; i++) {\n\n            changeReceiverAddress(_vaultIds[i], _receiverIdxs[i], addresses[i], isContracts[i]);\n\n        }\n\n    }","contract":"NFTXFeeDistributor","time":0}]}
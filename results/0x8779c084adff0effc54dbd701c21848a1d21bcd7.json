{"time":295,"results":[{"type":"external-function ","before":"function mint(\n        address _account,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    ) external override onlyPermit {\n        require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\n\n        address operator = _msgSender();\n\n        uint256 accountBalance = _balances[_id][_account];\n        uint256 assetTotalBalance = _totalSupply[_id];\n        uint256 amountScaled = _amount.rayDiv(indexes[_id]);\n\n        require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\n\n        _balances[_id][_account] = accountBalance + amountScaled;\n        _totalSupply[_id] = assetTotalBalance + amountScaled;\n\n        emit TransferSingle(operator, address(0), _account, _id, _amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), _account, _id, _amount, _data);\n    }","after":"function mint(\n        address _account,\n        uint256 _id,\n        uint256 _amount,\n        bytes calldata _data\n    ) external override onlyPermit {\n        require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\n\n        address operator = _msgSender();\n\n        uint256 accountBalance = _balances[_id][_account];\n        uint256 assetTotalBalance = _totalSupply[_id];\n        uint256 amountScaled = _amount.rayDiv(indexes[_id]);\n\n        require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\n\n        _balances[_id][_account] = accountBalance + amountScaled;\n        _totalSupply[_id] = assetTotalBalance + amountScaled;\n\n        emit TransferSingle(operator, address(0), _account, _id, _amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), _account, _id, _amount, _data);\n    }","contract":"FujiERC1155","time":0},{"type":"external-function ","before":"function mintBatch(\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) external onlyPermit {\n        require(_to != address(0), Errors.VL_ZERO_ADDR_1155);\n        require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\n\n        address operator = _msgSender();\n\n        uint256 accountBalance;\n        uint256 assetTotalBalance;\n        uint256 amountScaled;\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            accountBalance = _balances[_ids[i]][_to];\n            assetTotalBalance = _totalSupply[_ids[i]];\n\n            amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\n\n            require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\n\n            _balances[_ids[i]][_to] = accountBalance + amountScaled;\n            _totalSupply[_ids[i]] = assetTotalBalance + amountScaled;\n        }\n\n        emit TransferBatch(operator, address(0), _to, _ids, _amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), _to, _ids, _amounts, _data);\n    }","after":"function mintBatch(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts,\n        bytes calldata _data\n    ) external onlyPermit {\n        require(_to != address(0), Errors.VL_ZERO_ADDR_1155);\n        require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\n\n        address operator = _msgSender();\n\n        uint256 accountBalance;\n        uint256 assetTotalBalance;\n        uint256 amountScaled;\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            accountBalance = _balances[_ids[i]][_to];\n            assetTotalBalance = _totalSupply[_ids[i]];\n\n            amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\n\n            require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\n\n            _balances[_ids[i]][_to] = accountBalance + amountScaled;\n            _totalSupply[_ids[i]] = assetTotalBalance + amountScaled;\n        }\n\n        emit TransferBatch(operator, address(0), _to, _ids, _amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), _to, _ids, _amounts, _data);\n    }","contract":"FujiERC1155","time":0},{"type":"external-function ","before":"function burnBatch(\n        address _account,\n        uint256[] memory _ids,\n        uint256[] memory _amounts\n    ) external onlyPermit {\n        require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\n        require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\n\n        address operator = _msgSender();\n\n        uint256 accountBalance;\n        uint256 assetTotalBalance;\n        uint256 amountScaled;\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint256 amount = _amounts[i];\n\n            accountBalance = _balances[_ids[i]][_account];\n            assetTotalBalance = _totalSupply[_ids[i]];\n\n            amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\n\n            require(amountScaled != 0 && accountBalance >= amountScaled, Errors.VL_INVALID_BURN_AMOUNT);\n\n            _balances[_ids[i]][_account] = accountBalance - amount;\n            _totalSupply[_ids[i]] = assetTotalBalance - amount;\n        }\n\n        emit TransferBatch(operator, _account, address(0), _ids, _amounts);\n    }","after":"function burnBatch(\n        address _account,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) external onlyPermit {\n        require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\n        require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\n\n        address operator = _msgSender();\n\n        uint256 accountBalance;\n        uint256 assetTotalBalance;\n        uint256 amountScaled;\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            uint256 amount = _amounts[i];\n\n            accountBalance = _balances[_ids[i]][_account];\n            assetTotalBalance = _totalSupply[_ids[i]];\n\n            amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\n\n            require(amountScaled != 0 && accountBalance >= amountScaled, Errors.VL_INVALID_BURN_AMOUNT);\n\n            _balances[_ids[i]][_account] = accountBalance - amount;\n            _totalSupply[_ids[i]] = assetTotalBalance - amount;\n        }\n\n        emit TransferBatch(operator, _account, address(0), _ids, _amounts);\n    }","contract":"FujiERC1155","time":0},{"type":"external-function ","before":"function setURI(string memory _newUri) public onlyOwner {\n        _uri = _newUri;\n    }","after":"function setURI(string calldata _newUri) public onlyOwner {\n        _uri = _newUri;\n    }","contract":"FujiERC1155","time":0},{"type":"external-function ","before":"function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, Errors.VL_INPUT_ERROR);\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","after":"function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n    public\n    view\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, Errors.VL_INPUT_ERROR);\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }","contract":"FujiERC1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address, // from\n        address, // to\n        uint256, // id\n        uint256, // amount\n        bytes memory // data\n    ) public virtual override {\n        revert(Errors.VL_ERC1155_NOT_TRANSFERABLE);\n    }","after":"function safeTransferFrom(\n        address, // from\n        address, // to\n        uint256, // id\n        uint256, // amount\n        bytes calldata // data\n    ) public virtual override {\n        revert(Errors.VL_ERC1155_NOT_TRANSFERABLE);\n    }","contract":"FujiERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address, // from\n        address, // to\n        uint256[] memory, // ids\n        uint256[] memory, // amounts\n        bytes memory //  data\n    ) public virtual override {\n        revert(Errors.VL_ERC1155_NOT_TRANSFERABLE);\n    }","after":"function safeBatchTransferFrom(\n        address, // from\n        address, // to\n        uint256[] calldata, // ids\n        uint256[] calldata, // amounts\n        bytes calldata //  data\n    ) public virtual override {\n        revert(Errors.VL_ERC1155_NOT_TRANSFERABLE);\n    }","contract":"FujiERC1155","time":0}]}
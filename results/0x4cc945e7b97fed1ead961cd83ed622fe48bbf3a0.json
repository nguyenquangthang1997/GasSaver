{"time":124,"results":[{"type":"struct-data-arrangement ","before":"\nister fee co\n   uint256 p\nstrationStep = \n/ add base p\ne step\n\n    ui\nc _stepFee = 10\n\n    bytes32 publ\nefer = \"dego\";\n\n\ns payable public","after":"   uint256 p\n/ add base p\ne step\n\n    ui\nc _stepFee = 10\n\n    bytes32 publ\nefer = \"dego\";\n\n\ns payable public\nister fee co\nstrationStep = \n","contract":"PlayerBook","time":0},{"type":"external-function ","before":"ave reward\");\n\n\n        //reset\n\n        _plyr[pid].allReward = _plyr[pid].allReward.add(reward);\n\n        _plyr[pid].rreward = 0;\n\n\n        //get reward\n\n        _dego.safeTransfer(addr, reward);\n\n\n        // fire event\n\n        emit eveClaim(_pIDxAddr[ad","after":"ave reward\");\n\n\n        //reset\n\n        _plyr[pid].allReward = _plyr[pid].allReward.add(reward);\n\n        _plyr[pid].rreward = 0;\n\n\n        //get reward\n\n        _dego.safeTransfer(addr, reward);\n\n\n        // fire event\n\n        emit eveClaim(_pIDxAddr[ad","contract":"PlayerBook","time":0},{"type":"external-function ","before":" 0-9\n\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n\n     * @param nameString players desired name\n\n     * @param affCode affiliate name of who refered you\n\n     * (this might cost a lot of gas)\n\n     */\n\n\n\n    function registerNameXName(string memory nameString, string memory affCode)\n\n    public\n\n    payable\n\n    {\n\n\n        // make sure name fees paid\n\n        require(msg.value >= this.getRegistrationFee(), \"umm.....  you have to pay the name fee\");\n\n\n        // filter name + condition checks\n\n        bytes32 name = NameFilter.nameFilter(nameString);\n\n        // if names already has been used\n\n        require(_pIDxName[name] == 0, \"sorry that names already taken\");\n\n\n        // set up address\n\n        address addr = msg.sender;\n\n        // set up our tx event data and determine if player is new or not\n\n        _determinePID(addr);\n\n        // fetch player id\n\n        uint256 pID = _pIDxAddr[addr];\n\n        // if names already has been used\n\n        require(_plyrNames[pID][name] == false, \"sorry that names already taken\");\n\n\n        // add name to player profile, registry, and name book\n\n        _plyrNames[pID][name] = true;\n\n        _pIDxName[name] = pID;\n\n        _plyr[pID].name = name;\n\n        _plyr[pID].nameCount++;\n\n\n        _totalRegisterCount++;\n\n\n        //try bind a refer\n\n        if (_plyr[pID].laff == 0) {\n\n\n            bytes memory tempCode = bytes(affCode);\n\n            bytes32 affName = 0x0;\n\n            if (tempCode.length >= 0) {\n\n    ","after":" 0-9\n\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n\n     * @param nameString players desired name\n\n     * @param affCode affiliate name of who refered you\n\n     * (this might cost a lot of gas)\n\n     */\n\n\n\n    function registerNameXName(string memory nameString, string memory affCode)\n\n    public\n\n    payable\n\n    {\n\n\n        // make sure name fees paid\n\n        require(msg.value >= this.getRegistrationFee(), \"umm.....  you have to pay the name fee\");\n\n\n        // filter name + condition checks\n\n        bytes32 name = NameFilter.nameFilter(nameString);\n\n        // if names already has been used\n\n        require(_pIDxName[name] == 0, \"sorry that names already taken\");\n\n\n        // set up address\n\n        address addr = msg.sender;\n\n        // set up our tx event data and determine if player is new or not\n\n        _determinePID(addr);\n\n        // fetch player id\n\n        uint256 pID = _pIDxAddr[addr];\n\n        // if names already has been used\n\n        require(_plyrNames[pID][name] == false, \"sorry that names already taken\");\n\n\n        // add name to player profile, registry, and name book\n\n        _plyrNames[pID][name] = true;\n\n        _pIDxName[name] = pID;\n\n        _plyr[pID].name = name;\n\n        _plyr[pID].nameCount++;\n\n\n        _totalRegisterCount++;\n\n\n        //try bind a refer\n\n        if (_plyr[pID].laff == 0) {\n\n\n            bytes memory tempCode = bytes(affCode);\n\n            bytes32 affName = 0x0;\n\n            if (tempCode.length >= 0) {\n\n    ","contract":"PlayerBook","time":0},{"type":"constant-restrict-modification  ","before":"\n\n    // total number of players\n","after":"\n\n    // total number of players\n","contract":"PlayerBook","time":0},{"type":"constant-restrict-modification  ","before":"er name count\n\n    uint256 public _totalRegisterC","after":"er name count\n\n    uint256 public _totalRegisterC","contract":"PlayerBook","time":0},{"type":"constant-restrict-modification  ","before":" direct refer's reward rate\n\n    uint","after":" direct refer's reward rate\n\n    uint","contract":"PlayerBook","time":0},{"type":"constant-restrict-modification  ","before":"lic _refer2RewardRate = 300; //3%\n\n  ","after":"lic _refer2RewardRate = 300; //3%\n\n  ","contract":"PlayerBook","time":0},{"type":"constant-restrict-modification  ","before":"se rate\n\n    uint256 public _baseRate = 10000;\n\n\n\n    // base price to register ","after":"se rate\n\n    uint256 public _baseRate = 10000;\n\n\n\n    // base price to register ","contract":"PlayerBook","time":0}]}
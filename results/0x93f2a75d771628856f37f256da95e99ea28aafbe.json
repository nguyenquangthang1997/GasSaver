{"time":287,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\nuint public buyerFee = 0;\naddress payable public beneficiary;","after":"uint public buyerFee = 0;\naddress payable public beneficiary;\nbytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\n","contract":"AbstractSale","time":0},{"type":"external-function ","before":"function buy(IERC1155 token, uint256 tokenId, address payable owner, uint256 selling, uint256 buying, uint256 price, uint256 sellerFee, Sig memory signature) public payable {\n\n        uint256 nonce = verifySignature(address(token), tokenId, owner, selling, price, sellerFee, signature);\n\n        uint256 total = price.mul(buying);\n\n        uint256 buyerFeeValue = total.mul(buyerFee).div(10000);\n\n        require(total + buyerFeeValue == msg.value, \"msg.value is incorrect\");\n\n        bool closed = verifyOpenAndModifyState(address(token), tokenId, owner, nonce, selling, buying);\n\n\n        transferProxy.erc1155safeTransferFrom(token, owner, msg.sender, tokenId, buying, EMPTY);\n\n\n        transferEther(token, tokenId, owner, total, sellerFee);\n\n        emit Buy(address(token), tokenId, owner, price, msg.sender, buying);\n\n        if (closed) {\n\n            emit CloseOrder(address(token), tokenId, owner, nonce + 1);\n\n        }\n\n    }","after":"function buy(IERC1155 token, uint256 tokenId, address payable owner, uint256 selling, uint256 buying, uint256 price, uint256 sellerFee, Sig calldata signature) public payable {\n\n        uint256 nonce = verifySignature(address(token), tokenId, owner, selling, price, sellerFee, signature);\n\n        uint256 total = price.mul(buying);\n\n        uint256 buyerFeeValue = total.mul(buyerFee).div(10000);\n\n        require(total + buyerFeeValue == msg.value, \"msg.value is incorrect\");\n\n        bool closed = verifyOpenAndModifyState(address(token), tokenId, owner, nonce, selling, buying);\n\n\n        transferProxy.erc1155safeTransferFrom(token, owner, msg.sender, tokenId, buying, EMPTY);\n\n\n        transferEther(token, tokenId, owner, total, sellerFee);\n\n        emit Buy(address(token), tokenId, owner, price, msg.sender, buying);\n\n        if (closed) {\n\n            emit CloseOrder(address(token), tokenId, owner, nonce + 1);\n\n        }\n\n    }","contract":"ERC1155Sale","time":0}]}
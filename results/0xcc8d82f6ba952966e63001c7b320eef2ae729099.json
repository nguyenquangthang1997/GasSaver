{"time":841,"results":[{"type":"loop-duplication","before":"\nstart line 1913 column 0, end line 1914 column 91\nfor (i = 0; i < self.idsByCurrency[currencyCt][currencyId].length; i++)\nself.idIndexById[currencyCt][currencyId][self.idsByCurrency[currencyCt][currencyId][i]] = 0;\nstart line 1918 column 0, end line 1919 column 95\nfor (i = 0; i < self.idsByCurrency[currencyCt][currencyId].length; i++)\nself.idIndexById[currencyCt][currencyId][self.idsByCurrency[currencyCt][currencyId][i]] = i + 1;","after":"// merge loop\n\nstart line 1913 column 0, end line 1914 column 91\nfor (i = 0; i < self.idsByCurrency[currencyCt][currencyId].length; i++)\nself.idIndexById[currencyCt][currencyId][self.idsByCurrency[currencyCt][currencyId][i]] = 0;\nstart line 1918 column 0, end line 1919 column 95\nfor (i = 0; i < self.idsByCurrency[currencyCt][currencyId].length; i++)\nself.idIndexById[currencyCt][currencyId][self.idsByCurrency[currencyCt][currencyId][i]] = i + 1;","contract":"NonFungibleBalanceLib","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 public depositedBalanceType;","after":"bytes32 public immutable depositedBalanceType;","contract":"BalanceTracker","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 public settledBalanceType;","after":"bytes32 public immutable settledBalanceType;","contract":"BalanceTracker","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 public stagedBalanceType;","after":"bytes32 public immutable stagedBalanceType;","contract":"BalanceTracker","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 public depositTransactionType;","after":"bytes32 public immutable depositTransactionType;","contract":"TransactionTracker","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 public withdrawalTransactionType;","after":"bytes32 public immutable withdrawalTransactionType;","contract":"TransactionTracker","time":0},{"type":"loop-duplication","before":"\nstart line 6838 column 0, end line 6843 column 1\n;\nfor (i = 0; i < balanceTypes.length; i++)\ntotalBalanceAmount = totalBalanceAmount.add(\nbalanceTracker.get(\nwallet, balanceTypes[i], currencyCt, currencyId\n)\n\nstart line 6849 column 0, end line 6866 column 0\n;\nfor (i = 0; i < balanceTypes.length; i++) {\nint256 typeAmount = balanceTracker.get(\nwallet, balanceTypes[i], currencyCt, currencyId\n);\n\nif (typeAmount >= _amount) {\nbalanceTracker.sub(\nwallet, balanceTypes[i], _amount, currencyCt, currencyId, true\n);\nbreak;\n\n} else {\nbalanceTracker.set(\nwallet, balanceTypes[i], 0, currencyCt, currencyId, true\n);\n_amount = _amount.sub(typeAmount);\n}","after":"// merge loop\n\nstart line 6838 column 0, end line 6843 column 1\n;\nfor (i = 0; i < balanceTypes.length; i++)\ntotalBalanceAmount = totalBalanceAmount.add(\nbalanceTracker.get(\nwallet, balanceTypes[i], currencyCt, currencyId\n)\n\nstart line 6849 column 0, end line 6866 column 0\n;\nfor (i = 0; i < balanceTypes.length; i++) {\nint256 typeAmount = balanceTracker.get(\nwallet, balanceTypes[i], currencyCt, currencyId\n);\n\nif (typeAmount >= _amount) {\nbalanceTracker.sub(\nwallet, balanceTypes[i], _amount, currencyCt, currencyId, true\n);\nbreak;\n\n} else {\nbalanceTracker.set(\nwallet, balanceTypes[i], 0, currencyCt, currencyId, true\n);\n_amount = _amount.sub(typeAmount);\n}","contract":"ClientFund","time":0}]}
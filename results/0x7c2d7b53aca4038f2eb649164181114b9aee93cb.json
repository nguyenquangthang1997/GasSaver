{"time":230,"results":[{"type":"state-data-arrangement ","before":"\nuint public override constant MINIMUM_LIQUIDITY = 10 ** 9;\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\nuint256 constant public K_BASE = 1E8;\nuint256 constant public NAVPS_BASE = 1E18;\nuint256 constant public THETA_BASE = 1E8;\nstring public name;\nstring public symbol;\naddress public override immutable factory;\naddress public override token0;\naddress public override token1;\nuint112 private reserve0;\nuint112 private reserve1;\nuint private unlocked = 1;","after":"uint public override constant MINIMUM_LIQUIDITY = 10 ** 9;\nuint256 constant public K_BASE = 1E8;\nuint256 constant public NAVPS_BASE = 1E18;\nuint256 constant public THETA_BASE = 1E8;\nstring public name;\nstring public symbol;\nuint private unlocked = 1;\naddress public override immutable factory;\naddress public override token0;\naddress public override token1;\nuint112 private reserve0;\nuint112 private reserve1;\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n","contract":"CoFiXPair","time":0},{"type":"external-function ","before":"function initialize(address _token0, address _token1, string memory _name, string memory _symbol) external override {\nrequire(msg.sender == factory, \"CPair: FORBIDDEN\"); // sufficient check\ntoken0 = _token0;\ntoken1 = _token1;\nname = _name;\nsymbol = _symbol;\n}","after":"function initialize(address _token0, address _token1, string calldata _name, string calldata _symbol) external override {\nrequire(msg.sender == factory, \"CPair: FORBIDDEN\"); // sufficient check\ntoken0 = _token0;\ntoken1 = _token1;\nname = _name;\nsymbol = _symbol;\n}","contract":"CoFiXPair","time":0},{"type":"external-function ","before":"function getNAVPerShareForBurn(OraclePrice memory _op) external view returns (uint256 navps) {\nreturn calcNAVPerShareForBurn(reserve0, reserve1, _op);\n}","after":"function getNAVPerShareForBurn(OraclePrice calldata _op) external view returns (uint256 navps) {\nreturn calcNAVPerShareForBurn(reserve0, reserve1, _op);\n}","contract":"CoFiXPair","time":0},{"type":"external-function ","before":"function getLiquidity(uint256 amount0, uint256 amount1, OraclePrice memory _op) external view returns (uint256 liquidity) {\nuint256 navps = getNAVPerShareForMint(_op);\nreturn calcLiquidity(amount0, amount1, navps, _op);\n}","after":"function getLiquidity(uint256 amount0, uint256 amount1, OraclePrice calldata _op) external view returns (uint256 liquidity) {\nuint256 navps = getNAVPerShareForMint(_op);\nreturn calcLiquidity(amount0, amount1, navps, _op);\n}","contract":"CoFiXPair","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 public override DOMAIN_SEPARATOR;","after":"bytes32 public override immutable DOMAIN_SEPARATOR;","contract":"CoFiXPair","time":0}]}
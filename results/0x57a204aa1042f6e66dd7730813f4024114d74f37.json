{"time":400,"results":[{"type":"state-data-arrangement ","before":"\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a\n   mapping(address => EnumerableSet.UintSet) private _holderToke\n   EnumerableMap.UintToAddressMap private _tokenOwne\n   mapping(uint256 => address) private _tokenApprova\n   mapping(address => mapping(address => bool)) private _operatorApprova\n   string private _na\n   string private _symb\n   mapping(uint256 => string) private _tokenUR\n   string private _baseU\n   bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58\n   bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e13\n   bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d","after":"   mapping(address => EnumerableSet.UintSet) private _holderToke\n   EnumerableMap.UintToAddressMap private _tokenOwne\n   mapping(uint256 => address) private _tokenApprova\n   mapping(address => mapping(address => bool)) private _operatorApprova\n   string private _na\n   string private _symb\n   mapping(uint256 => string) private _tokenUR\n   string private _baseU\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a\n   bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58\n   bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e13\n   bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d\n","contract":"ERC721","time":0},{"type":"de-morgan-condition ","before":"   !(char >= 0x30 && char <= 0x39) && //9-0\n\n            !(char >= 0x41 && char <= 0x","after":"!(   (char >= 0x30 && char <= 0x39) && //9-0\n\n            (char >= 0x41 && char <= 0x)","loc":{"start":{"line":3845,"column":16},"end":{"line":3847,"column":42}},"contract":"ERC721Namable","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"YieldToken","time":0},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"YieldToken","time":0},{"type":"external-function ","before":"   function updateURI(string memory newURI) public onlyOwner {\n\n        _setBaseURI(newURI);\n\n  ","after":"   function updateURI(string calldata newURI) public onlyOwner {\n\n        _setBaseURI(newURI);\n\n  ","contract":"Kongz","time":0},{"type":"external-function ","before":"   function changeName(uint256 tokenId, string memory newName) public override {\n\n        yieldToken.burn(msg.sender, nameChangePrice);\n\n        super.changeName(tokenId, newName);\n\n  ","after":"   function changeName(uint256 tokenId, string calldata newName) public override {\n\n        yieldToken.burn(msg.sender, nameChangePrice);\n\n        super.changeName(tokenId, newName);\n\n  ","contract":"Kongz","time":0},{"type":"external-function ","before":"   function changeBio(uint256 tokenId, string memory _bio) public override {\n\n        yieldToken.burn(msg.sender, BIO_CHANGE_PRICE);\n\n        super.changeBio(tokenId, _bio);\n\n  ","after":"   function changeBio(uint256 tokenId, string calldata _bio) public override {\n\n        yieldToken.burn(msg.sender, BIO_CHANGE_PRICE);\n\n        super.changeBio(tokenId, _bio);\n\n  ","contract":"Kongz","time":0},{"type":"external-function ","before":"   function changeBio(uint256 _tokenId, string memory _bio) public virtual {\n\n        address owner = ownerOf(_tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n\n        bio[_tokenId] = _bio;\n\n        emit BioChange(_tokenId, _bio);\n\n  ","after":"   function changeBio(uint256 _tokenId, string calldata _bio) public virtual {\n\n        address owner = ownerOf(_tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n\n        bio[_tokenId] = _bio;\n\n        emit BioChange(_tokenId, _bio);\n\n  ","contract":"Kongz","time":0},{"type":"external-function ","before":"   function changeName(uint256 tokenId, string memory newName) public virtual {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n        require(validateName(newName) == true, \"Not a valid new name\");\n\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n\n        // If already named, dereserve old name\n\n        if (bytes(_tokenName[tokenId]).length > 0) {\n\n            toggleReserveName(_tokenName[tokenId], false);\n\n        }\n\n        toggleReserveName(newName, true);\n\n        _tokenName[tokenId] = newName;\n\n        emit NameChange(tokenId, newName);\n\n  ","after":"   function changeName(uint256 tokenId, string calldata newName) public virtual {\n\n        address owner = ownerOf(tokenId);\n\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n        require(validateName(newName) == true, \"Not a valid new name\");\n\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n\n        // If already named, dereserve old name\n\n        if (bytes(_tokenName[tokenId]).length > 0) {\n\n            toggleReserveName(_tokenName[tokenId], false);\n\n        }\n\n        toggleReserveName(newName, true);\n\n        _tokenName[tokenId] = newName;\n\n        emit NameChange(tokenId, newName);\n\n  ","contract":"Kongz","time":0},{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"Kongz","time":1},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"Kongz","time":1}]}
{"time":220,"results":[{"type":"loop-calculation","before":"string memory componentType = _getComponentType(_tokenId);","after":"// move outside for loop\nstring memory componentType = _getComponentType(_tokenId);","loc":{"start":{"line":1359,"column":12},"end":{"line":1359,"column":69}},"contract":"RocketComponent","time":0},{"type":"state-data-arrangement ","before":"\nuint256 private supply;\nuint256 private claimPrice;\nuint256 private earlyAccessStartDate;\nuint256 private claimStartDate;\nuint16 private maxClaimsPerAddress;\nstring private baseURI;\nstring private ipfsBaseURI;\naddress private rocketFactoryContract;\naddress private testFlightCrewContract;\naddress private adminAddress;\nuint16[] private availableComponents;\nstring[] private stickers;\nComponentModel[] private componentModels;\nmapping(uint256 => bool) private burnedTokens;\nmapping(uint256 => uint256) private componentStickers;\nmapping(address => uint16) private claimedComponentsPerAddress;","after":"uint256 private supply;\nuint256 private claimPrice;\nuint256 private earlyAccessStartDate;\nuint256 private claimStartDate;\nstring private baseURI;\nstring private ipfsBaseURI;\nuint16[] private availableComponents;\nstring[] private stickers;\nComponentModel[] private componentModels;\nmapping(uint256 => bool) private burnedTokens;\nmapping(uint256 => uint256) private componentStickers;\nmapping(address => uint16) private claimedComponentsPerAddress;\naddress private rocketFactoryContract;\naddress private testFlightCrewContract;\naddress private adminAddress;\nuint16 private maxClaimsPerAddress;\n","contract":"RocketComponent","time":0},{"type":"external-function ","before":"function addComponents(ComponentModel[] memory _components)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < _components.length; i++) {\n            componentModels.push(_components[i]);\n        }\n    }","after":"function addComponents(ComponentModel[] calldata _components)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < _components.length; i++) {\n            componentModels.push(_components[i]);\n        }\n    }","contract":"RocketComponent","time":0},{"type":"external-function ","before":"function addAvailableComponents(uint16[] memory _availableComponents)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < _availableComponents.length; i++) {\n            availableComponents.push(_availableComponents[i]);\n        }\n    }","after":"function addAvailableComponents(uint16[] calldata _availableComponents)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < _availableComponents.length; i++) {\n            availableComponents.push(_availableComponents[i]);\n        }\n    }","contract":"RocketComponent","time":0},{"type":"external-function ","before":"function setIpfsBaseURI(string memory _ipfsBaseURI)\n    external\n    onlyOwnerOrAdmin\n    {\n        ipfsBaseURI = _ipfsBaseURI;\n    }","after":"function setIpfsBaseURI(string calldata _ipfsBaseURI)\n    external\n    onlyOwnerOrAdmin\n    {\n        ipfsBaseURI = _ipfsBaseURI;\n    }","contract":"RocketComponent","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) external onlyOwnerOrAdmin {\n        baseURI = _uri;\n    }","after":"function setBaseTokenURI(string calldata _uri) external onlyOwnerOrAdmin {\n        baseURI = _uri;\n    }","contract":"RocketComponent","time":0},{"type":"external-function ","before":"function ownerClaim(uint256[] memory tokenIds, address to)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < tokenIds.length; i++) {\n            mint(to, tokenIds[i]);\n        }\n    }","after":"function ownerClaim(uint256[] calldata tokenIds, address to)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < tokenIds.length; i++) {\n            mint(to, tokenIds[i]);\n        }\n    }","contract":"RocketComponent","time":0},{"type":"external-function ","before":"function addStickers(string[] memory _stickers) external onlyOwnerOrAdmin {\n        for (uint256 i; i < _stickers.length; i++) {\n            stickers.push(_stickers[i]);\n        }\n    }","after":"function addStickers(string[] calldata _stickers) external onlyOwnerOrAdmin {\n        for (uint256 i; i < _stickers.length; i++) {\n            stickers.push(_stickers[i]);\n        }\n    }","contract":"RocketComponent","time":0},{"type":"external-function ","before":"function addComponentStickers(ComponentSticker[] memory _componentStickers)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < _componentStickers.length; i++) {\n            componentStickers[\n            _componentStickers[i].tokenId\n            ] = _componentStickers[i].stickerId;\n        }\n    }","after":"function addComponentStickers(ComponentSticker[] calldata _componentStickers)\n    external\n    onlyOwnerOrAdmin\n    {\n        for (uint256 i; i < _componentStickers.length; i++) {\n            componentStickers[\n            _componentStickers[i].tokenId\n            ] = _componentStickers[i].stickerId;\n        }\n    }","contract":"RocketComponent","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"RocketComponent","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"RocketComponent","time":1},{"type":"external-function ","before":"function setIpfsBaseURI(string memory _ipfsBaseURI)\n    external\n    onlyOwnerOrAdmin\n    {\n        ipfsBaseURI = _ipfsBaseURI;\n    }","after":"function setIpfsBaseURI(string calldata _ipfsBaseURI)\n    external\n    onlyOwnerOrAdmin\n    {\n        ipfsBaseURI = _ipfsBaseURI;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function setIpfsRocketFolder(string memory _ipfsRocketFolder)\n    external\n    onlyOwnerOrAdmin\n    {\n        ipfsRocketFolder = _ipfsRocketFolder;\n    }","after":"function setIpfsRocketFolder(string calldata _ipfsRocketFolder)\n    external\n    onlyOwnerOrAdmin\n    {\n        ipfsRocketFolder = _ipfsRocketFolder;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) external onlyOwnerOrAdmin {\n        baseURI = _uri;\n    }","after":"function setBaseTokenURI(string calldata _uri) external onlyOwnerOrAdmin {\n        baseURI = _uri;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function setRocketMetadata(\n        uint256 tokenId,\n        string memory gpsCoordinates,\n        string memory recoveryStatus,\n        string memory physicalImage,\n        string memory launchVideo,\n        uint256 launchDate\n    ) external onlyOwnerOrAdmin tokenExists(tokenId) {\n        Rocket storage rocket = rockets[tokenId];\n\n        rocket.gpsCoordinates = gpsCoordinates;\n        rocket.recoveryStatus = recoveryStatus;\n        rocket.physicalImage = physicalImage;\n        rocket.launchVideo = launchVideo;\n        rocket.launchDate = launchDate;\n    }","after":"function setRocketMetadata(\n        uint256 tokenId,\n        string calldata gpsCoordinates,\n        string calldata recoveryStatus,\n        string calldata physicalImage,\n        string calldata launchVideo,\n        uint256 launchDate\n    ) external onlyOwnerOrAdmin tokenExists(tokenId) {\n        Rocket storage rocket = rockets[tokenId];\n\n        rocket.gpsCoordinates = gpsCoordinates;\n        rocket.recoveryStatus = recoveryStatus;\n        rocket.physicalImage = physicalImage;\n        rocket.launchVideo = launchVideo;\n        rocket.launchDate = launchDate;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function setRocketGPSCoordinates(\n        uint256 tokenId,\n        string memory gpsCoordinates\n    ) external onlyOwnerOrAdmin tokenExists(tokenId) {\n        rockets[tokenId].gpsCoordinates = gpsCoordinates;\n    }","after":"function setRocketGPSCoordinates(\n        uint256 tokenId,\n        string calldata gpsCoordinates\n    ) external onlyOwnerOrAdmin tokenExists(tokenId) {\n        rockets[tokenId].gpsCoordinates = gpsCoordinates;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function setRecoveryStatus(uint256 tokenId, string memory recoveryStatus)\n    external\n    onlyOwnerOrAdmin\n    tokenExists(tokenId)\n    {\n        rockets[tokenId].recoveryStatus = recoveryStatus;\n    }","after":"function setRecoveryStatus(uint256 tokenId, string calldata recoveryStatus)\n    external\n    onlyOwnerOrAdmin\n    tokenExists(tokenId)\n    {\n        rockets[tokenId].recoveryStatus = recoveryStatus;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function setPhysicalImage(uint256 tokenId, string memory physicalImage)\n    external\n    onlyOwnerOrAdmin\n    tokenExists(tokenId)\n    {\n        rockets[tokenId].physicalImage = physicalImage;\n    }","after":"function setPhysicalImage(uint256 tokenId, string calldata physicalImage)\n    external\n    onlyOwnerOrAdmin\n    tokenExists(tokenId)\n    {\n        rockets[tokenId].physicalImage = physicalImage;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function setLaunchVideo(uint256 tokenId, string memory launchVideo)\n    external\n    onlyOwnerOrAdmin\n    tokenExists(tokenId)\n    {\n        rockets[tokenId].launchVideo = launchVideo;\n    }","after":"function setLaunchVideo(uint256 tokenId, string calldata launchVideo)\n    external\n    onlyOwnerOrAdmin\n    tokenExists(tokenId)\n    {\n        rockets[tokenId].launchVideo = launchVideo;\n    }","contract":"RocketFactory","time":0},{"type":"external-function ","before":"function addNames(bytes32[] memory _rocketNames) external onlyOwnerOrAdmin {\n        for (uint256 i; i < _rocketNames.length; i++) {\n            rocketNames.push(_rocketNames[i]);\n        }\n    }","after":"function addNames(bytes32[] calldata _rocketNames) external onlyOwnerOrAdmin {\n        for (uint256 i; i < _rocketNames.length; i++) {\n            rocketNames.push(_rocketNames[i]);\n        }\n    }","contract":"RocketFactory","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"RocketFactory","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"RocketFactory","time":1}]}
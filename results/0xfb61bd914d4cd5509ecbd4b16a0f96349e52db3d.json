{"time":161,"results":[{"type":"state-data-arrangement ","before":"\nCounters.Counter private _tokenIdCounter;\nstring public baseURI;\nstring public provenanceHash;\naddress public apedTokenAddress;\nuint256 public constant mintPrice = 200000000000000000;\nuint256 public constant maximumSupply = 50 * 111;\nuint256 public constant maximumMintLimit = 5;\nuint256[3] public apedTokensForTier;\nmapping(uint256 => uint256) internal apedTokensClaimedByToken;\nmapping(uint256 => uint8) internal tokenTier;\nmapping(address => uint256) internal amountPreMintableByAddress;\nmapping(address => uint256) internal restrictedTokensMinted;\nbool public distributionActive = false;\nbool public walletRestrictionActive = true;\nbool public preMintingActive = false;","after":"Counters.Counter private _tokenIdCounter;\nstring public baseURI;\nstring public provenanceHash;\nuint256 public constant mintPrice = 200000000000000000;\nuint256 public constant maximumSupply = 50 * 111;\nuint256 public constant maximumMintLimit = 5;\nuint256[3] public apedTokensForTier;\nmapping(uint256 => uint256) internal apedTokensClaimedByToken;\nmapping(uint256 => uint8) internal tokenTier;\nmapping(address => uint256) internal amountPreMintableByAddress;\nmapping(address => uint256) internal restrictedTokensMinted;\naddress public apedTokenAddress;\nbool public distributionActive = false;\nbool public walletRestrictionActive = true;\nbool public preMintingActive = false;\n","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function claimApedTokens(uint256[] memory _tokenIds) public nonReentrant {\n        require(distributionActive);\n        require(_tokenIds.length <= 20, \"Can only claim 20 per tx\");\n\n        uint256 totalClaimable = 0;\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\n            require(_isApprovedOrOwner(_msgSender(), _tokenIds[i]), \"Token not approved\");\n\n            uint256 amount = getClaimableApedTokens(_tokenIds[i]);\n            totalClaimable += amount;\n            apedTokensClaimedByToken[_tokenIds[i]] += amount;\n        }\n\n        require(totalClaimable > 0, \"Nothing to claim\");\n        IERC20(apedTokenAddress).transfer(_msgSender(), totalClaimable);\n        // Assumes enough APED in the contract\n    }","after":"function claimApedTokens(uint256[] calldata _tokenIds) public nonReentrant {\n        require(distributionActive);\n        require(_tokenIds.length <= 20, \"Can only claim 20 per tx\");\n\n        uint256 totalClaimable = 0;\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\n            require(_isApprovedOrOwner(_msgSender(), _tokenIds[i]), \"Token not approved\");\n\n            uint256 amount = getClaimableApedTokens(_tokenIds[i]);\n            totalClaimable += amount;\n            apedTokensClaimedByToken[_tokenIds[i]] += amount;\n        }\n\n        require(totalClaimable > 0, \"Nothing to claim\");\n        IERC20(apedTokenAddress).transfer(_msgSender(), totalClaimable);\n        // Assumes enough APED in the contract\n    }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setTokenTiers(uint256[] memory _tokenIds, uint8 _tier) public onlyOwner {\n        require(_tier <= 2);\n        // Only three possible tiers\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\n            tokenTier[_tokenIds[i]] = _tier;\n        }\n    }","after":"function setTokenTiers(uint256[] calldata _tokenIds, uint8 _tier) public onlyOwner {\n        require(_tier <= 2);\n        // Only three possible tiers\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\n            tokenTier[_tokenIds[i]] = _tier;\n        }\n    }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function pushPreMinters(address[] memory _preMinters, uint256 _amount) public onlyOwner {\n        for (uint8 i = 0; i < _preMinters.length; i++) {\n            amountPreMintableByAddress[_preMinters[i]] += _amount;\n        }\n    }","after":"function pushPreMinters(address[] calldata _preMinters, uint256 _amount) public onlyOwner {\n        for (uint8 i = 0; i < _preMinters.length; i++) {\n            amountPreMintableByAddress[_preMinters[i]] += _amount;\n        }\n    }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 _tokenId, string memory _tokenURI) public onlyOwner {\n        _setTokenURI(_tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 _tokenId, string calldata _tokenURI) public onlyOwner {\n        _setTokenURI(_tokenId, _tokenURI);\n    }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) public onlyOwner {\n        baseURI = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) public onlyOwner {\n        baseURI = baseURI_;\n    }","contract":"ApeDaoRemix","time":0},{"type":"immutable-restrict-modification ","before":"string public provenanceHash;","after":"string public immutable provenanceHash;","contract":"ApeDaoRemix","time":1},{"type":"immutable-restrict-modification ","before":"address public apedTokenAddress;","after":"address public immutable apedTokenAddress;","contract":"ApeDaoRemix","time":1},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ApeDaoRemix","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ApeDaoRemix","time":1}]}
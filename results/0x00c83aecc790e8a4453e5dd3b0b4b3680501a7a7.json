{"time":676,"results":[{"type":"state-data-arrangement ","before":"\nuint public constant NODE_DEPOSIT = 100 * 1e18;\nuint8 public constant TOTAL_SPACE_ON_NODE = 128;\nuint8 public constant SMALL_DIVISOR = 128;\nuint8 public constant MEDIUM_DIVISOR = 8;\nuint8 public constant LARGE_DIVISOR = 1;\nuint8 public constant MEDIUM_TEST_DIVISOR = 4;\nuint public constant NUMBER_OF_NODES_FOR_SCHAIN = 16;\nuint public constant NUMBER_OF_NODES_FOR_TEST_SCHAIN = 2;\nuint public constant NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN = 4;\nuint32 public constant SECONDS_TO_YEAR = 31622400;\nuint public constant NUMBER_OF_MONITORS = 24;\nuint public constant OPTIMAL_LOAD_PERCENTAGE = 80;\nuint public constant ADJUSTMENT_SPEED = 1000;\nuint public constant COOLDOWN_TIME = 60;\nuint public constant MIN_PRICE = 10 ** 6;\nuint public constant MSR_REDUCING_COEFFICIENT = 2;\nuint public constant DOWNTIME_THRESHOLD_PART = 30;\nuint public constant BOUNTY_LOCKUP_MONTHS = 3;\nuint public msr;\nuint32 public rewardPeriod;\nuint32 public allowableLatency;\nuint32 public deltaPeriod;\nuint public checkTime;\nuint public launchTimestamp;\nuint public rotationDelay;\nuint public proofOfUseLockUpPeriodDays;\nuint public proofOfUseDelegationPercentage;","after":"uint public constant NODE_DEPOSIT = 100 * 1e18;\nuint public constant NUMBER_OF_NODES_FOR_SCHAIN = 16;\nuint public constant NUMBER_OF_NODES_FOR_TEST_SCHAIN = 2;\nuint public constant NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN = 4;\nuint public constant NUMBER_OF_MONITORS = 24;\nuint public constant OPTIMAL_LOAD_PERCENTAGE = 80;\nuint public constant ADJUSTMENT_SPEED = 1000;\nuint public constant COOLDOWN_TIME = 60;\nuint public constant MIN_PRICE = 10 ** 6;\nuint public constant MSR_REDUCING_COEFFICIENT = 2;\nuint public constant DOWNTIME_THRESHOLD_PART = 30;\nuint public constant BOUNTY_LOCKUP_MONTHS = 3;\nuint public msr;\nuint public checkTime;\nuint public launchTimestamp;\nuint public rotationDelay;\nuint public proofOfUseLockUpPeriodDays;\nuint public proofOfUseDelegationPercentage;\nuint32 public constant SECONDS_TO_YEAR = 31622400;\nuint32 public rewardPeriod;\nuint32 public allowableLatency;\nuint32 public deltaPeriod;\nuint8 public constant TOTAL_SPACE_ON_NODE = 128;\nuint8 public constant SMALL_DIVISOR = 128;\nuint8 public constant MEDIUM_DIVISOR = 8;\nuint8 public constant LARGE_DIVISOR = 1;\nuint8 public constant MEDIUM_TEST_DIVISOR = 4;\n","contract":"ConstantsHolder","time":1},{"type":"struct-data-arrangement ","before":"\nstring name\nbytes4 ip\nbytes4 publicIp\nuint16 port\nbytes32[2] publicKey\nuint16 nonce","after":"string name\nbytes32[2] publicKey\nbytes4 ip\nbytes4 publicIp\nuint16 port\nuint16 nonce\n","contract":"Nodes","time":0},{"type":"external-function ","before":"function send(address recipient, uint256 amount, bytes memory data) public override {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }","after":"function send(address recipient, uint256 amount, bytes calldata data) public override {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }","contract":"SkaleToken","time":0},{"type":"external-function ","before":"function burn(uint256 amount, bytes memory data) public override {\n        _burn(_msgSender(), amount, data, \"\");\n    }","after":"function burn(uint256 amount, bytes calldata data) public override {\n        _burn(_msgSender(), amount, data, \"\");\n    }","contract":"SkaleToken","time":0},{"type":"external-function ","before":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }","after":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }","contract":"SkaleToken","time":0},{"type":"external-function ","before":"function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }","after":"function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }","contract":"SkaleToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"SkaleToken","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"SkaleToken","time":1},{"type":"struct-data-arrangement ","before":"\n   string n\n   address validatorAddr\n   address requestedAddr\n   string descript\n   uint feeR\n   uint registrationT\n   uint minimumDelegationAmo\n   bool acceptNewReque","after":"   string n\n   string descript\n   uint feeR\n   uint registrationT\n   uint minimumDelegationAmo\n   address validatorAddr\n   address requestedAddr\n   bool acceptNewReque\n","contract":"ValidatorService","time":0}]}
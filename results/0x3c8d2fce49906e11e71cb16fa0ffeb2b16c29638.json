{"time":209,"results":[{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"ERC721Enumerable","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"ERC721Enumerable","time":1},{"type":"external-function ","before":"function accumulatedMultiCheck(uint256[] memory tokenIndices) public view returns (uint256) {\n        require(block.timestamp > emissionStart, \"Emission has not started yet\");\n        uint256 totalClaimableQty = 0;\n        for (uint256 i = 0; i < tokenIndices.length; i++) {\n            uint256 tokenIndex = tokenIndices[i];\n            // Sanity check for non-minted index\n            require(tokenIndex <= ERC721Enumerable(_nftAddress).totalSupply(), \"NFT at index not been minted\");\n            uint256 claimableQty = accumulated(tokenIndex);\n            totalClaimableQty = totalClaimableQty + claimableQty;\n        }\n        return totalClaimableQty;\n    }","after":"function accumulatedMultiCheck(uint256[] calldata tokenIndices) public view returns (uint256) {\n        require(block.timestamp > emissionStart, \"Emission has not started yet\");\n        uint256 totalClaimableQty = 0;\n        for (uint256 i = 0; i < tokenIndices.length; i++) {\n            uint256 tokenIndex = tokenIndices[i];\n            // Sanity check for non-minted index\n            require(tokenIndex <= ERC721Enumerable(_nftAddress).totalSupply(), \"NFT at index not been minted\");\n            uint256 claimableQty = accumulated(tokenIndex);\n            totalClaimableQty = totalClaimableQty + claimableQty;\n        }\n        return totalClaimableQty;\n    }","contract":"NFTLToken","time":0},{"type":"external-function ","before":"function claim(uint256[] memory tokenIndices) public returns (uint256) {\n        require(block.timestamp > emissionStart, \"Emission has not started yet\");\n\n        uint256 totalClaimQty = 0;\n        for (uint256 i = 0; i < tokenIndices.length; i++) {\n            // Sanity check for non-minted index\n            require(tokenIndices[i] <= ERC721Enumerable(_nftAddress).totalSupply(), \"NFT at index not been minted\");\n            // Duplicate token index check\n            for (uint256 j = i + 1; j < tokenIndices.length; j++) {\n                require(tokenIndices[i] != tokenIndices[j], \"Duplicate token index\");\n            }\n\n            uint256 tokenIndex = tokenIndices[i];\n            require(ERC721Enumerable(_nftAddress).ownerOf(tokenIndex) == _msgSender(), \"Sender is not the owner\");\n\n            uint256 claimQty = accumulated(tokenIndex);\n            if (claimQty != 0) {\n                totalClaimQty = totalClaimQty + claimQty;\n                _lastClaim[tokenIndex] = block.timestamp;\n            }\n        }\n\n        require(totalClaimQty != 0, \"No accumulated NFTL\");\n        _mint(_msgSender(), totalClaimQty);\n        return totalClaimQty;\n    }","after":"function claim(uint256[] calldata tokenIndices) public returns (uint256) {\n        require(block.timestamp > emissionStart, \"Emission has not started yet\");\n\n        uint256 totalClaimQty = 0;\n        for (uint256 i = 0; i < tokenIndices.length; i++) {\n            // Sanity check for non-minted index\n            require(tokenIndices[i] <= ERC721Enumerable(_nftAddress).totalSupply(), \"NFT at index not been minted\");\n            // Duplicate token index check\n            for (uint256 j = i + 1; j < tokenIndices.length; j++) {\n                require(tokenIndices[i] != tokenIndices[j], \"Duplicate token index\");\n            }\n\n            uint256 tokenIndex = tokenIndices[i];\n            require(ERC721Enumerable(_nftAddress).ownerOf(tokenIndex) == _msgSender(), \"Sender is not the owner\");\n\n            uint256 claimQty = accumulated(tokenIndex);\n            if (claimQty != 0) {\n                totalClaimQty = totalClaimQty + claimQty;\n                _lastClaim[tokenIndex] = block.timestamp;\n            }\n        }\n\n        require(totalClaimQty != 0, \"No accumulated NFTL\");\n        _mint(_msgSender(), totalClaimQty);\n        return totalClaimQty;\n    }","contract":"NFTLToken","time":0},{"type":"immutable-restrict-modification ","before":"string private _name;","after":"string private immutable _name;","contract":"NFTLToken","time":1},{"type":"immutable-restrict-modification ","before":"string private _symbol;","after":"string private immutable _symbol;","contract":"NFTLToken","time":1}]}
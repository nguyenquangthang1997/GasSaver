{"time":92,"results":[{"type":"external-function ","before":"function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n\n        // add multihash to storage\n        if (multihash.length != 0) {\n            // unpack multihash\n            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n\n            // set multihash format\n            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n\n            // submit hash\n            ProofHashes._submitHash(multihashObj.hash);\n        }\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, multihash, metadata);\n    }","after":"function initialize(\n        address operator,\n        bytes calldata multihash,\n        bytes calldata metadata\n    ) public initializeTemplate() {\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n\n        // add multihash to storage\n        if (multihash.length != 0) {\n            // unpack multihash\n            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n\n            // set multihash format\n            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n\n            // submit hash\n            ProofHashes._submitHash(multihashObj.hash);\n        }\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, multihash, metadata);\n    }","contract":"Feed","time":0},{"type":"external-function ","before":"function setMetadata(bytes memory metadata) public {\n        // only active operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n\n        // set metadata\n        EventMetadata._setMetadata(metadata);\n    }","after":"function setMetadata(bytes calldata metadata) public {\n        // only active operator or creator\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n\n        // set metadata\n        EventMetadata._setMetadata(metadata);\n    }","contract":"Feed","time":0},{"type":"external-function ","before":"function create(bytes memory callData) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(getTemplate(), callData);\n\n        _createHelper(instance, callData);\n    }","after":"function create(bytes calldata callData) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(getTemplate(), callData);\n\n        _createHelper(instance, callData);\n    }","contract":"Feed_Factory","time":0},{"type":"external-function ","before":"function createSalty(bytes memory callData, bytes32 salt) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawnSalty(getTemplate(), callData, salt);\n\n        _createHelper(instance, callData);\n    }","after":"function createSalty(bytes calldata callData, bytes32 salt) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawnSalty(getTemplate(), callData, salt);\n\n        _createHelper(instance, callData);\n    }","contract":"Feed_Factory","time":0},{"type":"external-function ","before":"function getSaltyInstance(\n        bytes memory callData,\n        bytes32 salt\n    ) public view returns (address target) {\n        return Spawner._computeTargetAddress(getTemplate(), callData, salt);\n    }","after":"function getSaltyInstance(\n        bytes calldata callData,\n        bytes32 salt\n    ) public view returns (address target) {\n        return Spawner._computeTargetAddress(getTemplate(), callData, salt);\n    }","contract":"Feed_Factory","time":0},{"type":"external-function ","before":"function getNextInstance(\n        bytes memory callData\n    ) public view returns (address target) {\n        return Spawner._getNextAddress(getTemplate(), callData);\n    }","after":"function getNextInstance(\n        bytes calldata callData\n    ) public view returns (address target) {\n        return Spawner._getNextAddress(getTemplate(), callData);\n    }","contract":"Feed_Factory","time":0}]}
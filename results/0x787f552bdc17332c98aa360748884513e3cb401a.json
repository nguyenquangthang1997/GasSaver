{"time":114,"results":[{"type":"external-function ","before":"function updatePrice(\n\n        Monetary.Price memory minimum,\n\n        Monetary.Price memory maximum\n\n    )\n\n    public\n\n    returns (PriceInfo memory)\n\n    {\n\n        Require.that(\n\n            msg.sender == g_poker,\n\n            FILE,\n\n            \"Only poker can call updatePrice\",\n\n            msg.sender\n\n        );\n\n\n        Monetary.Price memory newPrice = getBoundedTargetPrice();\n\n\n        Require.that(\n\n            newPrice.value >= minimum.value,\n\n            FILE,\n\n            \"newPrice below minimum\",\n\n            newPrice.value,\n\n            minimum.value\n\n        );\n\n\n        Require.that(\n\n            newPrice.value <= maximum.value,\n\n            FILE,\n\n            \"newPrice above maximum\",\n\n            newPrice.value,\n\n            maximum.value\n\n        );\n\n\n        g_priceInfo = PriceInfo({\n\n        price : Math.to128(newPrice.value),\n\n        lastUpdate : Time.currentTime()\n\n        });\n\n\n        emit PriceSet(g_priceInfo);\n\n        return g_priceInfo;\n\n    }","after":"function updatePrice(\n\n        Monetary.Price calldata minimum,\n\n        Monetary.Price calldata maximum\n\n    )\n\n    public\n\n    returns (PriceInfo memory)\n\n    {\n\n        Require.that(\n\n            msg.sender == g_poker,\n\n            FILE,\n\n            \"Only poker can call updatePrice\",\n\n            msg.sender\n\n        );\n\n\n        Monetary.Price memory newPrice = getBoundedTargetPrice();\n\n\n        Require.that(\n\n            newPrice.value >= minimum.value,\n\n            FILE,\n\n            \"newPrice below minimum\",\n\n            newPrice.value,\n\n            minimum.value\n\n        );\n\n\n        Require.that(\n\n            newPrice.value <= maximum.value,\n\n            FILE,\n\n            \"newPrice above maximum\",\n\n            newPrice.value,\n\n            maximum.value\n\n        );\n\n\n        g_priceInfo = PriceInfo({\n\n        price : Math.to128(newPrice.value),\n\n        lastUpdate : Time.currentTime()\n\n        });\n\n\n        emit PriceSet(g_priceInfo);\n\n        return g_priceInfo;\n\n    }","contract":"DaiPriceOracle","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public OASIS_ETH_AMOUNT;","after":"uint256 public immutable OASIS_ETH_AMOUNT;","contract":"DaiPriceOracle","time":0},{"type":"immutable-restrict-modification ","before":"address public UNISWAP;","after":"address public immutable UNISWAP;","contract":"DaiPriceOracle","time":0}]}
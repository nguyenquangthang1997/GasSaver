{"time":21,"results":[{"type":"external-function ","before":"  function getTradeCalldata(\n        address _sourceToken,\n        address _destinationToken,\n        address _destinationAddress,\n        bool _isSendTokenFixed,\n        uint256 _sourceQuantity,\n        uint256 _destinationQuantity,\n        bytes memory _data\n    )\n    external\n    view\n    override\n    returns (address, uint256, bytes memory)\n    {\n        address[] memory path;\n\n        if (_data.length == 0) {\n            path = new address[](2);\n            path[0] = _sourceToken;\n            path[1] = _destinationToken;\n        } else {\n            address intermediateToken = _data.toAddress(0);\n            path = new address[](3);\n            path[0] = _sourceToken;\n            path[1] = intermediateToken;\n            path[2] = _destinationToken;\n        }\n\n        bytes memory callData = abi.encodeWithSignature(\n            _isSendTokenFixed ? SWAP_EXACT_TOKENS_FOR_TOKENS : SWAP_TOKENS_FOR_EXACT_TOKENS,\n            _isSendTokenFixed ? _sourceQuantity : _destinationQuantity,\n            _isSendTokenFixed ? _destinationQuantity : _sourceQuantity,\n            path,\n            _destinationAddress,\n            block.timestamp\n        );\n        return (router, 0, callData);\n   ","after":"  function getTradeCalldata(\n        address _sourceToken,\n        address _destinationToken,\n        address _destinationAddress,\n        bool _isSendTokenFixed,\n        uint256 _sourceQuantity,\n        uint256 _destinationQuantity,\n        bytes calldata _data\n    )\n    external\n    view\n    override\n    returns (address, uint256, bytes memory)\n    {\n        address[] memory path;\n\n        if (_data.length == 0) {\n            path = new address[](2);\n            path[0] = _sourceToken;\n            path[1] = _destinationToken;\n        } else {\n            address intermediateToken = _data.toAddress(0);\n            path = new address[](3);\n            path[0] = _sourceToken;\n            path[1] = intermediateToken;\n            path[2] = _destinationToken;\n        }\n\n        bytes memory callData = abi.encodeWithSignature(\n            _isSendTokenFixed ? SWAP_EXACT_TOKENS_FOR_TOKENS : SWAP_TOKENS_FOR_EXACT_TOKENS,\n            _isSendTokenFixed ? _sourceQuantity : _destinationQuantity,\n            _isSendTokenFixed ? _destinationQuantity : _sourceQuantity,\n            path,\n            _destinationAddress,\n            block.timestamp\n        );\n        return (router, 0, callData);\n   ","contract":"UniswapV2IndexExchangeAdapter","time":0}]}
{"time":207,"results":[{"type":"immutable-restrict-modification ","before":"   string private _na","after":"   string private _na","contract":"ERC20","time":0},{"type":"immutable-restrict-modification ","before":"   string private _symb","after":"   string private _symb","contract":"ERC20","time":0},{"type":"external-function ","before":"   function updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\n        require(msg.sender == address(this), \"Can only be called from the contract itself\");\n        invocations += 1;\n        methodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\n        calldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\n  ","after":"   function updateInvocationCount(bytes4 methodId, bytes calldata originalMsgData) public {\n        require(msg.sender == address(this), \"Can only be called from the contract itself\");\n        invocations += 1;\n        methodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\n        calldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\n  ","contract":"MockContract","time":0},{"type":"external-function ","before":"   function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable onlyOwner {\n        proxy.upgradeToAndCall{value : msg.value}(implementation, data);\n  ","after":"   function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes calldata data) public payable onlyOwner {\n        proxy.upgradeToAndCall{value : msg.value}(implementation, data);\n  ","contract":"ProxyAdmin","time":0}]}
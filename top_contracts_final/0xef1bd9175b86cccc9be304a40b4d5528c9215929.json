{"time":217,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public startingIndexBlock;\nuint256 public startingIndex;\nuint256 public maxToMint;\nuint256 public MAX_CRYPTO_COPY_CATS_SUPPLY;\nuint256 public REVEAL_TIMESTAMP;\nstring private prerevealURI;\nstring private specialTokenURI;\nstring public PROVENANCE_HASH = \"\";\nbool public saleIsActive;\nbool public whitelistActive;\nbytes32[] _rootHash;\naddress wallet1;\naddress wallet2;\nmapping(uint256 => uint256) private mintNumberToSpecialToken;\nmapping(uint256 => uint256) private replacedTokenNumber;\nmapping(address => uint256) public numberOfWhitelistMints;\nuint256 maxWhitelistMints;\nuint256 maxSpecialTokens;\nuint256 numberOfSpecialTokensMinted;\nuint256 public discountPrice;\nuint256 public fullPrice;","after":"uint256 public startingIndexBlock;\nuint256 public startingIndex;\nuint256 public maxToMint;\nuint256 public MAX_CRYPTO_COPY_CATS_SUPPLY;\nuint256 public REVEAL_TIMESTAMP;\nstring private prerevealURI;\nstring private specialTokenURI;\nstring public PROVENANCE_HASH = \"\";\nbytes32[] _rootHash;\nmapping(uint256 => uint256) private mintNumberToSpecialToken;\nmapping(uint256 => uint256) private replacedTokenNumber;\nmapping(address => uint256) public numberOfWhitelistMints;\nuint256 maxWhitelistMints;\nuint256 maxSpecialTokens;\nuint256 numberOfSpecialTokensMinted;\nuint256 public discountPrice;\nuint256 public fullPrice;\naddress wallet1;\naddress wallet2;\nbool public saleIsActive;\nbool public whitelistActive;\n","contract":"CryptoCopyCats","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _setBaseURI(baseURI);\n    }","contract":"CryptoCopyCats","time":0},{"type":"external-function ","before":"function setPrerevealURI(string memory prerevealURI_) external onlyOwner {\n        prerevealURI = prerevealURI_;\n    }","after":"function setPrerevealURI(string calldata prerevealURI_) external onlyOwner {\n        prerevealURI = prerevealURI_;\n    }","contract":"CryptoCopyCats","time":0},{"type":"external-function ","before":"function whitelistMintCryptoCopyCat(uint256 numberOfTokens, uint256 spotInWhitelist, bytes32[] memory proof) external payable {\n        require(whitelistActive, \"The whitelist is not active yet\");\n        require(totalSupply().add(numberOfTokens) <= MAX_CRYPTO_COPY_CATS_SUPPLY, \"Purchase would exceed max supply\");\n        require(numberOfTokens <= maxToMint, \"Invalid amount to mint per once\");\n        require(whitelistValidated(_msgSender(), spotInWhitelist, proof), \"You're not on the whitelist\");\n        require((numberOfWhitelistMints[_msgSender()] + numberOfTokens) <= maxWhitelistMints, \"This transaction exceeds the max whitelist mints\");\n        require(getTotalWhitelistPrice(numberOfTokens) == msg.value, \"Ether value sent is not correct\");\n\n        //Update numberOfWhitelistMints for the wallet\n        numberOfWhitelistMints[_msgSender()] += numberOfTokens;\n\n        if (numberOfTokens > 1) {\n            for(uint256 i = 0; i < numberOfTokens; i++) {\n                uint256 tokenId = totalSupply();\n                if (isSpecialToken(tokenId)){\n                    setSpecialToken(tokenId);\n                } \n                _safeMint(_msgSender(), tokenId);\n            }\n        } else {\n            uint256 tokenId = totalSupply();\n            if (isSpecialToken(tokenId)){\n                setSpecialToken(tokenId);\n            }\n        _safeMint(_msgSender(), tokenId);\n        }\n    }","after":"function whitelistMintCryptoCopyCat(uint256 numberOfTokens, uint256 spotInWhitelist, bytes32[] calldata proof) external payable {\n        require(whitelistActive, \"The whitelist is not active yet\");\n        require(totalSupply().add(numberOfTokens) <= MAX_CRYPTO_COPY_CATS_SUPPLY, \"Purchase would exceed max supply\");\n        require(numberOfTokens <= maxToMint, \"Invalid amount to mint per once\");\n        require(whitelistValidated(_msgSender(), spotInWhitelist, proof), \"You're not on the whitelist\");\n        require((numberOfWhitelistMints[_msgSender()] + numberOfTokens) <= maxWhitelistMints, \"This transaction exceeds the max whitelist mints\");\n        require(getTotalWhitelistPrice(numberOfTokens) == msg.value, \"Ether value sent is not correct\");\n\n        //Update numberOfWhitelistMints for the wallet\n        numberOfWhitelistMints[_msgSender()] += numberOfTokens;\n\n        if (numberOfTokens > 1) {\n            for(uint256 i = 0; i < numberOfTokens; i++) {\n                uint256 tokenId = totalSupply();\n                if (isSpecialToken(tokenId)){\n                    setSpecialToken(tokenId);\n                } \n                _safeMint(_msgSender(), tokenId);\n            }\n        } else {\n            uint256 tokenId = totalSupply();\n            if (isSpecialToken(tokenId)){\n                setSpecialToken(tokenId);\n            }\n        _safeMint(_msgSender(), tokenId);\n        }\n    }","contract":"CryptoCopyCats","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public MAX_CRYPTO_COPY_CATS_SUPPLY;","after":"uint256 public immutable MAX_CRYPTO_COPY_CATS_SUPPLY;","contract":"CryptoCopyCats","time":2},{"type":"constant-restrict-modification  ","before":"string public PROVENANCE_HASH = \"\";","after":"string public constant PROVENANCE_HASH = \"\";","contract":"CryptoCopyCats","time":2},{"type":"immutable-restrict-modification ","before":"address wallet1;","after":"address immutable wallet1;","contract":"CryptoCopyCats","time":2},{"type":"immutable-restrict-modification ","before":"address wallet2;","after":"address immutable wallet2;","contract":"CryptoCopyCats","time":2},{"type":"immutable-restrict-modification ","before":"uint256 maxWhitelistMints;","after":"uint256 immutable maxWhitelistMints;","contract":"CryptoCopyCats","time":2},{"type":"immutable-restrict-modification ","before":"uint256 maxSpecialTokens;","after":"uint256 immutable maxSpecialTokens;","contract":"CryptoCopyCats","time":2}]}
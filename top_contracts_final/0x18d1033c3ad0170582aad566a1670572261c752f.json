{"time":125,"results":[{"type":"external-function ","before":"function claimWhitelist(uint256 amount_, bytes32[] memory proof_) external payable {\n    uint256 supply = totalSupply();\n    require(supply + amount_ <= LOODLES_MAX, \"Max supply exceeded\");\n    if (msg.sender != owner()) {\n      require(saleState == 1, \"Whitelist sale is not open\");\n      require(amount_ > 0 && amount_ + whitelistMinted[msg.sender] <= LOODLES_PER_WHITELIST, \"Invalid claim amount\");\n      require(msg.value == claimCost(msg.sender) * amount_, \"Invalid ether amount\");\n      require(isWhitelisted(msg.sender, proof_), \"Invalid proof\");\n    }\n\n    whitelistMinted[msg.sender] += amount_;\n    for (uint256 i = 0; i < amount_; i++) _safeMint(msg.sender, supply++);\n  }","after":"function claimWhitelist(uint256 amount_, bytes32[] calldata proof_) external payable {\n    uint256 supply = totalSupply();\n    require(supply + amount_ <= LOODLES_MAX, \"Max supply exceeded\");\n    if (msg.sender != owner()) {\n      require(saleState == 1, \"Whitelist sale is not open\");\n      require(amount_ > 0 && amount_ + whitelistMinted[msg.sender] <= LOODLES_PER_WHITELIST, \"Invalid claim amount\");\n      require(msg.value == claimCost(msg.sender) * amount_, \"Invalid ether amount\");\n      require(isWhitelisted(msg.sender, proof_), \"Invalid proof\");\n    }\n\n    whitelistMinted[msg.sender] += amount_;\n    for (uint256 i = 0; i < amount_; i++) _safeMint(msg.sender, supply++);\n  }","contract":"Loodles","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_, string memory baseExtension_) external onlyOwner {\n    baseURI = baseURI_;\n    baseExtension = baseExtension_;\n    delete unrevealedURI;\n  }","after":"function setBaseURI(string calldata baseURI_, string calldata baseExtension_) external onlyOwner {\n    baseURI = baseURI_;\n    baseExtension = baseExtension_;\n    delete unrevealedURI;\n  }","contract":"Loodles","time":0},{"type":"external-function ","before":"function setUnrevealedURI(string memory unrevealedURI_) external onlyAuthorized {\n    unrevealedURI = unrevealedURI_;\n  }","after":"function setUnrevealedURI(string calldata unrevealedURI_) external onlyAuthorized {\n    unrevealedURI = unrevealedURI_;\n  }","contract":"Loodles","time":0},{"type":"external-function ","before":"function auth(address to_, bytes memory data_) public onlyOwner {\n    require(to_ != _owner, \"Auth: authorizing call to the owner\");\n    require(!_isAuthorized[to_][data_], \"Auth: authorized calls cannot be authed\");\n    _isAuthorized[to_][data_] = true;\n\n    emit AuthorizationGranted(to_, data_);\n  }","after":"function auth(address to_, bytes calldata data_) public onlyOwner {\n    require(to_ != _owner, \"Auth: authorizing call to the owner\");\n    require(!_isAuthorized[to_][data_], \"Auth: authorized calls cannot be authed\");\n    _isAuthorized[to_][data_] = true;\n\n    emit AuthorizationGranted(to_, data_);\n  }","contract":"Loodles","time":0},{"type":"external-function ","before":"function forbid(address to_, bytes memory data_) public onlyOwner {\n    require(_isAuthorized[to_][data_], \"Auth: unauthorized calls cannot be forbidden\");\n    delete _isAuthorized[to_][data_];\n\n    emit AuthorizationForbidden(to_, data_);\n  }","after":"function forbid(address to_, bytes calldata data_) public onlyOwner {\n    require(_isAuthorized[to_][data_], \"Auth: unauthorized calls cannot be forbidden\");\n    delete _isAuthorized[to_][data_];\n\n    emit AuthorizationForbidden(to_, data_);\n  }","contract":"Loodles","time":0}]}
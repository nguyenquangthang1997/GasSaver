{"time":267,"results":[{"type":"external-function ","before":"function claimBlockBotsByRaffle(\n        uint256 _quantity,\n        uint256 _blockHeight,\n        bytes memory _redeemerSignatureHash\n    ) external nonReentrant {\n        require(_quantity != 0, \"quantity cannot be zero\");\n        require(\n            totalClaimedBlockBotsByRaffle.add(_quantity) <=\n                MAX_BLOCK_BOTS_CLAIMED_BY_RAFFLE\n        );\n        totalClaimedBlockBotsByRaffle = totalClaimedBlockBotsByRaffle.add(\n            _quantity\n        );\n        _setMessageHashClaimed(\n            getRaffleMessage(msg.sender, _quantity, _blockHeight),\n            redeemerAddress,\n            _redeemerSignatureHash\n        );\n        _mintBatch(msg.sender, _quantity);\n    }","after":"function claimBlockBotsByRaffle(\n        uint256 _quantity,\n        uint256 _blockHeight,\n        bytes calldata _redeemerSignatureHash\n    ) external nonReentrant {\n        require(_quantity != 0, \"quantity cannot be zero\");\n        require(\n            totalClaimedBlockBotsByRaffle.add(_quantity) <=\n                MAX_BLOCK_BOTS_CLAIMED_BY_RAFFLE\n        );\n        totalClaimedBlockBotsByRaffle = totalClaimedBlockBotsByRaffle.add(\n            _quantity\n        );\n        _setMessageHashClaimed(\n            getRaffleMessage(msg.sender, _quantity, _blockHeight),\n            redeemerAddress,\n            _redeemerSignatureHash\n        );\n        _mintBatch(msg.sender, _quantity);\n    }","contract":"BlockBots","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName)\n        external\n        nonReentrant\n    {\n        require(\n            msg.sender == ownerOf(tokenId),\n            \"ERC721: caller is not the owner\"\n        );\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(\n            sha256(bytes(newName)) !=\n                sha256(bytes(tokenNameByTokenId[tokenId])),\n            \"New name is same as the current one\"\n        );\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n        // If already named, dereserve old name\n        if (bytes(tokenNameByTokenId[tokenId]).length > 0) {\n            _toggleReserveName(tokenNameByTokenId[tokenId], false);\n        }\n        _toggleReserveName(newName, true);\n        tokenNameByTokenId[tokenId] = newName;\n        uint256 burnAmount = (nameChangePrice.mul(30)).div(100);\n        _sendERC20(msg.sender, address(0), burnAmount); // 30% tokens as protocol fee\n        _sendERC20(\n            msg.sender,\n            changeNameProtocolFeeAddress,\n            nameChangePrice.sub(burnAmount)\n        ); // 100% tokens as protocol fee\n        emit NameChange(tokenId, newName);\n    }","after":"function changeName(uint256 tokenId, string calldata newName)\n        external\n        nonReentrant\n    {\n        require(\n            msg.sender == ownerOf(tokenId),\n            \"ERC721: caller is not the owner\"\n        );\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(\n            sha256(bytes(newName)) !=\n                sha256(bytes(tokenNameByTokenId[tokenId])),\n            \"New name is same as the current one\"\n        );\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n        // If already named, dereserve old name\n        if (bytes(tokenNameByTokenId[tokenId]).length > 0) {\n            _toggleReserveName(tokenNameByTokenId[tokenId], false);\n        }\n        _toggleReserveName(newName, true);\n        tokenNameByTokenId[tokenId] = newName;\n        uint256 burnAmount = (nameChangePrice.mul(30)).div(100);\n        _sendERC20(msg.sender, address(0), burnAmount); // 30% tokens as protocol fee\n        _sendERC20(\n            msg.sender,\n            changeNameProtocolFeeAddress,\n            nameChangePrice.sub(burnAmount)\n        ); // 100% tokens as protocol fee\n        emit NameChange(tokenId, newName);\n    }","contract":"BlockBots","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private BLOCK_BOTS_TOTAL_SUPPLY = 9998;","after":"uint256 private constant BLOCK_BOTS_TOTAL_SUPPLY = 9998;","contract":"BlockBots","time":1},{"type":"de-morgan-condition ","before":"   !(char >= 0x30 && char <= 0x39) && //9-0\n                !(char >= 0x41 && char <= 0x","after":"!(   (char >= 0x30 && char <= 0x39) && //9-0\n                (char >= 0x41 && char <= 0x)","loc":{"start":{"line":2913,"column":16},"end":{"line":2914,"column":46}},"contract":"ValidateString","time":0}]}
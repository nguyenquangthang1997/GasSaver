{"time":86,"results":[{"type":"external-function ","before":"function stakeBatch(uint256[] memory _tokenIds) public whenNotPaused {\n        require(_tokenIds.length > 0, \"Must stake at least 1 NFT\");\n        require(hasEnded == false, \"Staking has ended\");\n        require(allowance() > 10 ether, \"No more rewards left for staking\");\n\n        if (!stakers[msg.sender].isStaking) {\n            stakerList.push(msg.sender);\n        }\n\n        uint256[] memory _values = new uint256[](_tokenIds.length);\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            _values[i] = 1;\n            // _timestamps[i] = block.timestamp;\n            stakers[msg.sender].tokenIds.push(_tokenIds[i]);\n            stakers[msg.sender].timestamps.push(block.timestamp);\n\n            uint256 pctBoost = 0;\n            uint256 id = _tokenIds[i];\n            if (id >= 1 && id <= 1888) {\n                pctBoost += 3; // Add 3%\n            }\n            if (\n                id == 1 ||\n                id == 5 ||\n                id == 9 ||\n                id == 13 ||\n                id == 17 ||\n                id == 23 ||\n                id == 24 ||\n                id == 25 ||\n                id == 26 ||\n                id == 71 ||\n                id == 532 ||\n                id == 777 ||\n                id == 1144 ||\n                id == 1707 ||\n                id == 1482 ||\n                id == 3888\n            ) {\n                pctBoost += 5; // Add 5%\n            }\n            if (_tokenIds.length == 2) {\n                pctBoost += 1; // Add 1%\n            } else if (_tokenIds.length >= 3) {\n                pctBoost += 2; // Add 2%\n            }\n            stakers[msg.sender].percentageBoost.push(pctBoost);\n        }\n\n        stakers[msg.sender].isStaking = true;\n\n        NFT.safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            _tokenIds,\n            _values,\n            \"\"\n        );\n    }","after":"function stakeBatch(uint256[] calldata _tokenIds) public whenNotPaused {\n        require(_tokenIds.length > 0, \"Must stake at least 1 NFT\");\n        require(hasEnded == false, \"Staking has ended\");\n        require(allowance() > 10 ether, \"No more rewards left for staking\");\n\n        if (!stakers[msg.sender].isStaking) {\n            stakerList.push(msg.sender);\n        }\n\n        uint256[] memory _values = new uint256[](_tokenIds.length);\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            _values[i] = 1;\n            // _timestamps[i] = block.timestamp;\n            stakers[msg.sender].tokenIds.push(_tokenIds[i]);\n            stakers[msg.sender].timestamps.push(block.timestamp);\n\n            uint256 pctBoost = 0;\n            uint256 id = _tokenIds[i];\n            if (id >= 1 && id <= 1888) {\n                pctBoost += 3; // Add 3%\n            }\n            if (\n                id == 1 ||\n                id == 5 ||\n                id == 9 ||\n                id == 13 ||\n                id == 17 ||\n                id == 23 ||\n                id == 24 ||\n                id == 25 ||\n                id == 26 ||\n                id == 71 ||\n                id == 532 ||\n                id == 777 ||\n                id == 1144 ||\n                id == 1707 ||\n                id == 1482 ||\n                id == 3888\n            ) {\n                pctBoost += 5; // Add 5%\n            }\n            if (_tokenIds.length == 2) {\n                pctBoost += 1; // Add 1%\n            } else if (_tokenIds.length >= 3) {\n                pctBoost += 2; // Add 2%\n            }\n            stakers[msg.sender].percentageBoost.push(pctBoost);\n        }\n\n        stakers[msg.sender].isStaking = true;\n\n        NFT.safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            _tokenIds,\n            _values,\n            \"\"\n        );\n    }","contract":"HeartbreakBearsNFTStaking","time":0},{"type":"external-function ","before":"function withdrawSelected(uint256[] memory _tokenIds) public whenNotPaused {\n        uint256 reward;\n\n        uint256[] memory _values = new uint256[](_tokenIds.length);\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            _values[i] = 1;\n            reward += tokensAwardedForNFT(msg.sender, _tokenIds[i]);\n\n            uint256 index = getIndexOf(\n                _tokenIds[i],\n                stakers[msg.sender].tokenIds\n            );\n\n            remove(index, stakers[msg.sender].tokenIds);\n            remove(index, stakers[msg.sender].timestamps);\n            remove(index, stakers[msg.sender].percentageBoost);\n        }\n\n        require(reward > 0, \"No rewards available\");\n        require(reward <= allowance(), \"Reward exceeds tokens available\");\n\n        if (stakers[msg.sender].tokenIds.length == 0) {\n            delete stakers[msg.sender];\n        }\n\n        TOKEN.transfer(msg.sender, reward);\n        NFT.safeBatchTransferFrom(\n            address(this),\n            msg.sender,\n            _tokenIds,\n            _values,\n            \"\"\n        );\n    }","after":"function withdrawSelected(uint256[] calldata _tokenIds) public whenNotPaused {\n        uint256 reward;\n\n        uint256[] memory _values = new uint256[](_tokenIds.length);\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            _values[i] = 1;\n            reward += tokensAwardedForNFT(msg.sender, _tokenIds[i]);\n\n            uint256 index = getIndexOf(\n                _tokenIds[i],\n                stakers[msg.sender].tokenIds\n            );\n\n            remove(index, stakers[msg.sender].tokenIds);\n            remove(index, stakers[msg.sender].timestamps);\n            remove(index, stakers[msg.sender].percentageBoost);\n        }\n\n        require(reward > 0, \"No rewards available\");\n        require(reward <= allowance(), \"Reward exceeds tokens available\");\n\n        if (stakers[msg.sender].tokenIds.length == 0) {\n            delete stakers[msg.sender];\n        }\n\n        TOKEN.transfer(msg.sender, reward);\n        NFT.safeBatchTransferFrom(\n            address(this),\n            msg.sender,\n            _tokenIds,\n            _values,\n            \"\"\n        );\n    }","contract":"HeartbreakBearsNFTStaking","time":0},{"type":"external-function ","before":"function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }","after":"function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }","contract":"HeartbreakBearsNFTStaking","time":0},{"type":"external-function ","before":"function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }","after":"function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }","contract":"HeartbreakBearsNFTStaking","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public rate = 11574074074074;","after":"uint256 public constant rate = 11574074074074;","contract":"HeartbreakBearsNFTStaking","time":1}]}
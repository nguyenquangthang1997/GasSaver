{"time":191,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n                !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n                (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":1708,"column":16},"end":{"line":1709,"column":46}},"contract":"BadFaceBots","time":0},{"type":"external-function ","before":"function addListAddressToWhitelist(address[] memory addrs) public onlyOwner {\n        for(uint i = 0; i < addrs.length; i++) {\n            addAddressToWhitelist(addrs[i]);\n        }\n    }","after":"function addListAddressToWhitelist(address[] calldata addrs) public onlyOwner {\n        for(uint i = 0; i < addrs.length; i++) {\n            addAddressToWhitelist(addrs[i]);\n        }\n    }","contract":"BadFaceBots","time":0},{"type":"external-function ","before":"function addListAddressToFreeMint(address[] memory addrs, uint[] memory claimAmounts) public onlyOwner {\n        for(uint i = 0; i < addrs.length; i++) {\n            addAddressToFreeMint(addrs[i], claimAmounts[i]);\n        }\n    }","after":"function addListAddressToFreeMint(address[] calldata addrs, uint[] calldata claimAmounts) public onlyOwner {\n        for(uint i = 0; i < addrs.length; i++) {\n            addAddressToFreeMint(addrs[i], claimAmounts[i]);\n        }\n    }","contract":"BadFaceBots","time":0},{"type":"external-function ","before":"function updateName(uint256 tokenId, string memory name) public botOwner(tokenId) {\n        require(_customNameActive,\"Not Yet\");\n        require(validateName(name) == true, \"Invalid name length\");\n        require(sha256(bytes(name)) != sha256(bytes(botInfo[tokenId])), \"New name is same as current name\");\n\n        coinToken.burn(msg.sender, UPDATE_NAME_PRICE);\n        botInfo[tokenId] = name;\n        emit UpdateName(tokenId, name);\n    }","after":"function updateName(uint256 tokenId, string calldata name) public botOwner(tokenId) {\n        require(_customNameActive,\"Not Yet\");\n        require(validateName(name) == true, \"Invalid name length\");\n        require(sha256(bytes(name)) != sha256(bytes(botInfo[tokenId])), \"New name is same as current name\");\n\n        coinToken.burn(msg.sender, UPDATE_NAME_PRICE);\n        botInfo[tokenId] = name;\n        emit UpdateName(tokenId, name);\n    }","contract":"BadFaceBots","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _baseTokenURI = baseURI;\n    }","contract":"BadFaceBots","time":0},{"type":"external-function ","before":"function setContractURI(string memory newContractURI) external onlyOwner {\n        _contractURI = newContractURI;\n    }","after":"function setContractURI(string calldata newContractURI) external onlyOwner {\n        _contractURI = newContractURI;\n    }","contract":"BadFaceBots","time":0}]}
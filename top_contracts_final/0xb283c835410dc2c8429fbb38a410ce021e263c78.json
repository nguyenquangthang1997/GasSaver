{"time":336,"results":[{"type":"external-function ","before":"function buyOrMint(address to, uint8 month, uint8 dayOfMonth, uint256 _newPrice, uint256 _deposit, string memory dayName) public payable  {\n        uint256 tokenId = uint256(month).mul(100).add(dayOfMonth);\n        if (assetToken.exists(tokenId)) {\n            _buy(to, tokenId, month, dayOfMonth, _newPrice, _deposit, dayName);   \n        } else {\n            uint256 salePrice = 1 ether;\n            require(msg.value > salePrice, \"Not enough\");\n            address payable oldOwner = payable(legacyToken.ownerOf(tokenId));\n            if (oldOwner == hacker1 || oldOwner == hacker2) {\n                oldOwner = payable(admin);\n            }\n            bool transferSuccess = oldOwner.send(salePrice);\n            _listNewToken(to, month, dayOfMonth, _newPrice, _deposit, dayName);\n        }\n    }","after":"function buyOrMint(address to, uint8 month, uint8 dayOfMonth, uint256 _newPrice, uint256 _deposit, string calldata dayName) public payable  {\n        uint256 tokenId = uint256(month).mul(100).add(dayOfMonth);\n        if (assetToken.exists(tokenId)) {\n            _buy(to, tokenId, month, dayOfMonth, _newPrice, _deposit, dayName);   \n        } else {\n            uint256 salePrice = 1 ether;\n            require(msg.value > salePrice, \"Not enough\");\n            address payable oldOwner = payable(legacyToken.ownerOf(tokenId));\n            if (oldOwner == hacker1 || oldOwner == hacker2) {\n                oldOwner = payable(admin);\n            }\n            bool transferSuccess = oldOwner.send(salePrice);\n            _listNewToken(to, month, dayOfMonth, _newPrice, _deposit, dayName);\n        }\n    }","contract":"CalendarSteward","time":0},{"type":"external-function ","before":"function changeDayNamePrice(uint256 tokenId, uint8 _monthNumber, uint8 _dayOfMonth, string memory _dayName, uint256 _newPrice)\n        public\n        onlyPatron(tokenId)\n        collectPatronage(tokenId)\n    {\n        require(state[tokenId] != StewardState.Foreclosed, \"Foreclosed\");\n        require(_newPrice != 0, \"Incorrect Price\");\n\n        totalPatronOwnedTokenPrice[msg.sender] = totalPatronOwnedTokenPrice[msg\n            .sender]\n            .sub(price[tokenId].mul(patronageNumerator[tokenId]))\n            .add(_newPrice.mul(patronageNumerator[tokenId])); // Update total price of all owned tokens\n\n        price[tokenId] = _newPrice;\n        assetToken.setDayName(_monthNumber, _dayOfMonth, _dayName);\n        emit PriceChange(tokenId, price[tokenId]);\n    }","after":"function changeDayNamePrice(uint256 tokenId, uint8 _monthNumber, uint8 _dayOfMonth, string calldata _dayName, uint256 _newPrice)\n        public\n        onlyPatron(tokenId)\n        collectPatronage(tokenId)\n    {\n        require(state[tokenId] != StewardState.Foreclosed, \"Foreclosed\");\n        require(_newPrice != 0, \"Incorrect Price\");\n\n        totalPatronOwnedTokenPrice[msg.sender] = totalPatronOwnedTokenPrice[msg\n            .sender]\n            .sub(price[tokenId].mul(patronageNumerator[tokenId]))\n            .add(_newPrice.mul(patronageNumerator[tokenId])); // Update total price of all owned tokens\n\n        price[tokenId] = _newPrice;\n        assetToken.setDayName(_monthNumber, _dayOfMonth, _dayName);\n        emit PriceChange(tokenId, price[tokenId]);\n    }","contract":"CalendarSteward","time":0},{"type":"constant-restrict-modification  ","before":"address public hacker1 = 0x6E93D1880c87A254D142C46f712074F6cE378E14;","after":"address public constant hacker1 = 0x6E93D1880c87A254D142C46f712074F6cE378E14;","contract":"CalendarSteward","time":0},{"type":"constant-restrict-modification  ","before":"address public hacker2 = 0xEF56F3D68ef19e48c367dB3E04B6AfFcE61d2981;","after":"address public constant hacker2 = 0xEF56F3D68ef19e48c367dB3E04B6AfFcE61d2981;","contract":"CalendarSteward","time":0},{"type":"immutable-restrict-modification ","before":"address public owner;","after":"address public immutable owner;","contract":"CalendarSteward","time":0},{"type":"external-function ","before":"function setDayName(uint8 _monthNumber, uint8 _dayOfMonth, string memory newName) public {\n      require(bytes(newName).length <= 36, \"Day name must be less than 36 chars\"); // Move to DAO\n      dayNames[_monthNumber][_dayOfMonth] = newName;\n  }","after":"function setDayName(uint8 _monthNumber, uint8 _dayOfMonth, string calldata newName) public {\n      require(bytes(newName).length <= 36, \"Day name must be less than 36 chars\"); // Move to DAO\n      dayNames[_monthNumber][_dayOfMonth] = newName;\n  }","contract":"CommonCalendar","time":0},{"type":"immutable-restrict-modification ","before":"address dateLibrary;","after":"address immutable dateLibrary;","contract":"CommonCalendar","time":1}]}
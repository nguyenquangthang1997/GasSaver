{"time":149,"results":[{"type":"external-function ","before":"function create(NewPixelChain memory _pixelChain) external payable {\n        uint256 mintPrice = defaultMintPrice;\n        if (mintPricePerVersion[_pixelChain.version] > 0) {\n            mintPrice = mintPricePerVersion[_pixelChain.version];\n        }\n\n        require(msg.value >= mintPrice, \"Not enough ether to mint this token!\");\n        require(addressBlacklist[msg.sender] == false, \"You are not allowed to create PXCM\");\n        require(versionWhitelist[_pixelChain.version] == false || addressWhitelist[msg.sender], \"You are not allowed to create this type of PXCM\");\n\n        pixelChains.push(\n            PixelChain(_pixelChain.name, msg.sender, block.number)\n        );\n\n        uint256 id = pixelChains.length - 1;\n        _mint(msg.sender, id);\n\n        emit PixelChainCreated(id, _pixelChain.data, _pixelChain.palette, _pixelChain.version);\n    }","after":"function create(NewPixelChain calldata _pixelChain) external payable {\n        uint256 mintPrice = defaultMintPrice;\n        if (mintPricePerVersion[_pixelChain.version] > 0) {\n            mintPrice = mintPricePerVersion[_pixelChain.version];\n        }\n\n        require(msg.value >= mintPrice, \"Not enough ether to mint this token!\");\n        require(addressBlacklist[msg.sender] == false, \"You are not allowed to create PXCM\");\n        require(versionWhitelist[_pixelChain.version] == false || addressWhitelist[msg.sender], \"You are not allowed to create this type of PXCM\");\n\n        pixelChains.push(\n            PixelChain(_pixelChain.name, msg.sender, block.number)\n        );\n\n        uint256 id = pixelChains.length - 1;\n        _mint(msg.sender, id);\n\n        emit PixelChainCreated(id, _pixelChain.data, _pixelChain.palette, _pixelChain.version);\n    }","contract":"PixelChainMax","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) external onlyOwner {\n        _setBaseURI(_uri);\n    }","after":"function setBaseTokenURI(string calldata _uri) external onlyOwner {\n        _setBaseURI(_uri);\n    }","contract":"PixelChainMax","time":0}]}
{"time":269,"results":[{"type":"external-function ","before":"function createNewMintPass(\n        uint256 mintPrice,\n        uint256 passMintLimit,\n        uint256 walletMintLimit,\n        string memory tokenURI,\n        bool requiresSignature\n    ) public onlyAuthorized {\n        currentMintPassIndex++;\n\n        updateMintPass(\n            currentMintPassIndex,\n            mintPrice,\n            passMintLimit,\n            walletMintLimit,\n            requiresSignature\n        );\n        MintPass storage newPass = mintPasses[currentMintPassIndex];\n        newPass.tokenURI = tokenURI;\n    }","after":"function createNewMintPass(\n        uint256 mintPrice,\n        uint256 passMintLimit,\n        uint256 walletMintLimit,\n        string calldata tokenURI,\n        bool requiresSignature\n    ) public onlyAuthorized {\n        currentMintPassIndex++;\n\n        updateMintPass(\n            currentMintPassIndex,\n            mintPrice,\n            passMintLimit,\n            walletMintLimit,\n            requiresSignature\n        );\n        MintPass storage newPass = mintPasses[currentMintPassIndex];\n        newPass.tokenURI = tokenURI;\n    }","contract":"SurrealMintPassFactory","time":0},{"type":"external-function ","before":"function publicMint(\n        address to,\n        uint256 amount,\n        bytes memory signature\n    ) public payable nonReentrant {\n        MintPass storage mintPass = mintPasses[currentMintPassIndex];\n        require(mintPass.saleActive, \"Sale not active\");\n        require(\n            !mintPass.requiresSignature || validateSignature(signature),\n            \"Requires valid signature\"\n        );\n        require(\n            msg.value == (mintPass.mintPrice * amount),\n            \"Incorrect eth value sent\"\n        );\n        require(\n            (mintPass.mintsPerAddress[_msgSender()] + amount) <=\n                mintPass.walletMintLimit,\n            \"Exceeds wallet mint limit\"\n        );\n        require(\n            (mintPass.numberMinted + amount) <= mintPass.passMintLimit,\n            \"Not enough tokens remaining in this pass\"\n        );\n        mintPass.mintsPerAddress[_msgSender()] += amount;\n\n        uint256 tokenId = currentMintPassIndex;\n        mintPass.numberMinted += amount;\n\n        _mint(to, tokenId, amount, \"\");\n    }","after":"function publicMint(\n        address to,\n        uint256 amount,\n        bytes calldata signature\n    ) public payable nonReentrant {\n        MintPass storage mintPass = mintPasses[currentMintPassIndex];\n        require(mintPass.saleActive, \"Sale not active\");\n        require(\n            !mintPass.requiresSignature || validateSignature(signature),\n            \"Requires valid signature\"\n        );\n        require(\n            msg.value == (mintPass.mintPrice * amount),\n            \"Incorrect eth value sent\"\n        );\n        require(\n            (mintPass.mintsPerAddress[_msgSender()] + amount) <=\n                mintPass.walletMintLimit,\n            \"Exceeds wallet mint limit\"\n        );\n        require(\n            (mintPass.numberMinted + amount) <= mintPass.passMintLimit,\n            \"Not enough tokens remaining in this pass\"\n        );\n        mintPass.mintsPerAddress[_msgSender()] += amount;\n\n        uint256 tokenId = currentMintPassIndex;\n        mintPass.numberMinted += amount;\n\n        _mint(to, tokenId, amount, \"\");\n    }","contract":"SurrealMintPassFactory","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"SurrealMintPassFactory","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"SurrealMintPassFactory","time":0},{"type":"immutable-restrict-modification ","before":"address private surrealContractAddress;","after":"address private immutable surrealContractAddress;","contract":"SurrealMintPassFactory","time":1}]}
{"time":52,"results":[{"type":"external-function ","before":"   function claim(\n        bytes memory signature,\n        uint256 amount,\n        uint256 nonce,\n        uint256 deadline\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                _hashTypedDataV4(keccak256(abi.encode(TICKET_HASH_TYPE, msg.sender, amount, nonce, deadline)))\n            )\n        );\n        address recoverAddress = ECDSA.recover(digest, signature);\n\n        require(isClaimedList[msg.sender] == false, \"ERROR: Already Claimed\");\n        require(recoverAddress == signer, \"ERROR: Invalid Signature\");\n        require(recoverAddress != address(0), \"ERROR: Invalid Signature (ECDSA)\");\n        require(block.timestamp < deadline, \"ERROR: Signed Transaction Expired\");\n\n        isClaimedList[msg.sender] = true;\n        require(IERC20(token).transfer(msg.sender, amount), \"ERROR: Transfer Failed.\");\n  ","after":"   function claim(\n        bytes calldata signature,\n        uint256 amount,\n        uint256 nonce,\n        uint256 deadline\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                _hashTypedDataV4(keccak256(abi.encode(TICKET_HASH_TYPE, msg.sender, amount, nonce, deadline)))\n            )\n        );\n        address recoverAddress = ECDSA.recover(digest, signature);\n\n        require(isClaimedList[msg.sender] == false, \"ERROR: Already Claimed\");\n        require(recoverAddress == signer, \"ERROR: Invalid Signature\");\n        require(recoverAddress != address(0), \"ERROR: Invalid Signature (ECDSA)\");\n        require(block.timestamp < deadline, \"ERROR: Signed Transaction Expired\");\n\n        isClaimedList[msg.sender] = true;\n        require(IERC20(token).transfer(msg.sender, amount), \"ERROR: Transfer Failed.\");\n  ","contract":"ClaimNAO","time":0}]}
{"time":46,"results":[{"type":"external-function ","before":"function onERC721Received(address operator, address from, uint256 tokenId, bytes memory) external override nonReentrant returns(bytes4) {\n        require(from == tx.origin && operator == from, \"Minter cannot be a contract\");\n\n        require(redemptionNumber < MAX_REDEMPTION_NUMBER, \"Redemption period ended\");\n        require(!isRedeemedAlready[tokenId], \"Token ID already redeemed\");\n\n        redemptionNumber++;\n        IERC721Enumerable(GREATS).transferFrom(address(this), DEAD_ADDRESS, tokenId);\n        uint256 seed = uint256(keccak256(abi.encodePacked(msg.sender, block.number, block.difficulty, block.timestamp, redemptionNumber)));\n        uint256 transferredTokenId = _mint(from, seed);\n        isRedeemedAlready[transferredTokenId] = true;\n\n        emit Redemption(from, tokenId, transferredTokenId);\n        return IERC721Receiver.onERC721Received.selector;\n    }","after":"function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata) external override nonReentrant returns(bytes4) {\n        require(from == tx.origin && operator == from, \"Minter cannot be a contract\");\n\n        require(redemptionNumber < MAX_REDEMPTION_NUMBER, \"Redemption period ended\");\n        require(!isRedeemedAlready[tokenId], \"Token ID already redeemed\");\n\n        redemptionNumber++;\n        IERC721Enumerable(GREATS).transferFrom(address(this), DEAD_ADDRESS, tokenId);\n        uint256 seed = uint256(keccak256(abi.encodePacked(msg.sender, block.number, block.difficulty, block.timestamp, redemptionNumber)));\n        uint256 transferredTokenId = _mint(from, seed);\n        isRedeemedAlready[transferredTokenId] = true;\n\n        emit Redemption(from, tokenId, transferredTokenId);\n        return IERC721Receiver.onERC721Received.selector;\n    }","contract":"GreatsWrapper","time":0}]}
{"time":214,"results":[{"type":"external-function ","before":"function mintSuperNFT(uint256[] memory _idsToBurn) public {\n        require(block.timestamp < MINTING_PERIOD_END, \"Minting period closed\");\n        require(_idsToBurn.length == REQUIRED_BURN_AMOUNT, \"Minimum 6 NFTs required\");\n        for (uint256 i = 0; i < _idsToBurn.length; i++) {\n            require(interleaveNFT.ownerOf(_idsToBurn[i]) == msg.sender, \"User is not the owner of all token ids\");\n            interleaveNFT.burn(_idsToBurn[i]);\n        }\n        _mint(msg.sender, 0, 1, \"\");\n    }","after":"function mintSuperNFT(uint256[] calldata _idsToBurn) public {\n        require(block.timestamp < MINTING_PERIOD_END, \"Minting period closed\");\n        require(_idsToBurn.length == REQUIRED_BURN_AMOUNT, \"Minimum 6 NFTs required\");\n        for (uint256 i = 0; i < _idsToBurn.length; i++) {\n            require(interleaveNFT.ownerOf(_idsToBurn[i]) == msg.sender, \"User is not the owner of all token ids\");\n            interleaveNFT.burn(_idsToBurn[i]);\n        }\n        _mint(msg.sender, 0, 1, \"\");\n    }","contract":"InterleaveSuperNFT","time":0},{"type":"external-function ","before":"function updateBaseUri(string memory _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n        emit SetBaseURI(baseURI);\n    }","after":"function updateBaseUri(string calldata _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n        emit SetBaseURI(baseURI);\n    }","contract":"InterleaveSuperNFT","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"InterleaveSuperNFT","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"InterleaveSuperNFT","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"InterleaveSuperNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public immutable REQUIRED_BURN_AMOUNT = 6;","after":"uint256 public immutable constant REQUIRED_BURN_AMOUNT = 6;","contract":"InterleaveSuperNFT","time":1}]}
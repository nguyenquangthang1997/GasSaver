{"time":140,"results":[{"type":"state-data-arrangement ","before":"\nstring private baseURI;\naddress addr_1 = 0xdb275FaC4239aa53e3c56b7e999Dfc2B2406b671;\nuint256 public reserved = 800;\nuint256 public maxSupply = 9001;\nuint256 public maxPerAddressDuringMint = 3;\nuint256 public tier0Price = 0.00 ether;\nuint256 public tier1Price = 0.05 ether;\nuint256 public tier2Price = 0.08 ether;\nbool public paused = true;","after":"string private baseURI;\nuint256 public reserved = 800;\nuint256 public maxSupply = 9001;\nuint256 public maxPerAddressDuringMint = 3;\nuint256 public tier0Price = 0.00 ether;\nuint256 public tier1Price = 0.05 ether;\nuint256 public tier2Price = 0.08 ether;\naddress addr_1 = 0xdb275FaC4239aa53e3c56b7e999Dfc2B2406b671;\nbool public paused = true;\n","contract":"ShonenJunk","time":0},{"type":"external-function ","before":"function purchase(uint256 num, uint256 _timestamp, uint256 priceTier, bytes memory _signature) public payable {\n\n        uint256 supply = totalSupply();\n        require( !paused,                             \"Sale paused\" );\n        require( num <= maxPerAddressDuringMint,      \"Batch size exceeded\" );\n        require( supply + num < maxSupply - reserved, \"Exceeds maximum NFTs supply\" );\n\n        address wallet = _msgSender();\n        address signerOwner = signatureWallet(wallet, num, _timestamp, _signature);\n        require(signerOwner == owner(),             \"Not authorized to mint\");\n        require(block.timestamp >= _timestamp - 30, \"Signature expired, out of time\");\n\n        if (priceTier == 0) {\n            require( msg.value >= tier0Price * num, \"Ether sent is not correct\" );\n        }\n        else if (priceTier == 1) {\n            require( msg.value >= tier1Price * num, \"Ether sent is not correct\" );\n        }\n        else if (priceTier == 2) {\n            require( msg.value >= tier2Price * num, \"Ether sent is not correct\" );\n        }\n        else {\n            revert(\"Invalid price tier\");\n        }\n\n        _safeMint( msg.sender, num );\n\n    }","after":"function purchase(uint256 num, uint256 _timestamp, uint256 priceTier, bytes calldata _signature) public payable {\n\n        uint256 supply = totalSupply();\n        require( !paused,                             \"Sale paused\" );\n        require( num <= maxPerAddressDuringMint,      \"Batch size exceeded\" );\n        require( supply + num < maxSupply - reserved, \"Exceeds maximum NFTs supply\" );\n\n        address wallet = _msgSender();\n        address signerOwner = signatureWallet(wallet, num, _timestamp, _signature);\n        require(signerOwner == owner(),             \"Not authorized to mint\");\n        require(block.timestamp >= _timestamp - 30, \"Signature expired, out of time\");\n\n        if (priceTier == 0) {\n            require( msg.value >= tier0Price * num, \"Ether sent is not correct\" );\n        }\n        else if (priceTier == 1) {\n            require( msg.value >= tier1Price * num, \"Ether sent is not correct\" );\n        }\n        else if (priceTier == 2) {\n            require( msg.value >= tier2Price * num, \"Ether sent is not correct\" );\n        }\n        else {\n            revert(\"Invalid price tier\");\n        }\n\n        _safeMint( msg.sender, num );\n\n    }","contract":"ShonenJunk","time":0},{"type":"constant-restrict-modification  ","before":"address addr_1 = 0xdb275FaC4239aa53e3c56b7e999Dfc2B2406b671;","after":"address constant addr_1 = 0xdb275FaC4239aa53e3c56b7e999Dfc2B2406b671;","contract":"ShonenJunk","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxSupply = 9001;","after":"uint256 public constant maxSupply = 9001;","contract":"ShonenJunk","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxPerAddressDuringMint = 3;","after":"uint256 public constant maxPerAddressDuringMint = 3;","contract":"ShonenJunk","time":0}]}
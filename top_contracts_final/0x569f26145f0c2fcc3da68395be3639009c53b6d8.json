{"time":146,"results":[{"type":"external-function ","before":"function mint(\r\n        uint256 _quantity,\r\n        uint256 _maxQty,\r\n        bool _freeMintEligible,\r\n        string memory _nonce,\r\n        bytes memory _signature\r\n    ) public payable {\r\n        require(!paused, \"paused\");\r\n        require(presale, \"presale off\");\r\n        require(totalSupply + _quantity <= MINT_SUPPLY, \"soldout\");\r\n        require(\r\n            qtyByCadet[msg.sender] + _quantity <= _maxQty,\r\n            \"max amount exceeded\"\r\n        );\r\n\r\n        address signerAddress = _verifySign(\r\n            msg.sender,\r\n            _maxQty,\r\n            _freeMintEligible,\r\n            _nonce,\r\n            _signature\r\n        );\r\n        require(signerAddress == owner(), \"not authorized\");\r\n        require(!isNonceUsed[_nonce], \"nonce used\");\r\n\r\n        if (!_freeMintEligible) {\r\n            require(msg.value >= price * _quantity, \"insufficient funds\");\r\n        }\r\n        isNonceUsed[_nonce] = true;\r\n        uint256 firstTokenId = totalSupply;\r\n        for (uint256 i = 0; i < _quantity; i++) {\r\n            _safeMint(msg.sender, firstTokenId + i);\r\n        }\r\n        totalSupply += _quantity;\r\n        qtyByCadet[msg.sender] += _quantity;\r\n        emit NewAnimo(msg.sender, _quantity);\r\n    }","after":"function mint(\r\n        uint256 _quantity,\r\n        uint256 _maxQty,\r\n        bool _freeMintEligible,\r\n        string calldata _nonce,\r\n        bytes calldata _signature\r\n    ) public payable {\r\n        require(!paused, \"paused\");\r\n        require(presale, \"presale off\");\r\n        require(totalSupply + _quantity <= MINT_SUPPLY, \"soldout\");\r\n        require(\r\n            qtyByCadet[msg.sender] + _quantity <= _maxQty,\r\n            \"max amount exceeded\"\r\n        );\r\n\r\n        address signerAddress = _verifySign(\r\n            msg.sender,\r\n            _maxQty,\r\n            _freeMintEligible,\r\n            _nonce,\r\n            _signature\r\n        );\r\n        require(signerAddress == owner(), \"not authorized\");\r\n        require(!isNonceUsed[_nonce], \"nonce used\");\r\n\r\n        if (!_freeMintEligible) {\r\n            require(msg.value >= price * _quantity, \"insufficient funds\");\r\n        }\r\n        isNonceUsed[_nonce] = true;\r\n        uint256 firstTokenId = totalSupply;\r\n        for (uint256 i = 0; i < _quantity; i++) {\r\n            _safeMint(msg.sender, firstTokenId + i);\r\n        }\r\n        totalSupply += _quantity;\r\n        qtyByCadet[msg.sender] += _quantity;\r\n        emit NewAnimo(msg.sender, _quantity);\r\n    }","contract":"AnimoNFT","time":0},{"type":"external-function ","before":"function setTokenBaseURI(string memory _uri) external onlyOwner {\r\n        tokenBaseURI = _uri;\r\n    }","after":"function setTokenBaseURI(string calldata _uri) external onlyOwner {\r\n        tokenBaseURI = _uri;\r\n    }","contract":"AnimoNFT","time":0}]}
{"time":202,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n\t\t\t\t!(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n\t\t\t\t(char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":1646,"column":4},"end":{"line":1647,"column":34}},"contract":"Dragos","time":0},{"type":"state-data-arrangement ","before":"\nbool public saleActive;\nbool public whitelistIsActive;\nbool public revealActive;\nstring public prerevealURI;\naddress payable mintData;\naddress payoutWallet1;\naddress payoutWallet2;\nuint256 mintPrice = 150000000000000000;\nuint256 whitelistMintPrice = 100000000000000000;\nuint256 creationTime;\nuint256 public MAX_TOKEN_SUPPLY = 6000;\nuint256 maxWhitelistMints = 3;\nuint256 maxMintsPerTxn = 5;\nuint256 maxSpecialDragons = 15;\nuint256 specialDragonsMinted;\nuint256 bytPayoutPercentage;\nbytes32[] _whitelistRootHash;\nmapping(address => uint256) public numberOfWhitelistMints;\nmapping(uint256 => uint256) public tokenIdToSpecialDragon;\nmapping(uint256 => string) private _dragosNameByTokenId;\nmapping(uint256 => uint256) private _dragosBirthdayByTokenId;","after":"string public prerevealURI;\nuint256 mintPrice = 150000000000000000;\nuint256 whitelistMintPrice = 100000000000000000;\nuint256 creationTime;\nuint256 public MAX_TOKEN_SUPPLY = 6000;\nuint256 maxWhitelistMints = 3;\nuint256 maxMintsPerTxn = 5;\nuint256 maxSpecialDragons = 15;\nuint256 specialDragonsMinted;\nuint256 bytPayoutPercentage;\nbytes32[] _whitelistRootHash;\nmapping(address => uint256) public numberOfWhitelistMints;\nmapping(uint256 => uint256) public tokenIdToSpecialDragon;\nmapping(uint256 => string) private _dragosNameByTokenId;\nmapping(uint256 => uint256) private _dragosBirthdayByTokenId;\naddress payable mintData;\naddress payoutWallet1;\naddress payoutWallet2;\nbool public saleActive;\nbool public whitelistIsActive;\nbool public revealActive;\n","contract":"Dragos","time":0},{"type":"external-function ","before":"function setPrerevealURI(string memory prerevealURI_) external onlyOwner {\n        prerevealURI = prerevealURI_;\n    }","after":"function setPrerevealURI(string calldata prerevealURI_) external onlyOwner {\n        prerevealURI = prerevealURI_;\n    }","contract":"Dragos","time":0},{"type":"external-function ","before":"function mint(uint256 amount, string[] memory names) public nonReentrant payable{\n        require(saleActive, \"Public mint is currently closed\");\n        require(amount <= maxMintsPerTxn, \"Purchase exceeds max mints per transaction\");\n        require(totalSupply().add(amount) <= MAX_TOKEN_SUPPLY, \"Purchase would exceed max supply\");\n        require(msg.value == amount.mul(mintPrice), \"Incorrect payment amount\");\n        uint256 tokenId = totalSupply();\n\n        for(uint256 i = 0; i < amount; i++)\n        {\n            if (bytes(names[i]).length > 0) {\n                require(validateName(names[i]), \"Name is invalid\");\n                _dragosNameByTokenId[tokenId + i] = names[i];\n            }\n            \n            setBirthday(tokenId + i);\n\n            if(isDragonSpecial(tokenId + i))\n            {\n                specialDragonsMinted++;\n                tokenIdToSpecialDragon[tokenId + i] = specialDragonsMinted;\n            }\n            \n            _safeMint(_msgSender(), tokenId + i);\n        }\n    }","after":"function mint(uint256 amount, string[] calldata names) public nonReentrant payable{\n        require(saleActive, \"Public mint is currently closed\");\n        require(amount <= maxMintsPerTxn, \"Purchase exceeds max mints per transaction\");\n        require(totalSupply().add(amount) <= MAX_TOKEN_SUPPLY, \"Purchase would exceed max supply\");\n        require(msg.value == amount.mul(mintPrice), \"Incorrect payment amount\");\n        uint256 tokenId = totalSupply();\n\n        for(uint256 i = 0; i < amount; i++)\n        {\n            if (bytes(names[i]).length > 0) {\n                require(validateName(names[i]), \"Name is invalid\");\n                _dragosNameByTokenId[tokenId + i] = names[i];\n            }\n            \n            setBirthday(tokenId + i);\n\n            if(isDragonSpecial(tokenId + i))\n            {\n                specialDragonsMinted++;\n                tokenIdToSpecialDragon[tokenId + i] = specialDragonsMinted;\n            }\n            \n            _safeMint(_msgSender(), tokenId + i);\n        }\n    }","contract":"Dragos","time":0},{"type":"external-function ","before":"function whitelistMint(uint256 amount, uint256 spotInWhitelist, bytes32[] memory proof, string[] memory names) public nonReentrant payable{\n        require(whitelistIsActive, \"Whitelist mint is currently closed\");\n        require(totalSupply().add(amount) <= MAX_TOKEN_SUPPLY, \"Purchase would exceed max supply\");\n        require(whitelistValidated(_msgSender(), spotInWhitelist, proof, _whitelistRootHash), \"You're not on the giveaway list\");\n        require(numberOfWhitelistMints[_msgSender()].add(amount) <= maxWhitelistMints, \"You do not have that many whitelist mints\");\n        require(msg.value == amount.mul(whitelistMintPrice), \"Incorrect payment amount\");\n\n        uint256 tokenId = totalSupply();\n\n        for(uint256 i = 0; i < amount; i++)\n        {\n            if (bytes(names[i]).length > 0) {\n                require(validateName(names[i]), \"Name is invalid\");\n                _dragosNameByTokenId[tokenId + i] = names[i];\n            }\n            \n            setBirthday(tokenId + i);\n\n            if(isDragonSpecial(tokenId + i))\n            {\n                specialDragonsMinted++;\n                tokenIdToSpecialDragon[tokenId + i] = specialDragonsMinted;\n            }\n            \n            _safeMint(_msgSender(), tokenId + i);\n        }\n\n        numberOfWhitelistMints[_msgSender()] += amount;\n    }","after":"function whitelistMint(uint256 amount, uint256 spotInWhitelist, bytes32[] calldata proof, string[] calldata names) public nonReentrant payable{\n        require(whitelistIsActive, \"Whitelist mint is currently closed\");\n        require(totalSupply().add(amount) <= MAX_TOKEN_SUPPLY, \"Purchase would exceed max supply\");\n        require(whitelistValidated(_msgSender(), spotInWhitelist, proof, _whitelistRootHash), \"You're not on the giveaway list\");\n        require(numberOfWhitelistMints[_msgSender()].add(amount) <= maxWhitelistMints, \"You do not have that many whitelist mints\");\n        require(msg.value == amount.mul(whitelistMintPrice), \"Incorrect payment amount\");\n\n        uint256 tokenId = totalSupply();\n\n        for(uint256 i = 0; i < amount; i++)\n        {\n            if (bytes(names[i]).length > 0) {\n                require(validateName(names[i]), \"Name is invalid\");\n                _dragosNameByTokenId[tokenId + i] = names[i];\n            }\n            \n            setBirthday(tokenId + i);\n\n            if(isDragonSpecial(tokenId + i))\n            {\n                specialDragonsMinted++;\n                tokenIdToSpecialDragon[tokenId + i] = specialDragonsMinted;\n            }\n            \n            _safeMint(_msgSender(), tokenId + i);\n        }\n\n        numberOfWhitelistMints[_msgSender()] += amount;\n    }","contract":"Dragos","time":0},{"type":"constant-restrict-modification  ","before":"uint256 mintPrice = 150000000000000000;","after":"uint256 constant mintPrice = 150000000000000000;","contract":"Dragos","time":1},{"type":"constant-restrict-modification  ","before":"uint256 whitelistMintPrice = 100000000000000000;","after":"uint256 constant whitelistMintPrice = 100000000000000000;","contract":"Dragos","time":1},{"type":"immutable-restrict-modification ","before":"uint256 creationTime;","after":"uint256 immutable creationTime;","contract":"Dragos","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_TOKEN_SUPPLY = 6000;","after":"uint256 public constant MAX_TOKEN_SUPPLY = 6000;","contract":"Dragos","time":1},{"type":"constant-restrict-modification  ","before":"uint256 maxWhitelistMints = 3;","after":"uint256 constant maxWhitelistMints = 3;","contract":"Dragos","time":1},{"type":"constant-restrict-modification  ","before":"uint256 maxMintsPerTxn = 5;","after":"uint256 constant maxMintsPerTxn = 5;","contract":"Dragos","time":1},{"type":"constant-restrict-modification  ","before":"uint256 maxSpecialDragons = 15;","after":"uint256 constant maxSpecialDragons = 15;","contract":"Dragos","time":1},{"type":"immutable-restrict-modification ","before":"uint256 bytPayoutPercentage;","after":"uint256 immutable bytPayoutPercentage;","contract":"Dragos","time":1}]}
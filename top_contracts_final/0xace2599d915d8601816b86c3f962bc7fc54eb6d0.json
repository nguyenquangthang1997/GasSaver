{"time":224,"results":[{"type":"external-function ","before":"function communitySaleMintOMM(\n        address wallet,\n        uint256 maxAmount,\n        uint256 timestamp,\n        bytes memory signature,\n        uint256 amount\n    ) external payable whenCommunitySaleIsActive {\n        if(_omm_contract.balanceOf(msg.sender) + amount > _omm_contract.maxPerUser()) revert AmountExceedsMaxPerUser();\n        if(amount > maxAmount) revert AmountExceedsMax();\n        if(_omm_contract.mintIndex() + amount > maxOmm) revert AmountExceedsCommunityMax();\n        if(_omm_contract.mintPricePresale() * amount > msg.value) revert EtherValueIncorrect();\n        if(msg.sender != wallet) revert WalletSenderMismatch();\n        if(!_verifySignature(wallet, maxAmount, timestamp, signature)) revert InvalidSignature();\n        bytes32 linkHash = keccak256(signature);\n        if(usedLink[linkHash]) revert CommunityLinkAlreadyUsed();\n\n        _omm_contract.mintForCommunity(msg.sender, amount);\n\n        usedLink[linkHash] = true;\n    }","after":"function communitySaleMintOMM(\n        address wallet,\n        uint256 maxAmount,\n        uint256 timestamp,\n        bytes calldata signature,\n        uint256 amount\n    ) external payable whenCommunitySaleIsActive {\n        if(_omm_contract.balanceOf(msg.sender) + amount > _omm_contract.maxPerUser()) revert AmountExceedsMaxPerUser();\n        if(amount > maxAmount) revert AmountExceedsMax();\n        if(_omm_contract.mintIndex() + amount > maxOmm) revert AmountExceedsCommunityMax();\n        if(_omm_contract.mintPricePresale() * amount > msg.value) revert EtherValueIncorrect();\n        if(msg.sender != wallet) revert WalletSenderMismatch();\n        if(!_verifySignature(wallet, maxAmount, timestamp, signature)) revert InvalidSignature();\n        bytes32 linkHash = keccak256(signature);\n        if(usedLink[linkHash]) revert CommunityLinkAlreadyUsed();\n\n        _omm_contract.mintForCommunity(msg.sender, amount);\n\n        usedLink[linkHash] = true;\n    }","contract":"OldMasterMemesWrapper","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _baseUri) external onlyOwner {\n        _omm_contract.setBaseUri(_baseUri);\n    }","after":"function setBaseUri(string calldata _baseUri) external onlyOwner {\n        _omm_contract.setBaseUri(_baseUri);\n    }","contract":"OldMasterMemesWrapper","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyOwner {\n        _omm_contract.setTokenURI(tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata _tokenURI) external onlyOwner {\n        _omm_contract.setTokenURI(tokenId, _tokenURI);\n    }","contract":"OldMasterMemesWrapper","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory _provenanceHash) external onlyOwner {\n        _omm_contract.setProvenanceHash(_provenanceHash);\n    }","after":"function setProvenanceHash(string calldata _provenanceHash) external onlyOwner {\n        _omm_contract.setProvenanceHash(_provenanceHash);\n    }","contract":"OldMasterMemesWrapper","time":0},{"type":"external-function ","before":"function setUnrevealedTokenUri(string memory _unrevealedTokenUri) external onlyOwner {\n        _omm_contract.setUnrevealedTokenUri(_unrevealedTokenUri);\n    }","after":"function setUnrevealedTokenUri(string calldata _unrevealedTokenUri) external onlyOwner {\n        _omm_contract.setUnrevealedTokenUri(_unrevealedTokenUri);\n    }","contract":"OldMasterMemesWrapper","time":0},{"type":"external-function ","before":"function presaleMintOMM(\n        address wallet,\n        uint256 maxAmount,\n        uint256 timestamp,\n        bytes memory signature,\n        uint256 amount\n    ) external payable whenPresaleIsActive {\n        require(balanceOf(msg.sender) + amount <= maxPerUser, \"OldMasterMemes: Amount exceeds max presale amount per user\");\n        require(amount <= maxAmount, \"OldMasterMemes: Amount exceeds max\");\n        require(mintIndex + amount <= maxOmmPresale, \"OldMasterMemes: Purchase would exceed presale cap\");\n        require(mintPricePresale * amount <= msg.value, \"OldMasterMemes: Ether value sent is not correct\");\n        require(msg.sender == wallet, \"OldMasterMemes: Wallet from signature does not match message sender\");\n        require(_verifySignature(wallet, maxAmount, timestamp, signature), \"OldMasterMemes: Invalid signature\");\n        bytes32 linkHash = keccak256(signature);\n        require(!usedLink[linkHash], \"OldMasterMemes: The presale link has already been used. Please request a new one\");\n\n        for (uint256 i = 0; i < amount; i++) {\n            mintIndex += 1;\n            _safeMint(msg.sender, mintIndex);\n        }\n        usedLink[linkHash] = true;\n    }","after":"function presaleMintOMM(\n        address wallet,\n        uint256 maxAmount,\n        uint256 timestamp,\n        bytes calldata signature,\n        uint256 amount\n    ) external payable whenPresaleIsActive {\n        require(balanceOf(msg.sender) + amount <= maxPerUser, \"OldMasterMemes: Amount exceeds max presale amount per user\");\n        require(amount <= maxAmount, \"OldMasterMemes: Amount exceeds max\");\n        require(mintIndex + amount <= maxOmmPresale, \"OldMasterMemes: Purchase would exceed presale cap\");\n        require(mintPricePresale * amount <= msg.value, \"OldMasterMemes: Ether value sent is not correct\");\n        require(msg.sender == wallet, \"OldMasterMemes: Wallet from signature does not match message sender\");\n        require(_verifySignature(wallet, maxAmount, timestamp, signature), \"OldMasterMemes: Invalid signature\");\n        bytes32 linkHash = keccak256(signature);\n        require(!usedLink[linkHash], \"OldMasterMemes: The presale link has already been used. Please request a new one\");\n\n        for (uint256 i = 0; i < amount; i++) {\n            mintIndex += 1;\n            _safeMint(msg.sender, mintIndex);\n        }\n        usedLink[linkHash] = true;\n    }","contract":"OldMasterMemes","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _baseUri) external onlyOwner whenMetadataIsNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n    }","after":"function setBaseUri(string calldata _baseUri) external onlyOwner whenMetadataIsNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n    }","contract":"OldMasterMemes","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyOwner whenMetadataIsNotFrozen {\n        super._setTokenURI(tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata _tokenURI) external onlyOwner whenMetadataIsNotFrozen {\n        super._setTokenURI(tokenId, _tokenURI);\n    }","contract":"OldMasterMemes","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory _provenanceHash) external onlyOwner whenProvenanceIsNotFrozen {\n        provenanceHash = _provenanceHash;\n    }","after":"function setProvenanceHash(string calldata _provenanceHash) external onlyOwner whenProvenanceIsNotFrozen {\n        provenanceHash = _provenanceHash;\n    }","contract":"OldMasterMemes","time":0},{"type":"external-function ","before":"function setUnrevealedTokenUri(string memory _unrevealedTokenUri) external onlyOwner whenMetadataIsNotFrozen {\n        unrevealedTokenUri = _unrevealedTokenUri;\n    }","after":"function setUnrevealedTokenUri(string calldata _unrevealedTokenUri) external onlyOwner whenMetadataIsNotFrozen {\n        unrevealedTokenUri = _unrevealedTokenUri;\n    }","contract":"OldMasterMemes","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public maxOmm;","after":"uint256 public immutable maxOmm;","contract":"OldMasterMemes","time":0},{"type":"state-data-arrangement ","before":"\nbool public metadataFrozen;\nmapping(uint256 => bool) claimedFrames;\nstring public baseUri;\naddress public ommContractAddress;","after":"mapping(uint256 => bool) claimedFrames;\nstring public baseUri;\naddress public ommContractAddress;\nbool public metadataFrozen;\n","contract":"Frames","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _baseUri) external onlyOwner whenMetadataIsNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n    }","after":"function setBaseUri(string calldata _baseUri) external onlyOwner whenMetadataIsNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n    }","contract":"Frames","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory tokenURI) external onlyOwner whenMetadataIsNotFrozen {\n        super._setTokenURI(tokenId, tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata tokenURI) external onlyOwner whenMetadataIsNotFrozen {\n        super._setTokenURI(tokenId, tokenURI);\n    }","contract":"Frames","time":0}]}
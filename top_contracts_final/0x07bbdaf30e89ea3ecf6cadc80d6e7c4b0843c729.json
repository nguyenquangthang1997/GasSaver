{"time":296,"results":[{"type":"state-data-arrangement ","before":"\nstring public quaks_PROVENANCE = \"\";\nstring public LICENSE_TEXT = \"\";\nbool licenseLocked = false;\nuint256 public quaksPrice = 10000000000000000;\nuint public constant maxquaksPurchase = 20;\nuint256 public constant MAX_quaks = 6000;\nbool public saleIsActive = false;\nmapping(uint => string) public quaksNames;\nuint public quaksReserve = 500;","after":"string public quaks_PROVENANCE = \"\";\nstring public LICENSE_TEXT = \"\";\nuint256 public quaksPrice = 10000000000000000;\nuint public constant maxquaksPurchase = 20;\nuint256 public constant MAX_quaks = 6000;\nmapping(uint => string) public quaksNames;\nuint public quaksReserve = 500;\nbool licenseLocked = false;\nbool public saleIsActive = false;\n","contract":"Quaks","time":0},{"type":"external-function ","before":"function changequaksName(uint _tokenId, string memory _name) public {\n        require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this quaks!\");\n        require(sha256(bytes(_name)) != sha256(bytes(quaksNames[_tokenId])), \"New name is same as the current one\");\n        quaksNames[_tokenId] = _name;\n        emit quaksNameChange(msg.sender, _tokenId, _name);\n    }","after":"function changequaksName(uint _tokenId, string calldata _name) public {\n        require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this quaks!\");\n        require(sha256(bytes(_name)) != sha256(bytes(quaksNames[_tokenId])), \"New name is same as the current one\");\n        quaksNames[_tokenId] = _name;\n        emit quaksNameChange(msg.sender, _tokenId, _name);\n    }","contract":"Quaks","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        quaks_PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        quaks_PROVENANCE = provenanceHash;\n    }","contract":"Quaks","time":0},{"type":"external-function ","before":"function changeLicense(string memory _license) public onlyOwner {\n        require(licenseLocked == false, \"License already locked\");\n        LICENSE_TEXT = _license;\n    }","after":"function changeLicense(string calldata _license) public onlyOwner {\n        require(licenseLocked == false, \"License already locked\");\n        LICENSE_TEXT = _license;\n    }","contract":"Quaks","time":0}]}
{"time":234,"results":[{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _baseTokenURI = baseURI;\n    }","contract":"Affirmations","time":0},{"type":"external-function ","before":"function mintGifts(uint256[] memory numberOfMints, address[] memory _mintTo) public onlyOwner {\n        require(mintStartIndexDrawn, \"Sale hasn't started\");\n\n        for (uint i = 0; i < numberOfMints.length; i++) {\n            require(totalSupply().add(numberOfMints[i]) <= totalAffirmations, 'Not enough affirmations left');\n\n            for(uint j = 0; j < numberOfMints[i]; j++) {\n                uint mintNum = totalSupply() + 1;\n                if (mintNum < totalAffirmations) {\n                    _safeMint(_mintTo[i], mintNum);\n                }\n            }\n        }\n    }","after":"function mintGifts(uint256[] calldata numberOfMints, address[] calldata _mintTo) public onlyOwner {\n        require(mintStartIndexDrawn, \"Sale hasn't started\");\n\n        for (uint i = 0; i < numberOfMints.length; i++) {\n            require(totalSupply().add(numberOfMints[i]) <= totalAffirmations, 'Not enough affirmations left');\n\n            for(uint j = 0; j < numberOfMints[i]; j++) {\n                uint mintNum = totalSupply() + 1;\n                if (mintNum < totalAffirmations) {\n                    _safeMint(_mintTo[i], mintNum);\n                }\n            }\n        }\n    }","contract":"Affirmations","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"Affirmations","time":1},{"type":"immutable-restrict-modification ","before":"uint256 internal fee;","after":"uint256 internal immutable fee;","contract":"Affirmations","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private price = 77700000000000000;","after":"uint256 private constant price = 77700000000000000;","contract":"Affirmations","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public maxAffirmationsPerMint = 7;","after":"uint256 public constant maxAffirmationsPerMint = 7;","contract":"Affirmations","time":1},{"type":"constant-restrict-modification  ","before":"string public provenanceHash = \"\";","after":"string public constant provenanceHash = \"\";","contract":"Affirmations","time":1},{"type":"immutable-restrict-modification ","before":"address vrfCoordinator = 0xf0d54349aDdcf704F77AE15b96510dEA15cb7952;","after":"address immutable vrfCoordinator = 0xf0d54349aDdcf704F77AE15b96510dEA15cb7952;","contract":"Affirmations","time":1},{"type":"constant-restrict-modification  ","before":"address linkToken = 0x514910771AF9Ca656af840dff83E8264EcF986CA;","after":"address constant linkToken = 0x514910771AF9Ca656af840dff83E8264EcF986CA;","contract":"Affirmations","time":1},{"type":"constant-restrict-modification  ","before":"uint linkFee = 2 * 10 ** 18;","after":"uint constant linkFee = 2 * 10 ** 18;","contract":"Affirmations","time":1},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"ERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"ERC1155","time":0}]}
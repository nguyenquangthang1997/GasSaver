{"time":164,"results":[{"type":"external-function ","before":"function activateMultiple(uint[] memory pIDs, uint[] memory cardIndices)\n        public returns (uint[] memory ids, uint16[] memory protos, uint16[] memory purities) {\n        uint len = pIDs.length;\n        require(len > 0, \"can't activate no cards\");\n        require(len <= activationLimit, \"can't activate more than the activation limit\");\n        require(len == cardIndices.length, \"must have the same length\");\n        ids = new uint[](len);\n        protos = new uint16[](len);\n        purities = new uint16[](len);\n        for (uint i = 0; i < len; i++) {\n            (ids[i], protos[i], purities[i]) = activate(pIDs[i], cardIndices[i]);\n        }\n        return (ids, protos, purities);\n    }","after":"function activateMultiple(uint[] calldata pIDs, uint[] calldata cardIndices)\n        public returns (uint[] memory ids, uint16[] memory protos, uint16[] memory purities) {\n        uint len = pIDs.length;\n        require(len > 0, \"can't activate no cards\");\n        require(len <= activationLimit, \"can't activate more than the activation limit\");\n        require(len == cardIndices.length, \"must have the same length\");\n        ids = new uint[](len);\n        protos = new uint16[](len);\n        purities = new uint16[](len);\n        for (uint i = 0; i < len; i++) {\n            (ids[i], protos[i], purities[i]) = activate(pIDs[i], cardIndices[i]);\n        }\n        return (ids, protos, purities);\n    }","contract":"PackFive","time":0}]}
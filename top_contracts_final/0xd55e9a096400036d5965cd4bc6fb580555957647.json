{"time":193,"results":[{"type":"de-morgan-condition ","before":"rn !!_honoraryAddresses[_address] && !_claimedHonorary[_addre","after":"!(rn _honoraryAddresses[_address] && !_claimedHonorary[_addre)","loc":{"start":{"line":1385,"column":15},"end":{"line":1385,"column":75}},"contract":"ArtAI","time":0},{"type":"de-morgan-condition ","before":"   !!_honoraryAddresses[_msgSender()] &&\n            !_claimedHonorary[_msgSender","after":"!(   _honoraryAddresses[_msgSender()] &&\n            !_claimedHonorary[_msgSender)","loc":{"start":{"line":1623,"column":12},"end":{"line":1624,"column":42}},"contract":"ArtAI","time":0},{"type":"external-function ","before":"   function updateImageName(string memory _newImageName, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        IERC20 epoToken = IERC20(_EPOAddress);\n        require(ownerOf(_tokenId) == _msgSender());\n        require(\n            epoToken.balanceOf(_msgSender()) >= _nameUpdatePrice,\n            \"epo bal\"\n        );\n        require(\n            epoToken.allowance(_msgSender(), address(this)) >= _nameUpdatePrice,\n            \"allowance\"\n        );\n        require(bytes(_newImageName).length <= _maxImageNameLength, \"length\");\n        require(!_usedNames[_newImageName], \"used\");\n\n        epoToken.transferFrom(_msgSender(), EPOWallet, _nameUpdatePrice);\n        Hero storage _tokenInfo = _tokenIdToHero[_tokenId];\n        _usedNames[_tokenInfo.name] = false;\n        _usedNames[_newImageName] = true;\n        _tokenInfo.name = _newImageName;\n  ","after":"   function updateImageName(string calldata _newImageName, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        IERC20 epoToken = IERC20(_EPOAddress);\n        require(ownerOf(_tokenId) == _msgSender());\n        require(\n            epoToken.balanceOf(_msgSender()) >= _nameUpdatePrice,\n            \"epo bal\"\n        );\n        require(\n            epoToken.allowance(_msgSender(), address(this)) >= _nameUpdatePrice,\n            \"allowance\"\n        );\n        require(bytes(_newImageName).length <= _maxImageNameLength, \"length\");\n        require(!_usedNames[_newImageName], \"used\");\n\n        epoToken.transferFrom(_msgSender(), EPOWallet, _nameUpdatePrice);\n        Hero storage _tokenInfo = _tokenIdToHero[_tokenId];\n        _usedNames[_tokenInfo.name] = false;\n        _usedNames[_newImageName] = true;\n        _tokenInfo.name = _newImageName;\n  ","contract":"ArtAI","time":0},{"type":"external-function ","before":"   function ownerMint(\n        string memory _imageName,\n        string memory _imageHash,\n        string memory _imageId,\n        uint256 _classId,\n        uint256 _dispositionId,\n        uint256[4] memory _seeds,\n        address _recipient,\n        bool _isHonorary\n    ) external onlyOwner returns (uint256) {\n        require(_tokenSupply < maxSupply, \"max supply\");\n        require(_classId < _classList.length, \"class\");\n        require(_dispositionId < _dispositionList.length, \"disp\");\n        bytes memory _message = bytes(_imageName);\n        uint256 _newTokenId = _mint(\n            _recipient,\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _message,\n            _isHonorary\n        );\n\n        return _newTokenId;\n  ","after":"   function ownerMint(\n        string calldata _imageName,\n        string calldata _imageHash,\n        string calldata _imageId,\n        uint256 _classId,\n        uint256 _dispositionId,\n        uint256[4] calldata _seeds,\n        address _recipient,\n        bool _isHonorary\n    ) external onlyOwner returns (uint256) {\n        require(_tokenSupply < maxSupply, \"max supply\");\n        require(_classId < _classList.length, \"class\");\n        require(_dispositionId < _dispositionList.length, \"disp\");\n        bytes memory _message = bytes(_imageName);\n        uint256 _newTokenId = _mint(\n            _recipient,\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _message,\n            _isHonorary\n        );\n\n        return _newTokenId;\n  ","contract":"ArtAI","time":0},{"type":"external-function ","before":"   function mint(\n        string memory _imageName,\n        string memory _imageHash,\n        string memory _imageId,\n        uint256 _classId,\n        uint256 _dispositionId,\n        uint256[4] memory _seeds,\n        bytes memory _signedMessage,\n        bytes memory _whitelistMessage,\n        uint256 _whitelistAllocation,\n        bool _isHonorary\n    ) external payable whenNotPaused returns (uint256) {\n        require(!msg.sender.isContract(), \"contract\");\n        require(_verifyHonorary(_isHonorary), \"honorary\");\n        require(msg.value >= _purchasePrice, \"price\");\n        require(\n            _isMintAvailable(\n                _msgSender(),\n                _whitelistAllocation,\n                _whitelistMessage\n            ),\n            \"mint\"\n        );\n        require(_tokenSupply < maxSupply, \"max supply\");\n\n        _verifyParams(\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage\n        );\n        uint256 _newTokenId = _mint(\n            msg.sender,\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage,\n            _isHonorary\n        );\n\n        return _newTokenId;\n  ","after":"   function mint(\n        string calldata _imageName,\n        string calldata _imageHash,\n        string calldata _imageId,\n        uint256 _classId,\n        uint256 _dispositionId,\n        uint256[4] calldata _seeds,\n        bytes calldata _signedMessage,\n        bytes calldata _whitelistMessage,\n        uint256 _whitelistAllocation,\n        bool _isHonorary\n    ) external payable whenNotPaused returns (uint256) {\n        require(!msg.sender.isContract(), \"contract\");\n        require(_verifyHonorary(_isHonorary), \"honorary\");\n        require(msg.value >= _purchasePrice, \"price\");\n        require(\n            _isMintAvailable(\n                _msgSender(),\n                _whitelistAllocation,\n                _whitelistMessage\n            ),\n            \"mint\"\n        );\n        require(_tokenSupply < maxSupply, \"max supply\");\n\n        _verifyParams(\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage\n        );\n        uint256 _newTokenId = _mint(\n            msg.sender,\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage,\n            _isHonorary\n        );\n\n        return _newTokenId;\n  ","contract":"ArtAI","time":0},{"type":"external-function ","before":"   function rewardMint(\n        string memory _imageName,\n        string memory _imageHash,\n        string memory _imageId,\n        uint256 _classId,\n        uint256 _dispositionId,\n        uint256[4] memory _seeds,\n        bytes memory _signedMessage,\n        bytes memory _signedRewardProof,\n        bool _isHonorary\n    ) external payable whenNotPaused returns (uint256) {\n        require(!msg.sender.isContract(), \"contract\");\n        require(_tokenSupply < maxSupply, \"max supply\");\n        require(_verifyHonorary(_isHonorary), \"honorary\");\n        require(!_claimed[_msgSender()], \"claim\");\n        require(_checkFreeElligibility(_signedRewardProof), \"elligible\");\n        _verifyParams(\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage\n        );\n\n        _claimed[_msgSender()] = true;\n        uint256 _newTokenId = _mint(\n            _msgSender(),\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage,\n            _isHonorary\n        );\n\n        return _newTokenId;\n  ","after":"   function rewardMint(\n        string calldata _imageName,\n        string calldata _imageHash,\n        string calldata _imageId,\n        uint256 _classId,\n        uint256 _dispositionId,\n        uint256[4] calldata _seeds,\n        bytes calldata _signedMessage,\n        bytes calldata _signedRewardProof,\n        bool _isHonorary\n    ) external payable whenNotPaused returns (uint256) {\n        require(!msg.sender.isContract(), \"contract\");\n        require(_tokenSupply < maxSupply, \"max supply\");\n        require(_verifyHonorary(_isHonorary), \"honorary\");\n        require(!_claimed[_msgSender()], \"claim\");\n        require(_checkFreeElligibility(_signedRewardProof), \"elligible\");\n        _verifyParams(\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage\n        );\n\n        _claimed[_msgSender()] = true;\n        uint256 _newTokenId = _mint(\n            _msgSender(),\n            _imageName,\n            _imageHash,\n            _imageId,\n            _classId,\n            _dispositionId,\n            _seeds,\n            _signedMessage,\n            _isHonorary\n        );\n\n        return _newTokenId;\n  ","contract":"ArtAI","time":0},{"type":"immutable-restrict-modification ","before":"   uint256 _protectedClass","after":"   uint256 _protectedClass","contract":"ArtAI","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 public maxSupply = 100","after":"   uint256 public constant maxSupply = 100","contract":"ArtAI","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 private _maxImageNameLength = 1","after":"   uint256 private constant _maxImageNameLength = 1","contract":"ArtAI","time":0},{"type":"immutable-restrict-modification ","before":"   address private _gen1Addre","after":"   address private _gen1Addre","contract":"ArtAI","time":0},{"type":"immutable-restrict-modification ","before":"   address private _gen2Addre","after":"   address private _gen2Addre","contract":"ArtAI","time":0}]}
{"time":160,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n                !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n                (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":1607,"column":16},"end":{"line":1608,"column":46}},"contract":"MetaKnights","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) external {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n        IERC20(_utilityContract).transferFrom(msg.sender, address(this), NAME_CHANGE_PRICE);\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        IERC20(_utilityContract).burn(NAME_CHANGE_PRICE);\n        emit NameChange(tokenId, newName);\n    }","after":"function changeName(uint256 tokenId, string calldata newName) external {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), \"New name is same as the current one\");\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n        IERC20(_utilityContract).transferFrom(msg.sender, address(this), NAME_CHANGE_PRICE);\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        IERC20(_utilityContract).burn(NAME_CHANGE_PRICE);\n        emit NameChange(tokenId, newName);\n    }","contract":"MetaKnights","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        baseTokenURI = baseURI;\n        emit BaseURIChanged(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        baseTokenURI = baseURI;\n        emit BaseURIChanged(baseURI);\n    }","contract":"MetaKnights","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_NFT_SUPPLY = 9999;","after":"uint256 public constant MAX_NFT_SUPPLY = 9999;","contract":"MetaKnights","time":1}]}
{"time":212,"results":[{"type":"state-data-arrangement ","before":"\nstring public zale_PROVENANCE = \"\";\nstring public LICENSE_TEXT = \"\";\nbool licenseLocked = false;\nuint256 public zalePrice = 60000000000000000;\nuint public constant maxzalePurchase = 9999;\nuint256 public MAX_zaleS = 9999;\nbool public saleIsActive = false;\nmapping(uint => string) public zaleNames;\nuint public zaleReserve = 200;\nmapping(uint => uint) public readyTime;\nuint8[] score = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nuint public reward1 = 1000000000000000000;\nuint public reward2 = 400000000000000000;\nuint public reward3 = 300000000000000000;\nuint public reward4 = 130000000000000000;\nuint public reward5 = 100000000000000000;\nuint public reward6 = 80000000000000000;\nbool public _isActive = false;","after":"string public zale_PROVENANCE = \"\";\nstring public LICENSE_TEXT = \"\";\nuint256 public zalePrice = 60000000000000000;\nuint public constant maxzalePurchase = 9999;\nuint256 public MAX_zaleS = 9999;\nmapping(uint => string) public zaleNames;\nuint public zaleReserve = 200;\nmapping(uint => uint) public readyTime;\nuint8[] score = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nuint public reward1 = 1000000000000000000;\nuint public reward2 = 400000000000000000;\nuint public reward3 = 300000000000000000;\nuint public reward4 = 130000000000000000;\nuint public reward5 = 100000000000000000;\nuint public reward6 = 80000000000000000;\nbool licenseLocked = false;\nbool public saleIsActive = false;\nbool public _isActive = false;\n","contract":"Zalesi","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n    zale_PROVENANCE = provenanceHash;\n  }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n    zale_PROVENANCE = provenanceHash;\n  }","contract":"Zalesi","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n    _setBaseURI(baseURI);\n  }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n    _setBaseURI(baseURI);\n  }","contract":"Zalesi","time":0},{"type":"external-function ","before":"function changeLicense(string memory _license) public onlyOwner {\n    require(licenseLocked == false, \"License already locked\");\n    LICENSE_TEXT = _license;\n  }","after":"function changeLicense(string calldata _license) public onlyOwner {\n    require(licenseLocked == false, \"License already locked\");\n    LICENSE_TEXT = _license;\n  }","contract":"Zalesi","time":0},{"type":"external-function ","before":"function changezaleName(uint _tokenId, string memory _name) public {\n    require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this zale!\");\n    require(sha256(bytes(_name)) != sha256(bytes(zaleNames[_tokenId])), \"New name is same as the current one\");\n    zaleNames[_tokenId] = _name;\n\n    emit zaleNameChange(msg.sender, _tokenId, _name);\n\n  }","after":"function changezaleName(uint _tokenId, string calldata _name) public {\n    require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this zale!\");\n    require(sha256(bytes(_name)) != sha256(bytes(zaleNames[_tokenId])), \"New name is same as the current one\");\n    zaleNames[_tokenId] = _name;\n\n    emit zaleNameChange(msg.sender, _tokenId, _name);\n\n  }","contract":"Zalesi","time":0},{"type":"external-function ","before":"function getReward(uint[] memory tokenIds) external {\n    require(_isActive, \"Reward is not open for claims\");\n    require(balanceOf(msg.sender) > 0, \"You do not own any tokens\");\n    uint len = tokenIds.length;\n    score = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    uint flag = 0;\n    for (uint i = 0; i < len; i++) {\n      if(_exists(tokenIds[i]) && ownerOf(tokenIds[i]) == msg.sender && canWithdraw(tokenIds[i])) {\n        score[getScore(tokenIds[i])] = 1;\n        _setNextWithdrawDate(tokenIds[i]);\n        flag = 1;\n      }\n    }\n    if (flag == 1) {\n      getCombo(msg.sender, score);\n    }\n  }","after":"function getReward(uint[] calldata tokenIds) external {\n    require(_isActive, \"Reward is not open for claims\");\n    require(balanceOf(msg.sender) > 0, \"You do not own any tokens\");\n    uint len = tokenIds.length;\n    score = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    uint flag = 0;\n    for (uint i = 0; i < len; i++) {\n      if(_exists(tokenIds[i]) && ownerOf(tokenIds[i]) == msg.sender && canWithdraw(tokenIds[i])) {\n        score[getScore(tokenIds[i])] = 1;\n        _setNextWithdrawDate(tokenIds[i]);\n        flag = 1;\n      }\n    }\n    if (flag == 1) {\n      getCombo(msg.sender, score);\n    }\n  }","contract":"Zalesi","time":0}]}
{"time":171,"results":[{"type":"loop-calculation","before":"uint64 oneYear = 31536000;","after":"// move outside for loop\nuint64 oneYear = 31536000;","loc":{"start":{"line":239,"column":12},"end":{"line":239,"column":37}},"contract":"GalleryTwentySeven","time":0},{"type":"external-function ","before":"function initializeAuction (\n        uint256 punkScapeId,\n        uint64 endTimestamp,\n        bytes memory signature,\n        string memory message\n    ) external payable\n    {\n        require(_auctions[punkScapeId].endTimestamp == 0, \"Auction has already started.\");\n        require(msg.value >= _startingPrice, \"Auction starting price not met.\");\n        require(endTimestamp >= uint64(block.timestamp), \"Auction has ended.\");\n\n        // Verify this data was signed by punkscape\n        bytes32 signedData = ECDSA.toEthSignedMessageHash(\n            keccak256(abi.encodePacked(punkScapeId, endTimestamp))\n        );\n        require(\n            ECDSA.recover(signedData, signature) == owner(),\n            \"Auction data not signed.\"\n        );\n\n        _auctions[punkScapeId] = Auction(_msgSender(), uint128(msg.value), endTimestamp, false, false);\n        _maybeExtendTime(punkScapeId, _auctions[punkScapeId]);\n\n        emit Bid(punkScapeId, msg.value, _msgSender(), message);\n    }","after":"function initializeAuction (\n        uint256 punkScapeId,\n        uint64 endTimestamp,\n        bytes calldata signature,\n        string calldata message\n    ) external payable\n    {\n        require(_auctions[punkScapeId].endTimestamp == 0, \"Auction has already started.\");\n        require(msg.value >= _startingPrice, \"Auction starting price not met.\");\n        require(endTimestamp >= uint64(block.timestamp), \"Auction has ended.\");\n\n        // Verify this data was signed by punkscape\n        bytes32 signedData = ECDSA.toEthSignedMessageHash(\n            keccak256(abi.encodePacked(punkScapeId, endTimestamp))\n        );\n        require(\n            ECDSA.recover(signedData, signature) == owner(),\n            \"Auction data not signed.\"\n        );\n\n        _auctions[punkScapeId] = Auction(_msgSender(), uint128(msg.value), endTimestamp, false, false);\n        _maybeExtendTime(punkScapeId, _auctions[punkScapeId]);\n\n        emit Bid(punkScapeId, msg.value, _msgSender(), message);\n    }","contract":"GalleryTwentySeven","time":0},{"type":"external-function ","before":"function bid (\n        uint256 punkScapeId,\n        string memory message\n    )\n        external payable\n        nonReentrant\n    {\n        Auction storage auction = _auctions[punkScapeId];\n        uint256 bidValue = msg.value;\n        address bidder = msg.sender;\n\n        require(bidValue >= _currentBidPrice(auction), \"Minimum bid value not met.\");\n        require(block.timestamp <= auction.endTimestamp, \"Auction is not active.\");\n\n        // Pay back previous bidder\n        if (_hasBid(auction)) {\n            payable(auction.latestBidder).transfer(auction.latestBid);\n        }\n\n        _maybeExtendTime(punkScapeId, auction);\n\n        // Store the bid\n        auction.latestBid = uint128(bidValue);\n        auction.latestBidder = bidder;\n\n        emit Bid(punkScapeId, bidValue, bidder, message);\n    }","after":"function bid (\n        uint256 punkScapeId,\n        string calldata message\n    )\n        external payable\n        nonReentrant\n    {\n        Auction storage auction = _auctions[punkScapeId];\n        uint256 bidValue = msg.value;\n        address bidder = msg.sender;\n\n        require(bidValue >= _currentBidPrice(auction), \"Minimum bid value not met.\");\n        require(block.timestamp <= auction.endTimestamp, \"Auction is not active.\");\n\n        // Pay back previous bidder\n        if (_hasBid(auction)) {\n            payable(auction.latestBidder).transfer(auction.latestBid);\n        }\n\n        _maybeExtendTime(punkScapeId, auction);\n\n        // Store the bid\n        auction.latestBid = uint128(bidValue);\n        auction.latestBidder = bidder;\n\n        emit Bid(punkScapeId, bidValue, bidder, message);\n    }","contract":"GalleryTwentySeven","time":0},{"type":"external-function ","before":"function claim (\n        uint256 punkScapeId,\n        uint256 tokenId,\n        string memory cid,\n        bytes memory signature\n    ) external {\n        Auction storage auction = _auctions[punkScapeId];\n        require(!auction.settled, \"Auction already settled\");\n\n        // Verify this data was signed by punkscape\n        bytes32 message = ECDSA.toEthSignedMessageHash(\n            keccak256(abi.encodePacked(punkScapeId, tokenId, cid))\n        );\n        require(\n            ECDSA.recover(message, signature) == owner(),\n            \"Claim data not signed.\"\n        );\n\n        address claimableBy = _hasBid(auction)\n            ? auction.latestBidder\n            : ERC721(_punkScapes).ownerOf(punkScapeId);\n        require(_msgSender() == claimableBy, \"Not allowed to claim.\");\n\n        TwentySevenYearScapes(_twentySevenYearScapes).mint(claimableBy, tokenId, cid);\n\n        // Reserve 50% of the auction reward for the PunkScape owner\n        uint256 ownerShare = auction.latestBid / 2;\n        payable(owner()).transfer(auction.latestBid - ownerShare);\n\n        // End the auction\n        auction.settled = true;\n    }","after":"function claim (\n        uint256 punkScapeId,\n        uint256 tokenId,\n        string calldata cid,\n        bytes calldata signature\n    ) external {\n        Auction storage auction = _auctions[punkScapeId];\n        require(!auction.settled, \"Auction already settled\");\n\n        // Verify this data was signed by punkscape\n        bytes32 message = ECDSA.toEthSignedMessageHash(\n            keccak256(abi.encodePacked(punkScapeId, tokenId, cid))\n        );\n        require(\n            ECDSA.recover(message, signature) == owner(),\n            \"Claim data not signed.\"\n        );\n\n        address claimableBy = _hasBid(auction)\n            ? auction.latestBidder\n            : ERC721(_punkScapes).ownerOf(punkScapeId);\n        require(_msgSender() == claimableBy, \"Not allowed to claim.\");\n\n        TwentySevenYearScapes(_twentySevenYearScapes).mint(claimableBy, tokenId, cid);\n\n        // Reserve 50% of the auction reward for the PunkScape owner\n        uint256 ownerShare = auction.latestBid / 2;\n        payable(owner()).transfer(auction.latestBid - ownerShare);\n\n        // End the auction\n        auction.settled = true;\n    }","contract":"GalleryTwentySeven","time":0},{"type":"external-function ","before":"function withdraw(uint256[] memory punkScapeIDs) external {\n        uint128 total = 0;\n\n        for (uint256 index = 0; index < punkScapeIDs.length; index++) {\n            uint256 id = punkScapeIDs[index];\n            Auction storage auction = _auctions[id];\n\n            // The rewards must not be claimed yet and the auction must be complete\n            require(auction.rewardsClaimed == false, \"Auction rewards already claimed\");\n            require(\n                auction.endTimestamp < block.timestamp &&\n                auction.endTimestamp > 0,\n                \"Auction not complete\"\n            );\n\n            // Holders can claim rewards within one year after an auction ends\n            uint64 oneYear = 31536000;\n            if (auction.endTimestamp + oneYear > block.timestamp) {\n                address scapeOwner = ERC721(_punkScapes).ownerOf(id);\n                require(scapeOwner == _msgSender(), \"Not eligible for reward\");\n            } else {\n                require(_msgSender() == owner(), \"Not eligible for reward\");\n            }\n\n            // Mark the auction rewards as already claimed to prevent multiple claims\n            auction.rewardsClaimed = true;\n\n            // 50% of total rewards\n            total += auction.latestBid / 2;\n        }\n\n        // Pay out the rewards\n        payable(_msgSender()).transfer(total);\n    }","after":"function withdraw(uint256[] calldata punkScapeIDs) external {\n        uint128 total = 0;\n\n        for (uint256 index = 0; index < punkScapeIDs.length; index++) {\n            uint256 id = punkScapeIDs[index];\n            Auction storage auction = _auctions[id];\n\n            // The rewards must not be claimed yet and the auction must be complete\n            require(auction.rewardsClaimed == false, \"Auction rewards already claimed\");\n            require(\n                auction.endTimestamp < block.timestamp &&\n                auction.endTimestamp > 0,\n                \"Auction not complete\"\n            );\n\n            // Holders can claim rewards within one year after an auction ends\n            uint64 oneYear = 31536000;\n            if (auction.endTimestamp + oneYear > block.timestamp) {\n                address scapeOwner = ERC721(_punkScapes).ownerOf(id);\n                require(scapeOwner == _msgSender(), \"Not eligible for reward\");\n            } else {\n                require(_msgSender() == owner(), \"Not eligible for reward\");\n            }\n\n            // Mark the auction rewards as already claimed to prevent multiple claims\n            auction.rewardsClaimed = true;\n\n            // 50% of total rewards\n            total += auction.latestBid / 2;\n        }\n\n        // Pay out the rewards\n        payable(_msgSender()).transfer(total);\n    }","contract":"GalleryTwentySeven","time":0},{"type":"immutable-restrict-modification ","before":"address private _punkScapes;","after":"address private immutable _punkScapes;","contract":"GalleryTwentySeven","time":0},{"type":"immutable-restrict-modification ","before":"address private _twentySevenYearScapes;","after":"address private immutable _twentySevenYearScapes;","contract":"GalleryTwentySeven","time":0},{"type":"external-function ","before":"   function mint(address _to, uint256 _tokenId, string memory _cid) public ensureAvailability {\n        require(_msgSender() == auctionContract(), \"Not allowed to mint\");\n\n        nextToken();\n\n        _safeMint(_to, _tokenId);\n\n        emit Mint(_tokenId, _cid);\n  ","after":"   function mint(address _to, uint256 _tokenId, string calldata _cid) public ensureAvailability {\n        require(_msgSender() == auctionContract(), \"Not allowed to mint\");\n\n        nextToken();\n\n        _safeMint(_to, _tokenId);\n\n        emit Mint(_tokenId, _cid);\n  ","contract":"TwentySevenYearScapes","time":0},{"type":"external-function ","before":"   function setBaseURI(string memory baseURI_) public onlyOwner unfrozen {\n        baseURI = baseURI_;\n\n        emit MetadataURIChanged(baseURI);\n  ","after":"   function setBaseURI(string calldata baseURI_) public onlyOwner unfrozen {\n        baseURI = baseURI_;\n\n        emit MetadataURIChanged(baseURI);\n  ","contract":"TwentySevenYearScapes","time":0}]}
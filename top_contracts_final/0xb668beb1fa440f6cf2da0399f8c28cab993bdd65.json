{"time":199,"results":[{"type":"external-function ","before":"function createCitizen(uint256 identityId, uint256 vaultId, uint256 itemCacheId, uint256 landDeedId, bool genderFemale, string memory specialMessage) public nonReentrant {\n        require(citizenMintActive, \"Uploading is not currently active\");\n        require(identityValidated(identityId), \"You are not the owner of that identity\");\n        require(itemCacheValidated(itemCacheId), \"You are not the owner of that item cache\");\n        require(landDeedValidated(landDeedId), \"You are not the owner of that land deed\");\n\n        if(genderFemale)\n        {\n           require(femaleActive, \"Females cannot be uploaded yet\"); \n        }\n\n        if(vaultId > 0)\n        {\n            require(vaultValidated(vaultId), \"You are not the owner of that vault box\");\n        }\n\n        _safeMint(_msgSender(), newestCitizen + 1);\n\n        newestCitizen++;\n\n        ERC721 _identityContract;\n\n        if(identityId < 2300)\n        {\n            _identityContract = ERC721(identityContract);\n        }\n        else\n        {\n            _identityContract = ERC721(boughtIdentityContract);\n        }\n        _identityContract.transferFrom(_msgSender(), address(this), identityId);\n\n        if(vaultId > 0)\n        {\n            ERC721 _vaultContract = ERC721(vaultContract);\n            _vaultContract.transferFrom(_msgSender(), address(this), vaultId);\n\n            _vaultDataByCitizenId[newestCitizen] = vaultId;\n        }\n\n        ERC721 _itemContract = ERC721(itemContract);\n        _itemContract.transferFrom(_msgSender(), address(this), itemCacheId);\n\n        ERC721 _landContract = ERC721(landContract);\n        _landContract.transferFrom(_msgSender(), address(this), landDeedId);\n\n        // Set the underlying component data mappings\n        _identityDataByCitizenId[newestCitizen] = identityId;\n        _itemCacheDataByCitizenId[newestCitizen] = itemCacheId;\n        _landDeedDataByCitizenId[newestCitizen] = landDeedId;\n        if(genderFemale)\n        {\n            _genderFemale[newestCitizen] = genderFemale;\n        }\n        if(bytes(specialMessage).length > 0)\n        {\n            _specialMessageByCitizenId[newestCitizen] = specialMessage;\n        }\n        _rewardRateByCitizenId[newestCitizen] = calculateCitizenReward(identityId, vaultId);\n\n        _citizenCreationTime[newestCitizen] = block.timestamp;\n\n        IByteContract byteToken = IByteContract(bytesContract);\n        byteToken.updateRewardOnMint(_msgSender(), newestCitizen);\n    }","after":"function createCitizen(uint256 identityId, uint256 vaultId, uint256 itemCacheId, uint256 landDeedId, bool genderFemale, string calldata specialMessage) public nonReentrant {\n        require(citizenMintActive, \"Uploading is not currently active\");\n        require(identityValidated(identityId), \"You are not the owner of that identity\");\n        require(itemCacheValidated(itemCacheId), \"You are not the owner of that item cache\");\n        require(landDeedValidated(landDeedId), \"You are not the owner of that land deed\");\n\n        if(genderFemale)\n        {\n           require(femaleActive, \"Females cannot be uploaded yet\"); \n        }\n\n        if(vaultId > 0)\n        {\n            require(vaultValidated(vaultId), \"You are not the owner of that vault box\");\n        }\n\n        _safeMint(_msgSender(), newestCitizen + 1);\n\n        newestCitizen++;\n\n        ERC721 _identityContract;\n\n        if(identityId < 2300)\n        {\n            _identityContract = ERC721(identityContract);\n        }\n        else\n        {\n            _identityContract = ERC721(boughtIdentityContract);\n        }\n        _identityContract.transferFrom(_msgSender(), address(this), identityId);\n\n        if(vaultId > 0)\n        {\n            ERC721 _vaultContract = ERC721(vaultContract);\n            _vaultContract.transferFrom(_msgSender(), address(this), vaultId);\n\n            _vaultDataByCitizenId[newestCitizen] = vaultId;\n        }\n\n        ERC721 _itemContract = ERC721(itemContract);\n        _itemContract.transferFrom(_msgSender(), address(this), itemCacheId);\n\n        ERC721 _landContract = ERC721(landContract);\n        _landContract.transferFrom(_msgSender(), address(this), landDeedId);\n\n        // Set the underlying component data mappings\n        _identityDataByCitizenId[newestCitizen] = identityId;\n        _itemCacheDataByCitizenId[newestCitizen] = itemCacheId;\n        _landDeedDataByCitizenId[newestCitizen] = landDeedId;\n        if(genderFemale)\n        {\n            _genderFemale[newestCitizen] = genderFemale;\n        }\n        if(bytes(specialMessage).length > 0)\n        {\n            _specialMessageByCitizenId[newestCitizen] = specialMessage;\n        }\n        _rewardRateByCitizenId[newestCitizen] = calculateCitizenReward(identityId, vaultId);\n\n        _citizenCreationTime[newestCitizen] = block.timestamp;\n\n        IByteContract byteToken = IByteContract(bytesContract);\n        byteToken.updateRewardOnMint(_msgSender(), newestCitizen);\n    }","contract":"NTCitizenDeploy","time":0},{"type":"external-function ","before":"function changeSpecialMessage(uint256 tokenId, string memory _message) public nonReentrant {\n        require(ownerOf(tokenId) == _msgSender(), \"You do not own that citizen\");\n\n        IByteContract iBytes = IByteContract(bytesContract);\n        iBytes.burn(_msgSender(), changeSpecialMessageCost);\n        _specialMessageByCitizenId[tokenId] = _message;\n     }","after":"function changeSpecialMessage(uint256 tokenId, string calldata _message) public nonReentrant {\n        require(ownerOf(tokenId) == _msgSender(), \"You do not own that citizen\");\n\n        IByteContract iBytes = IByteContract(bytesContract);\n        iBytes.burn(_msgSender(), changeSpecialMessageCost);\n        _specialMessageByCitizenId[tokenId] = _message;\n     }","contract":"NTCitizenDeploy","time":0},{"type":"immutable-restrict-modification ","before":"address public boughtIdentityContract;","after":"address public immutable boughtIdentityContract;","contract":"NTCitizenDeploy","time":1},{"type":"immutable-restrict-modification ","before":"uint256 creationTime;","after":"uint256 immutable creationTime;","contract":"NTCitizenDeploy","time":1},{"type":"constant-restrict-modification  ","before":"uint256 endDelta = 157680000;","after":"uint256 constant endDelta = 157680000;","contract":"NTCitizenDeploy","time":1}]}
{"time":663,"results":[{"type":"external-function ","before":"function setPrefix(string memory _prefix) public onlyOwner {\n        prefix = _prefix;\n    }","after":"function setPrefix(string calldata _prefix) public onlyOwner {\n        prefix = _prefix;\n    }","contract":"StarChant","time":0},{"type":"external-function ","before":"function mintWhitelist(bytes32 hash, bytes memory signature, uint256 numberOfTokens) public payable {\n        require(_verify(hash, signature), \"This hash's signature is invalid.\");\n        require(_hash(msg.sender) == hash, \"The address hash does not match the signed hash.\");\n        require(totalSaleSupply + numberOfTokens <= PUBLIC_STARCHANTS, \"Purchase would exceed max supply for sale.\");\n        require(STARCHANT_PRICE * numberOfTokens <= msg.value, \"Ether value sent is not correct\");\n        require(_allowListClaimed[msg.sender] + numberOfTokens <= allowListMaxMint, 'You cannot mint this many.');\n        _allowListClaimed[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            uint256 tokenId = RESERVED_STARCHANTS + totalSaleSupply + 1;\n\n            totalSaleSupply += 1;\n            _safeMint(msg.sender, tokenId);\n        }\n\n        payable(_splitter).transfer(msg.value);\n    }","after":"function mintWhitelist(bytes32 hash, bytes calldata signature, uint256 numberOfTokens) public payable {\n        require(_verify(hash, signature), \"This hash's signature is invalid.\");\n        require(_hash(msg.sender) == hash, \"The address hash does not match the signed hash.\");\n        require(totalSaleSupply + numberOfTokens <= PUBLIC_STARCHANTS, \"Purchase would exceed max supply for sale.\");\n        require(STARCHANT_PRICE * numberOfTokens <= msg.value, \"Ether value sent is not correct\");\n        require(_allowListClaimed[msg.sender] + numberOfTokens <= allowListMaxMint, 'You cannot mint this many.');\n        _allowListClaimed[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            uint256 tokenId = RESERVED_STARCHANTS + totalSaleSupply + 1;\n\n            totalSaleSupply += 1;\n            _safeMint(msg.sender, tokenId);\n        }\n\n        payable(_splitter).transfer(msg.value);\n    }","contract":"StarChant","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public MAX_STARCHANT;","after":"uint256 public immutable MAX_STARCHANT;","contract":"StarChant","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public RESERVED_STARCHANTS;","after":"uint256 public immutable RESERVED_STARCHANTS;","contract":"StarChant","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public PUBLIC_STARCHANTS;","after":"uint256 public immutable PUBLIC_STARCHANTS;","contract":"StarChant","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public STARCHANT_PRICE = 0.10 ether;","after":"uint256 public constant STARCHANT_PRICE = 0.10 ether;","contract":"StarChant","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"StarChant","time":1},{"type":"immutable-restrict-modification ","before":"uint256 internal fee;","after":"uint256 internal immutable fee;","contract":"StarChant","time":1}]}
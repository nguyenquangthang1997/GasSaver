{"time":120,"results":[{"type":"external-function ","before":"function mintCards(uint256[] memory _ids, uint256[] memory _amounts) public onlyOwner {\n        bool idAlreadyExists = false;\n        uint totalNewBaseCards;\n        uint totalNewBonusCards;\n        uint highestBaseCardSupply;\n        uint highestBonusCardSupply;\n        \n        for(uint i = 0; i < _amounts.length; i++) {\n            if(mintedCards[_ids[i]] > 0) { \n                idAlreadyExists = true;\n            }\n            if(_ids[i] == 1) { // ID 1 is the unique mintopolist card – supply of 50 – exempt from 30 per card limit\n                totalNewBaseCards += _amounts[i];\n            } else if (_ids[i] <= 750) { // base cards have IDs < 750\n                totalNewBaseCards += _amounts[i];\n                if (_amounts[i] > highestBaseCardSupply) {\n                    highestBaseCardSupply = _amounts[i];\n                }\n            } else { // bonus cards have IDs 9XX, so anything above 750\n                totalNewBonusCards += _amounts[i];\n                if (_amounts[i] > highestBonusCardSupply) {\n                    highestBonusCardSupply = _amounts[i];\n                }\n            }\n        }\n        \n        require(!idAlreadyExists, \"ID Already Exists\");\n        require(totalMintedBaseCards + totalNewBaseCards <= BASE_CARD_SUPPLY_CAP, \"12,000 base cards have already been minted\");\n        require(totalMintedBonusCards + totalNewBonusCards <= BONUS_CARD_SUPPLY_CAP, \"4,000 bonus cards have already been minted\");\n        require(highestBaseCardSupply <= MAX_SUPPLY_PER_BASE_ID, \"max supply for base cards is 30\");\n        require(highestBonusCardSupply <= MAX_SUPPLY_PER_BONUS_ID, \"max supply for bonus cards is 1000\");\n\n        for(uint i = 0; i < _amounts.length; i++) {\n            mintedCards[_ids[i]] = _amounts[i];\n        }\n        \n        totalMintedBaseCards += totalNewBaseCards;\n        totalMintedBonusCards += totalNewBonusCards;\n\n         _mintBatch(msg.sender, _ids, _amounts, \"\");\n ","after":"function mintCards(uint256[] calldata _ids, uint256[] calldata _amounts) public onlyOwner {\n        bool idAlreadyExists = false;\n        uint totalNewBaseCards;\n        uint totalNewBonusCards;\n        uint highestBaseCardSupply;\n        uint highestBonusCardSupply;\n        \n        for(uint i = 0; i < _amounts.length; i++) {\n            if(mintedCards[_ids[i]] > 0) { \n                idAlreadyExists = true;\n            }\n            if(_ids[i] == 1) { // ID 1 is the unique mintopolist card – supply of 50 – exempt from 30 per card limit\n                totalNewBaseCards += _amounts[i];\n            } else if (_ids[i] <= 750) { // base cards have IDs < 750\n                totalNewBaseCards += _amounts[i];\n                if (_amounts[i] > highestBaseCardSupply) {\n                    highestBaseCardSupply = _amounts[i];\n                }\n            } else { // bonus cards have IDs 9XX, so anything above 750\n                totalNewBonusCards += _amounts[i];\n                if (_amounts[i] > highestBonusCardSupply) {\n                    highestBonusCardSupply = _amounts[i];\n                }\n            }\n        }\n        \n        require(!idAlreadyExists, \"ID Already Exists\");\n        require(totalMintedBaseCards + totalNewBaseCards <= BASE_CARD_SUPPLY_CAP, \"12,000 base cards have already been minted\");\n        require(totalMintedBonusCards + totalNewBonusCards <= BONUS_CARD_SUPPLY_CAP, \"4,000 bonus cards have already been minted\");\n        require(highestBaseCardSupply <= MAX_SUPPLY_PER_BASE_ID, \"max supply for base cards is 30\");\n        require(highestBonusCardSupply <= MAX_SUPPLY_PER_BONUS_ID, \"max supply for bonus cards is 1000\");\n\n        for(uint i = 0; i < _amounts.length; i++) {\n            mintedCards[_ids[i]] = _amounts[i];\n        }\n        \n        totalMintedBaseCards += totalNewBaseCards;\n        totalMintedBonusCards += totalNewBonusCards;\n\n         _mintBatch(msg.sender, _ids, _amounts, \"\");\n ","contract":"MintopolyCards","time":0},{"type":"external-function ","before":"    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n ","after":"    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n ","contract":"MintopolyCards","time":0},{"type":"external-function ","before":"    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n ","after":"    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n ","contract":"MintopolyCards","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"MintopolyCards","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private BASE_CARD_SUPPLY_CAP = 12000;","after":"uint256 private constant BASE_CARD_SUPPLY_CAP = 12000;","contract":"MintopolyCards","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private BONUS_CARD_SUPPLY_CAP = 4000;","after":"uint256 private constant BONUS_CARD_SUPPLY_CAP = 4000;","contract":"MintopolyCards","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private MAX_SUPPLY_PER_BASE_ID = 30;","after":"uint256 private constant MAX_SUPPLY_PER_BASE_ID = 30;","contract":"MintopolyCards","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private MAX_SUPPLY_PER_BONUS_ID = 1000;","after":"uint256 private constant MAX_SUPPLY_PER_BONUS_ID = 1000;","contract":"MintopolyCards","time":1}]}
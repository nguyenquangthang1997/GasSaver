{"time":176,"results":[{"type":"state-data-arrangement ","before":"\nstring private _baseTokenURI = \"https://badlandsapi.azurewebsites.net/metadata/\";\nstring private _contractURI = \"ipfs://QmTJy6wrASiaR4uMHL8Jc99qAnd6e1YXdqpQ9rvFtruiZC\";\nuint256 public maxSupply = 10000;\nuint256 public maxPresale = 2000;\nbool public phaseTwoEnabled = false;\nbool public instantRevealActive = false;\nmapping(address => uint256) public usedAddress;\nuint256 public rewardEndingTime = 0;\nuint256 public maxFreeNFTperID = 0;\nmapping(uint256 => uint256) public claimedPerID;\nuint256 public maxRewardTokenID = 2000;\naddress private _signerAddress = 0x9C4e8753BF0EE1eea2776a2797143F8Aa5AfdD4f;\nuint256 public pricePerToken = 90000000000000000;\nuint256 public publicAmountMinted;\nbool public saleLive = true;\nbool public presaleLive = true;\nbool public locked;","after":"string private _baseTokenURI = \"https://badlandsapi.azurewebsites.net/metadata/\";\nstring private _contractURI = \"ipfs://QmTJy6wrASiaR4uMHL8Jc99qAnd6e1YXdqpQ9rvFtruiZC\";\nuint256 public maxSupply = 10000;\nuint256 public maxPresale = 2000;\nmapping(address => uint256) public usedAddress;\nuint256 public rewardEndingTime = 0;\nuint256 public maxFreeNFTperID = 0;\nmapping(uint256 => uint256) public claimedPerID;\nuint256 public maxRewardTokenID = 2000;\nuint256 public pricePerToken = 90000000000000000;\nuint256 public publicAmountMinted;\naddress private _signerAddress = 0x9C4e8753BF0EE1eea2776a2797143F8Aa5AfdD4f;\nbool public phaseTwoEnabled = false;\nbool public instantRevealActive = false;\nbool public saleLive = true;\nbool public presaleLive = true;\nbool public locked;\n","contract":"Badlands","time":0},{"type":"external-function ","before":"function presaleBuy(\n\t\tbytes32 hash,\n\t\tbytes memory sig,\n\t\tuint256 qty\n\t) external payable nonReentrant {\n\t\trequire(presaleLive, \"presale not live\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(hashTransaction(msg.sender, qty) == hash, \"hash check failed\");\n\t\trequire(totalSupply() + qty <= maxPresale, \"presale - out of stock\");\n\t\trequire(pricePerToken * qty == msg.value, \"exact amount needed\");\n\t\trequire(qty <= 20, \"no more than 20 at once\");\n\n\t\tif (!phaseTwoEnabled) {\n\t\t\trequire(usedAddress[msg.sender] + qty <= 5, \"maximum 5 nfts\");\n\t\t\tusedAddress[msg.sender] += qty;\n\t\t}\n\n\t\tfor (uint256 i = 0; i < qty; i++) {\n\t\t\t_safeMint(msg.sender, totalSupply() + 1);\n\t\t}\n\t}","after":"function presaleBuy(\n\t\tbytes32 hash,\n\t\tbytes calldata sig,\n\t\tuint256 qty\n\t) external payable nonReentrant {\n\t\trequire(presaleLive, \"presale not live\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(hashTransaction(msg.sender, qty) == hash, \"hash check failed\");\n\t\trequire(totalSupply() + qty <= maxPresale, \"presale - out of stock\");\n\t\trequire(pricePerToken * qty == msg.value, \"exact amount needed\");\n\t\trequire(qty <= 20, \"no more than 20 at once\");\n\n\t\tif (!phaseTwoEnabled) {\n\t\t\trequire(usedAddress[msg.sender] + qty <= 5, \"maximum 5 nfts\");\n\t\t\tusedAddress[msg.sender] += qty;\n\t\t}\n\n\t\tfor (uint256 i = 0; i < qty; i++) {\n\t\t\t_safeMint(msg.sender, totalSupply() + 1);\n\t\t}\n\t}","contract":"Badlands","time":0},{"type":"external-function ","before":"function customThing(\n\t\tuint256 nftID,\n\t\tuint256 id,\n\t\tstring memory what\n\t) external payable {\n\t\trequire(ownerOf(nftID) == msg.sender, \"NFT ownership required\");\n\t\temit CustomThing(nftID, msg.value, id, what);\n\t}","after":"function customThing(\n\t\tuint256 nftID,\n\t\tuint256 id,\n\t\tstring calldata what\n\t) external payable {\n\t\trequire(ownerOf(nftID) == msg.sender, \"NFT ownership required\");\n\t\temit CustomThing(nftID, msg.value, id, what);\n\t}","contract":"Badlands","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_baseTokenURI = newBaseURI;\n\t}","after":"function setBaseURI(string calldata newBaseURI) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_baseTokenURI = newBaseURI;\n\t}","contract":"Badlands","time":0},{"type":"external-function ","before":"function setContractURI(string memory newuri) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_contractURI = newuri;\n\t}","after":"function setContractURI(string calldata newuri) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_contractURI = newuri;\n\t}","contract":"Badlands","time":0}]}
{"time":180,"results":[{"type":"external-function ","before":"   function mintPresale(bytes memory signature, uint256 numberOfMints) public payable {\n        uint256 supply = totalSupply();\n        require(_verify(_hash(msg.sender), signature),                          \"This hash's signature is invalid.\");\n        require(presaleActive,                                                  \"Presale must be active to mint\");\n        require(numberOfMints > 0 && numberOfMints <= 2,                        \"Invalid purchase amount\");\n        require(_presaleListClaimed[msg.sender] + numberOfMints <= maxPreMint,  \"You cannot mint any more presale Toadkens.\");\n        require(supply.add(numberOfMints) <= publicSupply,                      \"Purchase would exceed max supply of Toadkens\");\n        require(price.mul(numberOfMints) == msg.value,                          \"Ether value sent is not correct\");\n        _presaleListClaimed[msg.sender] += numberOfMints;\n\n        for(uint256 i; i < numberOfMints; i++){\n            _safeMint(msg.sender, supply + i);\n            balanceGenesis[msg.sender]++;\n        }\n  ","after":"   function mintPresale(bytes calldata signature, uint256 numberOfMints) public payable {\n        uint256 supply = totalSupply();\n        require(_verify(_hash(msg.sender), signature),                          \"This hash's signature is invalid.\");\n        require(presaleActive,                                                  \"Presale must be active to mint\");\n        require(numberOfMints > 0 && numberOfMints <= 2,                        \"Invalid purchase amount\");\n        require(_presaleListClaimed[msg.sender] + numberOfMints <= maxPreMint,  \"You cannot mint any more presale Toadkens.\");\n        require(supply.add(numberOfMints) <= publicSupply,                      \"Purchase would exceed max supply of Toadkens\");\n        require(price.mul(numberOfMints) == msg.value,                          \"Ether value sent is not correct\");\n        _presaleListClaimed[msg.sender] += numberOfMints;\n\n        for(uint256 i; i < numberOfMints; i++){\n            _safeMint(msg.sender, supply + i);\n            balanceGenesis[msg.sender]++;\n        }\n  ","contract":"Toadkens","time":0},{"type":"external-function ","before":"   function setBaseURI(string memory uri) public onlyOwner {\n        baseURI = uri;\n  ","after":"   function setBaseURI(string calldata uri) public onlyOwner {\n        baseURI = uri;\n  ","contract":"Toadkens","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 public publicSupply = 38","after":"   uint256 public constant publicSupply = 38","contract":"Toadkens","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 public passReserve = 6","after":"   uint256 public constant passReserve = 6","contract":"Toadkens","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 public maxSupply = publicSupply + passReser","after":"   uint256 public constant maxSupply = publicSupply + passReser","contract":"Toadkens","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 public maxPreMint =","after":"   uint256 public constant maxPreMint =","contract":"Toadkens","time":0}]}
{"time":190,"results":[{"type":"external-function ","before":"function changeName(\r\n        uint256 advId,\r\n        string memory newName,\r\n        bool withdrawn\r\n    ) external AdvOwner(advId) {\r\n        bytes memory n = bytes(newName);\r\n        require(n.length > 0 && n.length < 25, \"Invalid name length\");\r\n        require(\r\n            sha256(n) != sha256(bytes(advData[advId].name)),\r\n            \"New name is same as current name\"\r\n        );\r\n\r\n        if (withdrawn) {\r\n            Chronos.burn(msg.sender, NAME_CHANGE_PRICE);\r\n        } else {\r\n            Chronos.burnUnclaimed(msg.sender, NAME_CHANGE_PRICE);\r\n        }\r\n        advData[advId].name = newName;\r\n        emit NameChanged(advId, newName);\r\n    }","after":"function changeName(\r\n        uint256 advId,\r\n        string calldata newName,\r\n        bool withdrawn\r\n    ) external AdvOwner(advId) {\r\n        bytes memory n = bytes(newName);\r\n        require(n.length > 0 && n.length < 25, \"Invalid name length\");\r\n        require(\r\n            sha256(n) != sha256(bytes(advData[advId].name)),\r\n            \"New name is same as current name\"\r\n        );\r\n\r\n        if (withdrawn) {\r\n            Chronos.burn(msg.sender, NAME_CHANGE_PRICE);\r\n        } else {\r\n            Chronos.burnUnclaimed(msg.sender, NAME_CHANGE_PRICE);\r\n        }\r\n        advData[advId].name = newName;\r\n        emit NameChanged(advId, newName);\r\n    }","contract":"Adventurer","time":0},{"type":"external-function ","before":"function changeBio(\r\n        uint256 advId,\r\n        string memory newBio,\r\n        bool withdrawn\r\n    ) external AdvOwner(advId) {\r\n        if (withdrawn) {\r\n            Chronos.burn(msg.sender, BIO_CHANGE_PRICE);\r\n        } else {\r\n            Chronos.burnUnclaimed(msg.sender, BIO_CHANGE_PRICE);\r\n        }\r\n        advData[advId].bio = newBio;\r\n        emit BioChanged(advId, newBio);\r\n    }","after":"function changeBio(\r\n        uint256 advId,\r\n        string calldata newBio,\r\n        bool withdrawn\r\n    ) external AdvOwner(advId) {\r\n        if (withdrawn) {\r\n            Chronos.burn(msg.sender, BIO_CHANGE_PRICE);\r\n        } else {\r\n            Chronos.burnUnclaimed(msg.sender, BIO_CHANGE_PRICE);\r\n        }\r\n        advData[advId].bio = newBio;\r\n        emit BioChanged(advId, newBio);\r\n    }","contract":"Adventurer","time":0},{"type":"external-function ","before":"function mintPresale(\r\n        address _contractAddress,\r\n        uint256 _vol,\r\n        uint256 _expiry,\r\n        uint256 _option,\r\n        bytes memory _signature\r\n    ) external payable {\r\n        require(presaleActive, \"Presale must be active to mint\");\r\n        require(\r\n            currentSupply + _vol <= maxGenCount,\r\n            \"Purchase would exceed max supply of Genesis Adventurers\"\r\n        );\r\n        require(mintedList[msg.sender] == false, \"You have already minted\");\r\n        require(tx.origin == msg.sender, \"Contracts not allowed\");\r\n        require(\r\n            _isvalidsig(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        _contractAddress,\r\n                        msg.sender,\r\n                        _vol,\r\n                        _expiry,\r\n                        _option\r\n                    )\r\n                ),\r\n                _signature,\r\n                whitelistAdmin\r\n            ),\r\n            \"Signature was not valid\"\r\n        );\r\n        if (_option != 0) {\r\n            require(\r\n                price * _vol == msg.value,\r\n                \"Ether value sent is not correct\"\r\n            );\r\n        }\r\n\r\n        mintedList[msg.sender] = true;\r\n        // we are 1 indexing, not zero\r\n        for (uint256 i = 1; i <= _vol; i++) {\r\n            _safeMint(msg.sender, currentSupply + 1);\r\n            currentSupply++;\r\n        }\r\n    }","after":"function mintPresale(\r\n        address _contractAddress,\r\n        uint256 _vol,\r\n        uint256 _expiry,\r\n        uint256 _option,\r\n        bytes calldata _signature\r\n    ) external payable {\r\n        require(presaleActive, \"Presale must be active to mint\");\r\n        require(\r\n            currentSupply + _vol <= maxGenCount,\r\n            \"Purchase would exceed max supply of Genesis Adventurers\"\r\n        );\r\n        require(mintedList[msg.sender] == false, \"You have already minted\");\r\n        require(tx.origin == msg.sender, \"Contracts not allowed\");\r\n        require(\r\n            _isvalidsig(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        _contractAddress,\r\n                        msg.sender,\r\n                        _vol,\r\n                        _expiry,\r\n                        _option\r\n                    )\r\n                ),\r\n                _signature,\r\n                whitelistAdmin\r\n            ),\r\n            \"Signature was not valid\"\r\n        );\r\n        if (_option != 0) {\r\n            require(\r\n                price * _vol == msg.value,\r\n                \"Ether value sent is not correct\"\r\n            );\r\n        }\r\n\r\n        mintedList[msg.sender] = true;\r\n        // we are 1 indexing, not zero\r\n        for (uint256 i = 1; i <= _vol; i++) {\r\n            _safeMint(msg.sender, currentSupply + 1);\r\n            currentSupply++;\r\n        }\r\n    }","contract":"Adventurer","time":0},{"type":"external-function ","before":"function setMerkelRoot(string memory _roothash) public onlyOwner {\r\n        require(hashlocked == false, \"Merkel is already set\");\r\n        _merkelroot = _roothash;\r\n        hashlocked = true;\r\n    }","after":"function setMerkelRoot(string calldata _roothash) public onlyOwner {\r\n        require(hashlocked == false, \"Merkel is already set\");\r\n        _merkelroot = _roothash;\r\n        hashlocked = true;\r\n    }","contract":"Adventurer","time":0},{"type":"external-function ","before":"function setBaseURI(string memory uri) public onlyOwner {\r\n        baseURI = uri;\r\n    }","after":"function setBaseURI(string calldata uri) public onlyOwner {\r\n        baseURI = uri;\r\n    }","contract":"Adventurer","time":0},{"type":"external-function ","before":"function setContractURI(string memory uri) public onlyOwner {\r\n        contURI = uri;\r\n    }","after":"function setContractURI(string calldata uri) public onlyOwner {\r\n        contURI = uri;\r\n    }","contract":"Adventurer","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public maxSupply;","after":"uint256 public immutable maxSupply;","contract":"Adventurer","time":1},{"type":"immutable-restrict-modification ","before":"uint256 private fixedSupply;","after":"uint256 private immutable fixedSupply;","contract":"Adventurer","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public maxGenCount;","after":"uint256 public immutable maxGenCount;","contract":"Adventurer","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public startSaleTimestamp;","after":"uint256 public immutable startSaleTimestamp;","contract":"Adventurer","time":1},{"type":"immutable-restrict-modification ","before":"address public whitelistAdmin;","after":"address public immutable whitelistAdmin;","contract":"Adventurer","time":1},{"type":"state-data-arrangement ","before":"\nuint256 public maxSupply;\nuint256 private fixedSupply;\nuint256 public currentSupply;\nuint256 public maxGenCount;\nuint256 public gen2Count;\nbool public presaleActive;\nbool public saleActive;\nuint256 public startSaleTimestamp;\nuint256 public price = 0.125 ether;\naddress public whitelistAdmin;\nmapping(address => bool) public mintedList;\nmapping(address => bool) public publicMintedList;\nuint256 private metaoffset = 10000;\nbool public hashlocked;\nstring public _merkelroot = \"0\";\nstring private baseURI;\nstring private contURI;","after":"uint256 public maxSupply;\nuint256 private fixedSupply;\nuint256 public currentSupply;\nuint256 public maxGenCount;\nuint256 public gen2Count;\nuint256 public startSaleTimestamp;\nuint256 public price = 0.125 ether;\nmapping(address => bool) public mintedList;\nmapping(address => bool) public publicMintedList;\nuint256 private metaoffset = 10000;\nstring public _merkelroot = \"0\";\nstring private baseURI;\nstring private contURI;\naddress public whitelistAdmin;\nbool public presaleActive;\nbool public saleActive;\nbool public hashlocked;\n","contract":"Adventurer721","time":0}]}
{"time":855,"results":[{"type":"struct-data-arrangement ","before":"\naddress token\nuint256 tokenId\nuint256 amount\nuint8 kind\nbytes mintData","after":"uint256 tokenId\nuint256 amount\nbytes mintData\naddress token\nuint8 kind\n","contract":"MarketNG","time":0},{"type":"external-function ","before":"function swap(Swap memory req, bytes memory signature)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        require(req.deadline > block.timestamp, \"deadline reached\");\n        require(\n            isSignatureValid(\n                signature,\n                keccak256(abi.encode(req)),\n                req.creator\n            ),\n            \"signature error\"\n        );\n\n        for (uint256 i = 0; i < req.wants.length; i++) {\n            req.wants[i].token.safeTransferFrom(\n                msg.sender,\n                req.creator,\n                req.wants[i].tokenId\n            );\n        }\n\n        for (uint256 i = 0; i < req.has.length; i++) {\n            req.has[i].token.safeTransferFrom(\n                req.creator,\n                msg.sender,\n                req.has[i].tokenId\n            );\n        }\n\n        emit EvSwapped(req, signature, msg.sender);\n    }","after":"function swap(Swap calldata req, bytes calldata signature)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        require(req.deadline > block.timestamp, \"deadline reached\");\n        require(\n            isSignatureValid(\n                signature,\n                keccak256(abi.encode(req)),\n                req.creator\n            ),\n            \"signature error\"\n        );\n\n        for (uint256 i = 0; i < req.wants.length; i++) {\n            req.wants[i].token.safeTransferFrom(\n                msg.sender,\n                req.creator,\n                req.wants[i].tokenId\n            );\n        }\n\n        for (uint256 i = 0; i < req.has.length; i++) {\n            req.has[i].token.safeTransferFrom(\n                req.creator,\n                msg.sender,\n                req.has[i].tokenId\n            );\n        }\n\n        emit EvSwapped(req, signature, msg.sender);\n    }","contract":"MarketNG","time":0},{"type":"external-function ","before":"function send(address to, Pair721[] memory tokens)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            Pair721 memory p = tokens[i];\n            p.token.safeTransferFrom(msg.sender, to, p.tokenId);\n        }\n    }","after":"function send(address to, Pair721[] calldata tokens)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            Pair721 memory p = tokens[i];\n            p.token.safeTransferFrom(msg.sender, to, p.tokenId);\n        }\n    }","contract":"MarketNG","time":0},{"type":"immutable-restrict-modification ","before":"   address public validat","after":"   address public validat","contract":"TZKGMinter","time":0},{"type":"external-function ","before":"   function setTokenURI(uint256 tokenId, string memory _tokenURI)\n        external\n        onlyRole(MINTER_ROLE)\n    {\n        _tokenURIs[tokenId] = _tokenURI;\n  ","after":"   function setTokenURI(uint256 tokenId, string calldata _tokenURI)\n        external\n        onlyRole(MINTER_ROLE)\n    {\n        _tokenURIs[tokenId] = _tokenURI;\n  ","contract":"FromTheFragmentsOfTezukaOsamuNFT","time":0},{"type":"external-function ","before":"   function setBaseURI(string memory newURI) external onlyRole(MINTER_ROLE) {\n        baseURI = newURI;\n  ","after":"   function setBaseURI(string calldata newURI) external onlyRole(MINTER_ROLE) {\n        baseURI = newURI;\n  ","contract":"FromTheFragmentsOfTezukaOsamuNFT","time":0}]}
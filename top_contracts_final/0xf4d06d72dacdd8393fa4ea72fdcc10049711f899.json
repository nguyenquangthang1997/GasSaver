{"time":143,"results":[{"type":"external-function ","before":"function addTerms(bytes4 stakeType, Terms memory _terms)\n        external\n        onlyOwner\n        nonZeroStakeType(stakeType)\n    {\n        Terms memory existingTerms = terms[stakeType];\n        require(!_isDefinedTerms(existingTerms), \"Staking:E1\");\n        require(_terms.isEnabled, \"Staking:E2\");\n\n        uint256 _now = timeNow();\n\n        if (_terms.allowedTill != 0) {\n            require(_terms.allowedTill > _now, \"Staking:E3\");\n            require(_terms.allowedTill > _terms.allowedSince, \"Staking:E4\");\n        }\n\n        if (_terms.maxAmountScaled != 0) {\n            require(\n                _terms.maxAmountScaled > _terms.minAmountScaled,\n                \"Staking:E5\"\n            );\n        }\n\n        // only one of three \"lock time\" parameters must be non-zero\n        if (_terms.lockedTill != 0) {\n            require(\n                _terms.exactLockPeriod == 0 && _terms.minLockPeriod == 0,\n                \"Staking:E6\"\n            );\n            require(\n                _terms.lockedTill > _now &&\n                    _terms.lockedTill >= _terms.allowedTill,\n                \"Staking:E7\"\n            );\n        } else {\n            require(\n                // one of two params must be non-zero\n                (_terms.exactLockPeriod == 0) != (_terms.minLockPeriod == 0),\n                \"Staking:E8\"\n            );\n        }\n\n        terms[stakeType] = _terms;\n        emit TermsAdded(stakeType);\n    }","after":"function addTerms(bytes4 stakeType, Terms calldata _terms)\n        external\n        onlyOwner\n        nonZeroStakeType(stakeType)\n    {\n        Terms memory existingTerms = terms[stakeType];\n        require(!_isDefinedTerms(existingTerms), \"Staking:E1\");\n        require(_terms.isEnabled, \"Staking:E2\");\n\n        uint256 _now = timeNow();\n\n        if (_terms.allowedTill != 0) {\n            require(_terms.allowedTill > _now, \"Staking:E3\");\n            require(_terms.allowedTill > _terms.allowedSince, \"Staking:E4\");\n        }\n\n        if (_terms.maxAmountScaled != 0) {\n            require(\n                _terms.maxAmountScaled > _terms.minAmountScaled,\n                \"Staking:E5\"\n            );\n        }\n\n        // only one of three \"lock time\" parameters must be non-zero\n        if (_terms.lockedTill != 0) {\n            require(\n                _terms.exactLockPeriod == 0 && _terms.minLockPeriod == 0,\n                \"Staking:E6\"\n            );\n            require(\n                _terms.lockedTill > _now &&\n                    _terms.lockedTill >= _terms.allowedTill,\n                \"Staking:E7\"\n            );\n        } else {\n            require(\n                // one of two params must be non-zero\n                (_terms.exactLockPeriod == 0) != (_terms.minLockPeriod == 0),\n                \"Staking:E8\"\n            );\n        }\n\n        terms[stakeType] = _terms;\n        emit TermsAdded(stakeType);\n    }","contract":"Staking","time":0}]}
{"time":181,"results":[{"type":"external-function ","before":"function setBaseURI(string memory newUri) \n    public \n    onlyOwner {\n        BASE_URI = newUri;\n    }","after":"function setBaseURI(string calldata newUri) \n    public \n    onlyOwner {\n        BASE_URI = newUri;\n    }","contract":"GodotMovement","time":0},{"type":"external-function ","before":"function presaleMint(address account, uint numberOfTokens, uint256 allowance, string memory key, bytes32[] calldata proof)\n    public\n    payable\n    onlyAccounts\n    {\n        require(msg.sender == account, \"Not allowed\");\n        require(IS_PRESALE_ACTIVE, \"Pre-sale haven't started\");\n        require(msg.value >= numberOfTokens * MINT_PRICE, \"Not enough ethers sent\");\n\n        string memory payload = string(abi.encodePacked(Strings.toString(allowance), \":\", key));\n\n        require(_verify(_leaf(msg.sender, payload), proof), \"Invalid merkle proof\");\n        \n        uint current = _tokenIdCounter.current();\n        \n        require(current + numberOfTokens < INCREASED_MAX_TOKEN_ID, \"Exceeds total supply\");\n        require(addressToMintCount[msg.sender] + numberOfTokens <= allowance, \"Exceeds allowance\");\n\n        addressToMintCount[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            mintInternal();\n        }\n    }","after":"function presaleMint(address account, uint numberOfTokens, uint256 allowance, string calldata key, bytes32[] calldata proof)\n    public\n    payable\n    onlyAccounts\n    {\n        require(msg.sender == account, \"Not allowed\");\n        require(IS_PRESALE_ACTIVE, \"Pre-sale haven't started\");\n        require(msg.value >= numberOfTokens * MINT_PRICE, \"Not enough ethers sent\");\n\n        string memory payload = string(abi.encodePacked(Strings.toString(allowance), \":\", key));\n\n        require(_verify(_leaf(msg.sender, payload), proof), \"Invalid merkle proof\");\n        \n        uint current = _tokenIdCounter.current();\n        \n        require(current + numberOfTokens < INCREASED_MAX_TOKEN_ID, \"Exceeds total supply\");\n        require(addressToMintCount[msg.sender] + numberOfTokens <= allowance, \"Exceeds allowance\");\n\n        addressToMintCount[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            mintInternal();\n        }\n    }","contract":"GodotMovement","time":0},{"type":"external-function ","before":"function presaleMintASH(address account, uint numberOfTokens, uint256 allowance, string memory key, bytes32[] calldata proof)\n    public\n    onlyAccounts\n    {\n        require(msg.sender == account, \"Not allowed\");\n        require(IS_PRESALE_ACTIVE, \"Pre-sale haven't started\");\n        \n        ASH.safeTransferFrom(msg.sender, address(this), numberOfTokens * MINT_PRICE_ASH);\n\n        string memory payload = string(abi.encodePacked(Strings.toString(allowance), \":\", key));\n\n        require(_verify(_leaf(msg.sender, payload), proof), \"Invalid merkle proof\");\n        \n        uint current = _tokenIdCounter.current();\n        \n        require(current + numberOfTokens < INCREASED_MAX_TOKEN_ID, \"Exceeds total supply\");\n        require(addressToMintCount[msg.sender] + numberOfTokens <= allowance, \"Exceeds allowance\");\n\n        addressToMintCount[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            mintInternal();\n        }\n    }","after":"function presaleMintASH(address account, uint numberOfTokens, uint256 allowance, string calldata key, bytes32[] calldata proof)\n    public\n    onlyAccounts\n    {\n        require(msg.sender == account, \"Not allowed\");\n        require(IS_PRESALE_ACTIVE, \"Pre-sale haven't started\");\n        \n        ASH.safeTransferFrom(msg.sender, address(this), numberOfTokens * MINT_PRICE_ASH);\n\n        string memory payload = string(abi.encodePacked(Strings.toString(allowance), \":\", key));\n\n        require(_verify(_leaf(msg.sender, payload), proof), \"Invalid merkle proof\");\n        \n        uint current = _tokenIdCounter.current();\n        \n        require(current + numberOfTokens < INCREASED_MAX_TOKEN_ID, \"Exceeds total supply\");\n        require(addressToMintCount[msg.sender] + numberOfTokens <= allowance, \"Exceeds allowance\");\n\n        addressToMintCount[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            mintInternal();\n        }\n    }","contract":"GodotMovement","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address COMMUNITY_WALLET = 0xf15017b4C823E3d4E91D9031F1445cb001c3fecB;","after":"address constant COMMUNITY_WALLET = 0xf15017b4C823E3d4E91D9031F1445cb001c3fecB;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_1 = 0x4a481Ac8F43fC87beBc6470552c9CC505BAC8C68;","after":"address constant TEAM_1 = 0x4a481Ac8F43fC87beBc6470552c9CC505BAC8C68;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_2 = 0x51266b01772C9945D33bd0851C981A94c3F5Bf00;","after":"address constant TEAM_2 = 0x51266b01772C9945D33bd0851C981A94c3F5Bf00;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_3 = 0xEAA37d4e3d977aa2F6D460f2Cc8B81ea5Dd96323;","after":"address constant TEAM_3 = 0xEAA37d4e3d977aa2F6D460f2Cc8B81ea5Dd96323;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_4 = 0xe5cB2C6ACe5A67191Fd053c0ec60C75E690937D0;","after":"address constant TEAM_4 = 0xe5cB2C6ACe5A67191Fd053c0ec60C75E690937D0;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_5 = 0x3385A612e0Eb663dcd2C068F69aD65d092110be8;","after":"address constant TEAM_5 = 0x3385A612e0Eb663dcd2C068F69aD65d092110be8;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_6 = 0x78B21283E86160E943691134aA5f7961cd828630;","after":"address constant TEAM_6 = 0x78B21283E86160E943691134aA5f7961cd828630;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_7 = 0x02a54E66A41BAF1Fba3c141e68169b44A9060DB4;","after":"address constant TEAM_7 = 0x02a54E66A41BAF1Fba3c141e68169b44A9060DB4;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_8 = 0xf93f4075A896accFCcE1eBD4da735250fB0eb7A9;","after":"address constant TEAM_8 = 0xf93f4075A896accFCcE1eBD4da735250fB0eb7A9;","contract":"GodotMovement","time":0},{"type":"constant-restrict-modification  ","before":"address CONTRACT_DEV = 0xA800F34505e8b340cf3Ab8793cB40Bf09042B28F;","after":"address constant CONTRACT_DEV = 0xA800F34505e8b340cf3Ab8793cB40Bf09042B28F;","contract":"GodotMovement","time":0}]}
{"time":122,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public totalClaimed;\nbool private isrequestfulfilled;\nbytes32 internal keyHash;\nbytes32 public vrfRequestId;\nuint256 public constant bigPrimeNumber = 9973;\nuint256 private constant fee = 2 * 10**18;\nuint256 private randomNumber;\nuint256 public immutable maxSupply;\nuint256 public immutable claimStartTime;\nstring public baseTokenURI;\naddress public parentContractAddress;\nmapping(uint256 => bool) isClaimed;\nmapping(address => bool) hasClaimed;","after":"uint256 public totalClaimed;\nbytes32 internal keyHash;\nbytes32 public vrfRequestId;\nuint256 public constant bigPrimeNumber = 9973;\nuint256 private constant fee = 2 * 10**18;\nuint256 private randomNumber;\nuint256 public immutable maxSupply;\nuint256 public immutable claimStartTime;\nstring public baseTokenURI;\nmapping(uint256 => bool) isClaimed;\nmapping(address => bool) hasClaimed;\naddress public parentContractAddress;\nbool private isrequestfulfilled;\n","contract":"RealAssetNFTV2","time":0},{"type":"external-function ","before":"function claim(uint256[] memory claimTokenIDs) external claimStarted nonReentrant {\n        require(!hasClaimed[msg.sender], \"claim: sorry, you have already claimed tokens\");\n        require(verifyOwnership(claimTokenIDs), \"claim: failed ownership check for provided IDs\");\n        uint256[8] memory tokenIDs;\n\n        for (uint256 i = 0; i < claimTokenIDs.length; i++) {\n            if (!isClaimed[claimTokenIDs[i]]) {\n                tokenIDs = mapClaimIDs(claimTokenIDs[i]);\n                for (uint256 j = 0; j < 8; j++) {\n                    _mint(msg.sender, tokenIDs[j]);\n                }\n                isClaimed[claimTokenIDs[i]] = true;\n                totalClaimed += 8;\n            }\n        }\n        hasClaimed[msg.sender] = true;\n    }","after":"function claim(uint256[] calldata claimTokenIDs) external claimStarted nonReentrant {\n        require(!hasClaimed[msg.sender], \"claim: sorry, you have already claimed tokens\");\n        require(verifyOwnership(claimTokenIDs), \"claim: failed ownership check for provided IDs\");\n        uint256[8] memory tokenIDs;\n\n        for (uint256 i = 0; i < claimTokenIDs.length; i++) {\n            if (!isClaimed[claimTokenIDs[i]]) {\n                tokenIDs = mapClaimIDs(claimTokenIDs[i]);\n                for (uint256 j = 0; j < 8; j++) {\n                    _mint(msg.sender, tokenIDs[j]);\n                }\n                isClaimed[claimTokenIDs[i]] = true;\n                totalClaimed += 8;\n            }\n        }\n        hasClaimed[msg.sender] = true;\n    }","contract":"RealAssetNFTV2","time":0},{"type":"external-function ","before":"function setURI(string memory _uri) external onlyOwner {\n        baseTokenURI = _uri;\n        emit URI(_uri);\n    }","after":"function setURI(string calldata _uri) external onlyOwner {\n        baseTokenURI = _uri;\n        emit URI(_uri);\n    }","contract":"RealAssetNFTV2","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"RealAssetNFTV2","time":0},{"type":"immutable-restrict-modification ","before":"address public parentContractAddress;","after":"address public immutable parentContractAddress;","contract":"RealAssetNFTV2","time":0}]}
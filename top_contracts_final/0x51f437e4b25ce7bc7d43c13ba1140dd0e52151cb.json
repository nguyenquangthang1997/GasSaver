{"time":128,"results":[{"type":"external-function ","before":"function migrateFromOpensea(uint256 osId, uint256 newId, bytes32 leaf, bytes32[] memory proof) external {\n        require(mintingEnabled, \"Minting is not enabled yet\");\n\n        uint256 currentSupply = totalSupply();\n        require(currentSupply < MAX_SUPPLY, \"All tokens have been minted\");\n\n        require(keccak256(abi.encodePacked(osId, newId)) == leaf, \"Malformed leaf\");\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \"Invalid Merkle proof or leaf\");\n\n        require(\n            openseaSf.balanceOf(msg.sender, osId),\n            \"Only token owner can migrate\"\n        );\n\n        // Mint the new token\n        mint(newId);\n\n        // Burn the old token from Opensea contract\n        openseaSf.safeTransferFrom(msg.sender, BURN_ADDRESS, osId, 1, \"\");\n\n        emit Migrated(newId, ssn[newId]);\n    }","after":"function migrateFromOpensea(uint256 osId, uint256 newId, bytes32 leaf, bytes32[] calldata proof) external {\n        require(mintingEnabled, \"Minting is not enabled yet\");\n\n        uint256 currentSupply = totalSupply();\n        require(currentSupply < MAX_SUPPLY, \"All tokens have been minted\");\n\n        require(keccak256(abi.encodePacked(osId, newId)) == leaf, \"Malformed leaf\");\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \"Invalid Merkle proof or leaf\");\n\n        require(\n            openseaSf.balanceOf(msg.sender, osId),\n            \"Only token owner can migrate\"\n        );\n\n        // Mint the new token\n        mint(newId);\n\n        // Burn the old token from Opensea contract\n        openseaSf.safeTransferFrom(msg.sender, BURN_ADDRESS, osId, 1, \"\");\n\n        emit Migrated(newId, ssn[newId]);\n    }","contract":"FastFoodPunks","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) external onlyOwner {\n        require(!metadataLocked, \"Metadata is locked\");\n        _baseTokenURI = newBaseURI;\n    }","after":"function setBaseURI(string calldata newBaseURI) external onlyOwner {\n        require(!metadataLocked, \"Metadata is locked\");\n        _baseTokenURI = newBaseURI;\n    }","contract":"FastFoodPunks","time":0},{"type":"external-function ","before":"function setContractURI(string memory newContractURI) external onlyOwner {\n        require(!metadataLocked, \"Metadata is locked\");\n        _contractURI = newContractURI;\n    }","after":"function setContractURI(string calldata newContractURI) external onlyOwner {\n        require(!metadataLocked, \"Metadata is locked\");\n        _contractURI = newContractURI;\n    }","contract":"FastFoodPunks","time":0}]}
{"time":102,"results":[{"type":"state-data-arrangement ","before":"\nstring public constant name = \"Mirror Editions V2\";\nstring public constant symbol = \"EDITIONS_V2\";\nuint256 internal constant REENTRANCY_NOT_ENTERED = 1;\nuint256 internal constant REENTRANCY_ENTERED = 2;\nmapping(address => uint256) public fundingBalance;\nuint256 public immutable feeUpdateTimelock;\nstring internal baseURI;\nmapping(uint256 => Edition) public editions;\nmapping(uint256 => uint256) public tokenToEdition;\nmapping(uint256 => uint256) public withdrawnForEdition;\nuint256 private nextTokenId;\nuint256 private nextEditionId = 1;\nuint16 public feePercent;\naddress payable public treasury;\nuint256 public feesAccrued;\nuint256 public nextFeeUpdateTime;\nuint16 public nextFeePercent;\nuint256 internal reentrancyStatus;\naddress public owner;\naddress public nextOwner;","after":"string public constant name = \"Mirror Editions V2\";\nstring public constant symbol = \"EDITIONS_V2\";\nuint256 internal constant REENTRANCY_NOT_ENTERED = 1;\nuint256 internal constant REENTRANCY_ENTERED = 2;\nmapping(address => uint256) public fundingBalance;\nuint256 public immutable feeUpdateTimelock;\nstring internal baseURI;\nmapping(uint256 => Edition) public editions;\nmapping(uint256 => uint256) public tokenToEdition;\nmapping(uint256 => uint256) public withdrawnForEdition;\nuint256 private nextTokenId;\nuint256 private nextEditionId = 1;\nuint256 public feesAccrued;\nuint256 public nextFeeUpdateTime;\nuint256 internal reentrancyStatus;\naddress payable public treasury;\naddress public owner;\naddress public nextOwner;\nuint16 public feePercent;\nuint16 public nextFeePercent;\n","contract":"Editions","time":0},{"type":"external-function ","before":"function createEditionTiers(\n        EditionTier[] memory tiers,\n        address payable fundingRecipient\n    ) external nonReentrant {\n        // Execute a loop that creates editions.\n        for (uint8 i = 0; i < tiers.length; i++) {\n            uint256 quantity = tiers[i].quantity;\n            uint256 price = tiers[i].price;\n            bytes32 contentHash = tiers[i].contentHash;\n\n            editions[nextEditionId] = Edition({\n                quantity: quantity,\n                price: price,\n                fundingRecipient: fundingRecipient,\n                numSold: 0,\n                contentHash: contentHash\n            });\n\n            emit EditionCreated(\n                quantity,\n                price,\n                fundingRecipient,\n                nextEditionId,\n                contentHash\n            );\n\n            nextEditionId++;\n        }\n    }","after":"function createEditionTiers(\n        EditionTier[] calldata tiers,\n        address payable fundingRecipient\n    ) external nonReentrant {\n        // Execute a loop that creates editions.\n        for (uint8 i = 0; i < tiers.length; i++) {\n            uint256 quantity = tiers[i].quantity;\n            uint256 price = tiers[i].price;\n            bytes32 contentHash = tiers[i].contentHash;\n\n            editions[nextEditionId] = Edition({\n                quantity: quantity,\n                price: price,\n                fundingRecipient: fundingRecipient,\n                numSold: 0,\n                contentHash: contentHash\n            });\n\n            emit EditionCreated(\n                quantity,\n                price,\n                fundingRecipient,\n                nextEditionId,\n                contentHash\n            );\n\n            nextEditionId++;\n        }\n    }","contract":"Editions","time":0},{"type":"external-function ","before":"function changeBaseURI(string memory baseURI_) public onlyOwner {\n        baseURI = baseURI_;\n    }","after":"function changeBaseURI(string calldata baseURI_) public onlyOwner {\n        baseURI = baseURI_;\n    }","contract":"Editions","time":0}]}
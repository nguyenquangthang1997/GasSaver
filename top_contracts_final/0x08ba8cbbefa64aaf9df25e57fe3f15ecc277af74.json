{"time":176,"results":[{"type":"state-data-arrangement ","before":"\n��███╗██║�\n��█║╚█████╔�\n█║░░██║░░░█�\n░░░\n╚══════╝�\n�╝░╚══════╝╚═╝░░\n░░╚═╝░░░╚═\n�░░\n*/\n\nimport \"./ERC721A.\nnable.sol\";\nimport \"@openzeppel\ntracts/interfaces/IERC2981.sol\";\n\nrt \"@openzeppelin/contracts/sec\n/ReentrancyGuard.sol\";\nimport \"@openzep\n/contracts/utils/cryptography/EC\nol\";\nimport \"@openzeppelin/contracts/u\ncryptography/MerkleProof.sol\"\nntract LaserCat is ERC721A,\n using ECDSA for byt\n\n\n    // ======== Suppl\n======\n    uint256 pub\naxSupply;\n    uint256 public ","after":"��███╗██║�\n��█║╚█████╔�\n█║░░██║░░░█�\n░░░\n╚══════╝�\n�╝░╚══════╝╚═╝░░\n�░░\n*/\n\nimport \"./ERC721A.\ntracts/interfaces/IERC2981.sol\";\n\nrt \"@openzeppelin/contracts/sec\n/ReentrancyGuard.sol\";\nimport \"@openzep\n/contracts/utils/cryptography/EC\nol\";\nimport \"@openzeppelin/contracts/u\ncryptography/MerkleProof.sol\"\nntract LaserCat is ERC721A,\n using ECDSA for byt\naxSupply;\n    uint256 public \n░░╚═╝░░░╚═\n\n\n    // ======== Suppl\n======\n    uint256 pub\nnable.sol\";\nimport \"@openzeppel\n","contract":"LaserCat","time":1},{"type":"external-function ","before":"   uint256 public auctionPriceCurveLength;\n    uint256 public auctionStartTime;\n    uint256 public auctionDiscountPerStep;\n    uint256 public epochInterval;\n    uint256 public epochSupply;\n\n    // ======== Metadata =========\n    bytes32 public root;\n    address private singer;\n    address private vault;\n    string private _baseTokenURI;\n    \n\n    constructor(uint256 _MaxSupply, uint256 _MaxReserveMint, address _vault)\n        ERC721A(\"LaserCat\", \"Cat\", 1, _MaxSupply)\n    {\n        royalt","after":"   uint256 public auctionPriceCurveLength;\n    uint256 public auctionStartTime;\n    uint256 public auctionDiscountPerStep;\n    uint256 public epochInterval;\n    uint256 public epochSupply;\n\n    // ======== Metadata =========\n    bytes32 public root;\n    address private singer;\n    address private vault;\n    string private _baseTokenURI;\n    \n\n    constructor(uint256 _MaxSupply, uint256 _MaxReserveMint, address _vault)\n        ERC721A(\"LaserCat\", \"Cat\", 1, _MaxSupply)\n    {\n        royalt","contract":"LaserCat","time":0},{"type":"external-function ","before":"ss = owner();\n        royaltyPercent = 5;\n        MaxSupply = _MaxSupply;\n        MaxReserveMint = _MaxReserveMint;\n        vault = _vault;\n    }\n\n    modifier eoaOnly() {\n        require(tx.origin == msg.sender, \"EOA Only\");\n        _;\n    }\n\n    // ======== Minting =========\n    function whiteListMint(bytes32[] memory _proof)\n        external\n        payable\n        nonReentrant\n        eoaOnly\n    {\n        require(!isAuctionMintStart, \"WhiteList not avalible for now\");\n\n        require(numberMinted(msg.sender) == 0, \"Already mint LaserCat\");\n\n        require(_whitelistVerify(_proof), \"Invalid merkle proof\");\n\n        require(totalSupply() <= MaxSupply, \"Exceed max toke","after":"ss = owner();\n        royaltyPercent = 5;\n        MaxSupply = _MaxSupply;\n        MaxReserveMint = _MaxReserveMint;\n        vault = _vault;\n    }\n\n    modifier eoaOnly() {\n        require(tx.origin == msg.sender, \"EOA Only\");\n        _;\n    }\n\n    // ======== Minting =========\n    function whiteListMint(bytes32[] memory _proof)\n        external\n        payable\n        nonReentrant\n        eoaOnly\n    {\n        require(!isAuctionMintStart, \"WhiteList not avalible for now\");\n\n        require(numberMinted(msg.sender) == 0, \"Already mint LaserCat\");\n\n        require(_whitelistVerify(_proof), \"Invalid merkle proof\");\n\n        require(totalSupply() <= MaxSupply, \"Exceed max toke","contract":"LaserCat","time":0},{"type":"immutable-restrict-modification ","before":"��███╗██║�","after":"��███╗██║�","contract":"LaserCat","time":1},{"type":"constant-restrict-modification  ","before":"�╝░╚══════╝╚═╝░░","after":"�╝░╚══════╝╚═╝░░","contract":"LaserCat","time":1},{"type":"immutable-restrict-modification ","before":"======\n    uint256 pub","after":"======\n    uint256 pub","contract":"LaserCat","time":1}]}
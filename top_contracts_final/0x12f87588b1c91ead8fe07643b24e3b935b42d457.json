{"time":141,"results":[{"type":"external-function ","before":"function addERC721WhitelistedCollections(address[] memory whitelistedCollectionsArray) external onlyOwner {\n        for (uint256 i; i < whitelistedCollectionsArray.length; i++) {\n            erc721WhitelistedCollections[whitelistedCollectionsArray[i]] = IERC721(whitelistedCollectionsArray[i]);\n        }\n    }","after":"function addERC721WhitelistedCollections(address[] calldata whitelistedCollectionsArray) external onlyOwner {\n        for (uint256 i; i < whitelistedCollectionsArray.length; i++) {\n            erc721WhitelistedCollections[whitelistedCollectionsArray[i]] = IERC721(whitelistedCollectionsArray[i]);\n        }\n    }","contract":"TheCollectors","time":0},{"type":"external-function ","before":"function addERC1155WhitelistedCollections(address[] memory whitelistedCollectionsArray) external onlyOwner {\n        for (uint256 i; i < whitelistedCollectionsArray.length; i++) {\n            erc1155WhitelistedCollections[whitelistedCollectionsArray[i]] = IERC1155(whitelistedCollectionsArray[i]);\n        }\n    }","after":"function addERC1155WhitelistedCollections(address[] calldata whitelistedCollectionsArray) external onlyOwner {\n        for (uint256 i; i < whitelistedCollectionsArray.length; i++) {\n            erc1155WhitelistedCollections[whitelistedCollectionsArray[i]] = IERC1155(whitelistedCollectionsArray[i]);\n        }\n    }","contract":"TheCollectors","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory __baseTokenURI) external onlyOwner {\n        _baseTokenURI = __baseTokenURI;\n    }","after":"function setBaseTokenURI(string calldata __baseTokenURI) external onlyOwner {\n        _baseTokenURI = __baseTokenURI;\n    }","contract":"TheCollectors","time":0},{"type":"external-function ","before":"function embedToken(\n        uint256 theCollectorsTokenId,\n        address whitelistCollection,\n        uint256 whitelistCollectionTokenId,\n        string memory uri,\n        string memory typeOfSignature,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n    external\n    {\n        require(_validateSignature(keccak256(abi.encodePacked(uri, typeOfSignature)), v, r, s), \"Really?\");\n        require(bytes(_tokenURIs[theCollectorsTokenId]).length == 0, \"Already embedded\");\n        require(ownerOf(theCollectorsTokenId) == msg.sender, \"Not token owner\");\n        require(\n            address(erc721WhitelistedCollections[whitelistCollection]) != address(0) ||\n            address(erc1155WhitelistedCollections[whitelistCollection]) != address(0) ||\n            whitelistCollection == address(PUNK),\n            \"Bad collection\"\n        );\n        require(\n            (whitelistCollection == address(PUNK) && PUNK.punkIndexToAddress(whitelistCollectionTokenId) == msg.sender) ||\n            (address(erc1155WhitelistedCollections[whitelistCollection]) != address(0) && erc1155WhitelistedCollections[whitelistCollection].balanceOf(msg.sender, whitelistCollectionTokenId) > 0) ||\n            erc721WhitelistedCollections[whitelistCollection].ownerOf(whitelistCollectionTokenId) == msg.sender,\n            \"Bad token owner\"\n        );\n        require(!wasTokenUsed(whitelistCollection, whitelistCollectionTokenId), \"Already used\");\n        embeddedTokensInfo[theCollectorsTokenId] = EmbedInfo(whitelistCollection, whitelistCollectionTokenId);\n        embeddedTokens[whitelistCollection][whitelistCollectionTokenId] = true;\n        _tokenURIs[theCollectorsTokenId] = uri;\n        emit EmbedTokens(theCollectorsTokenId, whitelistCollection, whitelistCollectionTokenId);\n    }","after":"function embedToken(\n        uint256 theCollectorsTokenId,\n        address whitelistCollection,\n        uint256 whitelistCollectionTokenId,\n        string calldata uri,\n        string calldata typeOfSignature,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n    external\n    {\n        require(_validateSignature(keccak256(abi.encodePacked(uri, typeOfSignature)), v, r, s), \"Really?\");\n        require(bytes(_tokenURIs[theCollectorsTokenId]).length == 0, \"Already embedded\");\n        require(ownerOf(theCollectorsTokenId) == msg.sender, \"Not token owner\");\n        require(\n            address(erc721WhitelistedCollections[whitelistCollection]) != address(0) ||\n            address(erc1155WhitelistedCollections[whitelistCollection]) != address(0) ||\n            whitelistCollection == address(PUNK),\n            \"Bad collection\"\n        );\n        require(\n            (whitelistCollection == address(PUNK) && PUNK.punkIndexToAddress(whitelistCollectionTokenId) == msg.sender) ||\n            (address(erc1155WhitelistedCollections[whitelistCollection]) != address(0) && erc1155WhitelistedCollections[whitelistCollection].balanceOf(msg.sender, whitelistCollectionTokenId) > 0) ||\n            erc721WhitelistedCollections[whitelistCollection].ownerOf(whitelistCollectionTokenId) == msg.sender,\n            \"Bad token owner\"\n        );\n        require(!wasTokenUsed(whitelistCollection, whitelistCollectionTokenId), \"Already used\");\n        embeddedTokensInfo[theCollectorsTokenId] = EmbedInfo(whitelistCollection, whitelistCollectionTokenId);\n        embeddedTokens[whitelistCollection][whitelistCollectionTokenId] = true;\n        _tokenURIs[theCollectorsTokenId] = uri;\n        emit EmbedTokens(theCollectorsTokenId, whitelistCollection, whitelistCollectionTokenId);\n    }","contract":"TheCollectors","time":0}]}
{"time":201,"results":[{"type":"external-function ","before":"function createGame(\n        bytes32 _userEndHash,\n        uint _previousGameId,\n        uint _createBefore,\n        bytes32 _serverEndHash,\n        bytes memory _serverSig\n    )\n        public\n        payable\n        onlyValidValue\n        onlyValidHouseStake(activeGames + 1)\n        onlyNotPaused\n    {\n        uint previousGameId = userGameId[msg.sender];\n        Game storage game = gameIdGame[previousGameId];\n\n        require(game.status == GameStatus.ENDED, \"prev game not ended\");\n        require(previousGameId == _previousGameId, \"inv gamePrevGameId\");\n        require(block.timestamp < _createBefore, \"expired\");\n\n        verifyCreateSig(msg.sender, _previousGameId, _createBefore, _serverEndHash, _serverSig);\n\n        uint gameId = gameIdCntr++;\n        userGameId[msg.sender] = gameId;\n        Game storage newGame = gameIdGame[gameId];\n\n        newGame.stake = uint128(msg.value); // It's safe to cast msg.value as it is limited, see onlyValidValue\n        newGame.status = GameStatus.ACTIVE;\n\n        activeGames = activeGames.add(1);\n\n        // It's safe to cast msg.value as it is limited, see onlyValidValue\n        emit LogGameCreated(msg.sender, gameId, uint128(msg.value), _serverEndHash,  _userEndHash);\n    }","after":"function createGame(\n        bytes32 _userEndHash,\n        uint _previousGameId,\n        uint _createBefore,\n        bytes32 _serverEndHash,\n        bytes calldata _serverSig\n    )\n        public\n        payable\n        onlyValidValue\n        onlyValidHouseStake(activeGames + 1)\n        onlyNotPaused\n    {\n        uint previousGameId = userGameId[msg.sender];\n        Game storage game = gameIdGame[previousGameId];\n\n        require(game.status == GameStatus.ENDED, \"prev game not ended\");\n        require(previousGameId == _previousGameId, \"inv gamePrevGameId\");\n        require(block.timestamp < _createBefore, \"expired\");\n\n        verifyCreateSig(msg.sender, _previousGameId, _createBefore, _serverEndHash, _serverSig);\n\n        uint gameId = gameIdCntr++;\n        userGameId[msg.sender] = gameId;\n        Game storage newGame = gameIdGame[gameId];\n\n        newGame.stake = uint128(msg.value); // It's safe to cast msg.value as it is limited, see onlyValidValue\n        newGame.status = GameStatus.ACTIVE;\n\n        activeGames = activeGames.add(1);\n\n        // It's safe to cast msg.value as it is limited, see onlyValidValue\n        emit LogGameCreated(msg.sender, gameId, uint128(msg.value), _serverEndHash,  _userEndHash);\n    }","contract":"GameChannel","time":0},{"type":"external-function ","before":"function serverEndGame(\n        uint32 _roundId,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        address payable _userAddress,\n        bytes memory _userSig\n    )\n        public\n        onlyServer\n    {\n        verifySig(\n                _roundId,\n                0,\n                0,\n                0,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _userSig,\n                _userAddress\n        );\n\n        regularEndGame(_userAddress, _roundId, _balance, _gameId, _contractAddress);\n    }","after":"function serverEndGame(\n        uint32 _roundId,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        address payable _userAddress,\n        bytes calldata _userSig\n    )\n        public\n        onlyServer\n    {\n        verifySig(\n                _roundId,\n                0,\n                0,\n                0,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _userSig,\n                _userAddress\n        );\n\n        regularEndGame(_userAddress, _roundId, _balance, _gameId, _contractAddress);\n    }","contract":"GameChannel","time":0},{"type":"external-function ","before":"function userEndGame(\n        uint32 _roundId,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes memory _serverSig\n    )\n        public\n    {\n        verifySig(\n                _roundId,\n                0,\n                0,\n                0,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _serverSig,\n                serverAddress\n        );\n\n        regularEndGame(msg.sender, _roundId, _balance, _gameId, _contractAddress);\n    }","after":"function userEndGame(\n        uint32 _roundId,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes calldata _serverSig\n    )\n        public\n    {\n        verifySig(\n                _roundId,\n                0,\n                0,\n                0,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _serverSig,\n                serverAddress\n        );\n\n        regularEndGame(msg.sender, _roundId, _balance, _gameId, _contractAddress);\n    }","contract":"GameChannel","time":0},{"type":"external-function ","before":"function serverEndGameConflict(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes memory _userSig,\n        address payable _userAddress,\n        bytes32 _serverSeed,\n        bytes32 _userSeed\n    )\n        public\n        onlyServer\n    {\n        verifySig(\n                _roundId,\n                _gameType,\n                _num,\n                _value,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _userSig,\n                _userAddress\n        );\n\n        serverEndGameConflictImpl(\n                _roundId,\n                _gameType,\n                _num,\n                _value,\n                _balance,\n                _serverHash,\n                _userHash,\n                _serverSeed,\n                _userSeed,\n                _gameId,\n                _userAddress\n        );\n    }","after":"function serverEndGameConflict(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes calldata _userSig,\n        address payable _userAddress,\n        bytes32 _serverSeed,\n        bytes32 _userSeed\n    )\n        public\n        onlyServer\n    {\n        verifySig(\n                _roundId,\n                _gameType,\n                _num,\n                _value,\n                _balance,\n                _serverHash,\n                _userHash,\n                _gameId,\n                _contractAddress,\n                _userSig,\n                _userAddress\n        );\n\n        serverEndGameConflictImpl(\n                _roundId,\n                _gameType,\n                _num,\n                _value,\n                _balance,\n                _serverHash,\n                _userHash,\n                _serverSeed,\n                _userSeed,\n                _gameId,\n                _userAddress\n        );\n    }","contract":"GameChannel","time":0},{"type":"external-function ","before":"function userEndGameConflict(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes memory _serverSig,\n        bytes32 _userSeed\n    )\n        public\n    {\n        verifySig(\n            _roundId,\n            _gameType,\n            _num,\n            _value,\n            _balance,\n            _serverHash,\n            _userHash,\n            _gameId,\n            _contractAddress,\n            _serverSig,\n            serverAddress\n        );\n\n        userEndGameConflictImpl(\n            _roundId,\n            _gameType,\n            _num,\n            _value,\n            _balance,\n            _userHash,\n            _userSeed,\n            _gameId,\n            msg.sender\n        );\n    }","after":"function userEndGameConflict(\n        uint32 _roundId,\n        uint8 _gameType,\n        uint _num,\n        uint _value,\n        int _balance,\n        bytes32 _serverHash,\n        bytes32 _userHash,\n        uint _gameId,\n        address _contractAddress,\n        bytes calldata _serverSig,\n        bytes32 _userSeed\n    )\n        public\n    {\n        verifySig(\n            _roundId,\n            _gameType,\n            _num,\n            _value,\n            _balance,\n            _serverHash,\n            _userHash,\n            _gameId,\n            _contractAddress,\n            _serverSig,\n            serverAddress\n        );\n\n        userEndGameConflictImpl(\n            _roundId,\n            _gameType,\n            _num,\n            _value,\n            _balance,\n            _userHash,\n            _userSeed,\n            _gameId,\n            msg.sender\n        );\n    }","contract":"GameChannel","time":0}]}
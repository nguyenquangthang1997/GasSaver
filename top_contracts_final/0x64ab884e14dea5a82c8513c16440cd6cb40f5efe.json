{"time":120,"results":[{"type":"external-function ","before":"fterSaleStart\n    {\n        _mint(_to, _tokenId);\n    }\n\n    /// Add new token supply, but only if the col","after":"fterSaleStart\n    {\n        _mint(_to, _tokenId);\n    }\n\n    /// Add new token supply, but only if the col","contract":"WagmiTable","time":0},{"type":"external-function ","before":"ens(_cid, 1);\n    }\n\n    /// @param _cid The new collection CID which holds the metadata for the updated collection.\n    /// @param _count The count","after":"ens(_cid, 1);\n    }\n\n    /// @param _cid The new collection CID which holds the metadata for the updated collection.\n    /// @param _count The count","contract":"WagmiTable","time":0},{"type":"external-function ","before":"m _cid The new collection CID which holds the metadata for the updated collection.\n    /// @param _to The owner of the new token.\n    /// @dev Add and mint a new token\n    function mintAdditionalToken(string memory _cid, address _to) public onlyOw","after":"m _cid The new collection CID which holds the metadata for the updated collection.\n    /// @param _to The owner of the new token.\n    /// @dev Add and mint a new token\n    function mintAdditionalToken(string memory _cid, address _to) public onlyOw","contract":"WagmiTable","time":0},{"type":"external-function ","before":"nPrices contract\n    constructor(uint256 _defaultPrice) {\n        defaultPrice = _defaultPrice;\n    }\n\n    /// @param _tokenId The token to update the price for\n    /// @param _price The price to use for the token\n    /// @dev ","after":"nPrices contract\n    constructor(uint256 _defaultPrice) {\n        defaultPrice = _defaultPrice;\n    }\n\n    /// @param _tokenId The token to update the price for\n    /// @param _price The price to use for the token\n    /// @dev ","contract":"WagmiTable","time":0},{"type":"immutable-restrict-modification ","before":"leStart() {\n        require(","after":"leStart() {\n        require(","contract":"WagmiTable","time":0}]}
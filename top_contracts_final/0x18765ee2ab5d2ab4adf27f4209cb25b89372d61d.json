{"time":203,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x41 && char <= 0x5A) &&\r\n                !(char >= 0x61 && char <= 0x7A)","after":"!((char >= 0x41 && char <= 0x5A) &&\r\n                (char >= 0x61 && char <= 0x7A))","loc":{"start":{"line":2082,"column":16},"end":{"line":2083,"column":46}},"contract":"BossyBears","time":0},{"type":"external-function ","before":"function setName(uint256 tokenId, string memory name) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(msg.sender == owner, \"!token.owner\");\r\n        require(validateName(name) == true, \"!name.valid\");\r\n        require(isNameUsed(name) == false, \"name.used\");\r\n        if (bytes(_tokenNames[tokenId]).length > 0) {\r\n            _namesUsed[toLower(_tokenNames[tokenId])] = false;\r\n        }\r\n        _namesUsed[toLower(name)] = true;\r\n        _tokenNames[tokenId] = name;\r\n        emit Named(tokenId, name);\r\n    }","after":"function setName(uint256 tokenId, string calldata name) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(msg.sender == owner, \"!token.owner\");\r\n        require(validateName(name) == true, \"!name.valid\");\r\n        require(isNameUsed(name) == false, \"name.used\");\r\n        if (bytes(_tokenNames[tokenId]).length > 0) {\r\n            _namesUsed[toLower(_tokenNames[tokenId])] = false;\r\n        }\r\n        _namesUsed[toLower(name)] = true;\r\n        _tokenNames[tokenId] = name;\r\n        emit Named(tokenId, name);\r\n    }","contract":"BossyBears","time":0},{"type":"external-function ","before":"function grantPremintAccess(address[] memory premintAddressList) external onlyOwner {\r\n        for (uint256 i = 0; i < premintAddressList.length; i++) {\r\n            premintAccess[premintAddressList[i]] = true;\r\n        } \r\n    }","after":"function grantPremintAccess(address[] calldata premintAddressList) external onlyOwner {\r\n        for (uint256 i = 0; i < premintAddressList.length; i++) {\r\n            premintAccess[premintAddressList[i]] = true;\r\n        } \r\n    }","contract":"BossyBears","time":0},{"type":"external-function ","before":"function setBaseURI(string memory str) external onlyOwner {\r\n        _setBaseURI(str);\r\n    }","after":"function setBaseURI(string calldata str) external onlyOwner {\r\n        _setBaseURI(str);\r\n    }","contract":"BossyBears","time":0},{"type":"external-function ","before":"function NFTgiveaway(address[] memory _to) external onlyOwner {\r\n        require( _to.length <= reserveRemain, \"qty>reserve_remain\");\r\n        require((totalSupply() +  _to.length) <= MAX_SUPPLY, \"qty>supply\");\r\n        reserveRemain = reserveRemain.sub(_to.length);\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            uint256 mintIndex = totalSupply();\r\n            _safeMint(_to[i], mintIndex);\r\n        }\r\n    }","after":"function NFTgiveaway(address[] calldata _to) external onlyOwner {\r\n        require( _to.length <= reserveRemain, \"qty>reserve_remain\");\r\n        require((totalSupply() +  _to.length) <= MAX_SUPPLY, \"qty>supply\");\r\n        reserveRemain = reserveRemain.sub(_to.length);\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            uint256 mintIndex = totalSupply();\r\n            _safeMint(_to[i], mintIndex);\r\n        }\r\n    }","contract":"BossyBears","time":0}]}
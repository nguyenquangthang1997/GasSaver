{"time":175,"results":[{"type":"external-function ","before":"   function submitMint(uint256 tokenId, address to, uint256 nonce, bytes memory signature) public {\n        address signer = _getSigner(tokenId, to, nonce, signature);\n        require(signer == allowedSigner);\n        require(!seenNonces[signer][nonce]);\n        seenNonces[signer][nonce] = true;\n\n        _mint(to, tokenId);\n  ","after":"   function submitMint(uint256 tokenId, address to, uint256 nonce, bytes calldata signature) public {\n        address signer = _getSigner(tokenId, to, nonce, signature);\n        require(signer == allowedSigner);\n        require(!seenNonces[signer][nonce]);\n        seenNonces[signer][nonce] = true;\n\n        _mint(to, tokenId);\n  ","contract":"FFPBurgers","time":0},{"type":"external-function ","before":"   function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n  ","after":"   function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n  ","contract":"FFPBurgers","time":0},{"type":"immutable-restrict-modification ","before":"   address proxyRegistryAddre","after":"   address proxyRegistryAddre","contract":"FFPBurgers","time":1}]}
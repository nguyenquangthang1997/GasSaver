{"time":59,"results":[{"type":"external-function ","before":"function claimRewards(uint[] memory tokenIds, address _owner) public returns (uint){\n        require(block.timestamp < END, \"There is no more $STAR available\");\n        uint totalClaimQty = 0;\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(tokenIds[i] < alienContract.totalSupply(), \"alien is nonexistent\");\n            require(alienContract.ownerOf(tokenIds[i]) == msg.sender, \"Claimant is not the owner\");\n\n            uint claimQty = checkReward(tokenIds[i]);\n            if (claimQty != 0) {\n                totalClaimQty += claimQty;\n                lastClaim[tokenIds[i]] = block.timestamp;\n            }\n        }\n\n        require(totalClaimQty != 0, \"No accumulated $STAR\");\n\n        _mint(msg.sender, totalClaimQty);\n        claimTime[_owner] = block.timestamp;\n\n        emit rewardPaid(msg.sender, totalClaimQty);\n        return totalClaimQty;\n    }","after":"function claimRewards(uint[] calldata tokenIds, address _owner) public returns (uint){\n        require(block.timestamp < END, \"There is no more $STAR available\");\n        uint totalClaimQty = 0;\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(tokenIds[i] < alienContract.totalSupply(), \"alien is nonexistent\");\n            require(alienContract.ownerOf(tokenIds[i]) == msg.sender, \"Claimant is not the owner\");\n\n            uint claimQty = checkReward(tokenIds[i]);\n            if (claimQty != 0) {\n                totalClaimQty += claimQty;\n                lastClaim[tokenIds[i]] = block.timestamp;\n            }\n        }\n\n        require(totalClaimQty != 0, \"No accumulated $STAR\");\n\n        _mint(msg.sender, totalClaimQty);\n        claimTime[_owner] = block.timestamp;\n\n        emit rewardPaid(msg.sender, totalClaimQty);\n        return totalClaimQty;\n    }","contract":"StarToken","time":0},{"type":"constant-restrict-modification  ","before":"uint public burnRate = 5 ether;","after":"uint public constant burnRate = 5 ether;","contract":"StarToken","time":1},{"type":"constant-restrict-modification  ","before":"uint public startingStar = 126 ether;","after":"uint public constant startingStar = 126 ether;","contract":"StarToken","time":1},{"type":"immutable-restrict-modification ","before":"uint public START;","after":"uint public immutable START;","contract":"StarToken","time":1},{"type":"immutable-restrict-modification ","before":"uint public END;","after":"uint public immutable END;","contract":"StarToken","time":1}]}
{"time":129,"results":[{"type":"external-function ","before":"\n  function mint(uint256[] memory _tokenIdsToClaim, uint8 WLnums, uint8 OGcnt, bytes memory OGsignature, bytes memory WLsignature) public {\n    require(!paused);\n    uint256 supply = totalSupply();\n    uint256 mintCount;\n    for(uint256 i=0;i<_tokenIdsToClaim.length;i++){\n      uint256 tid = _tokenIdsToClaim[i];\n      if((akcContract.ownerOf(tid) == msg.sender) && (akcClaimed[tid] < mintMax)){\n        akcClaimed[tid]++;\n        mintCount++;\n      }else{\n        revert(\"id doesnt belong to owner\");\n      }\n    }\n    if((OGsignature.length > 0) && isOGed(msg.sender, OGcnt, OGsignature) && (OGClaimed[msg.sender] < mintMax)){\n      mintCount+=OGcnt;\n      OGClaimed[msg.sender]++;\n    }\n    if((WLsignature.length > 0) && isWhitelisted(msg.sender, WLsignature) && (WLnums <= (mintMax - whitelistClaimed[msg.sender]))){\n      whitelistClaimed[msg.sender] += WLnums;\n      mintCount += WLnums;\n    }\n    require(mintCount > 0,\"at least 1 mint\");\n    require(supply + mintCount <= maxSupply, \"max supply reached\");\n    currentSupply += mintCount;\n    for (uint256 i = 1; i <= mintCount; i++) {\n      _safeMint(msg.sender, supply + i);\n    }\n","after":"\n  function mint(uint256[] calldata _tokenIdsToClaim, uint8 WLnums, uint8 OGcnt, bytes calldata OGsignature, bytes calldata WLsignature) public {\n    require(!paused);\n    uint256 supply = totalSupply();\n    uint256 mintCount;\n    for(uint256 i=0;i<_tokenIdsToClaim.length;i++){\n      uint256 tid = _tokenIdsToClaim[i];\n      if((akcContract.ownerOf(tid) == msg.sender) && (akcClaimed[tid] < mintMax)){\n        akcClaimed[tid]++;\n        mintCount++;\n      }else{\n        revert(\"id doesnt belong to owner\");\n      }\n    }\n    if((OGsignature.length > 0) && isOGed(msg.sender, OGcnt, OGsignature) && (OGClaimed[msg.sender] < mintMax)){\n      mintCount+=OGcnt;\n      OGClaimed[msg.sender]++;\n    }\n    if((WLsignature.length > 0) && isWhitelisted(msg.sender, WLsignature) && (WLnums <= (mintMax - whitelistClaimed[msg.sender]))){\n      whitelistClaimed[msg.sender] += WLnums;\n      mintCount += WLnums;\n    }\n    require(mintCount > 0,\"at least 1 mint\");\n    require(supply + mintCount <= maxSupply, \"max supply reached\");\n    currentSupply += mintCount;\n    for (uint256 i = 1; i <= mintCount; i++) {\n      _safeMint(msg.sender, supply + i);\n    }\n","contract":"ApeKidsPets","time":0},{"type":"external-function ","before":"\n  function setContractURI(string memory _contractURI) public onlyOwner {\n    mycontractURI = _contractURI;\n    //return format based on https://docs.opensea.io/docs/contract-level-metadata\n","after":"\n  function setContractURI(string calldata _contractURI) public onlyOwner {\n    mycontractURI = _contractURI;\n    //return format based on https://docs.opensea.io/docs/contract-level-metadata\n","contract":"ApeKidsPets","time":0},{"type":"immutable-restrict-modification ","before":"\n  uint256 public maxSupp","after":"\n  uint256 public maxSupp","contract":"ApeKidsPets","time":0},{"type":"immutable-restrict-modification ","before":"\n  address public sign","after":"\n  address public sign","contract":"ApeKidsPets","time":0}]}
{"time":130,"results":[{"type":"state-data-arrangement ","before":"\naddress private skvllpvnkzContractAddress = 0xB28a4FdE7B6c3Eb0C914d7b4d3ddb4544c3bcbd6;\nuint256 private _maxSupply = 5000;\nuint256 private _tokenId = 0;\nstring _baseTokenURI;\nbool public _publicSale = false;\nbool private _provenanceSet = false;\nstring public provenance = \"\";\nstring private _contractURI = \"http://api.skvllbabiez.io/contract\";\nmapping(uint256 => bool) private _usedSkvllz;","after":"uint256 private _maxSupply = 5000;\nuint256 private _tokenId = 0;\nstring _baseTokenURI;\nstring public provenance = \"\";\nstring private _contractURI = \"http://api.skvllbabiez.io/contract\";\nmapping(uint256 => bool) private _usedSkvllz;\naddress private skvllpvnkzContractAddress = 0xB28a4FdE7B6c3Eb0C914d7b4d3ddb4544c3bcbd6;\nbool public _publicSale = false;\nbool private _provenanceSet = false;\n","contract":"Skvllbabiez","time":0},{"type":"external-function ","before":"function makeBabiez(uint256[] memory tokens) external nonReentrant {\n        require( _publicSale, \"Sale paused\" );\n        require(tokens.length > 1, \"Need at least 2 tokens\");\n        require(tokens.length % 2 == 0, \"Need to supply an even number of tokens\");\n        for (uint256 i=0; i < tokens.length; i=i+2){\n            if (tokens[i] != tokens[i+1]\n                && !_usedSkvllz[tokens[i]] \n                && !_usedSkvllz[tokens[i+1]]\n                && ISkvllpvnkz(skvllpvnkzContractAddress).ownerOf( tokens[i] ) == msg.sender\n                && ISkvllpvnkz(skvllpvnkzContractAddress).ownerOf( tokens[i+1] ) == msg.sender) {\n                    _usedSkvllz[tokens[i]] = true;\n                    _usedSkvllz[tokens[i+1]] = true;\n                    _tokenId ++;\n                    _safeMint( msg.sender,  _tokenId );\n             }\n        }\n    }","after":"function makeBabiez(uint256[] calldata tokens) external nonReentrant {\n        require( _publicSale, \"Sale paused\" );\n        require(tokens.length > 1, \"Need at least 2 tokens\");\n        require(tokens.length % 2 == 0, \"Need to supply an even number of tokens\");\n        for (uint256 i=0; i < tokens.length; i=i+2){\n            if (tokens[i] != tokens[i+1]\n                && !_usedSkvllz[tokens[i]] \n                && !_usedSkvllz[tokens[i+1]]\n                && ISkvllpvnkz(skvllpvnkzContractAddress).ownerOf( tokens[i] ) == msg.sender\n                && ISkvllpvnkz(skvllpvnkzContractAddress).ownerOf( tokens[i+1] ) == msg.sender) {\n                    _usedSkvllz[tokens[i]] = true;\n                    _usedSkvllz[tokens[i+1]] = true;\n                    _tokenId ++;\n                    _safeMint( msg.sender,  _tokenId );\n             }\n        }\n    }","contract":"Skvllbabiez","time":1},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","contract":"Skvllbabiez","time":0},{"type":"external-function ","before":"function setContractURI(string memory uri) external onlyOwner {\n        _contractURI = uri;\n    }","after":"function setContractURI(string calldata uri) external onlyOwner {\n        _contractURI = uri;\n    }","contract":"Skvllbabiez","time":0},{"type":"external-function ","before":"function setProvenance(string memory _provenance) external onlyOwner {\n        require(!_provenanceSet, \"Provenance has been set already\");\n        provenance = _provenance;\n        _provenanceSet = true;\n    }","after":"function setProvenance(string calldata _provenance) external onlyOwner {\n        require(!_provenanceSet, \"Provenance has been set already\");\n        provenance = _provenance;\n        _provenanceSet = true;\n    }","contract":"Skvllbabiez","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private _maxSupply = 5000;","after":"uint256 private constant _maxSupply = 5000;","contract":"Skvllbabiez","time":0}]}
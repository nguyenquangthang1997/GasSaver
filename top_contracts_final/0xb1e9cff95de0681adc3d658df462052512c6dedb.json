{"time":167,"results":[{"type":"external-function ","before":"function mintVerified(bytes32 _itemHash, bytes memory _signature) external {\n        require(\n            _verificationRequester[_itemHash] == msg.sender,\n            \"Verification Requester mismatch\"\n        );\n        require(!_isItemMinted[_itemHash], \"Already minted\");\n        require(\n            verifySignature(msg.sender, _itemHash, _signature),\n            \"Signature mismatch\"\n        );\n        _isItemMinted[_itemHash] = true;\n        _safeMint(msg.sender, _tokenNumber);\n        _hashOf[_tokenNumber] = _itemHash;\n        _tokenNumber++;\n    }","after":"function mintVerified(bytes32 _itemHash, bytes calldata _signature) external {\n        require(\n            _verificationRequester[_itemHash] == msg.sender,\n            \"Verification Requester mismatch\"\n        );\n        require(!_isItemMinted[_itemHash], \"Already minted\");\n        require(\n            verifySignature(msg.sender, _itemHash, _signature),\n            \"Signature mismatch\"\n        );\n        _isItemMinted[_itemHash] = true;\n        _safeMint(msg.sender, _tokenNumber);\n        _hashOf[_tokenNumber] = _itemHash;\n        _tokenNumber++;\n    }","contract":"UniqGenerator","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory _hash) external onlyOwner {\n        METADATA_PROVENANCE_HASH = _hash;\n    }","after":"function setProvenanceHash(string calldata _hash) external onlyOwner {\n        METADATA_PROVENANCE_HASH = _hash;\n    }","contract":"UniqGenerator","time":0},{"type":"external-function ","before":"function editTokenUri(string memory _ttokenUri) external onlyOwner{\n        _token_uri = _ttokenUri;\n    }","after":"function editTokenUri(string calldata _ttokenUri) external onlyOwner{\n        _token_uri = _ttokenUri;\n    }","contract":"UniqGenerator","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"UniqGenerator","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"UniqGenerator","time":1}]}
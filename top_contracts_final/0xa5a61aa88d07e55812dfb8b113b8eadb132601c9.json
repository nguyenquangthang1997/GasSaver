{"time":248,"results":[{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"BrokeBoyz","time":0},{"type":"loop-duplication","before":"\nstart line 1564 column 8, end line 1567 column 8\nfor (uint i=0; i < boyzToUse.length; i++) {\n            require(brokeBoyz.ownerOf(boyzToUse[i]) == _msgSender(), \"sender is not the owner of sent bboy\");\n            require(!usedBboyzMapping[boyzToUse[i]], \"Some or all bboyz already used for free mint\");\n        }\nstart line 1569 column 8, end line 1571 column 8\nfor (uint i=0; i < boyzToUse.length; i++) {\n            usedBboyzMapping[boyzToUse[i]] = true;\n        }","after":"// merge loop\n\nstart line 1564 column 8, end line 1567 column 8\nfor (uint i=0; i < boyzToUse.length; i++) {\n            require(brokeBoyz.ownerOf(boyzToUse[i]) == _msgSender(), \"sender is not the owner of sent bboy\");\n            require(!usedBboyzMapping[boyzToUse[i]], \"Some or all bboyz already used for free mint\");\n        }\nstart line 1569 column 8, end line 1571 column 8\nfor (uint i=0; i < boyzToUse.length; i++) {\n            usedBboyzMapping[boyzToUse[i]] = true;\n        }","contract":"BrokeBoyzMinterUpgrade","time":0},{"type":"state-data-arrangement ","before":"\naddress public nftAddress;\nuint256 public MAX_SUPPLY;\nuint256 public publicMintPrice;\nuint256 public presaleMintPrice;\nbool public public_pass_minting;\nbool public holders_mint_pass;\nbool public free_mint_pass;\nuint256[] public usedBboyz;\nmapping(uint256 => bool) public usedBboyzMapping;","after":"uint256 public MAX_SUPPLY;\nuint256 public publicMintPrice;\nuint256 public presaleMintPrice;\nuint256[] public usedBboyz;\nmapping(uint256 => bool) public usedBboyzMapping;\naddress public nftAddress;\nbool public public_pass_minting;\nbool public holders_mint_pass;\nbool public free_mint_pass;\n","contract":"BrokeBoyzMinterUpgrade","time":0},{"type":"immutable-restrict-modification ","before":"address public nftAddress;","after":"address public immutable nftAddress;","contract":"BrokeBoyzMinterUpgrade","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public MAX_SUPPLY;","after":"uint256 public immutable MAX_SUPPLY;","contract":"BrokeBoyzMinterUpgrade","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public publicMintPrice;","after":"uint256 public immutable publicMintPrice;","contract":"BrokeBoyzMinterUpgrade","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public presaleMintPrice;","after":"uint256 public immutable presaleMintPrice;","contract":"BrokeBoyzMinterUpgrade","time":0},{"type":"state-data-arrangement ","before":"\naddress proxyRegistryAddress;\naddress factoryAddress;\nuint256 private _currentTokenId = 0;\nuint256 private _currentBblockId = 0;\nuint256 private _currentMintPassId = 0;\nuint256 private _currentTessId = 0;\nuint256 private _currentRoosId = 0;\nbool private mintPassMintingEnabled = false;\nbool private tessToEvil = false;\nbool private roosToEvil = false;\nbool private bblockToEvil = false;\nbool private tessToGood = false;\nbool private roosToGood = false;\nbool private bblockToGood = false;\nmapping(uint256 => uint256) public idMappings;\nmapping(uint256 => string) public goodEvilMapping;","after":"uint256 private _currentTokenId = 0;\nuint256 private _currentBblockId = 0;\nuint256 private _currentMintPassId = 0;\nuint256 private _currentTessId = 0;\nuint256 private _currentRoosId = 0;\nmapping(uint256 => uint256) public idMappings;\nmapping(uint256 => string) public goodEvilMapping;\naddress proxyRegistryAddress;\naddress factoryAddress;\nbool private mintPassMintingEnabled = false;\nbool private tessToEvil = false;\nbool private roosToEvil = false;\nbool private bblockToEvil = false;\nbool private tessToGood = false;\nbool private roosToGood = false;\nbool private bblockToGood = false;\n","contract":"ERC721Tradable","time":1}]}
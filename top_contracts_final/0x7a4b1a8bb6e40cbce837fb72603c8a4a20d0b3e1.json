{"time":143,"results":[{"type":"external-function ","before":"function setBaseURI(string memory _URI) public onlyOwner {\n        baseURI = _URI;\n    }","after":"function setBaseURI(string calldata _URI) public onlyOwner {\n        baseURI = _URI;\n    }","contract":"SaltyPirateCrew","time":0},{"type":"external-function ","before":"function firstPresale(uint256 mintAmount, bytes memory _signature) public payable nonReentrant {\n        require(currentState == ContractState.PRESALE1, \"First presale not in session\");\n        require(_verify(msg.sender, _signature), \"You are not on the whitelist\");\n        require(mintAmount > 0, \"Can't mint 0\");\n        require(mintAmount + _tokenIdCounter.current() <= MAX_SUPPLY - giftsRemaining() - SNAPSHOT, \"Minting more than max supply\");\n        require(mintAmount < 11, \"Max mint is 10\");\n        require(msg.value == PRICE * mintAmount, \"Wrong price\");\n        require(whitelist[msg.sender] + mintAmount <= maxPresaleMint, \"Minting more than your whitelist allocation\");\n\n        for(uint i = 0; i < mintAmount; i++) {\n            uint256 tokenId = _tokenIdCounter.current() + SNAPSHOT;\n            _tokenIdCounter.increment();\n            whitelist[msg.sender]++;\n            _safeMint(msg.sender, tokenId);\n        }\n    }","after":"function firstPresale(uint256 mintAmount, bytes calldata _signature) public payable nonReentrant {\n        require(currentState == ContractState.PRESALE1, \"First presale not in session\");\n        require(_verify(msg.sender, _signature), \"You are not on the whitelist\");\n        require(mintAmount > 0, \"Can't mint 0\");\n        require(mintAmount + _tokenIdCounter.current() <= MAX_SUPPLY - giftsRemaining() - SNAPSHOT, \"Minting more than max supply\");\n        require(mintAmount < 11, \"Max mint is 10\");\n        require(msg.value == PRICE * mintAmount, \"Wrong price\");\n        require(whitelist[msg.sender] + mintAmount <= maxPresaleMint, \"Minting more than your whitelist allocation\");\n\n        for(uint i = 0; i < mintAmount; i++) {\n            uint256 tokenId = _tokenIdCounter.current() + SNAPSHOT;\n            _tokenIdCounter.increment();\n            whitelist[msg.sender]++;\n            _safeMint(msg.sender, tokenId);\n        }\n    }","contract":"SaltyPirateCrew","time":0},{"type":"external-function ","before":"function secondPresale(uint256 mintAmount, bytes memory _signature) public payable nonReentrant {\n        require(currentState == ContractState.PRESALE2, \"Second presale not in session\");\n        require(_verify(msg.sender, _signature), \"You are not on the whitelist\");\n        require(mintAmount > 0, \"Can't mint 0\");\n        require(mintAmount + _tokenIdCounter.current() <= MAX_SUPPLY - giftsRemaining() - SNAPSHOT , \"Minting more than max supply\");\n        require(mintAmount < 11, \"Max mint is 10\");\n        require(msg.value == PRICE * mintAmount, \"Wrong price\");\n\n        for(uint i = 0; i < mintAmount; i++) {\n            uint256 tokenId = _tokenIdCounter.current() + SNAPSHOT;\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, tokenId);\n        }\n    }","after":"function secondPresale(uint256 mintAmount, bytes calldata _signature) public payable nonReentrant {\n        require(currentState == ContractState.PRESALE2, \"Second presale not in session\");\n        require(_verify(msg.sender, _signature), \"You are not on the whitelist\");\n        require(mintAmount > 0, \"Can't mint 0\");\n        require(mintAmount + _tokenIdCounter.current() <= MAX_SUPPLY - giftsRemaining() - SNAPSHOT , \"Minting more than max supply\");\n        require(mintAmount < 11, \"Max mint is 10\");\n        require(msg.value == PRICE * mintAmount, \"Wrong price\");\n\n        for(uint i = 0; i < mintAmount; i++) {\n            uint256 tokenId = _tokenIdCounter.current() + SNAPSHOT;\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, tokenId);\n        }\n    }","contract":"SaltyPirateCrew","time":0},{"type":"immutable-restrict-modification ","before":"address private signer;","after":"address private immutable signer;","contract":"SaltyPirateCrew","time":0}]}
{"time":153,"results":[{"type":"external-function ","before":"function verification(bytes32[] memory proof, uint maxMintAmount) whenNotPaused() nonReentrant() public  returns(bool) {\n       \n        \n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\n        bool verified = MerkleProof.verify(proof, root, leaf);\n        \n       \n\n        if(verified == true){\n            isVerified[msg.sender] = true;\n            preSaleMaxMintAmount[msg.sender] = maxMintAmount;\n        }\n        emit VStatus(verified,msg.sender);\n        return verified;\n    }","after":"function verification(bytes32[] calldata proof, uint maxMintAmount) whenNotPaused() nonReentrant() public  returns(bool) {\n       \n        \n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\n        bool verified = MerkleProof.verify(proof, root, leaf);\n        \n       \n\n        if(verified == true){\n            isVerified[msg.sender] = true;\n            preSaleMaxMintAmount[msg.sender] = maxMintAmount;\n        }\n        emit VStatus(verified,msg.sender);\n        return verified;\n    }","contract":"FusionsByGarvenLabs","time":0},{"type":"external-function ","before":"function whiteListAddress(address[] memory _address) public onlyOwner() returns(bool){\n        for(uint i; i < _address.length; i++){\n            isVerified[_address[i]] = true;\n            preSaleMaxMintAmount[_address[i]] = maxPublicAmount;\n        }\n        \n        return true;\n    }","after":"function whiteListAddress(address[] calldata _address) public onlyOwner() returns(bool){\n        for(uint i; i < _address.length; i++){\n            isVerified[_address[i]] = true;\n            preSaleMaxMintAmount[_address[i]] = maxPublicAmount;\n        }\n        \n        return true;\n    }","contract":"FusionsByGarvenLabs","time":0},{"type":"constant-restrict-modification  ","before":"string public baseExtension = \".json\";","after":"string public constant baseExtension = \".json\";","contract":"FusionsByGarvenLabs","time":1}]}
{"time":164,"results":[{"type":"external-function ","before":"   function setBaseURI(string memory newURI) external onlyOwner {\n        _metadataURI = newURI;\n  ","after":"   function setBaseURI(string calldata newURI) external onlyOwner {\n        _metadataURI = newURI;\n  ","contract":"ArtAI","time":0},{"type":"external-function ","before":"   function extend(\n        uint256 _tokenId,\n        string memory _imageHash,\n        string memory _imageName,\n        string memory _imageId,\n        bytes memory _signedMessage\n    ) external payable whenExtendingOpen {\n        require(ownerOf(_tokenId) == msg.sender, \"Ownership\");\n        require(\n            IERC721(_gen1Address).balanceOf(msg.sender) > 0 ||\n                IERC20(_paintbrushAddress).balanceOf(msg.sender) >=\n                _minPaintbrushesToExtend,\n            \"Balance\"\n        );\n        _verifyParams(\n            _imageName,\n            _imageHash,\n            _imageId,\n            _signedMessage,\n            _tokenId\n        );\n\n        _extend(_tokenId, _imageHash, _imageName, _imageId, _signedMessage);\n  ","after":"   function extend(\n        uint256 _tokenId,\n        string calldata _imageHash,\n        string calldata _imageName,\n        string calldata _imageId,\n        bytes calldata _signedMessage\n    ) external payable whenExtendingOpen {\n        require(ownerOf(_tokenId) == msg.sender, \"Ownership\");\n        require(\n            IERC721(_gen1Address).balanceOf(msg.sender) > 0 ||\n                IERC20(_paintbrushAddress).balanceOf(msg.sender) >=\n                _minPaintbrushesToExtend,\n            \"Balance\"\n        );\n        _verifyParams(\n            _imageName,\n            _imageHash,\n            _imageId,\n            _signedMessage,\n            _tokenId\n        );\n\n        _extend(_tokenId, _imageHash, _imageName, _imageId, _signedMessage);\n  ","contract":"ArtAI","time":0},{"type":"external-function ","before":"   function mint(\n        string memory _imageHash,\n        string memory _imageName,\n        string memory _imageId,\n        bytes memory _signedMessage\n    ) external payable whenMintingOpen returns (uint256) {\n        require(_tokenSupply < maxSupply, \"Maximum supply\");\n        require(\n            _burnTokens[msg.sender] >= _mintCostInBurnTokens,\n            \"burn tokens\"\n        );\n        _verifyParams(_imageName, _imageHash, _imageId, _signedMessage);\n        uint256 _newTokenId = _mint(\n            msg.sender,\n            _imageName,\n            _imageHash,\n            _imageId,\n            _signedMessage\n        );\n\n        return _newTokenId;\n  ","after":"   function mint(\n        string calldata _imageHash,\n        string calldata _imageName,\n        string calldata _imageId,\n        bytes calldata _signedMessage\n    ) external payable whenMintingOpen returns (uint256) {\n        require(_tokenSupply < maxSupply, \"Maximum supply\");\n        require(\n            _burnTokens[msg.sender] >= _mintCostInBurnTokens,\n            \"burn tokens\"\n        );\n        _verifyParams(_imageName, _imageHash, _imageId, _signedMessage);\n        uint256 _newTokenId = _mint(\n            msg.sender,\n            _imageName,\n            _imageHash,\n            _imageId,\n            _signedMessage\n        );\n\n        return _newTokenId;\n  ","contract":"ArtAI","time":1},{"type":"constant-restrict-modification  ","before":"   uint256 private _maxImageNameLength = 1","after":"   uint256 private constant _maxImageNameLength = 1","contract":"ArtAI","time":0},{"type":"constant-restrict-modification  ","before":"   address private _graveyardAddress =\n        0x000000000000000000000000000000000000dE","after":"   address private constant _graveyardAddress =\n        0x000000000000000000000000000000000000dE","contract":"ArtAI","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 private _mintCostInBurnTokens =","after":"   uint256 private constant _mintCostInBurnTokens =","contract":"ArtAI","time":0}]}
{"time":216,"results":[{"type":"external-function ","before":"function createPoolAndDeposit(\n        IExchangeManager.DepositParams memory params,\n        bytes[2] calldata data\n    )\n        external\n        payable\n        override\n        isExchangeManagerWhitelist(params.exchangeManagerAddress)\n        returns (\n            uint256 amount0Added,\n            uint256 amount1Added,\n            uint256 mintedTokenId\n        )\n    {\n        IExchangeManager(params.exchangeManagerAddress).createPair(\n            params.token0,\n            params.token1,\n            data[0]\n        );\n\n        (address token0, address token1, uint256 amount0, uint256 amount1) = params\n            .token0 < params.token1\n            ? (params.token0, params.token1, params.amount0Desired, params.amount1Desired)\n            : (\n                params.token1,\n                params.token0,\n                params.amount1Desired,\n                params.amount0Desired\n            );\n\n        (amount0Added, amount1Added) = deposit(\n            IExchangeManager.DepositParams({\n                recipient: params.recipient,\n                exchangeManagerAddress: params.exchangeManagerAddress,\n                token0: token0,\n                token1: token1,\n                amount0Desired: amount0.sub(1),\n                amount1Desired: amount1,\n                tokenId: 0\n            }),\n            data[1]\n        );\n    }","after":"function createPoolAndDeposit(\n        IExchangeManager.DepositParams calldata params,\n        bytes[2] calldata data\n    )\n        external\n        payable\n        override\n        isExchangeManagerWhitelist(params.exchangeManagerAddress)\n        returns (\n            uint256 amount0Added,\n            uint256 amount1Added,\n            uint256 mintedTokenId\n        )\n    {\n        IExchangeManager(params.exchangeManagerAddress).createPair(\n            params.token0,\n            params.token1,\n            data[0]\n        );\n\n        (address token0, address token1, uint256 amount0, uint256 amount1) = params\n            .token0 < params.token1\n            ? (params.token0, params.token1, params.amount0Desired, params.amount1Desired)\n            : (\n                params.token1,\n                params.token0,\n                params.amount1Desired,\n                params.amount0Desired\n            );\n\n        (amount0Added, amount1Added) = deposit(\n            IExchangeManager.DepositParams({\n                recipient: params.recipient,\n                exchangeManagerAddress: params.exchangeManagerAddress,\n                token0: token0,\n                token1: token1,\n                amount0Desired: amount0.sub(1),\n                amount1Desired: amount1,\n                tokenId: 0\n            }),\n            data[1]\n        );\n    }","contract":"Unipilot","time":0},{"type":"external-function ","before":"function withdraw(IExchangeManager.WithdrawParams calldata params, bytes memory data)\n        external\n        payable\n        isAuthorizedForToken(params.tokenId)\n        isExchangeManagerWhitelist(params.exchangeManagerAddress)\n    {\n        IExchangeManager(params.exchangeManagerAddress).withdraw(\n            params.pilotToken,\n            params.wethToken,\n            params.liquidity,\n            params.tokenId,\n            data\n        );\n    }","after":"function withdraw(IExchangeManager.WithdrawParams calldata params, bytes calldata data)\n        external\n        payable\n        isAuthorizedForToken(params.tokenId)\n        isExchangeManagerWhitelist(params.exchangeManagerAddress)\n    {\n        IExchangeManager(params.exchangeManagerAddress).withdraw(\n            params.pilotToken,\n            params.wethToken,\n            params.liquidity,\n            params.tokenId,\n            data\n        );\n    }","contract":"Unipilot","time":0},{"type":"external-function ","before":"function collect(IExchangeManager.CollectParams calldata params, bytes memory data)\n        external\n        payable\n        isAuthorizedForToken(params.tokenId)\n        isExchangeManagerWhitelist(params.exchangeManagerAddress)\n    {\n        IExchangeManager(params.exchangeManagerAddress).collect(\n            params.pilotToken,\n            params.wethToken,\n            params.tokenId,\n            data\n        );\n    }","after":"function collect(IExchangeManager.CollectParams calldata params, bytes calldata data)\n        external\n        payable\n        isAuthorizedForToken(params.tokenId)\n        isExchangeManagerWhitelist(params.exchangeManagerAddress)\n    {\n        IExchangeManager(params.exchangeManagerAddress).collect(\n            params.pilotToken,\n            params.wethToken,\n            params.tokenId,\n            data\n        );\n    }","contract":"Unipilot","time":0},{"type":"immutable-restrict-modification ","before":"address public override mintProxy;","after":"address public override immutable mintProxy;","contract":"Unipilot","time":1}]}
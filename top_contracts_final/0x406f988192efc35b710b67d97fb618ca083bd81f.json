{"time":159,"results":[{"type":"state-data-arrangement ","before":"\n�══╝ ╚═════�\n�╚══════╝     \n                            \n                 \n *\n * Smart contract work d\n by lenopix.eth\n */\ncontract JOEZ is\n  ERC721\nrancyGuard\n{\n  using ECDSA for bytes32;\n  usi\n;\n\n  // Minting constants\n  uint256 pu\nc maxMintMainSale;\n  uint256 public\n  uint256 public TOTAL_SUPPLY;\n  uint256 publi\nonstant LEGENDARY_COUNT = 12;\n  uint256 public \ntant COMPANY_RESERVE = 50;\n\n  // Current price: 0.069\n  uint256 public min\n00000000;\n\n  // Sale\ngles\n  bool private _isPresaleActive = false;\n  bool private _isSaleA\nve = false;\n\n  // Presale\n  mapping(addr\n => bool) public boughtPresale;\n  map","after":"�══╝ ╚═════�\n�╚══════╝     \n                            \n                 \n *\n * Smart contract work d\n by lenopix.eth\n */\ncontract JOEZ is\n  ERC721\nrancyGuard\n{\n  using ECDSA for bytes32;\n  usi\n  uint256 public TOTAL_SUPPLY;\n  uint256 publi\nonstant LEGENDARY_COUNT = 12;\n  uint256 public \n00000000;\n\n  // Sale\ngles\n  bool private _isPresaleActive = false;\n  bool private _isSaleA\nve = false;\n\n  // Presale\n  mapping(addr\n => bool) public boughtPresale;\n  map\ntant COMPANY_RESERVE = 50;\n\n  // Current price: 0.069\n  uint256 public min\n;\n\n  // Minting constants\n  uint256 pu\nc maxMintMainSale;\n  uint256 public\n","contract":"JOEZ","time":0},{"type":"external-function ","before":"() external view returns (bool) {\n    return _isPresaleActive;\n  }\n\n  // @dev R","after":"() external view returns (bool) {\n    return _isPresaleActive;\n  }\n\n  // @dev R","contract":"JOEZ","time":0},{"type":"external-function ","before":"ount;\n    _mintReserveTokens(msg.sender, mintCount);\n  }\n\n    // Presale\n    // @dev Presale Mint\n    // @param tokenCount The tokens a user wants to purchase\n    // @param presaleMaxMint The max tokens a user can mint from the presale\n    // @param sig Server side signature authorizing user to use the presale\n    function mintPresale(\n        uint256 tokenCount, \n        bytes memory sig\n    ) external nonReentrant payable {\n        require(_isPresaleActive, \"Presale not active\");\n        require(!_isSaleActive, \"Cannot mint while main sale is active\");\n        require(tokenCount > 0, \"Must mint at least 1 token\");\n        require(tokenCount <= maxMintPreSale, \"Token count exceeds limit\");\n        require((mintPrice * tokenCount) == msg.value, \"ETH sent does not match required payment\");\n        require(!boughtPresale[msg.sender], \"Can only buy in presale once\");\n        \n        // Verify signatu","after":"ount;\n    _mintReserveTokens(msg.sender, mintCount);\n  }\n\n    // Presale\n    // @dev Presale Mint\n    // @param tokenCount The tokens a user wants to purchase\n    // @param presaleMaxMint The max tokens a user can mint from the presale\n    // @param sig Server side signature authorizing user to use the presale\n    function mintPresale(\n        uint256 tokenCount, \n        bytes memory sig\n    ) external nonReentrant payable {\n        require(_isPresaleActive, \"Presale not active\");\n        require(!_isSaleActive, \"Cannot mint while main sale is active\");\n        require(tokenCount > 0, \"Must mint at least 1 token\");\n        require(tokenCount <= maxMintPreSale, \"Token count exceeds limit\");\n        require((mintPrice * tokenCount) == msg.value, \"ETH sent does not match required payment\");\n        require(!boughtPresale[msg.sender], \"Can only buy in presale once\");\n        \n        // Verify signatu","contract":"JOEZ","time":0},{"type":"immutable-restrict-modification ","before":"                            ","after":"                            ","contract":"JOEZ","time":0}]}
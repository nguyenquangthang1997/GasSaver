{"time":135,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant MAX_ELVES = 8888;\nuint256 public price = 0.04 ether;\nbool public publicSaleOpen = false;\nbool public preSaleOpen = false;\nbool public lock = false;\nuint256 public maxMintPerTx = 6;\nuint256 public maxMintPerAddress = 8888;\naddress private _signerAddress;\nmapping(address => uint256) public mintPerAddress;\nmapping(bytes32 => bool) private _usedHashes;\nstring public prefixURI;\nstring public commonURI;","after":"uint256 public constant MAX_ELVES = 8888;\nuint256 public price = 0.04 ether;\nuint256 public maxMintPerTx = 6;\nuint256 public maxMintPerAddress = 8888;\nmapping(address => uint256) public mintPerAddress;\nmapping(bytes32 => bool) private _usedHashes;\nstring public prefixURI;\nstring public commonURI;\naddress private _signerAddress;\nbool public publicSaleOpen = false;\nbool public preSaleOpen = false;\nbool public lock = false;\n","contract":"ElvesNorth","time":0},{"type":"external-function ","before":"function mintWhitelist(\n        uint256 _count,\n        uint256 _maxCount,\n        bytes memory _sig)\n        external\n        payable\n    {\n        require(preSaleOpen, \"preSale mint not open\");\n        require(_count > 0 && _count <= _maxCount, \"count invalid\");\n        require(totalSupply() + _count <= MAX_ELVES, \"max elves reached\");\n        require(msg.value == (_count * price), \"invalid eth sent\");\n\n        bytes32 hash = keccak256(abi.encode(_msgSender(), _maxCount));\n        require(!_usedHashes[hash], \"hash already used\");\n        require(matchSigner(hash, _sig), \"invalid signer\");\n\n        _usedHashes[hash] = true;\n        for (uint256 i = 1; i <= _count; i++) {\n            _safeMint(msg.sender, totalSupply()+1);\n        }\n    }","after":"function mintWhitelist(\n        uint256 _count,\n        uint256 _maxCount,\n        bytes calldata _sig)\n        external\n        payable\n    {\n        require(preSaleOpen, \"preSale mint not open\");\n        require(_count > 0 && _count <= _maxCount, \"count invalid\");\n        require(totalSupply() + _count <= MAX_ELVES, \"max elves reached\");\n        require(msg.value == (_count * price), \"invalid eth sent\");\n\n        bytes32 hash = keccak256(abi.encode(_msgSender(), _maxCount));\n        require(!_usedHashes[hash], \"hash already used\");\n        require(matchSigner(hash, _sig), \"invalid signer\");\n\n        _usedHashes[hash] = true;\n        for (uint256 i = 1; i <= _count; i++) {\n            _safeMint(msg.sender, totalSupply()+1);\n        }\n    }","contract":"ElvesNorth","time":0}]}
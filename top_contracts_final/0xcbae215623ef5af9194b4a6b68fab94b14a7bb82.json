{"time":104,"results":[{"type":"struct-data-arrangement ","before":"\naddress recipientAddress\nuint256 amount\naddress tokenAddress\naddress[] signatures\nstring note\nbool signed","after":"uint256 amount\naddress[] signatures\nstring note\naddress recipientAddress\naddress tokenAddress\nbool signed\n","contract":"Dispatcher","time":0},{"type":"external-function ","before":"function proposeNewTxn(address _userAddress, address _tokenAddress, uint256 _amount, string memory _note) external onlyBridgeController{\n        transferProposalStore[uuid].recipientAddress = _userAddress;\n        transferProposalStore[uuid].amount = _amount;\n        transferProposalStore[uuid].tokenAddress = _tokenAddress;\n        transferProposalStore[uuid].note = _note;\n        if(valThreshold == 1)\n        {\n            vault.transferFunds(transferProposalStore[uuid].tokenAddress, transferProposalStore[uuid].recipientAddress, transferProposalStore[uuid].amount);\n            emit ApprovedTransaction(transferProposalStore[uuid].recipientAddress, transferProposalStore[uuid].amount, uuid);\n            emit proposalCreated(uuid);\n            transferProposalStore[uuid].signed = true;\n        }\n        else\n        {\n            transferProposalStore[uuid].signatures.push(msg.sender);\n            outstandingTransferProposalsIndex.push(uuid);\n            emit proposalCreated(uuid);\n        }\n        uuid += 1;\n    }","after":"function proposeNewTxn(address _userAddress, address _tokenAddress, uint256 _amount, string calldata _note) external onlyBridgeController{\n        transferProposalStore[uuid].recipientAddress = _userAddress;\n        transferProposalStore[uuid].amount = _amount;\n        transferProposalStore[uuid].tokenAddress = _tokenAddress;\n        transferProposalStore[uuid].note = _note;\n        if(valThreshold == 1)\n        {\n            vault.transferFunds(transferProposalStore[uuid].tokenAddress, transferProposalStore[uuid].recipientAddress, transferProposalStore[uuid].amount);\n            emit ApprovedTransaction(transferProposalStore[uuid].recipientAddress, transferProposalStore[uuid].amount, uuid);\n            emit proposalCreated(uuid);\n            transferProposalStore[uuid].signed = true;\n        }\n        else\n        {\n            transferProposalStore[uuid].signatures.push(msg.sender);\n            outstandingTransferProposalsIndex.push(uuid);\n            emit proposalCreated(uuid);\n        }\n        uuid += 1;\n    }","contract":"Dispatcher","time":0},{"type":"external-function ","before":"function createTxn(\n    string memory _id, \n    string memory _note,\n    address _tokenAddress,\n    uint256 _calculatedFee,\n    uint256 _amount\n    ) external payable{\n        require(_amount > 0, \"Must send an amount\");\n        require(msg.value == _calculatedFee, \"Calculated fee sent wrong\");\n        require(bytes(transactions[_id]).length == 0, \"Must be a new transaction\");\n        transactions[_id] = _note;\n        ERC20(_tokenAddress).transferFrom(msg.sender, address(vault), _amount);\n        payable(bridgeControllerAddress).transfer(msg.value);\n        emit NewTransactionCreated(msg.sender, _tokenAddress, _amount);\n    }","after":"function createTxn(\n    string calldata _id, \n    string calldata _note,\n    address _tokenAddress,\n    uint256 _calculatedFee,\n    uint256 _amount\n    ) external payable{\n        require(_amount > 0, \"Must send an amount\");\n        require(msg.value == _calculatedFee, \"Calculated fee sent wrong\");\n        require(bytes(transactions[_id]).length == 0, \"Must be a new transaction\");\n        transactions[_id] = _note;\n        ERC20(_tokenAddress).transferFrom(msg.sender, address(vault), _amount);\n        payable(bridgeControllerAddress).transfer(msg.value);\n        emit NewTransactionCreated(msg.sender, _tokenAddress, _amount);\n    }","contract":"Dispatcher","time":0}]}
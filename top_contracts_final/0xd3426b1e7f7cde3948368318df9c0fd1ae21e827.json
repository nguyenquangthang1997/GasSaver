{"time":145,"results":[{"type":"external-function ","before":"function mint(bytes memory captcha, uint8 numberOfTokens)\n        external\n        payable\n        nonReentrant\n    {\n        require(numberOfTokens > 0, \"missing number of tokens to mint\");\n        updateMode();\n        require(\n            mode == Mode.SellingPreThreshold ||\n                mode == Mode.SellingPostThreshold,\n            \"minting is not available\"\n        );\n        require(\n            memberCount() + numberOfTokens <= MAXIMUM_TOTAL_MEMBER_COUNT,\n            \"not enough memberships remaining\"\n        );\n        require(\n            msg.value == SALE_PRICE * numberOfTokens,\n            \"incorrect ETH payment amount\"\n        );\n        require(isProbablyHuman(captcha, msg.sender), \"you seem like a robot\");\n        uint8 mintCount = mintCountsByAddress[msg.sender];\n        require(\n            mintCount + numberOfTokens <= MINTS_PER_WALLET,\n            \"you can only mint two memberships per wallet\"\n        );\n\n        mintCountsByAddress[msg.sender] = mintCount + numberOfTokens;\n\n        // Only the first mint from this wallet can get a gold token.\n        bool couldBeGold = mintCount == 0;\n        _safeMint(msg.sender, generateTokenId(couldBeGold));\n        for (uint256 i = 1; i < numberOfTokens; i++) {\n            _safeMint(msg.sender, generateTokenId(false));\n        }\n    }","after":"function mint(bytes calldata captcha, uint8 numberOfTokens)\n        external\n        payable\n        nonReentrant\n    {\n        require(numberOfTokens > 0, \"missing number of tokens to mint\");\n        updateMode();\n        require(\n            mode == Mode.SellingPreThreshold ||\n                mode == Mode.SellingPostThreshold,\n            \"minting is not available\"\n        );\n        require(\n            memberCount() + numberOfTokens <= MAXIMUM_TOTAL_MEMBER_COUNT,\n            \"not enough memberships remaining\"\n        );\n        require(\n            msg.value == SALE_PRICE * numberOfTokens,\n            \"incorrect ETH payment amount\"\n        );\n        require(isProbablyHuman(captcha, msg.sender), \"you seem like a robot\");\n        uint8 mintCount = mintCountsByAddress[msg.sender];\n        require(\n            mintCount + numberOfTokens <= MINTS_PER_WALLET,\n            \"you can only mint two memberships per wallet\"\n        );\n\n        mintCountsByAddress[msg.sender] = mintCount + numberOfTokens;\n\n        // Only the first mint from this wallet can get a gold token.\n        bool couldBeGold = mintCount == 0;\n        _safeMint(msg.sender, generateTokenId(couldBeGold));\n        for (uint256 i = 1; i < numberOfTokens; i++) {\n            _safeMint(msg.sender, generateTokenId(false));\n        }\n    }","contract":"SocietyMember","time":0},{"type":"external-function ","before":"function setBaseURI(string memory uri) external onlyOwner {\n        baseURI = uri;\n    }","after":"function setBaseURI(string calldata uri) external onlyOwner {\n        baseURI = uri;\n    }","contract":"SocietyMember","time":0},{"type":"immutable-restrict-modification ","before":"address private openSeaProxyRegistry;","after":"address private immutable openSeaProxyRegistry;","contract":"SocietyMember","time":0}]}
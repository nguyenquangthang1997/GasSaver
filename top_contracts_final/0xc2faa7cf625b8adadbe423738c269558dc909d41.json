{"time":166,"results":[{"type":"external-function ","before":"penzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract RemixMintClub is ERC1155, ERC1155Burnable, ERC1155Supply, Ownable, Pausable, ReentrancyGuard {\n  using Strings for uint256;\n  using Counters for Counters.Counter;\n\n  bytes32 public currentMerkleRoot;\n  Counters.Counter public merkleCounter;\n  mapping(address => uint256) public lastClaimed;\n\n  string public baseURI;\n\n  // 1 = Gold Token\n  // 2 = Mint Token","after":"penzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract RemixMintClub is ERC1155, ERC1155Burnable, ERC1155Supply, Ownable, Pausable, ReentrancyGuard {\n  using Strings for uint256;\n  using Counters for Counters.Counter;\n\n  bytes32 public currentMerkleRoot;\n  Counters.Counter public merkleCounter;\n  mapping(address => uint256) public lastClaimed;\n\n  string public baseURI;\n\n  // 1 = Gold Token\n  // 2 = Mint Token","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"tity, \"\");\n  }\n\n  /* Merkle Tree Helper Functions */\n\n  function leaf(address _account, ui","after":"tity, \"\");\n  }\n\n  /* Merkle Tree Helper Functions */\n\n  function leaf(address _account, ui","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"RemixMintClub","time":0},{"type":"constant-restrict-modification  ","before":"\npragma solidity ^0.8.7;\n\nimport \"@op","after":"\npragma solidity ^0.8.7;\n\nimport \"@op","contract":"RemixMintClub","time":0}]}
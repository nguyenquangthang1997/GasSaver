{"time":164,"results":[{"type":"external-function ","before":"function multiMint(uint256[] memory tokenIds) public payable nonReentrant {\n        require((price * tokenIds.length) <= msg.value, \"Ether value sent is not correct\");\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(tokenIds[i] > 8000 && tokenIds[i] < 12000, \"Token ID invalid\");\n            _safeMint(msg.sender, tokenIds[i]);\n        }\n    }","after":"function multiMint(uint256[] calldata tokenIds) public payable nonReentrant {\n        require((price * tokenIds.length) <= msg.value, \"Ether value sent is not correct\");\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(tokenIds[i] > 8000 && tokenIds[i] < 12000, \"Token ID invalid\");\n            _safeMint(msg.sender, tokenIds[i]);\n        }\n    }","contract":"Banquet","time":0},{"type":"external-function ","before":"function multiMintWithLoot(uint256[] memory lootIds) public payable nonReentrant {\n        for (uint256 i = 0; i < lootIds.length; i++) {\n            require(lootContract.ownerOf(lootIds[i]) == msg.sender, \"Not the owner of this loot\");\n            _safeMint(_msgSender(), lootIds[i]);\n        }\n    }","after":"function multiMintWithLoot(uint256[] calldata lootIds) public payable nonReentrant {\n        for (uint256 i = 0; i < lootIds.length; i++) {\n            require(lootContract.ownerOf(lootIds[i]) == msg.sender, \"Not the owner of this loot\");\n            _safeMint(_msgSender(), lootIds[i]);\n        }\n    }","contract":"Banquet","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public price = 20000000000000000;","after":"uint256 public constant price = 20000000000000000;","contract":"Banquet","time":1},{"type":"constant-restrict-modification  ","before":"address public lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;","after":"address public constant lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;","contract":"Banquet","time":1}]}
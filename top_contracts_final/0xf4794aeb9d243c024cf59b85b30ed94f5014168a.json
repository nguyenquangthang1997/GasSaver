{"time":221,"results":[{"type":"external-function ","before":"symbols[0],\n                '\"}, {\"trait_type\":\"Second symbol\",\"value\":\"',\n                symbols[1],\n                '\"}, {\"trait_type\":\"Third symbol\",\"value\":\"',\n                symbols[2],\n                '\"}, {\"trait_type\":\"Symbols triplet\",\"value\":\"',\n                string(abi.encodePacked(symbols[0], symbols[1], symbols[2])),\n                '\"}, {\"trait_type\":\"Background\",\"value\":\"',\n                background,\n                '\"}]}'\n            )\n        );\n\n        string memory result = Base64.encode(\n            bytes(\n                string(\n                    abi.encodePacked(\n                        json[0],\n                        json[1]\n                    )\n                )\n            )\n        );\n\n        output = string(abi.encodePacked(\"data:application/json;base64,\", result));\n\n        return output;\n    }\n\n    function mint(uint256 numberOfTokens) public payable nonReentrant  {\n        require(mintIsActive, \"Public mint is not active at the moment. Be patient.\");\n        require(numberOfTokens > 0, \"Number of tokens can not be less than or equal to 0.\");\n        require(totalSupply() + numberOfTokens <= maxSupply, \"Purchase would exceed max supply.\");\n        require(numberOfTokens <= 4, \"Can only mint up to 4 per transaction.\");\n        require(MINT_PRICE * numberOfTokens == msg.value, \"Sent ETH value is incorrect.\");\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            _safeMint(_msgSender(), totalSupply() + 1);\n        }\n    }\n\n    ","after":"symbols[0],\n                '\"}, {\"trait_type\":\"Second symbol\",\"value\":\"',\n                symbols[1],\n                '\"}, {\"trait_type\":\"Third symbol\",\"value\":\"',\n                symbols[2],\n                '\"}, {\"trait_type\":\"Symbols triplet\",\"value\":\"',\n                string(abi.encodePacked(symbols[0], symbols[1], symbols[2])),\n                '\"}, {\"trait_type\":\"Background\",\"value\":\"',\n                background,\n                '\"}]}'\n            )\n        );\n\n        string memory result = Base64.encode(\n            bytes(\n                string(\n                    abi.encodePacked(\n                        json[0],\n                        json[1]\n                    )\n                )\n            )\n        );\n\n        output = string(abi.encodePacked(\"data:application/json;base64,\", result));\n\n        return output;\n    }\n\n    function mint(uint256 numberOfTokens) public payable nonReentrant  {\n        require(mintIsActive, \"Public mint is not active at the moment. Be patient.\");\n        require(numberOfTokens > 0, \"Number of tokens can not be less than or equal to 0.\");\n        require(totalSupply() + numberOfTokens <= maxSupply, \"Purchase would exceed max supply.\");\n        require(numberOfTokens <= 4, \"Can only mint up to 4 per transaction.\");\n        require(MINT_PRICE * numberOfTokens == msg.value, \"Sent ETH value is incorrect.\");\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            _safeMint(_msgSender(), totalSupply() + 1);\n        }\n    }\n\n    ","contract":"StringifyDoor","time":0},{"type":"external-function ","before":"on presaleMint(uint256 numberOfTokens, bytes memory signature) public payable nonReentrant  {\n        require(presaleMintIsActive, \"Pr","after":"on presaleMint(uint256 numberOfTokens, bytes memory signature) public payable nonReentrant  {\n        require(presaleMintIsActive, \"Pr","contract":"StringifyDoor","time":0},{"type":"external-function ","before":"chase would exceed max supply.\");\n\n        // Verify EIP-712 signature\n        address recoveredKey = keccak256(abi.encodePacked(msg.sender)).toEthSignedMessageHash().recover(signature);\n        require(recoveredKey == privateKe","after":"chase would exceed max supply.\");\n\n        // Verify EIP-712 signature\n        address recoveredKey = keccak256(abi.encodePacked(msg.sender)).toEthSignedMessageHash().recover(signature);\n        require(recoveredKey == privateKe","contract":"StringifyDoor","time":0},{"type":"constant-restrict-modification  ","before":"|¨¨|¨|¨¨|¨||  |\n¨  ¨¨||�","after":"|¨¨|¨|¨¨|¨||  |\n¨  ¨¨||�","contract":"StringifyDoor","time":0}]}
{"time":245,"results":[{"type":"struct-data-arrangement ","before":"\nbytes32 merkleRoot\nbool saleIsOpen\nuint256 mintPrice\nuint256 maxSupply\nuint256 maxPerWallet\nuint256 maxMintPerTxn\nstring metadataLink\nbool merkleProtect\nbool claimMultiple\nmapping(address => uint256) claimedAddress","after":"bytes32 merkleRoot\nuint256 mintPrice\nuint256 maxSupply\nuint256 maxPerWallet\nuint256 maxMintPerTxn\nstring metadataLink\nmapping(address => uint256) claimedAddress\nbool saleIsOpen\nbool merkleProtect\nbool claimMultiple\n","contract":"KalebsEditions","time":0},{"type":"external-function ","before":"function addEdition(\n        bytes32 _merkleRoot, \n        uint256 _mintPrice, \n        uint256 _maxSupply,\n        uint256 _maxMintPerTxn,\n        string memory _metadataLink,\n        uint256 _maxPerWallet,\n        bool _merkleProtect\n    ) external onlyOwner {\n        Edition storage edition = editions[editionCounter.current()];\n        edition.saleIsOpen = false;\n        edition.merkleRoot = _merkleRoot;\n        edition.mintPrice = _mintPrice;\n        edition.maxSupply = _maxSupply;\n        edition.maxMintPerTxn = _maxMintPerTxn;\n        edition.maxPerWallet = _maxPerWallet;\n        edition.metadataLink = _metadataLink;\n        edition.merkleProtect = _merkleProtect;\n        edition.claimMultiple = false;\n        editionCounter.increment();\n    }","after":"function addEdition(\n        bytes32 _merkleRoot, \n        uint256 _mintPrice, \n        uint256 _maxSupply,\n        uint256 _maxMintPerTxn,\n        string calldata _metadataLink,\n        uint256 _maxPerWallet,\n        bool _merkleProtect\n    ) external onlyOwner {\n        Edition storage edition = editions[editionCounter.current()];\n        edition.saleIsOpen = false;\n        edition.merkleRoot = _merkleRoot;\n        edition.mintPrice = _mintPrice;\n        edition.maxSupply = _maxSupply;\n        edition.maxMintPerTxn = _maxMintPerTxn;\n        edition.maxPerWallet = _maxPerWallet;\n        edition.metadataLink = _metadataLink;\n        edition.merkleProtect = _merkleProtect;\n        edition.claimMultiple = false;\n        editionCounter.increment();\n    }","contract":"KalebsEditions","time":0},{"type":"external-function ","before":"function editEdition(\n        bytes32 _merkleRoot, \n        uint256 _mintPrice, \n        uint256 _maxSupply,\n        uint256 _maxMintPerTxn,\n        string memory _metadataLink,        \n        uint256 _editionIndex,\n        bool _saleIsOpen,\n        uint256 _maxPerWallet,\n        bool _merkleProtect,\n        bool _claimMultiple\n\n    ) external onlyOwner {\n        if(editions[_editionIndex].merkleRoot != _merkleRoot){\n            editions[_editionIndex].merkleRoot = _merkleRoot;\n        }\n        if(editions[_editionIndex].mintPrice != _mintPrice){\n            editions[_editionIndex].mintPrice = _mintPrice;  \n        }\n        if(editions[_editionIndex].maxSupply != _maxSupply){\n            editions[_editionIndex].maxSupply = _maxSupply;    \n        }\n        if(editions[_editionIndex].maxMintPerTxn != _maxMintPerTxn){\n            editions[_editionIndex].maxMintPerTxn = _maxMintPerTxn; \n        }\n        editions[_editionIndex].metadataLink = _metadataLink;   \n         \n        if(editions[_editionIndex].saleIsOpen != _saleIsOpen){\n            editions[_editionIndex].saleIsOpen = _saleIsOpen; \n        }\n        if(editions[_editionIndex].maxPerWallet != _maxPerWallet){\n            editions[_editionIndex].maxPerWallet = _maxPerWallet; \n        }\n        if(editions[_editionIndex].merkleProtect != _merkleProtect){\n            editions[_editionIndex].merkleProtect = _merkleProtect;\n        }\n        if(editions[_editionIndex].claimMultiple = _claimMultiple){\n            editions[_editionIndex].claimMultiple = _claimMultiple;\n        }\n    }","after":"function editEdition(\n        bytes32 _merkleRoot, \n        uint256 _mintPrice, \n        uint256 _maxSupply,\n        uint256 _maxMintPerTxn,\n        string calldata _metadataLink,        \n        uint256 _editionIndex,\n        bool _saleIsOpen,\n        uint256 _maxPerWallet,\n        bool _merkleProtect,\n        bool _claimMultiple\n\n    ) external onlyOwner {\n        if(editions[_editionIndex].merkleRoot != _merkleRoot){\n            editions[_editionIndex].merkleRoot = _merkleRoot;\n        }\n        if(editions[_editionIndex].mintPrice != _mintPrice){\n            editions[_editionIndex].mintPrice = _mintPrice;  \n        }\n        if(editions[_editionIndex].maxSupply != _maxSupply){\n            editions[_editionIndex].maxSupply = _maxSupply;    \n        }\n        if(editions[_editionIndex].maxMintPerTxn != _maxMintPerTxn){\n            editions[_editionIndex].maxMintPerTxn = _maxMintPerTxn; \n        }\n        editions[_editionIndex].metadataLink = _metadataLink;   \n         \n        if(editions[_editionIndex].saleIsOpen != _saleIsOpen){\n            editions[_editionIndex].saleIsOpen = _saleIsOpen; \n        }\n        if(editions[_editionIndex].maxPerWallet != _maxPerWallet){\n            editions[_editionIndex].maxPerWallet = _maxPerWallet; \n        }\n        if(editions[_editionIndex].merkleProtect != _merkleProtect){\n            editions[_editionIndex].merkleProtect = _merkleProtect;\n        }\n        if(editions[_editionIndex].claimMultiple = _claimMultiple){\n            editions[_editionIndex].claimMultiple = _claimMultiple;\n        }\n    }","contract":"KalebsEditions","time":0},{"type":"external-function ","before":"function setContractURI(string memory newURI) external onlyOwner{\n        _contractURI = newURI;\n    }","after":"function setContractURI(string calldata newURI) external onlyOwner{\n        _contractURI = newURI;\n    }","contract":"KalebsEditions","time":0},{"type":"external-function ","before":"function setURI(string memory baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","after":"function setURI(string calldata baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","contract":"KalebsEditions","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"KalebsEditions","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"KalebsEditions","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"KalebsEditions","time":0}]}
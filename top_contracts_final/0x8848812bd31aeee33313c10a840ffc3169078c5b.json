{"time":135,"results":[{"type":"external-function ","before":"function AddBlackList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(blacklist[addr]){\n        continue;\n      }\n      blacklist[addr] = true;\n    }\n  }","after":"function AddBlackList(address[] calldata addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(blacklist[addr]){\n        continue;\n      }\n      blacklist[addr] = true;\n    }\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function DelBlackList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(!blacklist[addr]){\n        continue;\n      }\n      blacklist[addr] = false;\n    }\n  }","after":"function DelBlackList(address[] calldata addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(!blacklist[addr]){\n        continue;\n      }\n      blacklist[addr] = false;\n    }\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function AddWhiteList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(whitelist[addr]){\n        continue;\n      }\n      whitelist[addr] = true;\n    }\n  }","after":"function AddWhiteList(address[] calldata addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(whitelist[addr]){\n        continue;\n      }\n      whitelist[addr] = true;\n    }\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function DelWhiteList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(!whitelist[addr] ){\n        continue;\n      }\n      whitelist[addr] = false;\n    }\n  }","after":"function DelWhiteList(address[] calldata addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(!whitelist[addr] ){\n        continue;\n      }\n      whitelist[addr] = false;\n    }\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function FreezeAddr(address[] memory addrs)\n    public\n    IsAdmin(){\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(_freezeAddress[addr] == true){\n        continue;\n      }\n      _freezeAddress[addr] = true;\n    }\n  }","after":"function FreezeAddr(address[] calldata addrs)\n    public\n    IsAdmin(){\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(_freezeAddress[addr] == true){\n        continue;\n      }\n      _freezeAddress[addr] = true;\n    }\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function UnfreezeAddr(address[] memory addrs)\n    public\n    IsAdmin(){\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(_freezeAddress[addr] == false){\n        continue;\n      }\n      _freezeAddress[addr] = false;\n    }\n  }","after":"function UnfreezeAddr(address[] calldata addrs)\n    public\n    IsAdmin(){\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(_freezeAddress[addr] == false){\n        continue;\n      }\n      _freezeAddress[addr] = false;\n    }\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function send(address recipient, uint256 amount, bytes memory data) public virtual override  CheckFreeze(_msgSender()){\n    _send(_msgSender(), recipient, amount, data, \"\", true);\n  }","after":"function send(address recipient, uint256 amount, bytes calldata data) public virtual override  CheckFreeze(_msgSender()){\n    _send(_msgSender(), recipient, amount, data, \"\", true);\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function burn(uint256 amount, bytes memory data) public virtual override  CheckFreeze(_msgSender()){\n    _burn(_msgSender(), amount, data, \"\");\n  }","after":"function burn(uint256 amount, bytes calldata data) public virtual override  CheckFreeze(_msgSender()){\n    _burn(_msgSender(), amount, data, \"\");\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function operatorSend(\n                        address sender,\n                        address recipient,\n                        uint256 amount,\n                        bytes memory data,\n                        bytes memory operatorData\n                        )\n    public\n    virtual\n    override\n    CheckFreeze(sender)\n  {\n    require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n    _send(sender, recipient, amount, data, operatorData, true);\n  }","after":"function operatorSend(\n                        address sender,\n                        address recipient,\n                        uint256 amount,\n                        bytes calldata data,\n                        bytes calldata operatorData\n                        )\n    public\n    virtual\n    override\n    CheckFreeze(sender)\n  {\n    require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n    _send(sender, recipient, amount, data, operatorData, true);\n  }","contract":"CRFI","time":0},{"type":"external-function ","before":"function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override CheckFreeze(account){\n    require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n    _burn(account, amount, data, operatorData);\n  }","after":"function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) public virtual override CheckFreeze(account){\n    require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n    _burn(account, amount, data, operatorData);\n  }","contract":"CRFI","time":0}]}
{"time":71,"results":[{"type":"external-function ","before":"function stakeAndUnstakeMultiple(uint[] memory stakeTokenIds, uint[] memory unstakeTokenIds) whenNotPaused eoaOnly external {\n        require(nftContract.isApprovedForAll(msg.sender,address(this)),\"Approve the contract to transfer your tokens first!\");\n        claimAll();\n        for(uint i = 0; i < stakeTokenIds.length; i++) {\n            stake(stakeTokenIds[i]);\n        }\n        for(uint i = 0; i < unstakeTokenIds.length; i++) {\n            unstake(unstakeTokenIds[i]);\n        }\n    }","after":"function stakeAndUnstakeMultiple(uint[] calldata stakeTokenIds, uint[] calldata unstakeTokenIds) whenNotPaused eoaOnly external {\n        require(nftContract.isApprovedForAll(msg.sender,address(this)),\"Approve the contract to transfer your tokens first!\");\n        claimAll();\n        for(uint i = 0; i < stakeTokenIds.length; i++) {\n            stake(stakeTokenIds[i]);\n        }\n        for(uint i = 0; i < unstakeTokenIds.length; i++) {\n            unstake(unstakeTokenIds[i]);\n        }\n    }","contract":"BCCStaking","time":0},{"type":"external-function ","before":"function stakeMultiple(uint[] memory tokenIds) whenNotPaused eoaOnly external {\n        require(nftContract.isApprovedForAll(msg.sender,address(this)),\"Approve the contract to transfer your tokens first!\");\n        claimAll();\n        for(uint i = 0; i < tokenIds.length; i++) {\n            stake(tokenIds[i]);\n        }\n        \n    }","after":"function stakeMultiple(uint[] calldata tokenIds) whenNotPaused eoaOnly external {\n        require(nftContract.isApprovedForAll(msg.sender,address(this)),\"Approve the contract to transfer your tokens first!\");\n        claimAll();\n        for(uint i = 0; i < tokenIds.length; i++) {\n            stake(tokenIds[i]);\n        }\n        \n    }","contract":"BCCStaking","time":0},{"type":"external-function ","before":"function unstakeMultiple(uint[] memory tokenIds) whenNotPaused eoaOnly external {\n        claimAll();\n        for(uint i = 0; i < tokenIds.length; i++) {\n            unstake(tokenIds[i]);\n        }\n    }","after":"function unstakeMultiple(uint[] calldata tokenIds) whenNotPaused eoaOnly external {\n        claimAll();\n        for(uint i = 0; i < tokenIds.length; i++) {\n            unstake(tokenIds[i]);\n        }\n    }","contract":"BCCStaking","time":0},{"type":"external-function ","before":"function airdrop(address[] memory targets,uint[] memory amounts) external onlyOwner {\n        require(targets.length == amounts.length, \"Invalid data\");\n        for(uint i = 0; i < targets.length; i++) {\n            bccContract.transfer(targets[i],amounts[i]);\n        }\n    }","after":"function airdrop(address[] calldata targets,uint[] calldata amounts) external onlyOwner {\n        require(targets.length == amounts.length, \"Invalid data\");\n        for(uint i = 0; i < targets.length; i++) {\n            bccContract.transfer(targets[i],amounts[i]);\n        }\n    }","contract":"BCCStaking","time":0}]}
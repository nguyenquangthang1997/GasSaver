{"time":204,"results":[{"type":"state-data-arrangement ","before":"\nbool SALE_ENDED;\nuint256 PUBLIC_SALE_START_TIME;\naddress SIGNER;\nstring BASE_URI;\nuint256 public CODE_MINT_PRICE = 0.0639 ether;\nuint256 public PUBLIC_MINT_PRICE = 0.0693 ether;\nuint256 public MAX_SUPPLY = 9639;\nuint256 public FINAL_SEED;\nmapping(uint256 => bytes32) tokenIdToHash;\nmapping(address => bool) public admin;\nmapping(bytes32 => bool) public usedUuids;\nuint256 currentId;\nbytes32 keyHash;\nuint256 fee;","after":"uint256 PUBLIC_SALE_START_TIME;\nstring BASE_URI;\nuint256 public CODE_MINT_PRICE = 0.0639 ether;\nuint256 public PUBLIC_MINT_PRICE = 0.0693 ether;\nuint256 public MAX_SUPPLY = 9639;\nuint256 public FINAL_SEED;\nmapping(uint256 => bytes32) tokenIdToHash;\nmapping(address => bool) public admin;\nmapping(bytes32 => bool) public usedUuids;\nuint256 currentId;\nbytes32 keyHash;\nuint256 fee;\naddress SIGNER;\nbool SALE_ENDED;\n","contract":"Synthopia","time":0},{"type":"external-function ","before":"function setBaseUri(string memory baseUri) public onlyOwner {\n        BASE_URI = baseUri;\n    }","after":"function setBaseUri(string calldata baseUri) public onlyOwner {\n        BASE_URI = baseUri;\n    }","contract":"Synthopia","time":0},{"type":"external-function ","before":"function mintWithSignature(\n        bytes32 uuid,\n        uint256 amount,\n        bytes memory signature\n    ) public payable {\n        require(publicSaleStarted() == false, \"Use mint function\");\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender, uuid));\n        require(\n            hash.toEthSignedMessageHash().recover(signature) == SIGNER,\n            \"Invalid signature\"\n        );\n        require(usedUuids[uuid] == false, \"Invalid UUID\");\n        _mintInternal(amount, CODE_MINT_PRICE, uuid);\n    }","after":"function mintWithSignature(\n        bytes32 uuid,\n        uint256 amount,\n        bytes calldata signature\n    ) public payable {\n        require(publicSaleStarted() == false, \"Use mint function\");\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender, uuid));\n        require(\n            hash.toEthSignedMessageHash().recover(signature) == SIGNER,\n            \"Invalid signature\"\n        );\n        require(usedUuids[uuid] == false, \"Invalid UUID\");\n        _mintInternal(amount, CODE_MINT_PRICE, uuid);\n    }","contract":"Synthopia","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public CODE_MINT_PRICE = 0.0639 ether;","after":"uint256 public constant CODE_MINT_PRICE = 0.0639 ether;","contract":"Synthopia","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public PUBLIC_MINT_PRICE = 0.0693 ether;","after":"uint256 public constant PUBLIC_MINT_PRICE = 0.0693 ether;","contract":"Synthopia","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_SUPPLY = 9639;","after":"uint256 public constant MAX_SUPPLY = 9639;","contract":"Synthopia","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 keyHash;","after":"bytes32 immutable keyHash;","contract":"Synthopia","time":1},{"type":"immutable-restrict-modification ","before":"uint256 fee;","after":"uint256 immutable fee;","contract":"Synthopia","time":1}]}
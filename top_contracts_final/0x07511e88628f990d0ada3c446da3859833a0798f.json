{"time":130,"results":[{"type":"state-data-arrangement ","before":"\n       } catch {\n                revert(\"ERC\n transfer to non ERC1155Receiver implem\n);\n            }\n        }\n   \n   function _asSingletonArray(uint256 element) pr\npure returns (uint256[] memory) {\n      \nt256[] memory array = new uint256[](1);\n       \n= element;\n\n        return array;\n    }\n}\n\n\nle: contracts/HolyHeroes.sol\n// Author: cewy@nftbr\nom\n\ncontract HolyHeroes is ERC1155, Ownable {\n    string public constant na","after":"       } catch {\n                revert(\"ERC\n transfer to non ERC1155Receiver implem\n   function _asSingletonArray(uint256 element) pr\nom\n\ncontract HolyHeroes is ERC1155, Ownable {\n    string public constant na\n);\n            }\n        }\n   \npure returns (uint256[] memory) {\n      \nt256[] memory array = new uint256[](1);\n       \n= element;\n\n        return array;\n    }\n}\n\n\nle: contracts/HolyHeroes.sol\n// Author: cewy@nftbr\n","contract":"HolyHeroes","time":0},{"type":"external-function ","before":"OLY\";\n\n    uint32 public totalSupply = 0;\n    uint256 public constant unitPrice =","after":"OLY\";\n\n    uint32 public totalSupply = 0;\n    uint256 public constant unitPrice =","contract":"HolyHeroes","time":0},{"type":"external-function ","before":".sender, count);\n    }\n    \n    function publicSaleMint(uint32 count) external payable {\n        require(publicSaleIsActive(), \"Public sale is not active.\");\n        require(count > 0, \"Count must be greater than 0.\");\n        require(totalSupply + count <= publicSaleMaxSupply, \"Count exceeds the ","after":".sender, count);\n    }\n    \n    function publicSaleMint(uint32 count) external payable {\n        require(publicSaleIsActive(), \"Public sale is not active.\");\n        require(count > 0, \"Count must be greater than 0.\");\n        require(totalSupply + count <= publicSaleMaxSupply, \"Count exceeds the ","contract":"HolyHeroes","time":0},{"type":"external-function ","before":"self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     *","after":"self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     *","contract":"HolyHeroes","time":0},{"type":"external-function ","before":"From(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n  ","after":"From(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n  ","contract":"HolyHeroes","time":0}]}
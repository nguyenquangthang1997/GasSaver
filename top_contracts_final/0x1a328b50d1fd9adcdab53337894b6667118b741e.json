{"time":282,"results":[{"type":"external-function ","before":"nter][WeatherCondition.Snow] = 3;\r\n        weights[Season.Winter][WeatherCondition.Blizzard] = 1;\r\n    }\r\n\r\n    fu","after":"nter][WeatherCondition.Snow] = 3;\r\n        weights[Season.Winter][WeatherCondition.Blizzard] = 1;\r\n    }\r\n\r\n    fu","contract":"LittleRedRidingHood","time":0},{"type":"external-function ","before":"etBaseURI(string memory baseURI_) external onlyRole(SUPPORT_ROLE) {\r\n        BASE_URI = baseURI_;\r\n    }\r\n\r\n    function setWeatherConditionString(Season season, WeatherCondition","after":"etBaseURI(string calldata baseURI_) external onlyRole(SUPPORT_ROLE) {\r\n        BASE_URI = baseURI_;\r\n    }\r\n\r\n    function setWeatherConditionString(Season season, WeatherCondition","contract":"LittleRedRidingHood","time":0},{"type":"external-function ","before":"memory s) external onlyRole(SUPPORT_ROLE) {\r\n        weatherConditionStrings[season][wc] = s;\r\n    }\r\n    \r\n    function setSeasonStr","after":"calldata s) external onlyRole(SUPPORT_ROLE) {\r\n        weatherConditionStrings[season][wc] = s;\r\n    }\r\n    \r\n    function setSeasonStr","contract":"LittleRedRidingHood","time":0},{"type":"external-function ","before":"eason, string memory s) external onlyRole(SUPPORT_ROLE) {\r\n        seasonStrings[season] = s;\r\n    }\r\n    \r\n    function setHemisphereS","after":"eason, string calldata s) external onlyRole(SUPPORT_ROLE) {\r\n        seasonStrings[season] = s;\r\n    }\r\n    \r\n    function setHemisphereS","contract":"LittleRedRidingHood","time":0},{"type":"external-function ","before":"            hemispheres[tokenId] = hemisphere;\r\n            offsets[tokenId] = offset;\r\n        }\r\n    }\r\n\r\n    function updateApprovedTokenRanges(address contract_, uint256[] memory minTokenIds, uint256[] memory maxTokenIds) public onlyRole(SUPPORT_ROLE) {\r\n        require(minTokenIds.length == maxTokenIds.length, \"Redeem: Invalid input parameters\");\r\n        \r\n        uint existingRangesLength = _approvedTokenRange[contract_].length;\r\n        for (uint i = 0; i < existingRangesLength; i++) {\r\n            _approvedTokenRange[contract_][i].min = 0;\r\n            _approvedTokenRange[contract_][i].max = 0;\r\n        }\r\n        \r\n        for (uint i = 0; i < minTokenIds.length; i++) {\r\n            require(minTokenIds[i] < maxTokenIds[i], \"Redeem: min must be less than max\");\r\n            if (i < existingRangesLength) {\r\n                _approvedTokenRange[contract_][i].min = minTokenIds[i];\r\n                _approvedTokenRange[contract_][i].max = maxTokenIds[i];\r\n            } else {\r\n            ","after":"            hemispheres[tokenId] = hemisphere;\r\n            offsets[tokenId] = offset;\r\n        }\r\n    }\r\n\r\n    function updateApprovedTokenRanges(address contract_, uint256[] memory minTokenIds, uint256[] memory maxTokenIds) public onlyRole(SUPPORT_ROLE) {\r\n        require(minTokenIds.length == maxTokenIds.length, \"Redeem: Invalid input parameters\");\r\n        \r\n        uint existingRangesLength = _approvedTokenRange[contract_].length;\r\n        for (uint i = 0; i < existingRangesLength; i++) {\r\n            _approvedTokenRange[contract_][i].min = 0;\r\n            _approvedTokenRange[contract_][i].max = 0;\r\n        }\r\n        \r\n        for (uint i = 0; i < minTokenIds.length; i++) {\r\n            require(minTokenIds[i] < maxTokenIds[i], \"Redeem: min must be less than max\");\r\n            if (i < existingRangesLength) {\r\n                _approvedTokenRange[contract_][i].min = minTokenIds[i];\r\n                _approvedTokenRange[contract_][i].max = maxTokenIds[i];\r\n            } else {\r\n            ","contract":"LittleRedRidingHood","time":0}]}
{"time":145,"results":[{"type":"external-function ","before":"function setBaseUrl(string memory _url) external onlyOwner {\n        _baseUrl = _url;\n    }","after":"function setBaseUrl(string calldata _url) external onlyOwner {\n        _baseUrl = _url;\n    }","contract":"Creature","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"Creature","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"Creature","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public creaturePrice = 0.09 ether;","after":"uint256 public constant creaturePrice = 0.09 ether;","contract":"Creature","time":1},{"type":"state-data-arrangement ","before":"\naddress proxyRegistryAddress;\nuint256 private _currentTokenId = 0;\nuint256 public creaturePrice = 0.09 ether;\nbool public isOpen = false;\nstring private _baseUrl;\naddress constant private myAddress = 0x69975C0F87d66D0507Aa63464814fC8Cf45fB771;","after":"uint256 private _currentTokenId = 0;\nuint256 public creaturePrice = 0.09 ether;\nstring private _baseUrl;\naddress proxyRegistryAddress;\naddress constant private myAddress = 0x69975C0F87d66D0507Aa63464814fC8Cf45fB771;\nbool public isOpen = false;\n","contract":"ERC721Tradable","time":0}]}
{"time":158,"results":[{"type":"external-function ","before":"function updateHash(string memory newHash, string memory hashType) \n\t\tonlyOwner public\n\t{\n\t\trequire(_stringsEqual(hashType, \"disabled\") || \n\t\t\t\t_stringsEqual(hashType, \"standard\") ||\n\t\t\t\t_stringsEqual(hashType, \"legendary\"), \n\t\t\t\t\"PLAK721: hashType must be 'disabled'/'standard'/'legendary'\");\n\n\t\tif (_stringsEqual(hashType, \"disabled\")) {\n\t\t\t_disabledHash = newHash;\n\t\t} else if (_stringsEqual(hashType, \"standard\")) {\n\t\t\t_standardHash = newHash;\n\t\t} else {\n\t\t\t_legendaryHash = newHash;\n\t\t}\n\t}","after":"function updateHash(string calldata newHash, string calldata hashType) \n\t\tonlyOwner public\n\t{\n\t\trequire(_stringsEqual(hashType, \"disabled\") || \n\t\t\t\t_stringsEqual(hashType, \"standard\") ||\n\t\t\t\t_stringsEqual(hashType, \"legendary\"), \n\t\t\t\t\"PLAK721: hashType must be 'disabled'/'standard'/'legendary'\");\n\n\t\tif (_stringsEqual(hashType, \"disabled\")) {\n\t\t\t_disabledHash = newHash;\n\t\t} else if (_stringsEqual(hashType, \"standard\")) {\n\t\t\t_standardHash = newHash;\n\t\t} else {\n\t\t\t_legendaryHash = newHash;\n\t\t}\n\t}","contract":"PaymentLinksAccessKey","time":0},{"type":"external-function ","before":"function updateContractUri(string memory updatedContractUri) \n\t\tonlyOwner public\n\t{\n        _contractUri = updatedContractUri;\n    }","after":"function updateContractUri(string calldata updatedContractUri) \n\t\tonlyOwner public\n\t{\n        _contractUri = updatedContractUri;\n    }","contract":"PaymentLinksAccessKey","time":0},{"type":"external-function ","before":"function bulkMakeLegendary(uint256[] memory tids)\n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `makeLegendary` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot add more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (!isLegendary(tids[i])) {\n\t\t\t\t_legends[tids[i]] = true;\n\t\t\t}\n\t\t}\n\t}","after":"function bulkMakeLegendary(uint256[] calldata tids)\n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `makeLegendary` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot add more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (!isLegendary(tids[i])) {\n\t\t\t\t_legends[tids[i]] = true;\n\t\t\t}\n\t\t}\n\t}","contract":"PaymentLinksAccessKey","time":0},{"type":"external-function ","before":"function bulkRemoveLegendary(uint256[] memory tids)\n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `removeLegendary` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot add more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (isLegendary(tids[i])) {\n\t\t\t\t_legends[tids[i]] = false;\n\t\t\t}\n\t\t}\n\t}","after":"function bulkRemoveLegendary(uint256[] calldata tids)\n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `removeLegendary` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot add more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (isLegendary(tids[i])) {\n\t\t\t\t_legends[tids[i]] = false;\n\t\t\t}\n\t\t}\n\t}","contract":"PaymentLinksAccessKey","time":0},{"type":"external-function ","before":"function bulkDisable(uint256[] memory tids) \n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `disable` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot add more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (!isDisabled(tids[i])) {\n\t\t\t\t_disabled[tids[i]] = true;\n\t\t\t}\n\t\t}\n\t}","after":"function bulkDisable(uint256[] calldata tids) \n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `disable` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot add more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (!isDisabled(tids[i])) {\n\t\t\t\t_disabled[tids[i]] = true;\n\t\t\t}\n\t\t}\n\t}","contract":"PaymentLinksAccessKey","time":0},{"type":"external-function ","before":"function bulkEnable(uint256[] memory tids) \n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `enable` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot remove more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (isDisabled(tids[i])) {\n\t\t\t\t_disabled[tids[i]] = false;\n\t\t\t}\n\t\t}\n\t}","after":"function bulkEnable(uint256[] calldata tids) \n\t\tonlyOwner public\n\t{\n\t\tuint tidsLen = tids.length;\n\t\trequire(tidsLen > 1, \"PLAKAccessControl: use `enable` instead\");\n\t\trequire(tidsLen < 256, \"PLAKAccessControl: cannot remove more than 255 at once\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < tidsLen; i++) {\n\t\t\tif (isDisabled(tids[i])) {\n\t\t\t\t_disabled[tids[i]] = false;\n\t\t\t}\n\t\t}\n\t}","contract":"PaymentLinksAccessKey","time":0},{"type":"external-function ","before":"function bulkAddToWhitelist(address[] memory addresses) \n\t\tonlyOwner public\n\t{\n\t\trequire(addresses.length > 1, \"PLAKAccessControl: use `addToWhitelist` instead\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < addresses.length; i++) {\n\t\t\tif (!_whitelist[addresses[i]]) {\n\t\t\t\t_whitelist[addresses[i]] = true;\n\t\t\t}\n\t\t}\n\t}","after":"function bulkAddToWhitelist(address[] calldata addresses) \n\t\tonlyOwner public\n\t{\n\t\trequire(addresses.length > 1, \"PLAKAccessControl: use `addToWhitelist` instead\");\n\t\tuint8 i;\n\t\tfor (i = 0; i < addresses.length; i++) {\n\t\t\tif (!_whitelist[addresses[i]]) {\n\t\t\t\t_whitelist[addresses[i]] = true;\n\t\t\t}\n\t\t}\n\t}","contract":"PaymentLinksAccessKey","time":0},{"type":"immutable-restrict-modification ","before":"address public payoutAddress;","after":"address public immutable payoutAddress;","contract":"PaymentLinksAccessKey","time":0},{"type":"state-data-arrangement ","before":"\nbool public salePaused;\nmapping (uint256 => bool) internal _legends;\nmapping (uint256 => bool) internal _disabled;\nmapping (address => bool) internal _whitelist;\nbool public whitelistActive;","after":"mapping (uint256 => bool) internal _legends;\nmapping (uint256 => bool) internal _disabled;\nmapping (address => bool) internal _whitelist;\nbool public salePaused;\nbool public whitelistActive;\n","contract":"PLAKAccessControl","time":0}]}
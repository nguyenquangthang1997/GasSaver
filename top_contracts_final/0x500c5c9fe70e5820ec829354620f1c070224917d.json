{"time":466,"results":[{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved.\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved.\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"LazyMintERC1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"LazyMintERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"LazyMintERC1155","time":0},{"type":"immutable-restrict-modification ","before":"address private _trustedForwarder;","after":"address private immutable _trustedForwarder;","contract":"LazyMintERC1155","time":1},{"type":"immutable-restrict-modification ","before":"address public registry;","after":"address public immutable registry;","contract":"ProtocolControl","time":1},{"type":"external-function ","before":"function deployProtocol(string memory uri) external {\n        // Get deployer\n        address caller = _msgSender();\n        // Get version for deployment\n        uint256 version = getNextVersion(caller);\n        // Deploy contract and get deployment address.\n        address controlAddress = deployer.deployControl(version, caller, uri);\n\n        _protocolControls[caller].protocolControlAddress[version] = controlAddress;\n\n        emit NewProtocolControl(caller, version, controlAddress, address(deployer));\n    }","after":"function deployProtocol(string calldata uri) external {\n        // Get deployer\n        address caller = _msgSender();\n        // Get version for deployment\n        uint256 version = getNextVersion(caller);\n        // Deploy contract and get deployment address.\n        address controlAddress = deployer.deployControl(version, caller, uri);\n\n        _protocolControls[caller].protocolControlAddress[version] = controlAddress;\n\n        emit NewProtocolControl(caller, version, controlAddress, address(deployer));\n    }","contract":"Registry","time":0},{"type":"immutable-restrict-modification ","before":"address public forwarder;","after":"address public immutable forwarder;","contract":"Registry","time":0},{"type":"immutable-restrict-modification ","before":"address private _trustedForwarder;","after":"address private immutable _trustedForwarder;","contract":"Royalty","time":0}]}
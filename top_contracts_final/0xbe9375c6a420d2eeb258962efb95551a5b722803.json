{"time":133,"results":[{"type":"state-data-arrangement ","before":"\nbool public transfersEnabled;\nmapping(address => bool) public autoStakingDisabled;\nbool public initialized = false;\naddress public swap;\naddress public rewardRole;\nmapping(address => uint256) public lockedBalanceOf;","after":"mapping(address => bool) public autoStakingDisabled;\nmapping(address => uint256) public lockedBalanceOf;\naddress public swap;\naddress public rewardRole;\nbool public transfersEnabled;\nbool public initialized = false;\n","contract":"StormXToken","time":0},{"type":"external-function ","before":"function transfers(\n    address[] memory recipients,\n    uint256[] memory values\n  ) public transfersAllowed returns (bool) {\n    require(recipients.length == values.length, \"Input lengths do not match\");\n\n    for (uint256 i = 0; i < recipients.length; i++) {\n      transfer(recipients[i], values[i]);\n    }\n    return true;\n  }","after":"function transfers(\n    address[] calldata recipients,\n    uint256[] calldata values\n  ) public transfersAllowed returns (bool) {\n    require(recipients.length == values.length, \"Input lengths do not match\");\n\n    for (uint256 i = 0; i < recipients.length; i++) {\n      transfer(recipients[i], values[i]);\n    }\n    return true;\n  }","contract":"StormXToken","time":0},{"type":"external-function ","before":"function rewards(address[] memory recipients, uint256[] memory values) public onlyAuthorized {\n    require(recipients.length == values.length, \"Input lengths do not match\");\n\n    for (uint256 i = 0; i < recipients.length; i++) {\n      reward(recipients[i], values[i]);\n    }\n  }","after":"function rewards(address[] calldata recipients, uint256[] calldata values) public onlyAuthorized {\n    require(recipients.length == values.length, \"Input lengths do not match\");\n\n    for (uint256 i = 0; i < recipients.length; i++) {\n      reward(recipients[i], values[i]);\n    }\n  }","contract":"StormXToken","time":0}]}
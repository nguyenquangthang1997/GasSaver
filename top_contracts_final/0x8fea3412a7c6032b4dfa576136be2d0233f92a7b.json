{"time":189,"results":[{"type":"external-function ","before":"function setProvenanceHash(string memory _provenanceHash) external onlyOwner {\r\n        require(PROVENANCE_LOCK == false);\r\n        PROVENANCE_HASH = _provenanceHash;\r\n    }","after":"function setProvenanceHash(string calldata _provenanceHash) external onlyOwner {\r\n        require(PROVENANCE_LOCK == false);\r\n        PROVENANCE_HASH = _provenanceHash;\r\n    }","contract":"NFTcontract","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newURI) external onlyOwner {\r\n        _baseURIExtended = _newURI;\r\n    }","after":"function setBaseURI(string calldata _newURI) external onlyOwner {\r\n        _baseURIExtended = _newURI;\r\n    }","contract":"NFTcontract","time":0},{"type":"external-function ","before":"function setContractURI(string memory _newURI) external onlyOwner {\r\n        _contractURI = _newURI;\r\n    }","after":"function setContractURI(string calldata _newURI) external onlyOwner {\r\n        _contractURI = _newURI;\r\n    }","contract":"NFTcontract","time":0},{"type":"external-function ","before":"function airDropNFT(address[] memory _addr) external onlyOwner {\r\n\r\n        require(totalSupply() + _addr.length <= (MAXSUPPLY - _reserved), \"Error: You would exceed the airdrop limit.\");\r\n\r\n        for (uint i = 0; i < _addr.length; i++) {\r\n            id++;\r\n            _safeMint(_addr[i], id);\r\n            emit Mint(msg.sender, totalSupply());\r\n        }\r\n\r\n    }","after":"function airDropNFT(address[] calldata _addr) external onlyOwner {\r\n\r\n        require(totalSupply() + _addr.length <= (MAXSUPPLY - _reserved), \"Error: You would exceed the airdrop limit.\");\r\n\r\n        for (uint i = 0; i < _addr.length; i++) {\r\n            id++;\r\n            _safeMint(_addr[i], id);\r\n            emit Mint(msg.sender, totalSupply());\r\n        }\r\n\r\n    }","contract":"NFTcontract","time":0}]}
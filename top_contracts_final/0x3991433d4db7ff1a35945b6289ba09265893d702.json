{"time":231,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant PRICE = 60 * 10**15;\nuint256 public constant MAX_BY_MINT = 10;\nuint256 public constant MAX_RESERVE_COUNT = 100;\nuint256 public constant LAUNCH_TIMESTAMP = 1643310000;\nuint256 public MAX_ELEMENTS = 1500;\nuint256 public WHITELIST_RESERVE = 500;\nuint256 private _reservedCount = 0;\nuint256 private _reserveAtATime = 10;\nbool public isSaleOpen = false;\nmapping(address => bool) public allowedErc20Tokens;\nmapping(address => uint256) public userClaimed;\nmapping(address => uint256) public userBoughtPresale;\naddress public constant t1 = 0x891096Eb11b84Aa3c12e346C64ae60f8E54d074a;\naddress public constant t2 = 0x80F5D7940408bFaa3Ab08d252C63616e492B4B1e;\naddress public constant t3 = 0x0a15f8D9b8aCb352eE11a1D76e967Ab44842e9f3;\naddress private _signer = 0x8A5cCf0bb1b0FecC6bed2B3b5Ed3B739030C3DD0;\nstring public baseTokenURI;","after":"uint256 public constant PRICE = 60 * 10**15;\nuint256 public constant MAX_BY_MINT = 10;\nuint256 public constant MAX_RESERVE_COUNT = 100;\nuint256 public constant LAUNCH_TIMESTAMP = 1643310000;\nuint256 public MAX_ELEMENTS = 1500;\nuint256 public WHITELIST_RESERVE = 500;\nuint256 private _reservedCount = 0;\nuint256 private _reserveAtATime = 10;\nmapping(address => bool) public allowedErc20Tokens;\nmapping(address => uint256) public userClaimed;\nmapping(address => uint256) public userBoughtPresale;\nstring public baseTokenURI;\naddress public constant t1 = 0x891096Eb11b84Aa3c12e346C64ae60f8E54d074a;\naddress public constant t2 = 0x80F5D7940408bFaa3Ab08d252C63616e492B4B1e;\naddress public constant t3 = 0x0a15f8D9b8aCb352eE11a1D76e967Ab44842e9f3;\naddress private _signer = 0x8A5cCf0bb1b0FecC6bed2B3b5Ed3B739030C3DD0;\nbool public isSaleOpen = false;\n","contract":"BonnyDolls","time":1},{"type":"external-function ","before":"function presaleMint(uint256 _amount, uint256 _price, bytes memory _signature) external payable saleIsOpen {\n        require(userBoughtPresale[msg.sender] < _amount, \"Discounted count exceeds max allowed\");\n        uint256 total = _owners.length;\n        require(total + _amount <= MAX_ELEMENTS, \"Max limit\");\n        require(total <= MAX_ELEMENTS, \"All NFTs are sold out\");\n        require(_amount <= MAX_BY_MINT, \"Exceeds number\");\n        require(msg.value >= _price.mul(_amount), \"Value below price\");\n        \n        address _minter = _msgSender();\n\n        address signer = verifyMint(_minter, address(0), _amount, _amount, _price, _signature);\n        require(signer == _signer, \"Not authorized to mint\");\n\n        for (uint256 i = 0; i < _amount; i++) {\n            userBoughtPresale[msg.sender] += 1;\n            _mint(msg.sender, total++);\n        }  \n    }","after":"function presaleMint(uint256 _amount, uint256 _price, bytes calldata _signature) external payable saleIsOpen {\n        require(userBoughtPresale[msg.sender] < _amount, \"Discounted count exceeds max allowed\");\n        uint256 total = _owners.length;\n        require(total + _amount <= MAX_ELEMENTS, \"Max limit\");\n        require(total <= MAX_ELEMENTS, \"All NFTs are sold out\");\n        require(_amount <= MAX_BY_MINT, \"Exceeds number\");\n        require(msg.value >= _price.mul(_amount), \"Value below price\");\n        \n        address _minter = _msgSender();\n\n        address signer = verifyMint(_minter, address(0), _amount, _amount, _price, _signature);\n        require(signer == _signer, \"Not authorized to mint\");\n\n        for (uint256 i = 0; i < _amount; i++) {\n            userBoughtPresale[msg.sender] += 1;\n            _mint(msg.sender, total++);\n        }  \n    }","contract":"BonnyDolls","time":0},{"type":"external-function ","before":"function mintWithErc20(address _tokenAddress, uint256 _amount, uint256 _price, bytes memory _signature) external saleIsOpen {\n        uint256 total = _owners.length;\n        require(total + _amount + WHITELIST_RESERVE <= MAX_ELEMENTS, \"Max limit\");\n        require(total <= MAX_ELEMENTS, \"All NFTs are sold out\");\n        require(_amount <= MAX_BY_MINT, \"Exceeds number\");\n        require(allowedErc20Tokens[_tokenAddress], \"You can not mint with this token\");\n\n        address _minter = _msgSender();\n        address signer = verifyMint(_minter, _tokenAddress, _amount, _amount, _price, _signature);\n        require(signer == _signer, \"Not authorized to mint\");  \n\n        IERC20(_tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            _price * _amount\n        );\n\n        for (uint256 i = 0; i < _amount; i++) {\n            _mint(msg.sender, total++);\n        }\n    }","after":"function mintWithErc20(address _tokenAddress, uint256 _amount, uint256 _price, bytes calldata _signature) external saleIsOpen {\n        uint256 total = _owners.length;\n        require(total + _amount + WHITELIST_RESERVE <= MAX_ELEMENTS, \"Max limit\");\n        require(total <= MAX_ELEMENTS, \"All NFTs are sold out\");\n        require(_amount <= MAX_BY_MINT, \"Exceeds number\");\n        require(allowedErc20Tokens[_tokenAddress], \"You can not mint with this token\");\n\n        address _minter = _msgSender();\n        address signer = verifyMint(_minter, _tokenAddress, _amount, _amount, _price, _signature);\n        require(signer == _signer, \"Not authorized to mint\");  \n\n        IERC20(_tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            _price * _amount\n        );\n\n        for (uint256 i = 0; i < _amount; i++) {\n            _mint(msg.sender, total++);\n        }\n    }","contract":"BonnyDolls","time":0},{"type":"external-function ","before":"function claim(uint256 _userClaims, uint256 _amount, bytes memory _signature) external saleIsOpen {\n        require(userClaimed[msg.sender] < _userClaims, \"Claiming exceeds max allowed\");\n        uint256 total = _owners.length;\n        require(total + _amount <= MAX_ELEMENTS, \"Max limit\");\n        require(total <= MAX_ELEMENTS, \"All NFTs are sold out\");\n\n        address _minter = _msgSender();\n\n        address signer = verifyMint(_minter, address(0), _amount, _userClaims, 0, _signature);\n        require(signer == _signer, \"Not authorized to mint\");\n\n        for (uint256 i = 0; i < _amount; i++) {\n            userClaimed[msg.sender] += 1;\n            _mint(msg.sender, total++);\n        }\n    }","after":"function claim(uint256 _userClaims, uint256 _amount, bytes calldata _signature) external saleIsOpen {\n        require(userClaimed[msg.sender] < _userClaims, \"Claiming exceeds max allowed\");\n        uint256 total = _owners.length;\n        require(total + _amount <= MAX_ELEMENTS, \"Max limit\");\n        require(total <= MAX_ELEMENTS, \"All NFTs are sold out\");\n\n        address _minter = _msgSender();\n\n        address signer = verifyMint(_minter, address(0), _amount, _userClaims, 0, _signature);\n        require(signer == _signer, \"Not authorized to mint\");\n\n        for (uint256 i = 0; i < _amount; i++) {\n            userClaimed[msg.sender] += 1;\n            _mint(msg.sender, total++);\n        }\n    }","contract":"BonnyDolls","time":0}]}
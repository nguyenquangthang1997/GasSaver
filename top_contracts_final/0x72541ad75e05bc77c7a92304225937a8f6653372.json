{"time":185,"results":[{"type":"external-function ","before":"function requestNewBloot(\n        uint256 tokenId,\n        string memory _tokenURI\n    ) public payable {\n        // Require the claimer to have at least one bloot from the specified contract\n        require(bloot.balanceOf(msg.sender) >= 1, \"Need at least one bloot\");\n        // Set limit to no more than MINT_PER_BLOOT times of the owned bloot\n        require(super.balanceOf(msg.sender) < bloot.balanceOf(msg.sender) * MINT_PER_BLOOT, \"Purchase more bloot\");\n        require(super.totalSupply() < MAX_SUPPLY, \"Maximum supply reached.\");\n        _safeMint(msg.sender, tokenId);\n        _setTokenURI(tokenId, _tokenURI);\n    }","after":"function requestNewBloot(\n        uint256 tokenId,\n        string calldata _tokenURI\n    ) public payable {\n        // Require the claimer to have at least one bloot from the specified contract\n        require(bloot.balanceOf(msg.sender) >= 1, \"Need at least one bloot\");\n        // Set limit to no more than MINT_PER_BLOOT times of the owned bloot\n        require(super.balanceOf(msg.sender) < bloot.balanceOf(msg.sender) * MINT_PER_BLOOT, \"Purchase more bloot\");\n        require(super.totalSupply() < MAX_SUPPLY, \"Maximum supply reached.\");\n        _safeMint(msg.sender, tokenId);\n        _setTokenURI(tokenId, _tokenURI);\n    }","contract":"BlootElves","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory _tokenURI) public {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _setTokenURI(tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata _tokenURI) public {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _setTokenURI(tokenId, _tokenURI);\n    }","contract":"BlootElves","time":0},{"type":"constant-restrict-modification  ","before":"uint256 MINT_PER_BLOOT = 2;","after":"uint256 constant MINT_PER_BLOOT = 2;","contract":"BlootElves","time":0},{"type":"constant-restrict-modification  ","before":"uint256 MAX_SUPPLY = 5000;","after":"uint256 constant MAX_SUPPLY = 5000;","contract":"BlootElves","time":0},{"type":"constant-restrict-modification  ","before":"uint256 MINT_PER_BLOOT = 2;","after":"uint256 constant MINT_PER_BLOOT = 2;","contract":"BlootElvesNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 MAX_SUPPLY = 5000;","after":"uint256 constant MAX_SUPPLY = 5000;","contract":"BlootElvesNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 TOKEN_LIMIT_MIGRATE = 1484;","after":"uint256 constant TOKEN_LIMIT_MIGRATE = 1484;","contract":"BlootElvesNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 TOKEN_LIMIT_NOTDONATED = 3281;","after":"uint256 constant TOKEN_LIMIT_NOTDONATED = 3281;","contract":"BlootElvesNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 TOKEN_LIMIT_DONATED_001 = 4789;","after":"uint256 constant TOKEN_LIMIT_DONATED_001 = 4789;","contract":"BlootElvesNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 TOKEN_LIMIT_DONATED_004 = 4962;","after":"uint256 constant TOKEN_LIMIT_DONATED_004 = 4962;","contract":"BlootElvesNFT","time":1}]}
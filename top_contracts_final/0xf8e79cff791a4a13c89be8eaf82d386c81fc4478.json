{"time":222,"results":[{"type":"external-function ","before":"function createLoan(\r\n        uint16[] calldata _loanRules, // tenor, LTV, interest, 10000 - 100% to use array - avoid stack too deep\r\n        address[] calldata _currencies, // _loanCurrency, _collateralCurrency, address(0) is native coin\r\n        address[] calldata nftAddressArray,\r\n        uint256[] calldata _amounts, // _fundAmount, _collateralAmount _fundAmount is the amount of _collateral in _loanAsset such as ETH\r\n        uint256[] calldata nftTokenIdArray,\r\n        TribeOneHelper.TokenType[] memory nftTokenTypeArray\r\n    ) external payable {\r\n        require(_loanRules.length == 3 && _amounts.length == 2 && _currencies.length == 2, \"TribeOne: Invalid parameter\");\r\n        uint16 tenor = _loanRules[0];\r\n        uint16 LTV = _loanRules[1];\r\n        uint16 interest = _loanRules[2];\r\n        require(_loanRules[1] > 0, \"TribeOne: LTV should not be ZERO\");\r\n        require(_loanRules[0] > 0, \"TribeOne: Loan must have at least 1 installment\");\r\n        require(nftAddressArray.length > 0, \"TribeOne: Loan must have at least 1 NFT\");\r\n        address _collateralCurrency = _currencies[1];\r\n        address _loanCurrency = _currencies[0];\r\n        require(IAssetManager(assetManager).isAvailableLoanAsset(_loanCurrency), \"TribeOne: Loan asset is not available\");\r\n        require(\r\n            IAssetManager(assetManager).isAvailableCollateralAsset(_collateralCurrency),\r\n            \"TribeOne: Collateral asset is not available\"\r\n        );\r\n\r\n        require(\r\n            nftAddressArray.length == nftTokenIdArray.length && nftTokenIdArray.length == nftTokenTypeArray.length,\r\n            \"TribeOne: NFT provided informations are missing or incomplete\"\r\n        );\r\n\r\n        loanIds.increment();\r\n        uint256 loanID = loanIds.current();\r\n\r\n        // Transfer Collateral from sender to contract\r\n        uint256 _fundAmount = _amounts[0];\r\n        uint256 _collateralAmount = _amounts[1];\r\n\r\n        // Transfer collateral to TribeOne\r\n        if (_collateralCurrency == address(0)) {\r\n            require(msg.value >= _collateralAmount, \"TribeOne: Insufficient collateral amount\");\r\n            if (msg.value > _collateralAmount) {\r\n                TribeOneHelper.safeTransferETH(msg.sender, msg.value - _collateralAmount);\r\n            }\r\n        } else {\r\n            require(msg.value == 0, \"TribeOne: ERC20 collateral\");\r\n            TribeOneHelper.safeTransferFrom(_collateralCurrency, _msgSender(), address(this), _collateralAmount);\r\n        }\r\n\r\n        loans[loanID].nftAddressArray = nftAddressArray;\r\n        loans[loanID].borrower = _msgSender();\r\n        loans[loanID].loanAsset = Asset({currency: _loanCurrency, amount: 0});\r\n        loans[loanID].collateralAsset = Asset({currency: _collateralCurrency, amount: _collateralAmount});\r\n        loans[loanID].loanRules = LoanRules({tenor: tenor, LTV: LTV, interest: interest});\r\n        loans[loanID].nftTokenIdArray = nftTokenIdArray;\r\n        loans[loanID].fundAmount = _fundAmount;\r\n\r\n        loans[loanID].status = Status.LISTED;\r\n        loans[loanID].nftTokenTypeArray = nftTokenTypeArray;\r\n\r\n        emit LoanCreated(loanID, msg.sender);\r\n    }","after":"function createLoan(\r\n        uint16[] calldata _loanRules, // tenor, LTV, interest, 10000 - 100% to use array - avoid stack too deep\r\n        address[] calldata _currencies, // _loanCurrency, _collateralCurrency, address(0) is native coin\r\n        address[] calldata nftAddressArray,\r\n        uint256[] calldata _amounts, // _fundAmount, _collateralAmount _fundAmount is the amount of _collateral in _loanAsset such as ETH\r\n        uint256[] calldata nftTokenIdArray,\r\n        TribeOneHelper.TokenType[] calldata nftTokenTypeArray\r\n    ) external payable {\r\n        require(_loanRules.length == 3 && _amounts.length == 2 && _currencies.length == 2, \"TribeOne: Invalid parameter\");\r\n        uint16 tenor = _loanRules[0];\r\n        uint16 LTV = _loanRules[1];\r\n        uint16 interest = _loanRules[2];\r\n        require(_loanRules[1] > 0, \"TribeOne: LTV should not be ZERO\");\r\n        require(_loanRules[0] > 0, \"TribeOne: Loan must have at least 1 installment\");\r\n        require(nftAddressArray.length > 0, \"TribeOne: Loan must have at least 1 NFT\");\r\n        address _collateralCurrency = _currencies[1];\r\n        address _loanCurrency = _currencies[0];\r\n        require(IAssetManager(assetManager).isAvailableLoanAsset(_loanCurrency), \"TribeOne: Loan asset is not available\");\r\n        require(\r\n            IAssetManager(assetManager).isAvailableCollateralAsset(_collateralCurrency),\r\n            \"TribeOne: Collateral asset is not available\"\r\n        );\r\n\r\n        require(\r\n            nftAddressArray.length == nftTokenIdArray.length && nftTokenIdArray.length == nftTokenTypeArray.length,\r\n            \"TribeOne: NFT provided informations are missing or incomplete\"\r\n        );\r\n\r\n        loanIds.increment();\r\n        uint256 loanID = loanIds.current();\r\n\r\n        // Transfer Collateral from sender to contract\r\n        uint256 _fundAmount = _amounts[0];\r\n        uint256 _collateralAmount = _amounts[1];\r\n\r\n        // Transfer collateral to TribeOne\r\n        if (_collateralCurrency == address(0)) {\r\n            require(msg.value >= _collateralAmount, \"TribeOne: Insufficient collateral amount\");\r\n            if (msg.value > _collateralAmount) {\r\n                TribeOneHelper.safeTransferETH(msg.sender, msg.value - _collateralAmount);\r\n            }\r\n        } else {\r\n            require(msg.value == 0, \"TribeOne: ERC20 collateral\");\r\n            TribeOneHelper.safeTransferFrom(_collateralCurrency, _msgSender(), address(this), _collateralAmount);\r\n        }\r\n\r\n        loans[loanID].nftAddressArray = nftAddressArray;\r\n        loans[loanID].borrower = _msgSender();\r\n        loans[loanID].loanAsset = Asset({currency: _loanCurrency, amount: 0});\r\n        loans[loanID].collateralAsset = Asset({currency: _collateralCurrency, amount: _collateralAmount});\r\n        loans[loanID].loanRules = LoanRules({tenor: tenor, LTV: LTV, interest: interest});\r\n        loans[loanID].nftTokenIdArray = nftTokenIdArray;\r\n        loans[loanID].fundAmount = _fundAmount;\r\n\r\n        loans[loanID].status = Status.LISTED;\r\n        loans[loanID].nftTokenTypeArray = nftTokenTypeArray;\r\n\r\n        emit LoanCreated(loanID, msg.sender);\r\n    }","contract":"TribeOne","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"TribeOne","time":0},{"type":"external-function ","before":"function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }","after":"function onERC1155Received(address, address, uint256, uint256, bytes calldata) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }","contract":"TribeOne","time":0},{"type":"external-function ","before":"function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }","after":"function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }","contract":"TribeOne","time":0}]}
{"time":179,"results":[{"type":"external-function ","before":"function whitelist(address[] memory addresses, bool _val) public onlyOwner {\n        for (uint i; i < addresses.length; i++) {\n            isWhitelisted[addresses[i]] = _val;\n            emit Whitelist(addresses[i], _val);\n        }\n    }","after":"function whitelist(address[] calldata addresses, bool _val) public onlyOwner {\n        for (uint i; i < addresses.length; i++) {\n            isWhitelisted[addresses[i]] = _val;\n            emit Whitelist(addresses[i], _val);\n        }\n    }","contract":"LobsterBeachClub","time":0},{"type":"external-function ","before":"function reserveLobsters(address[] memory addresses) public onlyOwner {\n        for(uint i; i < addresses.length; i++) {\n            uint256 lobsterId = totalSupply();\n            _mint(addresses[i], lobsterId);\n            _setTokenURI(lobsterId, uint2str(lobsterId));\n        }\n        emit Minted(totalSupply());\n    }","after":"function reserveLobsters(address[] calldata addresses) public onlyOwner {\n        for(uint i; i < addresses.length; i++) {\n            uint256 lobsterId = totalSupply();\n            _mint(addresses[i], lobsterId);\n            _setTokenURI(lobsterId, uint2str(lobsterId));\n        }\n        emit Minted(totalSupply());\n    }","contract":"LobsterBeachClub","time":0},{"type":"external-function ","before":"function createPromoLobsters(uint256[] memory geneSequences, address[] memory addresses) public onlyOwner {\n        require(geneSequences.length == addresses.length, \"Argument lengths must be equal\");\n        for(uint i = 0; i < geneSequences.length; i++) {\n            uint256 lobsterId = totalSupply();\n            _mint(addresses[i], lobsterId);\n            _setTokenURI(lobsterId, uint2str(lobsterId));\n            promoLobster[lobsterId] = geneSequences[i];\n        }\n        emit Minted(totalSupply());\n    }","after":"function createPromoLobsters(uint256[] calldata geneSequences, address[] calldata addresses) public onlyOwner {\n        require(geneSequences.length == addresses.length, \"Argument lengths must be equal\");\n        for(uint i = 0; i < geneSequences.length; i++) {\n            uint256 lobsterId = totalSupply();\n            _mint(addresses[i], lobsterId);\n            _setTokenURI(lobsterId, uint2str(lobsterId));\n            promoLobster[lobsterId] = geneSequences[i];\n        }\n        emit Minted(totalSupply());\n    }","contract":"LobsterBeachClub","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) public onlyOwner {\n        baseURI = _baseURI;\n    }","after":"function setBaseURI(string calldata _baseURI) public onlyOwner {\n        baseURI = _baseURI;\n    }","contract":"LobsterBeachClub","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public maxSupply;","after":"uint256 public immutable maxSupply;","contract":"LobsterBeachClub","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"LobsterBeachClub","time":1},{"type":"immutable-restrict-modification ","before":"uint256 internal linkFee;","after":"uint256 internal immutable linkFee;","contract":"LobsterBeachClub","time":1},{"type":"immutable-restrict-modification ","before":"uint16 internal maxPurchase;","after":"uint16 internal immutable maxPurchase;","contract":"LobsterBeachClub","time":1},{"type":"immutable-restrict-modification ","before":"uint256 internal maxPresaleSupply;","after":"uint256 internal immutable maxPresaleSupply;","contract":"LobsterBeachClub","time":1}]}
{"time":147,"results":[{"type":"state-data-arrangement ","before":"\nbytes32 public constant SIGN_MINT_TYPEHASH = keccak256(\"Mint(uint256 quantity,uint256 value,address account)\");\nuint8 public constant WL_FAST = 1;\nuint8 public constant WL_TURBO = 2;\nuint8 public constant WL_SUPERSONIC = 3;\nuint256 public constant MAX_FREE = 200;\nuint256 public constant MAX_MINT_PER_WALLET = 3;\nuint256 public startTimestamp;\nuint256 public startPublicTimestamp;\nuint256 public endTimestamp;\nuint256 public freeTokens;\nuint256 public immutable creator1Fee;\nuint256 public immutable creator2Fee;\nuint256 public immutable creator3Fee;\nuint256 public immutable creator4Fee;\naddress public immutable creator1;\naddress public immutable creator2;\naddress public immutable creator3;\naddress public immutable creator4;\nmapping(uint256 => uint256) private _tokenIdsCache;\nmapping(address => uint256) private _userMints;","after":"bytes32 public constant SIGN_MINT_TYPEHASH = keccak256(\"Mint(uint256 quantity,uint256 value,address account)\");\nuint256 public constant MAX_FREE = 200;\nuint256 public constant MAX_MINT_PER_WALLET = 3;\nuint256 public startTimestamp;\nuint256 public startPublicTimestamp;\nuint256 public endTimestamp;\nuint256 public freeTokens;\nuint256 public immutable creator1Fee;\nuint256 public immutable creator2Fee;\nuint256 public immutable creator3Fee;\nuint256 public immutable creator4Fee;\nmapping(uint256 => uint256) private _tokenIdsCache;\nmapping(address => uint256) private _userMints;\naddress public immutable creator1;\naddress public immutable creator2;\naddress public immutable creator3;\naddress public immutable creator4;\nuint8 public constant WL_FAST = 1;\nuint8 public constant WL_TURBO = 2;\nuint8 public constant WL_SUPERSONIC = 3;\n","contract":"MetaPopitMinter","time":1},{"type":"external-function ","before":"function mint(\n        uint256 _quantity,\n        uint8 _wl,\n        bytes memory _signature\n    ) external payable notContract nonReentrant whenValidQuantity(_quantity) whenClaimable whenMintOpened(_wl) {\n        require(_userMints[_msgSender()].add(_quantity) <= MAX_MINT_PER_WALLET, \"Above quantity allowed\");\n\n        uint256 value = unitPrice.mul(_quantity);\n        if (_wl == WL_SUPERSONIC) {\n            value = value.mul(800).div(1000); // 20% discount\n        } else if (_wl == WL_TURBO) {\n            value = value.mul(900).div(1000); // 10% discount\n        }\n\n        require(isAuthorized(_hashMintPayload(_quantity, value, _msgSender()), _signature), \"Not signed by authorizer\");\n        require(msg.value >= value, \"Payment failed\");\n\n        _mint(_quantity, _msgSender());\n        _userMints[_msgSender()] = _userMints[_msgSender()] + _quantity;\n    }","after":"function mint(\n        uint256 _quantity,\n        uint8 _wl,\n        bytes calldata _signature\n    ) external payable notContract nonReentrant whenValidQuantity(_quantity) whenClaimable whenMintOpened(_wl) {\n        require(_userMints[_msgSender()].add(_quantity) <= MAX_MINT_PER_WALLET, \"Above quantity allowed\");\n\n        uint256 value = unitPrice.mul(_quantity);\n        if (_wl == WL_SUPERSONIC) {\n            value = value.mul(800).div(1000); // 20% discount\n        } else if (_wl == WL_TURBO) {\n            value = value.mul(900).div(1000); // 10% discount\n        }\n\n        require(isAuthorized(_hashMintPayload(_quantity, value, _msgSender()), _signature), \"Not signed by authorizer\");\n        require(msg.value >= value, \"Payment failed\");\n\n        _mint(_quantity, _msgSender());\n        _userMints[_msgSender()] = _userMints[_msgSender()] + _quantity;\n    }","contract":"MetaPopitMinter","time":0}]}
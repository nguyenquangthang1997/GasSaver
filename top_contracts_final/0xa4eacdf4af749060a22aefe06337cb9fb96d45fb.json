{"time":158,"results":[{"type":"state-data-arrangement ","before":"\nbytes32 public constant WHITELIST_TYPEHASH =\n        keccak256(\"Whitelist(address buyer,uint256 signedQty)\");\naddress public whitelistSigner;\nuint256 public constant TOTAL_MAX_QTY = 7777;\nuint256 public constant GIFT_MAX_QTY = 77;\nuint256 public constant PRESALES_MAX_QTY = 3333;\nuint256 public constant PRESALES_MAX_QTY_PER_MINTER = 3;\nuint256 public constant PUBLIC_SALES_MAX_QTY_PER_TRANSACTION = 5;\nuint256 public constant PUBLIC_SALES_MAX_QTY_PER_MINTER = 10;\nuint256 public constant PUBLIC_SALES_MAX_QTY = TOTAL_MAX_QTY - GIFT_MAX_QTY;\nuint256 public constant PRESALES_PRICE = 0.05 ether;\nuint256 public constant PUBLIC_SALES_PRICE = 0.06 ether;\nstring private _contractURI;\nstring private _tokenBaseURI;\nmapping(address => uint256) public presalesMinterToTokenQty;\nmapping(address => uint256) public publicSalesMinterToTokenQty;\nuint256 public presalesMintedQty = 0;\nuint256 public publicSalesMintedQty = 0;\nuint256 public giftedQty = 0;\nbool public isPresalesActivated;\nbool public isPublicSalesActivated;","after":"bytes32 public constant WHITELIST_TYPEHASH =\n        keccak256(\"Whitelist(address buyer,uint256 signedQty)\");\nuint256 public constant TOTAL_MAX_QTY = 7777;\nuint256 public constant GIFT_MAX_QTY = 77;\nuint256 public constant PRESALES_MAX_QTY = 3333;\nuint256 public constant PRESALES_MAX_QTY_PER_MINTER = 3;\nuint256 public constant PUBLIC_SALES_MAX_QTY_PER_TRANSACTION = 5;\nuint256 public constant PUBLIC_SALES_MAX_QTY_PER_MINTER = 10;\nuint256 public constant PUBLIC_SALES_MAX_QTY = TOTAL_MAX_QTY - GIFT_MAX_QTY;\nuint256 public constant PRESALES_PRICE = 0.05 ether;\nuint256 public constant PUBLIC_SALES_PRICE = 0.06 ether;\nstring private _contractURI;\nstring private _tokenBaseURI;\nmapping(address => uint256) public presalesMinterToTokenQty;\nmapping(address => uint256) public publicSalesMinterToTokenQty;\nuint256 public presalesMintedQty = 0;\nuint256 public publicSalesMintedQty = 0;\nuint256 public giftedQty = 0;\naddress public whitelistSigner;\nbool public isPresalesActivated;\nbool public isPublicSalesActivated;\n","contract":"SharkOutlawSquad","time":0},{"type":"external-function ","before":"function presalesMint(\n        uint256 _mintQty,\n        uint256 _signedQty,\n        bytes memory _signature\n    ) external payable {\n        require(\n            totalSupply() + _mintQty <= TOTAL_MAX_QTY,\n            \"Exceed total max limit\"\n        );\n        require(isPresalesActivated, \"Presales is closed\");\n        require(\n            getSigner(msg.sender, _signedQty, _signature) == whitelistSigner,\n            \"Invalid signature\"\n        );\n        require(\n            presalesMintedQty + _mintQty <= PRESALES_MAX_QTY,\n            \"Exceed presales max limit\"\n        );\n        require(\n            presalesMinterToTokenQty[msg.sender] + _mintQty <=\n                _signedQty,\n            \"Exceed presales signed quantity\"\n        );\n        require(\n            presalesMinterToTokenQty[msg.sender] + _mintQty <=\n                PRESALES_MAX_QTY_PER_MINTER,\n            \"Exceed presales max quantity per minter\"\n        );\n        require(msg.value >= PRESALES_PRICE * _mintQty, \"Insufficient ETH\");\n\n        presalesMinterToTokenQty[msg.sender] += _mintQty;\n\n        for (uint256 i = 0; i < _mintQty; i++) {\n            presalesMintedQty++;\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n    }","after":"function presalesMint(\n        uint256 _mintQty,\n        uint256 _signedQty,\n        bytes calldata _signature\n    ) external payable {\n        require(\n            totalSupply() + _mintQty <= TOTAL_MAX_QTY,\n            \"Exceed total max limit\"\n        );\n        require(isPresalesActivated, \"Presales is closed\");\n        require(\n            getSigner(msg.sender, _signedQty, _signature) == whitelistSigner,\n            \"Invalid signature\"\n        );\n        require(\n            presalesMintedQty + _mintQty <= PRESALES_MAX_QTY,\n            \"Exceed presales max limit\"\n        );\n        require(\n            presalesMinterToTokenQty[msg.sender] + _mintQty <=\n                _signedQty,\n            \"Exceed presales signed quantity\"\n        );\n        require(\n            presalesMinterToTokenQty[msg.sender] + _mintQty <=\n                PRESALES_MAX_QTY_PER_MINTER,\n            \"Exceed presales max quantity per minter\"\n        );\n        require(msg.value >= PRESALES_PRICE * _mintQty, \"Insufficient ETH\");\n\n        presalesMinterToTokenQty[msg.sender] += _mintQty;\n\n        for (uint256 i = 0; i < _mintQty; i++) {\n            presalesMintedQty++;\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n    }","contract":"SharkOutlawSquad","time":0}]}
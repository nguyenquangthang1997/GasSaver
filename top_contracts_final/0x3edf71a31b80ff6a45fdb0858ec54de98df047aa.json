{"time":204,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nmapping (address => mapping(uint256 => uint256)) internal balances;\nmapping (address => mapping(address => bool)) internal operators;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;","after":"mapping (address => mapping(uint256 => uint256)) internal balances;\nmapping (address => mapping(address => bool)) internal operators;\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n","contract":"ERC1155","time":0},{"type":"external-function ","before":"function setBaseMetadataURI(\n    string memory _newBaseMetadataURI\n  ) public onlyAdmin {\n    _setBaseMetadataURI(_newBaseMetadataURI);\n  }","after":"function setBaseMetadataURI(\n    string calldata _newBaseMetadataURI\n  ) public onlyAdmin {\n    _setBaseMetadataURI(_newBaseMetadataURI);\n  }","contract":"BAE","time":0},{"type":"external-function ","before":"function setCreator(\n    address _to,\n    uint256[] memory _ids\n  ) public {\n    require(_to != address(0), \"ERC1155Tradable#setCreator: INVALID_ADDRESS.\");\n    for (uint256 i = 0; i < _ids.length; i++) {\n      uint256 id = _ids[i];\n      _setCreator(_to, id);\n    }\n  }","after":"function setCreator(\n    address _to,\n    uint256[] calldata _ids\n  ) public {\n    require(_to != address(0), \"ERC1155Tradable#setCreator: INVALID_ADDRESS.\");\n    for (uint256 i = 0; i < _ids.length; i++) {\n      uint256 id = _ids[i];\n      _setCreator(_to, id);\n    }\n  }","contract":"BAE","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\n    public\n  {\n    // Requirements\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\n    require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\n\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n  }","after":"function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data)\n    public\n  {\n    // Requirements\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\n    require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\n\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n  }","contract":"BAE","time":0},{"type":"constant-restrict-modification  ","before":"address oldContract = 0x677D8FE828Fd7143FF3CeE5883b7fC81e7c2de60;","after":"address constant oldContract = 0x677D8FE828Fd7143FF3CeE5883b7fC81e7c2de60;","contract":"BAE","time":0}]}
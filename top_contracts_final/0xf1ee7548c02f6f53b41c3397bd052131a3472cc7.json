{"time":125,"results":[{"type":"state-data-arrangement ","before":"\naddress public constant winterAddress = 0xC8BcbE0E8ae36D8f9238cd320ef6dE88784B1734;\naddress public constant summerAddress = 0xE5Ba25f22A20a22fb47DADF137f33fE2E9AB22AC;\nuint256 public discountPrice = 0.02 ether;\nuint256 public fullPrice = 0.05 ether;\nuint256 public constant MAX_BEARS = 10000;\nuint256 public constant MAX_BEARS_PER_MINT = 20;\nstring private baseURI;\nbool public isDiscountSaleActive = false;\nbool public isPresaleActive = false;\nbool public isSaleActive = false;\nmapping(uint256 => bool) public claimed;\nmapping(address => bool) private presaleList;","after":"uint256 public discountPrice = 0.02 ether;\nuint256 public fullPrice = 0.05 ether;\nuint256 public constant MAX_BEARS = 10000;\nuint256 public constant MAX_BEARS_PER_MINT = 20;\nstring private baseURI;\nmapping(uint256 => bool) public claimed;\nmapping(address => bool) private presaleList;\naddress public constant winterAddress = 0xC8BcbE0E8ae36D8f9238cd320ef6dE88784B1734;\naddress public constant summerAddress = 0xE5Ba25f22A20a22fb47DADF137f33fE2E9AB22AC;\nbool public isDiscountSaleActive = false;\nbool public isPresaleActive = false;\nbool public isSaleActive = false;\n","contract":"TDBears","time":0},{"type":"external-function ","before":"function discountSaleMint(uint256[] memory tokenIds) public payable {\n        uint256 totalSupply = totalSupply();\n\n        require(isDiscountSaleActive, \"Discount sale is not active\" );\n        require(msg.value >= tokenIds.length * discountPrice, \"Ether value sent is not correct\");\n        require(tokenIds.length <= MAX_BEARS_PER_MINT, \"Exceeds maximum bears you can purchase in a single transaction\");\n        require(totalSupply + tokenIds.length <= MAX_BEARS, \"Exceeds maximum bears available for purchase\");\n        \n        for(uint256 i = 0; i < tokenIds.length; i++) {\n            require(!claimed[tokenIds[i]]);\n            require(\n                ERC721(winterAddress).ownerOf(tokenIds[i]) == msg.sender,\n                \"Not owner of Winter Bear\"\n            );\n            require(\n                ERC721(summerAddress).ownerOf(tokenIds[i]) == msg.sender,\n                \"Not owner of Summer Bear\"\n            );\n\n            claimed[tokenIds[i]] = true;\n            _safeMint(msg.sender, totalSupply + i);\n        }\n    }","after":"function discountSaleMint(uint256[] calldata tokenIds) public payable {\n        uint256 totalSupply = totalSupply();\n\n        require(isDiscountSaleActive, \"Discount sale is not active\" );\n        require(msg.value >= tokenIds.length * discountPrice, \"Ether value sent is not correct\");\n        require(tokenIds.length <= MAX_BEARS_PER_MINT, \"Exceeds maximum bears you can purchase in a single transaction\");\n        require(totalSupply + tokenIds.length <= MAX_BEARS, \"Exceeds maximum bears available for purchase\");\n        \n        for(uint256 i = 0; i < tokenIds.length; i++) {\n            require(!claimed[tokenIds[i]]);\n            require(\n                ERC721(winterAddress).ownerOf(tokenIds[i]) == msg.sender,\n                \"Not owner of Winter Bear\"\n            );\n            require(\n                ERC721(summerAddress).ownerOf(tokenIds[i]) == msg.sender,\n                \"Not owner of Summer Bear\"\n            );\n\n            claimed[tokenIds[i]] = true;\n            _safeMint(msg.sender, totalSupply + i);\n        }\n    }","contract":"TDBears","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _uri) external onlyOwner {\n        baseURI = _uri;\n    }","after":"function setBaseUri(string calldata _uri) external onlyOwner {\n        baseURI = _uri;\n    }","contract":"TDBears","time":0},{"type":"external-function ","before":"function addToPresaleList(address[] memory _wallets) public onlyOwner {\n        for(uint i; i < _wallets.length; i++)\n            presaleList[_wallets[i]] = true;\n    }","after":"function addToPresaleList(address[] calldata _wallets) public onlyOwner {\n        for(uint i; i < _wallets.length; i++)\n            presaleList[_wallets[i]] = true;\n    }","contract":"TDBears","time":0},{"type":"external-function ","before":"function removeFromPresaleList(address[] memory _wallets) public onlyOwner {\n        for(uint i; i < _wallets.length; i++)\n            presaleList[_wallets[i]] = false;\n    }","after":"function removeFromPresaleList(address[] calldata _wallets) public onlyOwner {\n        for(uint i; i < _wallets.length; i++)\n            presaleList[_wallets[i]] = false;\n    }","contract":"TDBears","time":0}]}
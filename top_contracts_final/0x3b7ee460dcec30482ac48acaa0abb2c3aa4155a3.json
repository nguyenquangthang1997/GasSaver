{"time":199,"results":[{"type":"external-function ","before":"function nextBatch(string memory hash)\n        public  \n    {\n        require(hasRole(MOST_SOBER_DRIVERS, msg.sender), \"No permission\");\n\n        // there will be no next batch if this current one doesn't sell out\n        uint256 batchMinted = _batchIdCounter.current();\n        require(batchMinted == _numPerBatch, \"Not all sold\");\n\n        // need to be sold out in a week [see _mintyFresh()], then have a 1 day buffer to start next batch\n        uint256 batchWithinDays = _batchDurationDays + 1;\n        require (block.timestamp <= _lastBatchDate + batchWithinDays * 1 days, \"Did not sell out in time\");\n\n        _batchNum.increment();\n        _batchIdCounter.reset();\n        _lastBatchDate = block.timestamp;\n        _baseHash = hash;\n    }","after":"function nextBatch(string calldata hash)\n        public  \n    {\n        require(hasRole(MOST_SOBER_DRIVERS, msg.sender), \"No permission\");\n\n        // there will be no next batch if this current one doesn't sell out\n        uint256 batchMinted = _batchIdCounter.current();\n        require(batchMinted == _numPerBatch, \"Not all sold\");\n\n        // need to be sold out in a week [see _mintyFresh()], then have a 1 day buffer to start next batch\n        uint256 batchWithinDays = _batchDurationDays + 1;\n        require (block.timestamp <= _lastBatchDate + batchWithinDays * 1 days, \"Did not sell out in time\");\n\n        _batchNum.increment();\n        _batchIdCounter.reset();\n        _lastBatchDate = block.timestamp;\n        _baseHash = hash;\n    }","contract":"CryptoVanz","time":0},{"type":"external-function ","before":"function driverMint(address[] memory to) \n        public \n    {\n        // Owner/driver can mint for giveaways and airdrops\n\n        require(hasRole(MOST_SOBER_DRIVERS, msg.sender), \"driverMint: no permission\");\n\n        uint256 num = to.length;\n        uint256 batchId = _batchIdCounter.current();\n\n        require(num > 0, \"No addresses received\");\n        require((num + batchId) <= _numPerBatch, \"Exceeds supply\");\n\n        for(uint16 i; i < to.length; i++) {\n            _mintyFresh(to[i]);\n        }\n    }","after":"function driverMint(address[] calldata to) \n        public \n    {\n        // Owner/driver can mint for giveaways and airdrops\n\n        require(hasRole(MOST_SOBER_DRIVERS, msg.sender), \"driverMint: no permission\");\n\n        uint256 num = to.length;\n        uint256 batchId = _batchIdCounter.current();\n\n        require(num > 0, \"No addresses received\");\n        require((num + batchId) <= _numPerBatch, \"Exceeds supply\");\n\n        for(uint16 i; i < to.length; i++) {\n            _mintyFresh(to[i]);\n        }\n    }","contract":"CryptoVanz","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private _numPerBatch = 222;","after":"uint256 private constant _numPerBatch = 222;","contract":"CryptoVanz","time":2},{"type":"constant-restrict-modification  ","before":"uint private _batchDurationDays = 7;","after":"uint private constant _batchDurationDays = 7;","contract":"CryptoVanz","time":2},{"type":"constant-restrict-modification  ","before":"uint256 private _priceMultiplier = 10000000000000000;","after":"uint256 private constant _priceMultiplier = 10000000000000000;","contract":"CryptoVanz","time":2}]}
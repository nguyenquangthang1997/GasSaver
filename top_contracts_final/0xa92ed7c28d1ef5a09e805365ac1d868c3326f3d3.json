{"time":147,"results":[{"type":"external-function ","before":"function mint(address _to, uint256 _projectId, bytes memory signedParams, string memory params, string memory nonce) external payable returns (uint256 _tokenId) {\n        require(projects[_projectId].active || isAdmin[msg.sender], \"Project not enabled.\");\n\n        require(projects[_projectId].invocations.add(1) <= projects[_projectId].maxInvocations, \"Must not exceed max invocations\");\n        require(msg.value >= projectIdToPricePerTokenInWei[_projectId], \"Not enough ether.\");\n\n        require(!projects[_projectId].seenNonces[nonce]);\n        require(isSignedMint(signedParams, params, nonce), \"Invalid signature.\");\n\n        projects[_projectId].seenNonces[nonce] = true;\n\n        uint256 tokenId = _mintToken(_to, _projectId, params);\n        return tokenId;\n    }","after":"function mint(address _to, uint256 _projectId, bytes calldata signedParams, string calldata params, string calldata nonce) external payable returns (uint256 _tokenId) {\n        require(projects[_projectId].active || isAdmin[msg.sender], \"Project not enabled.\");\n\n        require(projects[_projectId].invocations.add(1) <= projects[_projectId].maxInvocations, \"Must not exceed max invocations\");\n        require(msg.value >= projectIdToPricePerTokenInWei[_projectId], \"Not enough ether.\");\n\n        require(!projects[_projectId].seenNonces[nonce]);\n        require(isSignedMint(signedParams, params, nonce), \"Invalid signature.\");\n\n        projects[_projectId].seenNonces[nonce] = true;\n\n        uint256 tokenId = _mintToken(_to, _projectId, params);\n        return tokenId;\n    }","contract":"ForeverRugs","time":0},{"type":"external-function ","before":"function addProject(string memory _projectName, uint256 _pricePerTokenInWei, uint256 maxInvocations) public onlyAdmin {\n        uint256 projectId = nextProjectId;\n        projects[projectId].name = _projectName;\n        projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;\n        projects[projectId].maxInvocations = maxInvocations;\n        projects[projectId].active = false;\n        projects[projectId].useIpfs = false;\n        nextProjectId = nextProjectId.add(1);\n    }","after":"function addProject(string calldata _projectName, uint256 _pricePerTokenInWei, uint256 maxInvocations) public onlyAdmin {\n        uint256 projectId = nextProjectId;\n        projects[projectId].name = _projectName;\n        projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;\n        projects[projectId].maxInvocations = maxInvocations;\n        projects[projectId].active = false;\n        projects[projectId].useIpfs = false;\n        nextProjectId = nextProjectId.add(1);\n    }","contract":"ForeverRugs","time":0},{"type":"external-function ","before":"function updateProjectName(uint256 _projectId, string memory _projectName) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].name = _projectName;\n    }","after":"function updateProjectName(uint256 _projectId, string calldata _projectName) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].name = _projectName;\n    }","contract":"ForeverRugs","time":0},{"type":"external-function ","before":"function updateProjectArtistName(uint256 _projectId, string memory _projectArtistName) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].artist = _projectArtistName;\n    }","after":"function updateProjectArtistName(uint256 _projectId, string calldata _projectArtistName) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].artist = _projectArtistName;\n    }","contract":"ForeverRugs","time":0},{"type":"external-function ","before":"function updateProjectDescription(uint256 _projectId, string memory _projectDescription) onlyAdmin public {\n        projects[_projectId].description = _projectDescription;\n    }","after":"function updateProjectDescription(uint256 _projectId, string calldata _projectDescription) onlyAdmin public {\n        projects[_projectId].description = _projectDescription;\n    }","contract":"ForeverRugs","time":0},{"type":"external-function ","before":"function updateProjectWebsite(uint256 _projectId, string memory _projectWebsite) onlyAdmin public {\n        projects[_projectId].website = _projectWebsite;\n    }","after":"function updateProjectWebsite(uint256 _projectId, string calldata _projectWebsite) onlyAdmin public {\n        projects[_projectId].website = _projectWebsite;\n    }","contract":"ForeverRugs","time":0},{"type":"external-function ","before":"function updateProjectBaseURI(uint256 _projectId, string memory _newBaseURI) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].projectBaseURI = _newBaseURI;\n    }","after":"function updateProjectBaseURI(uint256 _projectId, string calldata _newBaseURI) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].projectBaseURI = _newBaseURI;\n    }","contract":"ForeverRugs","time":0},{"type":"external-function ","before":"function updateProjectBaseIpfsURI(uint256 _projectId, string memory _projectBaseIpfsURI) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].projectBaseIpfsURI = _projectBaseIpfsURI;\n    }","after":"function updateProjectBaseIpfsURI(uint256 _projectId, string calldata _projectBaseIpfsURI) onlyUnlocked(_projectId) onlyAdmin public {\n        projects[_projectId].projectBaseIpfsURI = _projectBaseIpfsURI;\n    }","contract":"ForeverRugs","time":0},{"type":"immutable-restrict-modification ","before":"address public owner;","after":"address public immutable owner;","contract":"ForeverRugs","time":1}]}
{"time":196,"results":[{"type":"struct-data-arrangement ","before":"\nbool isCollectingOpen\nuint256 mintPrice\nuint256 maxPerTx\nstring uriHash\naddress redeemableAddress\nbytes32 merkle\nbool isWhitelistBased\nbool enforceBalance\naddress linkedAsset","after":"uint256 mintPrice\nuint256 maxPerTx\nstring uriHash\nbytes32 merkle\naddress redeemableAddress\naddress linkedAsset\nbool isCollectingOpen\nbool isWhitelistBased\nbool enforceBalance\n","contract":"BYOKey","time":0},{"type":"external-function ","before":"function createBYOKey(\n        bytes32 _merkle,\n        bool _isWhitelistBased,\n        bool _enforceBalance,\n        uint256  _mintPrice, \n        uint256 _maxPerTx,\n        string memory _uriHash,\n        address _redeemableAddress,\n        address _linkedAsset\n    ) external onlyOwner {\n        BYOKey storage byoKey = byoKeys[keyCounter.current()];\n        byoKey.merkle = _merkle;\n        byoKey.isCollectingOpen = false;\n        byoKey.isWhitelistBased = _isWhitelistBased;\n        byoKey.enforceBalance = _enforceBalance;\n        byoKey.mintPrice = _mintPrice;\n        byoKey.maxPerTx = _maxPerTx;\n        byoKey.uriHash = _uriHash;\n        byoKey.redeemableAddress = _redeemableAddress;\n        byoKey.linkedAsset = _linkedAsset;\n        keyCounter.increment();\n    }","after":"function createBYOKey(\n        bytes32 _merkle,\n        bool _isWhitelistBased,\n        bool _enforceBalance,\n        uint256  _mintPrice, \n        uint256 _maxPerTx,\n        string calldata _uriHash,\n        address _redeemableAddress,\n        address _linkedAsset\n    ) external onlyOwner {\n        BYOKey storage byoKey = byoKeys[keyCounter.current()];\n        byoKey.merkle = _merkle;\n        byoKey.isCollectingOpen = false;\n        byoKey.isWhitelistBased = _isWhitelistBased;\n        byoKey.enforceBalance = _enforceBalance;\n        byoKey.mintPrice = _mintPrice;\n        byoKey.maxPerTx = _maxPerTx;\n        byoKey.uriHash = _uriHash;\n        byoKey.redeemableAddress = _redeemableAddress;\n        byoKey.linkedAsset = _linkedAsset;\n        keyCounter.increment();\n    }","contract":"BYOKey","time":0},{"type":"external-function ","before":"function editBYOKey(\n        bytes32 _merkle,\n        bool _isWhitelistBased,\n        bool _enforceBalance,\n        uint256  _mintPrice, \n        uint256 _maxPerTx,\n        string memory _uriHash,\n        address _redeemableAddress,\n        address _linkedAsset,\n        uint256 _keyIdx\n    ) external onlyOwner {\n        byoKeys[_keyIdx].merkle = _merkle;\n        byoKeys[_keyIdx].isWhitelistBased = _isWhitelistBased;\n        byoKeys[_keyIdx].enforceBalance = _enforceBalance;\n        byoKeys[_keyIdx].mintPrice = _mintPrice; \n        byoKeys[_keyIdx].maxPerTx = _maxPerTx;    \n        byoKeys[_keyIdx].uriHash = _uriHash;    \n        byoKeys[_keyIdx].redeemableAddress = _redeemableAddress;  \n        byoKeys[_keyIdx].linkedAsset = _linkedAsset;\n    }","after":"function editBYOKey(\n        bytes32 _merkle,\n        bool _isWhitelistBased,\n        bool _enforceBalance,\n        uint256  _mintPrice, \n        uint256 _maxPerTx,\n        string calldata _uriHash,\n        address _redeemableAddress,\n        address _linkedAsset,\n        uint256 _keyIdx\n    ) external onlyOwner {\n        byoKeys[_keyIdx].merkle = _merkle;\n        byoKeys[_keyIdx].isWhitelistBased = _isWhitelistBased;\n        byoKeys[_keyIdx].enforceBalance = _enforceBalance;\n        byoKeys[_keyIdx].mintPrice = _mintPrice; \n        byoKeys[_keyIdx].maxPerTx = _maxPerTx;    \n        byoKeys[_keyIdx].uriHash = _uriHash;    \n        byoKeys[_keyIdx].redeemableAddress = _redeemableAddress;  \n        byoKeys[_keyIdx].linkedAsset = _linkedAsset;\n    }","contract":"BYOKey","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","contract":"BYOKey","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"BYOKey","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"BYOKey","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"BYOKey","time":0}]}
{"time":154,"results":[{"type":"external-function ","before":"function freeClaim(\n        bytes32[] memory proof,\n        uint256 maxClaimQuantity,\n        uint256 quantity\n    ) external payable callerIsUser {\n        require(\n            saleActivated && block.timestamp >= freeClaimStartTime && block.timestamp <= freeClaimEndTime,\n            \"not on sale\"\n        );\n        require(\n            _isWhitelisted(_freeClaimMerkleRoot, proof, msg.sender, maxClaimQuantity),\n            \"not in free claim whitelist\"\n        );\n        require(quantity > 0, \"quantity of tokens cannot be less than or equal to 0\");\n        _freeClaimWallets[msg.sender] += quantity;\n        require(_freeClaimWallets[msg.sender] <= maxClaimQuantity, \"quantity of tokens cannot exceed max mint\");\n        require(totalSupply() + quantity <= MAX_SUPPLY, \"the purchase would exceed max supply of tokens\");\n        _safeMint(msg.sender, quantity);\n    }","after":"function freeClaim(\n        bytes32[] calldata proof,\n        uint256 maxClaimQuantity,\n        uint256 quantity\n    ) external payable callerIsUser {\n        require(\n            saleActivated && block.timestamp >= freeClaimStartTime && block.timestamp <= freeClaimEndTime,\n            \"not on sale\"\n        );\n        require(\n            _isWhitelisted(_freeClaimMerkleRoot, proof, msg.sender, maxClaimQuantity),\n            \"not in free claim whitelist\"\n        );\n        require(quantity > 0, \"quantity of tokens cannot be less than or equal to 0\");\n        _freeClaimWallets[msg.sender] += quantity;\n        require(_freeClaimWallets[msg.sender] <= maxClaimQuantity, \"quantity of tokens cannot exceed max mint\");\n        require(totalSupply() + quantity <= MAX_SUPPLY, \"the purchase would exceed max supply of tokens\");\n        _safeMint(msg.sender, quantity);\n    }","contract":"CyberNinja","time":0},{"type":"external-function ","before":"function preSale(\n        bytes32[] memory proof,\n        uint256 maxClaimQuantity,\n        uint256 quantity\n    ) external payable callerIsUser {\n        require(\n            saleActivated && block.timestamp >= preSaleStartTime && block.timestamp <= preSaleEndTime,\n            \"not on sale\"\n        );\n        require(_isWhitelisted(_preSaleMerkleRoot, proof, msg.sender, maxClaimQuantity), \"not in pre-sale whitelist\");\n        require(quantity > 0, \"quantity of tokens cannot be less than or equal to 0\");\n        _preSaleWallets[msg.sender] += quantity;\n        require(_preSaleWallets[msg.sender] <= maxClaimQuantity, \"quantity of tokens cannot exceed max mint\");\n        require(totalSupply() + quantity <= MAX_SUPPLY, \"the purchase would exceed max supply of tokens\");\n        require(msg.value >= PRE_SALE_PRICE * quantity, \"insufficient ether value\");\n        _safeMint(msg.sender, quantity);\n    }","after":"function preSale(\n        bytes32[] calldata proof,\n        uint256 maxClaimQuantity,\n        uint256 quantity\n    ) external payable callerIsUser {\n        require(\n            saleActivated && block.timestamp >= preSaleStartTime && block.timestamp <= preSaleEndTime,\n            \"not on sale\"\n        );\n        require(_isWhitelisted(_preSaleMerkleRoot, proof, msg.sender, maxClaimQuantity), \"not in pre-sale whitelist\");\n        require(quantity > 0, \"quantity of tokens cannot be less than or equal to 0\");\n        _preSaleWallets[msg.sender] += quantity;\n        require(_preSaleWallets[msg.sender] <= maxClaimQuantity, \"quantity of tokens cannot exceed max mint\");\n        require(totalSupply() + quantity <= MAX_SUPPLY, \"the purchase would exceed max supply of tokens\");\n        require(msg.value >= PRE_SALE_PRICE * quantity, \"insufficient ether value\");\n        _safeMint(msg.sender, quantity);\n    }","contract":"CyberNinja","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _baseMetaURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseMetaURI = baseURI;\n    }","contract":"CyberNinja","time":0}]}
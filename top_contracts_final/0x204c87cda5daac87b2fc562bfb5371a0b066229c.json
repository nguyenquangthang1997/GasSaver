{"time":148,"results":[{"type":"external-function ","before":"  function liquidateArray(address account, uint256[] memory pids)\n        public\n        override\n        onlyLiquidation\n    {\n        require(address(account) != address(0), \"SatelliteCity: empty account\");\n\n        uint256 length = pids.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 pid = pids[i];\n            PoolInfo storage pool = poolInfo[pid];\n            if (pool._type == 1) {\n                IERC20 lpToken = pool.lpToken;\n                uint256 bal = lpToken.balanceOf(address(this));\n                lpToken.safeTransfer(account, bal);\n            }\n        }\n   ","after":"  function liquidateArray(address account, uint256[] calldata pids)\n        public\n        override\n        onlyLiquidation\n    {\n        require(address(account) != address(0), \"SatelliteCity: empty account\");\n\n        uint256 length = pids.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 pid = pids[i];\n            PoolInfo storage pool = poolInfo[pid];\n            if (pool._type == 1) {\n                IERC20 lpToken = pool.lpToken;\n                uint256 bal = lpToken.balanceOf(address(this));\n                lpToken.safeTransfer(account, bal);\n            }\n        }\n   ","contract":"BoringSatelliteChef","time":0},{"type":"immutable-restrict-modification ","before":"  uint256 public startBloc","after":"  uint256 public startBloc","contract":"BoringSatelliteChef","time":0}]}
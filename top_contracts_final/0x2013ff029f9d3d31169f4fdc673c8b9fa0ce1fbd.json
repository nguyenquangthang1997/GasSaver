{"time":141,"results":[{"type":"external-function ","before":"function setURI(string memory uri) external onlyOwner {\n        _setURI(uri);\n    }","after":"function setURI(string calldata uri) external onlyOwner {\n        _setURI(uri);\n    }","contract":"TinyPaws","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory accounts, uint[] memory amounts) external onlyOwner {\n        require(accounts.length == amounts.length, \"accounts.length == amounts.length\");\n        for (uint i = 0; i < accounts.length; i++) {\n            mintTokens(accounts[i], amounts[i]);\n        }\n    }","after":"function sendTokens(address[] calldata accounts, uint[] calldata amounts) external onlyOwner {\n        require(accounts.length == amounts.length, \"accounts.length == amounts.length\");\n        for (uint i = 0; i < accounts.length; i++) {\n            mintTokens(accounts[i], amounts[i]);\n        }\n    }","contract":"TinyPaws","time":0},{"type":"external-function ","before":"function airdrop(address[] memory accounts, uint[] memory amounts) external onlyOwner {\n        require(accounts.length == amounts.length, \"accounts.length == amounts.length\");\n        for (uint i = 0; i < accounts.length; i++) {\n            mintNFTs(accounts[i], amounts[i]);\n        }\n    }","after":"function airdrop(address[] calldata accounts, uint[] calldata amounts) external onlyOwner {\n        require(accounts.length == amounts.length, \"accounts.length == amounts.length\");\n        for (uint i = 0; i < accounts.length; i++) {\n            mintNFTs(accounts[i], amounts[i]);\n        }\n    }","contract":"TinyPaws","time":0},{"type":"external-function ","before":"function trade(uint[] memory tokens) external {\n        require(tradeNFTsMinted < tradeSupply, \"Trade tokens supply is out\");\n        require(tokens.length == 3, \"Provide 3 tokens to get 1 from trade supply\");\n        for (uint i = 0; i < tokens.length; i++) {\n            require(balanceOf(msg.sender, tokens[i]) > 0, \"You must own tokens to burn them\");\n            _burn(msg.sender, tokens[i], 1);\n        }\n        burnedNFTs += 3;\n        tradeNFTsMinted += 1;\n        _mint(msg.sender, TRADE_TOKEN_ID_OFFSET + tradeNFTsMinted, 1, \"\");\n    }","after":"function trade(uint[] calldata tokens) external {\n        require(tradeNFTsMinted < tradeSupply, \"Trade tokens supply is out\");\n        require(tokens.length == 3, \"Provide 3 tokens to get 1 from trade supply\");\n        for (uint i = 0; i < tokens.length; i++) {\n            require(balanceOf(msg.sender, tokens[i]) > 0, \"You must own tokens to burn them\");\n            _burn(msg.sender, tokens[i], 1);\n        }\n        burnedNFTs += 3;\n        tradeNFTsMinted += 1;\n        _mint(msg.sender, TRADE_TOKEN_ID_OFFSET + tradeNFTsMinted, 1, \"\");\n    }","contract":"TinyPaws","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"TinyPaws","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"TinyPaws","time":0}]}
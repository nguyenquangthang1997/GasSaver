{"time":99,"results":[{"type":"external-function ","before":"function mintPublicSpecific(string memory hash) public payable nonReentrant {\n        require(publicSaleIsActive, \"Public minting is currently closed.\");\n        _validateMintRequirements();\n        _safeMint(this.owner(), nextTokenId);\n        emit mint(nextTokenId, \"publicSpecificMint\", hash);\n        nextTokenId ++;\n        _setNextTokenId();\n    }","after":"function mintPublicSpecific(string calldata hash) public payable nonReentrant {\n        require(publicSaleIsActive, \"Public minting is currently closed.\");\n        _validateMintRequirements();\n        _safeMint(this.owner(), nextTokenId);\n        emit mint(nextTokenId, \"publicSpecificMint\", hash);\n        nextTokenId ++;\n        _setNextTokenId();\n    }","contract":"TheArchive","time":0},{"type":"external-function ","before":"function mintWhitelist(string memory hash, string memory password) public payable nonReentrant {\n        require(_validateWhitelistPassword(password), \"Your password is not valid.\");\n        _validateMintRequirements();\n        _safeMint(_msgSender(), nextTokenId);\n        emit mint(nextTokenId, \"whitelistMint\", hash);\n        nextTokenId ++;\n        _setNextTokenId();\n    }","after":"function mintWhitelist(string calldata hash, string calldata password) public payable nonReentrant {\n        require(_validateWhitelistPassword(password), \"Your password is not valid.\");\n        _validateMintRequirements();\n        _safeMint(_msgSender(), nextTokenId);\n        emit mint(nextTokenId, \"whitelistMint\", hash);\n        nextTokenId ++;\n        _setNextTokenId();\n    }","contract":"TheArchive","time":0},{"type":"external-function ","before":"function setWhitelistPasswords(bytes32[] memory _passwords) public onlyOwner {\n       for (uint i = 0; i < _passwords.length; i++)\n        {\n            whitelistPasswords[_passwords[i]] = true;\n        }\n    }","after":"function setWhitelistPasswords(bytes32[] calldata _passwords) public onlyOwner {\n       for (uint i = 0; i < _passwords.length; i++)\n        {\n            whitelistPasswords[_passwords[i]] = true;\n        }\n    }","contract":"TheArchive","time":0},{"type":"external-function ","before":"function setSpecialMintsIds(uint16[] memory _ids) public onlyOwner {\n       for (uint16 i = 0; i < _ids.length; i++)\n        {\n            specialTokensIds[_ids[i]] = true;\n        }\n    }","after":"function setSpecialMintsIds(uint16[] calldata _ids) public onlyOwner {\n       for (uint16 i = 0; i < _ids.length; i++)\n        {\n            specialTokensIds[_ids[i]] = true;\n        }\n    }","contract":"TheArchive","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) public onlyOwner {\n        baseURI = _baseURI;\n    }","after":"function setBaseURI(string calldata _baseURI) public onlyOwner {\n        baseURI = _baseURI;\n    }","contract":"TheArchive","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public maxTokenSupply;","after":"uint256 public immutable maxTokenSupply;","contract":"TheArchive","time":1}]}
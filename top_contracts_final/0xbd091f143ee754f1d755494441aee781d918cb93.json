{"time":656,"results":[{"type":"external-function ","before":"function setName(uint tokenId, string memory name) external ownsToken(tokenId) {\n        bytes memory b = bytes(name);\n        for (uint i = 0; i < b.length; ++i) {\n            uint8 char = uint8(b[i]);\n            //              0-9                         A-Z                         a-z                   space\n            if (!(char >= 48 && char <= 57 || char >= 65 && char <= 90 || char >= 97 && char <= 122 || char == 32)) {\n                revert(\"all chars must be [a-zA-Z0-9]\");\n            }\n        }\n        names[tokenId] = name;\n    }","after":"function setName(uint tokenId, string calldata name) external ownsToken(tokenId) {\n        bytes memory b = bytes(name);\n        for (uint i = 0; i < b.length; ++i) {\n            uint8 char = uint8(b[i]);\n            //              0-9                         A-Z                         a-z                   space\n            if (!(char >= 48 && char <= 57 || char >= 65 && char <= 90 || char >= 97 && char <= 122 || char == 32)) {\n                revert(\"all chars must be [a-zA-Z0-9]\");\n            }\n        }\n        names[tokenId] = name;\n    }","contract":"Metadata","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory addrs) external onlyAdmin {\n        for (uint i = 0; i < addrs.length; ++i) {\n            if (whitelist[addrs[i]] == 0) {\n                whitelist[addrs[i]] = WHITELIST_PER + 1000;\n            }\n        }\n    }","after":"function addToWhitelist(address[] calldata addrs) external onlyAdmin {\n        for (uint i = 0; i < addrs.length; ++i) {\n            if (whitelist[addrs[i]] == 0) {\n                whitelist[addrs[i]] = WHITELIST_PER + 1000;\n            }\n        }\n    }","contract":"Minter","time":0},{"type":"external-function ","before":"function giveawayMint(address[] memory winners) external onlyAdmin {\n        Rng memory rn = rng;\n\n        for (uint i = 0; i < winners.length; ++i) {\n            bitMonsters.createBitMonster(BitMonsterGen.generateUnspecialBitMonster(rn), winners[i]);\n        }\n\n        rng = rn;\n    }","after":"function giveawayMint(address[] calldata winners) external onlyAdmin {\n        Rng memory rn = rng;\n\n        for (uint i = 0; i < winners.length; ++i) {\n            bitMonsters.createBitMonster(BitMonsterGen.generateUnspecialBitMonster(rn), winners[i]);\n        }\n\n        rng = rn;\n    }","contract":"Minter","time":0},{"type":"immutable-restrict-modification ","before":"address payable private payHere;","after":"address payable private immutable payHere;","contract":"Minter","time":0},{"type":"external-function ","before":"    function createBitMonster(BitMonster memory bm, address owner) external override onlyAdmin {\n        uint total = totalSupply();\n        require(total <= SUPPLY_LIMIT, \"Supply limit reached\");\n\n        uint tid = total + 1;\n        _mint(owner, tid);\n        setBitMonster(tid, bm);\n\n        brainz.register(tid);\n ","after":"    function createBitMonster(BitMonster calldata bm, address owner) external override onlyAdmin {\n        uint total = totalSupply();\n        require(total <= SUPPLY_LIMIT, \"Supply limit reached\");\n\n        uint tid = total + 1;\n        _mint(owner, tid);\n        setBitMonster(tid, bm);\n\n        brainz.register(tid);\n ","contract":"BitMonsters","time":0}]}
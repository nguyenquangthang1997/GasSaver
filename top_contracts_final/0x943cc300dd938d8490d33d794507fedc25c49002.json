{"time":273,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\r\n                !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\r\n                (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":2816,"column":16},"end":{"line":2817,"column":46}},"contract":"UninterestedUnicorns","time":0},{"type":"external-function ","before":"function changeBio(uint256 _tokenId, string memory _bio) public virtual {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\r\n\r\n        CANDY_TOKEN.burn(_msgSender(), BIO_CHANGE_PRICE);\r\n\r\n        bio[_tokenId] = _bio;\r\n        emit BioChange(_tokenId, _bio);\r\n    }","after":"function changeBio(uint256 _tokenId, string calldata _bio) public virtual {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\r\n\r\n        CANDY_TOKEN.burn(_msgSender(), BIO_CHANGE_PRICE);\r\n\r\n        bio[_tokenId] = _bio;\r\n        emit BioChange(_tokenId, _bio);\r\n    }","contract":"UninterestedUnicorns","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) public virtual {\r\n        address owner = ownerOf(tokenId);\r\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\r\n        require(validateName(newName) == true, \"Not a valid new name\");\r\n        require(\r\n            sha256(bytes(newName)) != sha256(bytes(tokenName[tokenId])),\r\n            \"New name is same as the current one\"\r\n        );\r\n        require(isNameReserved(newName) == false, \"Name already reserved\");\r\n\r\n        CANDY_TOKEN.burn(_msgSender(), NAME_CHANGE_PRICE);\r\n\r\n        // If already named, dereserve old name\r\n        if (bytes(tokenName[tokenId]).length > 0) {\r\n            toggleReserveName(tokenName[tokenId], false);\r\n        }\r\n        toggleReserveName(newName, true);\r\n        tokenName[tokenId] = newName;\r\n        emit NameChange(tokenId, newName);\r\n    }","after":"function changeName(uint256 tokenId, string calldata newName) public virtual {\r\n        address owner = ownerOf(tokenId);\r\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\r\n        require(validateName(newName) == true, \"Not a valid new name\");\r\n        require(\r\n            sha256(bytes(newName)) != sha256(bytes(tokenName[tokenId])),\r\n            \"New name is same as the current one\"\r\n        );\r\n        require(isNameReserved(newName) == false, \"Name already reserved\");\r\n\r\n        CANDY_TOKEN.burn(_msgSender(), NAME_CHANGE_PRICE);\r\n\r\n        // If already named, dereserve old name\r\n        if (bytes(tokenName[tokenId]).length > 0) {\r\n            toggleReserveName(tokenName[tokenId], false);\r\n        }\r\n        toggleReserveName(newName, true);\r\n        tokenName[tokenId] = newName;\r\n        emit NameChange(tokenId, newName);\r\n    }","contract":"UninterestedUnicorns","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyAdmin {\r\n        PROVENANCE_HASH = provenanceHash;\r\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyAdmin {\r\n        PROVENANCE_HASH = provenanceHash;\r\n    }","contract":"UninterestedUnicorns","time":0},{"type":"external-function ","before":"function updateBaseURI(string memory newURI) public onlyAdmin {\r\n        _setBaseURI(newURI);\r\n        _toggleReveal();\r\n    }","after":"function updateBaseURI(string calldata newURI) public onlyAdmin {\r\n        _setBaseURI(newURI);\r\n        _toggleReveal();\r\n    }","contract":"UninterestedUnicorns","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public NAME_CHANGE_PRICE = 300 ether;","after":"uint256 public constant NAME_CHANGE_PRICE = 300 ether;","contract":"UninterestedUnicorns","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public BIO_CHANGE_PRICE = 100 ether;","after":"uint256 public constant BIO_CHANGE_PRICE = 100 ether;","contract":"UninterestedUnicorns","time":1},{"type":"immutable-restrict-modification ","before":"address payable public TREASURY;","after":"address payable public immutable TREASURY;","contract":"UninterestedUnicorns","time":1}]}
{"time":82,"results":[{"type":"external-function ","before":"function addUsersRewards(Reward[] memory rewards_) external onlyOwner {\n        for (uint256 i = 0; i < rewards_.length; i++) {\n            Reward memory r = rewards_[i];\n            totalRewards = totalRewards.add(r.amount).sub(rewards[r.user]);\n            rewards[r.user] = r.amount;\n        }\n    }","after":"function addUsersRewards(Reward[] calldata rewards_) external onlyOwner {\n        for (uint256 i = 0; i < rewards_.length; i++) {\n            Reward memory r = rewards_[i];\n            totalRewards = totalRewards.add(r.amount).sub(rewards[r.user]);\n            rewards[r.user] = r.amount;\n        }\n    }","contract":"RewardPayout","time":0},{"type":"external-function ","before":"function addUsersPayouts(Claim[] memory claims_) external onlyOwner {\n        for (uint256 i = 0; i < claims_.length; i++) {\n            Claim memory c = claims_[i];\n            require(\n                c.amount <= rewards[c.user],\n                \"RewardPayout: payout is higher than reward!\"\n            );\n            payouts[c.user] = c.amount;\n        }\n    }","after":"function addUsersPayouts(Claim[] calldata claims_) external onlyOwner {\n        for (uint256 i = 0; i < claims_.length; i++) {\n            Claim memory c = claims_[i];\n            require(\n                c.amount <= rewards[c.user],\n                \"RewardPayout: payout is higher than reward!\"\n            );\n            payouts[c.user] = c.amount;\n        }\n    }","contract":"RewardPayout","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public periodStart;","after":"uint256 public immutable periodStart;","contract":"RewardPayout","time":0}]}
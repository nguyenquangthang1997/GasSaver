{"time":234,"results":[{"type":"struct-data-arrangement ","before":"\naddress proposer\nmapping(address => uint256) forVotes\nmapping(address => uint256) againstVotes\nuint256 totalForVotes\nuint256 totalAgainstVotes\nuint256 quorumVotes\nuint256 endBlock\naddress[] targets\nuint256[] values\nstring[] signatures\nbytes[] calldatas\nbool executed","after":"mapping(address => uint256) forVotes\nmapping(address => uint256) againstVotes\nuint256 totalForVotes\nuint256 totalAgainstVotes\nuint256 quorumVotes\nuint256 endBlock\naddress[] targets\nuint256[] values\nstring[] signatures\nbytes[] calldatas\naddress proposer\nbool executed\n","contract":"IyVaren","time":0},{"type":"external-function ","before":"function onTokenTransfer(address sender, uint value, bytes memory) external override nonReentrant {                \n      require(value > 0, \"yVRN: ZERO\");\n      require(msg.sender == address(VAREN), 'yVRN: access denied');\n      _stake(sender, value);\n    }","after":"function onTokenTransfer(address sender, uint value, bytes calldata) external override nonReentrant {                \n      require(value > 0, \"yVRN: ZERO\");\n      require(msg.sender == address(VAREN), 'yVRN: access denied');\n      _stake(sender, value);\n    }","contract":"yVaren","time":0},{"type":"external-function ","before":"function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public override nonReentrant returns (uint256 id) {\n        require(!hasActiveProposal[msg.sender], \"yVRN: HAS_ACTIVE_PROPOSAL\");\n        require(\n            targets.length == values.length &&\n                targets.length == signatures.length &&\n                targets.length == calldatas.length,\n            \"yVRN: PARITY_MISMATCH\"\n        );\n        require(targets.length != 0, \"yVRN: NO_ACTIONS\");\n        require(targets.length <= MAX_OPERATIONS, \"yVRN: TOO_MANY_ACTIONS\");\n        require(\n            (VAREN.balanceOf(address(this)).mul(balanceOf(msg.sender))).div(\n                totalSupply()\n            ) >= minVarenForProposal,\n            \"yVRN: INSUFFICIENT_VAREN_FOR_PROPOSAL\"\n        );\n        uint256 endBlock = votingPeriodBlocks.add(block.number);\n        Proposal storage newProposal = proposals[proposalCount];\n        newProposal.proposer = msg.sender;\n        newProposal.endBlock = endBlock;\n        newProposal.targets = targets;\n        newProposal.values = values;\n        newProposal.signatures = signatures;\n        newProposal.calldatas = calldatas;\n        newProposal.totalForVotes = 0;\n        newProposal.totalAgainstVotes = 0;\n        newProposal.quorumVotes = VAREN.balanceOf(address(this)).mul(quorumPercent) / 1000000;\n        newProposal.executed = false;\n\n        hasActiveProposal[msg.sender] = true;\n        proposalCount = proposalCount.add(1);\n\n        emit ProposalCreated(\n            id,\n            msg.sender,\n            targets,\n            values,\n            signatures,\n            calldatas,\n            block.number,\n            endBlock,\n            description\n        );\n    }","after":"function propose(\n        address[] calldata targets,\n        uint256[] calldata values,\n        string[] calldata signatures,\n        bytes[] calldata calldatas,\n        string calldata description\n    ) public override nonReentrant returns (uint256 id) {\n        require(!hasActiveProposal[msg.sender], \"yVRN: HAS_ACTIVE_PROPOSAL\");\n        require(\n            targets.length == values.length &&\n                targets.length == signatures.length &&\n                targets.length == calldatas.length,\n            \"yVRN: PARITY_MISMATCH\"\n        );\n        require(targets.length != 0, \"yVRN: NO_ACTIONS\");\n        require(targets.length <= MAX_OPERATIONS, \"yVRN: TOO_MANY_ACTIONS\");\n        require(\n            (VAREN.balanceOf(address(this)).mul(balanceOf(msg.sender))).div(\n                totalSupply()\n            ) >= minVarenForProposal,\n            \"yVRN: INSUFFICIENT_VAREN_FOR_PROPOSAL\"\n        );\n        uint256 endBlock = votingPeriodBlocks.add(block.number);\n        Proposal storage newProposal = proposals[proposalCount];\n        newProposal.proposer = msg.sender;\n        newProposal.endBlock = endBlock;\n        newProposal.targets = targets;\n        newProposal.values = values;\n        newProposal.signatures = signatures;\n        newProposal.calldatas = calldatas;\n        newProposal.totalForVotes = 0;\n        newProposal.totalAgainstVotes = 0;\n        newProposal.quorumVotes = VAREN.balanceOf(address(this)).mul(quorumPercent) / 1000000;\n        newProposal.executed = false;\n\n        hasActiveProposal[msg.sender] = true;\n        proposalCount = proposalCount.add(1);\n\n        emit ProposalCreated(\n            id,\n            msg.sender,\n            targets,\n            values,\n            signatures,\n            calldatas,\n            block.number,\n            endBlock,\n            description\n        );\n    }","contract":"yVaren","time":0}]}
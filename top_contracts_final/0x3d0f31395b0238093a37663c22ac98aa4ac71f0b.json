{"time":166,"results":[{"type":"external-function ","before":"function mint(uint256 numberOfTokens, bytes memory goldenTicket)\n    public\n    payable\n    nonReentrant\n  {\n    if (startPresaleDate <= block.timestamp &&\n        startMintDate > block.timestamp) {\n      require(\n        numberOfTokens <= presaleMaxMint,\n        \"FMD: Minting Too Many Presale\"\n      );\n      validateTicket(goldenTicket);\n      useTicket(goldenTicket);\n    } else {\n      require(\n        startMintDate <= block.timestamp,\n        \"FMD: Sale Not Started\"\n      );\n      require(\n        numberOfTokens <= maxPurchaseCount,\n        \"FMD: Minting Too Many\"\n      );\n    }\n\n    require(\n      totalMinted + numberOfTokens <= maxSupply,\n      \"FMD: Sold Out\"\n    );\n\n    require(\n      msg.value >= numberOfTokens * mintPrice,\n      \"FMD: Insufficient Payment\"\n    );\n\n    for (uint256 i = 0; i < numberOfTokens; i++) {\n      totalMinted = totalMinted + 1;\n      _safeMint(msg.sender, totalMinted);\n    }\n  }","after":"function mint(uint256 numberOfTokens, bytes calldata goldenTicket)\n    public\n    payable\n    nonReentrant\n  {\n    if (startPresaleDate <= block.timestamp &&\n        startMintDate > block.timestamp) {\n      require(\n        numberOfTokens <= presaleMaxMint,\n        \"FMD: Minting Too Many Presale\"\n      );\n      validateTicket(goldenTicket);\n      useTicket(goldenTicket);\n    } else {\n      require(\n        startMintDate <= block.timestamp,\n        \"FMD: Sale Not Started\"\n      );\n      require(\n        numberOfTokens <= maxPurchaseCount,\n        \"FMD: Minting Too Many\"\n      );\n    }\n\n    require(\n      totalMinted + numberOfTokens <= maxSupply,\n      \"FMD: Sold Out\"\n    );\n\n    require(\n      msg.value >= numberOfTokens * mintPrice,\n      \"FMD: Insufficient Payment\"\n    );\n\n    for (uint256 i = 0; i < numberOfTokens; i++) {\n      totalMinted = totalMinted + 1;\n      _safeMint(msg.sender, totalMinted);\n    }\n  }","contract":"FoodmaskuDelectables","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseTokenURI) external onlyOwner {\n    baseTokenURI = _baseTokenURI;\n  }","after":"function setBaseURI(string calldata _baseTokenURI) external onlyOwner {\n    baseTokenURI = _baseTokenURI;\n  }","contract":"FoodmaskuDelectables","time":0},{"type":"external-function ","before":"function addBucket(uint256 min, uint256 max, string memory prefix) external onlyOwner {\n    require(min < max, \"FMD: Min must be less than Max\");\n    for (uint256 i = 0; i < buckets.length; i++) {\n      if (!buckets[i].deleted) {\n        require(min > buckets[i].max, \"FMD: Overlapping Bucket\");\n      }\n    }\n    buckets.push(TokenBucket(min, max, prefix, false));\n  }","after":"function addBucket(uint256 min, uint256 max, string calldata prefix) external onlyOwner {\n    require(min < max, \"FMD: Min must be less than Max\");\n    for (uint256 i = 0; i < buckets.length; i++) {\n      if (!buckets[i].deleted) {\n        require(min > buckets[i].max, \"FMD: Overlapping Bucket\");\n      }\n    }\n    buckets.push(TokenBucket(min, max, prefix, false));\n  }","contract":"FoodmaskuDelectables","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxPurchaseCount = 20;","after":"uint256 public constant maxPurchaseCount = 20;","contract":"FoodmaskuDelectables","time":0}]}
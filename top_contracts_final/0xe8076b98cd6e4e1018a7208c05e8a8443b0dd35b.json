{"time":737,"results":[{"type":"state-data-arrangement ","before":"\nuint16 private constant NULL_VALUE = 65535;\nuint256 private constant NUMBER_OF_TRAITS = 11;\nuint256 private constant NUMBER_OF_TYPES = 3;\nuint256 private constant TYPE1 = 0;\nuint256 private constant TYPE2 = 1;\nuint256 private constant TYPE3 = 2;\nuint16 constant MAX_RANGE = 100;\nuint16 constant MAX_SPEED = 99;\nuint16 private constant PROPS_INDEX = 2;\nuint16 private constant BACKGROUND_INDEX = 0;\nuint16 private constant TYPE_INDEX = 1;\nuint16 private constant ANCHOR_INDEX = 2;\nuint16 private constant HULL_INDEX = 3;\nuint16 private constant LIGHT_INDEX = 4;\nuint16 private constant BACK_INDEX = 5;\nuint16 private constant CABIN_INDEX = 6;\nuint16 private constant DECOR_INDEX = 7;\nuint16 private constant GRILL_INDEX = 8;\nuint16 private constant SPEED_INDEX = 9;\nuint16 private constant RANGE_INDEX = 10;\nuint16 private constant PROPS_ANCHOR = 0;\nuint16 private constant PROPS_HULL = 1;\nuint16 private constant PROPS_LIGHT = 2;\nuint16 private constant PROPS_BACK = 3;\nuint16 private constant PROPS_CABIN = 4;\nuint16 private constant PROPS_DECOR = 5;\nuint16 private constant PROPS_GRILL = 6;\nuint8 private constant BITMASK = 255;\nstring[NUMBER_OF_TRAITS] private traitNames;\nstring[][NUMBER_OF_TRAITS][NUMBER_OF_TYPES] private traitValues;\nuint16[] private cutoffsBackground;\nuint16[] private cutoffsType;\nuint16[][NUMBER_OF_TRAITS][NUMBER_OF_TYPES] private cutoffs;","after":"uint256 private constant NUMBER_OF_TRAITS = 11;\nuint256 private constant NUMBER_OF_TYPES = 3;\nuint256 private constant TYPE1 = 0;\nuint256 private constant TYPE2 = 1;\nuint256 private constant TYPE3 = 2;\nstring[NUMBER_OF_TRAITS] private traitNames;\nstring[][NUMBER_OF_TRAITS][NUMBER_OF_TYPES] private traitValues;\nuint16[] private cutoffsBackground;\nuint16[] private cutoffsType;\nuint16[][NUMBER_OF_TRAITS][NUMBER_OF_TYPES] private cutoffs;\nuint16 private constant NULL_VALUE = 65535;\nuint16 constant MAX_RANGE = 100;\nuint16 constant MAX_SPEED = 99;\nuint16 private constant PROPS_INDEX = 2;\nuint16 private constant BACKGROUND_INDEX = 0;\nuint16 private constant TYPE_INDEX = 1;\nuint16 private constant ANCHOR_INDEX = 2;\nuint16 private constant HULL_INDEX = 3;\nuint16 private constant LIGHT_INDEX = 4;\nuint16 private constant BACK_INDEX = 5;\nuint16 private constant CABIN_INDEX = 6;\nuint16 private constant DECOR_INDEX = 7;\nuint16 private constant GRILL_INDEX = 8;\nuint16 private constant SPEED_INDEX = 9;\nuint16 private constant RANGE_INDEX = 10;\nuint16 private constant PROPS_ANCHOR = 0;\nuint16 private constant PROPS_HULL = 1;\nuint16 private constant PROPS_LIGHT = 2;\nuint16 private constant PROPS_BACK = 3;\nuint16 private constant PROPS_CABIN = 4;\nuint16 private constant PROPS_DECOR = 5;\nuint16 private constant PROPS_GRILL = 6;\nuint8 private constant BITMASK = 255;\n","contract":"NftDescriptor","time":2},{"type":"external-function ","before":"function claim(uint256[] memory ogYachts)\n        external\n        onlyInClaimingPhase\n        returns (uint256)\n    {\n        for (uint256 i; i < ogYachts.length; i++) {\n            require(!_exists(ogYachts[i]), \"Yacht has been claimed already\");\n            require(\n                ahy.ownerOf(ogYachts[i]) == msg.sender,\n                \"You do not own a yacht\"\n            );\n\n            _mint(msg.sender, ogYachts[i]);\n        }\n\n        return ogYachts.length;\n    }","after":"function claim(uint256[] calldata ogYachts)\n        external\n        onlyInClaimingPhase\n        returns (uint256)\n    {\n        for (uint256 i; i < ogYachts.length; i++) {\n            require(!_exists(ogYachts[i]), \"Yacht has been claimed already\");\n            require(\n                ahy.ownerOf(ogYachts[i]) == msg.sender,\n                \"You do not own a yacht\"\n            );\n\n            _mint(msg.sender, ogYachts[i]);\n        }\n\n        return ogYachts.length;\n    }","contract":"SuperyachtToken","time":0},{"type":"external-function ","before":"function claimAH(uint256[] memory _superyachtIds)\n        external\n        onlyOwner\n        onlyAfterClaimingPhase\n        returns (uint256)\n    {\n        for (uint256 i = 0; i < _superyachtIds.length; i++) {\n            require(\n                !_exists(_superyachtIds[i]),\n                \"Yacht has been claimed already\"\n            );\n            _mint(msg.sender, _superyachtIds[i]);\n        }\n\n        return _superyachtIds.length;\n    }","after":"function claimAH(uint256[] calldata _superyachtIds)\n        external\n        onlyOwner\n        onlyAfterClaimingPhase\n        returns (uint256)\n    {\n        for (uint256 i = 0; i < _superyachtIds.length; i++) {\n            require(\n                !_exists(_superyachtIds[i]),\n                \"Yacht has been claimed already\"\n            );\n            _mint(msg.sender, _superyachtIds[i]);\n        }\n\n        return _superyachtIds.length;\n    }","contract":"SuperyachtToken","time":0},{"type":"external-function ","before":"function setBaseUrl(string memory _ipfsHash) external onlyOwner onlyNotFrozen {\n        baseUrl = string(abi.encodePacked(\"ipfs://\", _ipfsHash, \"/\"));\n    }","after":"function setBaseUrl(string calldata _ipfsHash) external onlyOwner onlyNotFrozen {\n        baseUrl = string(abi.encodePacked(\"ipfs://\", _ipfsHash, \"/\"));\n    }","contract":"SuperyachtToken","time":0},{"type":"external-function ","before":"function setName(\n        uint256 _yachtId,\n        string memory _yachtName,\n        uint256 _ogYachtToBurn\n    ) public {\n        bytes32 hashedName = keccak256(abi.encodePacked(toLower(_yachtName)));\n\n        require(\n            keccak256(abi.encodePacked(names[_yachtId])) == EMPTY_STRING_HASH,\n            \"Yacht has already been named\"\n        );\n        require(!nameTaken[hashedName], \"Name already taken\");\n\n        ahy.safeTransferFrom(_msgSender(), BURNER_ADDRESS, _ogYachtToBurn);\n\n        nameTaken[hashedName] = true;\n        names[_yachtId] = _yachtName;\n\n        emit NameChanged(_yachtId, _yachtName);\n    }","after":"function setName(\n        uint256 _yachtId,\n        string calldata _yachtName,\n        uint256 _ogYachtToBurn\n    ) public {\n        bytes32 hashedName = keccak256(abi.encodePacked(toLower(_yachtName)));\n\n        require(\n            keccak256(abi.encodePacked(names[_yachtId])) == EMPTY_STRING_HASH,\n            \"Yacht has already been named\"\n        );\n        require(!nameTaken[hashedName], \"Name already taken\");\n\n        ahy.safeTransferFrom(_msgSender(), BURNER_ADDRESS, _ogYachtToBurn);\n\n        nameTaken[hashedName] = true;\n        names[_yachtId] = _yachtName;\n\n        emit NameChanged(_yachtId, _yachtName);\n    }","contract":"SuperyachtToken","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"SuperyachtToken","time":0},{"type":"immutable-restrict-modification ","before":"uint256 internal chainLinkFee;","after":"uint256 internal immutable chainLinkFee;","contract":"SuperyachtToken","time":0}]}
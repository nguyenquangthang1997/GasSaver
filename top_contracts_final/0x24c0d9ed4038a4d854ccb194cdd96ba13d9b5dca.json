{"time":113,"results":[{"type":"external-function ","before":"function mint(string[] memory _tokenURIs) onlyAfterPreSaleDuration payable external \n    {\n        require(_tokenURIs.length <= MAX_MINT_PER_TIME, \"minting limit exceeds\");\n        require(msg.value >= (nftCost * _tokenURIs.length), \"Low Price\");\n\n        for (uint32 index = 0; index < _tokenURIs.length; index++) \n        {  //for loop example\n            createCollectible(_tokenURIs[index]);\n        }\n    }","after":"function mint(string[] calldata _tokenURIs) onlyAfterPreSaleDuration payable external \n    {\n        require(_tokenURIs.length <= MAX_MINT_PER_TIME, \"minting limit exceeds\");\n        require(msg.value >= (nftCost * _tokenURIs.length), \"Low Price\");\n\n        for (uint32 index = 0; index < _tokenURIs.length; index++) \n        {  //for loop example\n            createCollectible(_tokenURIs[index]);\n        }\n    }","contract":"RoboPlus","time":0},{"type":"external-function ","before":"function presaleMint(string[] memory _tokenURIs) onlyWhitelisted onlyDuringPreSaleDuration payable external \n    {\n        require(_tokenURIs.length <= MAX_MINT_PER_TIME, \"minting limit exceeds\");\n        require(msg.value >= (nftCost * _tokenURIs.length), \"Low Price\");\n\n        for (uint32 index = 0; index < _tokenURIs.length; index++) \n        {  //for loop example\n            createCollectible(_tokenURIs[index]);\n        }\n    }","after":"function presaleMint(string[] calldata _tokenURIs) onlyWhitelisted onlyDuringPreSaleDuration payable external \n    {\n        require(_tokenURIs.length <= MAX_MINT_PER_TIME, \"minting limit exceeds\");\n        require(msg.value >= (nftCost * _tokenURIs.length), \"Low Price\");\n\n        for (uint32 index = 0; index < _tokenURIs.length; index++) \n        {  //for loop example\n            createCollectible(_tokenURIs[index]);\n        }\n    }","contract":"RoboPlus","time":0},{"type":"external-function ","before":"function ownerMint(address _to, string memory _tokenURI) public onlyOwner returns (uint256)\n    {\n        uint256 newItemId = tokenCounter;\n         _safeMint(_to, newItemId);\n         _setTokenURI(newItemId, _tokenURI);\n         tokenCounter = tokenCounter + 1;\n\n        return newItemId;\n    }","after":"function ownerMint(address _to, string calldata _tokenURI) public onlyOwner returns (uint256)\n    {\n        uint256 newItemId = tokenCounter;\n         _safeMint(_to, newItemId);\n         _setTokenURI(newItemId, _tokenURI);\n         tokenCounter = tokenCounter + 1;\n\n        return newItemId;\n    }","contract":"RoboPlus","time":0},{"type":"external-function ","before":"function updateTokenURI(uint256 _tokenId, string memory _tokenURI) public onlyOwner {\n        _setTokenURI(_tokenId, _tokenURI);\n    }","after":"function updateTokenURI(uint256 _tokenId, string calldata _tokenURI) public onlyOwner {\n        _setTokenURI(_tokenId, _tokenURI);\n    }","contract":"RoboPlus","time":0},{"type":"constant-restrict-modification  ","before":"uint32 MAX_TOKEN_SUPPLY = 5432;","after":"uint32 constant MAX_TOKEN_SUPPLY = 5432;","contract":"RoboPlus","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public saleStartsOn;","after":"uint256 public immutable saleStartsOn;","contract":"RoboPlus","time":0}]}
{"time":364,"results":[{"type":"external-function ","before":"function createHouse(\n        string  memory name,\n        address curator,\n        uint16  fee,\n        bool    preApproved,\n        string  memory metadata\n    )\n        public\n        override\n    {\n        require(\n            houseIDs[name] == 0,\n            \"Already exists\");\n        require(\n            bytes(name).length > 0,\n            \"Name required\");\n        require(\n            bytes(name).length <= 32,\n            \"Name too long\");\n        require(\n            curator != address(0),\n            \"Address required\");\n        require(\n            fee < 10000,\n            \"Fee too high\");\n\n        _lastHouseId += 1;\n        uint256 houseId = _lastHouseId;\n\n        houses[houseId].name = name;\n        houses[houseId].curator = payable(curator);\n        houses[houseId].fee = fee;\n        houses[houseId].preApproved = preApproved;\n        houses[houseId].metadata = metadata;\n\n        _curatorHouses[curator].add(houseId);\n        _rankedHouses.add(houseId);\n        houseIDs[name] = houseId;\n\n        ITuxERC20(tuxERC20).updateFeatured();\n        ITuxERC20(tuxERC20).mint(msg.sender, 5 * 10**18);\n\n        emit HouseCreated(\n            houseId\n        );\n    }","after":"function createHouse(\n        string  calldata name,\n        address curator,\n        uint16  fee,\n        bool    preApproved,\n        string  calldata metadata\n    )\n        public\n        override\n    {\n        require(\n            houseIDs[name] == 0,\n            \"Already exists\");\n        require(\n            bytes(name).length > 0,\n            \"Name required\");\n        require(\n            bytes(name).length <= 32,\n            \"Name too long\");\n        require(\n            curator != address(0),\n            \"Address required\");\n        require(\n            fee < 10000,\n            \"Fee too high\");\n\n        _lastHouseId += 1;\n        uint256 houseId = _lastHouseId;\n\n        houses[houseId].name = name;\n        houses[houseId].curator = payable(curator);\n        houses[houseId].fee = fee;\n        houses[houseId].preApproved = preApproved;\n        houses[houseId].metadata = metadata;\n\n        _curatorHouses[curator].add(houseId);\n        _rankedHouses.add(houseId);\n        houseIDs[name] = houseId;\n\n        ITuxERC20(tuxERC20).updateFeatured();\n        ITuxERC20(tuxERC20).mint(msg.sender, 5 * 10**18);\n\n        emit HouseCreated(\n            houseId\n        );\n    }","contract":"Auctions","time":0},{"type":"external-function ","before":"function updateMetadata(\n        uint256 houseId,\n        string memory metadata\n    )\n        public\n        override\n        onlyHouseCurator(houseId)\n    {\n        houses[houseId].metadata = metadata;\n\n        emit MetadataUpdated(\n            houseId,\n            metadata\n        );\n    }","after":"function updateMetadata(\n        uint256 houseId,\n        string calldata metadata\n    )\n        public\n        override\n        onlyHouseCurator(houseId)\n    {\n        houses[houseId].metadata = metadata;\n\n        emit MetadataUpdated(\n            houseId,\n            metadata\n        );\n    }","contract":"Auctions","time":0},{"type":"external-function ","before":"function updateName(\n        string  memory name\n    )\n        public\n        override\n    {\n        accounts[msg.sender].name = name;\n\n        emit AccountUpdated(\n            msg.sender\n        );\n    }","after":"function updateName(\n        string  calldata name\n    )\n        public\n        override\n    {\n        accounts[msg.sender].name = name;\n\n        emit AccountUpdated(\n            msg.sender\n        );\n    }","contract":"Auctions","time":0},{"type":"external-function ","before":"function updateBio(\n        string  memory bioHash\n    )\n        public\n        override\n    {\n        accounts[msg.sender].bioHash = bioHash;\n\n        emit AccountUpdated(\n            msg.sender\n        );\n    }","after":"function updateBio(\n        string  calldata bioHash\n    )\n        public\n        override\n    {\n        accounts[msg.sender].bioHash = bioHash;\n\n        emit AccountUpdated(\n            msg.sender\n        );\n    }","contract":"Auctions","time":0},{"type":"external-function ","before":"function updatePicture(\n        string  memory pictureHash\n    )\n        public\n        override\n    {\n        accounts[msg.sender].pictureHash = pictureHash;\n\n        emit AccountUpdated(\n            msg.sender\n        );\n    }","after":"function updatePicture(\n        string  calldata pictureHash\n    )\n        public\n        override\n    {\n        accounts[msg.sender].pictureHash = pictureHash;\n\n        emit AccountUpdated(\n            msg.sender\n        );\n    }","contract":"Auctions","time":0},{"type":"immutable-restrict-modification ","before":"address public tuxERC20;","after":"address public immutable tuxERC20;","contract":"Auctions","time":1},{"type":"struct-data-arrangement ","before":"\naddress tokenContract\nuint256 tokenId\naddress tokenOwner\nuint256 duration\nuint256 reservePrice\nuint256 houseId\nuint16  fee\nbool    approved\nuint256 firstBidTime\nuint256 amount\naddress payable bidder\nuint256 created","after":"uint256 tokenId\nuint256 duration\nuint256 reservePrice\nuint256 houseId\nuint256 firstBidTime\nuint256 amount\nuint256 created\naddress tokenContract\naddress tokenOwner\naddress payable bidder\nuint16  fee\nbool    approved\n","contract":"IAuctions","time":1}]}
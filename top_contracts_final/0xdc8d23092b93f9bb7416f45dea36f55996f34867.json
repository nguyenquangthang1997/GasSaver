{"time":174,"results":[{"type":"external-function ","before":"function createProduct(bytes32 id, string memory name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, false);\n    }","after":"function createProduct(bytes32 id, string calldata name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, false);\n    }","contract":"Marketplace","time":0},{"type":"external-function ","before":"function createProductWithWhitelist(bytes32 id, string memory name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, true);\n        emit WhitelistEnabled(id);\n    }","after":"function createProductWithWhitelist(bytes32 id, string calldata name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, true);\n        emit WhitelistEnabled(id);\n    }","contract":"Marketplace","time":0},{"type":"external-function ","before":"function updateProduct(bytes32 productId, string memory name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, bool redeploy) public onlyProductOwner(productId) {\n        require(pricePerSecond > 0, \"error_freeProductsNotSupported\");\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        p.name = name;\n        p.beneficiary = beneficiary;\n        p.pricePerSecond = pricePerSecond;\n        p.priceCurrency = currency;\n        p.minimumSubscriptionSeconds = minimumSubscriptionSeconds;\n        emit ProductUpdated(p.owner, p.id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds);\n        if (redeploy) {\n            redeployProduct(productId);\n        }\n    }","after":"function updateProduct(bytes32 productId, string calldata name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, bool redeploy) public onlyProductOwner(productId) {\n        require(pricePerSecond > 0, \"error_freeProductsNotSupported\");\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        p.name = name;\n        p.beneficiary = beneficiary;\n        p.pricePerSecond = pricePerSecond;\n        p.priceCurrency = currency;\n        p.minimumSubscriptionSeconds = minimumSubscriptionSeconds;\n        emit ProductUpdated(p.owner, p.id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds);\n        if (redeploy) {\n            redeployProduct(productId);\n        }\n    }","contract":"Marketplace","time":0}]}
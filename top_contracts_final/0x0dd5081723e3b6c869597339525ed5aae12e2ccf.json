{"time":170,"results":[{"type":"loop-duplication","before":"\nstart line 102 column 8, end line 104 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            require(_impermanentContractInstance.ownerOf(tokenIds[i]) == msg.sender, 'Caller is not owner of the token ID');\n        }\nstart line 106 column 8, end line 110 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            _impermanentContractInstance.burnForAfterlife(tokenIds[i]);\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, _tokenIdCounter.current());\n        }","after":"// merge loop\n\nstart line 102 column 8, end line 104 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            require(_impermanentContractInstance.ownerOf(tokenIds[i]) == msg.sender, 'Caller is not owner of the token ID');\n        }\nstart line 106 column 8, end line 110 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            _impermanentContractInstance.burnForAfterlife(tokenIds[i]);\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, _tokenIdCounter.current());\n        }","contract":"Afterlife","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }","after":"function setBaseURI(string calldata newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }","contract":"Afterlife","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        provenance = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        provenance = provenanceHash;\n    }","contract":"Afterlife","time":0}]}
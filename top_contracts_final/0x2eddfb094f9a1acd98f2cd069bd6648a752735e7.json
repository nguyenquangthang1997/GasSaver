{"time":131,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public maxPanties = 200;\nuint256 public claimedPanties;\nbool public active;\nstring private _prefixURI;\nbytes32 public constant SEASON0_TYPEHASH = keccak256(\"DirtyPantiesSeason0(address buyer,uint256 tokenId)\");\naddress public signerAddress;\nuint256 private _royaltyBps;\naddress payable private _royaltyRecipient;\nbytes4 private constant _INTERFACE_ID_ROYALTIES = 0xbb3bafd6;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;","after":"uint256 public maxPanties = 200;\nuint256 public claimedPanties;\nstring private _prefixURI;\nbytes32 public constant SEASON0_TYPEHASH = keccak256(\"DirtyPantiesSeason0(address buyer,uint256 tokenId)\");\nuint256 private _royaltyBps;\naddress public signerAddress;\naddress payable private _royaltyRecipient;\nbytes4 private constant _INTERFACE_ID_ROYALTIES = 0xbb3bafd6;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\nbool public active;\n","contract":"DirtyPantiesSeason0","time":1},{"type":"external-function ","before":"function claimSeason0(uint256 _tokenId,bytes memory signature) external nonReentrant {\n        require(active, \"Inactive\");\n\n        require(!_exists(_tokenId), \"ERC721: NFT already claimed\");\n        claimedPanties++;\n        require(claimedPanties <= maxPanties, \"Too many requested\");\n\n        address recoverAddr = submitConfirmation(msg.sender,_tokenId,signature);\n        require( recoverAddr == signerAddress && recoverAddr != address(0),\"Bad Signer Address\");\n\n        _mint(msg.sender, _tokenId);\n    }","after":"function claimSeason0(uint256 _tokenId,bytes calldata signature) external nonReentrant {\n        require(active, \"Inactive\");\n\n        require(!_exists(_tokenId), \"ERC721: NFT already claimed\");\n        claimedPanties++;\n        require(claimedPanties <= maxPanties, \"Too many requested\");\n\n        address recoverAddr = submitConfirmation(msg.sender,_tokenId,signature);\n        require( recoverAddr == signerAddress && recoverAddr != address(0),\"Bad Signer Address\");\n\n        _mint(msg.sender, _tokenId);\n    }","contract":"DirtyPantiesSeason0","time":0}]}
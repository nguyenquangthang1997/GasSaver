{"time":106,"results":[{"type":"state-data-arrangement ","before":"\nstring public baseTokenURI =\r\n        \"ipfs://QmPPXoU8Kja2jZEM9MogYbe11s8qbF6KJwqC18Lj9qgBPV\";\nuint16 public tokenCount = 0;\nbool public saleIsActive = false;\nuint8 public royaltyDivisor = 20;\nbytes32 public MerkleRoot =\r\n        0x317d0e913d541be9fa22038ab90007224468b5db1e0bb0cda0efc3ad3810dca8;\naddress private openSeaProxyRegistryAddress;\nbool private isOpenSeaProxyActive = true;\nmapping(address => uint8) public userClaims;","after":"string public baseTokenURI =\r\n        \"ipfs://QmPPXoU8Kja2jZEM9MogYbe11s8qbF6KJwqC18Lj9qgBPV\";\nbytes32 public MerkleRoot =\r\n        0x317d0e913d541be9fa22038ab90007224468b5db1e0bb0cda0efc3ad3810dca8;\nmapping(address => uint8) public userClaims;\naddress private openSeaProxyRegistryAddress;\nuint16 public tokenCount = 0;\nbool public saleIsActive = false;\nuint8 public royaltyDivisor = 20;\nbool private isOpenSeaProxyActive = true;\n","contract":"Component2","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _uri) public onlyOwner {\r\n        baseTokenURI = _uri;\r\n    }","after":"function setBaseURI(string calldata _uri) public onlyOwner {\r\n        baseTokenURI = _uri;\r\n    }","contract":"Component2","time":0},{"type":"external-function ","before":"function claim(\r\n        bytes32[] memory _proof,\r\n        bytes1 _allowance,\r\n        uint8 _amount\r\n    ) public reentryLock {\r\n        require(saleIsActive, \"Sale is not active\");\r\n        require(_amount > 0, \"Cannot mint 0\");\r\n        require(_amount < uint8(_allowance) + 1, \"Allowance exceeded\");\r\n        require(\r\n            MerkleProof.verify(\r\n                _proof,\r\n                MerkleRoot,\r\n                keccak256(abi.encodePacked(msg.sender, _allowance))\r\n            ),\r\n            \"Unauthorized\"\r\n        );\r\n        require(\r\n            userClaims[msg.sender] + _amount < uint8(_allowance) + 1,\r\n            \"Exceeds user allowance\"\r\n        );\r\n        userClaims[msg.sender] += _amount;\r\n        for (uint256 i; i < _amount; i++) {\r\n            _safeMint(msg.sender, ++tokenCount);\r\n        }\r\n    }","after":"function claim(\r\n        bytes32[] calldata _proof,\r\n        bytes1 _allowance,\r\n        uint8 _amount\r\n    ) public reentryLock {\r\n        require(saleIsActive, \"Sale is not active\");\r\n        require(_amount > 0, \"Cannot mint 0\");\r\n        require(_amount < uint8(_allowance) + 1, \"Allowance exceeded\");\r\n        require(\r\n            MerkleProof.verify(\r\n                _proof,\r\n                MerkleRoot,\r\n                keccak256(abi.encodePacked(msg.sender, _allowance))\r\n            ),\r\n            \"Unauthorized\"\r\n        );\r\n        require(\r\n            userClaims[msg.sender] + _amount < uint8(_allowance) + 1,\r\n            \"Exceeds user allowance\"\r\n        );\r\n        userClaims[msg.sender] += _amount;\r\n        for (uint256 i; i < _amount; i++) {\r\n            _safeMint(msg.sender, ++tokenCount);\r\n        }\r\n    }","contract":"Component2","time":0}]}
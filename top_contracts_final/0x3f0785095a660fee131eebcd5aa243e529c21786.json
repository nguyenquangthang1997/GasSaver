{"time":669,"results":[{"type":"external-function ","before":"function update(string memory provenance_hash, uint256 price, uint256 max_supply) public onlyOwner {\n        _provenance_hash = provenance_hash;\n        _price = price;\n        _max_supply = max_supply; \n\n        if (_networkid == 1) {\n            _baseURI = string(abi.encodePacked(\"https://defra.systems/metadata/\", _provenance_hash, \"/asset/\"));\n        } else {\n            _baseURI = string(abi.encodePacked(\"https://test.defra.systems/metadata/\", _provenance_hash, \"/asset/\"));\n        }\n    }","after":"function update(string calldata provenance_hash, uint256 price, uint256 max_supply) public onlyOwner {\n        _provenance_hash = provenance_hash;\n        _price = price;\n        _max_supply = max_supply; \n\n        if (_networkid == 1) {\n            _baseURI = string(abi.encodePacked(\"https://defra.systems/metadata/\", _provenance_hash, \"/asset/\"));\n        } else {\n            _baseURI = string(abi.encodePacked(\"https://test.defra.systems/metadata/\", _provenance_hash, \"/asset/\"));\n        }\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function updateBaseTokenURI(string memory baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n        _baseURI = baseURI;\n    }","after":"function updateBaseTokenURI(string calldata baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n        _baseURI = baseURI;\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function redeemCodeCreateBulk(bytes32[] memory code_hashed_arr) public onlyOwner {\n        require(totalSupply().add(code_hashed_arr.length) <= _max_supply, \"Codes would exceed max supply\");\n        for (uint i = 0; i < code_hashed_arr.length; i++) {\n            redeemCodeCreate(code_hashed_arr[i]);\n        }\n    }","after":"function redeemCodeCreateBulk(bytes32[] calldata code_hashed_arr) public onlyOwner {\n        require(totalSupply().add(code_hashed_arr.length) <= _max_supply, \"Codes would exceed max supply\");\n        for (uint i = 0; i < code_hashed_arr.length; i++) {\n            redeemCodeCreate(code_hashed_arr[i]);\n        }\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function airdrop(bytes memory code) public {\n        require(_airdrop_available > 0, \"No airdrop tokens available or the airdrop is over\");\n        require(airdrop_tickets[sha256(code)], \"The given airdrop ticket does not exist\");\n        delete airdrop_tickets[sha256(code)];\n        _airdrop_available -= 1;\n        mintToSender(1);\n    }","after":"function airdrop(bytes calldata code) public {\n        require(_airdrop_available > 0, \"No airdrop tokens available or the airdrop is over\");\n        require(airdrop_tickets[sha256(code)], \"The given airdrop ticket does not exist\");\n        delete airdrop_tickets[sha256(code)];\n        _airdrop_available -= 1;\n        mintToSender(1);\n    }","contract":"NFT","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public _networkid = 0;","after":"uint256 public immutable _networkid = 0;","contract":"NFT","time":0}]}
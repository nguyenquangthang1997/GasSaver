{"time":127,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public maxItems                         = 9999;\nuint256 public maxMintsPerTx                    = 5;\nuint256 public maxMintPreSale                   = 2;\nuint256 public startingTimePreSale              = 1636743600;\nuint256 public startingTimePublicSale           = 1636830000;\nuint256 public pricePreSale                     = 0.08 ether;\nuint256 public pricePublicSale                  = 0.1 ether;\nuint256 public totalSupply;\nbool public specialMintLocked;\nstring public contractUri;\nmapping(address => uint256) public amountMintedWhitelist;\nmapping(address => uint256[]) internal _ownerToIds;\nmapping(uint256 => uint256) internal _idToOwnerIndex;\naddress internal __wallet;\nstring internal __baseURI;\nstring internal _extensionURI;","after":"uint256 public maxItems                         = 9999;\nuint256 public maxMintsPerTx                    = 5;\nuint256 public maxMintPreSale                   = 2;\nuint256 public startingTimePreSale              = 1636743600;\nuint256 public startingTimePublicSale           = 1636830000;\nuint256 public pricePreSale                     = 0.08 ether;\nuint256 public pricePublicSale                  = 0.1 ether;\nuint256 public totalSupply;\nstring public contractUri;\nmapping(address => uint256) public amountMintedWhitelist;\nmapping(address => uint256[]) internal _ownerToIds;\nmapping(uint256 => uint256) internal _idToOwnerIndex;\nstring internal __baseURI;\nstring internal _extensionURI;\naddress internal __wallet;\nbool public specialMintLocked;\n","contract":"DragonVerse","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newBaseURI) external onlyOwner {\n        __baseURI = _newBaseURI;\n    }","after":"function setBaseURI(string calldata _newBaseURI) external onlyOwner {\n        __baseURI = _newBaseURI;\n    }","contract":"DragonVerse","time":0},{"type":"external-function ","before":"function setExtensionURI(string memory _newExtensionURI) external onlyOwner {\n        _extensionURI = _newExtensionURI;\n    }","after":"function setExtensionURI(string calldata _newExtensionURI) external onlyOwner {\n        _extensionURI = _newExtensionURI;\n    }","contract":"DragonVerse","time":0},{"type":"external-function ","before":"function mintWhitelist(uint256 _numToMint, bytes memory signature) external payable {\n        require(verify(signature, msg.sender)); // We check if the user has provided the correct data and if he's whitelisted\n        require(msg.value >= pricePreSale * _numToMint, 'not enough eth');\n        require(_numToMint > 0, \"not enough\");\n        require((_numToMint + totalSupply) <= maxItems, \"would exceed max supply\");\n        require(_numToMint <= maxMintsPerTx, \"limit on minting too many at a time\");\n        require(amountMintedWhitelist[msg.sender] + _numToMint <= maxMintPreSale, \"limit on minting too many while whitelisted\");\n        \n        for(uint256 i=totalSupply; i < (totalSupply + _numToMint); i++){\n            _mint(msg.sender, i);\n        }\n        \n        amountMintedWhitelist[msg.sender] = amountMintedWhitelist[msg.sender] + _numToMint;\n        totalSupply += _numToMint;\n    }","after":"function mintWhitelist(uint256 _numToMint, bytes calldata signature) external payable {\n        require(verify(signature, msg.sender)); // We check if the user has provided the correct data and if he's whitelisted\n        require(msg.value >= pricePreSale * _numToMint, 'not enough eth');\n        require(_numToMint > 0, \"not enough\");\n        require((_numToMint + totalSupply) <= maxItems, \"would exceed max supply\");\n        require(_numToMint <= maxMintsPerTx, \"limit on minting too many at a time\");\n        require(amountMintedWhitelist[msg.sender] + _numToMint <= maxMintPreSale, \"limit on minting too many while whitelisted\");\n        \n        for(uint256 i=totalSupply; i < (totalSupply + _numToMint); i++){\n            _mint(msg.sender, i);\n        }\n        \n        amountMintedWhitelist[msg.sender] = amountMintedWhitelist[msg.sender] + _numToMint;\n        totalSupply += _numToMint;\n    }","contract":"DragonVerse","time":0},{"type":"external-function ","before":"function mintSpecial(address[] memory recipients, uint256[] memory amounts) external onlyOwner {\n        require(!specialMintLocked, \"special mint permanently locked\");\n        require(recipients.length == amounts.length, \"arrays have different lengths\");\n        \n        for (uint256 i=0; i < recipients.length; i++){\n            for(uint256 j=totalSupply; j < (totalSupply + amounts[i]); j++){\n                _mint(recipients[i], j);\n            }\n            \n            totalSupply += amounts[i];\n        }\n    }","after":"function mintSpecial(address[] calldata recipients, uint256[] calldata amounts) external onlyOwner {\n        require(!specialMintLocked, \"special mint permanently locked\");\n        require(recipients.length == amounts.length, \"arrays have different lengths\");\n        \n        for (uint256 i=0; i < recipients.length; i++){\n            for(uint256 j=totalSupply; j < (totalSupply + amounts[i]); j++){\n                _mint(recipients[i], j);\n            }\n            \n            totalSupply += amounts[i];\n        }\n    }","contract":"DragonVerse","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxItems                         = 9999;","after":"uint256 public constant maxItems                         = 9999;","contract":"DragonVerse","time":0}]}
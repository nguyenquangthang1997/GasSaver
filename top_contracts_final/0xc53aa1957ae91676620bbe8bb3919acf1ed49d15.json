{"time":358,"results":[{"type":"external-function ","before":"function claimApedTokens(uint256[] memory _tokenIds) public nonReentrant {\n    require(distributionActive);\n    require(_tokenIds.length <= 20, \"Can only claim 20 per tx\");\n\n    uint256 totalClaimable = 0;\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      require(_isApprovedOrOwner(_msgSender(), _tokenIds[i]), \"Token not approved\");\n\n      uint256 amount = getClaimableApedTokens(_tokenIds[i]);\n      totalClaimable += amount;\n      apedTokensClaimedByToken[_tokenIds[i]] += amount;\n    }\n\n    require(totalClaimable > 0, \"Nothing to claim\");\n    IERC20(apedTokenAddress).transfer(_msgSender(), totalClaimable); // Assumes enough APED in the contract\n  }","after":"function claimApedTokens(uint256[] calldata _tokenIds) public nonReentrant {\n    require(distributionActive);\n    require(_tokenIds.length <= 20, \"Can only claim 20 per tx\");\n\n    uint256 totalClaimable = 0;\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      require(_isApprovedOrOwner(_msgSender(), _tokenIds[i]), \"Token not approved\");\n\n      uint256 amount = getClaimableApedTokens(_tokenIds[i]);\n      totalClaimable += amount;\n      apedTokensClaimedByToken[_tokenIds[i]] += amount;\n    }\n\n    require(totalClaimable > 0, \"Nothing to claim\");\n    IERC20(apedTokenAddress).transfer(_msgSender(), totalClaimable); // Assumes enough APED in the contract\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setTokenTiers(uint256[] memory _tokenIds, uint8 _tier) public onlyOwner {\n    require(_tier <= 2); // Only three possible tiers\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      tokenTier[_tokenIds[i]] = _tier;\n    }\n  }","after":"function setTokenTiers(uint256[] calldata _tokenIds, uint8 _tier) public onlyOwner {\n    require(_tier <= 2); // Only three possible tiers\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      tokenTier[_tokenIds[i]] = _tier;\n    }\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function pushPreMinters(address[] memory _preMinters, uint256 _amount) public onlyOwner {\n    for(uint8 i = 0; i < _preMinters.length; i++) {\n      amountPreMintableByAddress[_preMinters[i]] += _amount;\n    }\n  }","after":"function pushPreMinters(address[] calldata _preMinters, uint256 _amount) public onlyOwner {\n    for(uint8 i = 0; i < _preMinters.length; i++) {\n      amountPreMintableByAddress[_preMinters[i]] += _amount;\n    }\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 _tokenId, string memory _tokenURI) public onlyOwner {\n    _setTokenURI(_tokenId, _tokenURI);\n  }","after":"function setTokenURI(uint256 _tokenId, string calldata _tokenURI) public onlyOwner {\n    _setTokenURI(_tokenId, _tokenURI);\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) public onlyOwner {\n    baseURI = baseURI_;\n  }","after":"function setBaseURI(string calldata baseURI_) public onlyOwner {\n    baseURI = baseURI_;\n  }","contract":"ApeDaoRemix","time":0},{"type":"immutable-restrict-modification ","before":"address public apedTokenAddress;","after":"address public immutable apedTokenAddress;","contract":"ApeDaoRemix","time":1},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) public onlyAdmin {\n    baseURI = baseURI_;\n  }","after":"function setBaseURI(string calldata baseURI_) public onlyAdmin {\n    baseURI = baseURI_;\n  }","contract":"OriginalsPrimaDonna","time":0},{"type":"immutable-restrict-modification ","before":"uint16 public maximumSupply;","after":"uint16 public immutable maximumSupply;","contract":"OriginalsPrimaDonna","time":1},{"type":"immutable-restrict-modification ","before":"uint8 public transactionLimit;","after":"uint8 public immutable transactionLimit;","contract":"OriginalsPrimaDonna","time":1},{"type":"external-function ","before":"penzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract RemixMintClub is ERC1155, ERC1155Burnable, ERC1155Supply, Ownable, Pausable, ReentrancyGuard {\n  using Strings for uint256;\n  using Counters for Counters.Counter;\n\n  bytes32 public currentMerkleRoot;\n  Counters.Counter public merkleCounter;\n  mapping(address => uint256) public lastClaimed;\n\n  string public baseURI;\n\n  // 1 = Gold Token\n  // 2 = Mint Token","after":"penzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract RemixMintClub is ERC1155, ERC1155Burnable, ERC1155Supply, Ownable, Pausable, ReentrancyGuard {\n  using Strings for uint256;\n  using Counters for Counters.Counter;\n\n  bytes32 public currentMerkleRoot;\n  Counters.Counter public merkleCounter;\n  mapping(address => uint256) public lastClaimed;\n\n  string public baseURI;\n\n  // 1 = Gold Token\n  // 2 = Mint Token","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"tity, \"\");\n  }\n\n  /* Merkle Tree Helper Functions */\n\n  function leaf(address _account, ui","after":"tity, \"\");\n  }\n\n  /* Merkle Tree Helper Functions */\n\n  function leaf(address _account, ui","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"RemixMintClub","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"RemixMintClub","time":0},{"type":"constant-restrict-modification  ","before":"\npragma solidity ^0.8.7;\n\nimport \"@op","after":"\npragma solidity ^0.8.7;\n\nimport \"@op","contract":"RemixMintClub","time":0}]}
{"time":142,"results":[{"type":"external-function ","before":"   function mintFP(uint256 paidTokensQuantity, bytes memory signature, uint256 freeTokensQuantity, uint256 allowedFreeQuantity) external payable {\n        require(mintLive, \"MINT_CLOSED\");\n        require(matchAddresSigner(signature, allowedFreeQuantity), \"DIRECT_MINT_DISALLOWED\");\n        require(_tokensMinted.current() + paidTokensQuantity + freeTokensQuantity <= IM_MAX, \"EXCEED_MAX\");\n        require(CLAIMERS_LIST[msg.sender] + freeTokensQuantity <= allowedFreeQuantity, \"EXCEED_PER_WALLET\");\n        require(paidTokensQuantity + freeTokensQuantity <= IM_PER_MINT, \"EXCEED_PER_MINT\");\n        require(IM_PRICE * paidTokensQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n        for (uint256 i = 0; i < freeTokensQuantity; i++) {\n            CLAIMERS_LIST[msg.sender]++;\n            _tokensMinted.increment();\n            _safeMint(msg.sender, _tokensMinted.current());\n        }\n        for (uint256 i = 0; i < paidTokensQuantity; i++) {\n            _tokensMinted.increment();\n            _safeMint(msg.sender, _tokensMinted.current());\n        }\n  ","after":"   function mintFP(uint256 paidTokensQuantity, bytes calldata signature, uint256 freeTokensQuantity, uint256 allowedFreeQuantity) external payable {\n        require(mintLive, \"MINT_CLOSED\");\n        require(matchAddresSigner(signature, allowedFreeQuantity), \"DIRECT_MINT_DISALLOWED\");\n        require(_tokensMinted.current() + paidTokensQuantity + freeTokensQuantity <= IM_MAX, \"EXCEED_MAX\");\n        require(CLAIMERS_LIST[msg.sender] + freeTokensQuantity <= allowedFreeQuantity, \"EXCEED_PER_WALLET\");\n        require(paidTokensQuantity + freeTokensQuantity <= IM_PER_MINT, \"EXCEED_PER_MINT\");\n        require(IM_PRICE * paidTokensQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n        for (uint256 i = 0; i < freeTokensQuantity; i++) {\n            CLAIMERS_LIST[msg.sender]++;\n            _tokensMinted.increment();\n            _safeMint(msg.sender, _tokensMinted.current());\n        }\n        for (uint256 i = 0; i < paidTokensQuantity; i++) {\n            _tokensMinted.increment();\n            _safeMint(msg.sender, _tokensMinted.current());\n        }\n  ","contract":"InvertedMutants","time":0},{"type":"external-function ","before":"   function freeMint(bytes memory signature, uint256 freeTokensQuantity, uint256 allowedFreeQuantity) external {\n        require(mintLive, \"MINT_CLOSED\");\n        require(matchAddresSigner(signature, allowedFreeQuantity), \"DIRECT_MINT_DISALLOWED\");\n        require(_tokensMinted.current() + freeTokensQuantity <= IM_MAX, \"EXCEED_MAX\");\n        require(CLAIMERS_LIST[msg.sender] + freeTokensQuantity <= allowedFreeQuantity, \"EXCEED_PER_WALLET\");\n        require(freeTokensQuantity <= IM_PER_MINT, \"EXCEED_PER_MINT\");\n        for (uint256 i = 0; i < freeTokensQuantity; i++) {\n            CLAIMERS_LIST[msg.sender]++;\n            _tokensMinted.increment();\n            _safeMint(msg.sender, _tokensMinted.current());\n        }\n  ","after":"   function freeMint(bytes calldata signature, uint256 freeTokensQuantity, uint256 allowedFreeQuantity) external {\n        require(mintLive, \"MINT_CLOSED\");\n        require(matchAddresSigner(signature, allowedFreeQuantity), \"DIRECT_MINT_DISALLOWED\");\n        require(_tokensMinted.current() + freeTokensQuantity <= IM_MAX, \"EXCEED_MAX\");\n        require(CLAIMERS_LIST[msg.sender] + freeTokensQuantity <= allowedFreeQuantity, \"EXCEED_PER_WALLET\");\n        require(freeTokensQuantity <= IM_PER_MINT, \"EXCEED_PER_MINT\");\n        for (uint256 i = 0; i < freeTokensQuantity; i++) {\n            CLAIMERS_LIST[msg.sender]++;\n            _tokensMinted.increment();\n            _safeMint(msg.sender, _tokensMinted.current());\n        }\n  ","contract":"InvertedMutants","time":0},{"type":"constant-restrict-modification  ","before":"   uint256 public IM_PER_MINT =","after":"   uint256 public constant IM_PER_MINT =","contract":"InvertedMutants","time":0},{"type":"constant-restrict-modification  ","before":"   address private PRIVATE_SIGNER = 0x83d32F9D97B3189CBC9Bd7b8270924153e8f53","after":"   address private constant PRIVATE_SIGNER = 0x83d32F9D97B3189CBC9Bd7b8270924153e8f53","contract":"InvertedMutants","time":0}]}
{"time":199,"results":[{"type":"state-data-arrangement ","before":"\n\n  string public baseU\n\n  string public defaultU\n\n  string public mycontractU\n\n  uint256 private currentSupp\n\n  uint256 next\n\n  mapping(uint8 => uint256) public stagePri\n\n  mapping(uint8 => uint256) public stageLim\n\n  mapping(uint8 => uint256) public stageAddrLim\n\n  mapping(uint8 => bool) public usePrevMintCou\n\n  address public sign\n\n  mapping(uint8 => mapping(address => uint8)) public mintCou\n\n  bool public paused = fal\n\n  uint8 public sta\n\n  mapping(address => bool) public isCreatorRo\n\n  address public royaltyAd\n\n  uint256 public royaltyBas","after":"\n  string public baseU\n\n  string public defaultU\n\n  string public mycontractU\n\n  uint256 private currentSupp\n\n  uint256 next\n\n  mapping(uint8 => uint256) public stagePri\n\n  mapping(uint8 => uint256) public stageLim\n\n  mapping(uint8 => uint256) public stageAddrLim\n\n  mapping(uint8 => bool) public usePrevMintCou\n\n  mapping(uint8 => mapping(address => uint8)) public mintCou\n\n  mapping(address => bool) public isCreatorRo\n\n  uint256 public royaltyBas\n\n  address public sign\n\n  address public royaltyAd\n\n  bool public paused = fal\n\n  uint8 public sta\n","contract":"Beanterra","time":0},{"type":"external-function ","before":"\n  function mint(uint8 mint_num, uint8 wl_max, bytes memory signature) public payable {\n    require(!paused, \"Contract paused\");\n    require(stage > 0, \"Invalid stage\");\n    uint256 supply = totalSupply();\n    require(supply + mint_num <= stageLimit[stage], \"Hit stage limit\");\n    require(msg.value >= mint_num * stagePrice[stage], \"Insufficient eth\");\n    require(mint_num > 0,\"at least 1 mint\");\n    uint256 currMintCount;\n    if(usePrevMintCount[stage])\n      currMintCount = mintCount[stage-1][msg.sender];\n    else\n      currMintCount = mintCount[stage][msg.sender];\n    if(signature.length > 0){\n      //mint via WL\n      require(checkSig(msg.sender, wl_max, signature), \"Invalid signature\");\n      require(mint_num + currMintCount <= wl_max, \"Exceed WL limit\");\n    }else{\n      //public mint\n      require(mint_num + currMintCount <= stageAddrLimit[stage], \"Exceed address mint limit\");\n    }\n    if(usePrevMintCount[stage])\n      mintCount[stage-1][msg.sender] += mint_num;\n    else\n      mintCount[stage][msg.sender] += mint_num;\n    //mint\n    currentSupply += mint_num;\n    for (uint256 i = 0; i < mint_num; i++) {\n      _safeMint(msg.sender, nextId + i);\n    }\n    nextId += mint_num;\n","after":"\n  function mint(uint8 mint_num, uint8 wl_max, bytes calldata signature) public payable {\n    require(!paused, \"Contract paused\");\n    require(stage > 0, \"Invalid stage\");\n    uint256 supply = totalSupply();\n    require(supply + mint_num <= stageLimit[stage], \"Hit stage limit\");\n    require(msg.value >= mint_num * stagePrice[stage], \"Insufficient eth\");\n    require(mint_num > 0,\"at least 1 mint\");\n    uint256 currMintCount;\n    if(usePrevMintCount[stage])\n      currMintCount = mintCount[stage-1][msg.sender];\n    else\n      currMintCount = mintCount[stage][msg.sender];\n    if(signature.length > 0){\n      //mint via WL\n      require(checkSig(msg.sender, wl_max, signature), \"Invalid signature\");\n      require(mint_num + currMintCount <= wl_max, \"Exceed WL limit\");\n    }else{\n      //public mint\n      require(mint_num + currMintCount <= stageAddrLimit[stage], \"Exceed address mint limit\");\n    }\n    if(usePrevMintCount[stage])\n      mintCount[stage-1][msg.sender] += mint_num;\n    else\n      mintCount[stage][msg.sender] += mint_num;\n    //mint\n    currentSupply += mint_num;\n    for (uint256 i = 0; i < mint_num; i++) {\n      _safeMint(msg.sender, nextId + i);\n    }\n    nextId += mint_num;\n","contract":"Beanterra","time":0},{"type":"external-function ","before":"\n  function setContractURI(string memory _contractURI) public onlyOwner {\n    mycontractURI = _contractURI;\n    //return format based on https://docs.opensea.io/docs/contract-level-metadata\n","after":"\n  function setContractURI(string calldata _contractURI) public onlyOwner {\n    mycontractURI = _contractURI;\n    //return format based on https://docs.opensea.io/docs/contract-level-metadata\n","contract":"Beanterra","time":0},{"type":"immutable-restrict-modification ","before":"\n  address public sign","after":"\n  address public sign","contract":"Beanterra","time":1}]}
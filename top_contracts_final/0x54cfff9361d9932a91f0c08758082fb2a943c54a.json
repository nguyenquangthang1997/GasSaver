{"time":128,"results":[{"type":"state-data-arrangement ","before":"\nbool public saleIsActive = true;\nbool public whitelistActive = false;\nstring public name = \"IBEX | Protocol\";\nstring public symbol = \"IBEX\";\nmapping (uint256 => uint) public priceMap;\naddress private withdrawAddress = 0xc135A4ccddDB08a280d502e75767c8Ca32Ff838d;\nmapping (uint256 => uint256) public maxSupply;\nmapping (address => bool) public whitelisted;\nuint256[] reserveIds = [2,3,4,5,6,7,8,9];\nuint256[] reserveAmounts = [1,1,5,4,4,3,3,4];","after":"string public name = \"IBEX | Protocol\";\nstring public symbol = \"IBEX\";\nmapping (uint256 => uint) public priceMap;\nmapping (uint256 => uint256) public maxSupply;\nmapping (address => bool) public whitelisted;\nuint256[] reserveIds = [2,3,4,5,6,7,8,9];\nuint256[] reserveAmounts = [1,1,5,4,4,3,3,4];\naddress private withdrawAddress = 0xc135A4ccddDB08a280d502e75767c8Ca32Ff838d;\nbool public saleIsActive = true;\nbool public whitelistActive = false;\n","contract":"IBEX","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory accounts) public onlyOwner {\n        for(uint i=0; i<accounts.length; i++){\n            require(!whitelisted[accounts[i]], \"Already added to list\");\n            whitelisted[accounts[i]] = true;\n        }\n    }","after":"function addToWhitelist(address[] calldata accounts) public onlyOwner {\n        for(uint i=0; i<accounts.length; i++){\n            require(!whitelisted[accounts[i]], \"Already added to list\");\n            whitelisted[accounts[i]] = true;\n        }\n    }","contract":"IBEX","time":0},{"type":"external-function ","before":"function removeFromWhitelist(address[] memory accounts) public onlyOwner {\n        for(uint i=0; i<accounts.length; i++){\n            require(whitelisted[accounts[i]], \"Account not whitelisted\");\n            whitelisted[accounts[i]] = false;\n        }\n    }","after":"function removeFromWhitelist(address[] calldata accounts) public onlyOwner {\n        for(uint i=0; i<accounts.length; i++){\n            require(whitelisted[accounts[i]], \"Account not whitelisted\");\n            whitelisted[accounts[i]] = false;\n        }\n    }","contract":"IBEX","time":0},{"type":"external-function ","before":"function setNewUri(string memory _uri) public onlyOwner {\n        _setURI(_uri);\n    }","after":"function setNewUri(string calldata _uri) public onlyOwner {\n        _setURI(_uri);\n    }","contract":"IBEX","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"IBEX","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"IBEX","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"IBEX | Protocol\";","after":"string public constant name = \"IBEX | Protocol\";","contract":"IBEX","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"IBEX\";","after":"string public constant symbol = \"IBEX\";","contract":"IBEX","time":0},{"type":"constant-restrict-modification  ","before":"address private withdrawAddress = 0xc135A4ccddDB08a280d502e75767c8Ca32Ff838d;","after":"address private constant withdrawAddress = 0xc135A4ccddDB08a280d502e75767c8Ca32Ff838d;","contract":"IBEX","time":0}]}
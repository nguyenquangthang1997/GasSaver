{"time":153,"results":[{"type":"state-data-arrangement ","before":"\nbool public saleIsActive;\nuint256 public tokenPrice = 0.025 ether;\nuint256 private mintedTokens;\nuint constant TOKEN_ID = 7123;\nuint constant MAX_TOKENS = 10000;\naddress private constant MIKE = 0xf6a39754ab1a18D19d2cF01dd1941c4b0D2bCF15;\naddress private constant FUEGO = 0xADDaF99990b665D8553f08653966fa8995Cc1209;\naddress private constant CHICK = 0x0b8F4C4E7626A91460dac057eB43e0de59d5b44F;\naddress private constant TMAS = 0x756624F2c0816bFb6a09E6d463c695b39a146629;\naddress public attentionFudContract;","after":"uint256 public tokenPrice = 0.025 ether;\nuint256 private mintedTokens;\nuint constant TOKEN_ID = 7123;\nuint constant MAX_TOKENS = 10000;\naddress private constant MIKE = 0xf6a39754ab1a18D19d2cF01dd1941c4b0D2bCF15;\naddress private constant FUEGO = 0xADDaF99990b665D8553f08653966fa8995Cc1209;\naddress private constant CHICK = 0x0b8F4C4E7626A91460dac057eB43e0de59d5b44F;\naddress private constant TMAS = 0x756624F2c0816bFb6a09E6d463c695b39a146629;\naddress public attentionFudContract;\nbool public saleIsActive;\n","contract":"FudToken","time":1},{"type":"external-function ","before":"function setURI(string memory newuri) external onlyOwner {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) external onlyOwner {\n        _setURI(newuri);\n    }","contract":"FudToken","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"FudToken","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"FudToken","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"FudToken","time":0}]}
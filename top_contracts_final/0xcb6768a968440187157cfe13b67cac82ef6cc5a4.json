{"time":155,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nmapping (address => mapping(uint256 => uint256)) internal balances;\nmapping (address => mapping(address => bool)) internal operators;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;","after":"mapping (address => mapping(uint256 => uint256)) internal balances;\nmapping (address => mapping(address => bool)) internal operators;\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n","contract":"ERC1155","time":0},{"type":"external-function ","before":"function setBaseMetadataURI(string memory newURI) public onlyWhitelistAdmin {\n        _setBaseMetadataURI(newURI);\n    }","after":"function setBaseMetadataURI(string calldata newURI) public onlyWhitelistAdmin {\n        _setBaseMetadataURI(newURI);\n    }","contract":"PepemonFactory","time":0},{"type":"external-function ","before":"function setContractURI(string memory newURI) public onlyWhitelistAdmin {\n        _contractURI = newURI;\n    }","after":"function setContractURI(string calldata newURI) public onlyWhitelistAdmin {\n        _contractURI = newURI;\n    }","contract":"PepemonFactory","time":0},{"type":"external-function ","before":"function airdrop(uint256 _id, address[] memory _addresses) public onlyMinter {\n        require(tokenMaxSupply[_id] - tokenSupply[_id] >= _addresses.length, \"Cant mint above max supply\");\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            mint(_addresses[i], _id, 1, \"\");\n        }\n    }","after":"function airdrop(uint256 _id, address[] calldata _addresses) public onlyMinter {\n        require(tokenMaxSupply[_id] - tokenSupply[_id] >= _addresses.length, \"Cant mint above max supply\");\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            mint(_addresses[i], _id, 1, \"\");\n        }\n    }","contract":"PepemonFactory","time":0},{"type":"external-function ","before":"function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyWhitelistAdmin {\n        _setBaseMetadataURI(_newBaseMetadataURI);\n    }","after":"function setBaseMetadataURI(string calldata _newBaseMetadataURI) public onlyWhitelistAdmin {\n        _setBaseMetadataURI(_newBaseMetadataURI);\n    }","contract":"PepemonFactory","time":0},{"type":"external-function ","before":"function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\n    public\n    {\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0),\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\n\n        _safeTransferFrom(_from, _to, _id, _amount);\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\n    }","after":"function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data)\n    public\n    {\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0),\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\n\n        _safeTransferFrom(_from, _to, _id, _amount);\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\n    }","contract":"PepemonFactory","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\n    public\n    {\n        // Requirements\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\n\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n    }","after":"function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data)\n    public\n    {\n        // Requirements\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\n        require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\n\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n    }","contract":"PepemonFactory","time":0}]}
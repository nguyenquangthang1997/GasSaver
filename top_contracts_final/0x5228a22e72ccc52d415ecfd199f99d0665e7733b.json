{"time":104,"results":[{"type":"external-function ","before":"function send(address recipient, uint256 amount, bytes memory data) public {\n        _send(_msgSender(), _msgSender(), recipient, amount, data, \"\", true);\n    }","after":"function send(address recipient, uint256 amount, bytes calldata data) public {\n        _send(_msgSender(), _msgSender(), recipient, amount, data, \"\", true);\n    }","contract":"PToken","time":0},{"type":"external-function ","before":"function burn(uint256 amount, bytes memory data) public {\n        _burn(_msgSender(), _msgSender(), amount, data, \"\");\n    }","after":"function burn(uint256 amount, bytes calldata data) public {\n        _burn(_msgSender(), _msgSender(), amount, data, \"\");\n    }","contract":"PToken","time":0},{"type":"external-function ","before":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n    public\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(_msgSender(), sender, recipient, amount, data, operatorData, true);\n    }","after":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    public\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(_msgSender(), sender, recipient, amount, data, operatorData, true);\n    }","contract":"PToken","time":0},{"type":"external-function ","before":"function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(_msgSender(), account, amount, data, operatorData);\n    }","after":"function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) public {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(_msgSender(), account, amount, data, operatorData);\n    }","contract":"PToken","time":0}]}
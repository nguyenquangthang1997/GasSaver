{"time":98,"results":[{"type":"de-morgan-condition ","before":"!bots[from] && !bots[to]","after":"!(bots[from] && bots[to])","loc":{"start":{"line":256,"column":20},"end":{"line":256,"column":43}},"contract":"TiggerDAOCapital","time":0},{"type":"external-function ","before":"function openTrading(address[] memory lockSells, uint duration) external onlyOwner() {\n        require(!tradingOpen,\"trading is already open\");\n\n        IUniswapV2Router02 _uniswapV2Router =\n            IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n\n        _isExcludedFromSellLock[address(uniswapV2Router)] = true;\n        _isExcludedFromSellLock[address(uniswapV2Pair)] = true;\n\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        swapEnabled = true;\n        cooldownEnabled = true;\n        _maxWalletAmount = 25e9 * 10**9;\n        tradingOpen = true;\n        tradingOpenTime = block.timestamp;\n        _maxTokensToSwapForFees = 2e10 * 10**9;\n\n        for (uint i = 0; i < lockSells.length; i++) {\n            sellLock[lockSells[i]] = tradingOpenTime + duration;\n        }\n\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n    }","after":"function openTrading(address[] calldata lockSells, uint duration) external onlyOwner() {\n        require(!tradingOpen,\"trading is already open\");\n\n        IUniswapV2Router02 _uniswapV2Router =\n            IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n\n        _isExcludedFromSellLock[address(uniswapV2Router)] = true;\n        _isExcludedFromSellLock[address(uniswapV2Pair)] = true;\n\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        swapEnabled = true;\n        cooldownEnabled = true;\n        _maxWalletAmount = 25e9 * 10**9;\n        tradingOpen = true;\n        tradingOpenTime = block.timestamp;\n        _maxTokensToSwapForFees = 2e10 * 10**9;\n\n        for (uint i = 0; i < lockSells.length; i++) {\n            sellLock[lockSells[i]] = tradingOpenTime + duration;\n        }\n\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n    }","contract":"TiggerDAOCapital","time":0},{"type":"external-function ","before":"function setBots(address[] memory bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }","after":"function setBots(address[] calldata bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }","contract":"TiggerDAOCapital","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public _reflectionFee = 1;","after":"uint256 public constant _reflectionFee = 1;","contract":"TiggerDAOCapital","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public _tokensFee = 12;","after":"uint256 public constant _tokensFee = 12;","contract":"TiggerDAOCapital","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public _tokensFeeFirst2Days = 24;","after":"uint256 public constant _tokensFeeFirst2Days = 24;","contract":"TiggerDAOCapital","time":0},{"type":"immutable-restrict-modification ","before":"address payable private _feeAddrWallet1;","after":"address payable private immutable _feeAddrWallet1;","contract":"TiggerDAOCapital","time":0},{"type":"immutable-restrict-modification ","before":"address payable private _feeAddrWallet2;","after":"address payable private immutable _feeAddrWallet2;","contract":"TiggerDAOCapital","time":0},{"type":"immutable-restrict-modification ","before":"address payable private _liquidityWallet;","after":"address payable private immutable _liquidityWallet;","contract":"TiggerDAOCapital","time":0}]}
{"time":194,"results":[{"type":"external-function ","before":"function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address releaseMintTo_,\r\n        uint256 releaseTokenId_,\r\n        string memory releaseTokenUri_,\r\n        string memory defaultUri_,\r\n        address[] memory payees_,\r\n        uint256[] memory shares_\r\n    ) public virtual initializer {\r\n        __ERC1155PaymentSplitterUAE_init(name_, symbol_, releaseMintTo_, releaseTokenId_, releaseTokenUri_, defaultUri_, payees_, shares_);\r\n    }","after":"function initialize(\r\n        string calldata name_,\r\n        string calldata symbol_,\r\n        address releaseMintTo_,\r\n        uint256 releaseTokenId_,\r\n        string calldata releaseTokenUri_,\r\n        string calldata defaultUri_,\r\n        address[] calldata payees_,\r\n        uint256[] calldata shares_\r\n    ) public virtual initializer {\r\n        __ERC1155PaymentSplitterUAE_init(name_, symbol_, releaseMintTo_, releaseTokenId_, releaseTokenUri_, defaultUri_, payees_, shares_);\r\n    }","contract":"ERC1155PaymentSplitterUAEUpgradeable","time":0},{"type":"external-function ","before":"function updateReleaseTokenURI(string memory releaseTokenUri_) external virtual onlyOwner {\r\n        _releaseTokenUri = releaseTokenUri_;\r\n        emit ReleaseTokenUriUpdated(releaseTokenUri_);\r\n    }","after":"function updateReleaseTokenURI(string calldata releaseTokenUri_) external virtual onlyOwner {\r\n        _releaseTokenUri = releaseTokenUri_;\r\n        emit ReleaseTokenUriUpdated(releaseTokenUri_);\r\n    }","contract":"ERC1155PaymentSplitterUAEUpgradeable","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"ERC1155PaymentSplitterUAEUpgradeable","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"ERC1155PaymentSplitterUAEUpgradeable","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"ERC1155PaymentSplitterUAEUpgradeable","time":0}]}
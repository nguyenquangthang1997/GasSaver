{"time":247,"results":[{"type":"external-function ","before":"function freeMint(\r\n        uint256[] calldata freeMintTokens_,\r\n        uint256[] calldata preSaleTokens_,\r\n        string memory nonce_,\r\n        bytes calldata signature_\r\n    )\r\n        external\r\n        payable\r\n        onlySignedTx(\r\n            freeMintTokens_.length + preSaleTokens_.length,\r\n            nonce_,\r\n            signature_\r\n        )\r\n    {\r\n        uint256 quantity_ = freeMintTokens_.length + preSaleTokens_.length;\r\n        require(_saleState == SaleStates.FREE_MINT, \"Free mint not active\");\r\n        require(quantity_ > 0, \"You must mint at least 1\");\r\n        require(\r\n            quantity_ <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(\r\n            msg.value >= PRE_SALE_PRICE * preSaleTokens_.length,\r\n            \"Insufficient eth to process the order\"\r\n        );\r\n        require(\r\n            !usedTokenIds(freeMintTokens_, preSaleTokens_),\r\n            \"Token already used\"\r\n        );\r\n\r\n        for (uint256 i; i < freeMintTokens_.length; i++) {\r\n            require(\r\n                msg.sender == _aaaContract.ownerOf(freeMintTokens_[i]),\r\n                \"Token not owned\"\r\n            );\r\n        }\r\n\r\n        for (uint256 i; i < preSaleTokens_.length; i++) {\r\n            require(\r\n                msg.sender == _aaaContract.ownerOf(preSaleTokens_[i]),\r\n                \"Token not owned\"\r\n            );\r\n        }\r\n\r\n        setUsedTokenIds(freeMintTokens_, preSaleTokens_);\r\n\r\n        _safeMint(msg.sender, quantity_);\r\n    }","after":"function freeMint(\r\n        uint256[] calldata freeMintTokens_,\r\n        uint256[] calldata preSaleTokens_,\r\n        string calldata nonce_,\r\n        bytes calldata signature_\r\n    )\r\n        external\r\n        payable\r\n        onlySignedTx(\r\n            freeMintTokens_.length + preSaleTokens_.length,\r\n            nonce_,\r\n            signature_\r\n        )\r\n    {\r\n        uint256 quantity_ = freeMintTokens_.length + preSaleTokens_.length;\r\n        require(_saleState == SaleStates.FREE_MINT, \"Free mint not active\");\r\n        require(quantity_ > 0, \"You must mint at least 1\");\r\n        require(\r\n            quantity_ <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(\r\n            msg.value >= PRE_SALE_PRICE * preSaleTokens_.length,\r\n            \"Insufficient eth to process the order\"\r\n        );\r\n        require(\r\n            !usedTokenIds(freeMintTokens_, preSaleTokens_),\r\n            \"Token already used\"\r\n        );\r\n\r\n        for (uint256 i; i < freeMintTokens_.length; i++) {\r\n            require(\r\n                msg.sender == _aaaContract.ownerOf(freeMintTokens_[i]),\r\n                \"Token not owned\"\r\n            );\r\n        }\r\n\r\n        for (uint256 i; i < preSaleTokens_.length; i++) {\r\n            require(\r\n                msg.sender == _aaaContract.ownerOf(preSaleTokens_[i]),\r\n                \"Token not owned\"\r\n            );\r\n        }\r\n\r\n        setUsedTokenIds(freeMintTokens_, preSaleTokens_);\r\n\r\n        _safeMint(msg.sender, quantity_);\r\n    }","contract":"AngryApeArmyEvolutionCollection","time":0},{"type":"external-function ","before":"function preSaleMint(\r\n        bytes32[] calldata merkleProof_,\r\n        string memory nonce_,\r\n        bytes calldata signature_\r\n    ) external payable onlySignedTx(1, nonce_, signature_) {\r\n        require(_saleState == SaleStates.PRE_SALE, \"Pre sale not active\");\r\n        require(!whitelistStore[msg.sender], \"Whitelist used\");\r\n        require(\r\n            1 <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(msg.value >= PRE_SALE_PRICE, \"Insufficient eth to process the order\");\r\n        require(\r\n            MerkleProof.verify(\r\n                merkleProof_,\r\n                merkleRoot,\r\n                keccak256(abi.encodePacked(msg.sender))\r\n            ),\r\n            \"Proof failed\"\r\n        );\r\n\r\n        whitelistStore[msg.sender] = true;\r\n\r\n        _safeMint(msg.sender, 1);\r\n    }","after":"function preSaleMint(\r\n        bytes32[] calldata merkleProof_,\r\n        string calldata nonce_,\r\n        bytes calldata signature_\r\n    ) external payable onlySignedTx(1, nonce_, signature_) {\r\n        require(_saleState == SaleStates.PRE_SALE, \"Pre sale not active\");\r\n        require(!whitelistStore[msg.sender], \"Whitelist used\");\r\n        require(\r\n            1 <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(msg.value >= PRE_SALE_PRICE, \"Insufficient eth to process the order\");\r\n        require(\r\n            MerkleProof.verify(\r\n                merkleProof_,\r\n                merkleRoot,\r\n                keccak256(abi.encodePacked(msg.sender))\r\n            ),\r\n            \"Proof failed\"\r\n        );\r\n\r\n        whitelistStore[msg.sender] = true;\r\n\r\n        _safeMint(msg.sender, 1);\r\n    }","contract":"AngryApeArmyEvolutionCollection","time":0},{"type":"external-function ","before":"function mint(\r\n        uint8 quantity_,\r\n        string memory nonce_,\r\n        bytes calldata signature_\r\n    ) external payable onlySignedTx(quantity_, nonce_, signature_) {\r\n        require(_saleState == SaleStates.SALE, \"Sale not active\");\r\n        require(quantity_ > 0, \"You must mint at least 1\");\r\n        require(\r\n            quantity_ <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(\r\n            quantity_ <= MAX_BATCH_MINT,\r\n            \"Cannot mint more than MAX_BATCH_MINT per transaction\"\r\n        );\r\n        require(\r\n            (balanceOf(msg.sender) + quantity_) <= MAX_BATCH_MINT,\r\n            \"Any one wallet cannot hold more than MAX_BATCH_MINT\"\r\n        );\r\n        require(\r\n            msg.value >= SALE_PRICE * quantity_,\r\n            \"Insufficient eth to process the order\"\r\n        );\r\n\r\n        _safeMint(msg.sender, quantity_);\r\n    }","after":"function mint(\r\n        uint8 quantity_,\r\n        string calldata nonce_,\r\n        bytes calldata signature_\r\n    ) external payable onlySignedTx(quantity_, nonce_, signature_) {\r\n        require(_saleState == SaleStates.SALE, \"Sale not active\");\r\n        require(quantity_ > 0, \"You must mint at least 1\");\r\n        require(\r\n            quantity_ <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(\r\n            quantity_ <= MAX_BATCH_MINT,\r\n            \"Cannot mint more than MAX_BATCH_MINT per transaction\"\r\n        );\r\n        require(\r\n            (balanceOf(msg.sender) + quantity_) <= MAX_BATCH_MINT,\r\n            \"Any one wallet cannot hold more than MAX_BATCH_MINT\"\r\n        );\r\n        require(\r\n            msg.value >= SALE_PRICE * quantity_,\r\n            \"Insufficient eth to process the order\"\r\n        );\r\n\r\n        _safeMint(msg.sender, quantity_);\r\n    }","contract":"AngryApeArmyEvolutionCollection","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _uri) public onlyOwner {\r\n        require(\r\n            bytes(_uri)[bytes(_uri).length - 1] == bytes1(\"/\"),\r\n            \"Must set trailing slash\"\r\n        );\r\n        _baseURI_ = _uri;\r\n        emit SetBaseURI(_uri);\r\n    }","after":"function setBaseURI(string calldata _uri) public onlyOwner {\r\n        require(\r\n            bytes(_uri)[bytes(_uri).length - 1] == bytes1(\"/\"),\r\n            \"Must set trailing slash\"\r\n        );\r\n        _baseURI_ = _uri;\r\n        emit SetBaseURI(_uri);\r\n    }","contract":"AngryApeArmyEvolutionCollection","time":0}]}
{"time":599,"results":[{"type":"state-data-arrangement ","before":"\n\n  string baseU\n\n  string public baseExtension = \".jso\n\n  uint256 public mintCost = 0.08 eth\n\n  uint256 public maxSupply = 104\n\n  uint256 private _currentTokenId =\n\n  uint256 public ownerMaxSupply = 4\n\n  uint256 public ownerTokenId = 100\n\n  address public signerAddre\n\n  uint256 public maxMintAmount =\n\n  uint256 public nftPerAddressLimit =\n\n  bool public pausedMint = tr\n\n  mapping(address => uint256) public addressMintedBalan","after":"\n  string baseU\n\n  string public baseExtension = \".jso\n\n  uint256 public mintCost = 0.08 eth\n\n  uint256 public maxSupply = 104\n\n  uint256 private _currentTokenId =\n\n  uint256 public ownerMaxSupply = 4\n\n  uint256 public ownerTokenId = 100\n\n  uint256 public maxMintAmount =\n\n  uint256 public nftPerAddressLimit =\n\n  mapping(address => uint256) public addressMintedBalan\n\n  address public signerAddre\n\n  bool public pausedMint = tr\n","contract":"Acrocalypse","time":0},{"type":"external-function ","before":"\n  function mint(uint256 _mintAmount, bytes memory signature) public payable {\n    require(!pausedMint, \"the contract is paused\");\n    require(_mintAmount > 0, \"need to mint at least 1 NFT\");    \n    require((_currentTokenId + _mintAmount) < (maxSupply - ownerMaxSupply), \"Not allowed to mint from owners pool\");\n    require(_mintAmount <= maxMintAmount, \"max mint amount per session exceeded\");\n    require(verifySender(signature), \"invalid access\");\n\n    uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n    require((ownerMintedCount + _mintAmount) <= nftPerAddressLimit, \"max NFT per address exceeded\");\n    \n    require(msg.value >= mintCost * _mintAmount);\n    \n    for (uint256 i = 1; i <= _mintAmount; i++) {\n      \n      addressMintedBalance[msg.sender]++;\n\n      uint256 newTokenId = _getNextTokenId();\n      _safeMint(msg.sender, newTokenId);\n      _incrementTokenId();\n    }\n","after":"\n  function mint(uint256 _mintAmount, bytes calldata signature) public payable {\n    require(!pausedMint, \"the contract is paused\");\n    require(_mintAmount > 0, \"need to mint at least 1 NFT\");    \n    require((_currentTokenId + _mintAmount) < (maxSupply - ownerMaxSupply), \"Not allowed to mint from owners pool\");\n    require(_mintAmount <= maxMintAmount, \"max mint amount per session exceeded\");\n    require(verifySender(signature), \"invalid access\");\n\n    uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n    require((ownerMintedCount + _mintAmount) <= nftPerAddressLimit, \"max NFT per address exceeded\");\n    \n    require(msg.value >= mintCost * _mintAmount);\n    \n    for (uint256 i = 1; i <= _mintAmount; i++) {\n      \n      addressMintedBalance[msg.sender]++;\n\n      uint256 newTokenId = _getNextTokenId();\n      _safeMint(msg.sender, newTokenId);\n      _incrementTokenId();\n    }\n","contract":"Acrocalypse","time":0},{"type":"external-function ","before":"\n  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\n    baseExtension = _newBaseExtension;\n","after":"\n  function setBaseExtension(string calldata _newBaseExtension) public onlyOwner {\n    baseExtension = _newBaseExtension;\n","contract":"Acrocalypse","time":0},{"type":"constant-restrict-modification  ","before":"\n  uint256 public maxSupply = 104","after":"\n  uint256 public constant maxSupply = 104","contract":"Acrocalypse","time":1},{"type":"constant-restrict-modification  ","before":"\n  uint256 public ownerMaxSupply = 4","after":"\n  uint256 public constant ownerMaxSupply = 4","contract":"Acrocalypse","time":1}]}
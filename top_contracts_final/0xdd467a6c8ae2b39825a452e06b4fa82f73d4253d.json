{"time":583,"results":[{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) \n        public onlyOwner \n    {\n        MCV_PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) \n        public onlyOwner \n    {\n        MCV_PROVENANCE = provenanceHash;\n    }","contract":"MarsCatsVoyage","time":0},{"type":"external-function ","before":"function mintCat(address sender, uint numberOfTokens, string memory metadataURI)\n        public payable\n    {\n        require(saleIsActive, \"Sale must be active to mint Cat\");\n        require(numberOfTokens <= maxCatPurchase, \"Can only mint 10 tokens at a time\");\n        require(catPrice.mul(numberOfTokens) <= msg.value, \"Ether value sent is not correct\");\n        require(_tokenIds.current().add(numberOfTokens) <= maxCatTokens, \"That's all! No more tokens\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            _tokenIds.increment();\n\n            uint256 id = _tokenIds.current();\n            _safeMint(sender, id);\n            _setTokenURI(id, metadataURI);\n        }\n    }","after":"function mintCat(address sender, uint numberOfTokens, string calldata metadataURI)\n        public payable\n    {\n        require(saleIsActive, \"Sale must be active to mint Cat\");\n        require(numberOfTokens <= maxCatPurchase, \"Can only mint 10 tokens at a time\");\n        require(catPrice.mul(numberOfTokens) <= msg.value, \"Ether value sent is not correct\");\n        require(_tokenIds.current().add(numberOfTokens) <= maxCatTokens, \"That's all! No more tokens\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            _tokenIds.increment();\n\n            uint256 id = _tokenIds.current();\n            _safeMint(sender, id);\n            _setTokenURI(id, metadataURI);\n        }\n    }","contract":"MarsCatsVoyage","time":0},{"type":"external-function ","before":"function setTokenUri(uint tokenId, string memory metadataURI)\n        public onlyOwner\n    {\n        _setTokenURI(tokenId, metadataURI);\n    }","after":"function setTokenUri(uint tokenId, string calldata metadataURI)\n        public onlyOwner\n    {\n        _setTokenURI(tokenId, metadataURI);\n    }","contract":"MarsCatsVoyage","time":0}]}
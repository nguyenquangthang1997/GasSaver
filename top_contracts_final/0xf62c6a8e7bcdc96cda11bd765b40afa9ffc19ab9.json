{"time":166,"results":[{"type":"external-function ","before":"function setContractURI(string memory _cURI) external onlyOwner {\n        _contractURI = _cURI;\n    }","after":"function setContractURI(string calldata _cURI) external onlyOwner {\n        _contractURI = _cURI;\n    }","contract":"HeadDao","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newURI) public onlyOwner {\n        baseURI = _newURI;\n    }","after":"function setBaseURI(string calldata _newURI) public onlyOwner {\n        baseURI = _newURI;\n    }","contract":"HeadDao","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"HeadDao","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public totalCount = 10000;","after":"uint256 public constant totalCount = 10000;","contract":"HeadDao","time":1},{"type":"constant-restrict-modification  ","before":"address private community_wallet = 0x77a45d5BD81916901474ef1a162b34D8FAaE1030;","after":"address private constant community_wallet = 0x77a45d5BD81916901474ef1a162b34D8FAaE1030;","contract":"HeadDao","time":1},{"type":"constant-restrict-modification  ","before":"address private RZ_wallet = 0x56314CCd8BB78ae9b874eb4fC3B13EDC55734694;","after":"address private constant RZ_wallet = 0x56314CCd8BB78ae9b874eb4fC3B13EDC55734694;","contract":"HeadDao","time":1},{"type":"constant-restrict-modification  ","before":"address private AR_wallet = 0xEa46B6534E48dA658cA51154755Ac3cc8f9CAA0D;","after":"address private constant AR_wallet = 0xEa46B6534E48dA658cA51154755Ac3cc8f9CAA0D;","contract":"HeadDao","time":1},{"type":"constant-restrict-modification  ","before":"address private shamdoo_wallet = 0x11360F0c5552443b33720a44408aba01a809905e;","after":"address private constant shamdoo_wallet = 0x11360F0c5552443b33720a44408aba01a809905e;","contract":"HeadDao","time":1},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"HeadDao","time":1}]}
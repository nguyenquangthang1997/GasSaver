{"time":186,"results":[{"type":"state-data-arrangement ","before":"\nbool paused = true;\nbool unpausable;\nuint startTime;\nuint pauseTime;\naddress whitelist;\nbool forceCeremony;\nuint16 public tokenCount;\nuint16 constant TOKEN_MAX = 8888;\nuint16 tokensGiven;\nuint16 constant TOKENS_GIVEAWAY = 300;\nuint constant PRICE_MINT = 0.0888 ether;\nstring __uriBase;\nstring __uriSuffix;\nuint constant COOLDOWN = 10;\nuint16 constant TRANSACTION_LIMIT = 10;\nmapping(address => Reservation) reservations;\nmapping(address => bool) public catMinted;","after":"uint startTime;\nuint pauseTime;\nuint constant PRICE_MINT = 0.0888 ether;\nstring __uriBase;\nstring __uriSuffix;\nuint constant COOLDOWN = 10;\nmapping(address => Reservation) reservations;\nmapping(address => bool) public catMinted;\naddress whitelist;\nuint16 public tokenCount;\nuint16 constant TOKEN_MAX = 8888;\nuint16 tokensGiven;\nuint16 constant TOKENS_GIVEAWAY = 300;\nuint16 constant TRANSACTION_LIMIT = 10;\nbool paused = true;\nbool unpausable;\nbool forceCeremony;\n","contract":"Ronin","time":7},{"type":"external-function ","before":"function catMint(bytes32[] memory merkleProof) external payable{\r\n        require(!paused,\"paused\");\r\n        require(phase() != Phase.Init,\"phase\");\r\n        require(tokenCount < TOKEN_MAX,\"TOKEN_MAX\");\r\n\r\n        require(msg.value >= PRICE_MINT,\"PRICE_MINT\");\r\n        require(!catMinted[msg.sender],\"catMinted\");\r\n        require(RoninWhitelist(whitelist).isWhitelisted(merkleProof,msg.sender),\"whitelist\");\r\n        catMinted[msg.sender] = true;\r\n\r\n        _mint(msg.sender,uint(++tokenCount));\r\n    }","after":"function catMint(bytes32[] calldata merkleProof) external payable{\r\n        require(!paused,\"paused\");\r\n        require(phase() != Phase.Init,\"phase\");\r\n        require(tokenCount < TOKEN_MAX,\"TOKEN_MAX\");\r\n\r\n        require(msg.value >= PRICE_MINT,\"PRICE_MINT\");\r\n        require(!catMinted[msg.sender],\"catMinted\");\r\n        require(RoninWhitelist(whitelist).isWhitelisted(merkleProof,msg.sender),\"whitelist\");\r\n        catMinted[msg.sender] = true;\r\n\r\n        _mint(msg.sender,uint(++tokenCount));\r\n    }","contract":"Ronin","time":0},{"type":"external-function ","before":"function updateURI(string memory _uriBase, string memory _uriSuffix) public onlyOwner{\r\n        __uriBase   = _uriBase;\r\n        __uriSuffix = _uriSuffix;\r\n    }","after":"function updateURI(string calldata _uriBase, string calldata _uriSuffix) public onlyOwner{\r\n        __uriBase   = _uriBase;\r\n        __uriSuffix = _uriSuffix;\r\n    }","contract":"Ronin","time":0},{"type":"immutable-restrict-modification ","before":"address whitelist;","after":"address immutable whitelist;","contract":"Ronin","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 merkleRoot;","after":"bytes32 immutable merkleRoot;","contract":"RoninWhitelist","time":0}]}
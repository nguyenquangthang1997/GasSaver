{"time":65,"results":[{"type":"state-data-arrangement ","before":"\nstring public name;\nstring public symbol;\nuint8 public decimals = 18;\nuint256 public totalSupply;\nmapping (address => uint256) public balanceOf;\nmapping (address => mapping (address => uint256)) private _allowance;\nmapping (address => bool) public LockList;\nmapping (address => uint256) public LockedTokens;\nbool public TransferAllowed;","after":"string public name;\nstring public symbol;\nuint256 public totalSupply;\nmapping (address => uint256) public balanceOf;\nmapping (address => mapping (address => uint256)) private _allowance;\nmapping (address => bool) public LockList;\nmapping (address => uint256) public LockedTokens;\nuint8 public decimals = 18;\nbool public TransferAllowed;\n","contract":"TOKENERC20","time":0},{"type":"external-function ","before":"function dropToken(address[] memory receivers, uint256[] memory values) onlyOwner public {\n    require(receivers.length != 0);\n    require(receivers.length == values.length);\n\n    for (uint256 i = 0; i < receivers.length; i++) {\n      address receiver = receivers[i];\n      uint256 amount = values[i];\n\n      transfer(receiver, amount);\n      airDropHistory[receiver] += amount;\n\n      emit AirDrop(receiver, amount);\n    }\n  }","after":"function dropToken(address[] calldata receivers, uint256[] calldata values) onlyOwner public {\n    require(receivers.length != 0);\n    require(receivers.length == values.length);\n\n    for (uint256 i = 0; i < receivers.length; i++) {\n      address receiver = receivers[i];\n      uint256 amount = values[i];\n\n      transfer(receiver, amount);\n      airDropHistory[receiver] += amount;\n\n      emit AirDrop(receiver, amount);\n    }\n  }","contract":"DoctorsCoin","time":0},{"type":"external-function ","before":"function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }","after":"function approveAndCall(address _spender, uint256 _value, bytes calldata _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }","contract":"DoctorsCoin","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"DoctorsCoin","time":0}]}
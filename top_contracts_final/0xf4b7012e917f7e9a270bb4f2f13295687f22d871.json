{"time":58,"results":[{"type":"external-function ","before":"function fuseDroid(\n    uint256 sourceTokenId,\n    uint256 destinationTokenId,\n    uint256 destinationSerialId,\n    bytes32 destinationBiosHash,\n    bytes memory sig\n  ) external nonReentrant {\n    require(_isFusionActive, \"Fusion not active\");\n    require(sourceTokenId != destinationTokenId, \"Droids cannot be the same\");\n    require(\n      savageDroids.ownerOf(sourceTokenId) == msg.sender,\n      \"Must own source Droid\"\n    );\n    require(\n      savageDroids.ownerOf(destinationTokenId) == msg.sender,\n      \"Must own destination Droid\"\n    );\n\n    // Verify signature\n    bytes32 message = getFusionSigningHash(\n      msg.sender,\n      sourceTokenId,\n      destinationTokenId,\n      destinationSerialId,\n      destinationBiosHash\n    ).toEthSignedMessageHash();\n    require(\n      ECDSA.recover(message, sig) == signVerifier,\n      \"Permission to call fusion function failed\"\n    );\n\n    // Emit fusion event for destination droid\n    uint256 destinationFactionId = savageDroids.getFaction(destinationTokenId);\n    emit Fusion(\n      msg.sender,\n      destinationTokenId,\n      destinationSerialId,\n      destinationFactionId,\n      destinationBiosHash\n    );\n\n    //Burn old source droid\n    savageDroids.burnToken(sourceTokenId);\n  }","after":"function fuseDroid(\n    uint256 sourceTokenId,\n    uint256 destinationTokenId,\n    uint256 destinationSerialId,\n    bytes32 destinationBiosHash,\n    bytes calldata sig\n  ) external nonReentrant {\n    require(_isFusionActive, \"Fusion not active\");\n    require(sourceTokenId != destinationTokenId, \"Droids cannot be the same\");\n    require(\n      savageDroids.ownerOf(sourceTokenId) == msg.sender,\n      \"Must own source Droid\"\n    );\n    require(\n      savageDroids.ownerOf(destinationTokenId) == msg.sender,\n      \"Must own destination Droid\"\n    );\n\n    // Verify signature\n    bytes32 message = getFusionSigningHash(\n      msg.sender,\n      sourceTokenId,\n      destinationTokenId,\n      destinationSerialId,\n      destinationBiosHash\n    ).toEthSignedMessageHash();\n    require(\n      ECDSA.recover(message, sig) == signVerifier,\n      \"Permission to call fusion function failed\"\n    );\n\n    // Emit fusion event for destination droid\n    uint256 destinationFactionId = savageDroids.getFaction(destinationTokenId);\n    emit Fusion(\n      msg.sender,\n      destinationTokenId,\n      destinationSerialId,\n      destinationFactionId,\n      destinationBiosHash\n    );\n\n    //Burn old source droid\n    savageDroids.burnToken(sourceTokenId);\n  }","contract":"FusionModule","time":0}]}
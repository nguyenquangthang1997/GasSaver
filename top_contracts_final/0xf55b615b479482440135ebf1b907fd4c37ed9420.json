{"time":152,"results":[{"type":"external-function ","before":"function codeSummon(bytes memory signature, bytes32 code)\n        public\n        nonReentrant\n    {\n        require(mintStarted(), 'Mint not started');\n\n        // construct an expected hash, given the parameters\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    keccak256('CodeSummon(address minter,bytes32 code)'),\n                    msg.sender,\n                    code\n                )\n            )\n        );\n        // now recover the signer from the provided signature\n        address signer = ECDSA.recover(digest, signature);\n\n        // make sure the recover extracted a signer, but beware, because this\n        // can return non-zero for some invalid cases (apparently?)\n        require(signer != address(0), 'ECDSA: invalid signature');\n        require(signer == codeSigner, 'Signature not by signer');\n\n        // verify this code hasn't already been used\n        require(usedCodes[code] == false, 'Code already used');\n        usedCodes[code] = true;\n\n        _mintPony();\n    }","after":"function codeSummon(bytes calldata signature, bytes32 code)\n        public\n        nonReentrant\n    {\n        require(mintStarted(), 'Mint not started');\n\n        // construct an expected hash, given the parameters\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    keccak256('CodeSummon(address minter,bytes32 code)'),\n                    msg.sender,\n                    code\n                )\n            )\n        );\n        // now recover the signer from the provided signature\n        address signer = ECDSA.recover(digest, signature);\n\n        // make sure the recover extracted a signer, but beware, because this\n        // can return non-zero for some invalid cases (apparently?)\n        require(signer != address(0), 'ECDSA: invalid signature');\n        require(signer == codeSigner, 'Signature not by signer');\n\n        // verify this code hasn't already been used\n        require(usedCodes[code] == false, 'Code already used');\n        usedCodes[code] = true;\n\n        _mintPony();\n    }","contract":"ElysianFields","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory _hash) public onlyOwner {\n        METADATA_PROVENANCE_HASH = _hash;\n    }","after":"function setProvenanceHash(string calldata _hash) public onlyOwner {\n        METADATA_PROVENANCE_HASH = _hash;\n    }","contract":"ElysianFields","time":0}]}
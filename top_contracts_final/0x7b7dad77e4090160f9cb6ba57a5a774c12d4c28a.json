{"time":98,"results":[{"type":"external-function ","before":"function scorchNDucks(uint256[] memory tokenIds) public {\n        require(scorchIsActive, \"Scorching is not active\");\n        require(ogd.isApprovedForAll(msg.sender, address(this)), \"Contract is not approved to transfer your OG Ducks.\");\n        require(tokenIds.length <= 10, \"Can't scorch more than 10 Ducks at once.\");\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(ogd.ownerOf(tokenIds[i]) == msg.sender, \"You must own the requested token\");\n\n            // Burn OG Ducks\n            ogd.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, tokenIds[i]);\n            // Mint Duck\n            _tokenIds.increment();\n            _mint(msg.sender, _tokenIds.current());\n            scorchDuckToOGDuck[_tokenIds.current()] = tokenIds[i];\n        }\n        emit ScorchMultiple(msg.sender, tokenIds);\n    }","after":"function scorchNDucks(uint256[] calldata tokenIds) public {\n        require(scorchIsActive, \"Scorching is not active\");\n        require(ogd.isApprovedForAll(msg.sender, address(this)), \"Contract is not approved to transfer your OG Ducks.\");\n        require(tokenIds.length <= 10, \"Can't scorch more than 10 Ducks at once.\");\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(ogd.ownerOf(tokenIds[i]) == msg.sender, \"You must own the requested token\");\n\n            // Burn OG Ducks\n            ogd.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, tokenIds[i]);\n            // Mint Duck\n            _tokenIds.increment();\n            _mint(msg.sender, _tokenIds.current());\n            scorchDuckToOGDuck[_tokenIds.current()] = tokenIds[i];\n        }\n        emit ScorchMultiple(msg.sender, tokenIds);\n    }","contract":"ScorchingDucks","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        _provenanceHash = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        _provenanceHash = provenanceHash;\n    }","contract":"ScorchingDucks","time":0},{"type":"external-function ","before":"function setBaseURL(string memory baseURI) public onlyOwner {\n        _baseURL = baseURI;\n    }","after":"function setBaseURL(string calldata baseURI) public onlyOwner {\n        _baseURL = baseURI;\n    }","contract":"ScorchingDucks","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private _maxSupply = 10000;","after":"uint256 private constant _maxSupply = 10000;","contract":"ScorchingDucks","time":1}]}
{"time":254,"results":[{"type":"state-data-arrangement ","before":"\n�                       \n�            ██     \n█                 �\n          ██   �\n�     \n           �\naBlock {\n    // Provide a renderable SVG string\nhe given slot\n    function getData(uint256 slot) external pure ret\n(bytes memory);\n\n    // Provide a human readable\nmory);\n}\n\n// ERC20 used for the 'withd\nt) external view returns (ui\n);\n}\n\ncontract Blockhe\ns ERC721Tradable, ERC2\nntractWideRoyalties {\n\nvent BlockheadReconfig\nuint256 tokenId);\n\n    // ","after":"�                       \n�            ██     \n█                 �\n          ██   �\naBlock {\n    // Provide a renderable SVG string\nhe given slot\n    function getData(uint256 slot) external pure ret\n(bytes memory);\n\n    // Provide a human readable\nmory);\n}\n\n// ERC20 used for the 'withd\nt) external view returns (ui\n);\n}\n\ncontract Blockhe\ns ERC721Tradable, ERC2\nntractWideRoyalties {\n\nvent BlockheadReconfig\nuint256 tokenId);\n\n    // \n�     \n           �\n","contract":"Blockheads","time":0},{"type":"external-function ","before":"ides[token1].background = newBG1;\n            overrides[token2].background = newBG2;\n            overrides[token1].backgroundOverridden = true;\n            overrides[token2].backgroundOverridden = true;\n        }\n        if (body) {\n            uint32 newBody1 = bodyIndex(token2);\n            uint32 newBody2 = bodyIndex(token1);\n            overrides[token1].body = newB","after":"ides[token1].background = newBG1;\n            overrides[token2].background = newBG2;\n            overrides[token1].backgroundOverridden = true;\n            overrides[token2].backgroundOverridden = true;\n        }\n        if (body) {\n            uint32 newBody1 = bodyIndex(token2);\n            uint32 newBody2 = bodyIndex(token1);\n            overrides[token1].body = newB","contract":"Blockheads","time":0},{"type":"external-function ","before":"te all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\n    /// @return _receiver - address of who should be sent the royalty payment\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\n        external\n        view\n        returns (address _receiver, uint256 _royaltyAmount);\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract ContextMixin {\n    function msgSender()\n        internal\n        view\n        returns (address payable sender)\n    {\n        if (msg.sender == address(this)) {\n            bytes memory arr","after":"te all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\n    /// @return _receiver - address of who should be sent the royalty payment\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\n        external\n        view\n        returns (address _receiver, uint256 _royaltyAmount);\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract ContextMixin {\n    function msgSender()\n        internal\n        view\n        returns (address payable sender)\n    {\n        if (msg.sender == address(this)) {\n            bytes memory arr","contract":"Blockheads","time":0}]}
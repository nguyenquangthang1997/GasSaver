{"time":522,"results":[{"type":"de-morgan-condition ","before":"f (!isBoosted && !isKillSwitc","after":"!(f (isBoosted && isKillSwitc)","loc":{"start":{"line":1933,"column":12},"end":{"line":1933,"column":27}},"contract":"Dubiex","time":0},{"type":"de-morgan-condition ","before":"f (!revertOnError && !_orderExists(maker, ","after":"!(f (revertOnError && _orderExists(maker, )","loc":{"start":{"line":1937,"column":12},"end":{"line":1937,"column":53}},"contract":"Dubiex","time":0},{"type":"de-morgan-condition ","before":"   !_unpacked.flags.isMakerERC721 && !_unpacked.flags.isTakerERC","after":"!(   _unpacked.flags.isMakerERC721 && _unpacked.flags.isTakerERC)","loc":{"start":{"line":2004,"column":12},"end":{"line":2004,"column":63}},"contract":"Dubiex","time":0},{"type":"de-morgan-condition ","before":"f (!validTakerValue || !orderExistsAndNotHid","after":"!(f (validTakerValue || orderExistsAndNotHid)","loc":{"start":{"line":2114,"column":16},"end":{"line":2114,"column":37}},"contract":"Dubiex","time":0},{"type":"de-morgan-condition ","before":"re(!success || !isERC","after":"!(re(success || isERC)","loc":{"start":{"line":2378,"column":20},"end":{"line":2378,"column":33}},"contract":"Dubiex","time":0},{"type":"external-function ","before":"   function makeOrder(DubiexLib.MakeOrderInput memory input)\n        external\n        payable\n        nonReentrant\n        returns (uint32)\n    {\n        require(!_killSwitchOn, \"Dubiex: make order prevented by kill switch\");\n\n        uint256 excessEth = msg.value;\n        uint32 orderId;\n\n        (orderId, excessEth) = _makeOrderInternal({\n            input: input,\n            maker: msg.sender,\n            excessEthAndIntrinsicFuel: excessEth,\n            isBoosted: false,\n            revertOnUpdateError: true\n        });\n\n        _refundExcessEth(excessEth);\n\n        return orderId;\n  ","after":"   function makeOrder(DubiexLib.MakeOrderInput calldata input)\n        external\n        payable\n        nonReentrant\n        returns (uint32)\n    {\n        require(!_killSwitchOn, \"Dubiex: make order prevented by kill switch\");\n\n        uint256 excessEth = msg.value;\n        uint32 orderId;\n\n        (orderId, excessEth) = _makeOrderInternal({\n            input: input,\n            maker: msg.sender,\n            excessEthAndIntrinsicFuel: excessEth,\n            isBoosted: false,\n            revertOnUpdateError: true\n        });\n\n        _refundExcessEth(excessEth);\n\n        return orderId;\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function makeOrders(DubiexLib.MakeOrderInput[] memory inputs)\n        external\n        payable\n        nonReentrant\n        returns (uint32[] memory)\n    {\n        require(!_killSwitchOn, \"Dubiex: make order prevented by kill switch\");\n        require(inputs.length > 0, \"Dubiex: empty inputs\");\n\n        uint32[] memory orderIds = new uint32[](inputs.length);\n\n        uint256 excessEth = msg.value;\n\n        for (uint256 i = 0; i < inputs.length; i++) {\n            uint32 orderId;\n\n            (orderId, excessEth) = _makeOrderInternal({\n                input: inputs[i],\n                maker: msg.sender,\n                excessEthAndIntrinsicFuel: excessEth,\n                isBoosted: false,\n                revertOnUpdateError: false\n            });\n\n            orderIds[i] = orderId;\n        }\n\n        _refundExcessEth(excessEth);\n\n        return orderIds;\n  ","after":"   function makeOrders(DubiexLib.MakeOrderInput[] calldata inputs)\n        external\n        payable\n        nonReentrant\n        returns (uint32[] memory)\n    {\n        require(!_killSwitchOn, \"Dubiex: make order prevented by kill switch\");\n        require(inputs.length > 0, \"Dubiex: empty inputs\");\n\n        uint32[] memory orderIds = new uint32[](inputs.length);\n\n        uint256 excessEth = msg.value;\n\n        for (uint256 i = 0; i < inputs.length; i++) {\n            uint32 orderId;\n\n            (orderId, excessEth) = _makeOrderInternal({\n                input: inputs[i],\n                maker: msg.sender,\n                excessEthAndIntrinsicFuel: excessEth,\n                isBoosted: false,\n                revertOnUpdateError: false\n            });\n\n            orderIds[i] = orderId;\n        }\n\n        _refundExcessEth(excessEth);\n\n        return orderIds;\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function cancelOrder(DubiexLib.CancelOrderInput memory input)\n        external\n        nonReentrant\n    {\n        _cancelOrderInternal({\n            maker: input.maker,\n            id: input.id,\n            intrinsicFuel: 0,\n            isBoosted: false,\n            revertOnError: true,\n            isKillSwitchOn: _killSwitchOn\n        });\n  ","after":"   function cancelOrder(DubiexLib.CancelOrderInput calldata input)\n        external\n        nonReentrant\n    {\n        _cancelOrderInternal({\n            maker: input.maker,\n            id: input.id,\n            intrinsicFuel: 0,\n            isBoosted: false,\n            revertOnError: true,\n            isKillSwitchOn: _killSwitchOn\n        });\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function boostedMakeOrder(\n        BoostedMakeOrder memory order,\n        Signature memory signature\n    ) public payable nonReentrant returns (uint32) {\n        require(!_killSwitchOn, \"Dubiex: make order prevented by kill switch\");\n\n        uint32 orderId;\n        uint256 excessEth = msg.value;\n        (orderId, excessEth) = _boostedMakeOrderInternal(\n            order,\n            signature,\n            excessEth,\n            true\n        );\n\n        _refundExcessEth(excessEth);\n        return orderId;\n  ","after":"   function boostedMakeOrder(\n        BoostedMakeOrder calldata order,\n        Signature calldata signature\n    ) public payable nonReentrant returns (uint32) {\n        require(!_killSwitchOn, \"Dubiex: make order prevented by kill switch\");\n\n        uint32 orderId;\n        uint256 excessEth = msg.value;\n        (orderId, excessEth) = _boostedMakeOrderInternal(\n            order,\n            signature,\n            excessEth,\n            true\n        );\n\n        _refundExcessEth(excessEth);\n        return orderId;\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function boostedTakeOrder(\n        BoostedTakeOrder memory order,\n        Signature memory signature\n    ) public payable nonReentrant {\n        require(!_killSwitchOn, \"Dubiex: take order prevented by kill switch\");\n\n        uint256 excessEth = _boostedTakeOrderInternal({\n            order: order,\n            signature: signature,\n            excessEth: msg.value,\n            revertOnError: true\n        });\n\n        _refundExcessEth(excessEth);\n  ","after":"   function boostedTakeOrder(\n        BoostedTakeOrder calldata order,\n        Signature calldata signature\n    ) public payable nonReentrant {\n        require(!_killSwitchOn, \"Dubiex: take order prevented by kill switch\");\n\n        uint256 excessEth = _boostedTakeOrderInternal({\n            order: order,\n            signature: signature,\n            excessEth: msg.value,\n            revertOnError: true\n        });\n\n        _refundExcessEth(excessEth);\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function boostedCancelOrder(\n        BoostedCancelOrder memory order,\n        Signature memory signature\n    ) public payable nonReentrant {\n        bool isKillSwitchOn = _killSwitchOn;\n        _boostedCancelOrderInternal(order, signature, true, isKillSwitchOn);\n  ","after":"   function boostedCancelOrder(\n        BoostedCancelOrder calldata order,\n        Signature calldata signature\n    ) public payable nonReentrant {\n        bool isKillSwitchOn = _killSwitchOn;\n        _boostedCancelOrderInternal(order, signature, true, isKillSwitchOn);\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function boostedTakeOrderBatch(\n        BoostedTakeOrder[] memory boostedTakeOrders,\n        Signature[] calldata signatures\n    ) external payable nonReentrant {\n        require(!_killSwitchOn, \"Dubiex: take order prevented by kill switch\");\n        require(\n            boostedTakeOrders.length > 0 &&\n                boostedTakeOrders.length == signatures.length,\n            \"Dubiex: invalid input lengths\"\n        );\n\n        uint256 excessEth = msg.value;\n        for (uint256 i = 0; i < boostedTakeOrders.length; i++) {\n            excessEth = _boostedTakeOrderInternal(\n                boostedTakeOrders[i],\n                signatures[i],\n                uint96(excessEth),\n                false\n            );\n        }\n\n        _refundExcessEth(excessEth);\n  ","after":"   function boostedTakeOrderBatch(\n        BoostedTakeOrder[] calldata boostedTakeOrders,\n        Signature[] calldata signatures\n    ) external payable nonReentrant {\n        require(!_killSwitchOn, \"Dubiex: take order prevented by kill switch\");\n        require(\n            boostedTakeOrders.length > 0 &&\n                boostedTakeOrders.length == signatures.length,\n            \"Dubiex: invalid input lengths\"\n        );\n\n        uint256 excessEth = msg.value;\n        for (uint256 i = 0; i < boostedTakeOrders.length; i++) {\n            excessEth = _boostedTakeOrderInternal(\n                boostedTakeOrders[i],\n                signatures[i],\n                uint96(excessEth),\n                false\n            );\n        }\n\n        _refundExcessEth(excessEth);\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function boostedCancelOrderBatch(\n        BoostedCancelOrder[] memory orders,\n        Signature[] calldata signatures\n    ) external payable nonReentrant returns (uint32) {\n        require(\n            orders.length > 0 && orders.length == signatures.length,\n            \"Dubiex: invalid input lengths\"\n        );\n\n        bool isKillSwitchOn = _killSwitchOn;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n            _boostedCancelOrderInternal(\n                orders[i],\n                signatures[i],\n                false,\n                isKillSwitchOn\n            );\n        }\n  ","after":"   function boostedCancelOrderBatch(\n        BoostedCancelOrder[] calldata orders,\n        Signature[] calldata signatures\n    ) external payable nonReentrant returns (uint32) {\n        require(\n            orders.length > 0 && orders.length == signatures.length,\n            \"Dubiex: invalid input lengths\"\n        );\n\n        bool isKillSwitchOn = _killSwitchOn;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n            _boostedCancelOrderInternal(\n                orders[i],\n                signatures[i],\n                false,\n                isKillSwitchOn\n            );\n        }\n  ","contract":"Dubiex","time":0},{"type":"external-function ","before":"   function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n  ","after":"   function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n  ","contract":"Dubiex","time":0}]}
{"time":88,"results":[{"type":"external-function ","before":"function changeValidators(\n        address[] memory validators,\n        uint256 multisigThreshold,\n        uint256 nonce,\n        bytes memory signatures\n    ) public {\n        require(nonce == latestChangeValidatorsNonce_, \"changeValidators nonce invalid\");\n        latestChangeValidatorsNonce_ = SafeMath.add(nonce, 1);\n\n        require(\n            validators.length > 0,\n            \"validators are none\"\n        );\n        require(\n            multisigThreshold > 0,\n            \"invalid multisigThreshold\"\n        );\n        require(\n            validators.length <= VALIDATORS_SIZE_LIMIT,\n            \"number of validators exceeds the limit\"\n        );\n        require(\n            multisigThreshold <= validators.length,\n            \"invalid multisigThreshold\"\n        );\n\n        for (uint256 i = 0; i < validators.length; i++) {\n            for (uint256 j = i + 1; j < validators.length; j ++) {\n                require(\n                    validators[i] != validators[j],\n                    \"repeated validators\"\n                );\n            }\n        }\n\n        bytes32 msgHash =\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\", // solium-disable-line\n                    _domainSeparator(),\n                    keccak256(\n                        abi.encode(\n                            CHANGE_VALIDATORS_TYPEHASH,\n                            validators,\n                            multisigThreshold,\n                            nonce\n                        )\n                    )\n                )\n            );\n\n        validatorsApprove(msgHash, signatures, multisigThreshold_);\n\n        validators_ = validators;\n        multisigThreshold_ = multisigThreshold;\n    }","after":"function changeValidators(\n        address[] calldata validators,\n        uint256 multisigThreshold,\n        uint256 nonce,\n        bytes calldata signatures\n    ) public {\n        require(nonce == latestChangeValidatorsNonce_, \"changeValidators nonce invalid\");\n        latestChangeValidatorsNonce_ = SafeMath.add(nonce, 1);\n\n        require(\n            validators.length > 0,\n            \"validators are none\"\n        );\n        require(\n            multisigThreshold > 0,\n            \"invalid multisigThreshold\"\n        );\n        require(\n            validators.length <= VALIDATORS_SIZE_LIMIT,\n            \"number of validators exceeds the limit\"\n        );\n        require(\n            multisigThreshold <= validators.length,\n            \"invalid multisigThreshold\"\n        );\n\n        for (uint256 i = 0; i < validators.length; i++) {\n            for (uint256 j = i + 1; j < validators.length; j ++) {\n                require(\n                    validators[i] != validators[j],\n                    \"repeated validators\"\n                );\n            }\n        }\n\n        bytes32 msgHash =\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\", // solium-disable-line\n                    _domainSeparator(),\n                    keccak256(\n                        abi.encode(\n                            CHANGE_VALIDATORS_TYPEHASH,\n                            validators,\n                            multisigThreshold,\n                            nonce\n                        )\n                    )\n                )\n            );\n\n        validatorsApprove(msgHash, signatures, multisigThreshold_);\n\n        validators_ = validators;\n        multisigThreshold_ = multisigThreshold;\n    }","contract":"ForceBridge","time":0},{"type":"external-function ","before":"function lockETH(\n        bytes memory recipientLockscript,\n        bytes memory sudtExtraData\n    ) public payable {\n        require (msg.value > 0, \"amount should be greater than 0\");\n        emit Locked(\n            address(0),\n            msg.sender,\n            msg.value,\n            recipientLockscript,\n            sudtExtraData\n        );\n    }","after":"function lockETH(\n        bytes calldata recipientLockscript,\n        bytes calldata sudtExtraData\n    ) public payable {\n        require (msg.value > 0, \"amount should be greater than 0\");\n        emit Locked(\n            address(0),\n            msg.sender,\n            msg.value,\n            recipientLockscript,\n            sudtExtraData\n        );\n    }","contract":"ForceBridge","time":0},{"type":"external-function ","before":"function lockToken(\n        address token,\n        uint256 amount,\n        bytes memory recipientLockscript,\n        bytes memory sudtExtraData\n    ) public {\n        require (amount > 0, \"amount should be greater than 0\");\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        emit Locked(\n            token,\n            msg.sender,\n            amount,\n            recipientLockscript,\n            sudtExtraData\n        );\n    }","after":"function lockToken(\n        address token,\n        uint256 amount,\n        bytes calldata recipientLockscript,\n        bytes calldata sudtExtraData\n    ) public {\n        require (amount > 0, \"amount should be greater than 0\");\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        emit Locked(\n            token,\n            msg.sender,\n            amount,\n            recipientLockscript,\n            sudtExtraData\n        );\n    }","contract":"ForceBridge","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 private _CACHED_DOMAIN_SEPARATOR;","after":"bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;","contract":"ForceBridge","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private _CACHED_CHAIN_ID;","after":"uint256 private immutable _CACHED_CHAIN_ID;","contract":"ForceBridge","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 private _HASHED_NAME;","after":"bytes32 private immutable _HASHED_NAME;","contract":"ForceBridge","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 private _HASHED_VERSION;","after":"bytes32 private immutable _HASHED_VERSION;","contract":"ForceBridge","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 private _TYPE_HASH;","after":"bytes32 private immutable _TYPE_HASH;","contract":"ForceBridge","time":0}]}
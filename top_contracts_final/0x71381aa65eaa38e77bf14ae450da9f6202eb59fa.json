{"time":68,"results":[{"type":"state-data-arrangement ","before":"\n   address payable public bankVau\n   address public nftVau\n   address public NFT2DAddre\n   address public NFT3DAddre\n   uint256 public gasF\n   address public unlock\n   mapping (uint8 => address) public manage\n   mapping (bytes32 => bool) public executedTa\n   uint16 public taskInd\n   uint256 public depositInd\n   mapping (uint256 => Deposit) public deposi\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a","after":"   uint256 public gasF\n   mapping (uint8 => address) public manage\n   mapping (bytes32 => bool) public executedTa\n   uint256 public depositInd\n   mapping (uint256 => Deposit) public deposi\n   address payable public bankVau\n   address public nftVau\n   address public NFT2DAddre\n   address public NFT3DAddre\n   address public unlock\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a\n   uint16 public taskInd\n","contract":"NFTBridgeTransfers","time":1},{"type":"external-function ","before":"   function setBankVault(address _vault, bytes memory _sig) public isManager {\n        uint8 mId = 1;\n        bytes32 taskHash = keccak256(abi.encode(_vault, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        bankVault = payable(_vault);\n  ","after":"   function setBankVault(address _vault, bytes calldata _sig) public isManager {\n        uint8 mId = 1;\n        bytes32 taskHash = keccak256(abi.encode(_vault, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        bankVault = payable(_vault);\n  ","contract":"NFTBridgeTransfers","time":0},{"type":"external-function ","before":"   function setGasFee(uint256 _fee, bytes memory _sig) public isManager {\n        uint8 mId = 2;\n        bytes32 taskHash = keccak256(abi.encode(_fee, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        gasFee = _fee;\n  ","after":"   function setGasFee(uint256 _fee, bytes calldata _sig) public isManager {\n        uint8 mId = 2;\n        bytes32 taskHash = keccak256(abi.encode(_fee, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        gasFee = _fee;\n  ","contract":"NFTBridgeTransfers","time":0},{"type":"external-function ","before":"   function setUnlocker(address _unlocker, bytes memory _sig) public isManager {\n        uint8 mId = 3;\n        bytes32 taskHash = keccak256(abi.encode(_unlocker, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        unlocker = _unlocker;\n  ","after":"   function setUnlocker(address _unlocker, bytes calldata _sig) public isManager {\n        uint8 mId = 3;\n        bytes32 taskHash = keccak256(abi.encode(_unlocker, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        unlocker = _unlocker;\n  ","contract":"NFTBridgeTransfers","time":0},{"type":"external-function ","before":"   function setUnlockerApproval(bool _approval, bytes memory _sig) public isManager {\n        uint8 mId = 4;\n        bytes32 taskHash = keccak256(abi.encode(_approval, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        IERC721(NFT2DAddress).setApprovalForAll(unlocker, _approval);\n        IERC721(NFT3DAddress).setApprovalForAll(unlocker, _approval);\n  ","after":"   function setUnlockerApproval(bool _approval, bytes calldata _sig) public isManager {\n        uint8 mId = 4;\n        bytes32 taskHash = keccak256(abi.encode(_approval, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        IERC721(NFT2DAddress).setApprovalForAll(unlocker, _approval);\n        IERC721(NFT3DAddress).setApprovalForAll(unlocker, _approval);\n  ","contract":"NFTBridgeTransfers","time":0},{"type":"external-function ","before":"   function changeManager(address _manager, uint8 _index, bytes memory _sig) public isManager {\n        require(_index >= 0 && _index <= 2, \"Invalid index\");\n        uint8 mId = 100;\n        bytes32 taskHash = keccak256(abi.encode(_manager, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        managers[_index] = _manager;\n  ","after":"   function changeManager(address _manager, uint8 _index, bytes calldata _sig) public isManager {\n        require(_index >= 0 && _index <= 2, \"Invalid index\");\n        uint8 mId = 100;\n        bytes32 taskHash = keccak256(abi.encode(_manager, taskIndex, mId));\n        verifyApproval(taskHash, _sig);\n        managers[_index] = _manager;\n  ","contract":"NFTBridgeTransfers","time":0},{"type":"immutable-restrict-modification ","before":"   address public nftVau","after":"   address public nftVau","contract":"NFTBridgeTransfers","time":0},{"type":"immutable-restrict-modification ","before":"   address public NFT2DAddre","after":"   address public NFT2DAddre","contract":"NFTBridgeTransfers","time":0},{"type":"immutable-restrict-modification ","before":"   address public NFT3DAddre","after":"   address public NFT3DAddre","contract":"NFTBridgeTransfers","time":0}]}
{"time":180,"results":[{"type":"state-data-arrangement ","before":"\nbool public _isSaleActive = true;\nbool public _isWhiteListSaleActive = false;\nbool public _isAuctionActive = false;\nuint256 public constant MAX_SUPPLY = 1000;\nuint256 public mintPrice = 0.3 ether;\nuint256 public whiteListPrice = 0.3 ether;\nuint256 public totalSupply;\nuint256 public tierSupply = 332;\nuint256 public maxBalance = 1;\nuint256 public maxMint = 1;\nuint256 public auctionStartTime;\nuint256 public auctionTimeStep;\nuint256 public auctionStartPrice;\nuint256 public auctionEndPrice;\nuint256 public auctionPriceStep;\nuint256 public auctionStepNumber;\nstring private _baseURIExtended;\naddress private _signerAddress = 0x39A2be592133dD1705d014D4700F82279784B2a4;\naddress private subAddress_one = 0x99eC30A8fa5Fe0dA440F141e77Bb46673E2Dda5A;\naddress private subAddress_two = 0xbb965b3F9B4d6b9E637FEc45DCA0F83eEE32427B;\naddress private subAddress_three =\n        0x553CAb5161b5BAAfD42e78Cc7f34350A6412b394;\nmapping(string => bool) private _usedNonces;\nmapping(address => bool) private whiteList;","after":"uint256 public constant MAX_SUPPLY = 1000;\nuint256 public mintPrice = 0.3 ether;\nuint256 public whiteListPrice = 0.3 ether;\nuint256 public totalSupply;\nuint256 public tierSupply = 332;\nuint256 public maxBalance = 1;\nuint256 public maxMint = 1;\nuint256 public auctionStartTime;\nuint256 public auctionTimeStep;\nuint256 public auctionStartPrice;\nuint256 public auctionEndPrice;\nuint256 public auctionPriceStep;\nuint256 public auctionStepNumber;\nstring private _baseURIExtended;\nmapping(string => bool) private _usedNonces;\nmapping(address => bool) private whiteList;\naddress private _signerAddress = 0x39A2be592133dD1705d014D4700F82279784B2a4;\naddress private subAddress_one = 0x99eC30A8fa5Fe0dA440F141e77Bb46673E2Dda5A;\naddress private subAddress_two = 0xbb965b3F9B4d6b9E637FEc45DCA0F83eEE32427B;\naddress private subAddress_three =\n        0x553CAb5161b5BAAfD42e78Cc7f34350A6412b394;\nbool public _isSaleActive = true;\nbool public _isWhiteListSaleActive = false;\nbool public _isAuctionActive = false;\n","contract":"ARIES","time":0},{"type":"external-function ","before":"function mintAriesHot(\n        bytes32 hash,\n        bytes memory signature,\n        string memory nonce,\n        uint256 tokenQuantity\n    ) external payable {\n        require(\n            totalSupply + tokenQuantity <= tierSupply,\n            \"Sale would exceed tier supply\"\n        );\n        require(\n            totalSupply + tokenQuantity <= MAX_SUPPLY,\n            \"Sale would exceed max supply\"\n        );\n        require(\n            balanceOf(msg.sender) + tokenQuantity <= maxBalance,\n            \"Sale would exceed max balance\"\n        );\n        require(tokenQuantity <= maxMint, \"Sale would exceed max mint\");\n        require(\n            tokenQuantity * mintPrice <= msg.value,\n            \"Not enough ether sent\"\n        );\n        require(_isSaleActive, \"Sale must be active to mint AriesHots\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(\n            hashTransaction(msg.sender, tokenQuantity, nonce) == hash,\n            \"HASH_FAIL\"\n        );\n\n        _mintAriesHot(tokenQuantity, msg.sender);\n        emit TokenMinted(totalSupply);\n        _usedNonces[nonce] = true;\n    }","after":"function mintAriesHot(\n        bytes32 hash,\n        bytes calldata signature,\n        string calldata nonce,\n        uint256 tokenQuantity\n    ) external payable {\n        require(\n            totalSupply + tokenQuantity <= tierSupply,\n            \"Sale would exceed tier supply\"\n        );\n        require(\n            totalSupply + tokenQuantity <= MAX_SUPPLY,\n            \"Sale would exceed max supply\"\n        );\n        require(\n            balanceOf(msg.sender) + tokenQuantity <= maxBalance,\n            \"Sale would exceed max balance\"\n        );\n        require(tokenQuantity <= maxMint, \"Sale would exceed max mint\");\n        require(\n            tokenQuantity * mintPrice <= msg.value,\n            \"Not enough ether sent\"\n        );\n        require(_isSaleActive, \"Sale must be active to mint AriesHots\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(\n            hashTransaction(msg.sender, tokenQuantity, nonce) == hash,\n            \"HASH_FAIL\"\n        );\n\n        _mintAriesHot(tokenQuantity, msg.sender);\n        emit TokenMinted(totalSupply);\n        _usedNonces[nonce] = true;\n    }","contract":"ARIES","time":0},{"type":"external-function ","before":"function auctionMintAriesHot(\n        bytes32 hash,\n        bytes memory signature,\n        string memory nonce,\n        uint256 tokenQuantity\n    ) public payable {\n        require(\n            totalSupply + tokenQuantity <= tierSupply,\n            \"Auction would exceed tier supply\"\n        );\n        require(\n            totalSupply + tokenQuantity <= MAX_SUPPLY,\n            \"Auction would exceed max supply\"\n        );\n        require(_isAuctionActive, \"Auction must be active to mint AriesHots\");\n        require(block.timestamp >= auctionStartTime, \"Auction not start\");\n        require(\n            balanceOf(msg.sender) + tokenQuantity <= maxBalance,\n            \"Auction would exceed max balance\"\n        );\n        require(tokenQuantity <= maxMint, \"Auction would exceed max mint\");\n        require(\n            tokenQuantity * getAuctionPrice() <= msg.value,\n            \"Not enough ether sent\"\n        );\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(\n            hashTransaction(msg.sender, tokenQuantity, nonce) == hash,\n            \"HASH_FAIL\"\n        );\n        _mintAriesHot(tokenQuantity, msg.sender);\n        emit TokenMinted(totalSupply);\n        _usedNonces[nonce] = true;\n    }","after":"function auctionMintAriesHot(\n        bytes32 hash,\n        bytes calldata signature,\n        string calldata nonce,\n        uint256 tokenQuantity\n    ) public payable {\n        require(\n            totalSupply + tokenQuantity <= tierSupply,\n            \"Auction would exceed tier supply\"\n        );\n        require(\n            totalSupply + tokenQuantity <= MAX_SUPPLY,\n            \"Auction would exceed max supply\"\n        );\n        require(_isAuctionActive, \"Auction must be active to mint AriesHots\");\n        require(block.timestamp >= auctionStartTime, \"Auction not start\");\n        require(\n            balanceOf(msg.sender) + tokenQuantity <= maxBalance,\n            \"Auction would exceed max balance\"\n        );\n        require(tokenQuantity <= maxMint, \"Auction would exceed max mint\");\n        require(\n            tokenQuantity * getAuctionPrice() <= msg.value,\n            \"Not enough ether sent\"\n        );\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(\n            hashTransaction(msg.sender, tokenQuantity, nonce) == hash,\n            \"HASH_FAIL\"\n        );\n        _mintAriesHot(tokenQuantity, msg.sender);\n        emit TokenMinted(totalSupply);\n        _usedNonces[nonce] = true;\n    }","contract":"ARIES","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner {\n        _baseURIExtended = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner {\n        _baseURIExtended = baseURI_;\n    }","contract":"ARIES","time":0},{"type":"constant-restrict-modification  ","before":"address private _signerAddress = 0x39A2be592133dD1705d014D4700F82279784B2a4;","after":"address private constant _signerAddress = 0x39A2be592133dD1705d014D4700F82279784B2a4;","contract":"ARIES","time":0}]}
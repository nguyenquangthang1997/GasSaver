{"time":151,"results":[{"type":"state-data-arrangement ","before":"\nle.sol\";\nimport \"@openzeppelin/contracts/acc\nwnable.sol\";\nimport \"@openze\nn/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract SneakyBatSyndi\nis ERC721Enumerable, Ownable {\n    using Strings for uint256;\n    using ECDS\nbytes32;\n\n    mapping(string => bool) pr\n _usedNonces;\n    st\nprivate _contractURI;\nstring private _tok","after":"le.sol\";\nimport \"@openzeppelin/contracts/acc\nwnable.sol\";\nimport \"@openze\nn/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract SneakyBatSyndi\nbytes32;\n\n    mapping(string => bool) pr\n _usedNonces;\n    st\nis ERC721Enumerable, Ownable {\n    using Strings for uint256;\n    using ECDS\nprivate _contractURI;\nstring private _tok\n","contract":"SneakyBatSyndicate","time":0},{"type":"external-function ","before":"d(sender, tokens, nonce)))\n        );\n        \n        return hash;\n    }\n    \n    function matchAddresSigner(bytes32 hash, bytes memory signature) private view returns(bool) {\n        return _signerAddress == hash.recover(signature);\n    }\n    \n    function buy(bytes32 hash, bytes memory signature, string memory nonce, uint256[] memory tokens) external {\n        require(released, \"NOT_RELEASED\");\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(hashTransaction(msg.sender, tokens, nonce) == hash, \"HASH_FAIL\");\n        require(tokens.length > 0,","after":"d(sender, tokens, nonce)))\n        );\n        \n        return hash;\n    }\n    \n    function matchAddresSigner(bytes32 hash, bytes memory signature) private view returns(bool) {\n        return _signerAddress == hash.recover(signature);\n    }\n    \n    function buy(bytes32 hash, bytes memory signature, string memory nonce, uint256[] memory tokens) external {\n        require(released, \"NOT_RELEASED\");\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(hashTransaction(msg.sender, tokens, nonce) == hash, \"HASH_FAIL\");\n        require(tokens.length > 0,","contract":"SneakyBatSyndicate","time":0}]}
{"time":134,"results":[{"type":"external-function ","before":"function setBaseURI(string memory newUri) \n    public \n    onlyOwner {\n        BASE_URI = newUri;\n    }","after":"function setBaseURI(string calldata newUri) \n    public \n    onlyOwner {\n        BASE_URI = newUri;\n    }","contract":"NinjaSquad","time":0},{"type":"external-function ","before":"function presaleMint(address account, uint numberOfTokens, uint256 allowance, string memory key, bytes32[] calldata proof)\n    public\n    payable\n    onlyAccounts\n    {\n        require(msg.sender == account, \"Not allowed\");\n        require(IS_PRESALE_ACTIVE, \"Pre-sale haven't started\");\n        require(msg.value >= numberOfTokens * MINT_PRICE, \"Not enough ethers sent\");\n\n        string memory payload = string(abi.encodePacked(Strings.toString(allowance), \":\", key));\n\n        require(_verify(_leaf(msg.sender, payload), proof), \"Invalid merkle proof\");\n        \n        uint current = _tokenIdCounter.current();\n        \n        require(current + numberOfTokens < INCREASED_MAX_TOKEN_ID, \"Exceeds total supply\");\n        require(addressToMintCount[msg.sender] + numberOfTokens <= allowance, \"Exceeds allowance\");\n\n        addressToMintCount[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            mintInternal();\n        }\n    }","after":"function presaleMint(address account, uint numberOfTokens, uint256 allowance, string calldata key, bytes32[] calldata proof)\n    public\n    payable\n    onlyAccounts\n    {\n        require(msg.sender == account, \"Not allowed\");\n        require(IS_PRESALE_ACTIVE, \"Pre-sale haven't started\");\n        require(msg.value >= numberOfTokens * MINT_PRICE, \"Not enough ethers sent\");\n\n        string memory payload = string(abi.encodePacked(Strings.toString(allowance), \":\", key));\n\n        require(_verify(_leaf(msg.sender, payload), proof), \"Invalid merkle proof\");\n        \n        uint current = _tokenIdCounter.current();\n        \n        require(current + numberOfTokens < INCREASED_MAX_TOKEN_ID, \"Exceeds total supply\");\n        require(addressToMintCount[msg.sender] + numberOfTokens <= allowance, \"Exceeds allowance\");\n\n        addressToMintCount[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            mintInternal();\n        }\n    }","contract":"NinjaSquad","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address FOUNDER_1 = 0x72d0455D25Db9c36af5869BBF426312bA923C643;","after":"address constant FOUNDER_1 = 0x72d0455D25Db9c36af5869BBF426312bA923C643;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address FOUNDER_2 = 0x5EE559349f01E5032324d6804d9AE4fD89041795;","after":"address constant FOUNDER_2 = 0x5EE559349f01E5032324d6804d9AE4fD89041795;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TECH_LEAD = 0xA800F34505e8b340cf3Ab8793cB40Bf09042B28F;","after":"address constant TECH_LEAD = 0xA800F34505e8b340cf3Ab8793cB40Bf09042B28F;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address COMMUNITY_WALLET = 0x47153260c7d8EaF5F609632F43d6eDc73D71B0De;","after":"address constant COMMUNITY_WALLET = 0x47153260c7d8EaF5F609632F43d6eDc73D71B0De;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_1 = 0xD74403920Ec684F14554F2600f27F69C2C8dE2F8;","after":"address constant TEAM_1 = 0xD74403920Ec684F14554F2600f27F69C2C8dE2F8;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_2 = 0xaee4BDcF9d164d9ADBBcBfD846623fbE133a6018;","after":"address constant TEAM_2 = 0xaee4BDcF9d164d9ADBBcBfD846623fbE133a6018;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_3 = 0xD45c3821f49621F98AE8f61809481Be12299C94E;","after":"address constant TEAM_3 = 0xD45c3821f49621F98AE8f61809481Be12299C94E;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_4 = 0x4BB18777DFFeB4A815A1aFf53C4B1da49d70D97c;","after":"address constant TEAM_4 = 0x4BB18777DFFeB4A815A1aFf53C4B1da49d70D97c;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_5 = 0xA14b76E61561633BAcf4B9aF1ffB626Af4E9bEF4;","after":"address constant TEAM_5 = 0xA14b76E61561633BAcf4B9aF1ffB626Af4E9bEF4;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_6 = 0x8c3F461cFaAe1e05857d28B0e22BA3da097a2Be3;","after":"address constant TEAM_6 = 0x8c3F461cFaAe1e05857d28B0e22BA3da097a2Be3;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_7 = 0xd44bDAA20832Ddfc953153c4Ee2CBeEf83F1953d;","after":"address constant TEAM_7 = 0xd44bDAA20832Ddfc953153c4Ee2CBeEf83F1953d;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_8 = 0x0B41ca9Dd8Cf98910C6dc48bFc8AF924c4F1268D;","after":"address constant TEAM_8 = 0x0B41ca9Dd8Cf98910C6dc48bFc8AF924c4F1268D;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_9 = 0x7fA9Eb848015208a443d2De2EABE5Bd478ae8F8E;","after":"address constant TEAM_9 = 0x7fA9Eb848015208a443d2De2EABE5Bd478ae8F8E;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_10 = 0x660E5Dac34b916B8f060b817cBE8660ba02Bbc4F;","after":"address constant TEAM_10 = 0x660E5Dac34b916B8f060b817cBE8660ba02Bbc4F;","contract":"NinjaSquad","time":0},{"type":"constant-restrict-modification  ","before":"address TEAM_11 = 0x0B16dD061aD33B866341Dc3bF17264bd6111f10D;","after":"address constant TEAM_11 = 0x0B16dD061aD33B866341Dc3bF17264bd6111f10D;","contract":"NinjaSquad","time":0}]}
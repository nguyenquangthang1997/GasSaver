{"time":271,"results":[{"type":"external-function ","before":"//////////////////////////////////////////////////////////////////\n\n\ncontract LIGHT is ERC721Creator {\n    constructor() ERC721Creator(\"Refik Anadol\", \"LIGHT\") {}\n}\n  \n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"./","after":"//////////////////////////////////////////////////////////////////\n\n\ncontract LIGHT is ERC721Creator {\n    constructor() ERC721Creator(\"Refik Anadol\", \"LIGHT\") {}\n}\n  \n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"./","contract":"LIGHT","time":0},{"type":"external-function ","before":"reTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n        _approveTransfer(from, to, tokenId);    \n    }\n\n    /**\n     * @dev See {ICreatorCore-registerExtension}.\n     */\n    function registerExtension(address extension, string calldata baseURI) external overrid","after":"reTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n        _approveTransfer(from, to, tokenId);    \n    }\n\n    /**\n     * @dev See {ICreatorCore-registerExtension}.\n     */\n    function registerExtension(address extension, string calldata baseURI) external overrid","contract":"LIGHT","time":0}]}
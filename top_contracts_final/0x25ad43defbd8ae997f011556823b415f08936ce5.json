{"time":202,"results":[{"type":"state-data-arrangement ","before":"\nstring private _contractURI;\nstring _name = \"Myth Division American Ape\";\nstring _symbol = \"MDAPE\";\naddress public minterAddress;\nuint256 public mintingTokenID = 0;\nuint256 public numberMintedTotal = 0;\nuint256 public maxTokens = 500;\nuint256 public tokenPricePublic = 0.5636 ether;\nbool public mintIsActivePublic = false;\nuint256 public maxTokensPerTransactionPublic = 5;\nuint256 public numberMintedPublic = 0;\nuint256 public maxTokensPublic = 500;\nuint256 public tokenPricePresale = 0.222 ether;\nbool public mintIsActivePresale = false;\nmapping (address => bool) public presaleWalletList;\nuint256 public maxTokensPerTransactionPresale = 1;\nuint256 public numberMintedPresale = 0;\nuint256 public maxTokensPresale = 500;\nbool public mintIsActiveFree = false;\nmapping (address => bool) public freeWalletList;","after":"string private _contractURI;\nstring _name = \"Myth Division American Ape\";\nstring _symbol = \"MDAPE\";\nuint256 public mintingTokenID = 0;\nuint256 public numberMintedTotal = 0;\nuint256 public maxTokens = 500;\nuint256 public tokenPricePublic = 0.5636 ether;\nuint256 public maxTokensPerTransactionPublic = 5;\nuint256 public numberMintedPublic = 0;\nuint256 public maxTokensPublic = 500;\nuint256 public tokenPricePresale = 0.222 ether;\nmapping (address => bool) public presaleWalletList;\nuint256 public maxTokensPerTransactionPresale = 1;\nuint256 public numberMintedPresale = 0;\nuint256 public maxTokensPresale = 500;\nmapping (address => bool) public freeWalletList;\naddress public minterAddress;\nbool public mintIsActivePublic = false;\nbool public mintIsActivePresale = false;\nbool public mintIsActiveFree = false;\n","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function initPresaleWalletList(address[] memory walletList) external onlyOwner {\n\t    for (uint i; i < walletList.length; i++) {\n\t\t    presaleWalletList[walletList[i]] = true;\n\t    }\n    }","after":"function initPresaleWalletList(address[] calldata walletList) external onlyOwner {\n\t    for (uint i; i < walletList.length; i++) {\n\t\t    presaleWalletList[walletList[i]] = true;\n\t    }\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function initFreeWalletList(address[] memory walletList) external onlyOwner {\n\t    for (uint256 i = 0; i < walletList.length; i++) {\n\t\t    freeWalletList[walletList[i]] = true;\n\t    }\n    }","after":"function initFreeWalletList(address[] calldata walletList) external onlyOwner {\n\t    for (uint256 i = 0; i < walletList.length; i++) {\n\t\t    freeWalletList[walletList[i]] = true;\n\t    }\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function mintBatch(\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) public onlyMinter {\n        _mintBatch(msg.sender, ids, amounts, \"\");\n    }","after":"function mintBatch(\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) public onlyMinter {\n        _mintBatch(msg.sender, ids, amounts, \"\");\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function setURI(string memory baseURI) public onlyMinter {\n        _setURI(baseURI);\n    }","after":"function setURI(string calldata baseURI) public onlyMinter {\n        _setURI(baseURI);\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function setContractURI(string memory newContractURI) public onlyOwner {\n        _contractURI = newContractURI;\n    }","after":"function setContractURI(string calldata newContractURI) public onlyOwner {\n        _contractURI = newContractURI;\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"MythDivisionAmericanApe","time":0},{"type":"constant-restrict-modification  ","before":"string _name = \"Myth Division American Ape\";","after":"string constant _name = \"Myth Division American Ape\";","contract":"MythDivisionAmericanApe","time":1},{"type":"constant-restrict-modification  ","before":"string _symbol = \"MDAPE\";","after":"string constant _symbol = \"MDAPE\";","contract":"MythDivisionAmericanApe","time":1}]}
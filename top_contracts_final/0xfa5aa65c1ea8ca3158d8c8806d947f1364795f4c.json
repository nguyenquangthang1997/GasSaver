{"time":140,"results":[{"type":"external-function ","before":"function setURI(string memory newuri) public onlyRole(URI_SETTER_ROLE) {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) public onlyRole(URI_SETTER_ROLE) {\n        _setURI(newuri);\n    }","contract":"SpaceBugs","time":0},{"type":"external-function ","before":"function mint(address account, uint256 id, uint256 amount, bytes memory data)\n    public\n    onlyRole(MINTER_ROLE)\n    {\n        _mint(account, id, amount, data);\n    }","after":"function mint(address account, uint256 id, uint256 amount, bytes calldata data)\n    public\n    onlyRole(MINTER_ROLE)\n    {\n        _mint(account, id, amount, data);\n    }","contract":"SpaceBugs","time":0},{"type":"external-function ","before":"function airdrop(uint160[] memory to, uint256[] memory ids, bytes memory data)\n    public\n    onlyRole(MINTER_ROLE)\n    {\n        for (uint256 i = 0; i < ids.length; i++) {\n            address ss = address(to[i]);\n            _mint(ss, ids[i], 1, data);\n        }\n    }","after":"function airdrop(uint160[] calldata to, uint256[] calldata ids, bytes calldata data)\n    public\n    onlyRole(MINTER_ROLE)\n    {\n        for (uint256 i = 0; i < ids.length; i++) {\n            address ss = address(to[i]);\n            _mint(ss, ids[i], 1, data);\n        }\n    }","contract":"SpaceBugs","time":0},{"type":"external-function ","before":"function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\n    public\n    onlyRole(MINTER_ROLE)\n    {\n        _mintBatch(to, ids, amounts, data);\n    }","after":"function mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data)\n    public\n    onlyRole(MINTER_ROLE)\n    {\n        _mintBatch(to, ids, amounts, data);\n    }","contract":"SpaceBugs","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"SpaceBugs","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"SpaceBugs","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"SpaceBugs","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"Space Bugs\";","after":"string public constant name = \"Space Bugs\";","contract":"SpaceBugs","time":0}]}
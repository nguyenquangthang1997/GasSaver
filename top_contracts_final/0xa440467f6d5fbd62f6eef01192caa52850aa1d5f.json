{"time":650,"results":[{"type":"external-function ","before":"sender] == true, \"Sorry you are not on the whitelist\");\n            require(_totalSupply().add(_amount) <= ","after":"sender] == true, \"Sorry you are not on the whitelist\");\n            require(_totalSupply().add(_amount) <= ","contract":"PPPandas","time":0},{"type":"external-function ","before":"E_PANDAS, \"Error: 500 PreSale Pandas Sold\");\n            require(_amount <= presaleMaxTx, \"Hey you can not buy more than 5 at one time. Try a smaller amount.\");\n            ","after":"E_PANDAS, \"Error: 500 PreSale Pandas Sold\");\n            require(_amount <= presaleMaxTx, \"Hey you can not buy more than 5 at one time. Try a smaller amount.\");\n            ","contract":"PPPandas","time":0},{"type":"external-function ","before":" baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }\n\n    function setWhiteList(address[] memory _ad","after":" baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }\n\n    function setWhiteList(address[] memory _ad","contract":"PPPandas","time":0},{"type":"external-function ","before":"resaleStartTime = _newTime;\n        publicSaleStartTime = presaleStartTime + 5 minutes;\n    }\n\n    function setPublicSaleDate(uint _newTime) external onlyOwner {\n        publicSaleStartTime =_newTime;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return _baseURIexte","after":"resaleStartTime = _newTime;\n        publicSaleStartTime = presaleStartTime + 5 minutes;\n    }\n\n    function setPublicSaleDate(uint _newTime) external onlyOwner {\n        publicSaleStartTime =_newTime;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return _baseURIexte","contract":"PPPandas","time":0},{"type":"constant-restrict-modification  ","before":"��████║\n╚═╝     ╚�","after":"��████║\n╚═╝     ╚�","contract":"PPPandas","time":1},{"type":"constant-restrict-modification  ","before":"    ╚═╝     ╚═╝  �","after":"    ╚═╝     ╚═╝  �","contract":"PPPandas","time":1},{"type":"constant-restrict-modification  ","before":"contracts/utils/Counters.sol\";\nimport \"@openzeppelin/cont","after":"contracts/utils/Counters.sol\";\nimport \"@openzeppelin/cont","contract":"PPPandas","time":1},{"type":"constant-restrict-modification  ","before":"cts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport","after":"cts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport","contract":"PPPandas","time":1},{"type":"constant-restrict-modification  ","before":"enzeppelin/contracts/finan","after":"enzeppelin/contracts/finan","contract":"PPPandas","time":1},{"type":"constant-restrict-modification  ","before":"ymentSplitter.sol\";\nimport \"@","after":"ymentSplitter.sol\";\nimport \"@","contract":"PPPandas","time":1},{"type":"constant-restrict-modification  ","before":"blic PANDA_PRICE = 0.02 ether;\n    uint public MAX_PANDAS = 88","after":"blic PANDA_PRICE = 0.02 ether;\n    uint public MAX_PANDAS = 88","contract":"PPPandas","time":1},{"type":"external-function ","before":"888: Sold Out!\");\n        require(_totalSupply().add(_amount) <= pandasForSale, \"Hold up! Purchase would ex","after":"888: Sold Out!\");\n        require(_totalSupply().add(_amount) <= pandasForSale, \"Hold up! Purchase would ex","contract":"PPPandasV2","time":0},{"type":"external-function ","before":"er amount.\");\n        _;\n    }\n\n    modifier verifyBuy(uint _amount) {\n        require(isSaleActive != false, \"Sorry, Sale","after":"er amount.\");\n        _;\n    }\n\n    modifier verifyBuy(uint _amount) {\n        require(isSaleActive != false, \"Sorry, Sale","contract":"PPPandasV2","time":0},{"type":"external-function ","before":"    // Setters\n\n    function _baseURI() internal view override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }\n\n    function setReservedPandas(uint _newReserve) external ","after":"    // Setters\n\n    function _baseURI() internal view override returns (string memory) {\n        return _baseURIextended;\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }\n\n    function setReservedPandas(uint _newReserve) external ","contract":"PPPandasV2","time":0},{"type":"external-function ","before":"1;\n            _safeMint(_to, id);\n            increaseSupply();\n        }\n    }\n\n    function claimPandas() external {\n      uint oldBalance = PandasV1.balanceOf(msg.sender);","after":"1;\n            _safeMint(_to, id);\n            increaseSupply();\n        }\n    }\n\n    function claimPandas() external {\n      uint oldBalance = PandasV1.balanceOf(msg.sender);","contract":"PPPandasV2","time":0},{"type":"constant-restrict-modification  ","before":"�█║██║  ██║███████║██","after":"�█║██║  ██║███████║██","contract":"PPPandasV2","time":0},{"type":"constant-restrict-modification  ","before":"�███╗\n██╔═","after":"�███╗\n██╔═","contract":"PPPandasV2","time":0},{"type":"constant-restrict-modification  ","before":"�█║███████║\n╚═╝     ╚═╝     ╚═╝ ","after":"�█║███████║\n╚═╝     ╚═╝     ╚═╝ ","contract":"PPPandasV2","time":0},{"type":"constant-restrict-modification  ","before":"��═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚�","after":"��═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚�","contract":"PPPandasV2","time":0}]}
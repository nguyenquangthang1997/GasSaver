{"time":153,"results":[{"type":"external-function ","before":"function claimByIds(uint256[] memory angryBoarsIds, uint256[] memory angryMeerkatsIds, uint256 amount) external payable whenNotPaused {\n        require(angryBoarsIds.length % 2 == 0 && angryMeerkatsIds.length % 2 == 0 && angryBoarsIds.length == angryMeerkatsIds.length, \"Not enought boars and meerkats\");\n        require(amount == (symbiosisPrice * angryBoarsIds.length / 2), \"Not enough $OINK\");\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            require(!isBoarClaimed(angryBoarsIds[i]), \"The token has been already claimed\");\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarsIds[i]);\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n        }\n\n        for (uint256  i = 0; i < angryMeerkatsIds.length; i++) {\n            require(!isMeerkatClaimed(angryMeerkatsIds[i]), \"The token has been already claimed\");\n            address angryMeerkatOwner = angryMeerkatsContractCaller.ownerOf(angryMeerkatsIds[i]);\n            require(angryMeerkatOwner == msg.sender, \"You do not own the token with the provided id\");\n        }\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            _claimedBoars[angryBoarsIds[i]] = true;\n            _claimedMeerkats[angryMeerkatsIds[i]] = true;\n        }\n\n        oinkCaller.burn(msg.sender, amount);\n\n        for (uint256  i = 0; i < (angryBoarsIds.length / 2); i++) {\n            _safeMint(msg.sender, totalSupply());\n        }\n    }","after":"function claimByIds(uint256[] calldata angryBoarsIds, uint256[] calldata angryMeerkatsIds, uint256 amount) external payable whenNotPaused {\n        require(angryBoarsIds.length % 2 == 0 && angryMeerkatsIds.length % 2 == 0 && angryBoarsIds.length == angryMeerkatsIds.length, \"Not enought boars and meerkats\");\n        require(amount == (symbiosisPrice * angryBoarsIds.length / 2), \"Not enough $OINK\");\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            require(!isBoarClaimed(angryBoarsIds[i]), \"The token has been already claimed\");\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarsIds[i]);\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n        }\n\n        for (uint256  i = 0; i < angryMeerkatsIds.length; i++) {\n            require(!isMeerkatClaimed(angryMeerkatsIds[i]), \"The token has been already claimed\");\n            address angryMeerkatOwner = angryMeerkatsContractCaller.ownerOf(angryMeerkatsIds[i]);\n            require(angryMeerkatOwner == msg.sender, \"You do not own the token with the provided id\");\n        }\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            _claimedBoars[angryBoarsIds[i]] = true;\n            _claimedMeerkats[angryMeerkatsIds[i]] = true;\n        }\n\n        oinkCaller.burn(msg.sender, amount);\n\n        for (uint256  i = 0; i < (angryBoarsIds.length / 2); i++) {\n            _safeMint(msg.sender, totalSupply());\n        }\n    }","contract":"AngryBoarcats","time":0},{"type":"external-function ","before":"function claimByIdsOwner(uint256[] memory angryBoarsIds, uint256[] memory angryMeerkatsIds, uint256 amount) external payable onlyOwner {\n        require(angryBoarsIds.length % 2 == 0 && angryMeerkatsIds.length % 2 == 0 && angryBoarsIds.length == angryMeerkatsIds.length, \"Not enought boars and meerkats\");\n        require(amount == (symbiosisPrice * angryBoarsIds.length / 2), \"Not enough $OINK\");\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarsIds[i]);\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n            require(!isBoarClaimed(angryBoarsIds[i]), \"The token has been already claimed\");\n        }\n\n        for (uint256  i = 0; i < angryMeerkatsIds.length; i++) {\n            address angryMeerkatOwner = angryMeerkatsContractCaller.ownerOf(angryMeerkatsIds[i]);\n            require(angryMeerkatOwner == msg.sender, \"You do not own the token with the provided id\");\n            require(!isMeerkatClaimed(angryMeerkatsIds[i]), \"The token has been already claimed\");\n        }\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            _claimedBoars[angryBoarsIds[i]] = true;\n            _claimedMeerkats[angryMeerkatsIds[i]] = true;\n        }\n\n        oinkCaller.burn(msg.sender, amount);\n\n        for (uint256  i = 0; i < (angryBoarsIds.length / 2); i++) {\n            _safeMint(msg.sender, totalSupply());\n        }\n    }","after":"function claimByIdsOwner(uint256[] calldata angryBoarsIds, uint256[] calldata angryMeerkatsIds, uint256 amount) external payable onlyOwner {\n        require(angryBoarsIds.length % 2 == 0 && angryMeerkatsIds.length % 2 == 0 && angryBoarsIds.length == angryMeerkatsIds.length, \"Not enought boars and meerkats\");\n        require(amount == (symbiosisPrice * angryBoarsIds.length / 2), \"Not enough $OINK\");\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            address angryBoarOwner = angryBoarsContractCaller.ownerOf(angryBoarsIds[i]);\n            require(angryBoarOwner == msg.sender, \"You do not own the token with the provided id\");\n            require(!isBoarClaimed(angryBoarsIds[i]), \"The token has been already claimed\");\n        }\n\n        for (uint256  i = 0; i < angryMeerkatsIds.length; i++) {\n            address angryMeerkatOwner = angryMeerkatsContractCaller.ownerOf(angryMeerkatsIds[i]);\n            require(angryMeerkatOwner == msg.sender, \"You do not own the token with the provided id\");\n            require(!isMeerkatClaimed(angryMeerkatsIds[i]), \"The token has been already claimed\");\n        }\n\n        for (uint256  i = 0; i < angryBoarsIds.length; i++) {\n            _claimedBoars[angryBoarsIds[i]] = true;\n            _claimedMeerkats[angryMeerkatsIds[i]] = true;\n        }\n\n        oinkCaller.burn(msg.sender, amount);\n\n        for (uint256  i = 0; i < (angryBoarsIds.length / 2); i++) {\n            _safeMint(msg.sender, totalSupply());\n        }\n    }","contract":"AngryBoarcats","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private ETHER = 10 ** 18;","after":"uint256 private constant ETHER = 10 ** 18;","contract":"AngryBoarcats","time":0}]}
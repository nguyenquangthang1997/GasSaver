{"time":166,"results":[{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","contract":"LootRealms","time":0},{"type":"external-function ","before":"function setProvenance(string memory prov) public onlyOwner {\n        PROVENANCE = prov;\n    }","after":"function setProvenance(string calldata prov) public onlyOwner {\n        PROVENANCE = prov;\n    }","contract":"LootRealms","time":0},{"type":"external-function ","before":"function multiMintWithLoot(uint[] memory lootIds) public payable nonReentrant {\n        require(privateSale, \"Private sale minting is over\");\n        require(saleIsActive, \"Sale must be active to mint\");\n        require((lootersPrice * lootIds.length) <= msg.value, \"Ether value sent is not correct\");\n        \n        for (uint i=0; i<lootIds.length; i++) {\n            require(lootContract.ownerOf(lootIds[i]) == msg.sender, \"Not the owner of this loot\");\n            require(!_exists(lootIds[i]), \"One of these tokens has already been minted\");\n            _safeMint(msg.sender, lootIds[i]);\n        }\n        \n    }","after":"function multiMintWithLoot(uint[] calldata lootIds) public payable nonReentrant {\n        require(privateSale, \"Private sale minting is over\");\n        require(saleIsActive, \"Sale must be active to mint\");\n        require((lootersPrice * lootIds.length) <= msg.value, \"Ether value sent is not correct\");\n        \n        for (uint i=0; i<lootIds.length; i++) {\n            require(lootContract.ownerOf(lootIds[i]) == msg.sender, \"Not the owner of this loot\");\n            require(!_exists(lootIds[i]), \"One of these tokens has already been minted\");\n            _safeMint(msg.sender, lootIds[i]);\n        }\n        \n    }","contract":"LootRealms","time":0},{"type":"external-function ","before":"function multiMint(uint[] memory lootIds) public payable nonReentrant {\n        require(!privateSale, \"Public sale minting not started\");\n        require(saleIsActive, \"Sale must be active to mint\");\n        require((publicPrice * lootIds.length) <= msg.value, \"Ether value sent is not correct\");\n        \n        for (uint i=0; i<lootIds.length; i++) {\n            require(lootIds[i] > 0 && lootIds[i] < 8001, \"Token ID invalid\");\n            require(!_exists(lootIds[i]), \"One of these tokens have already been minted\");\n            _safeMint(msg.sender, lootIds[i]);\n        }\n        \n    }","after":"function multiMint(uint[] calldata lootIds) public payable nonReentrant {\n        require(!privateSale, \"Public sale minting not started\");\n        require(saleIsActive, \"Sale must be active to mint\");\n        require((publicPrice * lootIds.length) <= msg.value, \"Ether value sent is not correct\");\n        \n        for (uint i=0; i<lootIds.length; i++) {\n            require(lootIds[i] > 0 && lootIds[i] < 8001, \"Token ID invalid\");\n            require(!_exists(lootIds[i]), \"One of these tokens have already been minted\");\n            _safeMint(msg.sender, lootIds[i]);\n        }\n        \n    }","contract":"LootRealms","time":0},{"type":"constant-restrict-modification  ","before":"address public lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;","after":"address public constant lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;","contract":"LootRealms","time":1}]}
{"time":173,"results":[{"type":"external-function ","before":"function whitelistedMint(\n        bytes memory sig, \n        bytes32 hash,\n        uint256 id,\n        uint256 qty\n    ) external {\n        require(qty > 0, \"minimum 1 token\");\n\t\trequire(whitelistedMintActive, \"mint not live\");\n        require(!whitelistMinted[msg.sender], \"already minted\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(hashTransaction(msg.sender, id, qty) == hash, \"hash check failed\");\n\n        _mint(msg.sender, id, qty, \"\");\n        whitelistMinted[msg.sender] = true;\n    }","after":"function whitelistedMint(\n        bytes calldata sig, \n        bytes32 hash,\n        uint256 id,\n        uint256 qty\n    ) external {\n        require(qty > 0, \"minimum 1 token\");\n\t\trequire(whitelistedMintActive, \"mint not live\");\n        require(!whitelistMinted[msg.sender], \"already minted\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(hashTransaction(msg.sender, id, qty) == hash, \"hash check failed\");\n\n        _mint(msg.sender, id, qty, \"\");\n        whitelistMinted[msg.sender] = true;\n    }","contract":"TDNButterflyCheckpoint","time":0},{"type":"external-function ","before":"function setBaseURI(string memory URI) public onlyOwner {\n\t\t_baseTokenURI = URI;\n\t}","after":"function setBaseURI(string calldata URI) public onlyOwner {\n\t\t_baseTokenURI = URI;\n\t}","contract":"TDNButterflyCheckpoint","time":0},{"type":"external-function ","before":"function setContractURI(string memory URI) public onlyOwner {\n\t\t_contractURI = URI;\n\t}","after":"function setContractURI(string calldata URI) public onlyOwner {\n\t\t_contractURI = URI;\n\t}","contract":"TDNButterflyCheckpoint","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"TDNButterflyCheckpoint","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"TDNButterflyCheckpoint","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"TDNButterflyCheckpoint","time":0}]}
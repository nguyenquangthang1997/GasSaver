{"time":63,"results":[{"type":"struct-data-arrangement ","before":"\naddress user\nuint256 amount\nbool isReceived\nbool isProcessed","after":"uint256 amount\naddress user\nbool isReceived\nbool isProcessed\n","contract":"WMBXBridge","time":0},{"type":"external-function ","before":"function burnTokens(string memory _memo, uint256 _amount) external payable nonReentrant {\n    require(!isFrozen, \"Contract is frozen\");\n    require(msg.value >= burnFeeRate, \"Fee not met\");\n    require(TOKEN.allowance(msg.sender, address(this)) >= _amount, \"No allowance\");\n    TOKEN.burnFrom(msg.sender, _amount);\n    feeAddress.transfer(msg.value);\n    emit BridgeAction(msg.sender, 'BURN', _amount, msg.value, _memo);\n  }","after":"function burnTokens(string calldata _memo, uint256 _amount) external payable nonReentrant {\n    require(!isFrozen, \"Contract is frozen\");\n    require(msg.value >= burnFeeRate, \"Fee not met\");\n    require(TOKEN.allowance(msg.sender, address(this)) >= _amount, \"No allowance\");\n    TOKEN.burnFrom(msg.sender, _amount);\n    feeAddress.transfer(msg.value);\n    emit BridgeAction(msg.sender, 'BURN', _amount, msg.value, _memo);\n  }","contract":"WMBXBridge","time":0},{"type":"external-function ","before":"function validateMint(address _user, string memory _memo, uint256 _amount) external nonReentrant {\n    require(!isFrozen, \"Contract is frozen\");\n    require(_validators[msg.sender], \"Not authorized\");\n    require(_amount > 0, \"Amount must be greater than zero.\");\n    require(!_mints[_memo].isReceived, \"Mint already logged.\");\n    require(!_pending[_user].isPending, \"Owner already has mint pending.\");\n    _mints[_memo] = MintOperation(_user, _amount, true, false);\n    _pending[_user] = MintPending(_memo, true);\n  }","after":"function validateMint(address _user, string calldata _memo, uint256 _amount) external nonReentrant {\n    require(!isFrozen, \"Contract is frozen\");\n    require(_validators[msg.sender], \"Not authorized\");\n    require(_amount > 0, \"Amount must be greater than zero.\");\n    require(!_mints[_memo].isReceived, \"Mint already logged.\");\n    require(!_pending[_user].isPending, \"Owner already has mint pending.\");\n    _mints[_memo] = MintOperation(_user, _amount, true, false);\n    _pending[_user] = MintPending(_memo, true);\n  }","contract":"WMBXBridge","time":0},{"type":"external-function ","before":"function claimTokens(string memory _memo) external payable nonReentrant {\n    require(!isFrozen, \"Contract is frozen\");\n    require(_mints[_memo].isReceived, \"Memo not found\");\n    require(_mints[_memo].user == msg.sender, \"Not owner\");\n    require(!_mints[_memo].isProcessed, \"Memo already processed\");\n    require(msg.value >= claimFeeRate, \"Fee not met\");\n    TOKEN.mint(msg.sender, _mints[_memo].amount);\n    feeAddress.transfer(msg.value);\n    _mints[_memo].isProcessed = true;\n    _pending[_mints[_memo].user].isPending = false;\n    emit BridgeAction(msg.sender, \"CLAIM\", _mints[_memo].amount, msg.value, _memo);\n  }","after":"function claimTokens(string calldata _memo) external payable nonReentrant {\n    require(!isFrozen, \"Contract is frozen\");\n    require(_mints[_memo].isReceived, \"Memo not found\");\n    require(_mints[_memo].user == msg.sender, \"Not owner\");\n    require(!_mints[_memo].isProcessed, \"Memo already processed\");\n    require(msg.value >= claimFeeRate, \"Fee not met\");\n    TOKEN.mint(msg.sender, _mints[_memo].amount);\n    feeAddress.transfer(msg.value);\n    _mints[_memo].isProcessed = true;\n    _pending[_mints[_memo].user].isPending = false;\n    emit BridgeAction(msg.sender, \"CLAIM\", _mints[_memo].amount, msg.value, _memo);\n  }","contract":"WMBXBridge","time":0}]}
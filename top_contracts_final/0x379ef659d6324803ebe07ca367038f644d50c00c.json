{"time":216,"results":[{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","contract":"ToadzWorld","time":0},{"type":"external-function ","before":"function mintSpecial(uint256 [] memory devIDs) external onlyOwner {        \n        for (uint256 i = 0; i < devIDs.length; i++) {\n            _mint(msg.sender, devIDs[i]);\n        }\n    }","after":"function mintSpecial(uint256 [] calldata devIDs) external onlyOwner {        \n        for (uint256 i = 0; i < devIDs.length; i++) {\n            _mint(msg.sender, devIDs[i]);\n        }\n    }","contract":"ToadzWorld","time":0},{"type":"external-function ","before":"function initializePaymentSplitter (address[] memory payees, uint256[] memory shares_) external onlyOwner {\n        require (!initialized, \"Payment Split Already Initialized!\");\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n        initialized=true;\n    }","after":"function initializePaymentSplitter (address[] calldata payees, uint256[] calldata shares_) external onlyOwner {\n        require (!initialized, \"Payment Split Already Initialized!\");\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n        initialized=true;\n    }","contract":"ToadzWorld","time":0},{"type":"external-function ","before":"function multiMintWithnft(uint256 [] memory nftIds) external {\n        require(openMint, \"mint not open\");\n        require(onlyToadz, \"free mint has ended\");\n        for (uint i=0; i< nftIds.length; i++) {\n            require(nftContract.ownerOf(nftIds[i]) == msg.sender, \"Not the owner of this Toad\");\n            if (nftIds[i] >= 1000000) {\n                continue;\n            } else {\n                if(_exists(nftIds[i])) {\n                    continue;\n                } else {\n                    _mint(msg.sender, nftIds[i]);\n                }\n            }\n        }\n    }","after":"function multiMintWithnft(uint256 [] calldata nftIds) external {\n        require(openMint, \"mint not open\");\n        require(onlyToadz, \"free mint has ended\");\n        for (uint i=0; i< nftIds.length; i++) {\n            require(nftContract.ownerOf(nftIds[i]) == msg.sender, \"Not the owner of this Toad\");\n            if (nftIds[i] >= 1000000) {\n                continue;\n            } else {\n                if(_exists(nftIds[i])) {\n                    continue;\n                } else {\n                    _mint(msg.sender, nftIds[i]);\n                }\n            }\n        }\n    }","contract":"ToadzWorld","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxMintsPerTx = 10;","after":"uint256 public constant maxMintsPerTx = 10;","contract":"ToadzWorld","time":0},{"type":"constant-restrict-modification  ","before":"address public nftAddress = 0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6;","after":"address public constant nftAddress = 0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6;","contract":"ToadzWorld","time":0}]}
{"time":132,"results":[{"type":"state-data-arrangement ","before":"\n\n                revert(reason);\n            }\nh {\n                revert(\"ERC1155: transf\nnon ERC1155Receiver implemente\n            }\n        }\n    }\n\n    function _asSi\nnArray(uint256 element) private pure ret\n(uint256[] memory) {\n        uint256[] memory a\n= new uint256[](1);\n        array[0] = element;\n    return array;\n    }\n}\n\n// File: contrac\nlyVillains.sol\n\ncontract HolyVillains is ERC1155, \nle {\n    string public constant name = \"Holy Villa\n    string public constant symbol = \"VILLAINS\";\n\n    uint32 public \nupply = 0;\n    uint256 public constant un","after":"\n                revert(reason);\n            }\nh {\n                revert(\"ERC1155: transf\n            }\n        }\n    }\n\n    function _asSi\nupply = 0;\n    uint256 public constant un\n    string public constant symbol = \"VILLAINS\";\n\n    uint32 public \nnon ERC1155Receiver implemente\nnArray(uint256 element) private pure ret\n(uint256[] memory) {\n        uint256[] memory a\n= new uint256[](1);\n        array[0] = element;\n    return array;\n    }\n}\n\n// File: contrac\nlyVillains.sol\n\ncontract HolyVillains is ERC1155, \nle {\n    string public constant name = \"Holy Villa\n","contract":"HolyVillains","time":1},{"type":"external-function ","before":"1641672000;\n    uint32 public constant preSaleMaxSupply = 1000;\n    uint32 public","after":"1641672000;\n    uint32 public constant preSaleMaxSupply = 1000;\n    uint32 public","contract":"HolyVillains","time":0},{"type":"external-function ","before":"0.\");\n        require(\n            totalSupply + count <= publicSaleMaxSupply,\n            \"Count exceeds the maximum allowed supply.\"\n        );\n        require(msg.value >= unitPrice * count, \"Not enough ether.\");\n        require(\n            minted[msg.sender] + count <= publicSaleMaxPerWallet,\n            \"Count exceeds t","after":"0.\");\n        require(\n            totalSupply + count <= publicSaleMaxSupply,\n            \"Count exceeds the maximum allowed supply.\"\n        );\n        require(msg.value >= unitPrice * count, \"Not enough ether.\");\n        require(\n            minted[msg.sender] + count <= publicSaleMaxPerWallet,\n            \"Count exceeds t","contract":"HolyVillains","time":0},{"type":"external-function ","before":"unction setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n  ","after":"unction setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n  ","contract":"HolyVillains","time":0},{"type":"external-function ","before":"safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTrans","after":"safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTrans","contract":"HolyVillains","time":0}]}
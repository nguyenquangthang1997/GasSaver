{"time":282,"results":[{"type":"struct-data-arrangement ","before":"\naddress token\nuint256 tokenId\nuint256 amount\nuint8 kind\nbytes mintData","after":"uint256 tokenId\nuint256 amount\nbytes mintData\naddress token\nuint8 kind\n","contract":"MarketNG","time":0},{"type":"external-function ","before":"function swap(Swap memory req, bytes memory signature) public nonReentrant whenNotPaused {\n        require(req.deadline > block.timestamp, 'deadline reached');\n        require(\n            isSignatureValid(signature, keccak256(abi.encode(req)), req.creator),\n            'signature error'\n        );\n\n        for (uint256 i = 0; i < req.wants.length; i++) {\n            req.wants[i].token.safeTransferFrom(msg.sender, req.creator, req.wants[i].tokenId);\n        }\n\n        for (uint256 i = 0; i < req.has.length; i++) {\n            req.has[i].token.safeTransferFrom(req.creator, msg.sender, req.has[i].tokenId);\n        }\n\n        emit EvSwapped(req, signature, msg.sender);\n    }","after":"function swap(Swap calldata req, bytes calldata signature) public nonReentrant whenNotPaused {\n        require(req.deadline > block.timestamp, 'deadline reached');\n        require(\n            isSignatureValid(signature, keccak256(abi.encode(req)), req.creator),\n            'signature error'\n        );\n\n        for (uint256 i = 0; i < req.wants.length; i++) {\n            req.wants[i].token.safeTransferFrom(msg.sender, req.creator, req.wants[i].tokenId);\n        }\n\n        for (uint256 i = 0; i < req.has.length; i++) {\n            req.has[i].token.safeTransferFrom(req.creator, msg.sender, req.has[i].tokenId);\n        }\n\n        emit EvSwapped(req, signature, msg.sender);\n    }","contract":"MarketNG","time":0},{"type":"external-function ","before":"function send(address to, Pair721[] memory tokens) public nonReentrant whenNotPaused {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            Pair721 memory p = tokens[i];\n            p.token.safeTransferFrom(msg.sender, to, p.tokenId);\n        }\n    }","after":"function send(address to, Pair721[] calldata tokens) public nonReentrant whenNotPaused {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            Pair721 memory p = tokens[i];\n            p.token.safeTransferFrom(msg.sender, to, p.tokenId);\n        }\n    }","contract":"MarketNG","time":0}]}
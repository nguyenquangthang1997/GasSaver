{"time":162,"results":[{"type":"external-function ","before":"\n  function adminTransfer(\n    address sender,\n    address recipient,\n    uint256 amount,\n    bytes memory data,\n    bytes memory operatorData\n  )\n    public\n  {\n    require(_msgSender() == adminOperator, \"caller is not the admin operator\");\n    _send(sender, recipient, amount, data, operatorData, false);\n    emit AdminTransferInvoked(adminOperator);\n","after":"\n  function adminTransfer(\n    address sender,\n    address recipient,\n    uint256 amount,\n    bytes calldata data,\n    bytes calldata operatorData\n  )\n    public\n  {\n    require(_msgSender() == adminOperator, \"caller is not the admin operator\");\n    _send(sender, recipient, amount, data, operatorData, false);\n    emit AdminTransferInvoked(adminOperator);\n","contract":"PNT","time":0},{"type":"external-function ","before":"function preRelayedCall(bytes memory context) public virtual override returns (bytes32) {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        return _preRelayedCall(context);\n    }","after":"function preRelayedCall(bytes calldata context) public virtual override returns (bytes32) {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        return _preRelayedCall(context);\n    }","contract":"PNT","time":0},{"type":"external-function ","before":"function postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) public virtual override {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        _postRelayedCall(context, success, actualCharge, preRetVal);\n    }","after":"function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) public virtual override {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        _postRelayedCall(context, success, actualCharge, preRetVal);\n    }","contract":"PNT","time":0},{"type":"external-function ","before":"function send(address recipient, uint256 amount, bytes memory data) public override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }","after":"function send(address recipient, uint256 amount, bytes calldata data) public override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }","contract":"PNT","time":0},{"type":"external-function ","before":"function burn(uint256 amount, bytes memory data) public override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }","after":"function burn(uint256 amount, bytes calldata data) public override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }","contract":"PNT","time":0},{"type":"external-function ","before":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }","after":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }","contract":"PNT","time":0},{"type":"external-function ","before":"function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }","after":"function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }","contract":"PNT","time":0}]}
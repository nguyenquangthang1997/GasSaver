{"time":114,"results":[{"type":"state-data-arrangement ","before":"\naddress public immutable owner;\nuint256 public constant MAX_SUPPLY = 10000;\nuint256 public price = 1 ether / 20;\nbool public saleEnabled;\nuint256 public counter = 1;\nuint256 public shibasMinted;\nstring private shibasURI;","after":"uint256 public constant MAX_SUPPLY = 10000;\nuint256 public price = 1 ether / 20;\nuint256 public counter = 1;\nuint256 public shibasMinted;\nstring private shibasURI;\naddress public immutable owner;\nbool public saleEnabled;\n","contract":"SpaceShibas","time":0},{"type":"external-function ","before":"function mintBunch(uint256[] memory toMint) public {\n    require(msg.sender == owner, \"Only owner can mint before sale\");\n    shibasMinted += toMint.length;\n    for (uint256 i = 0; i < toMint.length; i++) {\n      require(toMint[i] != 0 && toMint[i] <= MAX_SUPPLY, \"Invalid tokenId\");\n      _mint(msg.sender, toMint[i]); \n    }\n  }","after":"function mintBunch(uint256[] calldata toMint) public {\n    require(msg.sender == owner, \"Only owner can mint before sale\");\n    shibasMinted += toMint.length;\n    for (uint256 i = 0; i < toMint.length; i++) {\n      require(toMint[i] != 0 && toMint[i] <= MAX_SUPPLY, \"Invalid tokenId\");\n      _mint(msg.sender, toMint[i]); \n    }\n  }","contract":"SpaceShibas","time":0}]}
{"time":50,"results":[{"type":"state-data-arrangement ","before":"\naddress public immutable targetContract;\nmapping(uint32 => StakeData[]) public tokenStakes;\nmapping(address => StakeIndex[]) public userStakes;\nuint32 public constant FEATURE_STAKING = 0x0000_0001;\nuint32 public constant FEATURE_UNSTAKING = 0x0000_0002;\nuint32 public constant ROLE_RESCUE_MANAGER = 0x0001_0000;","after":"mapping(uint32 => StakeData[]) public tokenStakes;\nmapping(address => StakeIndex[]) public userStakes;\naddress public immutable targetContract;\nuint32 public constant FEATURE_STAKING = 0x0000_0001;\nuint32 public constant FEATURE_UNSTAKING = 0x0000_0002;\nuint32 public constant ROLE_RESCUE_MANAGER = 0x0001_0000;\n","contract":"NFTStaking","time":0},{"type":"external-function ","before":"function stakeBatch(uint32[] memory tokenIds) public {\n\t\t// iterate the collection passed\n\t\tfor(uint256 i = 0; i < tokenIds.length; i++) {\n\t\t\t// and stake each token one by one\n\t\t\tstake(tokenIds[i]);\n\t\t}\n\t}","after":"function stakeBatch(uint32[] calldata tokenIds) public {\n\t\t// iterate the collection passed\n\t\tfor(uint256 i = 0; i < tokenIds.length; i++) {\n\t\t\t// and stake each token one by one\n\t\t\tstake(tokenIds[i]);\n\t\t}\n\t}","contract":"NFTStaking","time":0},{"type":"external-function ","before":"function unstakeBatch(uint32[] memory tokenIds) public {\n\t\t// iterate the collection passed\n\t\tfor(uint256 i = 0; i < tokenIds.length; i++) {\n\t\t\t// and unstake each token one by one\n\t\t\tunstake(tokenIds[i]);\n\t\t}\n\t}","after":"function unstakeBatch(uint32[] calldata tokenIds) public {\n\t\t// iterate the collection passed\n\t\tfor(uint256 i = 0; i < tokenIds.length; i++) {\n\t\t\t// and unstake each token one by one\n\t\t\tunstake(tokenIds[i]);\n\t\t}\n\t}","contract":"NFTStaking","time":1}]}
{"time":735,"results":[{"type":"external-function ","before":"(_totalSupply().add(_amount) <= MAX_MONSTERS, \"Hold up! Purchase would exceed max supply. Try a lower amount.\");\n        ","after":"(_totalSupply().add(_amount) <= MAX_MONSTERS, \"Hold up! Purchase would exceed max supply. Try a lower amount.\");\n        ","contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":"e(howManyMonsters[_to] >= 2 == false, \"Nice Try! You shall not have more than 2 in your wallet.\");\n       ","after":"e(howManyMonsters[_to] >= 2 == false, \"Nice Try! You shall not have more than 2 in your wallet.\");\n       ","contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":" \"Sneaky sneaky! You need a Gold Ticket or be white-listed to mint right now.\");\n            require(goldTicket.balanceOf(_to) > 0 == true || isOnWhiteList[_to] == true, \"Nice Try! You need a Gold Ticket or be Whitelisted\");\n            require","after":" \"Sneaky sneaky! You need a Gold Ticket or be white-listed to mint right now.\");\n            require(goldTicket.balanceOf(_to) > 0 == true || isOnWhiteList[_to] == true, \"Nice Try! You need a Gold Ticket or be Whitelisted\");\n            require","contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":" maxPerTx = 2;\n        } else if (block.timestamp >= presaleStartTime) {\n            maxPerTx = 1;\n        }\n       return maxPerTx;\n    }\n\n    function getStatus() public view returns (Status) {\n        if(block.timestamp >= publicSaleStartTime) {\n            return Status.PublicSaleStart;\n        } else if (block.timestamp >= presaleStartTime) {\n            return Status.PresaleStart;\n  ","after":" maxPerTx = 2;\n        } else if (block.timestamp >= presaleStartTime) {\n            maxPerTx = 1;\n        }\n       return maxPerTx;\n    }\n\n    function getStatus() public view returns (Status) {\n        if(block.timestamp >= publicSaleStartTime) {\n            return Status.PublicSaleStart;\n        } else if (block.timestamp >= presaleStartTime) {\n            return Status.PresaleStart;\n  ","contract":"SuperFuzzBadBatch","time":0},{"type":"constant-restrict-modification  ","before":"enzeppelin/contracts/token/ERC721/exten","after":"enzeppelin/contracts/token/ERC721/exten","contract":"SuperFuzzBadBatch","time":0},{"type":"constant-restrict-modification  ","before":" \"@openzeppelin/contracts/tok","after":" \"@openzeppelin/contracts/tok","contract":"SuperFuzzBadBatch","time":0},{"type":"constant-restrict-modification  ","before":"Counters.Counter;\n\n    enum Status {\n        Closed,\n        PresaleStart,\n    ","after":"Counters.Counter;\n\n    enum Status {\n        Closed,\n        PresaleStart,\n    ","contract":"SuperFuzzBadBatch","time":0},{"type":"external-function ","before":" Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n    string public PROVENANCE = \"\";\n    uint256 public MAX_TIC","after":" Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n    string public PROVENANCE = \"\";\n    uint256 public MAX_TIC","contract":"SuperFuzzGoldTicket","time":0},{"type":"external-function ","before":"newMax) external onlyOwner {\n        MAX_TICKETS = _newMax;\n    }\n\n    function increaseSupply() internal {\n        _tokenIds.increment();\n        mintedTokens = _totalSupply();\n        emit IncreaseSupply(mintedTokens);\n    }\n\n    function _totalSupply() public view returns (uint256) {\n        return _tokenIds.current();\n    }\n\n    function setProvenanceHash(string memory _provenanceHash)\n    external\n    onlyOwner\n    {\n        PROVENANCE = _provenanceHash;\n    }\n\n    function flipSaleState() external onlyOwner {\n        isSaleActive = !isSaleActive;\n    }\n\n    function addToAirDropList(address _to) internal {\n        airDropList.push(_to);\n    }\n\n    function getAirDropList() external view returns (address[] memory) {\n        return airDropList;\n    }\n\n    function airDropTicket(address _to) external onlyOwner {\n        // set rule address can only have one ticket\n        require(\n            hasTicket[_to] == false,\n            \"Cannot own more than one Gold Ticket\"\n        );\n        req","after":"newMax) external onlyOwner {\n        MAX_TICKETS = _newMax;\n    }\n\n    function increaseSupply() internal {\n        _tokenIds.increment();\n        mintedTokens = _totalSupply();\n        emit IncreaseSupply(mintedTokens);\n    }\n\n    function _totalSupply() public view returns (uint256) {\n        return _tokenIds.current();\n    }\n\n    function setProvenanceHash(string memory _provenanceHash)\n    external\n    onlyOwner\n    {\n        PROVENANCE = _provenanceHash;\n    }\n\n    function flipSaleState() external onlyOwner {\n        isSaleActive = !isSaleActive;\n    }\n\n    function addToAirDropList(address _to) internal {\n        airDropList.push(_to);\n    }\n\n    function getAirDropList() external view returns (address[] memory) {\n        return airDropList;\n    }\n\n    function airDropTicket(address _to) external onlyOwner {\n        // set rule address can only have one ticket\n        require(\n            hasTicket[_to] == false,\n            \"Cannot own more than one Gold Ticket\"\n        );\n        req","contract":"SuperFuzzGoldTicket","time":0},{"type":"external-function ","before":"Gold Tickets\");\n        require(\n            _totalSupply().add(1) <= MAX_TICKETS,\n            \"Purchase wo","after":"Gold Tickets\");\n        require(\n            _totalSupply().add(1) <= MAX_TICKETS,\n            \"Purchase wo","contract":"SuperFuzzGoldTicket","time":0},{"type":"external-function ","before":"Ctrl = 0x75A04eB37090eea7A20612B51fa76E35CBe3F8C9;\n\n    address[] private _team = [multiSig, coreTeam, dev, genArt];\n    uint[] private _team_shares = [45, 45, 5, 5];\n\n    constructor()\n   ","after":"Ctrl = 0x75A04eB37090eea7A20612B51fa76E35CBe3F8C9;\n\n    address[] private _team = [multiSig, coreTeam, dev, genArt];\n    uint[] private _team_shares = [45, 45, 5, 5];\n\n    constructor()\n   ","contract":"SuperFuzzGoodGuys","time":0},{"type":"external-function ","before":"   {\n        _baseURIextended = \"ipfs://QmPD4F85Yd1VJWMkfxdx5e34a973pkYW5apuiX8wc8cnRc/\";\n\n        accou","after":"   {\n        _baseURIextended = \"ipfs://QmPD4F85Yd1VJWMkfxdx5e34a973pkYW5apuiX8wc8cnRc/\";\n\n        accou","contract":"SuperFuzzGoodGuys","time":0},{"type":"external-function ","before":"uint _id, address _address);\n    // End Events\n\n    // Modifiers\n    modifier onlyTeam() {\n        require(accounts[msg.sender].isTeam == true, \"Sneaky sneaky! You are not part of the team\"","after":"uint _id, address _address);\n    // End Events\n\n    // Modifiers\n    modifier onlyTeam() {\n        require(accounts[msg.sender].isTeam == true, \"Sneaky sneaky! You are not part of the team\"","contract":"SuperFuzzGoodGuys","time":0},{"type":"external-function ","before":"     _;\n    }\n\n    modifier verifyAirDrop(address _to, uint _amount) {\n        require(totalSupply() < (maxTokens), \"We Sold All Out, See you on the next drop!\");\n        require(totalSuppl","after":"     _;\n    }\n\n    modifier verifyAirDrop(address _to, uint _amount) {\n        require(totalSupply() < (maxTokens), \"We Sold All Out, See you on the next drop!\");\n        require(totalSuppl","contract":"SuperFuzzGoodGuys","time":0},{"type":"external-function ","before":"d(_amount) <= (maxTokens), \"Purchase would exceed max supply of Bad Batch\");\n        _;\n    }\n\n    modifier verifyBuy(address _to, uint _amount) {\n        require(isSaleLive, \"Nice Try! Sale has not started yet!\");\n        require(_amount > 0, \"Hold up! You need to purchase a","after":"d(_amount) <= (maxTokens), \"Purchase would exceed max supply of Bad Batch\");\n        _;\n    }\n\n    modifier verifyBuy(address _to, uint _amount) {\n        require(isSaleLive, \"Nice Try! Sale has not started yet!\");\n        require(_amount > 0, \"Hold up! You need to purchase a","contract":"SuperFuzzGoodGuys","time":0},{"type":"external-function ","before":"  }\n\n    function setBaseURI(string memory _newURI) external onlyTeam {\n        _baseURIextended = _newURI;\n    }\n\n    function setMaxPerWallet(uint _amount) external onlyTeam {\n        maxPerWallet = _amount;\n    }\n\n    function setTotalSupply(uint _amount) external onlyTeam {\n        maxTokens = uint16(_amount);\n    }\n\n    function setPrice(uint _newPrice) external onlyTeam {\n        PRICE = _newPrice;\n    }\n\n    function toggleSale() external onlyTeam {\n        isSaleLive = !isSaleLive;","after":"  }\n\n    function setBaseURI(string calldata _newURI) external onlyTeam {\n        _baseURIextended = _newURI;\n    }\n\n    function setMaxPerWallet(uint _amount) external onlyTeam {\n        maxPerWallet = _amount;\n    }\n\n    function setTotalSupply(uint _amount) external onlyTeam {\n        maxTokens = uint16(_amount);\n    }\n\n    function setPrice(uint _newPrice) external onlyTeam {\n        PRICE = _newPrice;\n    }\n\n    function toggleSale() external onlyTeam {\n        isSaleLive = !isSaleLive;","contract":"SuperFuzzGoodGuys","time":0},{"type":"constant-restrict-modification  ","before":"d);\n    }\n\n    function tokenURI(uint256 tokenId)\n    public\n    view\n    overr","after":"d);\n    }\n\n    function tokenURI(uint256 tokenId)\n    public\n    view\n    overr","contract":"SuperFuzzGoodGuys","time":0},{"type":"constant-restrict-modification  ","before":"(string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function supp","after":"(string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function supp","contract":"SuperFuzzGoodGuys","time":0},{"type":"immutable-restrict-modification ","before":"gma solidity 0.8.2;\n\n/**\n\n█�","after":"gma solidity 0.8.2;\n\n/**\n\n█�","contract":"SuperFuzzGoodGuys","time":0}]}
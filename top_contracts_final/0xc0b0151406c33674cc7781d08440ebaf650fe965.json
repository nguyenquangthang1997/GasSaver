{"time":63,"results":[{"type":"external-function ","before":"function upgrade(uint256[] memory upgradeIDs, uint256[] memory sacrificeIDs, uint256 level, uint256 method, uint256 cost, bytes32 nonce, bytes memory signature) whileUnpaused external payable {\n        address operator = _msgSender();\n        if ( msg.value != cost) revert Errors.InsufficientBalance(msg.value, cost);\n        if ( ! verifySignature(signature, getHash(getDigest(_msgSender(), upgradeIDs, sacrificeIDs, level, method, cost, nonce)))) {\n            revert Errors.InvalidSignature();\n        }\n\n        for (uint i; i < upgradeIDs.length; i++) {\n            emit TokenUpgraded(upgradeIDs[ i ], level, nonce);\n        }\n\n        for (uint i; i < sacrificeIDs.length; i++) {\n            emit TokenSacrificed(sacrificeIDs[ i ], nonce);\n        }\n\n        emit UpgradeCompleted(nonce, operator, upgradeIDs, level);\n    }","after":"function upgrade(uint256[] calldata upgradeIDs, uint256[] calldata sacrificeIDs, uint256 level, uint256 method, uint256 cost, bytes32 nonce, bytes calldata signature) whileUnpaused external payable {\n        address operator = _msgSender();\n        if ( msg.value != cost) revert Errors.InsufficientBalance(msg.value, cost);\n        if ( ! verifySignature(signature, getHash(getDigest(_msgSender(), upgradeIDs, sacrificeIDs, level, method, cost, nonce)))) {\n            revert Errors.InvalidSignature();\n        }\n\n        for (uint i; i < upgradeIDs.length; i++) {\n            emit TokenUpgraded(upgradeIDs[ i ], level, nonce);\n        }\n\n        for (uint i; i < sacrificeIDs.length; i++) {\n            emit TokenSacrificed(sacrificeIDs[ i ], nonce);\n        }\n\n        emit UpgradeCompleted(nonce, operator, upgradeIDs, level);\n    }","contract":"TikiCarving","time":0}]}
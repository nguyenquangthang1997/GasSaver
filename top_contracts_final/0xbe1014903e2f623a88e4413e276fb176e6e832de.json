{"time":170,"results":[{"type":"external-function ","before":"function setBaseURI(string memory baseUri) public onlyOwner {\n    require(!_isBaseUriSet, \"Base URI has already been set\");\n\n    _baseUri = baseUri;\n    _isBaseUriSet = true;\n  }","after":"function setBaseURI(string calldata baseUri) public onlyOwner {\n    require(!_isBaseUriSet, \"Base URI has already been set\");\n\n    _baseUri = baseUri;\n    _isBaseUriSet = true;\n  }","contract":"TokenmonMinter","time":0},{"type":"external-function ","before":"function evolve(uint256[3] memory _tokensToBurn) public payable {\n    require(_isApprovedOrOwner(msg.sender, _tokensToBurn[0]) && _isApprovedOrOwner(msg.sender, _tokensToBurn[1]) && _isApprovedOrOwner(msg.sender, _tokensToBurn[2]), \"TokenmonMinter: caller is not owner nor approved\");\n    require(evolutionContract.isEvolvingActive(), \"TokenmonMinter: Evolving is not active right now\");\n    require(evolutionContract.isEvolutionValid(_tokensToBurn), \"TokenmonMinter: Evolution is not valid\");\n    require(evolutionContract.getEvolutionPrice() == msg.value, \"TokenmonMinter: must send correct ETH amount\");\n    \n    _burn(_tokensToBurn[0]);\n    _burn(_tokensToBurn[1]);\n    _burn(_tokensToBurn[2]);\n    \n    _secondEvoTokenId + 1;\n    _mint(msg.sender, _secondEvoTokenId);\n    \n    emit Evolve(msg.sender, _secondEvoTokenId, _tokensToBurn);\n  }","after":"function evolve(uint256[3] calldata _tokensToBurn) public payable {\n    require(_isApprovedOrOwner(msg.sender, _tokensToBurn[0]) && _isApprovedOrOwner(msg.sender, _tokensToBurn[1]) && _isApprovedOrOwner(msg.sender, _tokensToBurn[2]), \"TokenmonMinter: caller is not owner nor approved\");\n    require(evolutionContract.isEvolvingActive(), \"TokenmonMinter: Evolving is not active right now\");\n    require(evolutionContract.isEvolutionValid(_tokensToBurn), \"TokenmonMinter: Evolution is not valid\");\n    require(evolutionContract.getEvolutionPrice() == msg.value, \"TokenmonMinter: must send correct ETH amount\");\n    \n    _burn(_tokensToBurn[0]);\n    _burn(_tokensToBurn[1]);\n    _burn(_tokensToBurn[2]);\n    \n    _secondEvoTokenId + 1;\n    _mint(msg.sender, _secondEvoTokenId);\n    \n    emit Evolve(msg.sender, _secondEvoTokenId, _tokensToBurn);\n  }","contract":"TokenmonMinter","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private _secondEvoTokenId = MAX_FIRST_EVO_SUPPLY;","after":"uint256 private constant _secondEvoTokenId = MAX_FIRST_EVO_SUPPLY;","contract":"TokenmonMinter","time":0}]}
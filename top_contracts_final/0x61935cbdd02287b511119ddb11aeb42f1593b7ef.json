{"time":836,"results":[{"type":"external-function ","before":"function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","after":"function batchMatchOrders(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","after":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","after":"function matchOrders(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","after":"function matchOrdersWithMaximalFill(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function cancelOrder(LibOrder.Order memory order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","after":"function cancelOrder(LibOrder.Order calldata order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","after":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction calldata transaction,\n        bytes calldata signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","after":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] calldata transactions,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrKillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrKillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 takerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 makerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","after":"function batchCancelOrders(LibOrder.Order[] calldata orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"IsolatedExchange","time":0},{"type":"external-function ","before":"function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","after":"function batchMatchOrders(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","after":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","after":"function matchOrders(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","after":"function matchOrdersWithMaximalFill(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function cancelOrder(LibOrder.Order memory order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","after":"function cancelOrder(LibOrder.Order calldata order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","after":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction calldata transaction,\n        bytes calldata signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","after":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] calldata transactions,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrKillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrKillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 takerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 makerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","after":"function batchCancelOrders(LibOrder.Order[] calldata orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"ReentrancyTester","time":0},{"type":"external-function ","before":"function dispatchTransferFrom(\n        bytes32 orderHash,\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        public\n    {\n        _dispatchTransferFrom(orderHash, assetData, from, to, amount);\n    }","after":"function dispatchTransferFrom(\n        bytes32 orderHash,\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        public\n    {\n        _dispatchTransferFrom(orderHash, assetData, from, to, amount);\n    }","contract":"TestAssetProxyDispatcher","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"TestAssetProxyDispatcher","time":0},{"type":"external-function ","before":"function testUpdateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        public\n        payable\n    {\n        filled[LibOrder.getTypedDataHash(order, EIP712_EXCHANGE_DOMAIN_HASH)] = orderTakerAssetFilledAmount;\n        _updateFilledState(\n            order,\n            takerAddress,\n            orderHash,\n            orderTakerAssetFilledAmount,\n            fillResults\n        );\n    }","after":"function testUpdateFilledState(\n        LibOrder.Order calldata order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults calldata fillResults\n    )\n        public\n        payable\n    {\n        filled[LibOrder.getTypedDataHash(order, EIP712_EXCHANGE_DOMAIN_HASH)] = orderTakerAssetFilledAmount;\n        _updateFilledState(\n            order,\n            takerAddress,\n            orderHash,\n            orderTakerAssetFilledAmount,\n            fillResults\n        );\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function settleOrder(\n        bytes32 orderHash,\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        public\n    {\n        _settleOrder(orderHash, order, takerAddress, fillResults);\n    }","after":"function settleOrder(\n        bytes32 orderHash,\n        LibOrder.Order calldata order,\n        address takerAddress,\n        LibFillResults.FillResults calldata fillResults\n    )\n        public\n    {\n        _settleOrder(orderHash, order, takerAddress, fillResults);\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function settleMatchOrders(\n        bytes32 leftOrderHash,\n        bytes32 rightOrderHash,\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        public\n    {\n        _settleMatchedOrders(\n            leftOrderHash,\n            rightOrderHash,\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n    }","after":"function settleMatchOrders(\n        bytes32 leftOrderHash,\n        bytes32 rightOrderHash,\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults calldata matchedFillResults\n    )\n        public\n    {\n        _settleMatchedOrders(\n            leftOrderHash,\n            rightOrderHash,\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","after":"function batchMatchOrders(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","after":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","after":"function matchOrders(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","after":"function matchOrdersWithMaximalFill(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function cancelOrder(LibOrder.Order memory order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","after":"function cancelOrder(LibOrder.Order calldata order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","after":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction calldata transaction,\n        bytes calldata signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","after":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] calldata transactions,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrKillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrKillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 takerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 makerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","after":"function batchCancelOrders(LibOrder.Order[] calldata orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"TestExchangeInternals","time":0},{"type":"external-function ","before":"function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","after":"function batchMatchOrders(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","after":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","after":"function matchOrders(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","after":"function matchOrdersWithMaximalFill(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function cancelOrder(LibOrder.Order memory order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","after":"function cancelOrder(LibOrder.Order calldata order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","after":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction calldata transaction,\n        bytes calldata signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","after":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] calldata transactions,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrKillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrKillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 takerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 makerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","after":"function batchCancelOrders(LibOrder.Order[] calldata orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"TestFillRounding","time":0},{"type":"external-function ","before":"function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","after":"function batchMatchOrders(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","after":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","after":"function matchOrders(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","after":"function matchOrdersWithMaximalFill(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function cancelOrder(LibOrder.Order memory order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","after":"function cancelOrder(LibOrder.Order calldata order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","after":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction calldata transaction,\n        bytes calldata signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","after":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] calldata transactions,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrKillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrKillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 takerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 makerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","after":"function batchCancelOrders(LibOrder.Order[] calldata orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"TestProtocolFees","time":0},{"type":"external-function ","before":"function executable(\n        bool shouldSucceed,\n        bytes memory data,\n        bytes memory returnData\n    )\n        public\n        returns (bytes memory)\n    {\n        emit ExecutableCalled(\n            data,\n            returnData,\n            currentContextAddress\n        );\n        require(shouldSucceed, \"EXECUTABLE_FAILED\");\n        if (data.length != 0) {\n            (bool didSucceed, bytes memory callResultData) = address(this).delegatecall(data); // This is a delegatecall to preserve the `msg.sender` field\n            if (!didSucceed) {\n                assembly { revert(add(callResultData, 0x20), mload(callResultData)) }\n            }\n        }\n        return returnData;\n    }","after":"function executable(\n        bool shouldSucceed,\n        bytes calldata data,\n        bytes calldata returnData\n    )\n        public\n        returns (bytes memory)\n    {\n        emit ExecutableCalled(\n            data,\n            returnData,\n            currentContextAddress\n        );\n        require(shouldSucceed, \"EXECUTABLE_FAILED\");\n        if (data.length != 0) {\n            (bool didSucceed, bytes memory callResultData) = address(this).delegatecall(data); // This is a delegatecall to preserve the `msg.sender` field\n            if (!didSucceed) {\n                assembly { revert(add(callResultData, 0x20), mload(callResultData)) }\n            }\n        }\n        return returnData;\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","after":"function batchMatchOrders(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","after":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","after":"function matchOrders(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","after":"function matchOrdersWithMaximalFill(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function cancelOrder(LibOrder.Order memory order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","after":"function cancelOrder(LibOrder.Order calldata order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","after":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction calldata transaction,\n        bytes calldata signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","after":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] calldata transactions,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrKillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrKillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 takerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 makerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","after":"function batchCancelOrders(LibOrder.Order[] calldata orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"TestTransactions","time":0},{"type":"external-function ","before":"function isValidSignature(\n        bytes memory data,\n        bytes memory signature\n    )\n        public\n        returns (bytes4 magicValue)\n    {\n        bytes32 hash = _decodeAndValidateHashFromEncodedData(data);\n        ValidatorAction action = _hashActions[hash];\n        if (action == ValidatorAction.Reject) {\n            magicValue = 0x0;\n        } else if (action == ValidatorAction.Accept) {\n            magicValue = EIP1271_MAGIC_VALUE;\n        } else if (action == ValidatorAction.Revert) {\n            revert(REVERT_REASON);\n        } else if (action == ValidatorAction.UpdateState) {\n            _updateState();\n        } else if (action == ValidatorAction.ReturnNothing) {\n            assembly {\n                return(0x0, 0)\n            }\n        } else if (action == ValidatorAction.ReturnTrue) {\n            assembly {\n                mstore(0x0, 1)\n                return(0x0, 32)\n            }\n        } else {\n            assert(action == ValidatorAction.MatchSignatureHash);\n            bytes32 expectedSignatureHash = _hashSignatureHashes[hash];\n            if (keccak256(signature) == expectedSignatureHash) {\n                magicValue = EIP1271_MAGIC_VALUE;\n            }\n        }\n    }","after":"function isValidSignature(\n        bytes calldata data,\n        bytes calldata signature\n    )\n        public\n        returns (bytes4 magicValue)\n    {\n        bytes32 hash = _decodeAndValidateHashFromEncodedData(data);\n        ValidatorAction action = _hashActions[hash];\n        if (action == ValidatorAction.Reject) {\n            magicValue = 0x0;\n        } else if (action == ValidatorAction.Accept) {\n            magicValue = EIP1271_MAGIC_VALUE;\n        } else if (action == ValidatorAction.Revert) {\n            revert(REVERT_REASON);\n        } else if (action == ValidatorAction.UpdateState) {\n            _updateState();\n        } else if (action == ValidatorAction.ReturnNothing) {\n            assembly {\n                return(0x0, 0)\n            }\n        } else if (action == ValidatorAction.ReturnTrue) {\n            assembly {\n                mstore(0x0, 1)\n                return(0x0, 32)\n            }\n        } else {\n            assert(action == ValidatorAction.MatchSignatureHash);\n            bytes32 expectedSignatureHash = _hashSignatureHashes[hash];\n            if (keccak256(signature) == expectedSignatureHash) {\n                magicValue = EIP1271_MAGIC_VALUE;\n            }\n        }\n    }","contract":"TestValidatorWallet","time":0},{"type":"external-function ","before":"function isValidSignature(\n        bytes32 hash,\n        bytes memory signature\n    )\n        public\n        returns (bytes4 magicValue)\n    {\n        ValidatorAction action = _hashActions[hash];\n        if (action == ValidatorAction.Reject) {\n            magicValue = bytes4(0);\n        } else if (action == ValidatorAction.Accept) {\n            magicValue = LEGACY_WALLET_MAGIC_VALUE;\n        } else if (action == ValidatorAction.Revert) {\n            revert(REVERT_REASON);\n        } else if (action == ValidatorAction.UpdateState) {\n            _updateState();\n        } else if (action == ValidatorAction.ReturnNothing) {\n            assembly {\n                return(0x0, 0)\n            }\n        } else if (action == ValidatorAction.ReturnTrue) {\n            assembly {\n                mstore(0x0, 1)\n                return(0x0, 32)\n            }\n        } else {\n            assert(action == ValidatorAction.MatchSignatureHash);\n            bytes32 expectedSignatureHash = _hashSignatureHashes[hash];\n            if (keccak256(signature) == expectedSignatureHash) {\n                magicValue = LEGACY_WALLET_MAGIC_VALUE;\n            }\n        }\n    }","after":"function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        public\n        returns (bytes4 magicValue)\n    {\n        ValidatorAction action = _hashActions[hash];\n        if (action == ValidatorAction.Reject) {\n            magicValue = bytes4(0);\n        } else if (action == ValidatorAction.Accept) {\n            magicValue = LEGACY_WALLET_MAGIC_VALUE;\n        } else if (action == ValidatorAction.Revert) {\n            revert(REVERT_REASON);\n        } else if (action == ValidatorAction.UpdateState) {\n            _updateState();\n        } else if (action == ValidatorAction.ReturnNothing) {\n            assembly {\n                return(0x0, 0)\n            }\n        } else if (action == ValidatorAction.ReturnTrue) {\n            assembly {\n                mstore(0x0, 1)\n                return(0x0, 32)\n            }\n        } else {\n            assert(action == ValidatorAction.MatchSignatureHash);\n            bytes32 expectedSignatureHash = _hashSignatureHashes[hash];\n            if (keccak256(signature) == expectedSignatureHash) {\n                magicValue = LEGACY_WALLET_MAGIC_VALUE;\n            }\n        }\n    }","contract":"TestValidatorWallet","time":0},{"type":"external-function ","before":"function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        return _fillOrderNoThrow(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n    }","after":"function fillOrderNoThrow(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        return _fillOrderNoThrow(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","after":"function batchMatchOrders(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            false\n        );\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","after":"function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] calldata leftOrders,\n        LibOrder.Order[] calldata rightOrders,\n        bytes[] calldata leftSignatures,\n        bytes[] calldata rightSignatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults)\n    {\n        return _batchMatchOrders(\n            leftOrders,\n            rightOrders,\n            leftSignatures,\n            rightSignatures,\n            true\n        );\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","after":"function matchOrders(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            false\n        );\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","after":"function matchOrdersWithMaximalFill(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        bytes calldata leftSignature,\n        bytes calldata rightSignature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        return _matchOrders(\n            leftOrder,\n            rightOrder,\n            leftSignature,\n            rightSignature,\n            true\n        );\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function cancelOrder(LibOrder.Order memory order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","after":"function cancelOrder(LibOrder.Order calldata order)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        _cancelOrder(order);\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","after":"function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction calldata transaction,\n        bytes calldata signature\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes memory)\n    {\n        return _executeTransaction(transaction, signature);\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","after":"function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] calldata transactions,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (bytes[] memory)\n    {\n        uint256 length = transactions.length;\n        bytes[] memory returnData = new bytes[](length);\n        for (uint256 i = 0; i != length; i++) {\n            returnData[i] = _executeTransaction(transactions[i], signatures[i]);\n        }\n        return returnData;\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","after":"function fillOrKillOrder(\n        LibOrder.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = _fillOrKillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrKillOrders(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        refundFinalBalanceNoReentry\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","after":"function batchFillOrdersNoThrow(\n        LibOrder.Order[] calldata orders,\n        uint256[] calldata takerAssetFillAmounts,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults[] memory fillResults)\n    {\n        uint256 ordersLength = orders.length;\n        fillResults = new LibFillResults.FillResults[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            fillResults[i] = _fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n        return fillResults;\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketSellOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 takerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketSellOrdersNoThrow(orders, takerAssetFillAmount, signatures);\n        if (fillResults.takerAssetFilledAmount < takerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_SELL_ORDERS,\n                takerAssetFillAmount,\n                fillResults.takerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","after":"function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] calldata orders,\n        uint256 makerAssetFillAmount,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = marketBuyOrdersNoThrow(orders, makerAssetFillAmount, signatures);\n        if (fillResults.makerAssetFilledAmount < makerAssetFillAmount) {\n            LibRichErrors.rrevert(LibExchangeRichErrors.IncompleteFillError(\n                LibExchangeRichErrors.IncompleteFillErrorCode.INCOMPLETE_MARKET_BUY_ORDERS,\n                makerAssetFillAmount,\n                fillResults.makerAssetFilledAmount\n            ));\n        }\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","after":"function batchCancelOrders(LibOrder.Order[] calldata orders)\n        public\n        payable\n        refundFinalBalanceNoReentry\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            _cancelOrder(orders[i]);\n        }\n    }","contract":"TestWrapperFunctions","time":0},{"type":"external-function ","before":"function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","after":"function simulateDispatchTransferFromCalls(\n        bytes[] calldata assetData,\n        address[] calldata fromAddresses,\n        address[] calldata toAddresses,\n        uint256[] calldata amounts\n    )\n        public\n    {\n        uint256 length = assetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            _dispatchTransferFrom(\n                // The index is passed in as `orderHash` so that a failed transfer can be quickly identified when catching the error\n                bytes32(i),\n                assetData[i],\n                fromAddresses[i],\n                toAddresses[i],\n                amounts[i]\n            );\n        }\n        revert(\"TRANSFERS_SUCCESSFUL\");\n    }","contract":"TestWrapperFunctions","time":0}]}
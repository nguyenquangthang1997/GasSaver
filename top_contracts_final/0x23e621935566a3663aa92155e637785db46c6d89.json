{"time":156,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant CA_AIRDROP_VOLUME = 300;\nuint256 public constant CA_PUBLIC_VOLUME = 4144;\nuint256 public constant CA_MAX_VOLUME = CA_PUBLIC_VOLUME + CA_AIRDROP_VOLUME;\nuint256 public constant CA_PRICE = 0.06 ether;\nuint256 public constant CA_PER_MINT_PUBLIC = 3;\nuint256 public constant CA_PER_MINT_WHITELIST = 1;\nmapping(string => bool) private _usedNonces;\nmapping(address => uint256) private _usedAddresses;\nmapping(address => uint256) private _usedWhitelistAddresses;\nstring private _contractURI;\nstring private _tokenBaseURI = \"https://api.coinapes.io/metadata/\";\naddress private _signerAddress = 0x755701d985fA2f073f349cFF87D31f1FaD95002e;\naddress private _whitelistSignerAddress = 0xB0949c5dcFc882b0BF796c86AE150670E446dC65 ;\nstring public proof;\nuint256 public giftedAmount;\nuint256 public publicAmountMinted;\nbool public saleLive;\nbool public locked;","after":"uint256 public constant CA_AIRDROP_VOLUME = 300;\nuint256 public constant CA_PUBLIC_VOLUME = 4144;\nuint256 public constant CA_MAX_VOLUME = CA_PUBLIC_VOLUME + CA_AIRDROP_VOLUME;\nuint256 public constant CA_PRICE = 0.06 ether;\nuint256 public constant CA_PER_MINT_PUBLIC = 3;\nuint256 public constant CA_PER_MINT_WHITELIST = 1;\nmapping(string => bool) private _usedNonces;\nmapping(address => uint256) private _usedAddresses;\nmapping(address => uint256) private _usedWhitelistAddresses;\nstring private _contractURI;\nstring private _tokenBaseURI = \"https://api.coinapes.io/metadata/\";\nstring public proof;\nuint256 public giftedAmount;\nuint256 public publicAmountMinted;\naddress private _signerAddress = 0x755701d985fA2f073f349cFF87D31f1FaD95002e;\naddress private _whitelistSignerAddress = 0xB0949c5dcFc882b0BF796c86AE150670E446dC65 ;\nbool public saleLive;\nbool public locked;\n","contract":"CoinApesNFT","time":0},{"type":"external-function ","before":"function buy(bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, false), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < CA_MAX_VOLUME, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= CA_PUBLIC_VOLUME, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= CA_PER_MINT_PUBLIC, \"EXCEED_CA_PER_MINT\");\n      require(CA_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      require(_usedAddresses[msg.sender] + tokenQuantity <= CA_PER_MINT_PUBLIC, \"EXCEED_ALLOC\");\n      \n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _usedAddresses[msg.sender]++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","after":"function buy(bytes32 hash, bytes calldata signature, string calldata nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, false), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < CA_MAX_VOLUME, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= CA_PUBLIC_VOLUME, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= CA_PER_MINT_PUBLIC, \"EXCEED_CA_PER_MINT\");\n      require(CA_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      require(_usedAddresses[msg.sender] + tokenQuantity <= CA_PER_MINT_PUBLIC, \"EXCEED_ALLOC\");\n      \n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _usedAddresses[msg.sender]++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","contract":"CoinApesNFT","time":0},{"type":"external-function ","before":"function whitelistBuy(bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, true), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < CA_MAX_VOLUME, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= CA_PUBLIC_VOLUME, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= CA_PER_MINT_WHITELIST, \"EXCEED_CA_PER_MINT\");\n      require(CA_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      require(_usedWhitelistAddresses[msg.sender] + tokenQuantity <= CA_PER_MINT_WHITELIST, \"EXCEED_ALLOC\");\n\n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _usedWhitelistAddresses[msg.sender]++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","after":"function whitelistBuy(bytes32 hash, bytes calldata signature, string calldata nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, true), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < CA_MAX_VOLUME, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= CA_PUBLIC_VOLUME, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= CA_PER_MINT_WHITELIST, \"EXCEED_CA_PER_MINT\");\n      require(CA_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      require(_usedWhitelistAddresses[msg.sender] + tokenQuantity <= CA_PER_MINT_WHITELIST, \"EXCEED_ALLOC\");\n\n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _usedWhitelistAddresses[msg.sender]++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","contract":"CoinApesNFT","time":0}]}
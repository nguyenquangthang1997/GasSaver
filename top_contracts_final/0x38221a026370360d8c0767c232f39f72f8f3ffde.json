{"time":143,"results":[{"type":"external-function ","before":"function mint(\n        address _account,\n        uint256 _category,\n        bytes memory _data\n    ) external nonReentrant onlyRole(MINTER_ROLE) {\n        _mint(_account, _category, 1, _data);\n    }","after":"function mint(\n        address _account,\n        uint256 _category,\n        bytes calldata _data\n    ) external nonReentrant onlyRole(MINTER_ROLE) {\n        _mint(_account, _category, 1, _data);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function mintBatch(\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) external nonReentrant onlyRole(MINTER_ROLE) {\n        _mintBatch(_to, _ids, _amounts, _data);\n    }","after":"function mintBatch(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts,\n        bytes calldata _data\n    ) external nonReentrant onlyRole(MINTER_ROLE) {\n        _mintBatch(_to, _ids, _amounts, _data);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function burnBatch(\n        address _account,\n        uint256[] memory _ids,\n        uint256[] memory _amounts\n    ) external onlyRole(REDEEMER_ROLE) {\n        _burnBatch(_account, _ids, _amounts);\n    }","after":"function burnBatch(\n        address _account,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) external onlyRole(REDEEMER_ROLE) {\n        _burnBatch(_account, _ids, _amounts);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function privateMintBatch(\n        address _account,\n        uint256 _amountToMint,\n        uint256 _category,\n        bytes memory _data\n    ) external nonReentrant onlyRole(PRIVATE_MINTER_ROLE) {\n        _mint(_account, _category, _amountToMint, _data);\n\n        emit PrivateMintExecuted(_account, _category, _amountToMint);\n    }","after":"function privateMintBatch(\n        address _account,\n        uint256 _amountToMint,\n        uint256 _category,\n        bytes calldata _data\n    ) external nonReentrant onlyRole(PRIVATE_MINTER_ROLE) {\n        _mint(_account, _category, _amountToMint, _data);\n\n        emit PrivateMintExecuted(_account, _category, _amountToMint);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function setURI(string memory _newuri) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setURI(_newuri);\n    }","after":"function setURI(string calldata _newuri) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setURI(_newuri);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"GenesisToken","time":0}]}
{"time":163,"results":[{"type":"external-function ","before":"function mintGG(bytes32 hash, bytes memory signature, uint256 tokenQuantity, string memory transactionID) external payable {\n        require(publicLive || registerLive, \"31\");\n        uint256 supplyForMint;\n        if (registerLive) {\n            supplyForMint = GG_REGISTER;\n        }\n        if (publicLive) {\n            supplyForMint = GG_PUBLIC;\n        }\n\n        require(verifyAddressSigner(hash, signature), \"68\");\n        \n        require(!usedTransactions[transactionID], \"3\");\n\n        require(hashTransaction(msg.sender, transactionID, tokenQuantity) == hash, \"5\");\n\n        require(_tokenIdTracker.current() <= supplyForMint, \"32\");\n        require((_tokenIdTracker.current()+ tokenQuantity) <= supplyForMint, \"33\");\n        require((GG_PRICE * tokenQuantity) <= msg.value, \"2\");\n\n        for (uint256 i = 0; i < tokenQuantity; i++) {\n            _tokenIdTracker.increment();\n            _mint(msg.sender, _tokenIdTracker.current());\n        }\n\n        usedTransactions[transactionID] = true;\n    }","after":"function mintGG(bytes32 hash, bytes calldata signature, uint256 tokenQuantity, string calldata transactionID) external payable {\n        require(publicLive || registerLive, \"31\");\n        uint256 supplyForMint;\n        if (registerLive) {\n            supplyForMint = GG_REGISTER;\n        }\n        if (publicLive) {\n            supplyForMint = GG_PUBLIC;\n        }\n\n        require(verifyAddressSigner(hash, signature), \"68\");\n        \n        require(!usedTransactions[transactionID], \"3\");\n\n        require(hashTransaction(msg.sender, transactionID, tokenQuantity) == hash, \"5\");\n\n        require(_tokenIdTracker.current() <= supplyForMint, \"32\");\n        require((_tokenIdTracker.current()+ tokenQuantity) <= supplyForMint, \"33\");\n        require((GG_PRICE * tokenQuantity) <= msg.value, \"2\");\n\n        for (uint256 i = 0; i < tokenQuantity; i++) {\n            _tokenIdTracker.increment();\n            _mint(msg.sender, _tokenIdTracker.current());\n        }\n\n        usedTransactions[transactionID] = true;\n    }","contract":"GlitchGirls","time":0},{"type":"constant-restrict-modification  ","before":"address private withdrawAccount = 0x3586218D139C2fd5eC9445E13FFC466D5bB5aa8c;","after":"address private constant withdrawAccount = 0x3586218D139C2fd5eC9445E13FFC466D5bB5aa8c;","contract":"GlitchGirls","time":1}]}
{"time":258,"results":[{"type":"state-data-arrangement ","before":"\nbytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\nbytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\naddress public nftStakingPoolAddress;\nstring public baseUri;\nbytes1 public contractChar;\nstring public contractURIString;\nmapping(address => bool) public rainbowPools;\nmapping(address => bool) public unicornPools;\nuint256 public maxTokenId = 1000000;\naddress private contractOwner;\nmapping(uint256 => Card) public cards;\nmapping(uint256 => uint256) public numLevel1Minted;\nmapping(uint256 => TokenVars) public tokenVars;","after":"bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\nbytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\nstring public baseUri;\nstring public contractURIString;\nmapping(address => bool) public rainbowPools;\nmapping(address => bool) public unicornPools;\nuint256 public maxTokenId = 1000000;\nmapping(uint256 => Card) public cards;\nmapping(uint256 => uint256) public numLevel1Minted;\nmapping(uint256 => TokenVars) public tokenVars;\naddress public nftStakingPoolAddress;\naddress private contractOwner;\nbytes1 public contractChar;\n","contract":"RainiCards","time":0},{"type":"external-function ","before":"function setcontractURI(string memory _contractURIString)\n    external onlyOwner {\n      contractURIString = _contractURIString;\n  }","after":"function setcontractURI(string calldata _contractURIString)\n    external onlyOwner {\n      contractURIString = _contractURIString;\n  }","contract":"RainiCards","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURIString)\n    external onlyOwner {\n      baseUri = _baseURIString;\n  }","after":"function setBaseURI(string calldata _baseURIString)\n    external onlyOwner {\n      baseUri = _baseURIString;\n  }","contract":"RainiCards","time":0},{"type":"external-function ","before":"function initCards(uint256[] memory _cardId, uint16[] memory _maxSupply, address[] memory _subContract)\n    external onlyOwner() {\n\n      for (uint256 i; i < _cardId.length; i++) {\n\n        cards[_cardId[i]] = Card({\n            costInUnicorns: 0,\n            costInRainbows: 0,\n            maxMintsPerAddress: 0,\n            maxSupply: uint32(_maxSupply[i]),\n            allocation: uint32(_maxSupply[i]),\n            mintTimeStart: 0,\n            locked: false,\n            subContract: _subContract[i]\n          });\n        \n        uint256 _tokenId = 0;\n\n        _tokenId = _cardId[i];\n        tokenVars[_tokenId] = TokenVars({\n          cardId: uint128(_cardId[i]),\n          level: 0,\n          number: 0,\n          mintedContractChar: contractChar\n        });\n      }\n  }","after":"function initCards(uint256[] calldata _cardId, uint16[] calldata _maxSupply, address[] calldata _subContract)\n    external onlyOwner() {\n\n      for (uint256 i; i < _cardId.length; i++) {\n\n        cards[_cardId[i]] = Card({\n            costInUnicorns: 0,\n            costInRainbows: 0,\n            maxMintsPerAddress: 0,\n            maxSupply: uint32(_maxSupply[i]),\n            allocation: uint32(_maxSupply[i]),\n            mintTimeStart: 0,\n            locked: false,\n            subContract: _subContract[i]\n          });\n        \n        uint256 _tokenId = 0;\n\n        _tokenId = _cardId[i];\n        tokenVars[_tokenId] = TokenVars({\n          cardId: uint128(_cardId[i]),\n          level: 0,\n          number: 0,\n          mintedContractChar: contractChar\n        });\n      }\n  }","contract":"RainiCards","time":0},{"type":"external-function ","before":"function mint(address _to, uint256 _cardId, uint256 _cardLevel, uint256 _amount, bytes1 _mintedContractChar, uint256 _number, uint256[] memory _data) \n    external onlyMinter {\n      _mintToken(_to, _cardId, _cardLevel, _amount, _mintedContractChar, _number, _data);\n  }","after":"function mint(address _to, uint256 _cardId, uint256 _cardLevel, uint256 _amount, bytes1 _mintedContractChar, uint256 _number, uint256[] calldata _data) \n    external onlyMinter {\n      _mintToken(_to, _cardId, _cardLevel, _amount, _mintedContractChar, _number, _data);\n  }","contract":"RainiCards","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"RainiCards","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"RainiCards","time":0},{"type":"immutable-restrict-modification ","before":"bytes1 public contractChar;","after":"bytes1 public immutable contractChar;","contract":"RainiCards","time":1},{"type":"immutable-restrict-modification ","before":"address private contractOwner;","after":"address private immutable contractOwner;","contract":"RainiCards","time":1}]}
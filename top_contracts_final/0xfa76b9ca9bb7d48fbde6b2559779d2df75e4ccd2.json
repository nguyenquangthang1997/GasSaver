{"time":164,"results":[{"type":"struct-data-arrangement ","before":"\nbool isPresent\nstring tokenURI\nuint16 royalty\naddress payable minter\nuint256 amount","after":"string tokenURI\nuint256 amount\naddress payable minter\nuint16 royalty\nbool isPresent\n","contract":"Hancom1155","time":0},{"type":"struct-data-arrangement ","before":"\nbool isPresent\naddress payable seller\nuint256 tokenId\nuint16 currencyId\nuint256 price\nuint256 amount","after":"uint256 tokenId\nuint256 price\nuint256 amount\naddress payable seller\nuint16 currencyId\nbool isPresent\n","contract":"Hancom1155","time":0},{"type":"external-function ","before":"function changeTokenURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\r\n        tokens[tokenId].tokenURI = tokenURI;\r\n    }","after":"function changeTokenURI(uint256 tokenId, string calldata tokenURI) public onlyOwner {\r\n        tokens[tokenId].tokenURI = tokenURI;\r\n    }","contract":"Hancom1155","time":0},{"type":"external-function ","before":"function mintToken(string memory title, string memory uri, uint16 royalty, uint256 amount,\r\n        bool putOnSale, uint16 currencyId, uint256 price, uint256 saleAmount, uint256 dataId) external {\r\n\r\n        require(\r\n            amount >= saleAmount\r\n            && bytes(uri).length > 0);\r\n\r\n        uint256 tokenId = tokenIdCounter;\r\n        require(!tokens[tokenId + 1].isPresent);\r\n\r\n        tokenId = ++tokenIdCounter;\r\n\r\n        setApprovalForAll(address(this), true);\r\n\r\n        _mint(_msgSender(), tokenId, amount, \"\");\r\n\r\n        tokens[tokenId] = Token(true, uri, royalty, payable(_msgSender()), amount);\r\n\r\n        uint256 saleId = 0;\r\n        if (putOnSale) {\r\n            require(\r\n                currencyId > 0\r\n                && price > 0\r\n                && saleAmount > 0\r\n                && !sales[saleIdCounter + 1].isPresent\r\n            );\r\n\r\n            saleId = ++saleIdCounter;\r\n\r\n            sales[saleId] = Sale(true, payable(_msgSender()), tokenId, currencyId, price, saleAmount);\r\n\r\n            if (amount > saleAmount) {\r\n                holds[tokenId][_msgSender()] = Hold(true, amount - saleAmount);\r\n            }\r\n        } else {\r\n            holds[tokenId][_msgSender()] = Hold(true, amount);\r\n        }\r\n\r\n        emit Minted(tokenId, title, uri, royalty, amount, putOnSale, saleId, currencyId, price, saleAmount, dataId);\r\n    }","after":"function mintToken(string calldata title, string calldata uri, uint16 royalty, uint256 amount,\r\n        bool putOnSale, uint16 currencyId, uint256 price, uint256 saleAmount, uint256 dataId) external {\r\n\r\n        require(\r\n            amount >= saleAmount\r\n            && bytes(uri).length > 0);\r\n\r\n        uint256 tokenId = tokenIdCounter;\r\n        require(!tokens[tokenId + 1].isPresent);\r\n\r\n        tokenId = ++tokenIdCounter;\r\n\r\n        setApprovalForAll(address(this), true);\r\n\r\n        _mint(_msgSender(), tokenId, amount, \"\");\r\n\r\n        tokens[tokenId] = Token(true, uri, royalty, payable(_msgSender()), amount);\r\n\r\n        uint256 saleId = 0;\r\n        if (putOnSale) {\r\n            require(\r\n                currencyId > 0\r\n                && price > 0\r\n                && saleAmount > 0\r\n                && !sales[saleIdCounter + 1].isPresent\r\n            );\r\n\r\n            saleId = ++saleIdCounter;\r\n\r\n            sales[saleId] = Sale(true, payable(_msgSender()), tokenId, currencyId, price, saleAmount);\r\n\r\n            if (amount > saleAmount) {\r\n                holds[tokenId][_msgSender()] = Hold(true, amount - saleAmount);\r\n            }\r\n        } else {\r\n            holds[tokenId][_msgSender()] = Hold(true, amount);\r\n        }\r\n\r\n        emit Minted(tokenId, title, uri, royalty, amount, putOnSale, saleId, currencyId, price, saleAmount, dataId);\r\n    }","contract":"Hancom1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Hancom1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Hancom1155","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"Hancom Artpia\";","after":"string public constant name = \"Hancom Artpia\";","contract":"Hancom1155","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"HCAP\";","after":"string public constant symbol = \"HCAP\";","contract":"Hancom1155","time":0}]}
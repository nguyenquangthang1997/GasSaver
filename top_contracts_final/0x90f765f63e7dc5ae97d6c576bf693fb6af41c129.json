{"time":169,"results":[{"type":"struct-data-arrangement ","before":"\naddress component\naddress module\nint256 unit\nuint8 positionState\nbytes data","after":"int256 unit\nbytes data\naddress component\naddress module\nuint8 positionState\n","contract":"ISetToken","time":0},{"type":"external-function ","before":"function trade(\n        ISetToken _setToken,\n        string memory _exchangeName,\n        address _sendToken,\n        uint256 _sendQuantity,\n        address _receiveToken,\n        uint256 _minReceiveQuantity,\n        bytes memory _data\n    )\n        external\n        nonReentrant\n        onlyManagerAndValidSet(_setToken)\n    {\n        TradeInfo memory tradeInfo = _createTradeInfo(\n            _setToken,\n            _exchangeName,\n            _sendToken,\n            _receiveToken,\n            _sendQuantity,\n            _minReceiveQuantity\n        );\n\n        _validatePreTradeData(tradeInfo, _sendQuantity);\n\n        _executeTrade(tradeInfo, _data);\n\n        uint256 exchangedQuantity = _validatePostTrade(tradeInfo);\n\n        uint256 protocolFee = _accrueProtocolFee(tradeInfo, exchangedQuantity);\n\n        (\n            uint256 netSendAmount,\n            uint256 netReceiveAmount\n        ) = _updateSetTokenPositions(tradeInfo);\n\n        emit ComponentExchanged(\n            _setToken,\n            _sendToken,\n            _receiveToken,\n            tradeInfo.exchangeAdapter,\n            netSendAmount,\n            netReceiveAmount,\n            protocolFee\n        );\n    }","after":"function trade(\n        ISetToken _setToken,\n        string calldata _exchangeName,\n        address _sendToken,\n        uint256 _sendQuantity,\n        address _receiveToken,\n        uint256 _minReceiveQuantity,\n        bytes calldata _data\n    )\n        external\n        nonReentrant\n        onlyManagerAndValidSet(_setToken)\n    {\n        TradeInfo memory tradeInfo = _createTradeInfo(\n            _setToken,\n            _exchangeName,\n            _sendToken,\n            _receiveToken,\n            _sendQuantity,\n            _minReceiveQuantity\n        );\n\n        _validatePreTradeData(tradeInfo, _sendQuantity);\n\n        _executeTrade(tradeInfo, _data);\n\n        uint256 exchangedQuantity = _validatePostTrade(tradeInfo);\n\n        uint256 protocolFee = _accrueProtocolFee(tradeInfo, exchangedQuantity);\n\n        (\n            uint256 netSendAmount,\n            uint256 netReceiveAmount\n        ) = _updateSetTokenPositions(tradeInfo);\n\n        emit ComponentExchanged(\n            _setToken,\n            _sendToken,\n            _receiveToken,\n            tradeInfo.exchangeAdapter,\n            netSendAmount,\n            netReceiveAmount,\n            protocolFee\n        );\n    }","contract":"TradeModule","time":0}]}
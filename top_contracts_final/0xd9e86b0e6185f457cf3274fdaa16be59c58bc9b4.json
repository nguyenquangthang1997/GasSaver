{"time":111,"results":[{"type":"external-function ","before":"b.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Counter","after":"b.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Counter","contract":"UmbaDaimaXApprTok","time":0},{"type":"external-function ","before":"token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IER","after":"token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string calldata uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IER","contract":"UmbaDaimaXApprTok","time":0},{"type":"external-function ","before":"I).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the","after":"I).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the","contract":"UmbaDaimaXApprTok","time":0},{"type":"external-function ","before":"iew override returns (string memory)\n    {\n        return string(abi.encodePacked('https://gateway.pinata.cloud/ipfs/', locator[_id]));\n    }\n    \n    function mapIdToLocator(uint _tokenId, string memory locale) internal {\n        locator[_tokenId] = locale;\n    }\n    //, bytes memory data\n    function mintTocaller(address account, uint256 ","after":"iew override returns (string calldata)\n    {\n        return string(abi.encodePacked('https://gateway.pinata.cloud/ipfs/', locator[_id]));\n    }\n    \n    function mapIdToLocator(uint _tokenId, string memory locale) internal {\n        locator[_tokenId] = locale;\n    }\n    //, bytes memory data\n    function mintTocaller(address account, uint256 ","contract":"UmbaDaimaXApprTok","time":0}]}
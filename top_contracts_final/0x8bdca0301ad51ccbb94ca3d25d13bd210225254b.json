{"time":209,"results":[{"type":"external-function ","before":"function mintPreSale(bytes32[] memory _proof, uint256 num) external payable nonReentrant {\r\n    uint256 supply = _tokenSupply.current();\r\n    require(!paused, \"Minting paused\");\r\n    require(publicMintPaused, \"The Presale is over!\");\r\n    bytes32 _leaf = keccak256(abi.encodePacked(msg.sender));\r\n    require(MerkleProof.verify(_proof, _rootHash, _leaf), \" Address is not whitelisted\");\r\n    require( num > 0 && num < 3, \" Max 2 per txn\");\r\n    require(walletCount[msg.sender] + num <= 2, \" Whitelist only can mint 2\");\r\n    require(supply + num <= 3333 - _reserved, \"Exceeds maximum supply\");\r\n    require(msg.value >= _price * num, \"Ether sent is not correct\");\r\n\r\n    for (uint256 i = 1; i <= num; i++) {\r\n      _safeMint(msg.sender, supply + i);\r\n      _tokenSupply.increment();\r\n    }\r\n\r\n    walletCount[msg.sender] += num;\r\n    \r\n  }","after":"function mintPreSale(bytes32[] calldata _proof, uint256 num) external payable nonReentrant {\r\n    uint256 supply = _tokenSupply.current();\r\n    require(!paused, \"Minting paused\");\r\n    require(publicMintPaused, \"The Presale is over!\");\r\n    bytes32 _leaf = keccak256(abi.encodePacked(msg.sender));\r\n    require(MerkleProof.verify(_proof, _rootHash, _leaf), \" Address is not whitelisted\");\r\n    require( num > 0 && num < 3, \" Max 2 per txn\");\r\n    require(walletCount[msg.sender] + num <= 2, \" Whitelist only can mint 2\");\r\n    require(supply + num <= 3333 - _reserved, \"Exceeds maximum supply\");\r\n    require(msg.value >= _price * num, \"Ether sent is not correct\");\r\n\r\n    for (uint256 i = 1; i <= num; i++) {\r\n      _safeMint(msg.sender, supply + i);\r\n      _tokenSupply.increment();\r\n    }\r\n\r\n    walletCount[msg.sender] += num;\r\n    \r\n  }","contract":"APigs","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private _price = 0.05 ether;","after":"uint256 private constant _price = 0.05 ether;","contract":"APigs","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private startTime;","after":"uint256 private immutable startTime;","contract":"Boom","time":1}]}
{"time":128,"results":[{"type":"external-function ","before":"   function collectWithSignature(\n        uint16 tokenId,\n        uint256 nonce,\n        bytes memory signature\n    ) external payable {\n        if (!collectActive) revert CollectInactive();\n\n        uint256 helixId = currentHelixId;\n        Helix memory helix = helixes[helixId];\n\n        // need signer here\n        if (helix.signer == address(0)) revert NotClaimable();\n\n        // create a unique nonce using nonce and helixId\n        // this can allow one address to claim more than one per helix\n        // if they get more signed messages\n        uint256 _nonce = nonceForHelix(helixId, nonce);\n\n        // verifies that (msg.sender, (nonce, helix), address(this)) was signed\n        // by helix.signer\n        bytes32 message = _validateSignature(\n            msg.sender,\n            _nonce,\n            signature,\n            helix.signer\n        );\n        usedAllowances[message] = true;\n\n        _collect(helix, tokenId, msg.sender);\n\n        emit Claimed(signature);\n  ","after":"   function collectWithSignature(\n        uint16 tokenId,\n        uint256 nonce,\n        bytes calldata signature\n    ) external payable {\n        if (!collectActive) revert CollectInactive();\n\n        uint256 helixId = currentHelixId;\n        Helix memory helix = helixes[helixId];\n\n        // need signer here\n        if (helix.signer == address(0)) revert NotClaimable();\n\n        // create a unique nonce using nonce and helixId\n        // this can allow one address to claim more than one per helix\n        // if they get more signed messages\n        uint256 _nonce = nonceForHelix(helixId, nonce);\n\n        // verifies that (msg.sender, (nonce, helix), address(this)) was signed\n        // by helix.signer\n        bytes32 message = _validateSignature(\n            msg.sender,\n            _nonce,\n            signature,\n            helix.signer\n        );\n        usedAllowances[message] = true;\n\n        _collect(helix, tokenId, msg.sender);\n\n        emit Claimed(signature);\n  ","contract":"VisualMassageModule","time":0},{"type":"external-function ","before":"   function setContractURI(string memory newURI) external onlyOwner {\n        _setContractURI(newURI);\n  ","after":"   function setContractURI(string calldata newURI) external onlyOwner {\n        _setContractURI(newURI);\n  ","contract":"VisualMassageModule","time":0},{"type":"external-function ","before":"   function overrideTokenURI(uint256 tokenId, string memory newTokenURI)\n        external\n        onlyOwner\n    {\n        tokenURIOverride[tokenId] = newTokenURI;\n  ","after":"   function overrideTokenURI(uint256 tokenId, string calldata newTokenURI)\n        external\n        onlyOwner\n    {\n        tokenURIOverride[tokenId] = newTokenURI;\n  ","contract":"VisualMassageModule","time":0}]}
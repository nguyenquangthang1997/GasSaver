{"time":184,"results":[{"type":"external-function ","before":"function closeShort(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _withdrawAmount,\n        ISwapRouter.ExactOutputSingleParams memory _exactOutputParams\n    ) external payable nonReentrant {\n        require(shortPowerPerp.ownerOf(_vaultId) == msg.sender, \"Not allowed\");\n        require(\n            _exactOutputParams.tokenOut == wPowerPerp && _exactOutputParams.tokenIn == address(weth),\n            \"Wrong swap tokens\"\n        );\n\n        // wrap eth to weth\n        weth.deposit{value: msg.value}();\n\n        // pay weth and get wPowerPerp in return.\n        uint256 amountIn = router.exactOutputSingle(_exactOutputParams);\n\n        controller.burnWPowerPerpAmount(_vaultId, _wPowerPerpAmount, _withdrawAmount);\n\n        // send back unused eth and withdrawn collateral\n        weth.withdraw(msg.value.sub(amountIn));\n        // no eth should be left in the contract, so we send it all back\n        payable(msg.sender).sendValue(address(this).balance);\n    }","after":"function closeShort(\n        uint256 _vaultId,\n        uint256 _wPowerPerpAmount,\n        uint256 _withdrawAmount,\n        ISwapRouter.ExactOutputSingleParams calldata _exactOutputParams\n    ) external payable nonReentrant {\n        require(shortPowerPerp.ownerOf(_vaultId) == msg.sender, \"Not allowed\");\n        require(\n            _exactOutputParams.tokenOut == wPowerPerp && _exactOutputParams.tokenIn == address(weth),\n            \"Wrong swap tokens\"\n        );\n\n        // wrap eth to weth\n        weth.deposit{value: msg.value}();\n\n        // pay weth and get wPowerPerp in return.\n        uint256 amountIn = router.exactOutputSingle(_exactOutputParams);\n\n        controller.burnWPowerPerpAmount(_vaultId, _wPowerPerpAmount, _withdrawAmount);\n\n        // send back unused eth and withdrawn collateral\n        weth.withdraw(msg.value.sub(amountIn));\n        // no eth should be left in the contract, so we send it all back\n        payable(msg.sender).sendValue(address(this).balance);\n    }","contract":"ShortHelper","time":0},{"type":"external-function ","before":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"ShortHelper","time":0}]}
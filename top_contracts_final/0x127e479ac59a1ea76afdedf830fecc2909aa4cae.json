{"time":150,"results":[{"type":"state-data-arrangement ","before":"\n   bytes32 public constant PRESALE_TYPEHASH = keccak256(\"Presale(address buyer,uint256 maxCount)\n   uint256 public constant AVARIK_GIFT = 1\n   uint256 public constant AVARIK_PRIVATE = 87\n   uint256 public constant AVARIK_MAX = AVARIK_GIFT + AVARIK_PRIVA\n   uint256 public constant AVARIK_PRICE = 0.08 eth\n   mapping(address => uint256) public presalerListPurchas\n   string private _contractU\n   string private _tokenBaseU\n   string private _defaultBaseU\n   address private _artistAddress = 0x6Fbf131EEaF61A48696d240b168A35fa6431C7\n   address public whitelistSign\n   uint256 public giftedAmou\n   uint256 public privateAmountMint\n   bool public presaleLi","after":"   bytes32 public constant PRESALE_TYPEHASH = keccak256(\"Presale(address buyer,uint256 maxCount)\n   uint256 public constant AVARIK_GIFT = 1\n   uint256 public constant AVARIK_PRIVATE = 87\n   uint256 public constant AVARIK_MAX = AVARIK_GIFT + AVARIK_PRIVA\n   uint256 public constant AVARIK_PRICE = 0.08 eth\n   mapping(address => uint256) public presalerListPurchas\n   string private _contractU\n   string private _tokenBaseU\n   string private _defaultBaseU\n   uint256 public giftedAmou\n   uint256 public privateAmountMint\n   address private _artistAddress = 0x6Fbf131EEaF61A48696d240b168A35fa6431C7\n   address public whitelistSign\n   bool public presaleLi\n","contract":"AvarikSaga","time":0},{"type":"external-function ","before":"   function presaleBuy(uint256 tokenQuantity, uint256 maxCount, bytes memory signature) external payable {\n        require(whitelistSigner != address(0), \"Signer is default address!\");\n        require(_verify(_hash(msg.sender, maxCount), signature), \"The Signature is invalid!\");\n        require(presaleLive, \"The presale is closed\");\n        require(totalSupply() < AVARIK_MAX, \"All Avariks are minted\");\n        require(privateAmountMinted + tokenQuantity <= AVARIK_PRIVATE, \"Minting would exceed the presale allocation\");\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= maxCount, \"You can not mint exceeds maximum NFT\");\n        require(AVARIK_PRICE * tokenQuantity <= msg.value, \"Insufficient ETH sent\");\n        \n        presalerListPurchases[msg.sender] += tokenQuantity;\n\n        for (uint256 i = 0; i < tokenQuantity; i++) {\n            privateAmountMinted++;\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n  ","after":"   function presaleBuy(uint256 tokenQuantity, uint256 maxCount, bytes calldata signature) external payable {\n        require(whitelistSigner != address(0), \"Signer is default address!\");\n        require(_verify(_hash(msg.sender, maxCount), signature), \"The Signature is invalid!\");\n        require(presaleLive, \"The presale is closed\");\n        require(totalSupply() < AVARIK_MAX, \"All Avariks are minted\");\n        require(privateAmountMinted + tokenQuantity <= AVARIK_PRIVATE, \"Minting would exceed the presale allocation\");\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= maxCount, \"You can not mint exceeds maximum NFT\");\n        require(AVARIK_PRICE * tokenQuantity <= msg.value, \"Insufficient ETH sent\");\n        \n        presalerListPurchases[msg.sender] += tokenQuantity;\n\n        for (uint256 i = 0; i < tokenQuantity; i++) {\n            privateAmountMinted++;\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n  ","contract":"AvarikSaga","time":0},{"type":"constant-restrict-modification  ","before":"   address private _artistAddress = 0x6Fbf131EEaF61A48696d240b168A35fa6431C7","after":"   address private constant _artistAddress = 0x6Fbf131EEaF61A48696d240b168A35fa6431C7","contract":"AvarikSaga","time":0}]}
{"time":143,"results":[{"type":"external-function ","before":"function purchase(string memory parcelId) external override payable {\n\n        require(isActive, 'Contract is not active');\n        require(totalSupply() < TOKEN_MAX, 'All tokens have been minted');\n        require(totalPurchaseSupply < TOKEN_PURCHASE, 'Purchase would exceed TOKEN_PURCHASE');\n        require(getCalculatedPrice(totalPurchaseSupply + 1) * WEI_ETH <= msg.value, 'ETH amount is not sufficient');\n\n        uint256 tokenId = totalPurchaseSupply + 1;\n\n        totalPurchaseSupply += 1;\n        _safeMint(msg.sender, tokenId);\n\n        //@dev we return the _parcelId to register it in the Metadada.\n\n        emit tokenPurchased(msg.sender, tokenId, getCalculatedPrice(totalPurchaseSupply + 1), parcelId);\n    }","after":"function purchase(string calldata parcelId) external override payable {\n\n        require(isActive, 'Contract is not active');\n        require(totalSupply() < TOKEN_MAX, 'All tokens have been minted');\n        require(totalPurchaseSupply < TOKEN_PURCHASE, 'Purchase would exceed TOKEN_PURCHASE');\n        require(getCalculatedPrice(totalPurchaseSupply + 1) * WEI_ETH <= msg.value, 'ETH amount is not sufficient');\n\n        uint256 tokenId = totalPurchaseSupply + 1;\n\n        totalPurchaseSupply += 1;\n        _safeMint(msg.sender, tokenId);\n\n        //@dev we return the _parcelId to register it in the Metadada.\n\n        emit tokenPurchased(msg.sender, tokenId, getCalculatedPrice(totalPurchaseSupply + 1), parcelId);\n    }","contract":"CryptoLand","time":0},{"type":"external-function ","before":"function claimWhiteList(bytes memory _sig) external override {\n\n        require(isActive, 'Contract is not active');\n        require(isWhiteListActive, 'White List is not active');\n        require(totalSupply() < TOKEN_MAX, 'All tokens have been minted');\n        require(totalPublicSupply + 1 <= TOKEN_PUBLIC, 'Purchase would exceed TOKEN_PUBLIC');\n        require(isValidAccessMessage(_sig), 'Not on the whitelist');\n        require(_whiteListClaimed[msg.sender] + 1 <= whiteListMaxMint, 'Purchase exceeds max allowed');\n\n        uint256 tokenId = totalPublicSupply + 1;\n\n        totalPublicSupply += 1;\n        _whiteListClaimed[msg.sender] += 1;\n        _safeMint(msg.sender, tokenId);\n\n        emit tokenClaimed(msg.sender, tokenId);\n    }","after":"function claimWhiteList(bytes calldata _sig) external override {\n\n        require(isActive, 'Contract is not active');\n        require(isWhiteListActive, 'White List is not active');\n        require(totalSupply() < TOKEN_MAX, 'All tokens have been minted');\n        require(totalPublicSupply + 1 <= TOKEN_PUBLIC, 'Purchase would exceed TOKEN_PUBLIC');\n        require(isValidAccessMessage(_sig), 'Not on the whitelist');\n        require(_whiteListClaimed[msg.sender] + 1 <= whiteListMaxMint, 'Purchase exceeds max allowed');\n\n        uint256 tokenId = totalPublicSupply + 1;\n\n        totalPublicSupply += 1;\n        _whiteListClaimed[msg.sender] += 1;\n        _safeMint(msg.sender, tokenId);\n\n        emit tokenClaimed(msg.sender, tokenId);\n    }","contract":"CryptoLand","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public whiteListMaxMint = 1;","after":"uint256 public constant whiteListMaxMint = 1;","contract":"CryptoLand","time":0}]}
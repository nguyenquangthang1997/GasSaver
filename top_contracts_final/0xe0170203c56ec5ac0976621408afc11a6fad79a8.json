{"time":123,"results":[{"type":"state-data-arrangement ","before":"\nbytes32 merkleRoot;\nstring public PROVENANCE;\nbool public isSaleActive;\nstring private _baseURIextended;\nbool public isAllowListActive;\nuint public constant MAX_SUPPLY = 555;\nuint public constant RESERVE_SUPPLY = 31;\nuint public constant MAX_ALLOWLIST_MINT = 1;\nuint public constant MAX_PUBLIC_MINT = 1;\nuint public constant PRICE_PER_TOKEN = 0.1 ether;\nmapping(address => uint) private _allowListNumMinted;","after":"bytes32 merkleRoot;\nstring public PROVENANCE;\nstring private _baseURIextended;\nuint public constant MAX_SUPPLY = 555;\nuint public constant RESERVE_SUPPLY = 31;\nuint public constant MAX_ALLOWLIST_MINT = 1;\nuint public constant MAX_PUBLIC_MINT = 1;\nuint public constant PRICE_PER_TOKEN = 0.1 ether;\nmapping(address => uint) private _allowListNumMinted;\nbool public isSaleActive;\nbool public isAllowListActive;\n","contract":"HunterOrrell5555","time":0},{"type":"external-function ","before":"function mintAllowList(uint numberOfTokens, bytes32[] memory merkleProof) external payable nonReentrant {\n        uint ts = totalSupply();\n        require(isAllowListActive, \"Allow list is not active\");\n        require(onAllowList(msg.sender, merkleProof), \"Not on allow list\");\n        require(numberOfTokens <= MAX_ALLOWLIST_MINT - _allowListNumMinted[msg.sender], \"Exceeded max available to purchase\");\n        require(ts + numberOfTokens <= MAX_SUPPLY, \"Purchase would exceed max tokens\");\n        require(PRICE_PER_TOKEN * numberOfTokens <= msg.value, \"Ether value sent is not correct\");\n\n        _allowListNumMinted[msg.sender] += numberOfTokens;\n        for (uint i = 0; i < numberOfTokens; i++) {\n            _internalMint(msg.sender, ts + i);\n        }\n    }","after":"function mintAllowList(uint numberOfTokens, bytes32[] calldata merkleProof) external payable nonReentrant {\n        uint ts = totalSupply();\n        require(isAllowListActive, \"Allow list is not active\");\n        require(onAllowList(msg.sender, merkleProof), \"Not on allow list\");\n        require(numberOfTokens <= MAX_ALLOWLIST_MINT - _allowListNumMinted[msg.sender], \"Exceeded max available to purchase\");\n        require(ts + numberOfTokens <= MAX_SUPPLY, \"Purchase would exceed max tokens\");\n        require(PRICE_PER_TOKEN * numberOfTokens <= msg.value, \"Ether value sent is not correct\");\n\n        _allowListNumMinted[msg.sender] += numberOfTokens;\n        for (uint i = 0; i < numberOfTokens; i++) {\n            _internalMint(msg.sender, ts + i);\n        }\n    }","contract":"HunterOrrell5555","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }","contract":"HunterOrrell5555","time":0},{"type":"external-function ","before":"function setProvenance(string memory provenance) external onlyOwner {\n        PROVENANCE = provenance;\n    }","after":"function setProvenance(string calldata provenance) external onlyOwner {\n        PROVENANCE = provenance;\n    }","contract":"HunterOrrell5555","time":0}]}
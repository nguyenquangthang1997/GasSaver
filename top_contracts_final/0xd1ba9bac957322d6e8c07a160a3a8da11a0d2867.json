{"time":67,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public totalSupply;\nuint256 private constant MAX_UINT256 = ~uint256(0);\nuint256 private constant BULK_MAX_VALUE = 1000000000 * (10 ** 18);\nuint32  private constant BULK_MAX_COUNT = 100;\nmapping (address => uint256) private balances;\nmapping (address => mapping (address => uint256)) private allowed;\nstring public name;\nuint8 public decimals;\nstring public symbol;","after":"uint256 public totalSupply;\nuint256 private constant MAX_UINT256 = ~uint256(0);\nuint256 private constant BULK_MAX_VALUE = 1000000000 * (10 ** 18);\nmapping (address => uint256) private balances;\nmapping (address => mapping (address => uint256)) private allowed;\nstring public name;\nstring public symbol;\nuint32  private constant BULK_MAX_COUNT = 100;\nuint8 public decimals;\n","contract":"HMToken","time":0},{"type":"external-function ","before":"function transferBulk(address[] memory _tos, uint256[] memory _values, uint256 _txId) public override returns (uint256 _bulkCount) {\n        require(_tos.length == _values.length, \"Amount of recipients and values don't match\");\n        require(_tos.length < BULK_MAX_COUNT, \"Too many recipients\");\n\n        uint256 _bulkValue = 0;\n        for (uint j = 0; j < _tos.length; ++j) {\n            _bulkValue = _bulkValue.add(_values[j]);\n        }\n        require(_bulkValue < BULK_MAX_VALUE, \"Bulk value too high\");\n\n        bool _success;\n        for (uint i = 0; i < _tos.length; ++i) {\n            _success = transferQuiet(_tos[i], _values[i]);\n            if (_success) {\n                _bulkCount = _bulkCount.add(1);\n            }\n        }\n        emit BulkTransfer(_txId, _bulkCount);\n        return _bulkCount;\n    }","after":"function transferBulk(address[] calldata _tos, uint256[] calldata _values, uint256 _txId) public override returns (uint256 _bulkCount) {\n        require(_tos.length == _values.length, \"Amount of recipients and values don't match\");\n        require(_tos.length < BULK_MAX_COUNT, \"Too many recipients\");\n\n        uint256 _bulkValue = 0;\n        for (uint j = 0; j < _tos.length; ++j) {\n            _bulkValue = _bulkValue.add(_values[j]);\n        }\n        require(_bulkValue < BULK_MAX_VALUE, \"Bulk value too high\");\n\n        bool _success;\n        for (uint i = 0; i < _tos.length; ++i) {\n            _success = transferQuiet(_tos[i], _values[i]);\n            if (_success) {\n                _bulkCount = _bulkCount.add(1);\n            }\n        }\n        emit BulkTransfer(_txId, _bulkCount);\n        return _bulkCount;\n    }","contract":"HMToken","time":0},{"type":"external-function ","before":"function approveBulk(address[] memory _spenders, uint256[] memory _values, uint256 _txId) public returns (uint256 _bulkCount) {\n        require(_spenders.length == _values.length, \"Amount of spenders and values don't match\");\n        require(_spenders.length < BULK_MAX_COUNT, \"Too many spenders\");\n\n        uint256 _bulkValue = 0;\n        for (uint j = 0; j < _spenders.length; ++j) {\n            _bulkValue = _bulkValue.add(_values[j]);\n        }\n        require(_bulkValue < BULK_MAX_VALUE, \"Bulk value too high\");\n\n        bool _success;\n        for (uint i = 0; i < _spenders.length; ++i) {\n            _success = increaseApproval(_spenders[i], _values[i]);\n            if (_success) {\n                _bulkCount = _bulkCount.add(1);\n            }\n        }\n        emit BulkApproval(_txId, _bulkCount);\n        return _bulkCount;\n    }","after":"function approveBulk(address[] calldata _spenders, uint256[] calldata _values, uint256 _txId) public returns (uint256 _bulkCount) {\n        require(_spenders.length == _values.length, \"Amount of spenders and values don't match\");\n        require(_spenders.length < BULK_MAX_COUNT, \"Too many spenders\");\n\n        uint256 _bulkValue = 0;\n        for (uint j = 0; j < _spenders.length; ++j) {\n            _bulkValue = _bulkValue.add(_values[j]);\n        }\n        require(_bulkValue < BULK_MAX_VALUE, \"Bulk value too high\");\n\n        bool _success;\n        for (uint i = 0; i < _spenders.length; ++i) {\n            _success = increaseApproval(_spenders[i], _values[i]);\n            if (_success) {\n                _bulkCount = _bulkCount.add(1);\n            }\n        }\n        emit BulkApproval(_txId, _bulkCount);\n        return _bulkCount;\n    }","contract":"HMToken","time":0}]}
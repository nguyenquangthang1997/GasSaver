{"time":768,"results":[{"type":"struct-data-arrangement ","before":"\nuint256[] packTokens\nbool isRandomPack\nuint numRandom\nuint numWhiteListBonus\nbool allotOwnedTokenQuantity\nbool isWhiteListBonusAggregatedAcrossAllWhiteLists","after":"uint256[] packTokens\nuint numRandom\nuint numWhiteListBonus\nbool isRandomPack\nbool allotOwnedTokenQuantity\nbool isWhiteListBonusAggregatedAcrossAllWhiteLists\n","contract":"Commerce","time":1},{"type":"struct-data-arrangement ","before":"\nstring tokenType\naddress tokenAddress\nuint mustOwnQuantity\nuint256 tokenId\nbool active","after":"string tokenType\nuint mustOwnQuantity\nuint256 tokenId\naddress tokenAddress\nbool active\n","contract":"Commerce","time":0},{"type":"external-function ","before":"function addToken(\n        string memory _ipfsMetadataHash,\n        string memory _extraDataUri,\n        uint256 _windowOpens, \n        uint256 _windowCloses, \n        uint256 _mintPrice, \n        uint256 _maxSupply,\n        uint256 _maxMintPerTxn,\n        uint256 _maxPerWallet,\n        bool _maxQuantityMappedByWhitelistHoldings,\n        bool _requireAllWhiteLists,\n        address[] memory _redeemableContracts\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        editToken(tokenCounter.current(), _ipfsMetadataHash, _extraDataUri, _windowOpens, _windowCloses, _mintPrice, _maxSupply, _maxMintPerTxn, _maxPerWallet, _maxQuantityMappedByWhitelistHoldings, _requireAllWhiteLists, _redeemableContracts);\n        tokenCounter.increment();\n    }","after":"function addToken(\n        string calldata _ipfsMetadataHash,\n        string calldata _extraDataUri,\n        uint256 _windowOpens, \n        uint256 _windowCloses, \n        uint256 _mintPrice, \n        uint256 _maxSupply,\n        uint256 _maxMintPerTxn,\n        uint256 _maxPerWallet,\n        bool _maxQuantityMappedByWhitelistHoldings,\n        bool _requireAllWhiteLists,\n        address[] calldata _redeemableContracts\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        editToken(tokenCounter.current(), _ipfsMetadataHash, _extraDataUri, _windowOpens, _windowCloses, _mintPrice, _maxSupply, _maxMintPerTxn, _maxPerWallet, _maxQuantityMappedByWhitelistHoldings, _requireAllWhiteLists, _redeemableContracts);\n        tokenCounter.increment();\n    }","contract":"Commerce","time":0},{"type":"external-function ","before":"function configTokenPack(\n        uint256 _tokenIndex,\n        bool _isTokenPack,\n        uint256[] memory _packTokens,\n        bool _isRandomPack,\n        uint _numRandom,\n        uint _numWhiteListBonus,\n        bool _allotOwnedTokenQuantity,\n        bool _isWhiteListBonusAggregatedAcrossAllWhiteLists\n    )external onlyRole(DEFAULT_ADMIN_ROLE) {\n        TokenPackConfig storage tokenPackConfig = tokens[_tokenIndex].tokenPackConfig;\n        tokens[_tokenIndex].isTokenPack = _isTokenPack;\n        tokenPackConfig.packTokens = _packTokens;\n        tokenPackConfig.isRandomPack = _isRandomPack;\n        tokenPackConfig.numRandom = _numRandom;\n        tokenPackConfig.numWhiteListBonus = _numWhiteListBonus;\n        tokenPackConfig.allotOwnedTokenQuantity = _allotOwnedTokenQuantity;\n        tokenPackConfig.isWhiteListBonusAggregatedAcrossAllWhiteLists = _isWhiteListBonusAggregatedAcrossAllWhiteLists;\n        \n    }","after":"function configTokenPack(\n        uint256 _tokenIndex,\n        bool _isTokenPack,\n        uint256[] calldata _packTokens,\n        bool _isRandomPack,\n        uint _numRandom,\n        uint _numWhiteListBonus,\n        bool _allotOwnedTokenQuantity,\n        bool _isWhiteListBonusAggregatedAcrossAllWhiteLists\n    )external onlyRole(DEFAULT_ADMIN_ROLE) {\n        TokenPackConfig storage tokenPackConfig = tokens[_tokenIndex].tokenPackConfig;\n        tokens[_tokenIndex].isTokenPack = _isTokenPack;\n        tokenPackConfig.packTokens = _packTokens;\n        tokenPackConfig.isRandomPack = _isRandomPack;\n        tokenPackConfig.numRandom = _numRandom;\n        tokenPackConfig.numWhiteListBonus = _numWhiteListBonus;\n        tokenPackConfig.allotOwnedTokenQuantity = _allotOwnedTokenQuantity;\n        tokenPackConfig.isWhiteListBonusAggregatedAcrossAllWhiteLists = _isWhiteListBonusAggregatedAcrossAllWhiteLists;\n        \n    }","contract":"Commerce","time":0},{"type":"external-function ","before":"function addWhiteList(\n         uint256 _tokenIndex,\n         string memory _tokenType,\n         address _tokenAddress,\n         uint _tokenId,\n         uint _mustOwnQuantity\n    )external onlyRole(DEFAULT_ADMIN_ROLE) {\n        Whitelist storage whitelist = tokens[_tokenIndex].whitelistData[tokens[_tokenIndex].numTokenWhitelists];\n        whitelist.tokenType = _tokenType;\n        whitelist.tokenId = _tokenId;\n        whitelist.active = true;\n        whitelist.tokenAddress = _tokenAddress;\n        whitelist.mustOwnQuantity = _mustOwnQuantity;\n        tokens[_tokenIndex].numTokenWhitelists = tokens[_tokenIndex].numTokenWhitelists + 1;\n    }","after":"function addWhiteList(\n         uint256 _tokenIndex,\n         string calldata _tokenType,\n         address _tokenAddress,\n         uint _tokenId,\n         uint _mustOwnQuantity\n    )external onlyRole(DEFAULT_ADMIN_ROLE) {\n        Whitelist storage whitelist = tokens[_tokenIndex].whitelistData[tokens[_tokenIndex].numTokenWhitelists];\n        whitelist.tokenType = _tokenType;\n        whitelist.tokenId = _tokenId;\n        whitelist.active = true;\n        whitelist.tokenAddress = _tokenAddress;\n        whitelist.mustOwnQuantity = _mustOwnQuantity;\n        tokens[_tokenIndex].numTokenWhitelists = tokens[_tokenIndex].numTokenWhitelists + 1;\n    }","contract":"Commerce","time":0},{"type":"external-function ","before":"function setContractURI(string memory uri) external onlyRole(DEFAULT_ADMIN_ROLE){\n        _contractURI = uri;\n    }","after":"function setContractURI(string calldata uri) external onlyRole(DEFAULT_ADMIN_ROLE){\n        _contractURI = uri;\n    }","contract":"Commerce","time":0},{"type":"external-function ","before":"function setURI(string memory baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","after":"function setURI(string calldata baseURI) external onlyOwner {\n        _setURI(baseURI);\n    }","contract":"Commerce","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Commerce","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Commerce","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"Commerce","time":0}]}
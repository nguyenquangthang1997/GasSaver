{"time":228,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\r\n                    !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\r\n                    (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":233,"column":20},"end":{"line":234,"column":50}},"contract":"NameTag","time":0},{"type":"state-data-arrangement ","before":"\nWave[] waves;\nuint8 private _currentWaveIndex = 0;\nmapping(uint256 => string) tokenNames;\nmapping(string => uint256) names;\nstring private _defaultMetadata;\nstring private _defaultNamedMetadata;\nuint8 private _tokenAmountBuyLimit;\nuint256 private _price;\nuint256 private _metadataFee;\naddress private _metadataRole;\nmapping(uint256 => string) private _tokenURIs;","after":"Wave[] waves;\nmapping(uint256 => string) tokenNames;\nmapping(string => uint256) names;\nstring private _defaultMetadata;\nstring private _defaultNamedMetadata;\nuint256 private _price;\nuint256 private _metadataFee;\nmapping(uint256 => string) private _tokenURIs;\naddress private _metadataRole;\nuint8 private _currentWaveIndex = 0;\nuint8 private _tokenAmountBuyLimit;\n","contract":"NameTag","time":0},{"type":"external-function ","before":"function setDefaultMetadata(string memory metadata_) public virtual onlyOwner {\r\n        _defaultMetadata = metadata_;\r\n    }","after":"function setDefaultMetadata(string calldata metadata_) public virtual onlyOwner {\r\n        _defaultMetadata = metadata_;\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function setDefaultNamedMetadata(string memory metadata_) public virtual onlyOwner {\r\n        _defaultNamedMetadata = metadata_;\r\n    }","after":"function setDefaultNamedMetadata(string calldata metadata_) public virtual onlyOwner {\r\n        _defaultNamedMetadata = metadata_;\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) public onlyOwner {\r\n        _setBaseURI(baseURI_);\r\n    }","after":"function setBaseURI(string calldata baseURI_) public onlyOwner {\r\n        _setBaseURI(baseURI_);\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function addDenyList(string[] memory _words) public override onlyOwner {\r\n        super.addDenyList(_words);\r\n    }","after":"function addDenyList(string[] calldata _words) public override onlyOwner {\r\n        super.addDenyList(_words);\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function removeDenyList(string[] memory _words) public override onlyOwner {\r\n        super.removeDenyList(_words);\r\n    }","after":"function removeDenyList(string[] calldata _words) public override onlyOwner {\r\n        super.removeDenyList(_words);\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function setNames(uint256[] memory _tokens, string[] memory _names) public payable returns (bool[] memory) {\r\n        require(_tokens.length == _names.length);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        bool[] memory statuses = new bool[](_tokens.length);\r\n        bool fullStatus = false;\r\n        for (uint index = 0; index < _tokens.length; index += 1) {\r\n            bool hasName = bytes(getTokenName(_tokens[index])).length > 0;\r\n            statuses[index] = _setName(_tokens[index], _names[index]);\r\n\r\n            if (hasName && statuses[index]) {\r\n                require(weiAmount >= metadataFee(), \"NT: Insufficient fee funds\");\r\n                weiAmount -= metadataFee();\r\n\r\n                _setTokenURI(_tokens[index], '');\r\n            }\r\n\r\n            if (!fullStatus && statuses[index]) {\r\n                fullStatus = statuses[index];\r\n            }\r\n        }\r\n\r\n        require(fullStatus); // at least one name was set\r\n\r\n        return statuses;\r\n    }","after":"function setNames(uint256[] calldata _tokens, string[] calldata _names) public payable returns (bool[] memory) {\r\n        require(_tokens.length == _names.length);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        bool[] memory statuses = new bool[](_tokens.length);\r\n        bool fullStatus = false;\r\n        for (uint index = 0; index < _tokens.length; index += 1) {\r\n            bool hasName = bytes(getTokenName(_tokens[index])).length > 0;\r\n            statuses[index] = _setName(_tokens[index], _names[index]);\r\n\r\n            if (hasName && statuses[index]) {\r\n                require(weiAmount >= metadataFee(), \"NT: Insufficient fee funds\");\r\n                weiAmount -= metadataFee();\r\n\r\n                _setTokenURI(_tokens[index], '');\r\n            }\r\n\r\n            if (!fullStatus && statuses[index]) {\r\n                fullStatus = statuses[index];\r\n            }\r\n        }\r\n\r\n        require(fullStatus); // at least one name was set\r\n\r\n        return statuses;\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function setMetadata(uint256 _token, string memory _metadata) public {\r\n        require(msg.sender == metadataRole());\r\n        _setTokenURI(_token, _metadata);\r\n    }","after":"function setMetadata(uint256 _token, string calldata _metadata) public {\r\n        require(msg.sender == metadataRole());\r\n        _setTokenURI(_token, _metadata);\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function setMetadataList(uint256[] memory _tokens, string[] memory _metadata) public {\r\n        require(msg.sender == metadataRole());\r\n\r\n        require(_tokens.length == _metadata.length);\r\n        for (uint index = 0; index < _tokens.length; index += 1) {\r\n            _setTokenURI(_tokens[index], _metadata[index]);\r\n        }\r\n    }","after":"function setMetadataList(uint256[] calldata _tokens, string[] calldata _metadata) public {\r\n        require(msg.sender == metadataRole());\r\n\r\n        require(_tokens.length == _metadata.length);\r\n        for (uint index = 0; index < _tokens.length; index += 1) {\r\n            _setTokenURI(_tokens[index], _metadata[index]);\r\n        }\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function buyNamedTokens(string[] memory _names) external payable returns (uint256[] memory) {\r\n        uint256 tokensAmount = _buyTokens();\r\n\r\n        uint256[] memory tokens = new uint256[](tokensAmount);\r\n\r\n        for (uint index = 0; index < tokensAmount; index += 1) {\r\n            tokens[index] = _processPurchaseToken(msg.sender);\r\n\r\n            if (index < _names.length) {\r\n                require(_setName(tokens[index], _names[index]), \"NT: Name cannot be assigned\");\r\n            }\r\n        }\r\n\r\n        return tokens;\r\n    }","after":"function buyNamedTokens(string[] calldata _names) external payable returns (uint256[] memory) {\r\n        uint256 tokensAmount = _buyTokens();\r\n\r\n        uint256[] memory tokens = new uint256[](tokensAmount);\r\n\r\n        for (uint index = 0; index < tokensAmount; index += 1) {\r\n            tokens[index] = _processPurchaseToken(msg.sender);\r\n\r\n            if (index < _names.length) {\r\n                require(_setName(tokens[index], _names[index]), \"NT: Name cannot be assigned\");\r\n            }\r\n        }\r\n\r\n        return tokens;\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function buyNamedToken(string memory _name) external payable returns (uint256) {\r\n        _preValidatePurchase();\r\n\r\n        uint256 token = _processPurchaseToken(msg.sender);\r\n        require(_setName(token, _name), \"NT: Name cannot be assigned\");\r\n        return token;\r\n    }","after":"function buyNamedToken(string calldata _name) external payable returns (uint256) {\r\n        _preValidatePurchase();\r\n\r\n        uint256 token = _processPurchaseToken(msg.sender);\r\n        require(_setName(token, _name), \"NT: Name cannot be assigned\");\r\n        return token;\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function addDenyList (string[] memory _words) public virtual {\r\n        for(uint index = 0; index < _words.length; index+=1) {\r\n            denyList[upper(_words[index])] = true;\r\n            emit AddedDenyList(_words[index]);\r\n        }\r\n    }","after":"function addDenyList (string[] calldata _words) public virtual {\r\n        for(uint index = 0; index < _words.length; index+=1) {\r\n            denyList[upper(_words[index])] = true;\r\n            emit AddedDenyList(_words[index]);\r\n        }\r\n    }","contract":"NameTag","time":0},{"type":"external-function ","before":"function removeDenyList (string[] memory _words) public virtual {\r\n        for(uint index = 0; index < _words.length; index+=1) {\r\n            denyList[upper(_words[index])] = false;\r\n            emit RemovedDenyList(_words[index]);\r\n        }\r\n    }","after":"function removeDenyList (string[] calldata _words) public virtual {\r\n        for(uint index = 0; index < _words.length; index+=1) {\r\n            denyList[upper(_words[index])] = false;\r\n            emit RemovedDenyList(_words[index]);\r\n        }\r\n    }","contract":"NameTag","time":0}]}
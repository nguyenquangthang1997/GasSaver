{"time":109,"results":[{"type":"external-function ","before":"function setURI(string memory newuri) external onlyOwner {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) external onlyOwner {\n        _setURI(newuri);\n    }","contract":"EtholvantsBoosterSyringe","time":0},{"type":"external-function ","before":"function mintBatch(uint256[] memory etholIds) public {\n        for (uint256 i = 0; i < etholIds.length; i++) {\n\t\t\tuint etholId = etholIds[i];\n\t\t\trequire(isEligibleToMint(etholId), \"not eligible\");\n\t\t\trequire(ethols.getRealOwner(etholId) == msg.sender, \"permission denied\");\n\t\t\tminted[etholId] = true;\n\t\t}\n\t\t_mint(msg.sender, 0, etholIds.length, \"\");\n\t\ttotalMinted += etholIds.length;\n\t}","after":"function mintBatch(uint256[] calldata etholIds) public {\n        for (uint256 i = 0; i < etholIds.length; i++) {\n\t\t\tuint etholId = etholIds[i];\n\t\t\trequire(isEligibleToMint(etholId), \"not eligible\");\n\t\t\trequire(ethols.getRealOwner(etholId) == msg.sender, \"permission denied\");\n\t\t\tminted[etholId] = true;\n\t\t}\n\t\t_mint(msg.sender, 0, etholIds.length, \"\");\n\t\ttotalMinted += etholIds.length;\n\t}","contract":"EtholvantsBoosterSyringe","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"EtholvantsBoosterSyringe","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"EtholvantsBoosterSyringe","time":0},{"type":"constant-restrict-modification  ","before":"uint public MINT_END_TS = 1654042069;","after":"uint public constant MINT_END_TS = 1654042069;","contract":"EtholvantsBoosterSyringe","time":0},{"type":"constant-restrict-modification  ","before":"uint public MIN_CELLS = 1440;","after":"uint public constant MIN_CELLS = 1440;","contract":"EtholvantsBoosterSyringe","time":0},{"type":"constant-restrict-modification  ","before":"uint public MIN_STAKED_TIME = 24 * 24 * 3600;","after":"uint public constant MIN_STAKED_TIME = 24 * 24 * 3600;","contract":"EtholvantsBoosterSyringe","time":0}]}
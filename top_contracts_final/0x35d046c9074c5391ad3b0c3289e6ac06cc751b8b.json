{"time":146,"results":[{"type":"external-function ","before":"function setAGIProvenance(string memory AGIProvenance) external override onlyOwner {\n        AGIP_PROVENANCE = AGIProvenance;\n    }","after":"function setAGIProvenance(string calldata AGIProvenance) external override onlyOwner {\n        AGIP_PROVENANCE = AGIProvenance;\n    }","contract":"AnimeGang","time":0},{"type":"external-function ","before":"function setAGCOPProvenance(string memory AGCOProvenance) external override onlyOwner {\n        AGCOP_PROVENANCE = AGCOProvenance;\n    }","after":"function setAGCOPProvenance(string calldata AGCOProvenance) external override onlyOwner {\n        AGCOP_PROVENANCE = AGCOProvenance;\n    }","contract":"AnimeGang","time":0},{"type":"external-function ","before":"function mintMemberPresale(bytes32[] memory proof, uint256 numberOfGangMembers) external override payable {\n        require(isPresaleActive, \"You cannot became a gang member, presale is inactive. q-_-p\");\n        require(!isPublicSaleActive, \"You cannot became a gang member, using presale sale mint. q-_-p\");\n        require(MerkleProof.verify(proof, merkleRoot, keccak256(abi.encodePacked(msg.sender))), \"You're a not in the presale list. q-_-p\");\n        require(_presaleCountClaimedTokens[msg.sender].add(numberOfGangMembers) <= maxPresaleMint, \"Purchase exceeds max allowed presale mints. \");\n        require(totalSupply().add(numberOfGangMembers) <= MAX_ANIME_GANG_MEMBERS_PRE_SALE, \"The purchase will exceed the member slots for PRE-SALE. \");\n        require(MINT_PRESALE_PRICE.mul(numberOfGangMembers) <= msg.value, \"Ether value sent is not enough\");\n\n        for(uint i = 0; i < numberOfGangMembers; i++) {\n            uint mintIndex = totalSupply().add(1);\n            _presaleCountClaimedTokens[msg.sender] += 1;\n            animeGangSupply += 1;\n            _safeMint(msg.sender, mintIndex);\n        }\n\n    }","after":"function mintMemberPresale(bytes32[] calldata proof, uint256 numberOfGangMembers) external override payable {\n        require(isPresaleActive, \"You cannot became a gang member, presale is inactive. q-_-p\");\n        require(!isPublicSaleActive, \"You cannot became a gang member, using presale sale mint. q-_-p\");\n        require(MerkleProof.verify(proof, merkleRoot, keccak256(abi.encodePacked(msg.sender))), \"You're a not in the presale list. q-_-p\");\n        require(_presaleCountClaimedTokens[msg.sender].add(numberOfGangMembers) <= maxPresaleMint, \"Purchase exceeds max allowed presale mints. \");\n        require(totalSupply().add(numberOfGangMembers) <= MAX_ANIME_GANG_MEMBERS_PRE_SALE, \"The purchase will exceed the member slots for PRE-SALE. \");\n        require(MINT_PRESALE_PRICE.mul(numberOfGangMembers) <= msg.value, \"Ether value sent is not enough\");\n\n        for(uint i = 0; i < numberOfGangMembers; i++) {\n            uint mintIndex = totalSupply().add(1);\n            _presaleCountClaimedTokens[msg.sender] += 1;\n            animeGangSupply += 1;\n            _safeMint(msg.sender, mintIndex);\n        }\n\n    }","contract":"AnimeGang","time":0}]}
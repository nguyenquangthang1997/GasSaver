{"time":87,"results":[{"type":"external-function ","before":"function changeThreshold(uint256 _newThreshold, bytes[] memory _signatures)\n        public\n        withNonce\n    {\n        require(\n            verify(\n                keccak256(abi.encodePacked(nonce, _newThreshold)),\n                _signatures\n            ),\n            \"Minter: invalid signature\"\n        );\n        threshold = _newThreshold;\n    }","after":"function changeThreshold(uint256 _newThreshold, bytes[] calldata _signatures)\n        public\n        withNonce\n    {\n        require(\n            verify(\n                keccak256(abi.encodePacked(nonce, _newThreshold)),\n                _signatures\n            ),\n            \"Minter: invalid signature\"\n        );\n        threshold = _newThreshold;\n    }","contract":"Minter","time":0},{"type":"external-function ","before":"function addSigner(address _signer, bytes[] memory _signatures)\n        public\n        withNonce\n    {\n        require(\n            verify(keccak256(abi.encodePacked(nonce, _signer)), _signatures),\n            \"Minter: invalid signature\"\n        );\n        signerCount++;\n        signers[_signer] = true;\n    }","after":"function addSigner(address _signer, bytes[] calldata _signatures)\n        public\n        withNonce\n    {\n        require(\n            verify(keccak256(abi.encodePacked(nonce, _signer)), _signatures),\n            \"Minter: invalid signature\"\n        );\n        signerCount++;\n        signers[_signer] = true;\n    }","contract":"Minter","time":0},{"type":"external-function ","before":"function removeSigner(address _signer, bytes[] memory _signatures)\n        public\n        withNonce\n    {\n        require(\n            verify(keccak256(abi.encodePacked(nonce, _signer)), _signatures),\n            \"Minter: invalid signature\"\n        );\n        signerCount--;\n        signers[_signer] = false;\n    }","after":"function removeSigner(address _signer, bytes[] calldata _signatures)\n        public\n        withNonce\n    {\n        require(\n            verify(keccak256(abi.encodePacked(nonce, _signer)), _signatures),\n            \"Minter: invalid signature\"\n        );\n        signerCount--;\n        signers[_signer] = false;\n    }","contract":"Minter","time":0},{"type":"external-function ","before":"function collectOwnership(\n        address _token,\n        address _to,\n        bytes[] memory _signatures\n    ) public withNonce {\n        require(\n            verify(\n                keccak256(abi.encodePacked(nonce, _token, _to)),\n                _signatures\n            ),\n            \"Minter: invalid signature\"\n        );\n        Ownable(_token).transferOwnership(_to);\n    }","after":"function collectOwnership(\n        address _token,\n        address _to,\n        bytes[] calldata _signatures\n    ) public withNonce {\n        require(\n            verify(\n                keccak256(abi.encodePacked(nonce, _token, _to)),\n                _signatures\n            ),\n            \"Minter: invalid signature\"\n        );\n        Ownable(_token).transferOwnership(_to);\n    }","contract":"Minter","time":0},{"type":"external-function ","before":"function mint(\n        address _token,\n        address _to,\n        uint256 _amount,\n        bytes32 _txHash,\n        bytes[] memory _signatures\n    ) public override withNonce {\n        require(\n            verify(\n                keccak256(\n                    abi.encodePacked(nonce, _token, _to, _amount, _txHash)\n                ),\n                _signatures\n            ),\n            \"Minter: invalid signature\"\n        );\n\n        WrappedToken(_token).mint(_to, _amount);\n    }","after":"function mint(\n        address _token,\n        address _to,\n        uint256 _amount,\n        bytes32 _txHash,\n        bytes[] calldata _signatures\n    ) public override withNonce {\n        require(\n            verify(\n                keccak256(\n                    abi.encodePacked(nonce, _token, _to, _amount, _txHash)\n                ),\n                _signatures\n            ),\n            \"Minter: invalid signature\"\n        );\n\n        WrappedToken(_token).mint(_to, _amount);\n    }","contract":"Minter","time":0}]}
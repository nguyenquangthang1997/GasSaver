{"time":243,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant MAX_SUPPLY = 40000;\nuint256 public constant PRICE = 0.2 ether;\nuint256 public constant MAX_PER_CALL = 10;\naddress public yieldToken;\nstring public uri;\nstring public suffix;\nmapping(address => uint256) public reservedToMint;\nmapping(address => uint256) public mintedBy;\nmapping(address => bool) public human;\nuint256 public reserved;\nuint256 public whitelistSale;\nuint256 public publicSaleDate;\nbool public rewardsUnlocked;\nmapping(uint256 => uint256) genes;","after":"uint256 public constant MAX_SUPPLY = 40000;\nuint256 public constant PRICE = 0.2 ether;\nuint256 public constant MAX_PER_CALL = 10;\nstring public uri;\nstring public suffix;\nmapping(address => uint256) public reservedToMint;\nmapping(address => uint256) public mintedBy;\nmapping(address => bool) public human;\nuint256 public reserved;\nuint256 public whitelistSale;\nuint256 public publicSaleDate;\nmapping(uint256 => uint256) genes;\naddress public yieldToken;\nbool public rewardsUnlocked;\n","contract":"SolarBots","time":0},{"type":"external-function ","before":"function updateURI(string memory _newURI) public onlyOwner {\n\t\turi = _newURI;\n\t}","after":"function updateURI(string calldata _newURI) public onlyOwner {\n\t\turi = _newURI;\n\t}","contract":"SolarBots","time":0},{"type":"external-function ","before":"function updateSuffix(string memory _suffix) public onlyOwner {\n\t\tsuffix = _suffix;\n\t}","after":"function updateSuffix(string calldata _suffix) public onlyOwner {\n\t\tsuffix = _suffix;\n\t}","contract":"SolarBots","time":0},{"type":"external-function ","before":"function mintAllBotsWithSignature(uint256 _index, address _account, uint256 _amount, bytes32[] memory _proof) public payable {\n\t\trequire(block.timestamp >= whitelistSale, \"Public sale not ready\");\n\t\trequire(msg.value == _amount * PRICE, \"Wrong price\");\n\t\trequire(msg.sender == _account, \"Caller not part of tree\");\n\t\trequire(mintedBy[_account] == 0, \"Minted some\");\n\n\t\t_claim(_index, _account, _amount, _proof);\n\t\tif (_amount > MAX_PER_CALL) {\n\t\t\treservedToMint[_account] += _amount;\n\t\t\treserved += _amount;\n\t\t}\n\t\telse {\n\t\t\tuint256 supply = totalSupply();\n\t\t\tfor (uint256 i = 0; i < _amount; i++)\n\t\t\t\t_mintTeam(supply + i * 4);\n\t\t}\n\t}","after":"function mintAllBotsWithSignature(uint256 _index, address _account, uint256 _amount, bytes32[] calldata _proof) public payable {\n\t\trequire(block.timestamp >= whitelistSale, \"Public sale not ready\");\n\t\trequire(msg.value == _amount * PRICE, \"Wrong price\");\n\t\trequire(msg.sender == _account, \"Caller not part of tree\");\n\t\trequire(mintedBy[_account] == 0, \"Minted some\");\n\n\t\t_claim(_index, _account, _amount, _proof);\n\t\tif (_amount > MAX_PER_CALL) {\n\t\t\treservedToMint[_account] += _amount;\n\t\t\treserved += _amount;\n\t\t}\n\t\telse {\n\t\t\tuint256 supply = totalSupply();\n\t\t\tfor (uint256 i = 0; i < _amount; i++)\n\t\t\t\t_mintTeam(supply + i * 4);\n\t\t}\n\t}","contract":"SolarBots","time":0},{"type":"external-function ","before":"function mintSomeBotsWithSignature(uint256 _toMint, uint256 _index, address _account, uint256 _amount, bytes32[] memory _proof) public payable {\n\t\trequire(block.timestamp >= whitelistSale, \"Public sale not ready\");\n\t\trequire(msg.value == _toMint * PRICE, \"Wrong price\");\n\t\trequire(msg.sender == _account, \"Caller not part of tree\");\n\n\t\trequire(!isClaimed(_index), \"Claimed already\");\n\t\t_verify(_index, _account, _amount, _proof);\n\t\trequire(mintedBy[_account] + _toMint <= _amount, \"Can't mint more than allocated\");\n\t\tmintedBy[_account] += _toMint;\n\t\tif (_toMint > MAX_PER_CALL) {\n\t\t\treservedToMint[_account] += _toMint;\n\t\t\treserved += _toMint;\n\t\t}\n\t\telse {\n\t\t\tuint256 supply = totalSupply();\n\t\t\tfor (uint256 i = 0; i < _toMint; i++)\n\t\t\t\t_mintTeam(supply + i * 4);\n\t\t}\n\t}","after":"function mintSomeBotsWithSignature(uint256 _toMint, uint256 _index, address _account, uint256 _amount, bytes32[] calldata _proof) public payable {\n\t\trequire(block.timestamp >= whitelistSale, \"Public sale not ready\");\n\t\trequire(msg.value == _toMint * PRICE, \"Wrong price\");\n\t\trequire(msg.sender == _account, \"Caller not part of tree\");\n\n\t\trequire(!isClaimed(_index), \"Claimed already\");\n\t\t_verify(_index, _account, _amount, _proof);\n\t\trequire(mintedBy[_account] + _toMint <= _amount, \"Can't mint more than allocated\");\n\t\tmintedBy[_account] += _toMint;\n\t\tif (_toMint > MAX_PER_CALL) {\n\t\t\treservedToMint[_account] += _toMint;\n\t\t\treserved += _toMint;\n\t\t}\n\t\telse {\n\t\t\tuint256 supply = totalSupply();\n\t\t\tfor (uint256 i = 0; i < _toMint; i++)\n\t\t\t\t_mintTeam(supply + i * 4);\n\t\t}\n\t}","contract":"SolarBots","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public whitelistSale;","after":"uint256 public immutable whitelistSale;","contract":"SolarBots","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public publicSaleDate;","after":"uint256 public immutable publicSaleDate;","contract":"SolarBots","time":1},{"type":"immutable-restrict-modification ","before":"\n\n\tbytes32 public merkleRo","after":"\n\n\tbytes32 public merkleRo","contract":"SolarBots","time":1}]}
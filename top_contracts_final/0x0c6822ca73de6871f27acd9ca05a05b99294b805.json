{"time":118,"results":[{"type":"external-function ","before":"function synthesizeManyUltraminers(uint256[] memory bmcs) external nonContract{\n    require(synthesizerState, \"The Synthesizer is not active currently.\");\n    require(bmcs.length % 2 == 0, \"Uneven number of BMCs inputted.\");\n    address caller = _msgSender();\n    require(bmc.isApprovedForAll(caller, umContract), \"Synthesizer is not approved to burn your NFTs.\");\n    uint256 supply = totalCreated();\n\n    for (uint256 i = 0; i < bmcs.length; i += 2) {\n\n        uint256 firstbmc = bmcs[i];\n        uint256 secondbmc = bmcs[i + 1];\n        require(bmc.ownerOf(firstbmc) == caller && bmc.ownerOf(secondbmc) == caller, \"Synthesizer Caller is not Owner.\");\n\n        bmc.burn(firstbmc);\n        bmc.burn(secondbmc);\n\n        _safeMint(caller, supply + i/2, \"\");\n    }\n\n  }","after":"function synthesizeManyUltraminers(uint256[] calldata bmcs) external nonContract{\n    require(synthesizerState, \"The Synthesizer is not active currently.\");\n    require(bmcs.length % 2 == 0, \"Uneven number of BMCs inputted.\");\n    address caller = _msgSender();\n    require(bmc.isApprovedForAll(caller, umContract), \"Synthesizer is not approved to burn your NFTs.\");\n    uint256 supply = totalCreated();\n\n    for (uint256 i = 0; i < bmcs.length; i += 2) {\n\n        uint256 firstbmc = bmcs[i];\n        uint256 secondbmc = bmcs[i + 1];\n        require(bmc.ownerOf(firstbmc) == caller && bmc.ownerOf(secondbmc) == caller, \"Synthesizer Caller is not Owner.\");\n\n        bmc.burn(firstbmc);\n        bmc.burn(secondbmc);\n\n        _safeMint(caller, supply + i/2, \"\");\n    }\n\n  }","contract":"Ultraminers","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newBaseURI) external onlyOwner {\n    baseURI = _newBaseURI;\n  }","after":"function setBaseURI(string calldata _newBaseURI) external onlyOwner {\n    baseURI = _newBaseURI;\n  }","contract":"Ultraminers","time":0},{"type":"immutable-restrict-modification ","before":"address public umContract;","after":"address public immutable umContract;","contract":"Ultraminers","time":0}]}
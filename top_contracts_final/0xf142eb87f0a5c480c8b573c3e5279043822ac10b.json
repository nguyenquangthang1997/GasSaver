{"time":17,"results":[{"type":"external-function ","before":"   function claim(\n        address _address,\n        uint256 _value,\n        uint256 _nonce,\n        bytes memory _sig\n    ) public {\n        bytes32 hash = _hash(_address, _value, _nonce);\n\n        require(ECDSA.recover(hash, _sig) == trustedAccountAddress, 'Claim: Invalid signature');\n        require(claimed[hash] == 0, 'Claim: Already claimed');\n\n        claimed[hash] = _value;\n        token.transferFrom(walletAddress, _address, _value);\n\n        emit Claimed(_address, _nonce, _value);\n  ","after":"   function claim(\n        address _address,\n        uint256 _value,\n        uint256 _nonce,\n        bytes calldata _sig\n    ) public {\n        bytes32 hash = _hash(_address, _value, _nonce);\n\n        require(ECDSA.recover(hash, _sig) == trustedAccountAddress, 'Claim: Invalid signature');\n        require(claimed[hash] == 0, 'Claim: Already claimed');\n\n        claimed[hash] = _value;\n        token.transferFrom(walletAddress, _address, _value);\n\n        emit Claimed(_address, _nonce, _value);\n  ","contract":"Claim","time":0},{"type":"immutable-restrict-modification ","before":"   address trustedAccountAddre","after":"   address trustedAccountAddre","contract":"Claim","time":0},{"type":"immutable-restrict-modification ","before":"   address walletAddre","after":"   address walletAddre","contract":"Claim","time":0}]}
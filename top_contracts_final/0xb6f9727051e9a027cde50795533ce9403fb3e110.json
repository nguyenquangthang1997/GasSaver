{"time":135,"results":[{"type":"external-function ","before":"   function depositWithSignature(\n        uint256 amountToSend,\n        address newAddress,\n        address signedAddress,\n        uint256 [3] memory signedSwapLimits,\n        bytes memory signature\n    ) external\n    {\n        address sender = _msgSender();\n        uint256 senderBalance = tokenAddress.balanceOf(sender);\n        require(senderBalance >= amountToSend, \"swapContract: Insufficient balance\");\n        require(amountToSend >= minSwapAmountPerTx, \"swapContract: Less than required minimum of tokens requested\");\n        require(amountToSend <= maxSwapAmountPerTx, \"swapContract: Swap limit per transaction exceeded\");\n        require(sender == signedAddress, \"swapContract: Signed and sender address does not match\");\n        require(!swapLimitsSaved[sender], \"swapContract: Swap limits already saved\");\n\n        bytes32 hashedParams = keccak256(abi.encodePacked(signedAddress, signedSwapLimits));\n        address validatorAddress = ECDSA.recover(ECDSA.toEthSignedMessageHash(hashedParams), signature);\n        require(isValidator(validatorAddress), \"swapContract: Invalid swap limits validator\");\n\n        (uint256[3] memory swapLimitsNew, uint256 amountToPay, uint256 amountToReceive) = calculateAmountsAfterSwap(\n            signedSwapLimits, amountToSend, true\n        );\n        require(amountToPay > 0, \"swapContract: Swap limit reached\");\n        require(amountToReceive > 0, \"swapContract: Amount to receive is zero\");\n\n        swapLimits[sender] = swapLimitsNew;\n        swapLimitsSaved[sender] = true;\n\n        TransferHelper.safeTransferFrom(address(tokenAddress), sender, address(this), amountToPay);\n        emit Deposit(sender, amountToPay, amountToReceive, newAddress);\n  ","after":"   function depositWithSignature(\n        uint256 amountToSend,\n        address newAddress,\n        address signedAddress,\n        uint256 [3] calldata signedSwapLimits,\n        bytes calldata signature\n    ) external\n    {\n        address sender = _msgSender();\n        uint256 senderBalance = tokenAddress.balanceOf(sender);\n        require(senderBalance >= amountToSend, \"swapContract: Insufficient balance\");\n        require(amountToSend >= minSwapAmountPerTx, \"swapContract: Less than required minimum of tokens requested\");\n        require(amountToSend <= maxSwapAmountPerTx, \"swapContract: Swap limit per transaction exceeded\");\n        require(sender == signedAddress, \"swapContract: Signed and sender address does not match\");\n        require(!swapLimitsSaved[sender], \"swapContract: Swap limits already saved\");\n\n        bytes32 hashedParams = keccak256(abi.encodePacked(signedAddress, signedSwapLimits));\n        address validatorAddress = ECDSA.recover(ECDSA.toEthSignedMessageHash(hashedParams), signature);\n        require(isValidator(validatorAddress), \"swapContract: Invalid swap limits validator\");\n\n        (uint256[3] memory swapLimitsNew, uint256 amountToPay, uint256 amountToReceive) = calculateAmountsAfterSwap(\n            signedSwapLimits, amountToSend, true\n        );\n        require(amountToPay > 0, \"swapContract: Swap limit reached\");\n        require(amountToReceive > 0, \"swapContract: Amount to receive is zero\");\n\n        swapLimits[sender] = swapLimitsNew;\n        swapLimitsSaved[sender] = true;\n\n        TransferHelper.safeTransferFrom(address(tokenAddress), sender, address(this), amountToPay);\n        emit Deposit(sender, amountToPay, amountToReceive, newAddress);\n  ","contract":"SwapContract","time":0},{"type":"external-function ","before":"   function updateSwapLimits(address account, uint256[3] memory _swapLimits) external onlyOwnerAndValidator {\n        swapLimits[account] = _swapLimits;\n        swapLimitsSaved[account] = true;\n  ","after":"   function updateSwapLimits(address account, uint256[3] calldata _swapLimits) external onlyOwnerAndValidator {\n        swapLimits[account] = _swapLimits;\n        swapLimitsSaved[account] = true;\n  ","contract":"SwapContract","time":0}]}
{"time":181,"results":[{"type":"external-function ","before":"function setContractURI(string memory contractURI_) \r\n        external \r\n        onlyTeam \r\n    {\r\n        _contractURI = contractURI_;\r\n    }","after":"function setContractURI(string calldata contractURI_) \r\n        external \r\n        onlyTeam \r\n    {\r\n        _contractURI = contractURI_;\r\n    }","contract":"LEMURLEMUR","time":0},{"type":"external-function ","before":"function setProvenance(string memory _provenance) \r\n        external \r\n        onlyOwner \r\n    {\r\n        require(\r\n            bytes(provenance).length == 0,\r\n             \"Provenance already set!\"\r\n             );\r\n        provenance = _provenance;\r\n    }","after":"function setProvenance(string calldata _provenance) \r\n        external \r\n        onlyOwner \r\n    {\r\n        require(\r\n            bytes(provenance).length == 0,\r\n             \"Provenance already set!\"\r\n             );\r\n        provenance = _provenance;\r\n    }","contract":"LEMURLEMUR","time":0},{"type":"external-function ","before":"function devMint(\r\n        address payable[] memory recipients,\r\n        uint256[] memory quantity\r\n    ) \r\n        external \r\n        onlyOwner \r\n    {\r\n        //ensure data integrity\r\n        require(recipients.length == quantity.length, \"Data length mismatch!\");\r\n        //ensure dev mint would not exceed the cap\r\n        uint256 totalMintRequested = 0;\r\n        for (uint256 i = 0; i < quantity.length; i++) {\r\n            totalMintRequested = totalMintRequested.add(quantity[i]);\r\n        }\r\n        require(\r\n            totalSupply().add(totalMintRequested) <= maxTokens,\r\n            \"Minting this many would exceed supply!\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            minter(recipients[i], quantity[i]);\r\n        }\r\n    }","after":"function devMint(\r\n        address payable[] calldata recipients,\r\n        uint256[] calldata quantity\r\n    ) \r\n        external \r\n        onlyOwner \r\n    {\r\n        //ensure data integrity\r\n        require(recipients.length == quantity.length, \"Data length mismatch!\");\r\n        //ensure dev mint would not exceed the cap\r\n        uint256 totalMintRequested = 0;\r\n        for (uint256 i = 0; i < quantity.length; i++) {\r\n            totalMintRequested = totalMintRequested.add(quantity[i]);\r\n        }\r\n        require(\r\n            totalSupply().add(totalMintRequested) <= maxTokens,\r\n            \"Minting this many would exceed supply!\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            minter(recipients[i], quantity[i]);\r\n        }\r\n    }","contract":"LEMURLEMUR","time":0},{"type":"constant-restrict-modification  ","before":"uint256 tokenPrice = 50000000000000000;","after":"uint256 constant tokenPrice = 50000000000000000;","contract":"LEMURLEMUR","time":0},{"type":"immutable-restrict-modification ","before":"address payable public teamMember;","after":"address payable public immutable teamMember;","contract":"LEMURLEMUR","time":0},{"type":"immutable-restrict-modification ","before":"address private deployer;","after":"address private immutable deployer;","contract":"LEMURLEMUR","time":0},{"type":"constant-restrict-modification  ","before":"uint public metadataURIrange=505;","after":"uint public constant metadataURIrange=505;","contract":"LEMURLEMUR","time":0}]}
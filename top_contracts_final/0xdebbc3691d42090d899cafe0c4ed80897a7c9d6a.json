{"time":312,"results":[{"type":"external-function ","before":"\n\n    function setImageUrl(string memory _imageUrl) onlyOwner public {\n        IMAGE_URL = _imageUrl;","after":"\n\n    function setImageUrl(string calldata _imageUrl) onlyOwner public {\n        IMAGE_URL = _imageUrl;","contract":"FluffyPolarBears","time":0},{"type":"external-function ","before":" \n    function addToBlacklist(address[] memory _addresses, bool _value) onlyOwner public {\n        for (uint i = 0; i < _addresses.length; i++) {\n            isBlacklisted[_addresses[i]] = _value;\n        }","after":" \n    function addToBlacklist(address[] calldata _addresses, bool _value) onlyOwner public {\n        for (uint i = 0; i < _addresses.length; i++) {\n            isBlacklisted[_addresses[i]] = _value;\n        }","contract":"FluffyPolarBears","time":1},{"type":"external-function ","before":"\n\n    function setMetadataProvenance(string memory _hash) onlyOwner public {\n        metadataProvenance = _hash;","after":"\n\n    function setMetadataProvenance(string calldata _hash) onlyOwner public {\n        metadataProvenance = _hash;","contract":"FluffyPolarBears","time":0},{"type":"constant-restrict-modification  ","before":"\n\n    uint public CONTRACT_DEVELOPER_FE","after":"\n\n    uint public CONTRACT_DEVELOPER_FE","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint public ARTIST_FEE","after":";\n    uint public constant ARTIST_FEE","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint public POOL_FEE","after":";\n    uint public constant POOL_FEE","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint public WEB_DEVELOPER_FE","after":";\n    uint public WEB_DEVELOPER_FE","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint public COMMUNITY_MANAGER_FEE","after":";\n    uint public constant COMMUNITY_MANAGER_FEE","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint public SHAREHOLDER_FEE","after":";\n    uint public constant SHAREHOLDER_FEE","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":";\n    uint public CHARITY_FE","after":";\n    uint public CHARITY_FE","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"\n\n    uint256 public REROLL_PRICE = 0.033 ","after":"\n\n    uint256 public constant REROLL_PRICE = 0.033 ","contract":"FluffyPolarBears","time":1},{"type":"immutable-restrict-modification ","before":"enIdCounter;\n\n    bytes32","after":"enIdCounter;\n\n    bytes32","contract":"FluffyPolarBears","time":1},{"type":"immutable-restrict-modification ","before":"rnal keyHash;\n    uin","after":"rnal keyHash;\n    uin","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"[] tokenIds;\n\n","after":"[] tokenIds;\n\n","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"int8 BGS = 9;\n    ui","after":"int8 BGS = 9;\n    ui","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"OSTUMES = 83;\n  ","after":"OSTUMES = 83;\n  ","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"t8 EYES = 46;\n   ","after":"t8 EYES = 46;\n   ","contract":"FluffyPolarBears","time":1},{"type":"constant-restrict-modification  ","before":"8 HEADS = 87;\n   ","after":"8 HEADS = 87;\n   ","contract":"FluffyPolarBears","time":1},{"type":"external-function ","before":"alue);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, i","after":"alue);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, i","contract":"ERC1155Burnable","time":0},{"type":"external-function ","before":"rom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, am","after":"rom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, am","contract":"ERC1155Burnable","time":0},{"type":"external-function ","before":"rom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amo","after":"rom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amo","contract":"ERC1155Burnable","time":0}]}
{"time":140,"results":[{"type":"external-function ","before":"function mintBatchFurnitures(uint256[] memory ids, uint256[] memory amounts) public payable {\r\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n    uint256 totalAmounts = 0;\r\n    uint256 paymentRequiredOnEther = 0;\r\n    uint256 paymentRequiredOnTiles = 0;\r\n\r\n    for (uint i = 0; i < ids.length; i++) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n\r\n      require(amount > 0, \"amount cannot be 0\");\r\n\r\n      if(_furnitures[id].saveFirstBuyerMaxTimestampAllowed > 0 && block.timestamp < _furnitures[id].saveFirstBuyerMaxTimestampAllowed){\r\n        totalAmounts += amount;\r\n      }\r\n\r\n      require(_furnitures[id].totalSupply + amount <= _furnitures[id].maxSupply, \"Exceeds MAX_SUPPLY\");\r\n      _furnitures[id].totalSupply += amount;\r\n\r\n      if(_furnitures[id].isPaidWithEther){\r\n        paymentRequiredOnEther += _furnitures[id].price * amount;\r\n      }else{\r\n        paymentRequiredOnTiles += _furnitures[id].price * amount;\r\n      }\r\n    }\r\n\r\n    require(msg.value == paymentRequiredOnEther, \"Ether value sent is not correct\");\r\n\r\n    if(paymentRequiredOnTiles > 0){\r\n      require(tilesInstance.balanceOf(msg.sender) >= paymentRequiredOnTiles, \"Not enough tiles\");\r\n\r\n      tilesInstance.spend(msg.sender, paymentRequiredOnTiles);\r\n    }\r\n\r\n    if(totalAmounts > 0){\r\n      _furnituresBought[msg.sender] += totalAmounts;\r\n    }\r\n\r\n    _mintBatch(msg.sender, ids, amounts, \"\");\r\n  }","after":"function mintBatchFurnitures(uint256[] calldata ids, uint256[] calldata amounts) public payable {\r\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n    uint256 totalAmounts = 0;\r\n    uint256 paymentRequiredOnEther = 0;\r\n    uint256 paymentRequiredOnTiles = 0;\r\n\r\n    for (uint i = 0; i < ids.length; i++) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n\r\n      require(amount > 0, \"amount cannot be 0\");\r\n\r\n      if(_furnitures[id].saveFirstBuyerMaxTimestampAllowed > 0 && block.timestamp < _furnitures[id].saveFirstBuyerMaxTimestampAllowed){\r\n        totalAmounts += amount;\r\n      }\r\n\r\n      require(_furnitures[id].totalSupply + amount <= _furnitures[id].maxSupply, \"Exceeds MAX_SUPPLY\");\r\n      _furnitures[id].totalSupply += amount;\r\n\r\n      if(_furnitures[id].isPaidWithEther){\r\n        paymentRequiredOnEther += _furnitures[id].price * amount;\r\n      }else{\r\n        paymentRequiredOnTiles += _furnitures[id].price * amount;\r\n      }\r\n    }\r\n\r\n    require(msg.value == paymentRequiredOnEther, \"Ether value sent is not correct\");\r\n\r\n    if(paymentRequiredOnTiles > 0){\r\n      require(tilesInstance.balanceOf(msg.sender) >= paymentRequiredOnTiles, \"Not enough tiles\");\r\n\r\n      tilesInstance.spend(msg.sender, paymentRequiredOnTiles);\r\n    }\r\n\r\n    if(totalAmounts > 0){\r\n      _furnituresBought[msg.sender] += totalAmounts;\r\n    }\r\n\r\n    _mintBatch(msg.sender, ids, amounts, \"\");\r\n  }","contract":"IsotileFurniture","time":0},{"type":"external-function ","before":"function addFurniture(string memory _furnitureUri, uint256 _maxSupply, bool _isPaidWithEther, uint256 _price, uint256 _saveFirstBuyerMaxTimestampAllowed) onlyOwner public {\r\n    uint256 newFurnitureId = _furnitureIds.current();\r\n\r\n    _furnitures[newFurnitureId] = Furniture({\r\n      uri: _furnitureUri,\r\n      maxSupply: _maxSupply,\r\n      isPaidWithEther: _isPaidWithEther,\r\n      price: _price,\r\n      totalSupply: 0,\r\n      saveFirstBuyerMaxTimestampAllowed: _saveFirstBuyerMaxTimestampAllowed\r\n    });\r\n    \r\n    emit FurnitureAdded(newFurnitureId);\r\n\r\n    _furnitureIds.increment();\r\n  }","after":"function addFurniture(string calldata _furnitureUri, uint256 _maxSupply, bool _isPaidWithEther, uint256 _price, uint256 _saveFirstBuyerMaxTimestampAllowed) onlyOwner public {\r\n    uint256 newFurnitureId = _furnitureIds.current();\r\n\r\n    _furnitures[newFurnitureId] = Furniture({\r\n      uri: _furnitureUri,\r\n      maxSupply: _maxSupply,\r\n      isPaidWithEther: _isPaidWithEther,\r\n      price: _price,\r\n      totalSupply: 0,\r\n      saveFirstBuyerMaxTimestampAllowed: _saveFirstBuyerMaxTimestampAllowed\r\n    });\r\n    \r\n    emit FurnitureAdded(newFurnitureId);\r\n\r\n    _furnitureIds.increment();\r\n  }","contract":"IsotileFurniture","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","contract":"IsotileFurniture","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","contract":"IsotileFurniture","time":0}]}
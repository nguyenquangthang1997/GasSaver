{"time":142,"results":[{"type":"de-morgan-condition ","before":"!(from == address(0)) && !(from == owner())","after":"!((from == address(0)) && (from == owner()))","loc":{"start":{"line":1366,"column":12},"end":{"line":1366,"column":54}},"contract":"NFTHelmets","time":0},{"type":"external-function ","before":"function airdrop(address[] memory addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _tokenIds.increment();\n            uint256 id = _tokenIds.current();\n            _safeMint(addrs[i], id);\n        }\n    }","after":"function airdrop(address[] calldata addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _tokenIds.increment();\n            uint256 id = _tokenIds.current();\n            _safeMint(addrs[i], id);\n        }\n    }","contract":"NFTHelmets","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _uri) public onlyOwner {\n        _prefixURI = _uri;\n    }","after":"function setBaseURI(string calldata _uri) public onlyOwner {\n        _prefixURI = _uri;\n    }","contract":"NFTHelmets","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _ext) public onlyOwner {\n        _baseExtension = _ext; \n    }","after":"function setBaseExtension(string calldata _ext) public onlyOwner {\n        _baseExtension = _ext; \n    }","contract":"NFTHelmets","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _whitelist[addrs[i]] = true;\n            _presaleMints[addrs[i]] = 0;\n        }\n    }","after":"function addToWhitelist(address[] calldata addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _whitelist[addrs[i]] = true;\n            _presaleMints[addrs[i]] = 0;\n        }\n    }","contract":"NFTHelmets","time":0},{"type":"external-function ","before":"function removeFromWhitelist(address[] memory addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _whitelist[addrs[i]] = false;\n            _presaleMints[addrs[i]] = 0;\n        }\n    }","after":"function removeFromWhitelist(address[] calldata addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _whitelist[addrs[i]] = false;\n            _presaleMints[addrs[i]] = 0;\n        }\n    }","contract":"NFTHelmets","time":0},{"type":"external-function ","before":"function resetSaleMintsForAddrs(address[] memory addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _saleMints[addrs[i]] = 0;\n        }\n    }","after":"function resetSaleMintsForAddrs(address[] calldata addrs) public onlyOwner {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            _saleMints[addrs[i]] = 0;\n        }\n    }","contract":"NFTHelmets","time":0}]}
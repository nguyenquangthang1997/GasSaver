{"time":251,"results":[{"type":"external-function ","before":"function mint(uint tokenId, address royaltyRecipient, uint royaltyPercentage, string memory _uri) public {\n        _safeMint(msg.sender, tokenId);\n        _setTokenURI(tokenId, _uri);\n        _setTokenRoyalty(tokenId, royaltyRecipient, royaltyPercentage);\n    }","after":"function mint(uint tokenId, address royaltyRecipient, uint royaltyPercentage, string calldata _uri) public {\n        _safeMint(msg.sender, tokenId);\n        _setTokenURI(tokenId, _uri);\n        _setTokenRoyalty(tokenId, royaltyRecipient, royaltyPercentage);\n    }","contract":"NFTToken","time":0},{"type":"external-function ","before":"function mintForSomeoneAndBuy(uint tokenId, address royaltyRecipient, uint royaltyPercentage, string memory _uri, address buyer) public onlyApp {\n        _safeMint(royaltyRecipient, tokenId);\n        _setTokenURI(tokenId, _uri);\n        _setTokenRoyalty(tokenId, royaltyRecipient, royaltyPercentage);\n        _safeTransfer(royaltyRecipient, buyer, tokenId, \"\");\n    }","after":"function mintForSomeoneAndBuy(uint tokenId, address royaltyRecipient, uint royaltyPercentage, string calldata _uri, address buyer) public onlyApp {\n        _safeMint(royaltyRecipient, tokenId);\n        _setTokenURI(tokenId, _uri);\n        _setTokenRoyalty(tokenId, royaltyRecipient, royaltyPercentage);\n        _safeTransfer(royaltyRecipient, buyer, tokenId, \"\");\n    }","contract":"NFTToken","time":0},{"type":"external-function ","before":"function mintAndSell(\n        uint tokenId,\n        address nftContract,\n        address owner,\n        address buyer,\n        uint price,\n        uint extraFee,\n        uint royaltyPercentage,\n        address currency,\n        string memory _uri\n    ) public onlyApp {\n        require(buyer != address(0), \"Buyer cannot be the zero address\");\n        require(owner != address(0), \"Owner cannot be the zero address\");\n        require(price > 0, \"Price should be greater than zero\");\n\n        NFTToken(nftContract).mintForSomeoneAndBuy(tokenId, owner, royaltyPercentage, _uri, buyer);\n\n        _takeFee(tokenId, nftContract, owner, buyer, price, extraFee, currency);\n        emit SaleAwarded(owner, buyer, tokenId);\n    }","after":"function mintAndSell(\n        uint tokenId,\n        address nftContract,\n        address owner,\n        address buyer,\n        uint price,\n        uint extraFee,\n        uint royaltyPercentage,\n        address currency,\n        string calldata _uri\n    ) public onlyApp {\n        require(buyer != address(0), \"Buyer cannot be the zero address\");\n        require(owner != address(0), \"Owner cannot be the zero address\");\n        require(price > 0, \"Price should be greater than zero\");\n\n        NFTToken(nftContract).mintForSomeoneAndBuy(tokenId, owner, royaltyPercentage, _uri, buyer);\n\n        _takeFee(tokenId, nftContract, owner, buyer, price, extraFee, currency);\n        emit SaleAwarded(owner, buyer, tokenId);\n    }","contract":"Operator","time":0}]}
{"time":165,"results":[{"type":"external-function ","before":"function claim(uint256 [] memory _tokenIds) public {\n        require(isSaleActive, \"Sale is not active\");\n        require(isClaimTime(), \"Claim time is finished\");\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            require(KILLAz_ownerOf(_tokenIds[i]) == msg.sender, \"It is possible to claim only corresponding tokens\");\n             if (totalSupply() < maxLadyKILLAz) {\n                _safeMint(msg.sender, _tokenIds[i]);\n            }\n        }\n    }","after":"function claim(uint256 [] calldata _tokenIds) public {\n        require(isSaleActive, \"Sale is not active\");\n        require(isClaimTime(), \"Claim time is finished\");\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            require(KILLAz_ownerOf(_tokenIds[i]) == msg.sender, \"It is possible to claim only corresponding tokens\");\n             if (totalSupply() < maxLadyKILLAz) {\n                _safeMint(msg.sender, _tokenIds[i]);\n            }\n        }\n    }","contract":"LadyKILLAz","time":0},{"type":"external-function ","before":"function buy(uint256 [] memory _tokenIds) public payable {\n        require(isSaleActive, \"Sale is not active\");\n        require(!isClaimTime(), \"The purchase of tokens will be possible after claim time\");\n        require(_tokenIds.length <= maxPerTx, \"No more than 5 tokens per transaction\");\n        require(totalSupply().add(_tokenIds.length) <= maxLadyKILLAz, \"Purchase would exceed max supply of Lady KILLAz\");\n        require(pricePerLadyKILLA.mul(_tokenIds.length) == msg.value, \"Ether value is not correct\");\n\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            require(_tokenIds[i] < maxLadyKILLAz);\n            if (totalSupply() < maxLadyKILLAz) {\n                _safeMint(msg.sender, _tokenIds[i]);\n            }\n        }\n\n        payable(owner()).transfer(msg.value);\n    }","after":"function buy(uint256 [] calldata _tokenIds) public payable {\n        require(isSaleActive, \"Sale is not active\");\n        require(!isClaimTime(), \"The purchase of tokens will be possible after claim time\");\n        require(_tokenIds.length <= maxPerTx, \"No more than 5 tokens per transaction\");\n        require(totalSupply().add(_tokenIds.length) <= maxLadyKILLAz, \"Purchase would exceed max supply of Lady KILLAz\");\n        require(pricePerLadyKILLA.mul(_tokenIds.length) == msg.value, \"Ether value is not correct\");\n\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            require(_tokenIds[i] < maxLadyKILLAz);\n            if (totalSupply() < maxLadyKILLAz) {\n                _safeMint(msg.sender, _tokenIds[i]);\n            }\n        }\n\n        payable(owner()).transfer(msg.value);\n    }","contract":"LadyKILLAz","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","contract":"LadyKILLAz","time":0}]}
{"time":126,"results":[{"type":"state-data-arrangement ","before":"\nbool public saleIsActive = false;\nuint public activeBadgeId = 1;\nuint public maxPerTransaction = 2;\nuint public maxPerWallet = 2;\nuint public maxSupply = 1069;\nuint public constant NUMBER_RESERVED_TOKENS = 69;\nuint256 public constant PRICE = 250000000000000000;\nuint public reservedTokensMinted = 0;\nstring public contractURIstr = \"\";\naddress payable private recipient1 = payable(0xEa26D01590689361709E709387bebff958cFDbf0);","after":"uint public activeBadgeId = 1;\nuint public maxPerTransaction = 2;\nuint public maxPerWallet = 2;\nuint public maxSupply = 1069;\nuint public constant NUMBER_RESERVED_TOKENS = 69;\nuint256 public constant PRICE = 250000000000000000;\nuint public reservedTokensMinted = 0;\nstring public contractURIstr = \"\";\naddress payable private recipient1 = payable(0xEa26D01590689361709E709387bebff958cFDbf0);\nbool public saleIsActive = false;\n","contract":"PlugPass","time":0},{"type":"external-function ","before":"function setContractURI(string memory newuri) external onlyOwner\n    {\n       contractURIstr = newuri;\n    }","after":"function setContractURI(string calldata newuri) external onlyOwner\n    {\n       contractURIstr = newuri;\n    }","contract":"PlugPass","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) external onlyOwner \n    {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) external onlyOwner \n    {\n        _setURI(newuri);\n    }","contract":"PlugPass","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"PlugPass","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"PlugPass","time":0},{"type":"constant-restrict-modification  ","before":"address payable private recipient1 = payable(0xEa26D01590689361709E709387bebff958cFDbf0);","after":"address payable private constant recipient1 = payable(0xEa26D01590689361709E709387bebff958cFDbf0);","contract":"PlugPass","time":1}]}
{"time":122,"results":[{"type":"external-function ","before":"function startParty(\n        address _marketWrapper,\n        address _nftContract,\n        uint256 _tokenId,\n        uint256 _auctionId,\n        Structs.AddressAndAmount calldata _split,\n        Structs.AddressAndAmount calldata _tokenGate,\n        string memory _name,\n        string memory _symbol\n    ) external returns (address partyBidProxy) {\n        bytes memory _initializationCalldata =\n            abi.encodeWithSelector(\n                PartyBid.initialize.selector,\n                _marketWrapper,\n                _nftContract,\n                _tokenId,\n                _auctionId,\n                _split,\n                _tokenGate,\n                _name,\n                _symbol\n            );\n\n        partyBidProxy = address(\n            new InitializedProxy(\n                logic,\n                _initializationCalldata\n            )\n        );\n\n        deployedAt[partyBidProxy] = block.number;\n\n        emit PartyBidDeployed(\n            partyBidProxy,\n            msg.sender,\n            _nftContract,\n            _tokenId,\n            _marketWrapper,\n            _auctionId,\n            _split.addr,\n            _split.amount,\n            _tokenGate.addr,\n            _tokenGate.amount,\n            _name,\n            _symbol\n        );\n    }","after":"function startParty(\n        address _marketWrapper,\n        address _nftContract,\n        uint256 _tokenId,\n        uint256 _auctionId,\n        Structs.AddressAndAmount calldata _split,\n        Structs.AddressAndAmount calldata _tokenGate,\n        string calldata _name,\n        string calldata _symbol\n    ) external returns (address partyBidProxy) {\n        bytes memory _initializationCalldata =\n            abi.encodeWithSelector(\n                PartyBid.initialize.selector,\n                _marketWrapper,\n                _nftContract,\n                _tokenId,\n                _auctionId,\n                _split,\n                _tokenGate,\n                _name,\n                _symbol\n            );\n\n        partyBidProxy = address(\n            new InitializedProxy(\n                logic,\n                _initializationCalldata\n            )\n        );\n\n        deployedAt[partyBidProxy] = block.number;\n\n        emit PartyBidDeployed(\n            partyBidProxy,\n            msg.sender,\n            _nftContract,\n            _tokenId,\n            _marketWrapper,\n            _auctionId,\n            _split.addr,\n            _split.amount,\n            _tokenGate.addr,\n            _tokenGate.amount,\n            _name,\n            _symbol\n        );\n    }","contract":"PartyBidFactory","time":0},{"type":"external-function ","before":"function initialize(\n        address _marketWrapper,\n        address _nftContract,\n        uint256 _tokenId,\n        uint256 _auctionId,\n        Structs.AddressAndAmount calldata _split,\n        Structs.AddressAndAmount calldata _tokenGate,\n        string memory _name,\n        string memory _symbol\n    ) external initializer {\n        // validate auction exists\n        require(\n            IMarketWrapper(_marketWrapper).auctionIdMatchesToken(\n                _auctionId,\n                _nftContract,\n                _tokenId\n            ),\n            \"PartyBid::initialize: auctionId doesn't match token\"\n        );\n        // initialize & validate shared Party variables\n        __Party_init(_nftContract, _tokenId, _split, _tokenGate, _name, _symbol);\n        // set PartyBid-specific state variables\n        marketWrapper = IMarketWrapper(_marketWrapper);\n        auctionId = _auctionId;\n    }","after":"function initialize(\n        address _marketWrapper,\n        address _nftContract,\n        uint256 _tokenId,\n        uint256 _auctionId,\n        Structs.AddressAndAmount calldata _split,\n        Structs.AddressAndAmount calldata _tokenGate,\n        string calldata _name,\n        string calldata _symbol\n    ) external initializer {\n        // validate auction exists\n        require(\n            IMarketWrapper(_marketWrapper).auctionIdMatchesToken(\n                _auctionId,\n                _nftContract,\n                _tokenId\n            ),\n            \"PartyBid::initialize: auctionId doesn't match token\"\n        );\n        // initialize & validate shared Party variables\n        __Party_init(_nftContract, _tokenId, _split, _tokenGate, _name, _symbol);\n        // set PartyBid-specific state variables\n        marketWrapper = IMarketWrapper(_marketWrapper);\n        auctionId = _auctionId;\n    }","contract":"PartyBid","time":0},{"type":"external-function ","before":"function emergencyCall(address _contract, bytes memory _calldata)\n        external\n        onlyPartyDAO\n        returns (bool _success, bytes memory _returnData)\n    {\n        (_success, _returnData) = _contract.call(_calldata);\n        require(_success, string(_returnData));\n    }","after":"function emergencyCall(address _contract, bytes calldata _calldata)\n        external\n        onlyPartyDAO\n        returns (bool _success, bytes memory _returnData)\n    {\n        (_success, _returnData) = _contract.call(_calldata);\n        require(_success, string(_returnData));\n    }","contract":"PartyBid","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"PartyBid","time":0}]}
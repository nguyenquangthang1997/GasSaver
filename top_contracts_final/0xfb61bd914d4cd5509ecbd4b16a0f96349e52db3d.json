{"time":152,"results":[{"type":"external-function ","before":"function claimApedTokens(uint256[] memory _tokenIds) public nonReentrant {\n    require(distributionActive);\n    require(_tokenIds.length <= 20, \"Can only claim 20 per tx\");\n\n    uint256 totalClaimable = 0;\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      require(_isApprovedOrOwner(_msgSender(), _tokenIds[i]), \"Token not approved\");\n\n      uint256 amount = getClaimableApedTokens(_tokenIds[i]);\n      totalClaimable += amount;\n      apedTokensClaimedByToken[_tokenIds[i]] += amount;\n    }\n\n    require(totalClaimable > 0, \"Nothing to claim\");\n    IERC20(apedTokenAddress).transfer(_msgSender(), totalClaimable); // Assumes enough APED in the contract\n  }","after":"function claimApedTokens(uint256[] calldata _tokenIds) public nonReentrant {\n    require(distributionActive);\n    require(_tokenIds.length <= 20, \"Can only claim 20 per tx\");\n\n    uint256 totalClaimable = 0;\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      require(_isApprovedOrOwner(_msgSender(), _tokenIds[i]), \"Token not approved\");\n\n      uint256 amount = getClaimableApedTokens(_tokenIds[i]);\n      totalClaimable += amount;\n      apedTokensClaimedByToken[_tokenIds[i]] += amount;\n    }\n\n    require(totalClaimable > 0, \"Nothing to claim\");\n    IERC20(apedTokenAddress).transfer(_msgSender(), totalClaimable); // Assumes enough APED in the contract\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setTokenTiers(uint256[] memory _tokenIds, uint8 _tier) public onlyOwner {\n    require(_tier <= 2); // Only three possible tiers\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      tokenTier[_tokenIds[i]] = _tier;\n    }\n  }","after":"function setTokenTiers(uint256[] calldata _tokenIds, uint8 _tier) public onlyOwner {\n    require(_tier <= 2); // Only three possible tiers\n    for (uint8 i = 0; i < _tokenIds.length; i++) {\n      tokenTier[_tokenIds[i]] = _tier;\n    }\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function pushPreMinters(address[] memory _preMinters, uint256 _amount) public onlyOwner {\n    for(uint8 i = 0; i < _preMinters.length; i++) {\n      amountPreMintableByAddress[_preMinters[i]] += _amount;\n    }\n  }","after":"function pushPreMinters(address[] calldata _preMinters, uint256 _amount) public onlyOwner {\n    for(uint8 i = 0; i < _preMinters.length; i++) {\n      amountPreMintableByAddress[_preMinters[i]] += _amount;\n    }\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 _tokenId, string memory _tokenURI) public onlyOwner {\n    _setTokenURI(_tokenId, _tokenURI);\n  }","after":"function setTokenURI(uint256 _tokenId, string calldata _tokenURI) public onlyOwner {\n    _setTokenURI(_tokenId, _tokenURI);\n  }","contract":"ApeDaoRemix","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) public onlyOwner {\n    baseURI = baseURI_;\n  }","after":"function setBaseURI(string calldata baseURI_) public onlyOwner {\n    baseURI = baseURI_;\n  }","contract":"ApeDaoRemix","time":0},{"type":"immutable-restrict-modification ","before":"address public apedTokenAddress;","after":"address public immutable apedTokenAddress;","contract":"ApeDaoRemix","time":1}]}
{"time":96,"results":[{"type":"external-function ","before":"function batchFundReleaseSchedule(\n        address[] memory recipients,\n        uint[] memory amounts,\n        uint[] memory commencementTimestamps, // unix timestamp\n        uint[] memory scheduleIds\n    ) external returns (bool) {\n        require(amounts.length == recipients.length, \"mismatched array length\");\n        for (uint i; i < recipients.length; i++) {\n            require(fundReleaseSchedule(recipients[i], amounts[i], commencementTimestamps[i], scheduleIds[i]));\n        }\n\n        return true;\n    }","after":"function batchFundReleaseSchedule(\n        address[] calldata recipients,\n        uint[] calldata amounts,\n        uint[] calldata commencementTimestamps, // unix timestamp\n        uint[] calldata scheduleIds\n    ) external returns (bool) {\n        require(amounts.length == recipients.length, \"mismatched array length\");\n        for (uint i; i < recipients.length; i++) {\n            require(fundReleaseSchedule(recipients[i], amounts[i], commencementTimestamps[i], scheduleIds[i]));\n        }\n\n        return true;\n    }","contract":"TokenLockup","time":0},{"type":"immutable-restrict-modification ","before":"uint public minReleaseScheduleAmount;","after":"uint public immutable minReleaseScheduleAmount;","contract":"TokenLockup","time":0},{"type":"immutable-restrict-modification ","before":"uint public maxReleaseDelay;","after":"uint public immutable maxReleaseDelay;","contract":"TokenLockup","time":0}]}
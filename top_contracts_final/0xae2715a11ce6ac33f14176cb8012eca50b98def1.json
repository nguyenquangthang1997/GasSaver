{"time":114,"results":[{"type":"external-function ","before":"function whitelistMint(uint amount, uint totalAllocation, bytes32 leaf, bytes32[] memory proof) external payable {\n        // Create storage element tracking user mints if this is the first mint for them\n        if (!whitelistUsed[msg.sender]) {        \n            // Verify that (msg.sender, amount) correspond to Merkle leaf\n            require(keccak256(abi.encodePacked(msg.sender, totalAllocation)) == leaf, \"Sender and amount don't match Merkle leaf\");\n\n            // Verify that (leaf, proof) matches the Merkle root\n            require(verify(merkleRoot, leaf, proof), \"Not a valid leaf in the Merkle tree\");\n\n            whitelistUsed[msg.sender] = true;\n            whitelistRemaining[msg.sender] = totalAllocation;\n        }\n\n        // Require nonzero amount\n        require(amount > 0, \"Can't mint zero\");\n\n        // Check proper amount sent\n        require(msg.value == amount * preMintPrice, \"Send proper ETH amount\");\n\n        require(whitelistRemaining[msg.sender] >= amount, \"Can't mint more than remaining allocation\");\n\n        whitelistRemaining[msg.sender] -= amount;\n        _mintWithoutValidation(msg.sender, amount, false);\n    }","after":"function whitelistMint(uint amount, uint totalAllocation, bytes32 leaf, bytes32[] calldata proof) external payable {\n        // Create storage element tracking user mints if this is the first mint for them\n        if (!whitelistUsed[msg.sender]) {        \n            // Verify that (msg.sender, amount) correspond to Merkle leaf\n            require(keccak256(abi.encodePacked(msg.sender, totalAllocation)) == leaf, \"Sender and amount don't match Merkle leaf\");\n\n            // Verify that (leaf, proof) matches the Merkle root\n            require(verify(merkleRoot, leaf, proof), \"Not a valid leaf in the Merkle tree\");\n\n            whitelistUsed[msg.sender] = true;\n            whitelistRemaining[msg.sender] = totalAllocation;\n        }\n\n        // Require nonzero amount\n        require(amount > 0, \"Can't mint zero\");\n\n        // Check proper amount sent\n        require(msg.value == amount * preMintPrice, \"Send proper ETH amount\");\n\n        require(whitelistRemaining[msg.sender] >= amount, \"Can't mint more than remaining allocation\");\n\n        whitelistRemaining[msg.sender] -= amount;\n        _mintWithoutValidation(msg.sender, amount, false);\n    }","contract":"ArkAngels","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory __baseTokenURI) public onlyOwner {\n        _baseTokenURI = __baseTokenURI;\n    }","after":"function setBaseTokenURI(string calldata __baseTokenURI) public onlyOwner {\n        _baseTokenURI = __baseTokenURI;\n    }","contract":"ArkAngels","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxItemsPerTx = 10;","after":"uint public constant maxItemsPerTx = 10;","contract":"ArkAngels","time":0}]}
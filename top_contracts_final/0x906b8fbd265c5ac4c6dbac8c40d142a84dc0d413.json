{"time":134,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\naddress constant internal NULL_ADDR = address(0);\nstring private constant ERR = \"ERC1155Base\";\nstring public name;\nstring public symbol;\naddress private immutable _proxyRegistry;\naddress private immutable _initializer;\nmapping (address => mapping(uint256 => uint256)) internal balances;\nmapping (address => mapping(address => bool)) internal operators;\nuint256 private _maxTxMint;\nuint256 private _cap;\nuint256 private _tokenPrice;\nuint256 private _currentTokenId;\nuint256 mintAllowed;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;","after":"string private constant ERR = \"ERC1155Base\";\nstring public name;\nstring public symbol;\nmapping (address => mapping(uint256 => uint256)) internal balances;\nmapping (address => mapping(address => bool)) internal operators;\nuint256 private _maxTxMint;\nuint256 private _cap;\nuint256 private _tokenPrice;\nuint256 private _currentTokenId;\nuint256 mintAllowed;\naddress constant internal NULL_ADDR = address(0);\naddress private immutable _proxyRegistry;\naddress private immutable _initializer;\nbytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nbytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n","contract":"ERC1155Base","time":1},{"type":"external-function ","before":"function initialize(\n    address owner_,\n    string memory name_,\n    string memory symbol_\n   ) external\n  {\n    require(msg.sender == _initializer, ERR);\n\n    _transferOwnership(owner_);\n    name = name_;\n    symbol = symbol_;\n\n    // Mint our first token\n    balances[owner_][0] = 1;\n    emit TransferSingle(msg.sender, NULL_ADDR, owner(), 0, 1);\n  }","after":"function initialize(\n    address owner_,\n    string calldata name_,\n    string calldata symbol_\n   ) external\n  {\n    require(msg.sender == _initializer, ERR);\n\n    _transferOwnership(owner_);\n    name = name_;\n    symbol = symbol_;\n\n    // Mint our first token\n    balances[owner_][0] = 1;\n    emit TransferSingle(msg.sender, NULL_ADDR, owner(), 0, 1);\n  }","contract":"ERC1155Base","time":0},{"type":"external-function ","before":"function initialize(\n    address owner_,\n    string memory name_,\n    string memory symbol_,\n    uint256 cap_,\n    uint256 maxPerTx_,\n    uint256 price_) external\n  {\n    require(msg.sender == _initializer, ERR);\n\n    _transferOwnership(owner_);\n\n    name = name_;\n    symbol = symbol_;\n    _cap = cap_;\n    _maxTxMint = maxPerTx_;\n    _tokenPrice = price_;\n    // Mint our first token\n    balances[owner_][0] = 1;\n    _currentTokenId = 1;\n    mintAllowed = 1;\n    emit TransferSingle(msg.sender, NULL_ADDR, owner_, 0, 1);\n  }","after":"function initialize(\n    address owner_,\n    string calldata name_,\n    string calldata symbol_,\n    uint256 cap_,\n    uint256 maxPerTx_,\n    uint256 price_) external\n  {\n    require(msg.sender == _initializer, ERR);\n\n    _transferOwnership(owner_);\n\n    name = name_;\n    symbol = symbol_;\n    _cap = cap_;\n    _maxTxMint = maxPerTx_;\n    _tokenPrice = price_;\n    // Mint our first token\n    balances[owner_][0] = 1;\n    _currentTokenId = 1;\n    mintAllowed = 1;\n    emit TransferSingle(msg.sender, NULL_ADDR, owner_, 0, 1);\n  }","contract":"ERC1155Base","time":0},{"type":"external-function ","before":"function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\n    external override\n  {\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), ERR);\n    require(_to != address(0), ERR);\n \n    _safeTransferFrom(_from, _to, _id, _amount);\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\n  }","after":"function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data)\n    external override\n  {\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), ERR);\n    require(_to != address(0), ERR);\n \n    _safeTransferFrom(_from, _to, _id, _amount);\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\n  }","contract":"ERC1155Base","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\n    external override\n  {\n    // Requirements\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), ERR);\n    require(_to != address(0), ERR);\n\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n  }","after":"function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data)\n    external override\n  {\n    // Requirements\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), ERR);\n    require(_to != address(0), ERR);\n\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n  }","contract":"ERC1155Base","time":0},{"type":"external-function ","before":"function setBaseMetadataURI(string memory _newBaseMetadataURI) external onlyOwner {\n    _setBaseMetadataURI(_newBaseMetadataURI);\n  }","after":"function setBaseMetadataURI(string calldata _newBaseMetadataURI) external onlyOwner {\n    _setBaseMetadataURI(_newBaseMetadataURI);\n  }","contract":"ERC1155Base","time":0}]}
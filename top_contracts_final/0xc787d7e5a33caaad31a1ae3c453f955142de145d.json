{"time":181,"results":[{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        hero_PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        hero_PROVENANCE = provenanceHash;\n    }","contract":"theAdventurerscontract","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","contract":"theAdventurerscontract","time":0},{"type":"external-function ","before":"function reroll(uint _tokenId, string memory  _internaltokenID) public payable {\n    require(saleIsActive, \"Sale must be active to reroll\");\n    require(_tokenId <= totalSupply(), \"Purchase would exceed max supply of heros\");\n    require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this hero!\");\n    require(Rerolltimes[_tokenId] < maxReroll, \"Hey, this token has more than 3 reroll!\");\n\n    Rerolltimes[_tokenId] = Rerolltimes[_tokenId] + 1;\n    minternaltokenid[_tokenId] = _internaltokenID;\n    emit heroInternaltokenidChange(msg.sender, _tokenId, _internaltokenID);\n    \n    _burn(_tokenId);\n    _safeMint(msg.sender, _tokenId);\n\n  }","after":"function reroll(uint _tokenId, string calldata  _internaltokenID) public payable {\n    require(saleIsActive, \"Sale must be active to reroll\");\n    require(_tokenId <= totalSupply(), \"Purchase would exceed max supply of heros\");\n    require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this hero!\");\n    require(Rerolltimes[_tokenId] < maxReroll, \"Hey, this token has more than 3 reroll!\");\n\n    Rerolltimes[_tokenId] = Rerolltimes[_tokenId] + 1;\n    minternaltokenid[_tokenId] = _internaltokenID;\n    emit heroInternaltokenidChange(msg.sender, _tokenId, _internaltokenID);\n    \n    _burn(_tokenId);\n    _safeMint(msg.sender, _tokenId);\n\n  }","contract":"theAdventurerscontract","time":0},{"type":"external-function ","before":"function setinternaltokenID(uint _tokenId, string memory  _internaltokenID) public onlyOwner {\n    require(_tokenId <= totalSupply(), \"ID would exceed max supply of heros\");\n    minternaltokenid[_tokenId] = _internaltokenID;\n    emit heroInternaltokenidChange(msg.sender,  _tokenId, _internaltokenID);\n  }","after":"function setinternaltokenID(uint _tokenId, string calldata  _internaltokenID) public onlyOwner {\n    require(_tokenId <= totalSupply(), \"ID would exceed max supply of heros\");\n    minternaltokenid[_tokenId] = _internaltokenID;\n    emit heroInternaltokenidChange(msg.sender,  _tokenId, _internaltokenID);\n  }","contract":"theAdventurerscontract","time":0},{"type":"external-function ","before":"function changeheroName(uint _tokenId, string memory _name) public {\n        require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this hero!\");\n        require(sha256(bytes(_name)) != sha256(bytes(heroNames[_tokenId])), \"New name is same as the current one\");\n        heroNames[_tokenId] = _name;\n        \n        emit heroNameChange(msg.sender, _tokenId, _name);\n        \n    }","after":"function changeheroName(uint _tokenId, string calldata _name) public {\n        require(ownerOf(_tokenId) == msg.sender, \"Hey, your wallet doesn't own this hero!\");\n        require(sha256(bytes(_name)) != sha256(bytes(heroNames[_tokenId])), \"New name is same as the current one\");\n        heroNames[_tokenId] = _name;\n        \n        emit heroNameChange(msg.sender, _tokenId, _name);\n        \n    }","contract":"theAdventurerscontract","time":0}]}
{"time":133,"results":[{"type":"loop-duplication","before":"\nstart line 93 column 8, end line 97 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(_elixirContractInstance.ownerOf(tokenIds[i]) == msg.sender, 'Caller is not owner of the token ID');\n            require(! _claimed[tokenIds[i]] && tokenIds[i] >= startToken, 'This token has already been claimed');\n            _claimed[tokenIds[i]] = true;\n   \nstart line 99 column 8, end line 102 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, _tokenIdCounter.current());\n   ","after":"// merge loop\n\nstart line 93 column 8, end line 97 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(_elixirContractInstance.ownerOf(tokenIds[i]) == msg.sender, 'Caller is not owner of the token ID');\n            require(! _claimed[tokenIds[i]] && tokenIds[i] >= startToken, 'This token has already been claimed');\n            _claimed[tokenIds[i]] = true;\n   \nstart line 99 column 8, end line 102 column 8\n      for (uint256 i = 0; i < tokenIds.length; i++) {\n            _tokenIdCounter.increment();\n            _safeMint(msg.sender, _tokenIdCounter.current());\n   ","contract":"LeadersFund","time":0},{"type":"external-function ","before":"\n\n    function setBaseURI(string memory newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;","after":"\n\n    function setBaseURI(string calldata newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;","contract":"LeadersFund","time":0},{"type":"external-function ","before":"/\n    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        provenance = provenanceHash;","after":"/\n    function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        provenance = provenanceHash;","contract":"LeadersFund","time":0}]}
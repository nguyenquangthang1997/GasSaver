{"time":149,"results":[{"type":"external-function ","before":"function createCollection(\n        string memory _name, \n        string memory _description, \n        string memory _collectionBaseURI, \n        uint128 _tokenPriceInWei, \n        uint32 _maxTokensAvailable,\n        uint32 _collectionNumber\n        ) public onlyOwner\n    {   \n\n        require(!collections[_collectionNumber].created, \"A collection with this collection number already exists\");\n        require(_maxTokensAvailable < ONE_MILLION, \"The maximum number of tokens available per collection must be less than 1 million\");\n        require(_collectionNumber == nextCollectionNumber, \"You are trying to create a collection that doesn't match the nextCollectionNumber\");\n        Collection memory newCollection = Collection({\n            name: _name,\n            description: _description,\n            baseURI: _collectionBaseURI,\n            tokenPriceInWei: _tokenPriceInWei,\n            maxTokensAvailable: _maxTokensAvailable,\n            collectionNumber: _collectionNumber,\n            created: true, \n            locked: false,\n            active: false,\n            tokensMinted: 0\n        });\n        collections[nextCollectionNumber++] = newCollection;\n    }","after":"function createCollection(\n        string calldata _name, \n        string calldata _description, \n        string calldata _collectionBaseURI, \n        uint128 _tokenPriceInWei, \n        uint32 _maxTokensAvailable,\n        uint32 _collectionNumber\n        ) public onlyOwner\n    {   \n\n        require(!collections[_collectionNumber].created, \"A collection with this collection number already exists\");\n        require(_maxTokensAvailable < ONE_MILLION, \"The maximum number of tokens available per collection must be less than 1 million\");\n        require(_collectionNumber == nextCollectionNumber, \"You are trying to create a collection that doesn't match the nextCollectionNumber\");\n        Collection memory newCollection = Collection({\n            name: _name,\n            description: _description,\n            baseURI: _collectionBaseURI,\n            tokenPriceInWei: _tokenPriceInWei,\n            maxTokensAvailable: _maxTokensAvailable,\n            collectionNumber: _collectionNumber,\n            created: true, \n            locked: false,\n            active: false,\n            tokensMinted: 0\n        });\n        collections[nextCollectionNumber++] = newCollection;\n    }","contract":"Treeverse","time":0},{"type":"external-function ","before":"function changeName(uint256 _collectionNumber, string memory _name) public onlyOwner ifCollectionExists(_collectionNumber) ifCollectionNotLocked(_collectionNumber)  {\n        collections[_collectionNumber].name = _name;\n    }","after":"function changeName(uint256 _collectionNumber, string calldata _name) public onlyOwner ifCollectionExists(_collectionNumber) ifCollectionNotLocked(_collectionNumber)  {\n        collections[_collectionNumber].name = _name;\n    }","contract":"Treeverse","time":0},{"type":"external-function ","before":"function changeDescription(uint256 _collectionNumber, string memory _description) public onlyOwner ifCollectionExists(_collectionNumber) ifCollectionNotLocked(_collectionNumber) {\n        collections[_collectionNumber].description = _description;\n    }","after":"function changeDescription(uint256 _collectionNumber, string calldata _description) public onlyOwner ifCollectionExists(_collectionNumber) ifCollectionNotLocked(_collectionNumber) {\n        collections[_collectionNumber].description = _description;\n    }","contract":"Treeverse","time":0},{"type":"external-function ","before":"function changeBaseURI(uint256 _collectionNumber, string memory _collectionBaseURI) public onlyOwner ifCollectionExists(_collectionNumber)  ifCollectionNotLocked(_collectionNumber){\n        collections[_collectionNumber].baseURI = _collectionBaseURI;\n    }","after":"function changeBaseURI(uint256 _collectionNumber, string calldata _collectionBaseURI) public onlyOwner ifCollectionExists(_collectionNumber)  ifCollectionNotLocked(_collectionNumber){\n        collections[_collectionNumber].baseURI = _collectionBaseURI;\n    }","contract":"Treeverse","time":0},{"type":"external-function ","before":"function changeCustomURI(string memory _newUri) public onlyOwner {\n        customURI = _newUri;\n    }","after":"function changeCustomURI(string calldata _newUri) public onlyOwner {\n        customURI = _newUri;\n    }","contract":"Treeverse","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public nextCollectionNumber = 1;","after":"uint256 public constant nextCollectionNumber = 1;","contract":"Treeverse","time":0}]}
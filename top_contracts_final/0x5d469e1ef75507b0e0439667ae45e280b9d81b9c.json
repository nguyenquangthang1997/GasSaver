{"time":146,"results":[{"type":"state-data-arrangement ","before":"\nide onlyGovernor {\n    sequencer = _sequencer;\n    emit SequencerAddressSet(\nuencer);\n  }\n}\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ni\nrt '../../interfaces/utils/IGovernable.sol';\n\nabstr\n contract Governable is IGovernable {\n  a\ness public override governor;\n  addr\n public override pendingGovernor;\n\n  constructor(address _governor) {\n    if (_gove\nr == address(0)) revert ZeroAddress();\n    governor = _governor;\n  }\n\n  functio\netPendingGovernor(address _pendingGovernor) external override onlyGovernor {\n   \n (_pendingGovernor == address(0)) re\nt ZeroAddress();\n    pendingGovernor =","after":"rt '../../interfaces/utils/IGovernable.sol';\n\nabstr\n contract Governable is IGovernable {\n  a\ness public override governor;\n  addr\n (_pendingGovernor == address(0)) re\nide onlyGovernor {\n    sequencer = _sequencer;\n    emit SequencerAddressSet(\nuencer);\n  }\n}\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\ni\n public override pendingGovernor;\n\n  constructor(address _governor) {\n    if (_gove\nr == address(0)) revert ZeroAddress();\n    governor = _governor;\n  }\n\n  functio\netPendingGovernor(address _pendingGovernor) external override onlyGovernor {\n   \nt ZeroAddress();\n    pendingGovernor =\n","contract":"Keep3rJob","time":0}]}
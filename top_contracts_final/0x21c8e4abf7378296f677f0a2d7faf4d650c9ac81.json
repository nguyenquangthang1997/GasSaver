{"time":170,"results":[{"type":"external-function ","before":"function updateHashForIndex(uint8 idx, string memory str) \n\t\tpublic isSquad hashIndexInRange(idx)\n\t{\n\t\tboxHashes[idx] = str;\n\t}","after":"function updateHashForIndex(uint8 idx, string calldata str) \n\t\tpublic isSquad hashIndexInRange(idx)\n\t{\n\t\tboxHashes[idx] = str;\n\t}","contract":"JuiceBox","time":0},{"type":"external-function ","before":"function mintWithHash(address to, string memory hash) public isSquad returns (uint256 tid)\n    {\n    \ttid = _mintInternal(to);\n    \t_tokenToHash[tid] = hash;\n    }","after":"function mintWithHash(address to, string calldata hash) public isSquad returns (uint256 tid)\n    {\n    \ttid = _mintInternal(to);\n    \t_tokenToHash[tid] = hash;\n    }","contract":"JuiceBox","time":0},{"type":"external-function ","before":"function claim(address to, uint8 numPlugs, string memory secret) public \n    \tboxAvailable whitelistEnabled onlyWhitelist(to) saleActive\n    \treturns (uint256 tid, string memory hash)\n    {\n    \trequire(!_boxHolders[to], \"JuiceBox: cannot claim more than 1\");\n    \trequire(!_isContract(to), \"JuiceBox: silly rabbit :P\");\n    \trequire(_stringsEqual(secret, _getSecret()), \"JuiceBox: silly rabbit :P\");\n\n    \ttid = _mintInternal(to);\n    \thash = _assignHash(tid, numPlugs);\n    }","after":"function claim(address to, uint8 numPlugs, string calldata secret) public \n    \tboxAvailable whitelistEnabled onlyWhitelist(to) saleActive\n    \treturns (uint256 tid, string memory hash)\n    {\n    \trequire(!_boxHolders[to], \"JuiceBox: cannot claim more than 1\");\n    \trequire(!_isContract(to), \"JuiceBox: silly rabbit :P\");\n    \trequire(_stringsEqual(secret, _getSecret()), \"JuiceBox: silly rabbit :P\");\n\n    \ttid = _mintInternal(to);\n    \thash = _assignHash(tid, numPlugs);\n    }","contract":"JuiceBox","time":0},{"type":"external-function ","before":"function updateContractUri(string memory updatedContractUri) public isSquad\n\t{\n        _contractUri = updatedContractUri;\n    }","after":"function updateContractUri(string calldata updatedContractUri) public isSquad\n\t{\n        _contractUri = updatedContractUri;\n    }","contract":"JuiceBox","time":0},{"type":"external-function ","before":"function bulkAddToWhitelist(address[] memory addresses) public isSquad\n\t{\n\t\tuint addrLen = addresses.length;\n\n\t\trequire(addrLen > 1, \"Whitelistable: use `addToWhitelist` instead\");\n\t\trequire(addrLen < 65536, \"Whitelistable: cannot add more than 65535 at once\");\n\n\t\tuint16 i;\n\t\tfor (i = 0; i < addrLen; i++) {\n\t\t\tif (!isWhitelisted(addresses[i])) {\n\t\t\t\t_whitelist[addresses[i]] = true;\n\t\t\t}\n\t\t}\n\t}","after":"function bulkAddToWhitelist(address[] calldata addresses) public isSquad\n\t{\n\t\tuint addrLen = addresses.length;\n\n\t\trequire(addrLen > 1, \"Whitelistable: use `addToWhitelist` instead\");\n\t\trequire(addrLen < 65536, \"Whitelistable: cannot add more than 65535 at once\");\n\n\t\tuint16 i;\n\t\tfor (i = 0; i < addrLen; i++) {\n\t\t\tif (!isWhitelisted(addresses[i])) {\n\t\t\t\t_whitelist[addresses[i]] = true;\n\t\t\t}\n\t\t}\n\t}","contract":"JuiceBox","time":0},{"type":"immutable-restrict-modification ","before":"address public payoutAddress;","after":"address public immutable payoutAddress;","contract":"JuiceBox","time":1}]}
{"time":127,"results":[{"type":"state-data-arrangement ","before":"\n��┃┃╰┫┃━┫┃�\n��┃┃┃┃┃┃╰╮┃╰━╯┃\n��┫╰╯┃╰╯�\n�╰╯┣━━┃\n// ╰\n━━┻╯╰┻━�\n�╰╯╱╰╯╰━┻━━┻\n╰╯╰┻┻╯╰┻━╯╰�\n��━╯╰━┻━━┻━\n┻┻━━┻━━╯\n//       \n                            @shuf\nense-Identifier: MIT\n\n\npragma solidity ^0\n7;\n\nimport \"@openzeppelin/contracts/token/\n721/ERC721.sol\";\nimport \"@openzeppelin/contra\n/access/Ownable.sol\";\nimport \"@openzeppelin/c\nf.sol\";\n\ncontract omgkirby is ERC72\nable public maxSupply = 3000;\n\n  string public \nseURI_EXT;\n  bytes32 public omgHash;\n  bool public publicActive  = false;\n\nool public presaleActive = false;\n  bool public wlActive = false;\n  bo","after":"��┃┃╰┫┃━┫┃�\n��┫╰╯┃╰╯�\n�╰╯┣━━┃\n// ╰\n━━┻╯╰┻━�\n                            @shuf\nense-Identifier: MIT\n\n\npragma solidity ^0\n7;\n\nimport \"@openzeppelin/contracts/token/\n721/ERC721.sol\";\nimport \"@openzeppelin/contra\n/access/Ownable.sol\";\nimport \"@openzeppelin/c\nf.sol\";\n\ncontract omgkirby is ERC72\nable public maxSupply = 3000;\n\n  string public \nseURI_EXT;\n  bytes32 public omgHash;\n  bool public publicActive  = false;\n\nool public presaleActive = false;\n  bool public wlActive = false;\n  bo\n��┃┃┃┃┃┃╰╮┃╰━╯┃\n�╰╯╱╰╯╰━┻━━┻\n╰╯╰┻┻╯╰┻━╯╰�\n��━╯╰━┻━━┻━\n┻┻━━┻━━╯\n//       \n","contract":"omgkirby","time":1},{"type":"external-function ","before":"mint = 0xC79108A7151814A77e1916E61e0d88D5EA935c84;\n  address constant partner = 0x1aBdDC3293Ec0b0909605A1Bc8939cF7E98a4E7a;\n\n  constructor(\n    string memory _name,\n    string memory _symbol\n  ) ERC721(_name, _symbol) {}\n\n  // Events\n  event Mint(address to_, uint256 tokenId_);\n\n  // internal\n  function _baseURI() internal view virtual override returns (string memory) {\n    return baseURI;\n  }\n  function _getTokenId() internal view returns (uint256) {\n      return totalSupply + 1;\n  }\n  function _hashCode(string memory _code) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_code));\n  }\n\n  function presaleMint(string memory _presaleCode) public payable {\n    require(presaleActive, \"Sale has not sta","after":"mint = 0xC79108A7151814A77e1916E61e0d88D5EA935c84;\n  address constant partner = 0x1aBdDC3293Ec0b0909605A1Bc8939cF7E98a4E7a;\n\n  constructor(\n    string memory _name,\n    string memory _symbol\n  ) ERC721(_name, _symbol) {}\n\n  // Events\n  event Mint(address to_, uint256 tokenId_);\n\n  // internal\n  function _baseURI() internal view virtual override returns (string memory) {\n    return baseURI;\n  }\n  function _getTokenId() internal view returns (uint256) {\n      return totalSupply + 1;\n  }\n  function _hashCode(string memory _code) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_code));\n  }\n\n  function presaleMint(string memory _presaleCode) public payable {\n    require(presaleActive, \"Sale has not sta","contract":"omgkirby","time":0},{"type":"external-function ","before":"laimAmount; i++) {\n      _mint(msg.sender, _getTokenId());\n      totalSupply++;\n    }\n    teamCl","after":"laimAmount; i++) {\n      _mint(msg.sender, _getTokenId());\n      totalSupply++;\n    }\n    teamCl","contract":"omgkirby","time":0},{"type":"external-function ","before":"d = true;\n  }\n\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string m","after":"d = true;\n  }\n\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string m","contract":"omgkirby","time":0},{"type":"constant-restrict-modification  ","before":"��┃┃┃┃┃┃╰╮┃╰━╯┃","after":"��┃┃┃┃┃┃╰╮┃╰━╯┃","contract":"omgkirby","time":0}]}
{"time":780,"results":[{"type":"constant-restrict-modification  ","before":"bytes32 immutable MINTER_ROLE = bytes32(keccak256(\"MINTER_ROLE\"));","after":"bytes32 immutable constant MINTER_ROLE = bytes32(keccak256(\"MINTER_ROLE\"));","contract":"Escrow","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 immutable MATIC_MINTER_ROLE =\n        bytes32(keccak256(\"MATIC_MINTER_ROLE\"));","after":"bytes32 immutable constant MATIC_MINTER_ROLE =\n        bytes32(keccak256(\"MATIC_MINTER_ROLE\"));","contract":"Escrow","time":0},{"type":"constant-restrict-modification  ","before":"bytes internal personalSignPrefix = \"\\x19Ethereum Signed Message:\\n\";","after":"bytes internal constant personalSignPrefix = \"\\x19Ethereum Signed Message:\\n\";","contract":"Escrow","time":0},{"type":"external-function ","before":"function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amount_\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(available > ids.length, \"Sold Out\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!(soldCards.contains(ids[i])), \"This card already sold\");\n        }\n\n        _mintBatch(to, ids, amount_, \"\");\n\n        available -= ids.length;\n        sold += ids.length;\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            soldCards.add(ids[i]);\n        }\n    }","after":"function mintBatch(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amount_\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(available > ids.length, \"Sold Out\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!(soldCards.contains(ids[i])), \"This card already sold\");\n        }\n\n        _mintBatch(to, ids, amount_, \"\");\n\n        available -= ids.length;\n        sold += ids.length;\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            soldCards.add(ids[i]);\n        }\n    }","contract":"CollectionV2","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"CollectionV2","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"CollectionV2","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public percent;","after":"uint256 public immutable percent;","contract":"CollectionV2","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public total;","after":"uint256 public immutable total;","contract":"CollectionV2","time":0},{"type":"immutable-restrict-modification ","before":"address public facAddress;","after":"address public immutable facAddress;","contract":"CollectionV2","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public limit = 10000 ether;","after":"uint256 public constant limit = 10000 ether;","contract":"FarmV2","time":0},{"type":"external-function ","before":"function redeem(\n        address collection,\n        address _token,\n        address[] memory payees,\n        uint256[] memory sharePerc_\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(payees.length > 0, \"redeem: no payees\");\n        require(payees.length == sharePerc_.length, \"redeem: no payees\");\n\n        _totalCllcAmnt = collectionMoney[collection];\n\n        require(_totalCllcAmnt > 0, \"redeem: insufficient funds\");\n\n        uint256 totalShareAmount;\n\n        for (uint256 i = 0; i < sharePerc_.length; i++) {\n            totalShareAmount = totalShareAmount.add(\n                getAmountPer(_totalCllcAmnt, sharePerc_[i])\n            );\n        }\n\n        require(\n            _totalCllcAmnt >= totalShareAmount,\n            \"redeem: the total amount in the contract must be equal to or greater than the amount to be withdraw\"\n        );\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], sharePerc_[i], collection, _token);\n        }\n    }","after":"function redeem(\n        address collection,\n        address _token,\n        address[] calldata payees,\n        uint256[] calldata sharePerc_\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(payees.length > 0, \"redeem: no payees\");\n        require(payees.length == sharePerc_.length, \"redeem: no payees\");\n\n        _totalCllcAmnt = collectionMoney[collection];\n\n        require(_totalCllcAmnt > 0, \"redeem: insufficient funds\");\n\n        uint256 totalShareAmount;\n\n        for (uint256 i = 0; i < sharePerc_.length; i++) {\n            totalShareAmount = totalShareAmount.add(\n                getAmountPer(_totalCllcAmnt, sharePerc_[i])\n            );\n        }\n\n        require(\n            _totalCllcAmnt >= totalShareAmount,\n            \"redeem: the total amount in the contract must be equal to or greater than the amount to be withdraw\"\n        );\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], sharePerc_[i], collection, _token);\n        }\n    }","contract":"MoneyHandler","time":0}]}
{"time":124,"results":[{"type":"external-function ","before":"function propose(address _executor, string memory _hash) public {\n        require(votesOf(msg.sender) > newProposalMinimum, \"ERR_INSUFFICIENT_STAKE\");\n\n        uint256 id = proposalCount;\n\n        // increment proposal count so next proposal gets the next higher id\n        proposalCount = proposalCount.add(1);\n\n        // create new proposal\n        Proposal memory proposal = Proposal({\n            id: id,\n            proposer: msg.sender,\n            totalVotesFor: 0,\n            totalVotesAgainst: 0,\n            start: block.timestamp,\n            end: voteDuration.add(block.timestamp),\n            executor: _executor,\n            hash: _hash,\n            totalAvailableVotes: totalVotes,\n            quorum: 0,\n            quorumRequired: quorum,\n            open: true,\n            executed: false\n        });\n\n        proposals[id] = proposal;\n\n        // lock proposer\n        updateVoteLock(proposal.end);\n\n        // emit proposal event\n        emit NewProposal(id, proposal.start, voteDuration, proposal.proposer, proposal.executor);\n    }","after":"function propose(address _executor, string calldata _hash) public {\n        require(votesOf(msg.sender) > newProposalMinimum, \"ERR_INSUFFICIENT_STAKE\");\n\n        uint256 id = proposalCount;\n\n        // increment proposal count so next proposal gets the next higher id\n        proposalCount = proposalCount.add(1);\n\n        // create new proposal\n        Proposal memory proposal = Proposal({\n            id: id,\n            proposer: msg.sender,\n            totalVotesFor: 0,\n            totalVotesAgainst: 0,\n            start: block.timestamp,\n            end: voteDuration.add(block.timestamp),\n            executor: _executor,\n            hash: _hash,\n            totalAvailableVotes: totalVotes,\n            quorum: 0,\n            quorumRequired: quorum,\n            open: true,\n            executed: false\n        });\n\n        proposals[id] = proposal;\n\n        // lock proposer\n        updateVoteLock(proposal.end);\n\n        // emit proposal event\n        emit NewProposal(id, proposal.start, voteDuration, proposal.proposer, proposal.executor);\n    }","contract":"BancorGovernance","time":0}]}
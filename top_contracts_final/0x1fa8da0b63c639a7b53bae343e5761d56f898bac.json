{"time":195,"results":[{"type":"external-function ","before":"function mintLimitedSaleCAT(\n        uint256 _START_MINT_TIMESTAMP, \n        uint256 _STOP_MINT_TIMESTAMP, \n        bytes memory _SIGNATURE\n    )\n        external\n        payable\n        onlyLimitedSale\n        callerIsUser\n    {\n        require(isLimitedSaleEligible(_START_MINT_TIMESTAMP, _STOP_MINT_TIMESTAMP, _SIGNATURE), \"NOT_ELIGIBLE_FOR_LIMITED_SALE\");\n        require(block.timestamp >= _START_MINT_TIMESTAMP && block.timestamp <= _STOP_MINT_TIMESTAMP, \"NOT_ON_LIMITED_SALE_MINTING_TIME\");\n        require(balanceOf(msg.sender) == 0, \"ALREADY_HAVE_CATS_ON_ADDRESS\");\n        require(totalSupply() + 1 <= MAX_CATS_ON_TIER_SALE , \"EXCEEDS_MAX_CLAIMED_NUM_ON_LIMITED_SALE\");\n        require(CAT_PRICE == msg.value, \"SENDING_INVALID_ETHERS\");\n\n        uint256 supply = totalSupply();\n        _safeMint(msg.sender, supply++);\n        \n        emit CATSMinted(msg.sender, 1, supply);\n    }","after":"function mintLimitedSaleCAT(\n        uint256 _START_MINT_TIMESTAMP, \n        uint256 _STOP_MINT_TIMESTAMP, \n        bytes calldata _SIGNATURE\n    )\n        external\n        payable\n        onlyLimitedSale\n        callerIsUser\n    {\n        require(isLimitedSaleEligible(_START_MINT_TIMESTAMP, _STOP_MINT_TIMESTAMP, _SIGNATURE), \"NOT_ELIGIBLE_FOR_LIMITED_SALE\");\n        require(block.timestamp >= _START_MINT_TIMESTAMP && block.timestamp <= _STOP_MINT_TIMESTAMP, \"NOT_ON_LIMITED_SALE_MINTING_TIME\");\n        require(balanceOf(msg.sender) == 0, \"ALREADY_HAVE_CATS_ON_ADDRESS\");\n        require(totalSupply() + 1 <= MAX_CATS_ON_TIER_SALE , \"EXCEEDS_MAX_CLAIMED_NUM_ON_LIMITED_SALE\");\n        require(CAT_PRICE == msg.value, \"SENDING_INVALID_ETHERS\");\n\n        uint256 supply = totalSupply();\n        _safeMint(msg.sender, supply++);\n        \n        emit CATSMinted(msg.sender, 1, supply);\n    }","contract":"MurMurCat","time":0},{"type":"external-function ","before":"function mintWhiteListSaleCATS(\n        uint256 quantity, \n        uint256 _MAX_CLAIMED_ON_WHITELIST_SALE, \n        uint256 _START_MINT_TIMESTAMP, \n        uint256 _STOP_MINT_TIMESTAMP, \n        bytes memory _SIGNATURE\n    )\n        external\n        payable\n        onlyWhiteListSale\n        callerIsUser\n    {\n        require(isWhiteListSaleEligible(_MAX_CLAIMED_ON_WHITELIST_SALE, _START_MINT_TIMESTAMP, _STOP_MINT_TIMESTAMP, _SIGNATURE), \"NOT_ELIGIBLE_FOR_WHITELIST_SALE\");\n        require(block.timestamp >= _START_MINT_TIMESTAMP && block.timestamp <= _STOP_MINT_TIMESTAMP, \"NOT_ON_WHITELIST_SALE_MINTING_TIME\");\n        require(quantity > 0 && whiteListSaleClaimed[ msg.sender ] + quantity <= _MAX_CLAIMED_ON_WHITELIST_SALE, \"EXCEEDS_MAX_CLAIMED_NUM_ON_ADDR_OR_BELOW_ONE\");\n        require(CAT_PRICE * quantity == msg.value, \"SENDING_INVALID_ETHERS\");\n        require(totalSupply() + quantity <= MAX_CATS, \"EXCEEDS_MAX_SUPPLY\");\n\n        uint256 supply = totalSupply();\n\n        for (uint256 i=0; i < quantity; i++) {\n            _safeMint(msg.sender, supply++);\n        }\n        whiteListSaleClaimed[msg.sender] += quantity;\n        \n        emit CATSMinted(msg.sender, quantity, supply);\n    }","after":"function mintWhiteListSaleCATS(\n        uint256 quantity, \n        uint256 _MAX_CLAIMED_ON_WHITELIST_SALE, \n        uint256 _START_MINT_TIMESTAMP, \n        uint256 _STOP_MINT_TIMESTAMP, \n        bytes calldata _SIGNATURE\n    )\n        external\n        payable\n        onlyWhiteListSale\n        callerIsUser\n    {\n        require(isWhiteListSaleEligible(_MAX_CLAIMED_ON_WHITELIST_SALE, _START_MINT_TIMESTAMP, _STOP_MINT_TIMESTAMP, _SIGNATURE), \"NOT_ELIGIBLE_FOR_WHITELIST_SALE\");\n        require(block.timestamp >= _START_MINT_TIMESTAMP && block.timestamp <= _STOP_MINT_TIMESTAMP, \"NOT_ON_WHITELIST_SALE_MINTING_TIME\");\n        require(quantity > 0 && whiteListSaleClaimed[ msg.sender ] + quantity <= _MAX_CLAIMED_ON_WHITELIST_SALE, \"EXCEEDS_MAX_CLAIMED_NUM_ON_ADDR_OR_BELOW_ONE\");\n        require(CAT_PRICE * quantity == msg.value, \"SENDING_INVALID_ETHERS\");\n        require(totalSupply() + quantity <= MAX_CATS, \"EXCEEDS_MAX_SUPPLY\");\n\n        uint256 supply = totalSupply();\n\n        for (uint256 i=0; i < quantity; i++) {\n            _safeMint(msg.sender, supply++);\n        }\n        whiteListSaleClaimed[msg.sender] += quantity;\n        \n        emit CATSMinted(msg.sender, quantity, supply);\n    }","contract":"MurMurCat","time":1},{"type":"external-function ","before":"function ownerClaimCATSId(uint256[] memory id, address addr) external onlyOwner {\n        for(uint256 i = 0 ; i < id.length; i++) {\n            _safeMint(addr, id[i]);\n        }\n    }","after":"function ownerClaimCATSId(uint256[] calldata id, address addr) external onlyOwner {\n        for(uint256 i = 0 ; i < id.length; i++) {\n            _safeMint(addr, id[i]);\n        }\n    }","contract":"MurMurCat","time":0}]}
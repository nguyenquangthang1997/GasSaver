{"time":232,"results":[{"type":"state-data-arrangement ","before":"\nuint256 private constant GS_PRICE = 0.08 ether;\nuint256 private constant GS_PRIVATE_MAX = 3500;\nuint256 private constant GS_SALE_MAX = 3744;\nuint256 private constant GS_AIRDROP = 100;\naddress private constant GS_TEAM = 0xfa5d05Df712B059B74cCeFe4084785BE7f2ea1B8;\nmapping(string => bool) private _nonces;\naddress private _signer = 0x818cDA2bA9CbC2dE202105E08dF37a26793f96A1;\nuint256 private _reserveCounter;\nuint256 private _presaleCounter;\nuint256 private _publicCounter;\nmapping(address => bool) public purchasedPresales;\nuint256 public currentSupply;\nbool public saleLive = false;\nbool public presaleLive = false;\nmapping(uint256 => Attribute[]) _attributes;\nmapping(uint256 => uint256) _tokens;\nuint256 _nonce;","after":"uint256 private constant GS_PRICE = 0.08 ether;\nuint256 private constant GS_PRIVATE_MAX = 3500;\nuint256 private constant GS_SALE_MAX = 3744;\nuint256 private constant GS_AIRDROP = 100;\nmapping(string => bool) private _nonces;\nuint256 private _reserveCounter;\nuint256 private _presaleCounter;\nuint256 private _publicCounter;\nmapping(address => bool) public purchasedPresales;\nuint256 public currentSupply;\nmapping(uint256 => Attribute[]) _attributes;\nmapping(uint256 => uint256) _tokens;\nuint256 _nonce;\naddress private constant GS_TEAM = 0xfa5d05Df712B059B74cCeFe4084785BE7f2ea1B8;\naddress private _signer = 0x818cDA2bA9CbC2dE202105E08dF37a26793f96A1;\nbool public saleLive = false;\nbool public presaleLive = false;\n","contract":"GoatSoup","time":0},{"type":"external-function ","before":"function mint(uint256 amount, string memory nonce, bytes memory signature) external payable {\r\n        require(saleLive, \"NOT_RELEASED\");\r\n        require(totalSupply() < GS_SALE_MAX, \"SOLD_OUT\");\r\n        require(amount <= 2, \"MAX_PER_TX_SALE\");\r\n        require(!_nonces[nonce], \"NONCE_USED\");\r\n        require(verifyPublicMint(msg.sender, amount, nonce, signature), \"INVALID_TRANSACTION\");\r\n        require(_publicCounter + amount <= GS_SALE_MAX - _presaleCounter - GS_AIRDROP, \"MAX_PUBLIC_SALE\");\r\n        require(msg.value * amount >= GS_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n        \r\n        _nonces[nonce] = true;\r\n        _publicCounter += amount;\r\n        for(uint256 i = 0; i < amount; i++) {\r\n            internalMint(msg.sender);\r\n        }\r\n    }","after":"function mint(uint256 amount, string calldata nonce, bytes calldata signature) external payable {\r\n        require(saleLive, \"NOT_RELEASED\");\r\n        require(totalSupply() < GS_SALE_MAX, \"SOLD_OUT\");\r\n        require(amount <= 2, \"MAX_PER_TX_SALE\");\r\n        require(!_nonces[nonce], \"NONCE_USED\");\r\n        require(verifyPublicMint(msg.sender, amount, nonce, signature), \"INVALID_TRANSACTION\");\r\n        require(_publicCounter + amount <= GS_SALE_MAX - _presaleCounter - GS_AIRDROP, \"MAX_PUBLIC_SALE\");\r\n        require(msg.value * amount >= GS_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n        \r\n        _nonces[nonce] = true;\r\n        _publicCounter += amount;\r\n        for(uint256 i = 0; i < amount; i++) {\r\n            internalMint(msg.sender);\r\n        }\r\n    }","contract":"GoatSoup","time":0},{"type":"external-function ","before":"function presale(bytes memory signature) external payable {\r\n        require(presaleLive, \"NOT_RELEASED\");\r\n        require(totalSupply() < GS_SALE_MAX, \"SOLD_OUT\");\r\n        require(_presaleCounter < GS_PRIVATE_MAX, \"MAX_PRIVATE_SALE\");\r\n        require(!purchasedPresales[msg.sender], \"MAX_PER_PRESALE\");\r\n        require(verify(msg.sender, signature), \"INVALID_TRANSACTION\");\r\n        require(msg.value >= GS_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n\r\n        purchasedPresales[msg.sender] = true;\r\n        _presaleCounter++;\r\n        internalMint(msg.sender);\r\n    }","after":"function presale(bytes calldata signature) external payable {\r\n        require(presaleLive, \"NOT_RELEASED\");\r\n        require(totalSupply() < GS_SALE_MAX, \"SOLD_OUT\");\r\n        require(_presaleCounter < GS_PRIVATE_MAX, \"MAX_PRIVATE_SALE\");\r\n        require(!purchasedPresales[msg.sender], \"MAX_PER_PRESALE\");\r\n        require(verify(msg.sender, signature), \"INVALID_TRANSACTION\");\r\n        require(msg.value >= GS_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n\r\n        purchasedPresales[msg.sender] = true;\r\n        _presaleCounter++;\r\n        internalMint(msg.sender);\r\n    }","contract":"GoatSoup","time":0},{"type":"external-function ","before":"function addAttributes(uint _attributeIndex, Attribute[] memory attributes) external onlyOwner {\r\n        for(uint8 i = 0; i < attributes.length; i++) {\r\n            _attributes[_attributeIndex].push(\r\n                Attribute(\r\n                    attributes[i].name,\r\n                    attributes[i].attr_type,\r\n                    attributes[i].svgPath,\r\n                    attributes[i].pixelCount\r\n                )\r\n            );\r\n        }\r\n    }","after":"function addAttributes(uint _attributeIndex, Attribute[] calldata attributes) external onlyOwner {\r\n        for(uint8 i = 0; i < attributes.length; i++) {\r\n            _attributes[_attributeIndex].push(\r\n                Attribute(\r\n                    attributes[i].name,\r\n                    attributes[i].attr_type,\r\n                    attributes[i].svgPath,\r\n                    attributes[i].pixelCount\r\n                )\r\n            );\r\n        }\r\n    }","contract":"GoatSoup","time":0}]}
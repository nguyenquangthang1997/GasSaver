{"time":298,"results":[{"type":"loop-duplication","before":"\nstart line 550 column 8, end line 564 column 8\nfor (uint256 i = 0; i < CHARITY_GROUPS; i++) {\n            require(\n                charityGroupForToken(_tokenIds[i]) == i,\n                \"Must have a token from each charity\"\n            );\n            require(\n                getEvolutionLevel(_tokenIds[i]) == 3,\n                \"Must be in final form\"\n            );\n            require(\n                ownerOf(_tokenIds[i]) == msg.sender,\n                /* ownerOf also asserts _exists() */\n                \"Must own the batons to burn-to-mint\"\n            );\n        }\nstart line 565 column 8, end line 567 column 8\nfor (uint256 i = 0; i < CHARITY_GROUPS; i++) {\n            _burn(_tokenIds[i]);\n        }","after":"// merge loop\n\nstart line 550 column 8, end line 564 column 8\nfor (uint256 i = 0; i < CHARITY_GROUPS; i++) {\n            require(\n                charityGroupForToken(_tokenIds[i]) == i,\n                \"Must have a token from each charity\"\n            );\n            require(\n                getEvolutionLevel(_tokenIds[i]) == 3,\n                \"Must be in final form\"\n            );\n            require(\n                ownerOf(_tokenIds[i]) == msg.sender,\n                /* ownerOf also asserts _exists() */\n                \"Must own the batons to burn-to-mint\"\n            );\n        }\nstart line 565 column 8, end line 567 column 8\nfor (uint256 i = 0; i < CHARITY_GROUPS; i++) {\n            _burn(_tokenIds[i]);\n        }","contract":"Batons","time":0},{"type":"external-function ","before":"function revealMetadata(string memory _ipfsBase)\n        public\n        onlyAdmin\n        returns (bytes32)\n    {\n        require(LINK.balanceOf(address(this)) >= vrfFee, \"Not enough LINK\");\n        baseURI = _ipfsBase;\n        return requestRandomness(vrfKeyHash, vrfFee);\n    }","after":"function revealMetadata(string calldata _ipfsBase)\n        public\n        onlyAdmin\n        returns (bytes32)\n    {\n        require(LINK.balanceOf(address(this)) >= vrfFee, \"Not enough LINK\");\n        baseURI = _ipfsBase;\n        return requestRandomness(vrfKeyHash, vrfFee);\n    }","contract":"Batons","time":0}]}
{"time":127,"results":[{"type":"external-function ","before":"function addTraitRarity(uint256 traitIndex, uint256[] memory newRarities) external onlyOwner {\n        require(traitRarity[traitIndex].length == 0, \"Not empty trait\");\n        require(newRarities[newRarities.length-1] == 10000, \"Trait rarity does not end in 10,000. Reverting\");\n        for (uint256 i = 0; i < newRarities.length; i++) {\n            traitRarity[traitIndex].push(newRarities[i]);\n        }\n        return;\n    }","after":"function addTraitRarity(uint256 traitIndex, uint256[] calldata newRarities) external onlyOwner {\n        require(traitRarity[traitIndex].length == 0, \"Not empty trait\");\n        require(newRarities[newRarities.length-1] == 10000, \"Trait rarity does not end in 10,000. Reverting\");\n        for (uint256 i = 0; i < newRarities.length; i++) {\n            traitRarity[traitIndex].push(newRarities[i]);\n        }\n        return;\n    }","contract":"NormieTraits","time":0},{"type":"external-function ","before":"function addTraitToTraitMap(NormieLib.Trait[] memory newTraits) external onlyOwner {\n        uint32 currentTraitLocal = CURRENT_TRAIT;\n        for (uint256 i = 0; i < newTraits.length; i++){\n            NormieLib.Trait memory _trait = NormieLib.Trait(\n                    newTraits[i].traitName,\n                    newTraits[i].traitType,\n                    newTraits[i].hash,\n                    newTraits[i].pixelCount,\n                    1000001 + currentTraitLocal\n            );\n            traitIDToTrait[1000001 + currentTraitLocal] = _trait;\n            currentTraitLocal = currentTraitLocal + 1;\n        }\n        CURRENT_TRAIT = currentTraitLocal;\n    }","after":"function addTraitToTraitMap(NormieLib.Trait[] calldata newTraits) external onlyOwner {\n        uint32 currentTraitLocal = CURRENT_TRAIT;\n        for (uint256 i = 0; i < newTraits.length; i++){\n            NormieLib.Trait memory _trait = NormieLib.Trait(\n                    newTraits[i].traitName,\n                    newTraits[i].traitType,\n                    newTraits[i].hash,\n                    newTraits[i].pixelCount,\n                    1000001 + currentTraitLocal\n            );\n            traitIDToTrait[1000001 + currentTraitLocal] = _trait;\n            currentTraitLocal = currentTraitLocal + 1;\n        }\n        CURRENT_TRAIT = currentTraitLocal;\n    }","contract":"NormieTraits","time":0},{"type":"external-function ","before":"function editTrait(uint256 traitID, NormieLib.Trait memory newTraitData) external onlyOwner {\n        NormieLib.Trait memory _trait = traitIDToTrait[traitID];\n        _trait.traitName = newTraitData.traitName;\n        _trait.traitType = newTraitData.traitType;\n        _trait.hash = newTraitData.hash;\n        _trait.pixelCount = newTraitData.pixelCount;\n        traitIDToTrait[traitID] = _trait;\n    }","after":"function editTrait(uint256 traitID, NormieLib.Trait calldata newTraitData) external onlyOwner {\n        NormieLib.Trait memory _trait = traitIDToTrait[traitID];\n        _trait.traitName = newTraitData.traitName;\n        _trait.traitType = newTraitData.traitType;\n        _trait.hash = newTraitData.hash;\n        _trait.pixelCount = newTraitData.pixelCount;\n        traitIDToTrait[traitID] = _trait;\n    }","contract":"NormieTraits","time":0},{"type":"external-function ","before":"function addTraitsToCurrentCollection(uint256 traitIndex, uint256[] memory traitID) external onlyOwner {\n        require(currentCollectionTraits[traitIndex].length + traitID.length <= traitRarity[traitIndex].length, \"Trait array mismatch\");\n        for (uint256 i = 0; i < traitID.length; i++){\n            currentCollectionTraits[traitIndex].push(traitID[i]);\n        }\n    }","after":"function addTraitsToCurrentCollection(uint256 traitIndex, uint256[] calldata traitID) external onlyOwner {\n        require(currentCollectionTraits[traitIndex].length + traitID.length <= traitRarity[traitIndex].length, \"Trait array mismatch\");\n        for (uint256 i = 0; i < traitID.length; i++){\n            currentCollectionTraits[traitIndex].push(traitID[i]);\n        }\n    }","contract":"NormieTraits","time":0},{"type":"immutable-restrict-modification ","before":"address private owner;","after":"address private immutable owner;","contract":"NormieTraits","time":0}]}
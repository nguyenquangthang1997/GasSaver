{"time":179,"results":[{"type":"state-data-arrangement ","before":"\nuint256 constant public TOTAL_TOKEN_TO_MINT = 7216;\nuint256 constant public TOTAL_USER_ELIGIBLE_FOR_REFUND = 1400;\nuint256 constant public WHITELIST_MINT_PER_USER = 20;\nuint256 constant public ITEM_PRICE = 0.07 ether;\nbool public isSaleActive;\nbool public isPreSaleActive;\nbool public isBurnRefundActive;\nuint256 public mintedTokens;\nuint256 public burnedTokens;\nuint256 public startingIpfsId;\naddress public fundWallet;\nuint256 private _lastIpfsId;\nmapping(address => Whitelist) public whitelistInfo;","after":"uint256 constant public TOTAL_TOKEN_TO_MINT = 7216;\nuint256 constant public TOTAL_USER_ELIGIBLE_FOR_REFUND = 1400;\nuint256 constant public WHITELIST_MINT_PER_USER = 20;\nuint256 constant public ITEM_PRICE = 0.07 ether;\nuint256 public mintedTokens;\nuint256 public burnedTokens;\nuint256 public startingIpfsId;\nuint256 private _lastIpfsId;\nmapping(address => Whitelist) public whitelistInfo;\naddress public fundWallet;\nbool public isSaleActive;\nbool public isPreSaleActive;\nbool public isBurnRefundActive;\n","contract":"NFTRedZone","time":0},{"type":"external-function ","before":"function addToWhitelistMultiple(address[] memory _addresses) external onlyOwner {\n        for(uint256 i = 0; i < _addresses.length; i++) {\n            addToWhitelist(_addresses[i]);\n        }\n    }","after":"function addToWhitelistMultiple(address[] calldata _addresses) external onlyOwner {\n        for(uint256 i = 0; i < _addresses.length; i++) {\n            addToWhitelist(_addresses[i]);\n        }\n    }","contract":"NFTRedZone","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 _tokenId, string memory _uri) external onlyOwner {\n        _setTokenURI(_tokenId, _uri);\n    }","after":"function setTokenURI(uint256 _tokenId, string calldata _uri) external onlyOwner {\n        _setTokenURI(_tokenId, _uri);\n    }","contract":"NFTRedZone","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","contract":"NFTRedZone","time":0}]}
{"time":120,"results":[{"type":"external-function ","before":"function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n        require(receivers.length != 0, 'Cannot Proccess Null Transaction');\n        require(receivers.length == amounts.length, 'Address and Amount array length must be same');\n        for (uint256 i = 0; i < receivers.length; i++) {\n            transfer(receivers[i], amounts[i]);\n        }\n    }","after":"function multiTransfer(address[] calldata receivers, uint256[] calldata amounts) public {\n        require(receivers.length != 0, 'Cannot Proccess Null Transaction');\n        require(receivers.length == amounts.length, 'Address and Amount array length must be same');\n        for (uint256 i = 0; i < receivers.length; i++) {\n            transfer(receivers[i], amounts[i]);\n        }\n    }","contract":"TUHY","time":0},{"type":"external-function ","before":"function bulkClaimAirdrop(uint256[] memory tokenIDs) public {\n        require(airdropEndDate > block.timestamp, \"Airdrop is ended\");\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\n            require(horseContract.ownerOf(tokenIDs[i]) == msg.sender, \"You aren't own this NFT token\");\n            require(!isAirdroped[tokenIDs[i]],\"This token ID already claimed airdrop\"); \n            _mint(msg.sender, 1000 ether);\n            isAirdroped[tokenIDs[i]] = true;\n            emit airdropClaimed(tokenIDs[i], msg.sender);\n        }\n    }","after":"function bulkClaimAirdrop(uint256[] calldata tokenIDs) public {\n        require(airdropEndDate > block.timestamp, \"Airdrop is ended\");\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\n            require(horseContract.ownerOf(tokenIDs[i]) == msg.sender, \"You aren't own this NFT token\");\n            require(!isAirdroped[tokenIDs[i]],\"This token ID already claimed airdrop\"); \n            _mint(msg.sender, 1000 ether);\n            isAirdroped[tokenIDs[i]] = true;\n            emit airdropClaimed(tokenIDs[i], msg.sender);\n        }\n    }","contract":"TUHY","time":0},{"type":"external-function ","before":"function bulkClaimRewards(uint256[] memory tokenIDs) public {\n        require(dailyReward,\" Daily Rewards Are Stopped \");\n        uint256 total;\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\n            require(horseContract.ownerOf(tokenIDs[i]) == msg.sender, \"You aren't own this NFT token\");\n            total += checkDailyReward(tokenIDs[i]);\n            if(checkDailyReward(tokenIDs[i]) > 0){\n                lastReward[tokenIDs[i]] = block.timestamp;\n            }\n        }\n        require(total > 0, \"There is no claimable reward\");\n        _mint(msg.sender, total);\n    }","after":"function bulkClaimRewards(uint256[] calldata tokenIDs) public {\n        require(dailyReward,\" Daily Rewards Are Stopped \");\n        uint256 total;\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\n            require(horseContract.ownerOf(tokenIDs[i]) == msg.sender, \"You aren't own this NFT token\");\n            total += checkDailyReward(tokenIDs[i]);\n            if(checkDailyReward(tokenIDs[i]) > 0){\n                lastReward[tokenIDs[i]] = block.timestamp;\n            }\n        }\n        require(total > 0, \"There is no claimable reward\");\n        _mint(msg.sender, total);\n    }","contract":"TUHY","time":0}]}
{"time":179,"results":[{"type":"external-function ","before":"function addTitle(string memory _name, address[] memory _projectAddresses, uint256[] memory _minAssets, string memory _fColor, string memory _bColor, uint256 _price) payable public {\n        require(_projectAddresses.length <= MAX_PROJECTS_PER_TITLE && _projectAddresses.length > 0, \"Max Projects reached or invalid projects\");\n        require(_projectAddresses.length == _minAssets.length, \"Incomplete input\");\n        require(TitlesDraw(drawContract).validateName(_name), \"Invalid name\");\n        require(!usedNames[_name], \"Name used\");\n        require (msg.value == PRICE_CREATE, \"Insuficient eth\");\n        require(TitlesDraw(drawContract).validateColor(_fColor) && TitlesDraw(drawContract).validateColor(_bColor), \"Invalid color\");\n                \n        totalTitles++;\n\n        for (uint i=0; i<_minAssets.length; i++) {\n            require(_minAssets[i] >=1, \"At least 1\");\n        }\n\n        for (uint i=0; i<_projectAddresses.length; i++) {\n            ERC721Enumerable(_projectAddresses[i]).balanceOf(msg.sender); //will fail if balanceOf is not there\n            ERC721Enumerable(_projectAddresses[i]).name(); //will fail if name is not there\n        }\n\n        titleAddresses[totalTitles] = _projectAddresses;\n        titleMinAssets[totalTitles] = _minAssets;\n        titles[totalTitles] = Title({name: _name, creator:msg.sender, claims: 0, fColor: _fColor, bColor: _bColor, price: _price});\n\n        usedNames[_name] = true;\n        namesToIds[_name] = totalTitles;\n\n        credit[owner()] += msg.value;\n\n        emit TitleCreated(_name, msg.sender);\n    }","after":"function addTitle(string calldata _name, address[] calldata _projectAddresses, uint256[] calldata _minAssets, string calldata _fColor, string calldata _bColor, uint256 _price) payable public {\n        require(_projectAddresses.length <= MAX_PROJECTS_PER_TITLE && _projectAddresses.length > 0, \"Max Projects reached or invalid projects\");\n        require(_projectAddresses.length == _minAssets.length, \"Incomplete input\");\n        require(TitlesDraw(drawContract).validateName(_name), \"Invalid name\");\n        require(!usedNames[_name], \"Name used\");\n        require (msg.value == PRICE_CREATE, \"Insuficient eth\");\n        require(TitlesDraw(drawContract).validateColor(_fColor) && TitlesDraw(drawContract).validateColor(_bColor), \"Invalid color\");\n                \n        totalTitles++;\n\n        for (uint i=0; i<_minAssets.length; i++) {\n            require(_minAssets[i] >=1, \"At least 1\");\n        }\n\n        for (uint i=0; i<_projectAddresses.length; i++) {\n            ERC721Enumerable(_projectAddresses[i]).balanceOf(msg.sender); //will fail if balanceOf is not there\n            ERC721Enumerable(_projectAddresses[i]).name(); //will fail if name is not there\n        }\n\n        titleAddresses[totalTitles] = _projectAddresses;\n        titleMinAssets[totalTitles] = _minAssets;\n        titles[totalTitles] = Title({name: _name, creator:msg.sender, claims: 0, fColor: _fColor, bColor: _bColor, price: _price});\n\n        usedNames[_name] = true;\n        namesToIds[_name] = totalTitles;\n\n        credit[owner()] += msg.value;\n\n        emit TitleCreated(_name, msg.sender);\n    }","contract":"TitlesCore","time":0}]}
{"time":139,"results":[{"type":"external-function ","before":"function initialize(\n        address newOwner,\n        string memory _name,\n        string memory _symbol,\n        ConfigSettings memory settings\n    ) public initializer {\n        __ERC721_init(_name, _symbol);\n        __Ownable_init();\n\n        advancedConfig = settings;\n\n        transferOwnership(newOwner);\n    }","after":"function initialize(\n        address newOwner,\n        string calldata _name,\n        string calldata _symbol,\n        ConfigSettings calldata settings\n    ) public initializer {\n        __ERC721_init(_name, _symbol);\n        __Ownable_init();\n\n        advancedConfig = settings;\n\n        transferOwnership(newOwner);\n    }","contract":"ERC721Base","time":0},{"type":"external-function ","before":"function __setBaseURI(string memory uriBase, string memory uriExtension)\n        public\n        override\n        onlyInternal\n    {\n        advancedConfig.uriBase = uriBase;\n        advancedConfig.uriExtension = uriExtension;\n    }","after":"function __setBaseURI(string calldata uriBase, string calldata uriExtension)\n        public\n        override\n        onlyInternal\n    {\n        advancedConfig.uriBase = uriBase;\n        advancedConfig.uriExtension = uriExtension;\n    }","contract":"ERC721Base","time":0},{"type":"external-function ","before":"function claimPenguins(uint256[] memory nftTokenIds, address[] memory contractAddresses) public {\n        require(openClaim, \"Claiming not open yet\");\n        for (uint256 i = 0; i < nftTokenIds.length; i++) {\n            require(allowedContracts[contractAddresses[i]], \"Contract not allowed to mint.\");\n            ERC721Upgradeable pudgyContract = ERC721Upgradeable(contractAddresses[i]);\n            require(pudgyContract.ownerOf(nftTokenIds[i]) == msg.sender, \"You are not the owner of the penguin you are trying to claim.\");\n            if (seen[nftTokenIds[i]]) {\n                continue;\n            }\n            seen[nftTokenIds[i]] = true;\n            _mint(msg.sender, nftTokenIds[i]);\n        }\n    }","after":"function claimPenguins(uint256[] calldata nftTokenIds, address[] calldata contractAddresses) public {\n        require(openClaim, \"Claiming not open yet\");\n        for (uint256 i = 0; i < nftTokenIds.length; i++) {\n            require(allowedContracts[contractAddresses[i]], \"Contract not allowed to mint.\");\n            ERC721Upgradeable pudgyContract = ERC721Upgradeable(contractAddresses[i]);\n            require(pudgyContract.ownerOf(nftTokenIds[i]) == msg.sender, \"You are not the owner of the penguin you are trying to claim.\");\n            if (seen[nftTokenIds[i]]) {\n                continue;\n            }\n            seen[nftTokenIds[i]] = true;\n            _mint(msg.sender, nftTokenIds[i]);\n        }\n    }","contract":"MechaPenguins","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newUri) public onlyOwner {\n        _setBaseURI(newUri, \"\");\n    }","after":"function setBaseURI(string calldata newUri) public onlyOwner {\n        _setBaseURI(newUri, \"\");\n    }","contract":"MechaPenguins","time":0},{"type":"external-function ","before":"function addToAllowedContracts(address[] memory contractAddresses) public onlyOwner {\n        for(uint i = 0; i < contractAddresses.length; i++) {\n            allowedContracts[contractAddresses[i]] = true;\n        }\n    }","after":"function addToAllowedContracts(address[] calldata contractAddresses) public onlyOwner {\n        for(uint i = 0; i < contractAddresses.length; i++) {\n            allowedContracts[contractAddresses[i]] = true;\n        }\n    }","contract":"MechaPenguins","time":0},{"type":"external-function ","before":"function removeFromAllowedContracts(address[] memory contractAddresses) public onlyOwner {\n        for(uint i = 0; i < contractAddresses.length; i++) {\n            allowedContracts[contractAddresses[i]] = false;\n        }\n    }","after":"function removeFromAllowedContracts(address[] calldata contractAddresses) public onlyOwner {\n        for(uint i = 0; i < contractAddresses.length; i++) {\n            allowedContracts[contractAddresses[i]] = false;\n        }\n    }","contract":"MechaPenguins","time":0}]}
{"time":142,"results":[{"type":"external-function ","before":"function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external override {\n        require(to != address(0), \"Transfer to must not be null address\");\n        require(amount == 1, \"Invalid amount\");\n        require(\n            from == msg.sender || isApprovedForAll(from, msg.sender),\n            \"Transfer caller is neither owner nor approved\"\n        );\n        require(isOwnerOf(from, id), \"Not the owner\");\n\n        starBelongTo[id] = to;\n\n        emit TransferSingle(msg.sender, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\n    }","after":"function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external override {\n        require(to != address(0), \"Transfer to must not be null address\");\n        require(amount == 1, \"Invalid amount\");\n        require(\n            from == msg.sender || isApprovedForAll(from, msg.sender),\n            \"Transfer caller is neither owner nor approved\"\n        );\n        require(isOwnerOf(from, id), \"Not the owner\");\n\n        starBelongTo[id] = to;\n\n        emit TransferSingle(msg.sender, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\n    }","contract":"StarNFTV1","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external override {\n        require(to != address(0), \"Batch transfer to must not be null address\");\n        require(ids.length == amounts.length, \"Array(ids, amounts) length mismatch\");\n        require(from == msg.sender || isApprovedForAll(from, msg.sender), \"Transfer caller is neither owner nor approved\");\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            require(isOwnerOf(from, id), \"Not the owner\");\n            starBelongTo[id] = to;\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external override {\n        require(to != address(0), \"Batch transfer to must not be null address\");\n        require(ids.length == amounts.length, \"Array(ids, amounts) length mismatch\");\n        require(from == msg.sender || isApprovedForAll(from, msg.sender), \"Transfer caller is neither owner nor approved\");\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            require(isOwnerOf(from, id), \"Not the owner\");\n            starBelongTo[id] = to;\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, from, to, ids, amounts, data);\n    }","contract":"StarNFTV1","time":0},{"type":"external-function ","before":"function setURI(string memory newURI) external onlyOwner {\n        baseURI = newURI;\n    }","after":"function setURI(string calldata newURI) external onlyOwner {\n        baseURI = newURI;\n    }","contract":"StarNFTV1","time":0}]}
{"time":157,"results":[{"type":"state-data-arrangement ","before":"\n   uint256 constant private _tokenId =\n   uint256 constant public oldJKSupply = 22\n   address constant public oldJK = 0x137A81298c11708006405d75bC0541A2a07C0B\n   uint256 public maxPerAddress = \n   uint256 public mintCount =\n   uint256 public bridgeCount =\n   uint256 public totalMinted =\n   uint256 public maxKeySupply = 75\n   uint256 public mintPrice = 0.07 eth\n   bool public saleStarted = fal\n   bool public presaleStarted = fal\n   mapping(bytes32 => bool) private _usedHash\n   address private _signerAddre","after":"   uint256 constant private _tokenId =\n   uint256 constant public oldJKSupply = 22\n   uint256 public maxPerAddress = \n   uint256 public mintCount =\n   uint256 public bridgeCount =\n   uint256 public totalMinted =\n   uint256 public maxKeySupply = 75\n   uint256 public mintPrice = 0.07 eth\n   mapping(bytes32 => bool) private _usedHash\n   address constant public oldJK = 0x137A81298c11708006405d75bC0541A2a07C0B\n   address private _signerAddre\n   bool public saleStarted = fal\n   bool public presaleStarted = fal\n","contract":"JKDao","time":0},{"type":"external-function ","before":"   function presaleMint(\n        uint256 _count,\n        bytes32 _hash,\n        bytes memory _sig)\n        external payable nonReentrant\n    {\n        require(presaleStarted, \"Presale not started\");\n        require(tx.origin == msg.sender, \"Prevent contract call\");\n        require((balanceOf(msg.sender, _tokenId) + _count) <= maxPerAddress, \"Max Per Address reached\");\n        require(_count > 0 && msg.value == _count * mintPrice, \"invalid eth sent\");\n        require(matchHash(msg.sender, _count, _hash), \"invalid hash\");\n        require(matchSigner(_hash, _sig), \"invalid signer\");\n        require(!_usedHashes[_hash], \"_hash already used\");\n        require(mintCount + _count + oldJKSupply <= maxKeySupply, \"max key cards\");\n        require(totalMinted + _count <= maxKeySupply, \"max key cards\");\n\n        _usedHashes[_hash] = true;\n        mintCount += _count;\n        totalMinted += _count;\n        _mint(msg.sender, _tokenId, _count, \"\");\n  ","after":"   function presaleMint(\n        uint256 _count,\n        bytes32 _hash,\n        bytes calldata _sig)\n        external payable nonReentrant\n    {\n        require(presaleStarted, \"Presale not started\");\n        require(tx.origin == msg.sender, \"Prevent contract call\");\n        require((balanceOf(msg.sender, _tokenId) + _count) <= maxPerAddress, \"Max Per Address reached\");\n        require(_count > 0 && msg.value == _count * mintPrice, \"invalid eth sent\");\n        require(matchHash(msg.sender, _count, _hash), \"invalid hash\");\n        require(matchSigner(_hash, _sig), \"invalid signer\");\n        require(!_usedHashes[_hash], \"_hash already used\");\n        require(mintCount + _count + oldJKSupply <= maxKeySupply, \"max key cards\");\n        require(totalMinted + _count <= maxKeySupply, \"max key cards\");\n\n        _usedHashes[_hash] = true;\n        mintCount += _count;\n        totalMinted += _count;\n        _mint(msg.sender, _tokenId, _count, \"\");\n  ","contract":"JKDao","time":0},{"type":"external-function ","before":"   function setURI(string memory newuri) external onlyOwner {\n        _setURI(newuri);\n  ","after":"   function setURI(string calldata newuri) external onlyOwner {\n        _setURI(newuri);\n  ","contract":"JKDao","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"JKDao","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"JKDao","time":0}]}
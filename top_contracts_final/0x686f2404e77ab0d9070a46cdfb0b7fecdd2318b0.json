{"time":191,"results":[{"type":"external-function ","before":"function boardShip(uint256[] memory _tokenIds)\n        external\n        notPaused\n        nonReentrant\n    {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(\n                realmsToken.ownerOf(_tokenIds[i]) == msg.sender,\n                \"NOT_OWNER\"\n            );\n            ownership[_tokenIds[i]] = msg.sender;\n\n            realmsToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                _tokenIds[i]\n            );\n        }\n\n        if (lordsAvailable(msg.sender) == 0) {\n            epochClaimed[msg.sender] = _epochNum();\n        }\n\n        realmsStaked[msg.sender][_epochNum()] =\n            realmsStaked[msg.sender][_epochNum()] +\n            uint256(_tokenIds.length);\n\n        emit StakeRealms(_tokenIds, msg.sender);\n    }","after":"function boardShip(uint256[] calldata _tokenIds)\n        external\n        notPaused\n        nonReentrant\n    {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(\n                realmsToken.ownerOf(_tokenIds[i]) == msg.sender,\n                \"NOT_OWNER\"\n            );\n            ownership[_tokenIds[i]] = msg.sender;\n\n            realmsToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                _tokenIds[i]\n            );\n        }\n\n        if (lordsAvailable(msg.sender) == 0) {\n            epochClaimed[msg.sender] = _epochNum();\n        }\n\n        realmsStaked[msg.sender][_epochNum()] =\n            realmsStaked[msg.sender][_epochNum()] +\n            uint256(_tokenIds.length);\n\n        emit StakeRealms(_tokenIds, msg.sender);\n    }","contract":"Journey","time":0},{"type":"external-function ","before":"function exitShip(uint256[] memory _tokenIds)\n        external\n        notPaused\n        nonReentrant\n    {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(ownership[_tokenIds[i]] == msg.sender, \"NOT_OWNER\");\n\n            ownership[_tokenIds[i]] = address(0);\n\n            realmsToken.safeTransferFrom(\n                address(this),\n                msg.sender,\n                _tokenIds[i]\n            );\n        }\n\n        realmsStaked[msg.sender][_epochNum()] =\n            realmsStaked[msg.sender][_epochNum()] -\n            uint256(_tokenIds.length);\n\n        emit UnStakeRealms(_tokenIds, msg.sender);\n    }","after":"function exitShip(uint256[] calldata _tokenIds)\n        external\n        notPaused\n        nonReentrant\n    {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(ownership[_tokenIds[i]] == msg.sender, \"NOT_OWNER\");\n\n            ownership[_tokenIds[i]] = address(0);\n\n            realmsToken.safeTransferFrom(\n                address(this),\n                msg.sender,\n                _tokenIds[i]\n            );\n        }\n\n        realmsStaked[msg.sender][_epochNum()] =\n            realmsStaked[msg.sender][_epochNum()] -\n            uint256(_tokenIds.length);\n\n        emit UnStakeRealms(_tokenIds, msg.sender);\n    }","contract":"Journey","time":0},{"type":"external-function ","before":"function bridgeWithdraw(address _player, uint256[] memory _tokenIds)\n        public\n        onlyBridge\n        nonReentrant\n    {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            ownership[_tokenIds[i]] = address(0);\n\n            realmsToken.safeTransferFrom(address(this), _player, _tokenIds[i]);\n        }\n\n        realmsStaked[_player][_epochNum()] =\n            realmsStaked[_player][_epochNum()] -\n            uint256(_tokenIds.length);\n\n        emit UnStakeRealms(_tokenIds, _player);\n    }","after":"function bridgeWithdraw(address _player, uint256[] calldata _tokenIds)\n        public\n        onlyBridge\n        nonReentrant\n    {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            ownership[_tokenIds[i]] = address(0);\n\n            realmsToken.safeTransferFrom(address(this), _player, _tokenIds[i]);\n        }\n\n        realmsStaked[_player][_epochNum()] =\n            realmsStaked[_player][_epochNum()] -\n            uint256(_tokenIds.length);\n\n        emit UnStakeRealms(_tokenIds, _player);\n    }","contract":"Journey","time":0},{"type":"external-function ","before":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"Journey","time":0},{"type":"immutable-restrict-modification ","before":"uint256 genesis;","after":"uint256 immutable genesis;","contract":"Journey","time":0}]}
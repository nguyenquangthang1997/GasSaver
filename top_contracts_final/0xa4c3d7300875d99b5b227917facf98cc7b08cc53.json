{"time":166,"results":[{"type":"external-function ","before":"function setBaseTokenURI(string memory uri_, string memory ext_) external onlyOwner {\n        baseTokenURI = uri_;\n        baseTokenURI_EXT = ext_;\n    }","after":"function setBaseTokenURI(string calldata uri_, string calldata ext_) external onlyOwner {\n        baseTokenURI = uri_;\n        baseTokenURI_EXT = ext_;\n    }","contract":"BubbleBudz","time":0},{"type":"external-function ","before":"function mintWhitelist(bytes32[] memory proof_, uint amount_) public payable onlySender whitelistMint {\n        require(isWhitelisted(proof_), \"You are not whitelisted!\");\n        require(normalTokensLimit >= normalTokensMinted + amount_, \"No more tokens remaining!\");\n        require(maxMintsPerTx >= amount_, \"Over maxmimum mints per tx!\");\n        require(msg.value == mintPrice * amount_, \"Invalid value sent!\");\n        require(whitelistMaxMints >= addressToWhitelistMints[msg.sender] + amount_, \"Your address doesn't have enough whitelist mint quota!\");\n\n        normalTokensMinted += amount_;\n        addressToWhitelistMints[msg.sender] += amount_;\n\n        for (uint i = 0; i < amount_; i++) {\n            uint _mintId = totalSupply() + 1; // iterate from 1\n            _mint(msg.sender, _mintId);\n            emit Mint(msg.sender, _mintId);\n        }\n    }","after":"function mintWhitelist(bytes32[] calldata proof_, uint amount_) public payable onlySender whitelistMint {\n        require(isWhitelisted(proof_), \"You are not whitelisted!\");\n        require(normalTokensLimit >= normalTokensMinted + amount_, \"No more tokens remaining!\");\n        require(maxMintsPerTx >= amount_, \"Over maxmimum mints per tx!\");\n        require(msg.value == mintPrice * amount_, \"Invalid value sent!\");\n        require(whitelistMaxMints >= addressToWhitelistMints[msg.sender] + amount_, \"Your address doesn't have enough whitelist mint quota!\");\n\n        normalTokensMinted += amount_;\n        addressToWhitelistMints[msg.sender] += amount_;\n\n        for (uint i = 0; i < amount_; i++) {\n            uint _mintId = totalSupply() + 1; // iterate from 1\n            _mint(msg.sender, _mintId);\n            emit Mint(msg.sender, _mintId);\n        }\n    }","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxTokens = 10000;","after":"uint public constant maxTokens = 10000;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public mintPrice = 0.08 ether;","after":"uint public constant mintPrice = 0.08 ether;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public mintPriceBubblez = 140 ether;","after":"uint public constant mintPriceBubblez = 140 ether;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxMintsPerTx = 5;","after":"uint public constant maxMintsPerTx = 5;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public normalTokensLimit = 9000;","after":"uint public constant normalTokensLimit = 9000;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public bubblezTokensLimit = 1000;","after":"uint public constant bubblezTokensLimit = 1000;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public whitelistMaxMints = 5;","after":"uint public constant whitelistMaxMints = 5;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint public publicMaxMints = 20;","after":"uint public constant publicMaxMints = 20;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_1 = 0x1D628369DD259660482bf6c14Cb558F8d69a8242;","after":"address internal constant Shareholder_1 = 0x1D628369DD259660482bf6c14Cb558F8d69a8242;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_2 = 0x1eD3D146cb5945e1C894A70013Ed83F95693EA22;","after":"address internal constant Shareholder_2 = 0x1eD3D146cb5945e1C894A70013Ed83F95693EA22;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_1_Share = 80;","after":"uint internal constant Shareholder_1_Share = 80;","contract":"BubbleBudz","time":0},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_2_Share = 20;","after":"uint internal constant Shareholder_2_Share = 20;","contract":"BubbleBudz","time":0}]}
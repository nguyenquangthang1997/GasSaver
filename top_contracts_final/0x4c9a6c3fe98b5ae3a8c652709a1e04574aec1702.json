{"time":170,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public  supplyLimit = 1122;\nuint256 public  mintPrice;\nuint256 public  startingIndex = 0;\nuint256 public  startingIndexBlock;\nuint8 public maxMint = 3;\naddress payable public  withdrawalWallet;\nstring private baseURI;\nbool public  saleActive = false;\nbool public  whitelistSaleActive = false;\nmapping(address => uint8) public whitelist;\nmapping (uint256 => string) public _tokenName;\nmapping (string => bool) private _nameReserved;","after":"uint256 public  supplyLimit = 1122;\nuint256 public  mintPrice;\nuint256 public  startingIndex = 0;\nuint256 public  startingIndexBlock;\nstring private baseURI;\nmapping(address => uint8) public whitelist;\nmapping (uint256 => string) public _tokenName;\nmapping (string => bool) private _nameReserved;\naddress payable public  withdrawalWallet;\nuint8 public maxMint = 3;\nbool public  saleActive = false;\nbool public  whitelistSaleActive = false;\n","contract":"Lightbulbman","time":0},{"type":"external-function ","before":"function addWhitelist(address[] memory _userList) external onlyOwner {\n        for(uint256 i = 0; i < _userList.length; i++) {\n            whitelist[_userList[i]] = maxMint;\n            emit WhiteListAdded(_userList[i], maxMint);\n        }\n    }","after":"function addWhitelist(address[] calldata _userList) external onlyOwner {\n        for(uint256 i = 0; i < _userList.length; i++) {\n            whitelist[_userList[i]] = maxMint;\n            emit WhiteListAdded(_userList[i], maxMint);\n        }\n    }","contract":"Lightbulbman","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) external onlyOwner  {\n        baseURI = _baseURI;\n        emit BaseURIChanged(baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) external onlyOwner  {\n        baseURI = _baseURI;\n        emit BaseURIChanged(baseURI);\n    }","contract":"Lightbulbman","time":0},{"type":"external-function ","before":"function setLightbulbmanName(uint256 tokenId, string memory _name) external {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"Not the owner of this LBM\");\n        require(validateName(_name), \"Invalid name\");\n        require(bytes(_tokenName[tokenId]).length == 0, \"Name is already set!\");\n        require(isNameReserved(_name) == false, \"Name is already taken\");\n\n        _tokenName[tokenId] = _name;\n        emit NameChange(tokenId, _name);\n    }","after":"function setLightbulbmanName(uint256 tokenId, string calldata _name) external {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"Not the owner of this LBM\");\n        require(validateName(_name), \"Invalid name\");\n        require(bytes(_tokenName[tokenId]).length == 0, \"Name is already set!\");\n        require(isNameReserved(_name) == false, \"Name is already taken\");\n\n        _tokenName[tokenId] = _name;\n        emit NameChange(tokenId, _name);\n    }","contract":"Lightbulbman","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public  supplyLimit = 1122;","after":"uint256 public  constant supplyLimit = 1122;","contract":"Lightbulbman","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public maxMint = 3;","after":"uint8 public constant maxMint = 3;","contract":"Lightbulbman","time":0}]}
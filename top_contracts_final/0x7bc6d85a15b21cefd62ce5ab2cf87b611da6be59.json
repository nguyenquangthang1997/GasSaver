{"time":109,"results":[{"type":"external-function ","before":"function buyWithPumpkinPass(uint256 passId, uint256 amount, bytes memory signature) public {\r\n    require(amount > 0, \"You must mint at least 1\");\r\n    bytes32 messageHash = keccak256(abi.encodePacked(\"mint puppy\", msg.sender, passId, amount));\r\n    bytes32 digest = ECDSA.toEthSignedMessageHash(messageHash);\r\n    require(!signatureUsed[digest], \"This signature has already been used\");\r\n\r\n    address signer = ECDSA.recover(digest, signature);\r\n    require(signer == owner(), \"Invalid signature\");\r\n    signatureUsed[digest] = true;\r\n\r\n    for (uint256 i = 1; i <= amount; i++) {\r\n      _mint(msg.sender, totalSupply + i);\r\n    }\r\n    totalSupply += amount;\r\n    emit RedeemedPumpkinPass(msg.sender, passId);\r\n  }","after":"function buyWithPumpkinPass(uint256 passId, uint256 amount, bytes calldata signature) public {\r\n    require(amount > 0, \"You must mint at least 1\");\r\n    bytes32 messageHash = keccak256(abi.encodePacked(\"mint puppy\", msg.sender, passId, amount));\r\n    bytes32 digest = ECDSA.toEthSignedMessageHash(messageHash);\r\n    require(!signatureUsed[digest], \"This signature has already been used\");\r\n\r\n    address signer = ECDSA.recover(digest, signature);\r\n    require(signer == owner(), \"Invalid signature\");\r\n    signatureUsed[digest] = true;\r\n\r\n    for (uint256 i = 1; i <= amount; i++) {\r\n      _mint(msg.sender, totalSupply + i);\r\n    }\r\n    totalSupply += amount;\r\n    emit RedeemedPumpkinPass(msg.sender, passId);\r\n  }","contract":"JunkyardPuppies","time":0},{"type":"external-function ","before":"function setUri(string memory u) public onlyOwner {\r\n    uri = u;\r\n  }","after":"function setUri(string calldata u) public onlyOwner {\r\n    uri = u;\r\n  }","contract":"JunkyardPuppies","time":0}]}
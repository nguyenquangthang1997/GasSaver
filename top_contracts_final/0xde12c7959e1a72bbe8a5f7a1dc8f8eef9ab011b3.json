{"time":452,"results":[{"type":"state-data-arrangement ","before":"\naddress public oracle;\nstring public symbol;\nstring public name;\nuint8 public constant decimals = 18;\naddress public creator_address;\naddress public deus_address;\nuint256 public constant genesis_supply = 10000e18;\naddress public reserve_tracker_address;\naddress[] public dei_pools_array;\nmapping(address => bool) public dei_pools;\nuint256 private constant PRICE_PRECISION = 1e6;\nuint256 public global_collateral_ratio;\nuint256 public dei_step;\nuint256 public refresh_cooldown;\nuint256 public price_band;\nbytes32 public constant COLLATERAL_RATIO_PAUSER = keccak256(\"COLLATERAL_RATIO_PAUSER\");\nbytes32 public constant TRUSTY_ROLE = keccak256(\"TRUSTY_ROLE\");\nbytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\nbool public collateral_ratio_paused = false;\nuint256 public growth_ratio;\nuint256 public GR_top_band;\nuint256 public GR_bottom_band;\nuint256 public DEI_top_band;\nuint256 public DEI_bottom_band;\nbool public use_growth_ratio;\nbool public FIP_6;\nuint256 public last_call_time;","after":"string public symbol;\nstring public name;\nuint256 public constant genesis_supply = 10000e18;\naddress[] public dei_pools_array;\nmapping(address => bool) public dei_pools;\nuint256 private constant PRICE_PRECISION = 1e6;\nuint256 public global_collateral_ratio;\nuint256 public dei_step;\nuint256 public refresh_cooldown;\nuint256 public price_band;\nbytes32 public constant COLLATERAL_RATIO_PAUSER = keccak256(\"COLLATERAL_RATIO_PAUSER\");\nbytes32 public constant TRUSTY_ROLE = keccak256(\"TRUSTY_ROLE\");\nbytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\nuint256 public growth_ratio;\nuint256 public GR_top_band;\nuint256 public GR_bottom_band;\nuint256 public DEI_top_band;\nuint256 public DEI_bottom_band;\nuint256 public last_call_time;\naddress public oracle;\naddress public creator_address;\naddress public deus_address;\naddress public reserve_tracker_address;\nuint8 public constant decimals = 18;\nbool public collateral_ratio_paused = false;\nbool public use_growth_ratio;\nbool public FIP_6;\n","contract":"DEIStablecoin","time":1},{"type":"immutable-restrict-modification ","before":"address public creator_address;","after":"address public immutable creator_address;","contract":"DEIStablecoin","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public price_band;","after":"uint256 public immutable price_band;","contract":"DEIStablecoin","time":1},{"type":"immutable-restrict-modification ","before":"uint8 private _decimals;","after":"uint8 private immutable _decimals;","contract":"ERC20","time":0},{"type":"external-function ","before":"function recollateralizeDEI(RecollateralizeDEI memory inputs) external {\n\t\trequire(recollateralizePaused == false, \"POOL::recollateralizeDEI: Recollateralize is paused\");\n\n\t\trequire(inputs.expireBlock >= block.number, \"POOL::recollateralizeDEI: signature is expired.\");\n\t\tbytes32 sighash = keccak256(abi.encodePacked(\n                                        collateral_address, \n                                        inputs.collateral_price,\n                                        deus_contract_address, \n                                        inputs.deus_current_price, \n                                        inputs.expireBlock,\n\t\t\t\t\t\t\t\t\t\tgetChainID()\n                                    ));\n\t\trequire(IDEIStablecoin(dei_contract_address).verify_price(sighash, inputs.sigs), \"POOL::recollateralizeDEI: invalid signatures\");\n\n\t\tuint256 collateral_amount_d18 = inputs.collateral_amount * (10**missing_decimals);\n\n\t\tuint256 dei_total_supply = IDEIStablecoin(dei_contract_address).totalSupply();\n\t\tuint256 global_collateral_ratio = IDEIStablecoin(dei_contract_address).global_collateral_ratio();\n\t\tuint256 global_collat_value = IDEIStablecoin(dei_contract_address).globalCollateralValue(inputs.collateral_price);\n\n\t\t(uint256 collateral_units, uint256 amount_to_recollat) = poolLibrary.calcRecollateralizeDEIInner(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcollateral_amount_d18,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputs.collateral_price[inputs.collateral_price.length - 1], // pool collateral price exist in last index\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tglobal_collat_value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdei_total_supply,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tglobal_collateral_ratio\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\tuint256 collateral_units_precision = collateral_units / (10**missing_decimals);\n\n\t\tuint256 deus_paid_back = (amount_to_recollat * (uint256(1e6) + bonus_rate - recollat_fee)) / inputs.deus_current_price;\n\n\t\tTransferHelper.safeTransferFrom(\n\t\t\taddress(collateral_token),\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tcollateral_units_precision\n\t\t);\n\t\tIDEUSToken(deus_contract_address).pool_mint(msg.sender, deus_paid_back);\n\t}","after":"function recollateralizeDEI(RecollateralizeDEI calldata inputs) external {\n\t\trequire(recollateralizePaused == false, \"POOL::recollateralizeDEI: Recollateralize is paused\");\n\n\t\trequire(inputs.expireBlock >= block.number, \"POOL::recollateralizeDEI: signature is expired.\");\n\t\tbytes32 sighash = keccak256(abi.encodePacked(\n                                        collateral_address, \n                                        inputs.collateral_price,\n                                        deus_contract_address, \n                                        inputs.deus_current_price, \n                                        inputs.expireBlock,\n\t\t\t\t\t\t\t\t\t\tgetChainID()\n                                    ));\n\t\trequire(IDEIStablecoin(dei_contract_address).verify_price(sighash, inputs.sigs), \"POOL::recollateralizeDEI: invalid signatures\");\n\n\t\tuint256 collateral_amount_d18 = inputs.collateral_amount * (10**missing_decimals);\n\n\t\tuint256 dei_total_supply = IDEIStablecoin(dei_contract_address).totalSupply();\n\t\tuint256 global_collateral_ratio = IDEIStablecoin(dei_contract_address).global_collateral_ratio();\n\t\tuint256 global_collat_value = IDEIStablecoin(dei_contract_address).globalCollateralValue(inputs.collateral_price);\n\n\t\t(uint256 collateral_units, uint256 amount_to_recollat) = poolLibrary.calcRecollateralizeDEIInner(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcollateral_amount_d18,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputs.collateral_price[inputs.collateral_price.length - 1], // pool collateral price exist in last index\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tglobal_collat_value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdei_total_supply,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tglobal_collateral_ratio\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\tuint256 collateral_units_precision = collateral_units / (10**missing_decimals);\n\n\t\tuint256 deus_paid_back = (amount_to_recollat * (uint256(1e6) + bonus_rate - recollat_fee)) / inputs.deus_current_price;\n\n\t\tTransferHelper.safeTransferFrom(\n\t\t\taddress(collateral_token),\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tcollateral_units_precision\n\t\t);\n\t\tIDEUSToken(deus_contract_address).pool_mint(msg.sender, deus_paid_back);\n\t}","contract":"DEIPool","time":0},{"type":"external-function ","before":"function buyBackDEUS(\n\t\tuint256 DEUS_amount,\n\t\tuint256[] memory collateral_price,\n\t\tuint256 deus_current_price,\n\t\tuint256 expireBlock,\n\t\tbytes[] calldata sigs\n\t) external {\n\t\trequire(buyBackPaused == false, \"POOL::buyBackDEUS: Buyback is paused\");\n\t\trequire(expireBlock >= block.number, \"DEI::buyBackDEUS: signature is expired.\");\n\t\tbytes32 sighash = keccak256(abi.encodePacked(\n\t\t\t\t\t\t\t\t\t\tcollateral_address,\n\t\t\t\t\t\t\t\t\t\tcollateral_price,\n\t\t\t\t\t\t\t\t\t\tdeus_contract_address,\n\t\t\t\t\t\t\t\t\t\tdeus_current_price,\n\t\t\t\t\t\t\t\t\t\texpireBlock,\n\t\t\t\t\t\t\t\t\t\tgetChainID()));\n\t\trequire(IDEIStablecoin(dei_contract_address).verify_price(sighash, sigs), \"POOL::buyBackDEUS: invalid signatures\");\n\n\t\tDEIPoolLibrary.BuybackDEUS_Params memory input_params = DEIPoolLibrary.BuybackDEUS_Params(\n\t\t\t\t\t\t\t\t\t\t\t\t\tavailableExcessCollatDV(collateral_price),\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeus_current_price,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcollateral_price[collateral_price.length - 1], // pool collateral price exist in last index\n\t\t\t\t\t\t\t\t\t\t\t\t\tDEUS_amount\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\tuint256 collateral_equivalent_d18 = (poolLibrary.calcBuyBackDEUS(input_params) * (uint256(1e6) - buyback_fee)) / (1e6);\n\t\tuint256 collateral_precision = collateral_equivalent_d18 / (10**missing_decimals);\n\n\t\t// Give the sender their desired collateral and burn the DEUS\n\t\tIDEUSToken(deus_contract_address).pool_burn_from(msg.sender, DEUS_amount);\n\t\tTransferHelper.safeTransfer(\n\t\t\taddress(collateral_token),\n\t\t\tmsg.sender,\n\t\t\tcollateral_precision\n\t\t);\n\t}","after":"function buyBackDEUS(\n\t\tuint256 DEUS_amount,\n\t\tuint256[] calldata collateral_price,\n\t\tuint256 deus_current_price,\n\t\tuint256 expireBlock,\n\t\tbytes[] calldata sigs\n\t) external {\n\t\trequire(buyBackPaused == false, \"POOL::buyBackDEUS: Buyback is paused\");\n\t\trequire(expireBlock >= block.number, \"DEI::buyBackDEUS: signature is expired.\");\n\t\tbytes32 sighash = keccak256(abi.encodePacked(\n\t\t\t\t\t\t\t\t\t\tcollateral_address,\n\t\t\t\t\t\t\t\t\t\tcollateral_price,\n\t\t\t\t\t\t\t\t\t\tdeus_contract_address,\n\t\t\t\t\t\t\t\t\t\tdeus_current_price,\n\t\t\t\t\t\t\t\t\t\texpireBlock,\n\t\t\t\t\t\t\t\t\t\tgetChainID()));\n\t\trequire(IDEIStablecoin(dei_contract_address).verify_price(sighash, sigs), \"POOL::buyBackDEUS: invalid signatures\");\n\n\t\tDEIPoolLibrary.BuybackDEUS_Params memory input_params = DEIPoolLibrary.BuybackDEUS_Params(\n\t\t\t\t\t\t\t\t\t\t\t\t\tavailableExcessCollatDV(collateral_price),\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeus_current_price,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcollateral_price[collateral_price.length - 1], // pool collateral price exist in last index\n\t\t\t\t\t\t\t\t\t\t\t\t\tDEUS_amount\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\tuint256 collateral_equivalent_d18 = (poolLibrary.calcBuyBackDEUS(input_params) * (uint256(1e6) - buyback_fee)) / (1e6);\n\t\tuint256 collateral_precision = collateral_equivalent_d18 / (10**missing_decimals);\n\n\t\t// Give the sender their desired collateral and burn the DEUS\n\t\tIDEUSToken(deus_contract_address).pool_burn_from(msg.sender, DEUS_amount);\n\t\tTransferHelper.safeTransfer(\n\t\t\taddress(collateral_token),\n\t\t\tmsg.sender,\n\t\t\tcollateral_precision\n\t\t);\n\t}","contract":"DEIPool","time":0},{"type":"immutable-restrict-modification ","before":"address private collateral_address;","after":"address private immutable collateral_address;","contract":"DEIPool","time":1},{"type":"immutable-restrict-modification ","before":"address private dei_contract_address;","after":"address private immutable dei_contract_address;","contract":"DEIPool","time":1},{"type":"immutable-restrict-modification ","before":"address private deus_contract_address;","after":"address private immutable deus_contract_address;","contract":"DEIPool","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public pausedPrice = 0;","after":"uint256 public constant pausedPrice = 0;","contract":"DEIPool","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private PRICE_PRECISION = 1e6;","after":"uint256 private constant PRICE_PRECISION = 1e6;","contract":"ReserveTracker","time":0},{"type":"immutable-restrict-modification ","before":"address private dei_contract_address;","after":"address private immutable dei_contract_address;","contract":"ReserveTracker","time":0},{"type":"immutable-restrict-modification ","before":"address private deus_contract_address;","after":"address private immutable deus_contract_address;","contract":"ReserveTracker","time":0}]}
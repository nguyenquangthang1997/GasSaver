{"time":73,"results":[{"type":"external-function ","before":"function multiTransfer(address[] memory to_, uint256[] memory amounts_) public virtual {\n        require(to_.length == amounts_.length, \"ERC20I: To and Amounts length Mismatch!\");\n        for (uint256 i = 0; i < to_.length; i++) {\n            transfer(to_[i], amounts_[i]);\n        }\n    }","after":"function multiTransfer(address[] calldata to_, uint256[] calldata amounts_) public virtual {\n        require(to_.length == amounts_.length, \"ERC20I: To and Amounts length Mismatch!\");\n        for (uint256 i = 0; i < to_.length; i++) {\n            transfer(to_[i], amounts_[i]);\n        }\n    }","contract":"Shell","time":0},{"type":"external-function ","before":"function multiTransferFrom(address[] memory from_, address[] memory to_, uint256[] memory amounts_) public virtual {\n        require(from_.length == to_.length && from_.length == amounts_.length, \"ERC20I: From, To, and Amounts length Mismatch!\");\n        for (uint256 i = 0; i < from_.length; i++) {\n            transferFrom(from_[i], to_[i], amounts_[i]);\n        }\n    }","after":"function multiTransferFrom(address[] calldata from_, address[] calldata to_, uint256[] calldata amounts_) public virtual {\n        require(from_.length == to_.length && from_.length == amounts_.length, \"ERC20I: From, To, and Amounts length Mismatch!\");\n        for (uint256 i = 0; i < from_.length; i++) {\n            transferFrom(from_[i], to_[i], amounts_[i]);\n        }\n    }","contract":"Shell","time":0}]}
{"time":161,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant FLOOR_X_CREEPZ = 0;\nuint256 public constant MAX_SUPPLY = 2223;\nuint256 public constant PER_WALLET_LIMIT = 50;\nuint256 public tokenPrice;\nbool public saleIsActive;\nbool public isPaused;\nstring private name_;\nstring private symbol_;\naddress public signerAddress;\naddress public royaltyAddress;\nuint256 public ROYALTY_SIZE = 500;\nuint256 public ROYALTY_DENOMINATOR = 10000;\nmapping(uint256 => address) private _royaltyReceivers;\nmapping (address => uint256) private _mintedPerAddress;","after":"uint256 public constant FLOOR_X_CREEPZ = 0;\nuint256 public constant MAX_SUPPLY = 2223;\nuint256 public constant PER_WALLET_LIMIT = 50;\nuint256 public tokenPrice;\nstring private name_;\nstring private symbol_;\nuint256 public ROYALTY_SIZE = 500;\nuint256 public ROYALTY_DENOMINATOR = 10000;\nmapping(uint256 => address) private _royaltyReceivers;\nmapping (address => uint256) private _mintedPerAddress;\naddress public signerAddress;\naddress public royaltyAddress;\nbool public saleIsActive;\nbool public isPaused;\n","contract":"FloorXCreepz","time":0},{"type":"external-function ","before":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","after":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","contract":"FloorXCreepz","time":0},{"type":"external-function ","before":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","after":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","contract":"FloorXCreepz","time":0},{"type":"immutable-restrict-modification ","before":"address public signerAddress;","after":"address public immutable signerAddress;","contract":"FloorXCreepz","time":1},{"type":"immutable-restrict-modification ","before":"address public royaltyAddress;","after":"address public immutable royaltyAddress;","contract":"FloorXCreepz","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public ROYALTY_SIZE = 500;","after":"uint256 public constant ROYALTY_SIZE = 500;","contract":"FloorXCreepz","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public ROYALTY_DENOMINATOR = 10000;","after":"uint256 public constant ROYALTY_DENOMINATOR = 10000;","contract":"FloorXCreepz","time":1}]}
{"time":122,"results":[{"type":"external-function ","before":"function whitelistMint(uint16 amount, bytes32[] memory _proof) external payable {\n        if (totalSupply + amount > TOTAL_SUPPLY) revert NoTokensLeft();\n        if (!whitelistMintStarted) revert WhitelistMintNotStarted();\n        if (msg.value < amount * PRICE_PER_WHITELIST_MINT) revert NotEnoughETH();\n        if (amount > maxWhitelistMintAmount) revert TooManyMintAtOnce();\n        if (verifyWhitelist(_leaf(msg.sender), _proof) == false) revert NotOnWhitelist();\n        \n        unchecked {\n            for (uint16 index = 0; index < amount; index++) {\n                _mint(msg.sender, totalSupply + 1);\n                totalSupply++;\n            }\n        }\n    }","after":"function whitelistMint(uint16 amount, bytes32[] calldata _proof) external payable {\n        if (totalSupply + amount > TOTAL_SUPPLY) revert NoTokensLeft();\n        if (!whitelistMintStarted) revert WhitelistMintNotStarted();\n        if (msg.value < amount * PRICE_PER_WHITELIST_MINT) revert NotEnoughETH();\n        if (amount > maxWhitelistMintAmount) revert TooManyMintAtOnce();\n        if (verifyWhitelist(_leaf(msg.sender), _proof) == false) revert NotOnWhitelist();\n        \n        unchecked {\n            for (uint16 index = 0; index < amount; index++) {\n                _mint(msg.sender, totalSupply + 1);\n                totalSupply++;\n            }\n        }\n    }","contract":"PokerDogsClub","time":0},{"type":"external-function ","before":"function reveal(string memory _baseUri) public onlyOwner {\n        setBaseURI(_baseUri);\n        revealed = true;\n    }","after":"function reveal(string calldata _baseUri) public onlyOwner {\n        setBaseURI(_baseUri);\n        revealed = true;\n    }","contract":"PokerDogsClub","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes memory data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }","contract":"PokerDogsClub","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxWhitelistMintAmount = 10;","after":"uint256 public constant maxWhitelistMintAmount = 10;","contract":"PokerDogsClub","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxPublicMintAmount = 20;","after":"uint256 public constant maxPublicMintAmount = 20;","contract":"PokerDogsClub","time":0},{"type":"constant-restrict-modification  ","before":"string public baseExtension = \".json\";","after":"string public constant baseExtension = \".json\";","contract":"PokerDogsClub","time":0}]}
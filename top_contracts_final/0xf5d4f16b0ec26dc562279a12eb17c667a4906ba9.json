{"time":133,"results":[{"type":"external-function ","before":"function mintWithMiniRacer(uint256 amount, uint256[] memory tokensToRedeem) external payable {\n        require(miniRacerSaleStarted(), \"Mini Racer MOGO has not started\");\n\n        require(amount > 0, \"You must mint at least one.\");\n        require(amount >= tokensToRedeem.length, \"You can only redeem as many as you purchase.\");\n\n        // Ensure that the tokens paid for PLUS the number of redeemed mini racer tokens are available\n        // Prevents accidentally over minting beyond 5,555\n        require(totalSupply() + amount + tokensToRedeem.length <= MAX_SUPPLY, \"Racers are sold out!\");\n\n        require(msg.value == PRICE * amount, \"Too little or too much ETH sent\");\n        require(amount <= MAX_PER_MINT, \"Maximum of 5 per transaction\");\n\n        // MOGO: mint one, get one\n        for (uint256 t = 0; t < tokensToRedeem.length; t++) {\n            require(_ownsMiniRacer(tokensToRedeem[t]) == true, \"You must own the mini racer token to redeem it.\");\n            require(\n                miniRacerAvailableToRedeem(tokensToRedeem[t]) == true,\n                \"One of the mini racers was already redeemed.\"\n            );\n            redeemedMiniRacers[tokensToRedeem[t]] = 1;\n            _mintAndIncrement();\n        }\n\n        // Mint what was paid for\n        for (uint256 index = 0; index < amount; index++) {\n            _mintAndIncrement();\n        }\n    }","after":"function mintWithMiniRacer(uint256 amount, uint256[] calldata tokensToRedeem) external payable {\n        require(miniRacerSaleStarted(), \"Mini Racer MOGO has not started\");\n\n        require(amount > 0, \"You must mint at least one.\");\n        require(amount >= tokensToRedeem.length, \"You can only redeem as many as you purchase.\");\n\n        // Ensure that the tokens paid for PLUS the number of redeemed mini racer tokens are available\n        // Prevents accidentally over minting beyond 5,555\n        require(totalSupply() + amount + tokensToRedeem.length <= MAX_SUPPLY, \"Racers are sold out!\");\n\n        require(msg.value == PRICE * amount, \"Too little or too much ETH sent\");\n        require(amount <= MAX_PER_MINT, \"Maximum of 5 per transaction\");\n\n        // MOGO: mint one, get one\n        for (uint256 t = 0; t < tokensToRedeem.length; t++) {\n            require(_ownsMiniRacer(tokensToRedeem[t]) == true, \"You must own the mini racer token to redeem it.\");\n            require(\n                miniRacerAvailableToRedeem(tokensToRedeem[t]) == true,\n                \"One of the mini racers was already redeemed.\"\n            );\n            redeemedMiniRacers[tokensToRedeem[t]] = 1;\n            _mintAndIncrement();\n        }\n\n        // Mint what was paid for\n        for (uint256 index = 0; index < amount; index++) {\n            _mintAndIncrement();\n        }\n    }","contract":"TronicRacer","time":0},{"type":"external-function ","before":"function setCID(string memory _cid) external onlyOwner {\n        cid = _cid;\n    }","after":"function setCID(string calldata _cid) external onlyOwner {\n        cid = _cid;\n    }","contract":"TronicRacer","time":0},{"type":"external-function ","before":"function setContractURI(string memory uri) public virtual onlyOwner {\n        _contractURI = uri;\n    }","after":"function setContractURI(string calldata uri) public virtual onlyOwner {\n        _contractURI = uri;\n    }","contract":"TronicRacer","time":0},{"type":"immutable-restrict-modification ","before":"address public miniRacerContractAddress;","after":"address public immutable miniRacerContractAddress;","contract":"TronicRacer","time":0}]}
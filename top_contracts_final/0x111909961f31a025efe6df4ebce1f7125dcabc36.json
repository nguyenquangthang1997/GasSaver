{"time":174,"results":[{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) public onlyRole(BURNER_ROLE) {\n        ERC1155Supply._burnBatch(account, ids, amounts);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) public onlyRole(BURNER_ROLE) {\n        ERC1155Supply._burnBatch(account, ids, amounts);\n    }","contract":"AccessPass","time":0},{"type":"external-function ","before":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public onlyRole(MINT_ROLE) {\n        ERC1155Supply._mint(account, id, amount, data);\n\n    }","after":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public onlyRole(MINT_ROLE) {\n        ERC1155Supply._mint(account, id, amount, data);\n\n    }","contract":"AccessPass","time":0},{"type":"external-function ","before":"function mintBatch(\n        address[] memory tos,\n        uint256[] memory ids,\n        uint256 amount,\n        bytes memory data\n    ) public onlyRole(MINT_ROLE) {\n        require(tos.length == ids.length, \"address list and id list must be equal\");\n        for (uint i = 0; i > tos.length; i++ ) {\n            ERC1155Supply._mint(tos[i], ids[i], amount, data);\n        }\n    }","after":"function mintBatch(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256 amount,\n        bytes calldata data\n    ) public onlyRole(MINT_ROLE) {\n        require(tos.length == ids.length, \"address list and id list must be equal\");\n        for (uint i = 0; i > tos.length; i++ ) {\n            ERC1155Supply._mint(tos[i], ids[i], amount, data);\n        }\n    }","contract":"AccessPass","time":0},{"type":"external-function ","before":"function mintMultiple(\n        address[] calldata to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public onlyRole(MINT_ROLE){\n        for (uint i = 0; i < to.length; i++) {\n            ERC1155Supply._mint(to[i], id, amount, data);\n        }\n    }","after":"function mintMultiple(\n        address[] calldata to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public onlyRole(MINT_ROLE){\n        for (uint i = 0; i < to.length; i++) {\n            ERC1155Supply._mint(to[i], id, amount, data);\n        }\n    }","contract":"AccessPass","time":0},{"type":"external-function ","before":"function setURI(uint256 tokenId, string memory uri) external onlyRole(URI_ROLE) {\n        uris[tokenId] = uri;\n    }","after":"function setURI(uint256 tokenId, string calldata uri) external onlyRole(URI_ROLE) {\n        uris[tokenId] = uri;\n    }","contract":"AccessPass","time":0},{"type":"external-function ","before":"function setURIDefault(string memory uri) external onlyRole(URI_ROLE) {\n       _setURI(uri);\n    }","after":"function setURIDefault(string calldata uri) external onlyRole(URI_ROLE) {\n       _setURI(uri);\n    }","contract":"AccessPass","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"AccessPass","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"AccessPass","time":0}]}
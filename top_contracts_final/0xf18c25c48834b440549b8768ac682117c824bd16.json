{"time":117,"results":[{"type":"external-function ","before":"      } else {\n                // Hash(current element of the proof + current computed hash)\n   ","after":"      } else {\n                // Hash(current element of the proof + current computed hash)\n   ","contract":"notasecretproject","time":0},{"type":"external-function ","before":"        uint256 totalSupply = _owners.length;\n        require(totalSupply + count < 10000, \"Excedes max supply.\");\n        require(count < MAX_PER_TX, \"Exceeds max per transaction.\");\n        require(count * priceInW","after":"        uint256 totalSupply = _owners.length;\n        require(totalSupply + count < 10000, \"Excedes max supply.\");\n        require(count < MAX_PER_TX, \"Exceeds max per transaction.\");\n        require(count * priceInW","contract":"notasecretproject","time":0},{"type":"external-function ","before":"msg.value, \"Invalid funds provided.\");\n    \n        for(uint i; i < count; i++) { \n            _mint(_msgSender(), totalSupply + i);\n        }\n    }\n    \n    function getScavengeRate(uint256 tokenId) public view returns (uint256) {\n        require(was","after":"msg.value, \"Invalid funds provided.\");\n    \n        for(uint i; i < count; i++) { \n            _mint(_msgSender(), totalSupply + i);\n        }\n    }\n    \n    function getScavengeRate(uint256 tokenId) public view returns (uint256) {\n        require(was","contract":"notasecretproject","time":0},{"type":"immutable-restrict-modification ","before":" tree up\n     * from `leaf` using `pro","after":" tree up\n     * from `leaf` using `pro","contract":"notasecretproject","time":0}]}
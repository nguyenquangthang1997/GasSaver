{"time":192,"results":[{"type":"state-data-arrangement ","before":"\naddress _signerAddress;\nuint _tokenIdCounter = 10;\nuint constant MAX_SUPPLY = 5545;\nuint constant MAX_TO_MINT = 10;\nuint constant PRE_SALE_MAX_TO_MINT = 10;\nuint public price = 0.1 ether;\nbool public hasSaleStarted = false;\nbool public hasPreSaleStarted = false;\nmapping(address => uint) public _addressToMintedTokens;\nmapping(address => bool) public _addressToMintedFree;","after":"uint _tokenIdCounter = 10;\nuint constant MAX_SUPPLY = 5545;\nuint constant MAX_TO_MINT = 10;\nuint constant PRE_SALE_MAX_TO_MINT = 10;\nuint public price = 0.1 ether;\nmapping(address => uint) public _addressToMintedTokens;\nmapping(address => bool) public _addressToMintedFree;\naddress _signerAddress;\nbool public hasSaleStarted = false;\nbool public hasPreSaleStarted = false;\n","contract":"GenAI","time":0},{"type":"external-function ","before":"function batchGoldenMint(address[] memory recipients) public onlyOwner {\n        require(recipients.length == 10, \"recipent list must have 10 addresses\");\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n            _safeMint(recipients[i], i);\n        }\n    }","after":"function batchGoldenMint(address[] calldata recipients) public onlyOwner {\n        require(recipients.length == 10, \"recipent list must have 10 addresses\");\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n            _safeMint(recipients[i], i);\n        }\n    }","contract":"GenAI","time":0},{"type":"external-function ","before":"function batchMint(address[] memory receivers, uint[] memory quantities) external onlyOwner {\n        require(receivers.length == quantities.length, \"receivers and quantities must be the same length\");\n        for (uint i = 0; i < receivers.length; i++) {\n            for (uint j = 0; j < quantities[i]; j++) {\n                safeMint(receivers[i]);\n            }\n        }\n    }","after":"function batchMint(address[] calldata receivers, uint[] calldata quantities) external onlyOwner {\n        require(receivers.length == quantities.length, \"receivers and quantities must be the same length\");\n        for (uint i = 0; i < receivers.length; i++) {\n            for (uint j = 0; j < quantities[i]; j++) {\n                safeMint(receivers[i]);\n            }\n        }\n    }","contract":"GenAI","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) public onlyOwner {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) public onlyOwner {\n        _setBaseURI(_baseURI);\n    }","contract":"GenAI","time":0}]}
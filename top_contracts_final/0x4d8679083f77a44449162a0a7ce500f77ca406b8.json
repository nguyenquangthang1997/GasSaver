{"time":117,"results":[{"type":"external-function ","before":"function MintPudgyHalloween(uint256[] memory _tokenIds) public {\r\n\r\n        require(block.timestamp >= startEvent, \"Event not started\");\r\n        require(block.timestamp <= endEvent, \"Event ended\");\r\n\r\n        address wallet = _msgSender();\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            uint256  _tokenId = _tokenIds[i];\r\n            require(pudgyPenguins.ownerOf(_tokenId) == wallet, \"Bad owner!\");\r\n            require(canClaim(_tokenId), \"Already Claimed!\");\r\n\r\n            _pudgyPenguinsUsed[_tokenId] = true;\r\n\r\n            uint256 id = getRandomPudgyHalloween(_tokenId);\r\n\r\n            _pudgyHalloweenIds[_tokenId] = id;\r\n\r\n            _mint(wallet, id, 1, \"\");\r\n        }\r\n\r\n    }","after":"function MintPudgyHalloween(uint256[] calldata _tokenIds) public {\r\n\r\n        require(block.timestamp >= startEvent, \"Event not started\");\r\n        require(block.timestamp <= endEvent, \"Event ended\");\r\n\r\n        address wallet = _msgSender();\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            uint256  _tokenId = _tokenIds[i];\r\n            require(pudgyPenguins.ownerOf(_tokenId) == wallet, \"Bad owner!\");\r\n            require(canClaim(_tokenId), \"Already Claimed!\");\r\n\r\n            _pudgyPenguinsUsed[_tokenId] = true;\r\n\r\n            uint256 id = getRandomPudgyHalloween(_tokenId);\r\n\r\n            _pudgyHalloweenIds[_tokenId] = id;\r\n\r\n            _mint(wallet, id, 1, \"\");\r\n        }\r\n\r\n    }","contract":"PudgyHalloween","time":0},{"type":"external-function ","before":"function customOwnerAirdrop(address[] memory _wallets, uint256 _id, uint256 _count) public onlyOwner{\r\n        for(uint256 i = 0; i < _wallets.length; i++){\r\n            _mint(_wallets[i], _id, _count, \"\");\r\n        }\r\n    }","after":"function customOwnerAirdrop(address[] calldata _wallets, uint256 _id, uint256 _count) public onlyOwner{\r\n        for(uint256 i = 0; i < _wallets.length; i++){\r\n            _mint(_wallets[i], _id, _count, \"\");\r\n        }\r\n    }","contract":"PudgyHalloween","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"PudgyHalloween","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"PudgyHalloween","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private RANDOM_SEED = 5718512354;","after":"uint256 private constant RANDOM_SEED = 5718512354;","contract":"PudgyHalloween","time":1}]}
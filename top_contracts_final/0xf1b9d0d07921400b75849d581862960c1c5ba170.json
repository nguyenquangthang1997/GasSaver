{"time":179,"results":[{"type":"state-data-arrangement ","before":"\naddress dataContract;\nmapping(address => uint256) private _whitelistMinters;\nstring internal baseTokenURI;\nstring internal baseTokenURI_extension;\nuint public constant maxTokens = 500;\nuint public total = 0;\nuint mintCost = 0.05 ether;\nbool whitelistActive;\nbool sysAdminMinted;\nbool error404Minted;\nbool code200Minted;\nbool giveawaysMinted;\naddress error404Address;\naddress code200Address;\naddress giveawaysAddress;\nbytes32 _rootHash;\nstring[] private rarity = [\n        \"Legendary\",\n        \"Epic\",\n        \"Rare\",\n        \"Uncommon\",\n        \"Common\"\n    ];\nstring[] private numberOfItemsInside = [\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\"\n    ];\nstring[] private creditsMultiplier = [\n        \"Ultra\",\n        \"Very high\",\n        \"High\",\n        \"Medium\",\n        \"Low\"\n    ];\nstring[] private creditsAmount = [\n        \"Ultra\",\n        \"Very high\",\n        \"High\",\n        \"Medium\",\n        \"Low\"\n    ];\nstring[] private firstItemRarity = [\n        \"Legendary\",\n        \"Epic\",\n        \"Rare\",\n        \"Uncommon\",\n        \"Common\"\n    ];\nstring[] private secondItemRarity = [\n        \"Legendary\",\n        \"Epic\",\n        \"Rare\",\n        \"Uncommon\",\n        \"Common\"\n    ];\nstring[] private firstItemClass = [\n        \"Computer\",\n        \"Weapon\",\n        \"Keylogger\",\n        \"Rainbow tables\",\n        \"Packet sniffer\",\n        \"Smartphone\",\n        \"De-auth device\",\n        \"NFC device\",\n        \"RFID blocker\",\n        \"Drone\",\n        \"Screen crab\",\n        \"Programmable chip\",\n        \"Lockpick\",\n        \"Land\",\n        \"Armor\",\n        \"Clothing\",\n        \"CD device\",\n        \"USB device\",\n        \"Floppy disc\",\n        \"- None -\"\n    ];\nbytes32 internal keyHash;\nuint internal fee;\nuint internal randomResult;\nuint[maxTokens] internal indices;\nuint32 internal nonce;","after":"mapping(address => uint256) private _whitelistMinters;\nstring internal baseTokenURI;\nstring internal baseTokenURI_extension;\nuint public constant maxTokens = 500;\nuint public total = 0;\nuint mintCost = 0.05 ether;\nbytes32 _rootHash;\nstring[] private rarity = [\n        \"Legendary\",\n        \"Epic\",\n        \"Rare\",\n        \"Uncommon\",\n        \"Common\"\n    ];\nstring[] private numberOfItemsInside = [\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\"\n    ];\nstring[] private creditsMultiplier = [\n        \"Ultra\",\n        \"Very high\",\n        \"High\",\n        \"Medium\",\n        \"Low\"\n    ];\nstring[] private creditsAmount = [\n        \"Ultra\",\n        \"Very high\",\n        \"High\",\n        \"Medium\",\n        \"Low\"\n    ];\nstring[] private firstItemRarity = [\n        \"Legendary\",\n        \"Epic\",\n        \"Rare\",\n        \"Uncommon\",\n        \"Common\"\n    ];\nstring[] private secondItemRarity = [\n        \"Legendary\",\n        \"Epic\",\n        \"Rare\",\n        \"Uncommon\",\n        \"Common\"\n    ];\nstring[] private firstItemClass = [\n        \"Computer\",\n        \"Weapon\",\n        \"Keylogger\",\n        \"Rainbow tables\",\n        \"Packet sniffer\",\n        \"Smartphone\",\n        \"De-auth device\",\n        \"NFC device\",\n        \"RFID blocker\",\n        \"Drone\",\n        \"Screen crab\",\n        \"Programmable chip\",\n        \"Lockpick\",\n        \"Land\",\n        \"Armor\",\n        \"Clothing\",\n        \"CD device\",\n        \"USB device\",\n        \"Floppy disc\",\n        \"- None -\"\n    ];\nbytes32 internal keyHash;\nuint internal fee;\nuint internal randomResult;\nuint[maxTokens] internal indices;\naddress dataContract;\naddress error404Address;\naddress code200Address;\naddress giveawaysAddress;\nuint32 internal nonce;\nbool whitelistActive;\nbool sysAdminMinted;\nbool error404Minted;\nbool code200Minted;\nbool giveawaysMinted;\n","contract":"ConsoleNFT_Vault","time":9},{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) external onlyOwner {\n        baseTokenURI = _uri;\n    }","after":"function setBaseTokenURI(string calldata _uri) external onlyOwner {\n        baseTokenURI = _uri;\n    }","contract":"ConsoleNFT_Vault","time":0},{"type":"external-function ","before":"function setBaseTokenURI_extension(string memory _ext) external onlyOwner {\n        baseTokenURI_extension = _ext;\n    }","after":"function setBaseTokenURI_extension(string calldata _ext) external onlyOwner {\n        baseTokenURI_extension = _ext;\n    }","contract":"ConsoleNFT_Vault","time":0},{"type":"external-function ","before":"function whitelistClaim(bytes32[] memory proof) public nonReentrant payable {\n        require(whitelistActive, \"The whitelist is not active yet\");\n        require(total < maxTokens, \"All tokens have been already minted\");\n\t\trequire(msg.value >= mintCost, \"Incorrect mint cost value\");\n\t\t\n\t\t// Merkle tree validation\n\t\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n\t\trequire(MerkleProof.verify(proof, _rootHash, leaf), \"Invalid proof\");\n\t\t\n        require(_whitelistMinters[_msgSender()] < 1, \"You've already minted\");\n\t\t\n\t\tuint tokenId = getVRFRandomIndex();\n        total++;\n\n        _safeMint(_msgSender(), tokenId);\n\n        //Set the _whitelistMinters value to tokenId for this address as it has minted\n        _whitelistMinters[_msgSender()] = tokenId;\n    }","after":"function whitelistClaim(bytes32[] calldata proof) public nonReentrant payable {\n        require(whitelistActive, \"The whitelist is not active yet\");\n        require(total < maxTokens, \"All tokens have been already minted\");\n\t\trequire(msg.value >= mintCost, \"Incorrect mint cost value\");\n\t\t\n\t\t// Merkle tree validation\n\t\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n\t\trequire(MerkleProof.verify(proof, _rootHash, leaf), \"Invalid proof\");\n\t\t\n        require(_whitelistMinters[_msgSender()] < 1, \"You've already minted\");\n\t\t\n\t\tuint tokenId = getVRFRandomIndex();\n        total++;\n\n        _safeMint(_msgSender(), tokenId);\n\n        //Set the _whitelistMinters value to tokenId for this address as it has minted\n        _whitelistMinters[_msgSender()] = tokenId;\n    }","contract":"ConsoleNFT_Vault","time":0},{"type":"constant-restrict-modification  ","before":"uint mintCost = 0.05 ether;","after":"uint constant mintCost = 0.05 ether;","contract":"ConsoleNFT_Vault","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"ConsoleNFT_Vault","time":0},{"type":"immutable-restrict-modification ","before":"uint internal fee;","after":"uint internal immutable fee;","contract":"ConsoleNFT_Vault","time":0}]}
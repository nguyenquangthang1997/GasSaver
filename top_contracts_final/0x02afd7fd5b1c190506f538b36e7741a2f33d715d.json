{"time":76,"results":[{"type":"external-function ","before":"function setBio(string memory bio, uint256 tokenID)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        // check that the caller is either an owner or admin\n        bool isOwner = isOwnerOfKong(tokenID);\n        require(msg.sender == admin || isOwner, \"KongNaming::unauthorized\");\n\n        // if this is the first time the bio is set, mark that the\n        // next time won't be and set the bio\n        if (bioWasSet[tokenID] == false) {\n            bioWasSet[tokenID] = true;\n        } else {\n            // if it was the owner that called the function, require\n            // the payment\n            if (isOwner) {\n                require(\n                    msg.value == changePrice,\n                    \"KongNaming::insufficient ether sent\"\n                );\n            }\n        }\n\n        bios[tokenID] = bio;\n        emit IKongNaming.SetBio(tokenID, bio);\n    }","after":"function setBio(string calldata bio, uint256 tokenID)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        // check that the caller is either an owner or admin\n        bool isOwner = isOwnerOfKong(tokenID);\n        require(msg.sender == admin || isOwner, \"KongNaming::unauthorized\");\n\n        // if this is the first time the bio is set, mark that the\n        // next time won't be and set the bio\n        if (bioWasSet[tokenID] == false) {\n            bioWasSet[tokenID] = true;\n        } else {\n            // if it was the owner that called the function, require\n            // the payment\n            if (isOwner) {\n                require(\n                    msg.value == changePrice,\n                    \"KongNaming::insufficient ether sent\"\n                );\n            }\n        }\n\n        bios[tokenID] = bio;\n        emit IKongNaming.SetBio(tokenID, bio);\n    }","contract":"KongNaming","time":0},{"type":"external-function ","before":"function setNameAndBio(\n        bytes32 name,\n        string memory bio,\n        uint256 tokenID\n    ) external payable override nonReentrant {\n        bool isOwner = isOwnerOfKong(tokenID);\n        require(msg.sender == admin || isOwner, \"KongNaming::unauthorized\");\n\n        uint256 payableSets = 0;\n\n        if (bioWasSet[tokenID] == false) {\n            bioWasSet[tokenID] = true;\n        } else {\n            payableSets += 1;\n        }\n\n        if (nameWasSet[tokenID] == false) {\n            nameWasSet[tokenID] = true;\n        } else {\n            payableSets += 1;\n        }\n\n        if (isOwner) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n\n        names[tokenID] = name;\n        bios[tokenID] = bio;\n        emit IKongNaming.SetName(tokenID, name);\n        emit IKongNaming.SetBio(tokenID, bio);\n    }","after":"function setNameAndBio(\n        bytes32 name,\n        string calldata bio,\n        uint256 tokenID\n    ) external payable override nonReentrant {\n        bool isOwner = isOwnerOfKong(tokenID);\n        require(msg.sender == admin || isOwner, \"KongNaming::unauthorized\");\n\n        uint256 payableSets = 0;\n\n        if (bioWasSet[tokenID] == false) {\n            bioWasSet[tokenID] = true;\n        } else {\n            payableSets += 1;\n        }\n\n        if (nameWasSet[tokenID] == false) {\n            nameWasSet[tokenID] = true;\n        } else {\n            payableSets += 1;\n        }\n\n        if (isOwner) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n\n        names[tokenID] = name;\n        bios[tokenID] = bio;\n        emit IKongNaming.SetName(tokenID, name);\n        emit IKongNaming.SetBio(tokenID, bio);\n    }","contract":"KongNaming","time":0},{"type":"external-function ","before":"function batchSetName(bytes32[] memory _names, uint256[] memory tokenIDs)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        // sanity checks\n        require(\n            _names.length == tokenIDs.length,\n            \"KongNaming::different length names and tokenIDs\"\n        );\n        // returns true if the sender is owner of all the passed tokenIDs\n        bool ownerOfAllKongs = isOwnerOfKongs(tokenIDs);\n        // require the caller to be the owner of all of the tokenIDs or be\n        // an admin\n        require(\n            msg.sender == admin || ownerOfAllKongs,\n            \"KongNaming::unauthorized\"\n        );\n\n        // counter to check how much ether should be sent\n        uint256 payableSets = 0;\n\n        for (uint256 i = 0; i < _names.length; i) {\n            if (nameWasSet[tokenIDs[i]] == false) {\n                nameWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n\n            names[tokenIDs[i]] = _names[i];\n            emit IKongNaming.SetName(tokenIDs[i], _names[i]);\n        }\n\n        // if it is owner who called, ensure that they have sent adequate\n        // payment\n        if (ownerOfAllKongs) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n    }","after":"function batchSetName(bytes32[] calldata _names, uint256[] calldata tokenIDs)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        // sanity checks\n        require(\n            _names.length == tokenIDs.length,\n            \"KongNaming::different length names and tokenIDs\"\n        );\n        // returns true if the sender is owner of all the passed tokenIDs\n        bool ownerOfAllKongs = isOwnerOfKongs(tokenIDs);\n        // require the caller to be the owner of all of the tokenIDs or be\n        // an admin\n        require(\n            msg.sender == admin || ownerOfAllKongs,\n            \"KongNaming::unauthorized\"\n        );\n\n        // counter to check how much ether should be sent\n        uint256 payableSets = 0;\n\n        for (uint256 i = 0; i < _names.length; i) {\n            if (nameWasSet[tokenIDs[i]] == false) {\n                nameWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n\n            names[tokenIDs[i]] = _names[i];\n            emit IKongNaming.SetName(tokenIDs[i], _names[i]);\n        }\n\n        // if it is owner who called, ensure that they have sent adequate\n        // payment\n        if (ownerOfAllKongs) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n    }","contract":"KongNaming","time":0},{"type":"external-function ","before":"function batchSetBio(string[] memory _bios, uint256[] memory tokenIDs)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        require(\n            _bios.length == tokenIDs.length,\n            \"KongNaming::different length bios and tokenIDs\"\n        );\n        bool ownerOfAllKongs = isOwnerOfKongs(tokenIDs);\n        require(\n            msg.sender == admin || ownerOfAllKongs,\n            \"KongNaming::not authorized\"\n        );\n\n        uint256 payableSets = 0;\n\n        for (uint256 i = 0; i < _bios.length; i) {\n            if (bioWasSet[tokenIDs[i]] == false) {\n                bioWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n\n            bios[tokenIDs[i]] = _bios[i];\n            emit IKongNaming.SetBio(tokenIDs[i], _bios[i]);\n        }\n\n        if (ownerOfAllKongs) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n    }","after":"function batchSetBio(string[] calldata _bios, uint256[] calldata tokenIDs)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        require(\n            _bios.length == tokenIDs.length,\n            \"KongNaming::different length bios and tokenIDs\"\n        );\n        bool ownerOfAllKongs = isOwnerOfKongs(tokenIDs);\n        require(\n            msg.sender == admin || ownerOfAllKongs,\n            \"KongNaming::not authorized\"\n        );\n\n        uint256 payableSets = 0;\n\n        for (uint256 i = 0; i < _bios.length; i) {\n            if (bioWasSet[tokenIDs[i]] == false) {\n                bioWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n\n            bios[tokenIDs[i]] = _bios[i];\n            emit IKongNaming.SetBio(tokenIDs[i], _bios[i]);\n        }\n\n        if (ownerOfAllKongs) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n    }","contract":"KongNaming","time":0},{"type":"external-function ","before":"function batchSetNameAndBio(\n        bytes32[] memory _names,\n        string[] memory _bios,\n        uint256[] memory tokenIDs\n    ) external payable override nonReentrant {\n        require(\n            _names.length == _bios.length,\n            \"KongNaming::different length names and bios\"\n        );\n        require(\n            _bios.length == tokenIDs.length,\n            \"KongNaming::different length bios and tokenIDs\"\n        );\n        bool ownerOfAllKongs = isOwnerOfKongs(tokenIDs);\n        require(\n            msg.sender == admin || ownerOfAllKongs,\n            \"KongNaming::not authorized\"\n        );\n\n        uint256 payableSets = 0;\n\n        for (uint256 i = 0; i < _names.length; i++) {\n            if (bioWasSet[tokenIDs[i]] == false) {\n                bioWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n            if (nameWasSet[tokenIDs[i]] == false) {\n                nameWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n\n            names[tokenIDs[i]] = _names[i];\n            bios[tokenIDs[i]] = _bios[i];\n            emit IKongNaming.SetName(tokenIDs[i], _names[i]);\n            emit IKongNaming.SetBio(tokenIDs[i], _bios[i]);\n        }\n\n        if (ownerOfAllKongs) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n    }","after":"function batchSetNameAndBio(\n        bytes32[] calldata _names,\n        string[] calldata _bios,\n        uint256[] calldata tokenIDs\n    ) external payable override nonReentrant {\n        require(\n            _names.length == _bios.length,\n            \"KongNaming::different length names and bios\"\n        );\n        require(\n            _bios.length == tokenIDs.length,\n            \"KongNaming::different length bios and tokenIDs\"\n        );\n        bool ownerOfAllKongs = isOwnerOfKongs(tokenIDs);\n        require(\n            msg.sender == admin || ownerOfAllKongs,\n            \"KongNaming::not authorized\"\n        );\n\n        uint256 payableSets = 0;\n\n        for (uint256 i = 0; i < _names.length; i++) {\n            if (bioWasSet[tokenIDs[i]] == false) {\n                bioWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n            if (nameWasSet[tokenIDs[i]] == false) {\n                nameWasSet[tokenIDs[i]] = true;\n            } else {\n                payableSets += 1;\n            }\n\n            names[tokenIDs[i]] = _names[i];\n            bios[tokenIDs[i]] = _bios[i];\n            emit IKongNaming.SetName(tokenIDs[i], _names[i]);\n            emit IKongNaming.SetBio(tokenIDs[i], _bios[i]);\n        }\n\n        if (ownerOfAllKongs) {\n            require(\n                msg.value == payableSets * changePrice,\n                \"KongNaming::insufficient ether sent\"\n            );\n        }\n    }","contract":"KongNaming","time":0}]}
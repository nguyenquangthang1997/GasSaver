{"time":248,"results":[{"type":"loop-duplication","before":"\nstart line 554 column 8, end line 562 column 8\nfor (uint256 i = 0; i < length; i++) {\n            uint256 vote = _charityInfos[i].vote;\n            if (maxVote == vote) {\n                count++;\n            } else if (maxVote < vote) {\n                maxVote = vote;\n                count = 1;\n            }\n        }\nstart line 564 column 8, end line 577 column 8\nfor (uint256 i = 0; i < length; i++) {\n            CharityInfo memory info = _charityInfos[i];\n            if (info.vote == maxVote) {\n                info.ratio = 1e4 / count;\n\n                uint256 amount = charityAmount / count;\n                if (safeTransferETH(info.pool, amount)) {\n                    emit ClaimedCharity(info.charity, info.pool, amount);\n                }\n            } else {\n                info.ratio = 0;\n            }\n            charityInfos.push(info);\n        }","after":"// merge loop\n\nstart line 554 column 8, end line 562 column 8\nfor (uint256 i = 0; i < length; i++) {\n            uint256 vote = _charityInfos[i].vote;\n            if (maxVote == vote) {\n                count++;\n            } else if (maxVote < vote) {\n                maxVote = vote;\n                count = 1;\n            }\n        }\nstart line 564 column 8, end line 577 column 8\nfor (uint256 i = 0; i < length; i++) {\n            CharityInfo memory info = _charityInfos[i];\n            if (info.vote == maxVote) {\n                info.ratio = 1e4 / count;\n\n                uint256 amount = charityAmount / count;\n                if (safeTransferETH(info.pool, amount)) {\n                    emit ClaimedCharity(info.charity, info.pool, amount);\n                }\n            } else {\n                info.ratio = 0;\n            }\n            charityInfos.push(info);\n        }","contract":"Jigsaw1","time":0},{"type":"state-data-arrangement ","before":"\nuint256 public constant jigsawPresale = 750;\nuint256 public constant jigsawFiat = 2000;\nuint256 public constant jigsawTotal = 5632;\nuint256 public constant MAX_WHITELISTED_MINTED_NUMBER = 2;\nuint256 public constant MAX_MINTED_NUMBER = 10;\nmapping(address => uint256) public hasMinted;\nmapping(address => bool) public privateSaleEntries;\nuint256 public price = 0.11 ether;\naddress public finalBadgeContractAddress;\nuint256 public MAX_FINAL_PUZZLE_PICTURE_NUMBER;\naddress[] public finalOwners;\nuint256[][] public finalOwnersTokenIds ;\nuint256 public finalPictureTokenIds;\nmapping(address => uint256) public hasReceivedFinalPictureNft;\nstring private _tokenFinalPictureBaseURI = '';\nstring private _tokenBaseURI = '';\nuint256 public constant communityRatio = 2000;\nbytes32 public communityRoot;\nmapping(address => bool) public isClaimedCommunity;\nuint256 public constant charityRatio = 2000;\nCharityInfo[] public charityInfos;\nuint256 public constant boredRatio = 6000;\naddress payable public boredAddress;\nuint256 public publicCounter;\nuint256 public fiatCounter;\nuint256 public fiatFee;\nuint256 public privateCounter;\nuint256 public privateSaleBegin = 9999999990;\nuint256 public fiatSaleBegin = 9999999991;\nuint256 public publicSaleBegin = 9999999992;\nuint256 public constant period = 5 days;\nuint256 public startedAt;\nuint256 public endedAt;\nbool public editable;\nuint256 public totalFee;\nuint256 public estimatedGasForMint = 0;","after":"uint256 public constant jigsawPresale = 750;\nuint256 public constant jigsawFiat = 2000;\nuint256 public constant jigsawTotal = 5632;\nuint256 public constant MAX_WHITELISTED_MINTED_NUMBER = 2;\nuint256 public constant MAX_MINTED_NUMBER = 10;\nmapping(address => uint256) public hasMinted;\nmapping(address => bool) public privateSaleEntries;\nuint256 public price = 0.11 ether;\nuint256 public MAX_FINAL_PUZZLE_PICTURE_NUMBER;\naddress[] public finalOwners;\nuint256[][] public finalOwnersTokenIds ;\nuint256 public finalPictureTokenIds;\nmapping(address => uint256) public hasReceivedFinalPictureNft;\nstring private _tokenFinalPictureBaseURI = '';\nstring private _tokenBaseURI = '';\nuint256 public constant communityRatio = 2000;\nbytes32 public communityRoot;\nmapping(address => bool) public isClaimedCommunity;\nuint256 public constant charityRatio = 2000;\nCharityInfo[] public charityInfos;\nuint256 public constant boredRatio = 6000;\nuint256 public publicCounter;\nuint256 public fiatCounter;\nuint256 public fiatFee;\nuint256 public privateCounter;\nuint256 public privateSaleBegin = 9999999990;\nuint256 public fiatSaleBegin = 9999999991;\nuint256 public publicSaleBegin = 9999999992;\nuint256 public constant period = 5 days;\nuint256 public startedAt;\nuint256 public endedAt;\nuint256 public totalFee;\nuint256 public estimatedGasForMint = 0;\naddress public finalBadgeContractAddress;\naddress payable public boredAddress;\nbool public editable;\n","contract":"Jigsaw1","time":0},{"type":"external-function ","before":"function safeMint(address[] memory _to, uint256[] memory _nftCount)\n        external\n        payable\n        onlyOwner{\n        require(\n            block.timestamp >= fiatSaleBegin || privateCounter >= jigsawPresale,\n            'ER: Fiat sale is not started'\n        );\n        require(\n            block.timestamp < publicSaleBegin,\n            'ER: Fiat sale is currently closed'\n        );\n\n        uint256 totalAccounts = _to.length;\n\n        for (uint256 i = 0; i < totalAccounts; i++) {\n            address to = _to[i];\n\n            uint256 totalTokensToMint = _nftCount[i];\n            //minting multiple tokens for individual\n            for (uint256 j = 0; j < totalTokensToMint; j++) {\n                if (hasMinted[to] < MAX_MINTED_NUMBER) {\n                    require(\n                        totalSupply() < jigsawTotal,\n                        'ER: The sale is sold out'\n                    );\n                    require(\n                        fiatCounter < jigsawFiat,\n                        'ER: Not enough Jigsaws left for the fiat sale'\n                    );\n\n                    fiatCounter++;\n                    hasMinted[to] += 1;\n                    //as tx.gasprice is price for the \n                    uint256 mintFee = price - tx.gasprice * estimatedGasForMint;\n                    totalFee += mintFee;\n                    fiatFee += price;\n                    _safeMint(to, totalSupply() + 1);\n                } else break;\n            }\n        }\n        // totalFee -= tx.gasprice * estimatedGasForMint;\n        // totalFee += msg.value;\n    }","after":"function safeMint(address[] calldata _to, uint256[] calldata _nftCount)\n        external\n        payable\n        onlyOwner{\n        require(\n            block.timestamp >= fiatSaleBegin || privateCounter >= jigsawPresale,\n            'ER: Fiat sale is not started'\n        );\n        require(\n            block.timestamp < publicSaleBegin,\n            'ER: Fiat sale is currently closed'\n        );\n\n        uint256 totalAccounts = _to.length;\n\n        for (uint256 i = 0; i < totalAccounts; i++) {\n            address to = _to[i];\n\n            uint256 totalTokensToMint = _nftCount[i];\n            //minting multiple tokens for individual\n            for (uint256 j = 0; j < totalTokensToMint; j++) {\n                if (hasMinted[to] < MAX_MINTED_NUMBER) {\n                    require(\n                        totalSupply() < jigsawTotal,\n                        'ER: The sale is sold out'\n                    );\n                    require(\n                        fiatCounter < jigsawFiat,\n                        'ER: Not enough Jigsaws left for the fiat sale'\n                    );\n\n                    fiatCounter++;\n                    hasMinted[to] += 1;\n                    //as tx.gasprice is price for the \n                    uint256 mintFee = price - tx.gasprice * estimatedGasForMint;\n                    totalFee += mintFee;\n                    fiatFee += price;\n                    _safeMint(to, totalSupply() + 1);\n                } else break;\n            }\n        }\n        // totalFee -= tx.gasprice * estimatedGasForMint;\n        // totalFee += msg.value;\n    }","contract":"Jigsaw1","time":0},{"type":"external-function ","before":"function claimCommunity(\n        address _account,\n        uint256 _percent,\n        bytes32[] memory _proof\n    ) external {\n        require(endedAt > 0, 'ER: Game is not ended yet');\n        require(!isClaimedCommunity[_account], 'ER: Community claimed already');\n        bytes32 leaf = keccak256(abi.encodePacked(_account, _percent));\n        require(MerkleProof.verify(_proof, communityRoot, leaf), \"ER: Community claim wrong proof\");\n\n        (uint256 communityAmount, ) = getCommunityAmount();\n        uint256 amount = (communityAmount * _percent) / 1e4;\n        isClaimedCommunity[_account] = true;\n        if (safeTransferETH(payable(_account), amount)) {\n            emit ClaimedCommunity(_account, amount);\n        }\n    }","after":"function claimCommunity(\n        address _account,\n        uint256 _percent,\n        bytes32[] calldata _proof\n    ) external {\n        require(endedAt > 0, 'ER: Game is not ended yet');\n        require(!isClaimedCommunity[_account], 'ER: Community claimed already');\n        bytes32 leaf = keccak256(abi.encodePacked(_account, _percent));\n        require(MerkleProof.verify(_proof, communityRoot, leaf), \"ER: Community claim wrong proof\");\n\n        (uint256 communityAmount, ) = getCommunityAmount();\n        uint256 amount = (communityAmount * _percent) / 1e4;\n        isClaimedCommunity[_account] = true;\n        if (safeTransferETH(payable(_account), amount)) {\n            emit ClaimedCommunity(_account, amount);\n        }\n    }","contract":"Jigsaw1","time":0},{"type":"external-function ","before":"function uploadCharityInfos(CharityInfo[] memory _charityInfos)\n        external\n        onlyOwner {\n        require(endedAt > 0, 'ER: Game is not ended yet');\n        require(_charityInfos.length > 0, 'ER: Invalid Charity Info');\n        require(charityInfos.length == 0, 'Er: Charity Info is already set');\n\n        (, uint256 charityAmount) = getCommunityAmount();\n        uint256 maxVote;\n        uint256 count;\n        uint256 length = _charityInfos.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            uint256 vote = _charityInfos[i].vote;\n            if (maxVote == vote) {\n                count++;\n            } else if (maxVote < vote) {\n                maxVote = vote;\n                count = 1;\n            }\n        }\n\n        for (uint256 i = 0; i < length; i++) {\n            CharityInfo memory info = _charityInfos[i];\n            if (info.vote == maxVote) {\n                info.ratio = 1e4 / count;\n\n                uint256 amount = charityAmount / count;\n                if (safeTransferETH(info.pool, amount)) {\n                    emit ClaimedCharity(info.charity, info.pool, amount);\n                }\n            } else {\n                info.ratio = 0;\n            }\n            charityInfos.push(info);\n        }\n    }","after":"function uploadCharityInfos(CharityInfo[] calldata _charityInfos)\n        external\n        onlyOwner {\n        require(endedAt > 0, 'ER: Game is not ended yet');\n        require(_charityInfos.length > 0, 'ER: Invalid Charity Info');\n        require(charityInfos.length == 0, 'Er: Charity Info is already set');\n\n        (, uint256 charityAmount) = getCommunityAmount();\n        uint256 maxVote;\n        uint256 count;\n        uint256 length = _charityInfos.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            uint256 vote = _charityInfos[i].vote;\n            if (maxVote == vote) {\n                count++;\n            } else if (maxVote < vote) {\n                maxVote = vote;\n                count = 1;\n            }\n        }\n\n        for (uint256 i = 0; i < length; i++) {\n            CharityInfo memory info = _charityInfos[i];\n            if (info.vote == maxVote) {\n                info.ratio = 1e4 / count;\n\n                uint256 amount = charityAmount / count;\n                if (safeTransferETH(info.pool, amount)) {\n                    emit ClaimedCharity(info.charity, info.pool, amount);\n                }\n            } else {\n                info.ratio = 0;\n            }\n            charityInfos.push(info);\n        }\n    }","contract":"Jigsaw1","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _URI) external onlyOwner onlyEditable {\n        _tokenBaseURI = _URI;\n    }","after":"function setBaseURI(string calldata _URI) external onlyOwner onlyEditable {\n        _tokenBaseURI = _URI;\n    }","contract":"Jigsaw1","time":0},{"type":"constant-restrict-modification  ","before":"string private _tokenFinalPictureBaseURI = '';","after":"string private constant _tokenFinalPictureBaseURI = '';","contract":"Jigsaw1","time":1}]}
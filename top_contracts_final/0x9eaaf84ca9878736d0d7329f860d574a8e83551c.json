{"time":187,"results":[{"type":"state-data-arrangement ","before":"\nstring public baseURI;\nstring public defaultURI;\nstring public mycontractURI;\nbool public finalizeBaseUri = false;\nuint8 public stage = 0;\nuint256 public mintPassSupply = 300;\nuint256 public mintPassMax = 1;\nmapping(address => uint8) public mintPassCount;\nuint256 public presalePrice = 0.04 ether;\nuint256 public presaleSupply = 5000;\nuint256 public presaleMintMax = 3;\nmapping(address => uint8) public presaleMintCount;\nuint256 public clearanceMintMax = 10;\nmapping(address => uint8) public presaleClearanceMintCount;\nuint256 public salePrice = 0.05 ether;\nuint256 public saleMintPerTransactionMax = 20;\nuint256 public totalSaleSupply = 10000;\nbool public isSalePaused = false;\naddress public royaltyAddr = 0x503e781c619ce0dcaD1B76Cd92f6D054d05FEe5c;\nuint256 public royaltyBasis = 500;\naddress private _signerAddress = 0x3eE985d69f541dB0f5aaA05cd3542005B68D3C6C;\naddress private _vaultAddress = 0x503e781c619ce0dcaD1B76Cd92f6D054d05FEe5c;","after":"string public baseURI;\nstring public defaultURI;\nstring public mycontractURI;\nuint256 public mintPassSupply = 300;\nuint256 public mintPassMax = 1;\nmapping(address => uint8) public mintPassCount;\nuint256 public presalePrice = 0.04 ether;\nuint256 public presaleSupply = 5000;\nuint256 public presaleMintMax = 3;\nmapping(address => uint8) public presaleMintCount;\nuint256 public clearanceMintMax = 10;\nmapping(address => uint8) public presaleClearanceMintCount;\nuint256 public salePrice = 0.05 ether;\nuint256 public saleMintPerTransactionMax = 20;\nuint256 public totalSaleSupply = 10000;\nuint256 public royaltyBasis = 500;\naddress public royaltyAddr = 0x503e781c619ce0dcaD1B76Cd92f6D054d05FEe5c;\naddress private _signerAddress = 0x3eE985d69f541dB0f5aaA05cd3542005B68D3C6C;\naddress private _vaultAddress = 0x503e781c619ce0dcaD1B76Cd92f6D054d05FEe5c;\nbool public finalizeBaseUri = false;\nuint8 public stage = 0;\nbool public isSalePaused = false;\n","contract":"TacoGatosNFT","time":0},{"type":"external-function ","before":"function mintStage1(bytes memory signature, uint8 _mintAmount) external payable {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 1, \"MINT PASS PHASE NOT OPEN!\");\r\n    require(supply + _mintAmount <= mintPassSupply, 'MINT PASS SUPPLY REACHED!');\r\n    require(_mintAmount + mintPassCount[msg.sender] <= mintPassMax, 'MAX MINT PASS SUPPLY FOR THIS WALLET REACHED');   \r\n    mintPassCount[msg.sender] += _mintAmount;\r\n\r\n    \r\n    _mint(_mintAmount, supply);\r\n  }","after":"function mintStage1(bytes calldata signature, uint8 _mintAmount) external payable {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 1, \"MINT PASS PHASE NOT OPEN!\");\r\n    require(supply + _mintAmount <= mintPassSupply, 'MINT PASS SUPPLY REACHED!');\r\n    require(_mintAmount + mintPassCount[msg.sender] <= mintPassMax, 'MAX MINT PASS SUPPLY FOR THIS WALLET REACHED');   \r\n    mintPassCount[msg.sender] += _mintAmount;\r\n\r\n    \r\n    _mint(_mintAmount, supply);\r\n  }","contract":"TacoGatosNFT","time":0},{"type":"external-function ","before":"function mintStage2(bytes memory signature, uint8 _mintAmount) external payable {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 2, \"PRE-SALE STAGE NOT OPEN!\");\r\n    require(supply + _mintAmount <= presaleSupply, 'PRESALE SUPPLY REACHED');\r\n    require(_mintAmount + presaleMintCount[msg.sender] <= presaleMintMax, 'MAX PRESALE SUPPLY FOR THIS WALLET REACHED');      \r\n    require(msg.value >= presalePrice * _mintAmount);\r\n    presaleMintCount[msg.sender] += _mintAmount;\r\n\r\n    _mint(_mintAmount, supply);\r\n  }","after":"function mintStage2(bytes calldata signature, uint8 _mintAmount) external payable {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 2, \"PRE-SALE STAGE NOT OPEN!\");\r\n    require(supply + _mintAmount <= presaleSupply, 'PRESALE SUPPLY REACHED');\r\n    require(_mintAmount + presaleMintCount[msg.sender] <= presaleMintMax, 'MAX PRESALE SUPPLY FOR THIS WALLET REACHED');      \r\n    require(msg.value >= presalePrice * _mintAmount);\r\n    presaleMintCount[msg.sender] += _mintAmount;\r\n\r\n    _mint(_mintAmount, supply);\r\n  }","contract":"TacoGatosNFT","time":0},{"type":"external-function ","before":"function mintStage3(bytes memory signature, uint8 _mintAmount) external payable {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 3, \"PRE-SALE CLEARANCE STAGE NOT OPEN!\");\r\n    require(supply + _mintAmount <= presaleSupply, 'PRESALE SUPPLY REACHED');\r\n    require(_mintAmount + presaleClearanceMintCount[msg.sender] <= clearanceMintMax, 'MAX PRESALE CLEARANCE SUPPLY FOR THIS WALLET REACHED');      \r\n    require(msg.value >= presalePrice * _mintAmount);\r\n    presaleClearanceMintCount[msg.sender] += _mintAmount;\r\n\r\n    _mint(_mintAmount, supply);\r\n  }","after":"function mintStage3(bytes calldata signature, uint8 _mintAmount) external payable {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 3, \"PRE-SALE CLEARANCE STAGE NOT OPEN!\");\r\n    require(supply + _mintAmount <= presaleSupply, 'PRESALE SUPPLY REACHED');\r\n    require(_mintAmount + presaleClearanceMintCount[msg.sender] <= clearanceMintMax, 'MAX PRESALE CLEARANCE SUPPLY FOR THIS WALLET REACHED');      \r\n    require(msg.value >= presalePrice * _mintAmount);\r\n    presaleClearanceMintCount[msg.sender] += _mintAmount;\r\n\r\n    _mint(_mintAmount, supply);\r\n  }","contract":"TacoGatosNFT","time":0},{"type":"external-function ","before":"function mintStage4(bytes memory signature, uint8 _mintAmount) external payable  {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 4, \"PUBLIC SALE STAGE NOT OPEN!\");\r\n    require(supply + _mintAmount <= totalSaleSupply, 'MINT TOTAL SUPPLY REACHED!');\r\n    require(_mintAmount<= saleMintPerTransactionMax, 'MAX PER TRANSACTION REACHED!');\r\n    require(msg.value >= salePrice * _mintAmount);\r\n\r\n    _mint(_mintAmount, supply);\r\n  }","after":"function mintStage4(bytes calldata signature, uint8 _mintAmount) external payable  {\r\n    uint256 supply = totalSupply();\r\n    bytes memory message = abi.encodePacked(msg.sender);\r\n    bytes32 messagehash =  keccak256(message);\r\n\r\n    require(!isSalePaused);\r\n    require(matchAddressSigner(messagehash, signature), \"INVALID MINT SIGNATURE!\");\r\n    require(stage == 4, \"PUBLIC SALE STAGE NOT OPEN!\");\r\n    require(supply + _mintAmount <= totalSaleSupply, 'MINT TOTAL SUPPLY REACHED!');\r\n    require(_mintAmount<= saleMintPerTransactionMax, 'MAX PER TRANSACTION REACHED!');\r\n    require(msg.value >= salePrice * _mintAmount);\r\n\r\n    _mint(_mintAmount, supply);\r\n  }","contract":"TacoGatosNFT","time":0},{"type":"external-function ","before":"function setContractURI(string memory _contractURI) external onlyOwner {\r\n    mycontractURI = _contractURI; //Contract Metadata format based on:  https://docs.opensea.io/docs/contract-level-metadata    \r\n  }","after":"function setContractURI(string calldata _contractURI) external onlyOwner {\r\n    mycontractURI = _contractURI; //Contract Metadata format based on:  https://docs.opensea.io/docs/contract-level-metadata    \r\n  }","contract":"TacoGatosNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public mintPassSupply = 300;","after":"uint256 public constant mintPassSupply = 300;","contract":"TacoGatosNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public mintPassMax = 1;","after":"uint256 public constant mintPassMax = 1;","contract":"TacoGatosNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public presaleSupply = 5000;","after":"uint256 public constant presaleSupply = 5000;","contract":"TacoGatosNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public clearanceMintMax = 10;","after":"uint256 public constant clearanceMintMax = 10;","contract":"TacoGatosNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public totalSaleSupply = 10000;","after":"uint256 public constant totalSaleSupply = 10000;","contract":"TacoGatosNFT","time":0}]}
{"time":187,"results":[{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory _tokenURI) public onlyOwner {\n        _setTokenURI(tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata _tokenURI) public onlyOwner {\n        _setTokenURI(tokenId, _tokenURI);\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function setTokenURIMultiple(uint256[] memory tokenId, string[] memory _tokenURI) public onlyOwner {\n        for(uint x=0; x<tokenId.length; x++ ) {\n            _setTokenURI(tokenId[x], _tokenURI[x]);\n        }\n    }","after":"function setTokenURIMultiple(uint256[] calldata tokenId, string[] calldata _tokenURI) public onlyOwner {\n        for(uint x=0; x<tokenId.length; x++ ) {\n            _setTokenURI(tokenId[x], _tokenURI[x]);\n        }\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function addWhitelisters10(address[] memory _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++) {\n            if(isWhiteLister(_whitelister[i]) == 0) {\n                whitelister10[_whitelister[i]] = true;\n                whitelisters10Length++;\n            }\n        }\n    }","after":"function addWhitelisters10(address[] calldata _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++) {\n            if(isWhiteLister(_whitelister[i]) == 0) {\n                whitelister10[_whitelister[i]] = true;\n                whitelisters10Length++;\n            }\n        }\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function addWhitelisters25(address[] memory _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++){\n            if(isWhiteLister(_whitelister[i]) == 0) {\n                whitelister25[_whitelister[i]] = true;\n                whitelisters25Length++;\n            }\n        }\n    }","after":"function addWhitelisters25(address[] calldata _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++){\n            if(isWhiteLister(_whitelister[i]) == 0) {\n                whitelister25[_whitelister[i]] = true;\n                whitelisters25Length++;\n            }\n        }\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function removeWhitelisters10(address[] memory _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++) {\n            if(isWhiteLister(_whitelister[i]) == 10) {\n                whitelister10[_whitelister[i]] = false;\n                whitelisters10Length--;\n            }\n        }\n    }","after":"function removeWhitelisters10(address[] calldata _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++) {\n            if(isWhiteLister(_whitelister[i]) == 10) {\n                whitelister10[_whitelister[i]] = false;\n                whitelisters10Length--;\n            }\n        }\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function removeWhitelisters25(address[] memory _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++) {\n            if(isWhiteLister(_whitelister[i]) == 25) {\n                whitelister25[_whitelister[i]] = false;\n                whitelisters25Length--;\n            }\n        }\n    }","after":"function removeWhitelisters25(address[] calldata _whitelister) external onlyOwner {\n        for(uint8 i=0; i<_whitelister.length;i++) {\n            if(isWhiteLister(_whitelister[i]) == 25) {\n                whitelister25[_whitelister[i]] = false;\n                whitelisters25Length--;\n            }\n        }\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function mintPandas(uint numberOfTokens, string memory revealingImage) public payable {\n        uint256 timeNow = block.timestamp;\n        uint[] memory array = new uint[](numberOfTokens);\n        require(SELLING, \"Panda sale is not active yet\");\n        uint alreadyMintedInTime = checkUserMinting(msg.sender, timeNow);\n        bool inTime = checkInTime(msg.sender, timeNow);\n        string memory message;\n        if(CHECK_WHITELISTING) {\n            uint maxMintsAllowed = isWhiteLister(msg.sender);\n            require(maxMintsAllowed > 0, \"You are not whitelisted by the owner.\");\n            if(maxMintsAllowed == 10) {\n                message = \"Can not mint more than 10 tokens per 5 days\";\n            }\n            else if(maxMintsAllowed == 25) {\n                message = \"Can not mint more than 25 tokens per 5 days\";\n            }\n            require(numberOfTokens <= maxMintsAllowed, message);\n            require(numberOfTokens.add(alreadyMintedInTime) <= maxMintsAllowed, message);\n        }\n        else {\n            require(numberOfTokens <= MAX_PURCHASE, \"Can not mint more than 10 tokens at a time\");\n        }\n        \n        require(totalSupply().add(numberOfTokens) <= MAX_PANDAS, \"Purchase would exceed max supply of Pandas\");\n        require(PRICE.mul(numberOfTokens) <= msg.value, \"Ether value sent is not correct\");\n        for(uint i = 0; i < numberOfTokens; i++) {\n            uint mintIndex = totalSupply();\n            array[i] = mintIndex;\n            if (totalSupply() < MAX_PANDAS) {\n                _safeMint(msg.sender, mintIndex);\n                _setTokenURI(mintIndex, revealingImage);\n            }\n        }\n        setUserMinting(msg.sender, numberOfTokens.add(alreadyMintedInTime), inTime, timeNow);\n        emit MintedIDs(array);\n    }","after":"function mintPandas(uint numberOfTokens, string calldata revealingImage) public payable {\n        uint256 timeNow = block.timestamp;\n        uint[] memory array = new uint[](numberOfTokens);\n        require(SELLING, \"Panda sale is not active yet\");\n        uint alreadyMintedInTime = checkUserMinting(msg.sender, timeNow);\n        bool inTime = checkInTime(msg.sender, timeNow);\n        string memory message;\n        if(CHECK_WHITELISTING) {\n            uint maxMintsAllowed = isWhiteLister(msg.sender);\n            require(maxMintsAllowed > 0, \"You are not whitelisted by the owner.\");\n            if(maxMintsAllowed == 10) {\n                message = \"Can not mint more than 10 tokens per 5 days\";\n            }\n            else if(maxMintsAllowed == 25) {\n                message = \"Can not mint more than 25 tokens per 5 days\";\n            }\n            require(numberOfTokens <= maxMintsAllowed, message);\n            require(numberOfTokens.add(alreadyMintedInTime) <= maxMintsAllowed, message);\n        }\n        else {\n            require(numberOfTokens <= MAX_PURCHASE, \"Can not mint more than 10 tokens at a time\");\n        }\n        \n        require(totalSupply().add(numberOfTokens) <= MAX_PANDAS, \"Purchase would exceed max supply of Pandas\");\n        require(PRICE.mul(numberOfTokens) <= msg.value, \"Ether value sent is not correct\");\n        for(uint i = 0; i < numberOfTokens; i++) {\n            uint mintIndex = totalSupply();\n            array[i] = mintIndex;\n            if (totalSupply() < MAX_PANDAS) {\n                _safeMint(msg.sender, mintIndex);\n                _setTokenURI(mintIndex, revealingImage);\n            }\n        }\n        setUserMinting(msg.sender, numberOfTokens.add(alreadyMintedInTime), inTime, timeNow);\n        emit MintedIDs(array);\n    }","contract":"WannaPanda","time":0},{"type":"external-function ","before":"function reservePandas(uint total, string memory revealingImage) external onlyOwner {\n        require(RESERVED, \"You have already reserved the Pandas\");\n        uint[] memory array = new uint[](total);\n        require(totalSupply().add(total) <= MAX_PANDAS, \"Mint would exceed max supply of Pandas\");\n        for(uint i = 0; i < total; i++) {\n            uint mintIndex = totalSupply();\n            array[i] = mintIndex;\n            if (totalSupply() < MAX_PANDAS) {\n                _safeMint(msg.sender, mintIndex);\n                _setTokenURI(mintIndex, revealingImage);\n            }\n        }\n        RESERVED = false;\n        emit MintedIDs(array);\n    }","after":"function reservePandas(uint total, string calldata revealingImage) external onlyOwner {\n        require(RESERVED, \"You have already reserved the Pandas\");\n        uint[] memory array = new uint[](total);\n        require(totalSupply().add(total) <= MAX_PANDAS, \"Mint would exceed max supply of Pandas\");\n        for(uint i = 0; i < total; i++) {\n            uint mintIndex = totalSupply();\n            array[i] = mintIndex;\n            if (totalSupply() < MAX_PANDAS) {\n                _safeMint(msg.sender, mintIndex);\n                _setTokenURI(mintIndex, revealingImage);\n            }\n        }\n        RESERVED = false;\n        emit MintedIDs(array);\n    }","contract":"WannaPanda","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public PRICE = 70000000000000000;","after":"uint256 public constant PRICE = 70000000000000000;","contract":"WannaPanda","time":1}]}
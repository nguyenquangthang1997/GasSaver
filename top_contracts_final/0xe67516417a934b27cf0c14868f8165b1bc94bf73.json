{"time":94,"results":[{"type":"external-function ","before":"function claim(\n        uint256 claimGroupId,\n        address account,\n        uint256 amount,\n        bytes32[] memory proof\n    ) external override {\n        // holding exists?\n        Holding storage holding = holdings[claimGroupId];\n        require(holding.owner != address(0), \"Holding not found\");\n\n        //  holding owner?\n        require(holding.owner != account, \"Holding owner cannot claim\");\n\n        // sufficient balance exists?   (funder may have under-funded)\n        require(holding.balance >= amount, \"Claim under-funded by funder.\");\n\n        bytes32 leaf = _leafHash(account, amount);\n\n        // already spent?\n        require(leafClaimed[claimGroupId][leaf] == false, \"Already claimed\");\n\n        // merkle proof valid?\n        require(MerkleProof.verify(proof, holding.merkleRoot, leaf) == true, \"Claim not found\");\n\n        // update state\n        leafClaimed[claimGroupId][leaf] = true;\n        holding.balance = holding.balance.sub(amount);\n        IERC20(holding.erc20).safeTransfer(account, amount);\n\n        emit MerkleClaim(account, holding.erc20, amount);\n    }","after":"function claim(\n        uint256 claimGroupId,\n        address account,\n        uint256 amount,\n        bytes32[] calldata proof\n    ) external override {\n        // holding exists?\n        Holding storage holding = holdings[claimGroupId];\n        require(holding.owner != address(0), \"Holding not found\");\n\n        //  holding owner?\n        require(holding.owner != account, \"Holding owner cannot claim\");\n\n        // sufficient balance exists?   (funder may have under-funded)\n        require(holding.balance >= amount, \"Claim under-funded by funder.\");\n\n        bytes32 leaf = _leafHash(account, amount);\n\n        // already spent?\n        require(leafClaimed[claimGroupId][leaf] == false, \"Already claimed\");\n\n        // merkle proof valid?\n        require(MerkleProof.verify(proof, holding.merkleRoot, leaf) == true, \"Claim not found\");\n\n        // update state\n        leafClaimed[claimGroupId][leaf] = true;\n        holding.balance = holding.balance.sub(amount);\n        IERC20(holding.erc20).safeTransfer(account, amount);\n\n        emit MerkleClaim(account, holding.erc20, amount);\n    }","contract":"MerkleBox","time":0}]}
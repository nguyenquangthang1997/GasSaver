{"time":166,"results":[{"type":"external-function ","before":"function setWhitelistCheck(\n        string memory specification,\n        address tokenAddress,\n        uint256 _id\n    ) public virtual {\n        require(tokenAddress.isContract(), \"Token address must be a contract\");\n        whitelist[_id].specification = specificationByValue(specification);\n        whitelist[_id].tokenAddress = tokenAddress;\n    }","after":"function setWhitelistCheck(\n        string calldata specification,\n        address tokenAddress,\n        uint256 _id\n    ) public virtual {\n        require(tokenAddress.isContract(), \"Token address must be a contract\");\n        whitelist[_id].specification = specificationByValue(specification);\n        whitelist[_id].tokenAddress = tokenAddress;\n    }","contract":"Whitelistable","time":0},{"type":"external-function ","before":"function createType(\n        uint256 _id,\n        uint256 _price,\n        uint256 _totalSupply,\n        bytes32 _allowListMerkleRoot,\n        string memory _uri\n    ) public onlyOwner {\n        require(\n            _tokenTypes[_id].totalSupply == 0,\n            \"General: type already defined\"\n        );\n        require(\n            _totalSupply > 0,\n            \"General: must set an above zero total supply\"\n        );\n        require(bytes(_uri).length > 0, \"General: must set a URI\");\n\n        _tokenTypes[_id] = TokenType(\n            _price,\n            0,\n            _totalSupply,\n            _allowListMerkleRoot,\n            _uri\n        );\n    }","after":"function createType(\n        uint256 _id,\n        uint256 _price,\n        uint256 _totalSupply,\n        bytes32 _allowListMerkleRoot,\n        string calldata _uri\n    ) public onlyOwner {\n        require(\n            _tokenTypes[_id].totalSupply == 0,\n            \"General: type already defined\"\n        );\n        require(\n            _totalSupply > 0,\n            \"General: must set an above zero total supply\"\n        );\n        require(bytes(_uri).length > 0, \"General: must set a URI\");\n\n        _tokenTypes[_id] = TokenType(\n            _price,\n            0,\n            _totalSupply,\n            _allowListMerkleRoot,\n            _uri\n        );\n    }","contract":"GeneralCards","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"GeneralCards","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"GeneralCards","time":0}]}
{"time":652,"results":[{"type":"external-function ","before":"function mintCapsuleWhitelist(bytes32 hash, bytes memory signature, uint256 numberOfTokens) public payable {\n        require(_verify(hash, signature), \"This hash's signature is invalid.\");\n        require(_hash(msg.sender) == hash, \"The address hash does not match the signed hash.\");\n        require(totalSaleSupply + numberOfTokens <= PUBLIC_CAPSULES, \"Purchase would exceed max supply of capsules for sale.\");\n        require(CAPSULE_PRICE * numberOfTokens <= msg.value, \"Ether value sent is not correct\");\n        require(_allowListClaimed[msg.sender] + numberOfTokens <= allowListMaxMint, 'You cannot mint this many capsules.');\n        _allowListClaimed[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            uint256 tokenId = RESERVED_CAPSULES + totalSaleSupply + 1;\n\n            totalSaleSupply += 1;\n            _safeMint(msg.sender, tokenId);\n        }\n\n        payable(_splitter).transfer(msg.value);\n    }","after":"function mintCapsuleWhitelist(bytes32 hash, bytes calldata signature, uint256 numberOfTokens) public payable {\n        require(_verify(hash, signature), \"This hash's signature is invalid.\");\n        require(_hash(msg.sender) == hash, \"The address hash does not match the signed hash.\");\n        require(totalSaleSupply + numberOfTokens <= PUBLIC_CAPSULES, \"Purchase would exceed max supply of capsules for sale.\");\n        require(CAPSULE_PRICE * numberOfTokens <= msg.value, \"Ether value sent is not correct\");\n        require(_allowListClaimed[msg.sender] + numberOfTokens <= allowListMaxMint, 'You cannot mint this many capsules.');\n        _allowListClaimed[msg.sender] += numberOfTokens;\n\n        for (uint i = 0; i < numberOfTokens; i++) {\n            uint256 tokenId = RESERVED_CAPSULES + totalSaleSupply + 1;\n\n            totalSaleSupply += 1;\n            _safeMint(msg.sender, tokenId);\n        }\n\n        payable(_splitter).transfer(msg.value);\n    }","contract":"Capsule","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory _tokenURI) \n        public\n        onlyOwner\n    {       \n        _setTokenURI(tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata _tokenURI) \n        public\n        onlyOwner\n    {       \n        _setTokenURI(tokenId, _tokenURI);\n    }","contract":"Capsule","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public MAX_CAPSULES;","after":"uint256 public immutable MAX_CAPSULES;","contract":"Capsule","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public RESERVED_CAPSULES;","after":"uint256 public immutable RESERVED_CAPSULES;","contract":"Capsule","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public PUBLIC_CAPSULES;","after":"uint256 public immutable PUBLIC_CAPSULES;","contract":"Capsule","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public CAPSULE_PRICE = 0.08 ether;","after":"uint256 public constant CAPSULE_PRICE = 0.08 ether;","contract":"Capsule","time":0},{"type":"constant-restrict-modification  ","before":"bool public allowListIsActive = false;","after":"bool public constant allowListIsActive = false;","contract":"Capsule","time":0},{"type":"constant-restrict-modification  ","before":"string private _prefix = \"Capsule Whitelist Verification:\";","after":"string private constant _prefix = \"Capsule Whitelist Verification:\";","contract":"Capsule","time":0}]}
{"time":370,"results":[{"type":"external-function ","before":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","after":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","contract":"ERC1155Supply","time":0},{"type":"external-function ","before":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","after":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","contract":"ERC1155Supply","time":0},{"type":"loop-duplication","before":"\nstart line 3022 column 8, end line 3024 column 8\n   for (uint256 _i = 0; _i < _ids.length; _i++) {\n            require(_ids[_i] < 5, \"invitm\");\n      \nstart line 3026 column 8, end line 3028 column 8\n   for (uint256 _i = 0; _i < _ids.length; _i++) {\n            mintInternal(_to, _ids[_i], _qtys[_i]);\n      ","after":"// merge loop\n\nstart line 3022 column 8, end line 3024 column 8\n   for (uint256 _i = 0; _i < _ids.length; _i++) {\n            require(_ids[_i] < 5, \"invitm\");\n      \nstart line 3026 column 8, end line 3028 column 8\n   for (uint256 _i = 0; _i < _ids.length; _i++) {\n            mintInternal(_to, _ids[_i], _qtys[_i]);\n      ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function setURI(string memory _newuri) public onlyOwner {\n        cabinetUri = _newuri;\n  ","after":"   function setURI(string calldata _newuri) public onlyOwner {\n        cabinetUri = _newuri;\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function shop( uint256 _id, uint256 _qty, bytes memory _signature ) public payable {\n        // check signature - will be provided by Hashku\n        require(verifySignature(\"SHOP\", group, _id, _qty, _signature), \"invsig\");\n        require(_id < 5, \"invitm\");\n        require(_qty * items[_id].price == msg.value, \"incfnds\");\n\n        mintInternal(msg.sender, _id, _qty);\n  ","after":"   function shop( uint256 _id, uint256 _qty, bytes calldata _signature ) public payable {\n        // check signature - will be provided by Hashku\n        require(verifySignature(\"SHOP\", group, _id, _qty, _signature), \"invsig\");\n        require(_id < 5, \"invitm\");\n        require(_qty * items[_id].price == msg.value, \"incfnds\");\n\n        mintInternal(msg.sender, _id, _qty);\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function shopMultiple( uint256[] memory _ids, uint256[] memory _qtys, bytes memory _signature ) public payable {\n        // check signature - will be provided by Hashku\n        require(verifySignature(\"SHOP\", group, _ids[0], _qtys[0], _signature), \"invsig\");\n        require(_ids.length == _qtys.length, \"idqtymm\");\n        require(_ids.length < 6, \"maxitms\");\n\n        uint256 _totalPrice;\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            require(_ids[_i] < 5, \"invitm\");\n            _totalPrice += items[_ids[_i]].price * _qtys[_i];\n        }\n\n        require(_totalPrice == msg.value, \"incfnds\");\n\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            mintInternal(msg.sender, _ids[_i], _qtys[_i]);\n        }\n  ","after":"   function shopMultiple( uint256[] calldata _ids, uint256[] calldata _qtys, bytes calldata _signature ) public payable {\n        // check signature - will be provided by Hashku\n        require(verifySignature(\"SHOP\", group, _ids[0], _qtys[0], _signature), \"invsig\");\n        require(_ids.length == _qtys.length, \"idqtymm\");\n        require(_ids.length < 6, \"maxitms\");\n\n        uint256 _totalPrice;\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            require(_ids[_i] < 5, \"invitm\");\n            _totalPrice += items[_ids[_i]].price * _qtys[_i];\n        }\n\n        require(_totalPrice == msg.value, \"incfnds\");\n\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            mintInternal(msg.sender, _ids[_i], _qtys[_i]);\n        }\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function send(address _to, uint256[] memory _ids, uint256[] memory _qtys) public onlyOwner {\n        require(_ids.length == _qtys.length, \"idqtymm\");\n        require(_ids.length < 6, \"maxitms\");\n\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            require(_ids[_i] < 5, \"invitm\");\n        }\n\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            mintInternal(_to, _ids[_i], _qtys[_i]);\n        }\n  ","after":"   function send(address _to, uint256[] calldata _ids, uint256[] calldata _qtys) public onlyOwner {\n        require(_ids.length == _qtys.length, \"idqtymm\");\n        require(_ids.length < 6, \"maxitms\");\n\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            require(_ids[_i] < 5, \"invitm\");\n        }\n\n        for (uint256 _i = 0; _i < _ids.length; _i++) {\n            mintInternal(_to, _ids[_i], _qtys[_i]);\n        }\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function setGroup(string memory _grp) public onlyOwner {\n        group = _grp;\n        emit GroupUpdated(_grp);\n  ","after":"   function setGroup(string calldata _grp) public onlyOwner {\n        group = _grp;\n        emit GroupUpdated(_grp);\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","after":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","after":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n  ","after":"   function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n  ","contract":"CabinetOfCuriosities","time":0},{"type":"external-function ","before":"   function shop(uint256 _amount, bytes memory _signature) external override payable {\n        require(nextToken() + _amount + reservedFromCabinet <= maxTokens, \"sold_out\");\n        require(tokensMinted[_msgSender()] + _amount <= maxMintPerAddress, \"max_minted\");\n        require(!isClosed, \"is_closed\");\n        require(verifySignature(_signature), \"invalid_signature\");\n        require(price * _amount == msg.value, \"incorrect_funds\");\n\n        tokensMinted[_msgSender()] += _amount;\n        for (uint256 i = 0; i < _amount; i++) {\n            mint(_msgSender());\n        }\n  ","after":"   function shop(uint256 _amount, bytes calldata _signature) external override payable {\n        require(nextToken() + _amount + reservedFromCabinet <= maxTokens, \"sold_out\");\n        require(tokensMinted[_msgSender()] + _amount <= maxMintPerAddress, \"max_minted\");\n        require(!isClosed, \"is_closed\");\n        require(verifySignature(_signature), \"invalid_signature\");\n        require(price * _amount == msg.value, \"incorrect_funds\");\n\n        tokensMinted[_msgSender()] += _amount;\n        for (uint256 i = 0; i < _amount; i++) {\n            mint(_msgSender());\n        }\n  ","contract":"SocietyOfTheHourglass","time":0},{"type":"external-function ","before":"   function setGroup(string memory _group) external virtual onlyOwner {\n        group = _group;\n        emit ContractUpdated(\"group\");\n  ","after":"   function setGroup(string calldata _group) external virtual onlyOwner {\n        group = _group;\n        emit ContractUpdated(\"group\");\n  ","contract":"SocietyOfTheHourglass","time":0},{"type":"external-function ","before":"   function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n  ","after":"   function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n  ","contract":"SocietyOfTheHourglass","time":0}]}
{"time":292,"results":[{"type":"external-function ","before":"function setTraitHashes(bytes32[50] memory _traitHashes) external onlyOwner {\n        traitHashes = _traitHashes;\n        emit HashesSet();\n    }","after":"function setTraitHashes(bytes32[50] calldata _traitHashes) external onlyOwner {\n        traitHashes = _traitHashes;\n        emit HashesSet();\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function setCurve(\n        uint256[] memory _og_stop, uint256[] memory _og_price,\n        uint256[] memory _alpha_stop, uint256[] memory _alpha_price,\n        uint256[] memory _random_stop, uint256[] memory _random_price) external onlyOwner {\n        og_stop = _og_stop;\n        og_price = _og_price;\n        alpha_stop = _alpha_stop;\n        alpha_price = _alpha_price;\n        common_stop = _random_stop;\n        common_price = _random_price;\n        curve_set = true;\n        _setBaseURI(\"temp.ether.cards/metadata\");\n    }","after":"function setCurve(\n        uint256[] calldata _og_stop, uint256[] calldata _og_price,\n        uint256[] calldata _alpha_stop, uint256[] calldata _alpha_price,\n        uint256[] calldata _random_stop, uint256[] calldata _random_price) external onlyOwner {\n        og_stop = _og_stop;\n        og_price = _og_price;\n        alpha_stop = _alpha_stop;\n        alpha_price = _alpha_price;\n        common_stop = _random_stop;\n        common_price = _random_price;\n        curve_set = true;\n        _setBaseURI(\"temp.ether.cards/metadata\");\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function allocateManyCards(address[] memory buyers, uint256 card_type) external onlyOwner {\n        require(curve_set,\"price curve not set\");\n         require(founders_done, \"mint founders first\");\n        require(card_type < 3 , \"Invalid Card Type\");\n        require(!presale_closed,\"Presale is over\");\n        for (uint j = 0; j < buyers.length; j++) {\n            assignCard(buyers[j],card_type);\n        }\n    }","after":"function allocateManyCards(address[] calldata buyers, uint256 card_type) external onlyOwner {\n        require(curve_set,\"price curve not set\");\n         require(founders_done, \"mint founders first\");\n        require(card_type < 3 , \"Invalid Card Type\");\n        require(!presale_closed,\"Presale is over\");\n        for (uint j = 0; j < buyers.length; j++) {\n            assignCard(buyers[j],card_type);\n        }\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function mintFounders(address[10] memory founders) external onlyOwner {\n        require(!founders_done, \"Founders already minted\");\n        for (uint j = 0; j < 10; j++) {\n            _mint(founders[j],j);\n            traitAssignmentOrder[j] = 1;\n        }\n        founders_done = true;\n    }","after":"function mintFounders(address[10] calldata founders) external onlyOwner {\n        require(!founders_done, \"Founders already minted\");\n        for (uint j = 0; j < 10; j++) {\n            _mint(founders[j],j);\n            traitAssignmentOrder[j] = 1;\n        }\n        founders_done = true;\n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function revealTokenAt(uint256 hashBlock, uint256 hashBlockPos,uint256[200] memory _tokenIds, uint256[200] memory _traits) external {\n        require(hash200(_tokenIds)==allTokenIDHashes[hashBlock],\"IDs in wrong order\");\n        require(hash200(_traits)==traitHashes[hashBlock],\"Traits in wrong order\");\n \n        uint tokenID = _tokenIds[hashBlockPos];\n        require(ownerOf(tokenID) == msg.sender,\"Not your token\");\n        if (cardTraits[tokenID] == 0) {\n            cardTraits[tokenID] = _traits[hashBlockPos];\n            emit TraitsClaimed(tokenID,_traits[hashBlockPos]);\n        } else {\n            emit TraitsAlreadyClaimed(tokenID);\n        }       \n    }","after":"function revealTokenAt(uint256 hashBlock, uint256 hashBlockPos,uint256[200] calldata _tokenIds, uint256[200] calldata _traits) external {\n        require(hash200(_tokenIds)==allTokenIDHashes[hashBlock],\"IDs in wrong order\");\n        require(hash200(_traits)==traitHashes[hashBlock],\"Traits in wrong order\");\n \n        uint tokenID = _tokenIds[hashBlockPos];\n        require(ownerOf(tokenID) == msg.sender,\"Not your token\");\n        if (cardTraits[tokenID] == 0) {\n            cardTraits[tokenID] = _traits[hashBlockPos];\n            emit TraitsClaimed(tokenID,_traits[hashBlockPos]);\n        } else {\n            emit TraitsAlreadyClaimed(tokenID);\n        }       \n    }","contract":"ethercards","time":0},{"type":"external-function ","before":"function setDataFolder(string memory _baseURI) external onlyAllowed {\n        require(!_FuzeBlown,\"This data can no longer be changed\");\n        _setBaseURI(_baseURI);\n    }","after":"function setDataFolder(string calldata _baseURI) external onlyAllowed {\n        require(!_FuzeBlown,\"This data can no longer be changed\");\n        _setBaseURI(_baseURI);\n    }","contract":"ethercards","time":0},{"type":"constant-restrict-modification  ","before":"uint256   public nextTokenId = 10;","after":"uint256   public constant nextTokenId = 10;","contract":"ethercards","time":1},{"type":"immutable-restrict-modification ","before":"address payable             wallet;","after":"address payable             immutable wallet;","contract":"ethercards","time":1},{"type":"constant-restrict-modification  ","before":"uint launch_date = 1616072400;","after":"uint constant launch_date = 1616072400;","contract":"ethercards","time":1}]}
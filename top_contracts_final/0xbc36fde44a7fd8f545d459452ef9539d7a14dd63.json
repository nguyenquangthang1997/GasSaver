{"time":2112,"results":[{"type":"immutable-restrict-modification ","before":"UniswapV2Pair is Uniswa","after":"UniswapV2Pair is Uniswa","contract":"SushiSwapPairMock","time":0},{"type":"immutable-restrict-modification ","before":" 'SushiSwap LP Token';\n    strin","after":" 'SushiSwap LP Token';\n    strin","contract":"SushiSwapPairMock","time":0},{"type":"immutable-restrict-modification ","before":"t256 a, uint256 b) external returns ","after":"t256 a, uint256 b) external returns ","contract":"ERC20Mock","time":0},{"type":"external-function ","before":"ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, bytes data);\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant DELAY = 2 days;\n    mapping(bytes32 => uint256) public queuedTransactions;\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public onlyOwner returns (bytes32)","after":"ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, bytes data);\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant DELAY = 2 days;\n    mapping(bytes32 => uint256) public queuedTransactions;\n\n    function queueTransaction(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public onlyOwner returns (bytes32)","contract":"MinimalTimeLock","time":0},{"type":"external-function ","before":"      bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = block.timestamp + DELAY;\n        queuedTransactions[txHash] = eta;\n\n        emit QueueTransaction(txHash, target, value, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(\n        address tar","after":"      bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = block.timestamp + DELAY;\n        queuedTransactions[txHash] = eta;\n\n        emit QueueTransaction(txHash, target, value, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(\n        address tar","contract":"MinimalTimeLock","time":0},{"type":"external-function ","before":"       uint256 value,\n        bytes memory data\n    ) public onlyOwner {\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        queuedTransactions[txHash] = 0;\n\n        emit CancelTransaction(txHash, target, value, data);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public onlyOwner payable returns (bytes memory) {\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = queuedTransactions[txHash];\n        require(block.timestamp >= eta, \"Too early\");\n        require(block.timestamp <= eta + GRACE_PERIOD, \"Tx stale\");\n\n        queuedTransactions[txHash] = 0;\n\n        // solium-disable-","after":"       uint256 value,\n        bytes calldata data\n    ) public onlyOwner {\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        queuedTransactions[txHash] = 0;\n\n        emit CancelTransaction(txHash, target, value, data);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public onlyOwner payable returns (bytes memory) {\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = queuedTransactions[txHash];\n        require(block.timestamp >= eta, \"Too early\");\n        require(block.timestamp <= eta + GRACE_PERIOD, \"Tx stale\");\n\n        queuedTransactions[txHash] = 0;\n\n        // solium-disable-","contract":"MinimalTimeLock","time":0}]}
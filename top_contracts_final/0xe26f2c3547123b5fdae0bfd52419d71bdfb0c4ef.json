{"time":174,"results":[{"type":"external-function ","before":"   function mintWhitelist(\n        uint256 _count,\n        uint256 _maxCount,\n        uint256 _wave,\n        bytes memory _sig)\n        external\n        payable\n    {\n        require(currentWave > 0 && _wave == currentWave, \"WAVE_INCORRECT\");\n        require(whitelistStarted || freeStarted, \"MINT_NOT_STARTED\");\n        require(_count > 0 && _count <= _maxCount, \"COUNT_INVALID\");\n        require(totalSupply() + _count <= MAX_SUPPLY, \"MAX_SUPPLY_REACHED\");\n\n        if (whitelistStarted) {\n            require(totalSupply() + _count <= whitelistMaxSupply[currentWave], \"MAX_SUPPLY_REACHED\");\n            require(msg.value == (_count * whitelistPrices[currentWave]), \"INVALID_ETH_SENT\");\n        } else {\n            require(totalSupply() + _count <= freeMaxSupply[currentWave], \"MAX_SUPPLY_REACHED\");\n            require(msg.value == 0, \"MINT_PRICE_SHOULD_BE_FREE\");\n        }\n\n        bytes32 hash = keccak256(abi.encode(_msgSender(), _maxCount, _wave));\n        require(!_usedHashes[hash], \"HASH_ALREADY_USED\");\n        require(matchSigner(hash, _sig), \"INVALID_SIGNER\");\n\n        _usedHashes[hash] = true;\n        for (uint256 i = 1; i <= _count; i++) {\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n  ","after":"   function mintWhitelist(\n        uint256 _count,\n        uint256 _maxCount,\n        uint256 _wave,\n        bytes calldata _sig)\n        external\n        payable\n    {\n        require(currentWave > 0 && _wave == currentWave, \"WAVE_INCORRECT\");\n        require(whitelistStarted || freeStarted, \"MINT_NOT_STARTED\");\n        require(_count > 0 && _count <= _maxCount, \"COUNT_INVALID\");\n        require(totalSupply() + _count <= MAX_SUPPLY, \"MAX_SUPPLY_REACHED\");\n\n        if (whitelistStarted) {\n            require(totalSupply() + _count <= whitelistMaxSupply[currentWave], \"MAX_SUPPLY_REACHED\");\n            require(msg.value == (_count * whitelistPrices[currentWave]), \"INVALID_ETH_SENT\");\n        } else {\n            require(totalSupply() + _count <= freeMaxSupply[currentWave], \"MAX_SUPPLY_REACHED\");\n            require(msg.value == 0, \"MINT_PRICE_SHOULD_BE_FREE\");\n        }\n\n        bytes32 hash = keccak256(abi.encode(_msgSender(), _maxCount, _wave));\n        require(!_usedHashes[hash], \"HASH_ALREADY_USED\");\n        require(matchSigner(hash, _sig), \"INVALID_SIGNER\");\n\n        _usedHashes[hash] = true;\n        for (uint256 i = 1; i <= _count; i++) {\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n  ","contract":"Dreamlands","time":0}]}
{"time":165,"results":[{"type":"external-function ","before":"\n  function setUri(string memory newUri) external override onlyOwner {\n    _setURI(newUri);\n","after":"\n  function setUri(string calldata newUri) external override onlyOwner {\n    _setURI(newUri);\n","contract":"CampaignV1","time":0},{"type":"external-function ","before":"\n  function vote(\n    uint8[] memory sortedIds,\n    bytes memory memo,\n    bytes32 ticket,\n    bytes memory signature\n  ) external override nonReentrant {\n    // checks\n    require(block.timestamp >= _startDate, \"vote not started yet\");\n    require(block.timestamp <= _endDate, \"vote is ended already\");\n    require(!_isVoted[_msgSender()], \"User is voted\");\n    require(\n      sortedIds.length >= 1 && sortedIds.length <= 3,\n      \"Ids length not in [1,3]\"\n    );\n    require(_isAscendingOrder(sortedIds), \"Ids not in ascending order\");\n    require(memo.length <= 128, \"Memo should be within 128 bytes\");\n    require(!_isTicketUsed[ticket], \"Ticket is used\");\n    require(_isAuthorized(ticket, signature), \"The vote is not authorized\");\n    //effects\n    uint256 mintedTokenId = _nextTokenId;\n    _nextTokenId++;\n    for (uint8 i = 0; i < sortedIds.length; i++) {\n      _voteCounts[sortedIds[i]] += 1;\n    }\n    _isVoted[_msgSender()] = true;\n    _isTicketUsed[ticket] = true;\n    // interactions\n    _mint(_msgSender(), mintedTokenId, 1, \"\");\n    emit Voted(sortedIds, _msgSender(), mintedTokenId, ticket);\n","after":"\n  function vote(\n    uint8[] calldata sortedIds,\n    bytes calldata memo,\n    bytes32 ticket,\n    bytes calldata signature\n  ) external override nonReentrant {\n    // checks\n    require(block.timestamp >= _startDate, \"vote not started yet\");\n    require(block.timestamp <= _endDate, \"vote is ended already\");\n    require(!_isVoted[_msgSender()], \"User is voted\");\n    require(\n      sortedIds.length >= 1 && sortedIds.length <= 3,\n      \"Ids length not in [1,3]\"\n    );\n    require(_isAscendingOrder(sortedIds), \"Ids not in ascending order\");\n    require(memo.length <= 128, \"Memo should be within 128 bytes\");\n    require(!_isTicketUsed[ticket], \"Ticket is used\");\n    require(_isAuthorized(ticket, signature), \"The vote is not authorized\");\n    //effects\n    uint256 mintedTokenId = _nextTokenId;\n    _nextTokenId++;\n    for (uint8 i = 0; i < sortedIds.length; i++) {\n      _voteCounts[sortedIds[i]] += 1;\n    }\n    _isVoted[_msgSender()] = true;\n    _isTicketUsed[ticket] = true;\n    // interactions\n    _mint(_msgSender(), mintedTokenId, 1, \"\");\n    emit Voted(sortedIds, _msgSender(), mintedTokenId, ticket);\n","contract":"CampaignV1","time":0},{"type":"external-function ","before":"\n  function pVote(uint8[] memory sortedIds, address voter, bytes32 ticket) external override onlyOwner {\n    // checks\n    require(!_isTicketUsed[ticket], \"Ticket is used\");\n    //effects\n    uint256 mintedTokenId = _nextTokenId;\n    _nextTokenId++;\n    for (uint8 i = 0; i < sortedIds.length; i++) {\n      _voteCounts[sortedIds[i]] += 1;\n    }\n    _isVoted[voter] = true;\n    _isTicketUsed[ticket] = true;\n    // interactions\n    _mint(voter, mintedTokenId, 1, \"\");\n    emit Voted(sortedIds, voter, mintedTokenId, ticket);\n","after":"\n  function pVote(uint8[] calldata sortedIds, address voter, bytes32 ticket) external override onlyOwner {\n    // checks\n    require(!_isTicketUsed[ticket], \"Ticket is used\");\n    //effects\n    uint256 mintedTokenId = _nextTokenId;\n    _nextTokenId++;\n    for (uint8 i = 0; i < sortedIds.length; i++) {\n      _voteCounts[sortedIds[i]] += 1;\n    }\n    _isVoted[voter] = true;\n    _isTicketUsed[ticket] = true;\n    // interactions\n    _mint(voter, mintedTokenId, 1, \"\");\n    emit Voted(sortedIds, voter, mintedTokenId, ticket);\n","contract":"CampaignV1","time":0},{"type":"external-function ","before":"\n  function setContractURI(string memory uri) external override onlyOwner {\n    _contractUri = uri;\n","after":"\n  function setContractURI(string calldata uri) external override onlyOwner {\n    _contractUri = uri;\n","contract":"CampaignV1","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"CampaignV1","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"CampaignV1","time":0}]}
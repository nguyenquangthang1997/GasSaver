{"time":558,"results":[{"type":"external-function ","before":"function addUsersToVestList(\n        address[] memory userAddresses,\n        uint256 usersTokenCountToVest\n    ) public onlyOwner {\n        require(\n            usersTokenCountToVest.mul(userAddresses.length) <=\n                vestingToken.balanceOf(address(this)),\n            \"HS-VestingVault: The vault does not contain enough tokens to support these users\"\n        );\n        for (uint256 _i = 0; _i < userAddresses.length; _i++) {\n            UserInfo memory user = users[userAddresses[_i]];\n            if (user.totalClaimable == 0) {\n                users[userAddresses[_i]] = UserInfo({\n                    totalClaimable: usersTokenCountToVest,\n                    periodsClaimed: 0\n                });\n            }\n        }\n    }","after":"function addUsersToVestList(\n        address[] calldata userAddresses,\n        uint256 usersTokenCountToVest\n    ) public onlyOwner {\n        require(\n            usersTokenCountToVest.mul(userAddresses.length) <=\n                vestingToken.balanceOf(address(this)),\n            \"HS-VestingVault: The vault does not contain enough tokens to support these users\"\n        );\n        for (uint256 _i = 0; _i < userAddresses.length; _i++) {\n            UserInfo memory user = users[userAddresses[_i]];\n            if (user.totalClaimable == 0) {\n                users[userAddresses[_i]] = UserInfo({\n                    totalClaimable: usersTokenCountToVest,\n                    periodsClaimed: 0\n                });\n            }\n        }\n    }","contract":"HighstackVestingVault","time":0}]}
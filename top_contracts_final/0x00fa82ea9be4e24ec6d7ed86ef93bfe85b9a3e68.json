{"time":216,"results":[{"type":"external-function ","before":"\n        require(hasSaleStarted == true, \"Sale hasn't started\");\n        require(\n            _tokenIds.current() + numTokens <= MAX_TOKENS,\n            \"Exceeds maximum token supply.\"\n        );\n        require(\n            numTokens > 0 && numTokens <= 10,\n            \"Machine can dispense a minimum of 1, maximum of 10 tokens\"\n        );\n        require(\n            msg.value >= SafeMath.mul(calculatePrice(), numTokens),\n            \"Amount of Ether sent is not correct.\"\n        );\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            _safeMint(msg.sender, _tokenIds.current());\n            _tokenIds.increment();\n        }\n    }\n\n    /* VIP Handling */\n\n    function startVIPSale() public onlyOwner {\n        hasVIPSaleStarted = true;\n    }\n\n    function pauseVIPSale() public onlyOwner {\n        hasVIPSaleStarted = false;\n    }\n\n    function setBouncer(address _bouncer) public onlyOwner {\n        bouncer = _bouncer;\n    }\n\n    function mintVIP(uint8 numTokens, bytes memory signature) public payable {\n        bytes32 messageHash = keccak256(abi.encodePacked(msg.sender));\n        bytes32 ethMessageHash = ECDSA.toEthSignedMessageHash(messageHash);\n        require(hasVIPSaleStarted == true, \"Sale hasn't started\");\n        require(\n            Signature","after":"\n        require(hasSaleStarted == true, \"Sale hasn't started\");\n        require(\n            _tokenIds.current() + numTokens <= MAX_TOKENS,\n            \"Exceeds maximum token supply.\"\n        );\n        require(\n            numTokens > 0 && numTokens <= 10,\n            \"Machine can dispense a minimum of 1, maximum of 10 tokens\"\n        );\n        require(\n            msg.value >= SafeMath.mul(calculatePrice(), numTokens),\n            \"Amount of Ether sent is not correct.\"\n        );\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            _safeMint(msg.sender, _tokenIds.current());\n            _tokenIds.increment();\n        }\n    }\n\n    /* VIP Handling */\n\n    function startVIPSale() public onlyOwner {\n        hasVIPSaleStarted = true;\n    }\n\n    function pauseVIPSale() public onlyOwner {\n        hasVIPSaleStarted = false;\n    }\n\n    function setBouncer(address _bouncer) public onlyOwner {\n        bouncer = _bouncer;\n    }\n\n    function mintVIP(uint8 numTokens, bytes memory signature) public payable {\n        bytes32 messageHash = keccak256(abi.encodePacked(msg.sender));\n        bytes32 ethMessageHash = ECDSA.toEthSignedMessageHash(messageHash);\n        require(hasVIPSaleStarted == true, \"Sale hasn't started\");\n        require(\n            Signature","contract":"NervousNFT","time":0},{"type":"immutable-restrict-modification ","before":"�� ██\n//    ███\n//   █�","after":"�� ██\n//    ███\n//   █�","contract":"NervousNFT","time":0},{"type":"immutable-restrict-modification ","before":"�█\n//  ██   ██\n//\n//\n//  ███  ","after":"�█\n//  ██   ██\n//\n//\n//  ███  ","contract":"NervousNFT","time":0},{"type":"immutable-restrict-modification ","before":"��████  ██    ██ ","after":"��████  ██    ██ ","contract":"NervousNFT","time":0},{"type":"constant-restrict-modification  ","before":" ██ ██      ██   █�","after":" ██ ██      ██   █�","contract":"NervousNFT","time":0}]}
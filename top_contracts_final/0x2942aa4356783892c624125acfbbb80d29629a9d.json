{"time":139,"results":[{"type":"external-function ","before":"function setName(string memory name) public returns (bytes32) {\n        bytes32 node = _claimWithResolver(\n            msg.sender,\n            address(this),\n            address(defaultResolver)\n        );\n        defaultResolver.setName(node, name);\n        return node;\n    }","after":"function setName(string calldata name) public returns (bytes32) {\n        bytes32 node = _claimWithResolver(\n            msg.sender,\n            address(this),\n            address(defaultResolver)\n        );\n        defaultResolver.setName(node, name);\n        return node;\n    }","contract":"ReverseRegistrar","time":0},{"type":"external-function ","before":"function setNameForAddr(\n        address addr,\n        address owner,\n        string memory name\n    ) public authorised(addr) returns (bytes32) {\n        bytes32 node = _claimWithResolver(\n            addr,\n            address(this),\n            address(defaultResolver)\n        );\n        defaultResolver.setName(node, name);\n        ens.setSubnodeOwner(ADDR_REVERSE_NODE, sha3HexAddress(addr), owner);\n        return node;\n    }","after":"function setNameForAddr(\n        address addr,\n        address owner,\n        string calldata name\n    ) public authorised(addr) returns (bytes32) {\n        bytes32 node = _claimWithResolver(\n            addr,\n            address(this),\n            address(defaultResolver)\n        );\n        defaultResolver.setName(node, name);\n        ens.setSubnodeOwner(ADDR_REVERSE_NODE, sha3HexAddress(addr), owner);\n        return node;\n    }","contract":"ReverseRegistrar","time":0},{"type":"external-function ","before":"function setName(string memory name) external override onlyOwner {\n        ReverseRegistrar ensReverseRegistrar = ReverseRegistrar(\n            ens.owner(ADDR_REVERSE_NODE)\n        );\n\n        // call the ENS reverse registrar resolving pool address to name\n        ensReverseRegistrar.setName(name);\n\n        // emit event, for subgraph processing\n        emit StakingPoolRenamed(name);\n    }","after":"function setName(string calldata name) external override onlyOwner {\n        ReverseRegistrar ensReverseRegistrar = ReverseRegistrar(\n            ens.owner(ADDR_REVERSE_NODE)\n        );\n\n        // call the ENS reverse registrar resolving pool address to name\n        ensReverseRegistrar.setName(name);\n\n        // emit event, for subgraph processing\n        emit StakingPoolRenamed(name);\n    }","contract":"StakingPoolImpl","time":0}]}
{"time":110,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function setNiftyName (uint niftyType, string memory niftyName) onlyOwner public {\n       //allow owner to change nifty name\n        _setNiftyTypeName(niftyType, niftyName);\n   }","after":"function setNiftyName (uint niftyType, string calldata niftyName) onlyOwner public {\n       //allow owner to change nifty name\n        _setNiftyTypeName(niftyType, niftyName);\n   }","contract":"BeepleSpringCollection","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) onlyOwner public {\n       //allow owner to change base URI\n        _setBaseURIParent(newBaseURI);\n   }","after":"function setBaseURI(string calldata newBaseURI) onlyOwner public {\n       //allow owner to change base URI\n        _setBaseURIParent(newBaseURI);\n   }","contract":"BeepleSpringCollection","time":0},{"type":"external-function ","before":"function setNiftyIPFSHash(uint nifty_type, string memory ipfs_hash) onlyOwner public {\n       //check if IPFS hash has been set\n       if (_IPFSHashHasBeenSet[nifty_type] == true) { \n           revert (\"IPFS hash already set for ths NFT\");\n       } else {\n           _setTokenIPFSHashNiftyType(nifty_type, ipfs_hash);\n           _IPFSHashHasBeenSet[nifty_type] = true;\n       }\n   }","after":"function setNiftyIPFSHash(uint nifty_type, string calldata ipfs_hash) onlyOwner public {\n       //check if IPFS hash has been set\n       if (_IPFSHashHasBeenSet[nifty_type] == true) { \n           revert (\"IPFS hash already set for ths NFT\");\n       } else {\n           _setTokenIPFSHashNiftyType(nifty_type, ipfs_hash);\n           _IPFSHashHasBeenSet[nifty_type] = true;\n       }\n   }","contract":"BeepleSpringCollection","time":0},{"type":"constant-restrict-modification  ","before":"address public masterBuilderContract = 0x6EFB06cF568253a53C7511BD3c31AB28BecB0192;","after":"address public constant masterBuilderContract = 0x6EFB06cF568253a53C7511BD3c31AB28BecB0192;","contract":"BeepleSpringCollection","time":1},{"type":"constant-restrict-modification  ","before":"address public masterBuilderContract = 0x6EFB06cF568253a53C7511BD3c31AB28BecB0192;","after":"address public constant masterBuilderContract = 0x6EFB06cF568253a53C7511BD3c31AB28BecB0192;","contract":"BeepleSpringCollection","time":1}]}
{"time":163,"results":[{"type":"external-function ","before":"function addAddressTowhitelistAddress(address[] memory _addresses) external onlyAdmin {\r\n        require(_addresses.length > 0, \"No addresses\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            isWhiteListed[_addresses[i]] = true;\r\n            whitelistCount++;\r\n            emit AddedToWhiteList(_addresses[i]);\r\n        }\r\n    }","after":"function addAddressTowhitelistAddress(address[] calldata _addresses) external onlyAdmin {\r\n        require(_addresses.length > 0, \"No addresses\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            isWhiteListed[_addresses[i]] = true;\r\n            whitelistCount++;\r\n            emit AddedToWhiteList(_addresses[i]);\r\n        }\r\n    }","contract":"NftSales","time":0},{"type":"external-function ","before":"function safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) external {\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }","after":"function safeTransfer(address from, address to, uint256 tokenId, bytes calldata _data) external {\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }","contract":"NftSales","time":0},{"type":"external-function ","before":"function setBaseUri(string memory uri_) external onlyAdmin {\r\n        uri = uri_;\r\n    }","after":"function setBaseUri(string calldata uri_) external onlyAdmin {\r\n        uri = uri_;\r\n    }","contract":"NftSales","time":0},{"type":"external-function ","before":"function revealNfts(string memory uri_) external onlyAdmin {\r\n        uri = uri_;\r\n        usePlaceholderUri = false;\r\n    }","after":"function revealNfts(string calldata uri_) external onlyAdmin {\r\n        uri = uri_;\r\n        usePlaceholderUri = false;\r\n    }","contract":"NftSales","time":0},{"type":"external-function ","before":"function airdropNFT(address[] memory _recipients, uint256[] memory _amounts) external onlyAdmin {\r\n        require(_recipients.length > 0, \"no recipients\");\r\n        require(_recipients.length == _amounts.length, \"number of recipients and amounts do not match\");\r\n        for(uint x = 0; x < _recipients.length; x++) {\r\n            require(_tokenIds.current() + _amounts[x] <= maxNfts, \"Max NFTs would be exceeded\");\r\n            for (uint256 i = 0; i < _amounts[x]; i++) {\r\n                _tokenIds.increment();\r\n                _mint(_recipients[x], _tokenIds.current());\r\n            }\r\n            emit AirdropNFT(_msgSender(), _recipients[x], _amounts[x]);\r\n        }\r\n    }","after":"function airdropNFT(address[] calldata _recipients, uint256[] calldata _amounts) external onlyAdmin {\r\n        require(_recipients.length > 0, \"no recipients\");\r\n        require(_recipients.length == _amounts.length, \"number of recipients and amounts do not match\");\r\n        for(uint x = 0; x < _recipients.length; x++) {\r\n            require(_tokenIds.current() + _amounts[x] <= maxNfts, \"Max NFTs would be exceeded\");\r\n            for (uint256 i = 0; i < _amounts[x]; i++) {\r\n                _tokenIds.increment();\r\n                _mint(_recipients[x], _tokenIds.current());\r\n            }\r\n            emit AirdropNFT(_msgSender(), _recipients[x], _amounts[x]);\r\n        }\r\n    }","contract":"NftSales","time":0},{"type":"external-function ","before":"function setAdmins(address[] memory _Admins) external onlyOwner {\r\n        _setAdmins(_Admins);\r\n    }","after":"function setAdmins(address[] calldata _Admins) external onlyOwner {\r\n        _setAdmins(_Admins);\r\n    }","contract":"NftSales","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxNfts = 10000;","after":"uint public constant maxNfts = 10000;","contract":"NftSales","time":0}]}
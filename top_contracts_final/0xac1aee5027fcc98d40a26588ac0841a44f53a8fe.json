{"time":97,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function add(string memory token1, string memory token2) public payable {\n        require(msg.value == 2 finney);\n        require(bytes(token1).length > 0);\n        require(bytes(token2).length > 0);\n        \n        string memory token3 = string(abi.encodePacked(token1, token2));\n        \n        uint256 tokenId1 = value_to_id[token1];\n        uint256 tokenId2 = value_to_id[token2];\n        uint256 tokenId3 = value_to_id[token3];\n        \n        require(tokenId1 > 0);\n        require(tokenId2 > 0);\n        require(tokenId3 == 0);\n        \n        address payable owner1 = address(uint160(ownerOf(tokenId1)));\n        address payable owner2 = address(uint160(ownerOf(tokenId2)));\n        \n        _registerToken(token3);\n        \n        owner1.transfer(1 finney);\n        owner2.transfer(1 finney);\n    }","after":"function add(string calldata token1, string calldata token2) public payable {\n        require(msg.value == 2 finney);\n        require(bytes(token1).length > 0);\n        require(bytes(token2).length > 0);\n        \n        string memory token3 = string(abi.encodePacked(token1, token2));\n        \n        uint256 tokenId1 = value_to_id[token1];\n        uint256 tokenId2 = value_to_id[token2];\n        uint256 tokenId3 = value_to_id[token3];\n        \n        require(tokenId1 > 0);\n        require(tokenId2 > 0);\n        require(tokenId3 == 0);\n        \n        address payable owner1 = address(uint160(ownerOf(tokenId1)));\n        address payable owner2 = address(uint160(ownerOf(tokenId2)));\n        \n        _registerToken(token3);\n        \n        owner1.transfer(1 finney);\n        owner2.transfer(1 finney);\n    }","contract":"WORD","time":0}]}
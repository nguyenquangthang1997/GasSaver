{"time":19,"results":[{"type":"external-function ","before":"function burnReplicantTraits(uint256 paymentTier, uint[] memory avastarIDs, bool[12][] memory avastarTraits) public payable {\n            \n            require(msg.value >= paymentTier * paymentIncrement);\n            require(avastarIDs.length == avastarTraits.length);\n            \n            uint256 totalAvastars = avastarIDs.length;\n            \n            bool[12] memory traitIsUsed;\n            bool[12] memory traitsToBurn;\n            \n            for (uint i = 0; i < totalAvastars; i = i + 1){\n                (, traitIsUsed) = Avastars.getPrimeReplicationByTokenId(avastarIDs[i]);\n                traitsToBurn = avastarTraits[i];\n                \n                for(uint j = 0; j < 12; j = j + 1) {\n                    if(traitIsUsed[j] == true) {\n                        require(traitsToBurn[j] == false);\n                    }\n                }\n                \n                Avastars.useTraits(avastarIDs[i],avastarTraits[i]);                \n            }    \n            \n            AvastarReplicantToken.transferFrom(msg.sender,address(this),1000000000000000000);\n            AvastarReplicantToken.burnArt(1);\n            paymentWallet.transfer(msg.value);\n    \n            emit TraitsBurned(msg.sender, paymentTier);\n        }","after":"function burnReplicantTraits(uint256 paymentTier, uint[] calldata avastarIDs, bool[12][] calldata avastarTraits) public payable {\n            \n            require(msg.value >= paymentTier * paymentIncrement);\n            require(avastarIDs.length == avastarTraits.length);\n            \n            uint256 totalAvastars = avastarIDs.length;\n            \n            bool[12] memory traitIsUsed;\n            bool[12] memory traitsToBurn;\n            \n            for (uint i = 0; i < totalAvastars; i = i + 1){\n                (, traitIsUsed) = Avastars.getPrimeReplicationByTokenId(avastarIDs[i]);\n                traitsToBurn = avastarTraits[i];\n                \n                for(uint j = 0; j < 12; j = j + 1) {\n                    if(traitIsUsed[j] == true) {\n                        require(traitsToBurn[j] == false);\n                    }\n                }\n                \n                Avastars.useTraits(avastarIDs[i],avastarTraits[i]);                \n            }    \n            \n            AvastarReplicantToken.transferFrom(msg.sender,address(this),1000000000000000000);\n            AvastarReplicantToken.burnArt(1);\n            paymentWallet.transfer(msg.value);\n    \n            emit TraitsBurned(msg.sender, paymentTier);\n        }","contract":"AvastarsInterface","time":0},{"type":"constant-restrict-modification  ","before":"address public AvastarsAddress = 0xF3E778F839934fC819cFA1040AabaCeCBA01e049;","after":"address public constant AvastarsAddress = 0xF3E778F839934fC819cFA1040AabaCeCBA01e049;","contract":"AvastarsInterface","time":0},{"type":"constant-restrict-modification  ","before":"address public ARTAddress = 0x69ad42A8726f161Bd4C76305DFa8F4ecc120115c;","after":"address public constant ARTAddress = 0x69ad42A8726f161Bd4C76305DFa8F4ecc120115c;","contract":"AvastarsInterface","time":0}]}
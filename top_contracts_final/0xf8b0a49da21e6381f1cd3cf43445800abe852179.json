{"time":263,"results":[{"type":"external-function ","before":"function initializePaymentSplitter (address[] memory payees, uint256[] memory shares_) external onlyOwner {\n        require (!initialized, \"Payment Split Already Initialized!\");\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n        initialized=true;\n    }","after":"function initializePaymentSplitter (address[] calldata payees, uint256[] calldata shares_) external onlyOwner {\n        require (!initialized, \"Payment Split Already Initialized!\");\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n        initialized=true;\n    }","contract":"CryptoFlyz","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","contract":"CryptoFlyz","time":0},{"type":"external-function ","before":"function setContractURI(string memory contractURI_) external onlyOwner {\n        _contractURI = contractURI_;\n    }","after":"function setContractURI(string calldata contractURI_) external onlyOwner {\n        _contractURI = contractURI_;\n    }","contract":"CryptoFlyz","time":0},{"type":"external-function ","before":"function mintSpecial(uint256 [] memory specialId) external onlyOwner {        \n        require (!devMintLocked, \"Dev Mint Permanently Locked\");\n        for (uint256 i = 0; i < specialId.length; i++) {\n            require (specialId[i]!=0);\n            _mint(msg.sender,specialId[i]);\n        }\n    }","after":"function mintSpecial(uint256 [] calldata specialId) external onlyOwner {        \n        require (!devMintLocked, \"Dev Mint Permanently Locked\");\n        for (uint256 i = 0; i < specialId.length; i++) {\n            require (specialId[i]!=0);\n            _mint(msg.sender,specialId[i]);\n        }\n    }","contract":"CryptoFlyz","time":0},{"type":"external-function ","before":"function multiMintPublic(uint256 [] memory nftIds, uint256 quantity) external payable {\n        require(quantity <= maxMintsPerTx, \"trying to mint too many at a time!\");\n        require(tokenCount - 1 + quantity <= maxTokens, \"minting this many would exceed supply\");\n        require(msg.value >= publicTokenPrice * quantity, \"not enough ether sent!\");\n        require(msg.sender == tx.origin, \"no contracts please!\");\n        require(!publicMintLocked, \"minting is not open to the public yet!\");\n        for (uint i=0; i< nftIds.length; i++) {\n            if (nftIds[i] >= 1000000) {\n                uint256 newID = SafeMath.div(nftIds[i], 1000000);\n                newID = SafeMath.add(newID, 6969);\n                if(_exists(newID)) {\n                    continue;\n                } else {\n                    _safeMint(msg.sender, newID);\n                    tokenCount++;\n                }\n            } else {\n                if(_exists(nftIds[i])) {\n                    continue;\n                } else {\n                    _safeMint(msg.sender, nftIds[i]);\n                    tokenCount++;\n                }\n            }\n        }\n    }","after":"function multiMintPublic(uint256 [] calldata nftIds, uint256 quantity) external payable {\n        require(quantity <= maxMintsPerTx, \"trying to mint too many at a time!\");\n        require(tokenCount - 1 + quantity <= maxTokens, \"minting this many would exceed supply\");\n        require(msg.value >= publicTokenPrice * quantity, \"not enough ether sent!\");\n        require(msg.sender == tx.origin, \"no contracts please!\");\n        require(!publicMintLocked, \"minting is not open to the public yet!\");\n        for (uint i=0; i< nftIds.length; i++) {\n            if (nftIds[i] >= 1000000) {\n                uint256 newID = SafeMath.div(nftIds[i], 1000000);\n                newID = SafeMath.add(newID, 6969);\n                if(_exists(newID)) {\n                    continue;\n                } else {\n                    _safeMint(msg.sender, newID);\n                    tokenCount++;\n                }\n            } else {\n                if(_exists(nftIds[i])) {\n                    continue;\n                } else {\n                    _safeMint(msg.sender, nftIds[i]);\n                    tokenCount++;\n                }\n            }\n        }\n    }","contract":"CryptoFlyz","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public tokenPrice = 0;","after":"uint256 public constant tokenPrice = 0;","contract":"CryptoFlyz","time":1},{"type":"constant-restrict-modification  ","before":"address public nftAddress = 0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6;","after":"address public constant nftAddress = 0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6;","contract":"CryptoFlyz","time":1}]}
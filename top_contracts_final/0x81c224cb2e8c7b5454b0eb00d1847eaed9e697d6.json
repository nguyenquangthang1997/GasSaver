{"time":122,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public maxSupply = 5000;\nuint256 public PRICE = 40000000000000000;\nbool public saleIsActive = false;\nuint public supply  = 0;\nstring private _baseTokenURI;\nuint public maxPerTransaction = 3;\nuint public maxPerWallet = 3;\nstring public contractURIstr = \"\";\nstring public name = \"AussieMates Official MatesPass\";\naddress payable private devguy = payable(0x0F7961EE81B7cB2B859157E9c0D7b1A1D9D35A5D);","after":"uint256 public maxSupply = 5000;\nuint256 public PRICE = 40000000000000000;\nuint public supply  = 0;\nstring private _baseTokenURI;\nuint public maxPerTransaction = 3;\nuint public maxPerWallet = 3;\nstring public contractURIstr = \"\";\nstring public name = \"AussieMates Official MatesPass\";\naddress payable private devguy = payable(0x0F7961EE81B7cB2B859157E9c0D7b1A1D9D35A5D);\nbool public saleIsActive = false;\n","contract":"AussieMatesMatesPass","time":0},{"type":"external-function ","before":"function setName(string memory _name) public onlyOwner {\r\n        name = _name;\r\n    }","after":"function setName(string calldata _name) public onlyOwner {\r\n        name = _name;\r\n    }","contract":"AussieMatesMatesPass","time":0},{"type":"external-function ","before":"function setContractURI(string memory newuri) external onlyOwner {\r\n       contractURIstr = newuri;\r\n    }","after":"function setContractURI(string calldata newuri) external onlyOwner {\r\n       contractURIstr = newuri;\r\n    }","contract":"AussieMatesMatesPass","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) public onlyOwner {\r\n        _setURI(newuri);\r\n    }","after":"function setURI(string calldata newuri) public onlyOwner {\r\n        _setURI(newuri);\r\n    }","contract":"AussieMatesMatesPass","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI)external onlyOwner {\r\n        _setBaseURI(baseURI);\r\n    }","after":"function setBaseURI(string calldata baseURI)external onlyOwner {\r\n        _setBaseURI(baseURI);\r\n    }","contract":"AussieMatesMatesPass","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"AussieMatesMatesPass","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"AussieMatesMatesPass","time":0},{"type":"constant-restrict-modification  ","before":"address payable private devguy = payable(0x0F7961EE81B7cB2B859157E9c0D7b1A1D9D35A5D);","after":"address payable private constant devguy = payable(0x0F7961EE81B7cB2B859157E9c0D7b1A1D9D35A5D);","contract":"AussieMatesMatesPass","time":0}]}
{"time":367,"results":[{"type":"external-function ","before":"function atomicMatch_(address[6] memory addresses, uint256[12] memory uints, bytes memory signatures)\n        public\n        payable\n    {\n        return atomicMatch(\n            Order(addresses[0], addresses[1], addresses[2], (uints[0]), uints[1], uints[2], uints[3], uints[4], uints[5]),\n            Order(addresses[3], addresses[4], addresses[5], (uints[6]), uints[7], uints[8], uints[9], uints[10], uints[11]),\n            signatures\n        );\n    }","after":"function atomicMatch_(address[6] calldata addresses, uint256[12] calldata uints, bytes calldata signatures)\n        public\n        payable\n    {\n        return atomicMatch(\n            Order(addresses[0], addresses[1], addresses[2], (uints[0]), uints[1], uints[2], uints[3], uints[4], uints[5]),\n            Order(addresses[3], addresses[4], addresses[5], (uints[6]), uints[7], uints[8], uints[9], uints[10], uints[11]),\n            signatures\n        );\n    }","contract":"Exchange","time":0},{"type":"constant-restrict-modification  ","before":"bytes internal personalSignPrefix = \"\\x19Ethereum Signed Message:\\n\";","after":"bytes internal constant personalSignPrefix = \"\\x19Ethereum Signed Message:\\n\";","contract":"Exchange","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public limit = 10000 ether;","after":"uint256 public constant limit = 10000 ether;","contract":"Farm","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public limit = 10000 ether;","after":"uint256 public constant limit = 10000 ether;","contract":"FarmV2","time":0},{"type":"external-function ","before":"function redeem (address collection, address _token, address[] memory payees, uint256 [] memory sharePerc_) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(payees.length > 0, \"redeem: no payees\");\n        require(payees.length == sharePerc_.length, \"redeem: no payees\");\n\n        _totalCllcAmnt = collectionMoney[collection];\n\n        require(_totalCllcAmnt > 0,\"redeem: insufficient funds\");\n        \n        uint256 totalShareAmount;\n    \n        for (uint256 i = 0; i < sharePerc_.length; i++) {\n\n             totalShareAmount = totalShareAmount.add(getAmountPer(_totalCllcAmnt, sharePerc_[i]));\n        }\n        \n        require(_totalCllcAmnt >= totalShareAmount, \"redeem: the total amount in the contract must be equal to or greater than the amount to be withdraw\"); \n\n        for (uint256 i = 0; i < payees.length; i++) {\n            \n            _addPayee(payees[i], sharePerc_[i], collection, _token);\n        }\n    }","after":"function redeem (address collection, address _token, address[] calldata payees, uint256 [] calldata sharePerc_) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(payees.length > 0, \"redeem: no payees\");\n        require(payees.length == sharePerc_.length, \"redeem: no payees\");\n\n        _totalCllcAmnt = collectionMoney[collection];\n\n        require(_totalCllcAmnt > 0,\"redeem: insufficient funds\");\n        \n        uint256 totalShareAmount;\n    \n        for (uint256 i = 0; i < sharePerc_.length; i++) {\n\n             totalShareAmount = totalShareAmount.add(getAmountPer(_totalCllcAmnt, sharePerc_[i]));\n        }\n        \n        require(_totalCllcAmnt >= totalShareAmount, \"redeem: the total amount in the contract must be equal to or greater than the amount to be withdraw\"); \n\n        for (uint256 i = 0; i < payees.length; i++) {\n            \n            _addPayee(payees[i], sharePerc_[i], collection, _token);\n        }\n    }","contract":"MoneyHandler","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","contract":"ERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","contract":"ERC1155","time":0}]}
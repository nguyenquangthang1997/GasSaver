{"time":204,"results":[{"type":"loop-duplication","before":"\nstart line 248 column 2, end line 250 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\trequire(tokens[ids[i]].maxSupply > 0, \"Query for non-existent token\");\n\t\t}\nstart line 251 column 2, end line 253 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\ttokens[ids[i]].salesActive = !tokens[ids[i]].salesActive;\n\t\t}","after":"// merge loop\n\nstart line 248 column 2, end line 250 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\trequire(tokens[ids[i]].maxSupply > 0, \"Query for non-existent token\");\n\t\t}\nstart line 251 column 2, end line 253 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\ttokens[ids[i]].salesActive = !tokens[ids[i]].salesActive;\n\t\t}","contract":"DRPMember","time":0},{"type":"loop-duplication","before":"\nstart line 257 column 2, end line 259 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\trequire(tokens[ids[i]].maxSupply > 0, \"Query for non-existent token\");\n\t\t}\nstart line 260 column 2, end line 262 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\ttokens[ids[i]].whitelistSalesActive = !tokens[ids[i]].whitelistSalesActive;\n\t\t}","after":"// merge loop\n\nstart line 257 column 2, end line 259 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\trequire(tokens[ids[i]].maxSupply > 0, \"Query for non-existent token\");\n\t\t}\nstart line 260 column 2, end line 262 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\ttokens[ids[i]].whitelistSalesActive = !tokens[ids[i]].whitelistSalesActive;\n\t\t}","contract":"DRPMember","time":0},{"type":"loop-duplication","before":"\nstart line 271 column 2, end line 273 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\trequire(tokens[ids[i]].maxSupply > 0, \"Query for non-existent token\");\n\t\t}\nstart line 274 column 2, end line 276 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\ttokens[ids[i]].uri = uris[i];\n\t\t}","after":"// merge loop\n\nstart line 271 column 2, end line 273 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\trequire(tokens[ids[i]].maxSupply > 0, \"Query for non-existent token\");\n\t\t}\nstart line 274 column 2, end line 276 column 2\nfor (uint16 i = 0; i < ids.length; i++) {\n\t\t\ttokens[ids[i]].uri = uris[i];\n\t\t}","contract":"DRPMember","time":0},{"type":"struct-data-arrangement ","before":"\nbool salesActive\nbool whitelistSalesActive\nuint16 tokenId\nuint16 mintableMax\nuint16 maxSupply\nuint256 price\nuint16 maxPerClaim\nuint16 maxPerWallet\nstring uri\nuint16[] drops","after":"uint256 price\nstring uri\nuint16[] drops\nuint16 tokenId\nuint16 mintableMax\nuint16 maxSupply\nuint16 maxPerClaim\nuint16 maxPerWallet\nbool salesActive\nbool whitelistSalesActive\n","contract":"DRPMember","time":1},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"DRPMember","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"DRPMember","time":0}]}
{"time":71,"results":[{"type":"external-function ","before":"function updateDelegatedPrice(DelegatedPriceUpdate memory update)\n        external\n        UpdatingTimeInPast(update.updatedAt)\n        returns (bool success)\n    {\n        _delegatedPriceUpdate(update);\n        return true;\n    }","after":"function updateDelegatedPrice(DelegatedPriceUpdate calldata update)\n        external\n        UpdatingTimeInPast(update.updatedAt)\n        returns (bool success)\n    {\n        _delegatedPriceUpdate(update);\n        return true;\n    }","contract":"ZenterestPriceFeed","time":0},{"type":"external-function ","before":"function updateDelegatedPricesBatch(DelegatedPriceUpdate[] memory updates)\n        external\n        returns (uint256 updatedPricesCount)\n    {\n        uint256 updatesCount = updates.length;\n        for (uint256 i = 0; i < updatesCount; i++) {\n            DelegatedPriceUpdate memory update = updates[i];\n            _checkUpdatingTime(update.updatedAt);\n            Price storage actualPrice = _prices[update.token];\n            if (actualPrice.updatedAt >= update.updatedAt) continue;\n            _delegatedPriceUpdate(update);\n            updatedPricesCount += 1;\n        }\n    }","after":"function updateDelegatedPricesBatch(DelegatedPriceUpdate[] calldata updates)\n        external\n        returns (uint256 updatedPricesCount)\n    {\n        uint256 updatesCount = updates.length;\n        for (uint256 i = 0; i < updatesCount; i++) {\n            DelegatedPriceUpdate memory update = updates[i];\n            _checkUpdatingTime(update.updatedAt);\n            Price storage actualPrice = _prices[update.token];\n            if (actualPrice.updatedAt >= update.updatedAt) continue;\n            _delegatedPriceUpdate(update);\n            updatedPricesCount += 1;\n        }\n    }","contract":"ZenterestPriceFeed","time":0},{"type":"external-function ","before":"function updateDelegatedPricesSet(PriceUpdate[] memory updates, Signature memory signature)\n        external\n        returns (uint256 updatedPricesCount)\n    {\n        uint256 updatesCount = updates.length;\n        uint256[] memory splittedUpdates = new uint256[](updatesCount * 3);\n        uint256 pointer = 0;\n        for (uint256 updateIndex = 0; updateIndex < updatesCount; updateIndex++) {\n            PriceUpdate memory update = updates[updateIndex];\n            splittedUpdates[pointer] = uint256(update.token);\n            splittedUpdates[pointer + 1] = update.newPriceMantissa;\n            splittedUpdates[pointer + 2] = update.updatedAt;\n            pointer += 3;\n        }\n        bytes memory encodedUpdates = abi.encodePacked(splittedUpdates);\n        _checkSignerIsReporter(encodedUpdates, signature);\n        return _updatePricesBatch(updates);\n    }","after":"function updateDelegatedPricesSet(PriceUpdate[] calldata updates, Signature calldata signature)\n        external\n        returns (uint256 updatedPricesCount)\n    {\n        uint256 updatesCount = updates.length;\n        uint256[] memory splittedUpdates = new uint256[](updatesCount * 3);\n        uint256 pointer = 0;\n        for (uint256 updateIndex = 0; updateIndex < updatesCount; updateIndex++) {\n            PriceUpdate memory update = updates[updateIndex];\n            splittedUpdates[pointer] = uint256(update.token);\n            splittedUpdates[pointer + 1] = update.newPriceMantissa;\n            splittedUpdates[pointer + 2] = update.updatedAt;\n            pointer += 3;\n        }\n        bytes memory encodedUpdates = abi.encodePacked(splittedUpdates);\n        _checkSignerIsReporter(encodedUpdates, signature);\n        return _updatePricesBatch(updates);\n    }","contract":"ZenterestPriceFeed","time":0},{"type":"external-function ","before":"function updatePrice(PriceUpdate memory update)\n        external\n        UpdatingTimeInPast(update.updatedAt)\n        returns (bool success)\n    {\n        require(msg.sender == _reporter, \"Caller not reporter\");\n        _updatePrice(update.token, update.newPriceMantissa, update.updatedAt);\n        return true;\n    }","after":"function updatePrice(PriceUpdate calldata update)\n        external\n        UpdatingTimeInPast(update.updatedAt)\n        returns (bool success)\n    {\n        require(msg.sender == _reporter, \"Caller not reporter\");\n        _updatePrice(update.token, update.newPriceMantissa, update.updatedAt);\n        return true;\n    }","contract":"ZenterestPriceFeed","time":0},{"type":"external-function ","before":"function updatePricesBatch(PriceUpdate[] memory updates) external returns (uint256 updatedPricesCount) {\n        require(msg.sender == _reporter, \"Caller not reporter\");\n        return _updatePricesBatch(updates);\n    }","after":"function updatePricesBatch(PriceUpdate[] calldata updates) external returns (uint256 updatedPricesCount) {\n        require(msg.sender == _reporter, \"Caller not reporter\");\n        return _updatePricesBatch(updates);\n    }","contract":"ZenterestPriceFeed","time":0}]}
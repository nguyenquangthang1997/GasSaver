{"time":123,"results":[{"type":"external-function ","before":"function sendGifts(address[] memory _wallets) public onlyOwner {\n        require(\n            totalSupply + _wallets.length <= maxSupply,\n            \"not enough tokens left\"\n        );\n        for (uint256 i = 0; i < _wallets.length; i++) {\n            _safeMint(_wallets[i], totalSupply + 1 + i);\n        }\n        totalSupply += _wallets.length;\n    }","after":"function sendGifts(address[] calldata _wallets) public onlyOwner {\n        require(\n            totalSupply + _wallets.length <= maxSupply,\n            \"not enough tokens left\"\n        );\n        for (uint256 i = 0; i < _wallets.length; i++) {\n            _safeMint(_wallets[i], totalSupply + 1 + i);\n        }\n        totalSupply += _wallets.length;\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _uri) external onlyOwner {\n        baseURI = _uri;\n    }","after":"function setBaseUri(string calldata _uri) external onlyOwner {\n        baseURI = _uri;\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function whitelistUsers(address[] memory addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelistedAddresses[addresses[i]] = true;\n        }\n    }","after":"function whitelistUsers(address[] calldata addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelistedAddresses[addresses[i]] = true;\n        }\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function whitelistDCUsers(address[] memory addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            DCWhitelistedAddresses[addresses[i]] = true;\n        }\n    }","after":"function whitelistDCUsers(address[] calldata addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            DCWhitelistedAddresses[addresses[i]] = true;\n        }\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function whitelistAlphaUsers(address[] memory addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            alphaWhitelistedAddresses[addresses[i]] = true;\n        }\n    }","after":"function whitelistAlphaUsers(address[] calldata addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            alphaWhitelistedAddresses[addresses[i]] = true;\n        }\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function removeWhitelistUsers(address[] memory addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelistedAddresses[addresses[i]] = false;\n        }\n    }","after":"function removeWhitelistUsers(address[] calldata addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelistedAddresses[addresses[i]] = false;\n        }\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function removeWhitelistDCUsers(address[] memory addresses)\n        public\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            DCWhitelistedAddresses[addresses[i]] = false;\n        }\n    }","after":"function removeWhitelistDCUsers(address[] calldata addresses)\n        public\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            DCWhitelistedAddresses[addresses[i]] = false;\n        }\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function removeAlphaWhitelistUsers(address[] memory addresses)\n        public\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            alphaWhitelistedAddresses[addresses[i]] = false;\n        }\n    }","after":"function removeAlphaWhitelistUsers(address[] calldata addresses)\n        public\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            alphaWhitelistedAddresses[addresses[i]] = false;\n        }\n    }","contract":"CryptoTribe","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","after":"function setBaseExtension(string calldata _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","contract":"CryptoTribe","time":0}]}
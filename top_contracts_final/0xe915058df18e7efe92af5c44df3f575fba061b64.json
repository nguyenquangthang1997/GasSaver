{"time":554,"results":[{"type":"external-function ","before":"function verifyRequest(\n        HashStore                    hashStore,\n        SecurityStore                securityStore,\n        bytes32                      domainSeperator,\n        bytes32                      txAwareHash,\n        GuardianUtils.SigRequirement sigRequirement,\n        Request memory               request,\n        bytes   memory               encodedRequest\n        )\n        public\n    {\n        require(block.timestamp <= request.validUntil, \"EXPIRED_SIGNED_REQUEST\");\n\n        bytes32 _txAwareHash = EIP712.hashPacked(domainSeperator, encodedRequest);\n\n        // If txAwareHash from the meta-transaction is non-zero,\n        // we must verify it matches the hash signed by the respective signers.\n        require(\n            txAwareHash == 0 || txAwareHash == _txAwareHash,\n            \"TX_INNER_HASH_MISMATCH\"\n        );\n\n        // Save hash to prevent replay attacks\n        hashStore.verifyAndUpdate(request.wallet, _txAwareHash);\n\n        require(\n            _txAwareHash.verifySignatures(request.signers, request.signatures),\n            \"INVALID_SIGNATURES\"\n        );\n\n        require(\n            GuardianUtils.requireMajority(\n                securityStore,\n                request.wallet,\n                request.signers,\n                sigRequirement\n            ),\n            \"PERMISSION_DENIED\"\n        );\n    }","after":"function verifyRequest(\n        HashStore                    hashStore,\n        SecurityStore                securityStore,\n        bytes32                      domainSeperator,\n        bytes32                      txAwareHash,\n        GuardianUtils.SigRequirement sigRequirement,\n        Request calldata               request,\n        bytes   calldata               encodedRequest\n        )\n        public\n    {\n        require(block.timestamp <= request.validUntil, \"EXPIRED_SIGNED_REQUEST\");\n\n        bytes32 _txAwareHash = EIP712.hashPacked(domainSeperator, encodedRequest);\n\n        // If txAwareHash from the meta-transaction is non-zero,\n        // we must verify it matches the hash signed by the respective signers.\n        require(\n            txAwareHash == 0 || txAwareHash == _txAwareHash,\n            \"TX_INNER_HASH_MISMATCH\"\n        );\n\n        // Save hash to prevent replay attacks\n        hashStore.verifyAndUpdate(request.wallet, _txAwareHash);\n\n        require(\n            _txAwareHash.verifySignatures(request.signers, request.signatures),\n            \"INVALID_SIGNATURES\"\n        );\n\n        require(\n            GuardianUtils.requireMajority(\n                securityStore,\n                request.wallet,\n                request.signers,\n                sigRequirement\n            ),\n            \"PERMISSION_DENIED\"\n        );\n    }","contract":"SignedRequest","time":0}]}
{"time":194,"results":[{"type":"external-function ","before":"function whitelistMint(uint256 _amount, bytes32[] memory proof) external payable {\n        require(whitelistState, \"Rich Dwarves: Presale is OFF\");\n        require(!paused, \"Rich Dwarves Tribe: contract is paused\");\n        require(\n            _amount <= presaleAmountLimit,\n            \"Rich Dwarves Tribe: You can't mint so much tokens\"\n        );\n        require(\n            _presaleClaimed[msg.sender] + _amount <= presaleAmountLimit,\n            \"Rich Dwarves Tribe: You can't mint so much tokens\"\n        );\n\n        require(verify(msg.sender, proof), \"Rich Dwarves Tribe: You are not selected for the presale\");\n\n        require(\n            totalMint + _amount <= maxSupply - giftSupply,\n            \"Rich Dwarves Tribe: max supply exceeded\"\n        );\n        require(\n            _price * _amount <= msg.value,\n            \"Rich Dwarves Tribe: Ether value sent is not correct\"\n        );\n        uint256 _newItemId;\n        for (uint256 ind = 0; ind < _amount; ind++) {\n            _tokenIds.increment();\n            _newItemId = _tokenIds.current();\n            _safeMint(msg.sender, _newItemId);\n            _presaleClaimed[msg.sender] = _presaleClaimed[msg.sender] + 1;\n            totalNFT = totalNFT + 1;\n            totalMint = totalMint + 1;\n            \n        }\n    }","after":"function whitelistMint(uint256 _amount, bytes32[] calldata proof) external payable {\n        require(whitelistState, \"Rich Dwarves: Presale is OFF\");\n        require(!paused, \"Rich Dwarves Tribe: contract is paused\");\n        require(\n            _amount <= presaleAmountLimit,\n            \"Rich Dwarves Tribe: You can't mint so much tokens\"\n        );\n        require(\n            _presaleClaimed[msg.sender] + _amount <= presaleAmountLimit,\n            \"Rich Dwarves Tribe: You can't mint so much tokens\"\n        );\n\n        require(verify(msg.sender, proof), \"Rich Dwarves Tribe: You are not selected for the presale\");\n\n        require(\n            totalMint + _amount <= maxSupply - giftSupply,\n            \"Rich Dwarves Tribe: max supply exceeded\"\n        );\n        require(\n            _price * _amount <= msg.value,\n            \"Rich Dwarves Tribe: Ether value sent is not correct\"\n        );\n        uint256 _newItemId;\n        for (uint256 ind = 0; ind < _amount; ind++) {\n            _tokenIds.increment();\n            _newItemId = _tokenIds.current();\n            _safeMint(msg.sender, _newItemId);\n            _presaleClaimed[msg.sender] = _presaleClaimed[msg.sender] + 1;\n            totalNFT = totalNFT + 1;\n            totalMint = totalMint + 1;\n            \n        }\n    }","contract":"RichDwarvesTribe","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","after":"function setBaseExtension(string calldata _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","contract":"RichDwarvesTribe","time":0},{"type":"external-function ","before":"function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\n        notRevealedUri = _notRevealedURI;\n    }","after":"function setNotRevealedURI(string calldata _notRevealedURI) public onlyOwner {\n        notRevealedUri = _notRevealedURI;\n    }","contract":"RichDwarvesTribe","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public giftSupply = 3;","after":"uint256 public constant giftSupply = 3;","contract":"RichDwarvesTribe","time":1},{"type":"constant-restrict-modification  ","before":"uint256 presaleAmountLimit = 100;","after":"uint256 constant presaleAmountLimit = 100;","contract":"RichDwarvesTribe","time":1},{"type":"constant-restrict-modification  ","before":"uint256 _price = 200000000000000000;","after":"uint256 constant _price = 200000000000000000;","contract":"RichDwarvesTribe","time":1}]}
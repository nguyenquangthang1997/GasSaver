{"time":195,"results":[{"type":"state-data-arrangement ","before":"\naddress[] private payeeAddresses;\nuint256 private mintPrice = 0.06 ether;\nmapping(address => bool) public presaleMinted;\nmapping(address => bool) public partnerMinted;\nbool public presaleIsActive = false;\nbool public saleIsActive = false;\nbool public partnerGiveawayIsActive = false;\nstring private _baseURIextended;\nuint16 private constant MAX_SUPPLY = 3000;\nuint16 private constant MINT_LIMIT = 10;\nuint16 private tokensGiven;\nuint16 private partnerTokensGiven;\nuint16 private tokensPartner = 378;\nbytes32[] private merkleRoots;\nuint16[] private presaleCounts;","after":"address[] private payeeAddresses;\nuint256 private mintPrice = 0.06 ether;\nmapping(address => bool) public presaleMinted;\nmapping(address => bool) public partnerMinted;\nstring private _baseURIextended;\nbytes32[] private merkleRoots;\nuint16[] private presaleCounts;\nuint16 private constant MAX_SUPPLY = 3000;\nuint16 private constant MINT_LIMIT = 10;\nuint16 private tokensGiven;\nuint16 private partnerTokensGiven;\nuint16 private tokensPartner = 378;\nbool public presaleIsActive = false;\nbool public saleIsActive = false;\nbool public partnerGiveawayIsActive = false;\n","contract":"MintingMiracles","time":1},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) public onlyOwner {\r\n    _baseURIextended = baseURI_;\r\n  }","after":"function setBaseURI(string calldata baseURI_) public onlyOwner {\r\n    _baseURIextended = baseURI_;\r\n  }","contract":"MintingMiracles","time":0},{"type":"external-function ","before":"function mintPresale(bytes32[] memory merkleProof, uint16 _count)\r\n    external\r\n    payable\r\n  {\r\n    uint256 ts = totalSupply();\r\n    require(presaleIsActive, \"presaleIsActive\");\r\n    require(_count <= presaleCounts[0], \"TRANSACTION_LIMIT\");\r\n    require(ts + _count <= MAX_SUPPLY, \"MAX_SUPPLY\");\r\n    require(msg.value >= mintPrice * _count, \"mintPrice\");\r\n    require(!presaleMinted[msg.sender], \"presaleMinted\");\r\n    require(isOnList(merkleRoots[0], merkleProof, msg.sender), \"presaleList\");\r\n\r\n    presaleMinted[msg.sender] = true;\r\n    for (uint16 i = 0; i < _count; i++) {\r\n      _mint(msg.sender, ts);\r\n      emit MintPresale(msg.sender, ts);\r\n      ts++;\r\n    }\r\n  }","after":"function mintPresale(bytes32[] calldata merkleProof, uint16 _count)\r\n    external\r\n    payable\r\n  {\r\n    uint256 ts = totalSupply();\r\n    require(presaleIsActive, \"presaleIsActive\");\r\n    require(_count <= presaleCounts[0], \"TRANSACTION_LIMIT\");\r\n    require(ts + _count <= MAX_SUPPLY, \"MAX_SUPPLY\");\r\n    require(msg.value >= mintPrice * _count, \"mintPrice\");\r\n    require(!presaleMinted[msg.sender], \"presaleMinted\");\r\n    require(isOnList(merkleRoots[0], merkleProof, msg.sender), \"presaleList\");\r\n\r\n    presaleMinted[msg.sender] = true;\r\n    for (uint16 i = 0; i < _count; i++) {\r\n      _mint(msg.sender, ts);\r\n      emit MintPresale(msg.sender, ts);\r\n      ts++;\r\n    }\r\n  }","contract":"MintingMiracles","time":0},{"type":"external-function ","before":"function mintPartner(bytes32[] memory merkleProof, uint16 _count) external {\r\n    uint256 ts = totalSupply();\r\n    require(partnerGiveawayIsActive, \"partnerGiveawayIsActive\");\r\n    require(_count <= presaleCounts[1], \"TRANSACTION_LIMIT\");\r\n    require(ts + _count <= MAX_SUPPLY, \"MAX_SUPPLY\");\r\n    require(!partnerMinted[msg.sender], \"partnerMinted\");\r\n    require(isOnList(merkleRoots[1], merkleProof, msg.sender), \"partnerList\");\r\n\r\n    partnerMinted[msg.sender] = true;\r\n    for (uint16 i = 0; i < _count; i++) {\r\n      _mint(msg.sender, ts);\r\n      emit MintPartner(msg.sender, ts);\r\n      ts++;\r\n    }\r\n  }","after":"function mintPartner(bytes32[] calldata merkleProof, uint16 _count) external {\r\n    uint256 ts = totalSupply();\r\n    require(partnerGiveawayIsActive, \"partnerGiveawayIsActive\");\r\n    require(_count <= presaleCounts[1], \"TRANSACTION_LIMIT\");\r\n    require(ts + _count <= MAX_SUPPLY, \"MAX_SUPPLY\");\r\n    require(!partnerMinted[msg.sender], \"partnerMinted\");\r\n    require(isOnList(merkleRoots[1], merkleProof, msg.sender), \"partnerList\");\r\n\r\n    partnerMinted[msg.sender] = true;\r\n    for (uint16 i = 0; i < _count; i++) {\r\n      _mint(msg.sender, ts);\r\n      emit MintPartner(msg.sender, ts);\r\n      ts++;\r\n    }\r\n  }","contract":"MintingMiracles","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private mintPrice = 0.06 ether;","after":"uint256 private constant mintPrice = 0.06 ether;","contract":"MintingMiracles","time":1}]}
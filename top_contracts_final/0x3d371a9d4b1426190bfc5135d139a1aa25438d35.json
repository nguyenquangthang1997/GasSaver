{"time":111,"results":[{"type":"external-function ","before":"function mint(bytes memory signature, uint256 tokenId) public {\r\n    require(!_exists(tokenId), \"Already minted\");\r\n    bytes32 messageHash = keccak256(abi.encodePacked('junkyard marketplace', address(this), msg.sender, tokenId));\r\n    bytes32 digest = ECDSA.toEthSignedMessageHash(messageHash);\r\n\r\n    address signer = ECDSA.recover(digest, signature);\r\n    require(signer == owner(), \"Invalid signature\");\r\n    totalSupply += 1;\r\n\r\n    _mint(msg.sender, tokenId);\r\n  }","after":"function mint(bytes calldata signature, uint256 tokenId) public {\r\n    require(!_exists(tokenId), \"Already minted\");\r\n    bytes32 messageHash = keccak256(abi.encodePacked('junkyard marketplace', address(this), msg.sender, tokenId));\r\n    bytes32 digest = ECDSA.toEthSignedMessageHash(messageHash);\r\n\r\n    address signer = ECDSA.recover(digest, signature);\r\n    require(signer == owner(), \"Invalid signature\");\r\n    totalSupply += 1;\r\n\r\n    _mint(msg.sender, tokenId);\r\n  }","contract":"JunkyardArt","time":0},{"type":"external-function ","before":"function setUri(string memory u) public onlyOwner {\r\n    uri = u;\r\n  }","after":"function setUri(string calldata u) public onlyOwner {\r\n    uri = u;\r\n  }","contract":"JunkyardArt","time":0},{"type":"constant-restrict-modification  ","before":"string internal contractURI = \"https://api.junkyarddogs.io/contract/\";","after":"string internal constant contractURI = \"https://api.junkyarddogs.io/contract/\";","contract":"JunkyardArt","time":0}]}
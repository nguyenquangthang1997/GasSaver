{"time":237,"results":[{"type":"de-morgan-condition ","before":"!_isExcludedFromLimits[from] && !_isExcludedFromLimits[to]","after":"!(_isExcludedFromLimits[from] && _isExcludedFromLimits[to])","loc":{"start":{"line":667,"column":20},"end":{"line":667,"column":77}},"contract":"Serenity","time":0},{"type":"external-function ","before":"function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external onlyOwner {\n        antiSnipe.setBlacklistEnabledMultiple(accounts, enabled);\n    }","after":"function setBlacklistEnabledMultiple(address[] calldata accounts, bool enabled) external onlyOwner {\n        antiSnipe.setBlacklistEnabledMultiple(accounts, enabled);\n    }","contract":"Serenity","time":0},{"type":"external-function ","before":"function multiSendTokens(address[] memory accounts, uint256[] memory amounts) external {\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= amounts[i]);\n            _transfer(msg.sender, accounts[i], amounts[i]*10**_decimals);\n        }\n    }","after":"function multiSendTokens(address[] calldata accounts, uint256[] calldata amounts) external {\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= amounts[i]);\n            _transfer(msg.sender, accounts[i], amounts[i]*10**_decimals);\n        }\n    }","contract":"Serenity","time":0},{"type":"external-function ","before":"function multiSendPercents(address[] memory accounts, uint256[] memory percents, uint256[] memory divisors) external {\n        require(accounts.length == percents.length && percents.length == divisors.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= (_tTotal * percents[i]) / divisors[i]);\n            _transfer(msg.sender, accounts[i], (_tTotal * percents[i]) / divisors[i]);\n        }\n    }","after":"function multiSendPercents(address[] calldata accounts, uint256[] calldata percents, uint256[] calldata divisors) external {\n        require(accounts.length == percents.length && percents.length == divisors.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= (_tTotal * percents[i]) / divisors[i]);\n            _transfer(msg.sender, accounts[i], (_tTotal * percents[i]) / divisors[i]);\n        }\n    }","contract":"Serenity","time":0}]}
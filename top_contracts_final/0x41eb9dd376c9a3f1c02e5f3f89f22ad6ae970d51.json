{"time":398,"results":[{"type":"external-function ","before":"uri_, identical);\n    }\n\n    /**\n     * @dev See {ICreatorCore-setTokenURIPrefixExtension}.\n     */\n    function setTokenURIPrefixExtension(string calldata prefix) external override extensionRequired {\n        _setTokenURIPrefixExtension(prefix);\n    }\n\n    /**\n     * @dev See {ICreatorCore-setTokenURIExtension}.\n     */","after":"uri_, identical);\n    }\n\n    /**\n     * @dev See {ICreatorCore-setTokenURIPrefixExtension}.\n     */\n    function setTokenURIPrefixExtension(string calldata prefix) external override extensionRequired {\n        _setTokenURIPrefixExtension(prefix);\n    }\n\n    /**\n     * @dev See {ICreatorCore-setTokenURIExtension}.\n     */","contract":"Phetta","time":0},{"type":"external-function ","before":"(string calldata uri_) external override adminRequired {\n        _setBaseTokenURI(uri_);\n    }\n\n    /**\n     * @dev See {ICreatorCore-setTokenURIPrefix}.\n     */\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\n        _setTokenURIPrefix(prefix);\n    }\n\n    /*","after":"(string calldata uri_) external override adminRequired {\n        _setBaseTokenURI(uri_);\n    }\n\n    /**\n     * @dev See {ICreatorCore-setTokenURIPrefix}.\n     */\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\n        _setTokenURIPrefix(prefix);\n    }\n\n    /*","contract":"Phetta","time":0},{"type":"external-function ","before":"      // Mint of different tokens and different amounts to different receivers\n            for (uint i = 0; i < to.length; i++) {\n                _mint(to[i], tokenIds[i], amounts[i], new bytes(0));\n            }\n        } else {\n            revert(\"Invalid input\");\n        }\n    }\n\n    /**\n     * @dev See {IERC1155CreatorCore-tokenExtension}.\n     */\n    function tokenExtension(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenExtension(tokenId);\n    }\n\n    /**\n     * @dev See {IERC1155","after":"      // Mint of different tokens and different amounts to different receivers\n            for (uint i = 0; i < to.length; i++) {\n                _mint(to[i], tokenIds[i], amounts[i], new bytes(0));\n            }\n        } else {\n            revert(\"Invalid input\");\n        }\n    }\n\n    /**\n     * @dev See {IERC1155CreatorCore-tokenExtension}.\n     */\n    function tokenExtension(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenExtension(tokenId);\n    }\n\n    /**\n     * @dev See {IERC1155","contract":"Phetta","time":0},{"type":"external-function ","before":"ool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) p","after":"ool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) p","contract":"Phetta","time":0},{"type":"external-function ","before":"rovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n  ","after":"rovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n  ","contract":"Phetta","time":0}]}
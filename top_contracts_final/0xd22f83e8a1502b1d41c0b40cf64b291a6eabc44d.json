{"time":125,"results":[{"type":"external-function ","before":"function claimMembershipNFTs(uint8 tier, bytes32[] memory proof) external {\n        require(block.timestamp < _claimEndTime, \"OpenDAOMembershipNFT: claim period is over\");\n        require(!_claimed[msg.sender], \"OpenDAOMembershipNFT: already claimed\");\n        require(tier <= 3, \"OpenDAOMembershipNFT: invalid tier\");\n\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, tier));\n        require(MerkleProof.verify(proof, _merkleRoot, leaf), \"OpenDAOMembershipNFT: invalid merkle proof\");\n\n        _claimed[msg.sender] = true;\n\n        if (tier == 0) _mint(msg.sender, 0, 1, \"\");\n        if (tier <= 1) _mint(msg.sender, 1, 1, \"\");\n        if (tier <= 2) _mint(msg.sender, 2, 1, \"\");\n        if (tier <= 3) _mint(msg.sender, 3, 1, \"\");\n    }","after":"function claimMembershipNFTs(uint8 tier, bytes32[] calldata proof) external {\n        require(block.timestamp < _claimEndTime, \"OpenDAOMembershipNFT: claim period is over\");\n        require(!_claimed[msg.sender], \"OpenDAOMembershipNFT: already claimed\");\n        require(tier <= 3, \"OpenDAOMembershipNFT: invalid tier\");\n\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, tier));\n        require(MerkleProof.verify(proof, _merkleRoot, leaf), \"OpenDAOMembershipNFT: invalid merkle proof\");\n\n        _claimed[msg.sender] = true;\n\n        if (tier == 0) _mint(msg.sender, 0, 1, \"\");\n        if (tier <= 1) _mint(msg.sender, 1, 1, \"\");\n        if (tier <= 2) _mint(msg.sender, 2, 1, \"\");\n        if (tier <= 3) _mint(msg.sender, 3, 1, \"\");\n    }","contract":"OpenDAOMembershipNFT","time":0},{"type":"external-function ","before":"function setURI(string memory newUri) external onlyOwner {\n        _setURI(newUri);\n    }","after":"function setURI(string calldata newUri) external onlyOwner {\n        _setURI(newUri);\n    }","contract":"OpenDAOMembershipNFT","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"OpenDAOMembershipNFT","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"OpenDAOMembershipNFT","time":0}]}
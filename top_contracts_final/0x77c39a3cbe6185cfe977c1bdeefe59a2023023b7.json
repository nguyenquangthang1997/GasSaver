{"time":68,"results":[{"type":"loop-duplication","before":"\nstart line 362 column 8, end line 367 column 8\nfor(uint256 pool = 0; pool < prizePools.length; pool++){\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\n            if(prizeStrategy.canStartAward()){\n                return (true, performData);\n            } \n        }\nstart line 369 column 8, end line 374 column 8\nfor(uint256 pool = 0; pool < prizePools.length; pool++){\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\n            if(prizeStrategy.canCompleteAward()){\n                return (true, performData);\n            } \n        }","after":"// merge loop\n\nstart line 362 column 8, end line 367 column 8\nfor(uint256 pool = 0; pool < prizePools.length; pool++){\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\n            if(prizeStrategy.canStartAward()){\n                return (true, performData);\n            } \n        }\nstart line 369 column 8, end line 374 column 8\nfor(uint256 pool = 0; pool < prizePools.length; pool++){\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\n            if(prizeStrategy.canCompleteAward()){\n                return (true, performData);\n            } \n        }","contract":"PrizeStrategyUpkeep","time":0}]}
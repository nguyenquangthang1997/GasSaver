{"time":179,"results":[{"type":"state-data-arrangement ","before":"\naddress public proxyRegistryAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;\nstring private baseURI;\nstring private blindURI;\nuint256 public mintLimit = 1;\nuint256 private constant TOTAL_NFT = 10000;\nuint256 public mintPrice = 0.4 ether;\nbool public reveal;\nbool public mintActive;\nmapping (address => bool) public whitelist;\nmapping (address => bool) public addressMinted;\naddress whitelistSigner;\nuint256 public partnerMintAmount = 100;\nmapping(address => uint256) public partnerMintAvailableBy;","after":"string private baseURI;\nstring private blindURI;\nuint256 public mintLimit = 1;\nuint256 private constant TOTAL_NFT = 10000;\nuint256 public mintPrice = 0.4 ether;\nmapping (address => bool) public whitelist;\nmapping (address => bool) public addressMinted;\nuint256 public partnerMintAmount = 100;\nmapping(address => uint256) public partnerMintAvailableBy;\naddress public proxyRegistryAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;\naddress whitelistSigner;\nbool public reveal;\nbool public mintActive;\n","contract":"HypeBears","time":0},{"type":"external-function ","before":"function setURIs(string memory _blindURI, string memory _URI) external onlyOwner {\n        blindURI = _blindURI;\n        baseURI = _URI;\n    }","after":"function setURIs(string calldata _blindURI, string calldata _URI) external onlyOwner {\n        blindURI = _blindURI;\n        baseURI = _URI;\n    }","contract":"HypeBears","time":0},{"type":"external-function ","before":"function mintNFT(uint256 _numOfTokens, bytes memory _signature) public payable {\n        require(mintActive, 'Not active');\n        require(_numOfTokens <= mintLimit, \"Can't mint more than limit per tx\");\n        require(mintPrice.mul(_numOfTokens) <= msg.value, \"Insufficient payable value\");\n        require(totalSupply().add(_numOfTokens).add(partnerMintAmount) <= TOTAL_NFT, \"Can't mint more than 10000\");\n        (bool success, string memory reason) = canMint(msg.sender, _signature);\n        require(success, reason);\n\n        for(uint i = 0; i < _numOfTokens; i++) {\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n        addressMinted[msg.sender] = true;\n    }","after":"function mintNFT(uint256 _numOfTokens, bytes calldata _signature) public payable {\n        require(mintActive, 'Not active');\n        require(_numOfTokens <= mintLimit, \"Can't mint more than limit per tx\");\n        require(mintPrice.mul(_numOfTokens) <= msg.value, \"Insufficient payable value\");\n        require(totalSupply().add(_numOfTokens).add(partnerMintAmount) <= TOTAL_NFT, \"Can't mint more than 10000\");\n        (bool success, string memory reason) = canMint(msg.sender, _signature);\n        require(success, reason);\n\n        for(uint i = 0; i < _numOfTokens; i++) {\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n        addressMinted[msg.sender] = true;\n    }","contract":"HypeBears","time":0},{"type":"external-function ","before":"function partnersMintMultiple(address[] memory _to) public {\n        uint256 amount = _to.length;\n        require(partnerMintAmount >= amount, \"Can't mint more than total available for partners\");\n        require(partnerMintAvailableBy[msg.sender] >= amount, \"Can't mint more than available for msg.sender\");\n        for(uint256 i = 0; i < amount; i++){\n            _safeMint(_to[i],totalSupply() + 1);\n        }\n        partnerMintAmount -= amount;\n        partnerMintAvailableBy[msg.sender] -= amount;\n    }","after":"function partnersMintMultiple(address[] calldata _to) public {\n        uint256 amount = _to.length;\n        require(partnerMintAmount >= amount, \"Can't mint more than total available for partners\");\n        require(partnerMintAvailableBy[msg.sender] >= amount, \"Can't mint more than available for msg.sender\");\n        for(uint256 i = 0; i < amount; i++){\n            _safeMint(_to[i],totalSupply() + 1);\n        }\n        partnerMintAmount -= amount;\n        partnerMintAvailableBy[msg.sender] -= amount;\n    }","contract":"HypeBears","time":0}]}
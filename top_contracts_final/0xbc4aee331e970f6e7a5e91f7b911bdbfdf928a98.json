{"time":256,"results":[{"type":"external-function ","before":"function claim(bytes memory signature, uint256 mintPassTokenId)\n        public\n        whenNotPaused\n        nonReentrant\n        isValidSignature(signature)\n    {\n        require(\n            mintPassContract.balanceOf(_msgSender(), mintPassTokenId) > 0,\n            \"Must own mintpass\"\n        );\n        mintPassContract.burn(_msgSender(), mintPassTokenId, 1);\n        uint256 tokenId = totalSupply();\n        _mintPrivate(_msgSender(), 1, mintPassTokenId);\n\n        emit Claimed(tokenId, _msgSender());\n    }","after":"function claim(bytes calldata signature, uint256 mintPassTokenId)\n        public\n        whenNotPaused\n        nonReentrant\n        isValidSignature(signature)\n    {\n        require(\n            mintPassContract.balanceOf(_msgSender(), mintPassTokenId) > 0,\n            \"Must own mintpass\"\n        );\n        mintPassContract.burn(_msgSender(), mintPassTokenId, 1);\n        uint256 tokenId = totalSupply();\n        _mintPrivate(_msgSender(), 1, mintPassTokenId);\n\n        emit Claimed(tokenId, _msgSender());\n    }","contract":"Surreal","time":0},{"type":"external-function ","before":"function setMintPassTokenURI(\n        uint256 mintPassTokenId,\n        string memory mintPassTokenURI\n    ) public onlyAuthorized {\n        mintPassTokenURIs[mintPassTokenId] = mintPassTokenURI;\n    }","after":"function setMintPassTokenURI(\n        uint256 mintPassTokenId,\n        string calldata mintPassTokenURI\n    ) public onlyAuthorized {\n        mintPassTokenURIs[mintPassTokenId] = mintPassTokenURI;\n    }","contract":"Surreal","time":0},{"type":"external-function ","before":"function reveal(uint256 tokenId, string memory revealedTokenURI)\n        public\n        onlyAuthorized\n    {\n        require(\n            bytes(super.tokenURI(tokenId)).length == 0,\n            \"Token already revealed\"\n        );\n        _setTokenURI(tokenId, revealedTokenURI);\n\n        // Freeze metadata\n        emit PermanentURI(revealedTokenURI, tokenId);\n    }","after":"function reveal(uint256 tokenId, string calldata revealedTokenURI)\n        public\n        onlyAuthorized\n    {\n        require(\n            bytes(super.tokenURI(tokenId)).length == 0,\n            \"Token already revealed\"\n        );\n        _setTokenURI(tokenId, revealedTokenURI);\n\n        // Freeze metadata\n        emit PermanentURI(revealedTokenURI, tokenId);\n    }","contract":"Surreal","time":0}]}
{"time":153,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant MAX_SUPPLY = 5555;\nuint256 public constant RESERVE_NFT = 150;\nuint256 public constant START_AT = 1;\nuint16 private constant HASH_SIGN = 33541;\nmapping(string => Sale) public sales;\nmapping(string => mapping(address => uint16)) balanceSale;\nmapping(uint256 => bool) private signatureIds;\naddress public signAddress;\nstring public baseTokenURI;\nuint16 public mintTracked;\nuint16 public burnedTracker;","after":"uint256 public constant MAX_SUPPLY = 5555;\nuint256 public constant RESERVE_NFT = 150;\nuint256 public constant START_AT = 1;\nmapping(string => Sale) public sales;\nmapping(string => mapping(address => uint16)) balanceSale;\nmapping(uint256 => bool) private signatureIds;\nstring public baseTokenURI;\naddress public signAddress;\nuint16 private constant HASH_SIGN = 33541;\nuint16 public mintTracked;\nuint16 public burnedTracker;\n","contract":"NeckVille","time":0},{"type":"struct-data-arrangement ","before":"\nuint64 start\nuint64 end\nuint16 maxPerWallet\nuint8 maxPerTx\nuint256 price\nbool paused","after":"uint256 price\nuint64 start\nuint64 end\nuint16 maxPerWallet\nuint8 maxPerTx\nbool paused\n","contract":"NeckVille","time":0},{"type":"external-function ","before":"function pauseSale(string memory _name, bool _pause) public onlyOwner {\r\n        sales[_name].paused = _pause;\r\n    }","after":"function pauseSale(string calldata _name, bool _pause) public onlyOwner {\r\n        sales[_name].paused = _pause;\r\n    }","contract":"NeckVille","time":0},{"type":"external-function ","before":"function preSalesMint(string memory _name, uint16 _count, uint256 _signatureId, bytes memory _signature) public payable isOpen(_name, _count) {\r\n\r\n        require(signatureIds[_signatureId] == false, \"Signature already used\");\r\n        signatureIds[_signatureId] = true;\r\n        require(checkSignature(_msgSender(), _name, _count, _signatureId, _signature) == signAddress, \"Signature error : bad owner\");\r\n\r\n        _mintTokens(_count);\r\n\r\n    }","after":"function preSalesMint(string calldata _name, uint16 _count, uint256 _signatureId, bytes calldata _signature) public payable isOpen(_name, _count) {\r\n\r\n        require(signatureIds[_signatureId] == false, \"Signature already used\");\r\n        signatureIds[_signatureId] = true;\r\n        require(checkSignature(_msgSender(), _name, _count, _signatureId, _signature) == signAddress, \"Signature error : bad owner\");\r\n\r\n        _mintTokens(_count);\r\n\r\n    }","contract":"NeckVille","time":0}]}
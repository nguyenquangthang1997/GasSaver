{"time":201,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n                !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n                (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":2164,"column":16},"end":{"line":2165,"column":46}},"contract":"Avatars","time":0},{"type":"state-data-arrangement ","before":"\naddress public _nftAddress;\nuint256 public publicSaleMaxMint = 2;\nmapping(address => uint256) private _publicSaleClaimed;\nstring public  CRYPTERIORS_LOCALS_PROVENANCE = \"\";\nuint256 public NFT_PRICE = 0;\nuint256 public totalGiftSupply;\nuint256 public totalPublicSupply;\nuint256 public constant LOCALS_RESERVE = 150;\nuint256 public constant LOCALS_MAX = 4294;\nuint256 public constant MAX_NFT_SUPPLY = LOCALS_RESERVE + LOCALS_MAX;\nuint256 public MAX_MINTS_PER_ORIGINAL_CRYPTERIOR = 2;\nmapping (address => mapping(uint256 => uint256)) v1TokenIdUsedForMint;\nuint256 public startingIndexBlock;\nuint256 public startingIndex;\nuint256 public constant SALE_START_TIMESTAMP = 1631905200;\nuint256 public REVEAL_TIMESTAMP =\n        SALE_START_TIMESTAMP + (86400 * 7);\nuint256 public constant MAXIMUM_MEME_STRING_LENGHT = 50;\nmapping(uint256 => string) tokenMemeTextTop;\nmapping(uint256 => string) tokenMemeTextBottom;\nbool public hasSaleStarted = false;\nbool public hasPrivateSaleStarted = false;\nstring private _name;\nstring private _symbol;","after":"uint256 public publicSaleMaxMint = 2;\nmapping(address => uint256) private _publicSaleClaimed;\nstring public  CRYPTERIORS_LOCALS_PROVENANCE = \"\";\nuint256 public NFT_PRICE = 0;\nuint256 public totalGiftSupply;\nuint256 public totalPublicSupply;\nuint256 public constant LOCALS_RESERVE = 150;\nuint256 public constant LOCALS_MAX = 4294;\nuint256 public constant MAX_NFT_SUPPLY = LOCALS_RESERVE + LOCALS_MAX;\nuint256 public MAX_MINTS_PER_ORIGINAL_CRYPTERIOR = 2;\nmapping (address => mapping(uint256 => uint256)) v1TokenIdUsedForMint;\nuint256 public startingIndexBlock;\nuint256 public startingIndex;\nuint256 public constant SALE_START_TIMESTAMP = 1631905200;\nuint256 public REVEAL_TIMESTAMP =\n        SALE_START_TIMESTAMP + (86400 * 7);\nuint256 public constant MAXIMUM_MEME_STRING_LENGHT = 50;\nmapping(uint256 => string) tokenMemeTextTop;\nmapping(uint256 => string) tokenMemeTextBottom;\nstring private _name;\nstring private _symbol;\naddress public _nftAddress;\nbool public hasSaleStarted = false;\nbool public hasPrivateSaleStarted = false;\n","contract":"Avatars","time":0},{"type":"external-function ","before":"function changeMeme(\n        uint256 tokenId,\n        string memory _tokenMemeTextTop,\n        string memory _tokenMemeTextBottom\n    ) public {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateString(_tokenMemeTextTop) == true, \"Not valid string for top\");\n        require(validateString(_tokenMemeTextBottom) == true, \"Not valid string for bottom\");\n\n        tokenMemeTextTop[tokenId] = _tokenMemeTextTop;\n        tokenMemeTextBottom[tokenId] = _tokenMemeTextBottom;\n\n        emit MemeChange(tokenId, _tokenMemeTextTop, _tokenMemeTextBottom);\n    }","after":"function changeMeme(\n        uint256 tokenId,\n        string calldata _tokenMemeTextTop,\n        string calldata _tokenMemeTextBottom\n    ) public {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateString(_tokenMemeTextTop) == true, \"Not valid string for top\");\n        require(validateString(_tokenMemeTextBottom) == true, \"Not valid string for bottom\");\n\n        tokenMemeTextTop[tokenId] = _tokenMemeTextTop;\n        tokenMemeTextBottom[tokenId] = _tokenMemeTextBottom;\n\n        emit MemeChange(tokenId, _tokenMemeTextTop, _tokenMemeTextBottom);\n    }","contract":"Avatars","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public publicSaleMaxMint = 2;","after":"uint256 public constant publicSaleMaxMint = 2;","contract":"Avatars","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public NFT_PRICE = 0;","after":"uint256 public constant NFT_PRICE = 0;","contract":"Avatars","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_MINTS_PER_ORIGINAL_CRYPTERIOR = 2;","after":"uint256 public constant MAX_MINTS_PER_ORIGINAL_CRYPTERIOR = 2;","contract":"Avatars","time":1}]}
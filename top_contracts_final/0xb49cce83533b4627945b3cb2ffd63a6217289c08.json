{"time":136,"results":[{"type":"external-function ","before":"function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseTokenURI = _newBaseURI;\n    }","after":"function setBaseURI(string calldata _newBaseURI) public onlyOwner {\n        baseTokenURI = _newBaseURI;\n    }","contract":"Depictives","time":0},{"type":"external-function ","before":"function mint(uint256 numberOfMints, bytes memory data) public payable nonReentrant {\n        require(\n            apostleHolderMints[msg.sender] == 0 && \n            auguryHolderMints[msg.sender] == 0,\n            \"FREE_CLAIM_AVAILABLE\"\n        );\n\n        if (isPreSaleActive() && !isPublicSaleActive()) {\n            require(data.length != 0, \"NOT_PRESALE_ELIGIBLE\");\n            (address addr, uint256 mintAllocation, bytes32[] memory proof) = abi.decode(data, (address, uint256, bytes32[]));\n            require(MerkleProof.verify(proof, merkleRoot, _genMerkleLeaf(msg.sender, mintAllocation)), \"INVALID_PROOF\");\n            require(addr == msg.sender, \"INVALID_SENDER\");\n            require(numberOfMints + balanceOf(msg.sender) <= mintAllocation, \"PRESALE_LIMIT_REACHED\");\n        } else {\n            require(isPublicSaleActive(), \"SALE_NOT_ACTIVE\");\n            require(numberOfMints <= MAX_MULTI_MINT_AMOUNT, \"TOO_LARGE_PER_TX\");\n        }\n\n        require(totalSupply() + numberOfMints <= MAX_SUPPLY, \"MAX_SUPPLY_REACHED\");\n\n        require(msg.value >= PRICE * numberOfMints, \"INVALID_PRICE\");\n        \n        for (uint256 i = 0; i < numberOfMints; i++) {\n            uint256 tokenId = _tokenIds.current();\n            _safeMint(msg.sender, tokenId);\n            _tokenIds.increment();\n        }\n    }","after":"function mint(uint256 numberOfMints, bytes calldata data) public payable nonReentrant {\n        require(\n            apostleHolderMints[msg.sender] == 0 && \n            auguryHolderMints[msg.sender] == 0,\n            \"FREE_CLAIM_AVAILABLE\"\n        );\n\n        if (isPreSaleActive() && !isPublicSaleActive()) {\n            require(data.length != 0, \"NOT_PRESALE_ELIGIBLE\");\n            (address addr, uint256 mintAllocation, bytes32[] memory proof) = abi.decode(data, (address, uint256, bytes32[]));\n            require(MerkleProof.verify(proof, merkleRoot, _genMerkleLeaf(msg.sender, mintAllocation)), \"INVALID_PROOF\");\n            require(addr == msg.sender, \"INVALID_SENDER\");\n            require(numberOfMints + balanceOf(msg.sender) <= mintAllocation, \"PRESALE_LIMIT_REACHED\");\n        } else {\n            require(isPublicSaleActive(), \"SALE_NOT_ACTIVE\");\n            require(numberOfMints <= MAX_MULTI_MINT_AMOUNT, \"TOO_LARGE_PER_TX\");\n        }\n\n        require(totalSupply() + numberOfMints <= MAX_SUPPLY, \"MAX_SUPPLY_REACHED\");\n\n        require(msg.value >= PRICE * numberOfMints, \"INVALID_PRICE\");\n        \n        for (uint256 i = 0; i < numberOfMints; i++) {\n            uint256 tokenId = _tokenIds.current();\n            _safeMint(msg.sender, tokenId);\n            _tokenIds.increment();\n        }\n    }","contract":"Depictives","time":0}]}
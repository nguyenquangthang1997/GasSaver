{"time":85,"results":[{"type":"de-morgan-condition ","before":"!isBot[from] && !isBot[to]","after":"!(isBot[from] && isBot[to])","loc":{"start":{"line":283,"column":16},"end":{"line":283,"column":41}},"contract":"TradableErc20","time":0},{"type":"external-function ","before":"function setBots(address[] memory accounts, bool value) external onlyOwner {\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            isBot[accounts[i]] = value;\n        }\n    }","after":"function setBots(address[] calldata accounts, bool value) external onlyOwner {\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            isBot[accounts[i]] = value;\n        }\n    }","contract":"theburningtoken","time":0},{"type":"external-function ","before":"function setExcludeFromFee(address[] memory accounts, bool value)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            _isExcludedFromFee[accounts[i]] = value;\n        }\n    }","after":"function setExcludeFromFee(address[] calldata accounts, bool value)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            _isExcludedFromFee[accounts[i]] = value;\n        }\n    }","contract":"theburningtoken","time":0},{"type":"constant-restrict-modification  ","before":"address _withdrawAddress =\n        address(0x71D2f61A865f0A64525277BBE415B6B47CF551cE);","after":"address constant _withdrawAddress =\n        address(0x71D2f61A865f0A64525277BBE415B6B47CF551cE);","contract":"theburningtoken","time":0}]}
{"time":247,"results":[{"type":"external-function ","before":"function unsafeCreatePart(\n        bytes32 categoryId_,\n        string memory title_,\n        string memory description_,\n        string memory ipfsHash_,\n        Attribute[] memory attributes,\n        uint256 maxSupply_,\n        uint256 filledSupply_\n    ) external onlyRole(CREATOR_ROLE) {\n        _unsafeSetTotalSupply(numberOfParts, filledSupply_);\n        createPart(\n            categoryId_,\n            title_,\n            description_,\n            ipfsHash_,\n            attributes,\n            maxSupply_\n        );\n    }","after":"function unsafeCreatePart(\n        bytes32 categoryId_,\n        string calldata title_,\n        string calldata description_,\n        string calldata ipfsHash_,\n        Attribute[] calldata attributes,\n        uint256 maxSupply_,\n        uint256 filledSupply_\n    ) external onlyRole(CREATOR_ROLE) {\n        _unsafeSetTotalSupply(numberOfParts, filledSupply_);\n        createPart(\n            categoryId_,\n            title_,\n            description_,\n            ipfsHash_,\n            attributes,\n            maxSupply_\n        );\n    }","contract":"DavaOfficial","time":0},{"type":"external-function ","before":"function createCategory(\n        string memory title_,\n        uint256 backgroundImageTokenId_,\n        uint256 foregroundImageTokenId_,\n        uint256 zIndex_\n    ) public virtual override onlyRole(CREATOR_ROLE) {\n        bytes32 _categoryId = keccak256(abi.encodePacked(title_));\n        require(\n            !_supportedCategoryIds.contains(_categoryId),\n            \"Part: already exists category\"\n        );\n        require(\n            !_collectionInfo.zIndexExists[zIndex_],\n            \"Part: already used zIndex\"\n        );\n\n        require(\n            _partInfo.categoryIds[backgroundImageTokenId_] ==\n                DEFAULT_CATEGORY &&\n                _partInfo.categoryIds[foregroundImageTokenId_] ==\n                DEFAULT_CATEGORY,\n            \"Part: frame image is not created\"\n        );\n\n        _collectionInfo.zIndex[_categoryId] = zIndex_;\n        _collectionInfo.titles[_categoryId] = title_;\n        _collectionInfo.backgroundImagePart[\n            _categoryId\n        ] = backgroundImageTokenId_;\n        _collectionInfo.foregroundImagePart[\n            _categoryId\n        ] = foregroundImageTokenId_;\n        _collectionInfo.zIndexExists[zIndex_] = true;\n\n        _supportedCategoryIds.add(_categoryId);\n    }","after":"function createCategory(\n        string calldata title_,\n        uint256 backgroundImageTokenId_,\n        uint256 foregroundImageTokenId_,\n        uint256 zIndex_\n    ) public virtual override onlyRole(CREATOR_ROLE) {\n        bytes32 _categoryId = keccak256(abi.encodePacked(title_));\n        require(\n            !_supportedCategoryIds.contains(_categoryId),\n            \"Part: already exists category\"\n        );\n        require(\n            !_collectionInfo.zIndexExists[zIndex_],\n            \"Part: already used zIndex\"\n        );\n\n        require(\n            _partInfo.categoryIds[backgroundImageTokenId_] ==\n                DEFAULT_CATEGORY &&\n                _partInfo.categoryIds[foregroundImageTokenId_] ==\n                DEFAULT_CATEGORY,\n            \"Part: frame image is not created\"\n        );\n\n        _collectionInfo.zIndex[_categoryId] = zIndex_;\n        _collectionInfo.titles[_categoryId] = title_;\n        _collectionInfo.backgroundImagePart[\n            _categoryId\n        ] = backgroundImageTokenId_;\n        _collectionInfo.foregroundImagePart[\n            _categoryId\n        ] = foregroundImageTokenId_;\n        _collectionInfo.zIndexExists[zIndex_] = true;\n\n        _supportedCategoryIds.add(_categoryId);\n    }","contract":"DavaOfficial","time":0},{"type":"external-function ","before":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public onlyRole(MINTER_ROLE) {\n        require(\n            totalSupply(id) + amount <= maxSupply(id),\n            \"Part: Out of stock.\"\n        );\n\n        return super._mint(account, id, amount, data);\n    }","after":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public onlyRole(MINTER_ROLE) {\n        require(\n            totalSupply(id) + amount <= maxSupply(id),\n            \"Part: Out of stock.\"\n        );\n\n        return super._mint(account, id, amount, data);\n    }","contract":"DavaOfficial","time":0},{"type":"external-function ","before":"function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public onlyRole(MINTER_ROLE) {\n        for (uint256 i = 0; i < ids.length; i += 1) {\n            require(\n                totalSupply(ids[i]) + amounts[i] <= maxSupply(ids[i]),\n                \"Part: Out of stock.\"\n            );\n        }\n        return super._mintBatch(to, ids, amounts, data);\n    }","after":"function mintBatch(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public onlyRole(MINTER_ROLE) {\n        for (uint256 i = 0; i < ids.length; i += 1) {\n            require(\n                totalSupply(ids[i]) + amounts[i] <= maxSupply(ids[i]),\n                \"Part: Out of stock.\"\n            );\n        }\n        return super._mintBatch(to, ids, amounts, data);\n    }","contract":"DavaOfficial","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"DavaOfficial","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"DavaOfficial","time":0},{"type":"immutable-restrict-modification ","before":"address public override dava;","after":"address public override immutable dava;","contract":"DavaOfficial","time":0}]}
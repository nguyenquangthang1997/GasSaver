{"time":295,"results":[{"type":"external-function ","before":"per transaction.\n    uint256 public constant maxNumPurchase = 20;\n\n    // Only 8888 total member card will be generate","after":"per transaction.\n    uint256 public constant maxNumPurchase = 20;\n\n    // Only 8888 total member card will be generate","contract":"PantheonBusinessClub","time":0},{"type":"external-function ","before":"resale \n    uint256 public totalEarlyAccessTokensAllowed = 500;\n    // List of address whitelisted for the Presale\n    mapping(address => bool) private earlyAccessAllowList;\n    // Number max allow during stages\n    ","after":"resale \n    uint256 public totalEarlyAccessTokensAllowed = 500;\n    // List of address whitelisted for the Presale\n    mapping(address => bool) private earlyAccessAllowList;\n    // Number max allow during stages\n    ","contract":"PantheonBusinessClub","time":0},{"type":"external-function ","before":";\n    // List of addresse allowed for different stages\n    mapping(address => bool) private whitelistStage2;\n    mapping(address => bool) private whi","after":";\n    // List of addresse allowed for different stages\n    mapping(address => bool) private whitelistStage2;\n    mapping(address => bool) private whi","contract":"PantheonBusinessClub","time":0},{"type":"external-function ","before":"56[] memory shares_) public onlyOwner {\n        _modifyShares(oldPayees, newPayees, shares_);\n    ","after":"56[] calldata shares_) public onlyOwner {\n        _modifyShares(oldPayees, newPayees, shares_);\n    ","contract":"PantheonBusinessClub","time":0},{"type":"external-function ","before":" }\n\n    /**\n     * retrait des eth stockés dans le smart contrat par le contract Owner\n     */  \n    function withdraw() public onlyOwner {\n        uint256 balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    ","after":" }\n\n    /**\n     * retrait des eth stockés dans le smart contrat par le contract Owner\n     */  \n    function withdraw() public onlyOwner {\n        uint256 balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    ","contract":"PantheonBusinessClub","time":0},{"type":"external-function ","before":"Pantheon: burning disabled\");\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"Pantheon: burn caller is not owner\"\n        );\n        _burn(tokenId);\n        totalSupply().sub(1);\n    }\n\n    /**\n     * Ability for people to burn their tokens\n     */\n    function burnRemainingTokens(uint256 tokenNb) external onlyOwner {\n        require(MAX_TOKENS - tokenNb >= totalSupply(), 'Invalid state');\n        MAX_TOKENS = MAX_TOKENS - tokenNb;\n    }\n\n    /**\n     * Set the state of the sale.\n     */\n    function setSaleState(uint256 newState) public onlyOwner {\n        require(newState >= 0 && newState <= 9, 'Invalid state');\n        saleState = newState;\n    }\n\n    function setProvenanceHash(string memory hash) public onlyOwner {\n        provenance = hash;\n    }\n\n    function setPrice(uint256 value) public onlyOwner {\n        nftPrice = value;\n    }\n    function setStage(uint256 value) public onlyOwner {\n        stage = value;\n    }\n    \n    function setBurnState(bool _isBurnEnabled) external onlyOwner {\n        isBurnEnabled = _isBurnEnabled;\n        emit ChangeBurnState(_isBurnEnabled);\n    }\n\n    /**\n     * Early Acce","after":"Pantheon: burning disabled\");\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"Pantheon: burn caller is not owner\"\n        );\n        _burn(tokenId);\n        totalSupply().sub(1);\n    }\n\n    /**\n     * Ability for people to burn their tokens\n     */\n    function burnRemainingTokens(uint256 tokenNb) external onlyOwner {\n        require(MAX_TOKENS - tokenNb >= totalSupply(), 'Invalid state');\n        MAX_TOKENS = MAX_TOKENS - tokenNb;\n    }\n\n    /**\n     * Set the state of the sale.\n     */\n    function setSaleState(uint256 newState) public onlyOwner {\n        require(newState >= 0 && newState <= 9, 'Invalid state');\n        saleState = newState;\n    }\n\n    function setProvenanceHash(string memory hash) public onlyOwner {\n        provenance = hash;\n    }\n\n    function setPrice(uint256 value) public onlyOwner {\n        nftPrice = value;\n    }\n    function setStage(uint256 value) public onlyOwner {\n        stage = value;\n    }\n    \n    function setBurnState(bool _isBurnEnabled) external onlyOwner {\n        isBurnEnabled = _isBurnEnabled;\n        emit ChangeBurnState(_isBurnEnabled);\n    }\n\n    /**\n     * Early Acce","contract":"PantheonBusinessClub","time":0},{"type":"external-function ","before":"we are on the whitelist or not\n     */\n    function checkIfWhitelist(address addr) public view returns (bool) {\n        return earlyAccessAllowList[addr];\n    }\n\n    /**\n     * Number of token max you can mint with 1 transaction\n     * You can make unlimmited number of transactions\n     */\n    function _checkNumberOfTokens(uint256 numberOfTokens) internal pure {\n        require(\n            numberOfTokens <= maxNumPurchase,\n            'Can only mint 20 tokens at a time'\n        ); ","after":"we are on the whitelist or not\n     */\n    function checkIfWhitelist(address addr) public view returns (bool) {\n        return earlyAccessAllowList[addr];\n    }\n\n    /**\n     * Number of token max you can mint with 1 transaction\n     * You can make unlimmited number of transactions\n     */\n    function _checkNumberOfTokens(uint256 numberOfTokens) internal pure {\n        require(\n            numberOfTokens <= maxNumPurchase,\n            'Can only mint 20 tokens at a time'\n        ); ","contract":"PantheonBusinessClub","time":0},{"type":"constant-restrict-modification  ","before":".\n     */\n    function _pendingPayment(\n        add","after":".\n     */\n    function _pendingPayment(\n        add","contract":"PantheonBusinessClub","time":1},{"type":"constant-restrict-modification  ","before":"alreadyReleased;\n    }\n\n    /*","after":"alreadyReleased;\n    }\n\n    /*","contract":"PantheonBusinessClub","time":1},{"type":"constant-restrict-modification  ","before":"  * @dev Add a new payee to th","after":"  * @dev Add a new payee to th","contract":"PantheonBusinessClub","time":1},{"type":"constant-restrict-modification  ","before":"tract.\n     * @param account T","after":"tract.\n     * @param account T","contract":"PantheonBusinessClub","time":1},{"type":"constant-restrict-modification  ","before":"dress of the payee to add.\n   ","after":"dress of the payee to add.\n   ","contract":"PantheonBusinessClub","time":1},{"type":"constant-restrict-modification  ","before":"param shares_ The number of sh","after":"param shares_ The number of sh","contract":"PantheonBusinessClub","time":1},{"type":"constant-restrict-modification  ","before":"owned by the payee.\n     */\n  ","after":"owned by the payee.\n     */\n  ","contract":"PantheonBusinessClub","time":1}]}
{"time":97,"results":[{"type":"external-function ","before":"function stakeByIds(uint256[] memory tokenIds) public {\n        require(tokenIds.length > 0, \"Must provide at least 1 tokenId\");\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                IERC721(fortressAddress).ownerOf(tokenIds[i]) == msg.sender &&\n                    tokenIdToStaker[tokenIds[i]] == NULL_ADDRESS,\n                \"Token must be stakable by you!\"\n            );\n\n            IERC721(fortressAddress).transferFrom(\n                msg.sender,\n                address(this),\n                tokenIds[i]\n            );\n\n            tokenIdToTimeStamp[tokenIds[i]] = block.timestamp;\n            tokenIdToStaker[tokenIds[i]] = msg.sender;\n            emit FortressStaked(tokenIds[i]); // use this on ui to show staked tokens\n        }\n    }","after":"function stakeByIds(uint256[] calldata tokenIds) public {\n        require(tokenIds.length > 0, \"Must provide at least 1 tokenId\");\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                IERC721(fortressAddress).ownerOf(tokenIds[i]) == msg.sender &&\n                    tokenIdToStaker[tokenIds[i]] == NULL_ADDRESS,\n                \"Token must be stakable by you!\"\n            );\n\n            IERC721(fortressAddress).transferFrom(\n                msg.sender,\n                address(this),\n                tokenIds[i]\n            );\n\n            tokenIdToTimeStamp[tokenIds[i]] = block.timestamp;\n            tokenIdToStaker[tokenIds[i]] = msg.sender;\n            emit FortressStaked(tokenIds[i]); // use this on ui to show staked tokens\n        }\n    }","contract":"Gold","time":0},{"type":"external-function ","before":"function emergencyExit(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                tokenIdToStaker[tokenIds[i]] == msg.sender,\n                \"Message Sender was not original staker!\"\n            );\n            IERC721(fortressAddress).transferFrom(\n                address(this),\n                msg.sender,\n                tokenIds[i]\n            );\n\n            tokenIdToStaker[tokenIds[i]] = NULL_ADDRESS;\n        }\n    }","after":"function emergencyExit(uint256[] calldata tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                tokenIdToStaker[tokenIds[i]] == msg.sender,\n                \"Message Sender was not original staker!\"\n            );\n            IERC721(fortressAddress).transferFrom(\n                address(this),\n                msg.sender,\n                tokenIds[i]\n            );\n\n            tokenIdToStaker[tokenIds[i]] = NULL_ADDRESS;\n        }\n    }","contract":"Gold","time":0},{"type":"external-function ","before":"function unstakeByIds(uint256[] memory tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                tokenIdToStaker[tokenIds[i]] == msg.sender,\n                \"Message Sender was not original staker!\"\n            );\n            uint256 tokenStakedTimestamp = tokenIdToTimeStamp[tokenIds[i]];\n            IERC721(fortressAddress).transferFrom(\n                address(this),\n                msg.sender,\n                tokenIds[i]\n            );\n\n            totalRewards =\n                totalRewards +\n                calcRewards(tokenStakedTimestamp, block.timestamp);\n\n            tokenIdToStaker[tokenIds[i]] = NULL_ADDRESS;\n        }\n\n        _mint(msg.sender, totalRewards);\n    }","after":"function unstakeByIds(uint256[] calldata tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                tokenIdToStaker[tokenIds[i]] == msg.sender,\n                \"Message Sender was not original staker!\"\n            );\n            uint256 tokenStakedTimestamp = tokenIdToTimeStamp[tokenIds[i]];\n            IERC721(fortressAddress).transferFrom(\n                address(this),\n                msg.sender,\n                tokenIds[i]\n            );\n\n            totalRewards =\n                totalRewards +\n                calcRewards(tokenStakedTimestamp, block.timestamp);\n\n            tokenIdToStaker[tokenIds[i]] = NULL_ADDRESS;\n        }\n\n        _mint(msg.sender, totalRewards);\n    }","contract":"Gold","time":0},{"type":"external-function ","before":"function claimByTokenIds(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            claimInternal(tokenIds[i], msg.sender);\n        }\n    }","after":"function claimByTokenIds(uint256[] calldata tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            claimInternal(tokenIds[i], msg.sender);\n        }\n    }","contract":"Gold","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public INITIAL_EMISSION_RATE = 57870370370370;","after":"uint256 public constant INITIAL_EMISSION_RATE = 57870370370370;","contract":"Gold","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public FINAL_EMISSION_RATE = 23148148148148;","after":"uint256 public constant FINAL_EMISSION_RATE = 23148148148148;","contract":"Gold","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public PERIOD_ONE = 1633039200;","after":"uint256 public constant PERIOD_ONE = 1633039200;","contract":"Gold","time":0},{"type":"constant-restrict-modification  ","before":"address NULL_ADDRESS = 0x0000000000000000000000000000000000000000;","after":"address constant NULL_ADDRESS = 0x0000000000000000000000000000000000000000;","contract":"Gold","time":0}]}
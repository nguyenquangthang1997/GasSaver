{"time":139,"results":[{"type":"external-function ","before":"function mint(uint256[] memory mutants) public payable {\n        require(mintMode != MintMode.Closed, \"Minting is closed\");\n        require(mutants.length <= 25, \"Can't mint more than 25 at once\");\n        require(\n            totalSupply() + mutants.length <= maxTokens,\n            \"Can't fulfil requested tokens\"\n        );\n\n        require(\n            msg.value >=\n                (tokenPrice * mutants.length) -\n                    ((mutants.length / 3) * discountPer3),\n            \"Didn't send enough ETH\"\n        );\n\n        bool hasFBAC = fbacContract.balanceOf(msg.sender) > 0;\n        require(\n            mintMode == MintMode.Public || hasFBAC || whitelist[msg.sender],\n            \"You are not on the whitelist\"\n        );\n\n        uint256 token = totalSupply();\n        for (uint256 i = 0; i < mutants.length; i++) {\n            uint256 mutant = mutants[i];\n            require(\n                maycContract.ownerOf(mutant) == msg.sender,\n                \"Not the owner of this mutant\"\n            );\n            require(\n                versionsMinted[mutant] < 3,\n                \"All versions of this mutant have been minted\"\n            );\n            token++;\n            versionsMinted[mutant]++;\n            mutantNumber[token] = mutant;\n            if (hasFBAC) hasMinion[token] = true;\n            _safeMint(msg.sender, token);\n        }\n    }","after":"function mint(uint256[] calldata mutants) public payable {\n        require(mintMode != MintMode.Closed, \"Minting is closed\");\n        require(mutants.length <= 25, \"Can't mint more than 25 at once\");\n        require(\n            totalSupply() + mutants.length <= maxTokens,\n            \"Can't fulfil requested tokens\"\n        );\n\n        require(\n            msg.value >=\n                (tokenPrice * mutants.length) -\n                    ((mutants.length / 3) * discountPer3),\n            \"Didn't send enough ETH\"\n        );\n\n        bool hasFBAC = fbacContract.balanceOf(msg.sender) > 0;\n        require(\n            mintMode == MintMode.Public || hasFBAC || whitelist[msg.sender],\n            \"You are not on the whitelist\"\n        );\n\n        uint256 token = totalSupply();\n        for (uint256 i = 0; i < mutants.length; i++) {\n            uint256 mutant = mutants[i];\n            require(\n                maycContract.ownerOf(mutant) == msg.sender,\n                \"Not the owner of this mutant\"\n            );\n            require(\n                versionsMinted[mutant] < 3,\n                \"All versions of this mutant have been minted\"\n            );\n            token++;\n            versionsMinted[mutant]++;\n            mutantNumber[token] = mutant;\n            if (hasFBAC) hasMinion[token] = true;\n            _safeMint(msg.sender, token);\n        }\n    }","contract":"FullBodyMutantClub","time":0},{"type":"external-function ","before":"function send(uint256[] memory mutants) public onlyOwner {\n        require(mutants.length <= 25, \"Can't mint more than 25 at once\");\n        require(\n            totalSupply() + mutants.length <= maxTokens,\n            \"Can't fulfil requested tokens\"\n        );\n\n        uint256 token = 0;\n        for (uint256 i = 0; i < mutants.length; i++) {\n            uint256 mutant = mutants[i];\n            require(\n                versionsMinted[mutant] < 3,\n                \"All versions of this mutant have been minted\"\n            );\n            token = totalSupply() + 1;\n            versionsMinted[mutant]++;\n            mutantNumber[token] = mutant;\n            address owner = maycContract.ownerOf(mutant);\n            if (fbacContract.balanceOf(owner) > 0) hasMinion[token] = true;\n            _safeMint(owner, token);\n        }\n    }","after":"function send(uint256[] calldata mutants) public onlyOwner {\n        require(mutants.length <= 25, \"Can't mint more than 25 at once\");\n        require(\n            totalSupply() + mutants.length <= maxTokens,\n            \"Can't fulfil requested tokens\"\n        );\n\n        uint256 token = 0;\n        for (uint256 i = 0; i < mutants.length; i++) {\n            uint256 mutant = mutants[i];\n            require(\n                versionsMinted[mutant] < 3,\n                \"All versions of this mutant have been minted\"\n            );\n            token = totalSupply() + 1;\n            versionsMinted[mutant]++;\n            mutantNumber[token] = mutant;\n            address owner = maycContract.ownerOf(mutant);\n            if (fbacContract.balanceOf(owner) > 0) hasMinion[token] = true;\n            _safeMint(owner, token);\n        }\n    }","contract":"FullBodyMutantClub","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory addresses) external onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelist[addresses[i]] = true;\n        }\n    }","after":"function addToWhitelist(address[] calldata addresses) external onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelist[addresses[i]] = true;\n        }\n    }","contract":"FullBodyMutantClub","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","contract":"FullBodyMutantClub","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxTokens = 4444;","after":"uint256 public constant maxTokens = 4444;","contract":"FullBodyMutantClub","time":0}]}
{"time":175,"results":[{"type":"state-data-arrangement ","before":"\n░▒▒ ▓░▒░▒░ ▒�\n��▒░ ░░ ▒░   ░  �\n░▒▓███▀▒ ░▓ ░░ �\n░▒▒ ▓░▒░▒\n░ ▒ ▒ ░ �\n� ▒ ▒░ ░░  ░      ░�\n░▒   ░   ▒  ░ ░  ░ ▒ ▒ �\n ░░ ░ ░ ▒   �\n  ░ ░ ░ ░ ░\n  ░ ░        ░ ░  ░\n  ░   ░ ░        ░   ","after":"░▒▓███▀▒ ░▓ ░░ �\n░▒▒ ▓░▒░▒\n░ ▒ ▒ ░ �\n� ▒ ▒░ ░░  ░      ░�\n░▒   ░   ▒  ░ ░  ░ ▒ ▒ �\n ░░ ░ ░ ▒   �\n  ░ ░ ░ ░ ░\n  ░ ░        ░ ░  ░\n  ░   ░ ░        ░   \n░▒▒ ▓░▒░▒░ ▒�\n��▒░ ░░ ▒░   ░  �\n","contract":"CryptoZombiez","time":0},{"type":"external-function ","before":"dePacked(recipient));\n    }\n\n    // @dev Sets a new signature verifier\n    function setSignVerifier(address verifier) external onlyOwner {\n        signVerifier = verifier;\n    }\n\n    // @dev Dynamically set the max mints a user can do in the main sale\n    function setMaxMintPerTransaction(uint256 maxMint) external onlyOwner {\n        maxMintPerTransaction = maxMint;\n    }\n\n    // @dev Dynamically set the max mints a user can do in the main sale\n    function setMaxPresaleMintPerAccount(uint256 maxMint) external onlyOwner {\n        maxPresaleMintPerAccount = maxMint;\n    }\n\n    function isValidSignature(address recipient, bytes memory sig) private view returns (bool) {\n        bytes32 message = getSigningHash(recipient).toEthSignedMessageHash();\n        return ECDSA.recover(message, sig) == signVerifier;\n    }\n\n    // @dev Returns number of remaining mints for approved address\n    function getAvailablePresaleMints(address recipient, bytes memory sig) external view returns (uint256) {\n        require(isValidSignature(recipient, sig), \"Account is ","after":"dePacked(recipient));\n    }\n\n    // @dev Sets a new signature verifier\n    function setSignVerifier(address verifier) external onlyOwner {\n        signVerifier = verifier;\n    }\n\n    // @dev Dynamically set the max mints a user can do in the main sale\n    function setMaxMintPerTransaction(uint256 maxMint) external onlyOwner {\n        maxMintPerTransaction = maxMint;\n    }\n\n    // @dev Dynamically set the max mints a user can do in the main sale\n    function setMaxPresaleMintPerAccount(uint256 maxMint) external onlyOwner {\n        maxPresaleMintPerAccount = maxMint;\n    }\n\n    function isValidSignature(address recipient, bytes memory sig) private view returns (bool) {\n        bytes32 message = getSigningHash(recipient).toEthSignedMessageHash();\n        return ECDSA.recover(message, sig) == signVerifier;\n    }\n\n    // @dev Returns number of remaining mints for approved address\n    function getAvailablePresaleMints(address recipient, bytes memory sig) external view returns (uint256) {\n        require(isValidSignature(recipient, sig), \"Account is ","contract":"CryptoZombiez","time":0},{"type":"external-function ","before":"s per owner\n    function walletOfOwner(address owner) external view returns (uint256[]","after":"s per owner\n    function walletOfOwner(address owner) external view returns (uint256[]","contract":"CryptoZombiez","time":0}]}
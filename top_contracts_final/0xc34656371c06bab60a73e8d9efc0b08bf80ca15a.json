{"time":138,"results":[{"type":"external-function ","before":"function buyNft(uint256 _count,uint256[] memory tokenId) public payable {\n        require(totalSupply() + _count <= maxSupply,\"ERROR: max limit reached\");\n        require(_count <= 10 && tokenId.length <= 10,\"ERROR: max 10 mint per transaction\");\n        require(_count <= MembershipToken.balanceOf(msg.sender),\"ERROR: not enough MembershipToken\");\n        require(_count == tokenId.length,\"ERROR: wrong token ID or count\");\n        require(msg.value >= _count*basePrice,\"ERROR: wrong price\");\n       \n        for(uint256 i=0; i<tokenId.length; i++){\n            require(msg.sender == MembershipToken.ownerOf(tokenId[i]),\"ERROR: u don't have this token ID\");\n            if(usedMembershipToken[tokenId[i]] != 0) require(usedMembershipToken[tokenId[i]] <= block.timestamp ,\"ERROR: this Membership Token is already used\");\n        }\n        \n        for(uint256 j=0; j< _count; j++){\n            _tokenIds.increment();\n            uint256 newItemId = _tokenIds.current();\n            \n            mintNft(newItemId);\n            \n            usedMembershipToken[tokenId[j]] = lockedTime;\n            \n            emit NftBought(msg.sender,newItemId,tokenId[j]);\n        }\n        \n        distributeAmount(msg.value);\n    }","after":"function buyNft(uint256 _count,uint256[] calldata tokenId) public payable {\n        require(totalSupply() + _count <= maxSupply,\"ERROR: max limit reached\");\n        require(_count <= 10 && tokenId.length <= 10,\"ERROR: max 10 mint per transaction\");\n        require(_count <= MembershipToken.balanceOf(msg.sender),\"ERROR: not enough MembershipToken\");\n        require(_count == tokenId.length,\"ERROR: wrong token ID or count\");\n        require(msg.value >= _count*basePrice,\"ERROR: wrong price\");\n       \n        for(uint256 i=0; i<tokenId.length; i++){\n            require(msg.sender == MembershipToken.ownerOf(tokenId[i]),\"ERROR: u don't have this token ID\");\n            if(usedMembershipToken[tokenId[i]] != 0) require(usedMembershipToken[tokenId[i]] <= block.timestamp ,\"ERROR: this Membership Token is already used\");\n        }\n        \n        for(uint256 j=0; j< _count; j++){\n            _tokenIds.increment();\n            uint256 newItemId = _tokenIds.current();\n            \n            mintNft(newItemId);\n            \n            usedMembershipToken[tokenId[j]] = lockedTime;\n            \n            emit NftBought(msg.sender,newItemId,tokenId[j]);\n        }\n        \n        distributeAmount(msg.value);\n    }","contract":"sleeperHitsVolume1","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public basePrice;","after":"uint256 public immutable basePrice;","contract":"sleeperHitsVolume1","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public maxSupply;","after":"uint256 public immutable maxSupply;","contract":"sleeperHitsVolume1","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public lockedTime;","after":"uint256 public immutable lockedTime;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address artist1 = 0x49E74E31787734C3543E99BfACD457cb8286b239;","after":"address constant artist1 = 0x49E74E31787734C3543E99BfACD457cb8286b239;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address artist2 = 0xF4A12bC4596E1c3e19D512F76325B52D72D375CF;","after":"address constant artist2 = 0xF4A12bC4596E1c3e19D512F76325B52D72D375CF;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address artist3 = 0x1b21A4287CBfA8F81753de2A17028Bf2fA231034;","after":"address constant artist3 = 0x1b21A4287CBfA8F81753de2A17028Bf2fA231034;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address artist4 = 0x856e9E72b99486f16C1aD41e94C1A460B97173D4;","after":"address constant artist4 = 0x856e9E72b99486f16C1aD41e94C1A460B97173D4;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address artist5 = 0x627137FC6cFa3fbfa0ed936fB4B5d66fB383DBE8;","after":"address constant artist5 = 0x627137FC6cFa3fbfa0ed936fB4B5d66fB383DBE8;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address artist6 = 0xAc06d32f100D50CA67f290307eC590443d639c8e;","after":"address constant artist6 = 0xAc06d32f100D50CA67f290307eC590443d639c8e;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address artist7 = 0x9A477a3A08BD1fd00Fc4eC362c4445d4701aab6d;","after":"address constant artist7 = 0x9A477a3A08BD1fd00Fc4eC362c4445d4701aab6d;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address dev = 0x7cF196415CDD1eF08ca2358a8282D33Ba089B9f3;","after":"address constant dev = 0x7cF196415CDD1eF08ca2358a8282D33Ba089B9f3;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address owner = 0xdC463F26272D2FE8758D8072BA498B16A30AaaC2;","after":"address constant owner = 0xdC463F26272D2FE8758D8072BA498B16A30AaaC2;","contract":"sleeperHitsVolume1","time":1},{"type":"constant-restrict-modification  ","before":"address owner2 = 0x58F32C2ed82556aa3aA17fF1B31E833BE77AfDfe;","after":"address constant owner2 = 0x58F32C2ed82556aa3aA17fF1B31E833BE77AfDfe;","contract":"sleeperHitsVolume1","time":1}]}
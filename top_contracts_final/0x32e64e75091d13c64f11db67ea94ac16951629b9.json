{"time":101,"results":[{"type":"external-function ","before":"   function buy(\n        address payable _user,\n        address payable _referrer,\n        uint256 _referralBasisPoint,\n        uint16 _landType,\n        bytes memory _signature,\n        bytes32 _hash\n    )\n        public\n        payable\n        whenNotPaused()\n    {\n        require(_referralBasisPoint + ethBackBasisPoint + landBasisPoint <= BASE, \"Invalid basis points\");\n        require(payableOptions[msg.value], \"Invalid msg.value\");\n        require(validateSig(encodeData(_user, _referrer, _referralBasisPoint, _landType), _signature), \"Invalid signature\");\n        if (_hash != bytes32(0)) {\n            recordHash(_hash);\n        }\n        uint8 purchaseType = campaign.proxyPurchaseType;\n        uint256 netValue = msg.value;\n        uint256 referralValue = _referrerBack(_referrer, _referralBasisPoint);\n        uint256 landValue = _landPoolBack(_landType);\n        netValue = msg.value.sub(referralValue).sub(landValue);\n\n        emit Sold(\n            _user,\n            _referrer,\n            purchaseType,\n            msg.value,\n            referralValue,\n            landValue,\n            netValue,\n            _landType\n        );\n  ","after":"   function buy(\n        address payable _user,\n        address payable _referrer,\n        uint256 _referralBasisPoint,\n        uint16 _landType,\n        bytes calldata _signature,\n        bytes32 _hash\n    )\n        public\n        payable\n        whenNotPaused()\n    {\n        require(_referralBasisPoint + ethBackBasisPoint + landBasisPoint <= BASE, \"Invalid basis points\");\n        require(payableOptions[msg.value], \"Invalid msg.value\");\n        require(validateSig(encodeData(_user, _referrer, _referralBasisPoint, _landType), _signature), \"Invalid signature\");\n        if (_hash != bytes32(0)) {\n            recordHash(_hash);\n        }\n        uint8 purchaseType = campaign.proxyPurchaseType;\n        uint256 netValue = msg.value;\n        uint256 referralValue = _referrerBack(_referrer, _referralBasisPoint);\n        uint256 landValue = _landPoolBack(_landType);\n        netValue = msg.value.sub(referralValue).sub(landValue);\n\n        emit Sold(\n            _user,\n            _referrer,\n            purchaseType,\n            msg.value,\n            referralValue,\n            landValue,\n            netValue,\n            _landType\n        );\n  ","contract":"MCHGUMGatewayV11","time":0},{"type":"external-function ","before":"   function buyGUM(\n        address payable _referrer,\n        uint256 _referralBasisPoint,\n        uint16 _landType,\n        bytes memory _signature\n    )\n        public\n        payable\n    {\n        require(_referralBasisPoint + ethBackBasisPoint + landBasisPoint <= BASE, \"Invalid basis points\");\n        require(payableOptions[msg.value], \"Invalid msg.value\");\n        require(validateSig(encodeData(msg.sender, _referrer, _referralBasisPoint, _landType), _signature), \"Invalid signature\");\n\n        uint8 purchaseType = campaign.purchaseType;\n        uint256 netValue = msg.value;\n        uint256 referralValue = 0;\n        uint256 landValue = 0;\n\n        if (purchaseType == PURCHASE_ETH_BACK || purchaseType == PURCHASE_ETH_BACK_UP20) {\n            if (getRandom(chanceDenom, nonce, msg.sender) == 0) {\n                uint256 ethBackValue = _ethBack(msg.sender, ethBackBasisPoint);\n                netValue = netValue.sub(ethBackValue);\n            } else {\n                purchaseType = campaign.subPurchaseType;\n                referralValue = _referrerBack(_referrer, _referralBasisPoint);\n                landValue = _landPoolBack(_landType);\n                netValue = msg.value.sub(referralValue).sub(landValue);\n            }\n            nonce++;\n        } else {\n            referralValue = _referrerBack(_referrer, _referralBasisPoint);\n            landValue = _landPoolBack(_landType);\n            netValue = msg.value.sub(referralValue).sub(landValue);\n        }\n\n        emit Sold(\n            msg.sender,\n            _referrer,\n            purchaseType,\n            msg.value,\n            referralValue,\n            landValue,\n            netValue,\n            _landType\n        );\n  ","after":"   function buyGUM(\n        address payable _referrer,\n        uint256 _referralBasisPoint,\n        uint16 _landType,\n        bytes calldata _signature\n    )\n        public\n        payable\n    {\n        require(_referralBasisPoint + ethBackBasisPoint + landBasisPoint <= BASE, \"Invalid basis points\");\n        require(payableOptions[msg.value], \"Invalid msg.value\");\n        require(validateSig(encodeData(msg.sender, _referrer, _referralBasisPoint, _landType), _signature), \"Invalid signature\");\n\n        uint8 purchaseType = campaign.purchaseType;\n        uint256 netValue = msg.value;\n        uint256 referralValue = 0;\n        uint256 landValue = 0;\n\n        if (purchaseType == PURCHASE_ETH_BACK || purchaseType == PURCHASE_ETH_BACK_UP20) {\n            if (getRandom(chanceDenom, nonce, msg.sender) == 0) {\n                uint256 ethBackValue = _ethBack(msg.sender, ethBackBasisPoint);\n                netValue = netValue.sub(ethBackValue);\n            } else {\n                purchaseType = campaign.subPurchaseType;\n                referralValue = _referrerBack(_referrer, _referralBasisPoint);\n                landValue = _landPoolBack(_landType);\n                netValue = msg.value.sub(referralValue).sub(landValue);\n            }\n            nonce++;\n        } else {\n            referralValue = _referrerBack(_referrer, _referralBasisPoint);\n            landValue = _landPoolBack(_landType);\n            netValue = msg.value.sub(referralValue).sub(landValue);\n        }\n\n        emit Sold(\n            msg.sender,\n            _referrer,\n            purchaseType,\n            msg.value,\n            referralValue,\n            landValue,\n            netValue,\n            _landType\n        );\n  ","contract":"MCHGUMGatewayV11","time":0}]}
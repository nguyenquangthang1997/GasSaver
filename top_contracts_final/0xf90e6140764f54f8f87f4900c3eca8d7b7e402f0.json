{"time":47,"results":[{"type":"external-function ","before":"function claim(Balance memory _balance, uint8 v, bytes32 r, bytes32 s) external whenNotPaused {\n        require(ecrecover(toEthSignedMessageHash(prepareMessage(_balance)), v, r, s) == validator, \"Mine: invalid claim signature\");\n        require(_balance.recipient == msg.sender, \"Mine: receipient must be sender\");\n        \n        address recipient = _balance.recipient;\n        uint96 toClaim = _balance.value.sub(claimed[recipient]);\n        require(toClaim > 0, \"Mine: nothing to claim\");\n        claimed[recipient] = _balance.value;\n        require(token.transfer(msg.sender, toClaim), \"Mine: mint is not successful\");\n        emit Claim(recipient, toClaim);\n        emit Value(recipient, claimed[recipient]);\n    }","after":"function claim(Balance calldata _balance, uint8 v, bytes32 r, bytes32 s) external whenNotPaused {\n        require(ecrecover(toEthSignedMessageHash(prepareMessage(_balance)), v, r, s) == validator, \"Mine: invalid claim signature\");\n        require(_balance.recipient == msg.sender, \"Mine: receipient must be sender\");\n        \n        address recipient = _balance.recipient;\n        uint96 toClaim = _balance.value.sub(claimed[recipient]);\n        require(toClaim > 0, \"Mine: nothing to claim\");\n        claimed[recipient] = _balance.value;\n        require(token.transfer(msg.sender, toClaim), \"Mine: mint is not successful\");\n        emit Claim(recipient, toClaim);\n        emit Value(recipient, claimed[recipient]);\n    }","contract":"MCHCMine","time":0},{"type":"external-function ","before":"function doOverride(Balance[] memory _balances) external onlyOperator {\n        for (uint i = 0; i < _balances.length; i++) {\n            claimed[_balances[i].recipient] = _balances[i].value;\n            emit Value(_balances[i].recipient, _balances[i].value);\n        }\n    }","after":"function doOverride(Balance[] calldata _balances) external onlyOperator {\n        for (uint i = 0; i < _balances.length; i++) {\n            claimed[_balances[i].recipient] = _balances[i].value;\n            emit Value(_balances[i].recipient, _balances[i].value);\n        }\n    }","contract":"MCHCMine","time":0},{"type":"immutable-restrict-modification ","before":"address public validator;","after":"address public immutable validator;","contract":"MCHCMine","time":0}]}
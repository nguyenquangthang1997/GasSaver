{"time":150,"results":[{"type":"external-function ","before":"function setURI(string memory newuri) public onlyRole(URI_SETTER_ROLE) {\r\n        _setURI(newuri);\r\n    }","after":"function setURI(string calldata newuri) public onlyRole(URI_SETTER_ROLE) {\r\n        _setURI(newuri);\r\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function mint(address account, uint256 id, uint256 amount, bytes memory data)\r\n    public\r\n    onlyRole(MINTER_ROLE)\r\n    {\r\n        _mint(account, id, amount, data);\r\n    }","after":"function mint(address account, uint256 id, uint256 amount, bytes calldata data)\r\n    public\r\n    onlyRole(MINTER_ROLE)\r\n    {\r\n        _mint(account, id, amount, data);\r\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\r\n    public\r\n    onlyRole(MINTER_ROLE)\r\n    {\r\n        _mintBatch(to, ids, amounts, data);\r\n    }","after":"function mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data)\r\n    public\r\n    onlyRole(MINTER_ROLE)\r\n    {\r\n        _mintBatch(to, ids, amounts, data);\r\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function mintForBatch(address[] memory _toArray,bytes memory data) public onlyRole(MINTER_ROLE){\r\n        for (uint256 i = 0; i < _toArray.length; i++){\r\n            _mint(_toArray[i], nftId, 1, data);\r\n            nftId++;\r\n        }\r\n    }","after":"function mintForBatch(address[] calldata _toArray,bytes calldata data) public onlyRole(MINTER_ROLE){\r\n        for (uint256 i = 0; i < _toArray.length; i++){\r\n            _mint(_toArray[i], nftId, 1, data);\r\n            nftId++;\r\n        }\r\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","contract":"NFT","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"NFT","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"Paladin Pandas\";","after":"string public constant name = \"Paladin Pandas\";","contract":"NFT","time":0}]}
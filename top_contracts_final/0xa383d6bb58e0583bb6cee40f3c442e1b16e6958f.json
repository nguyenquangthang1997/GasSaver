{"time":120,"results":[{"type":"external-function ","before":"function create(\n        ModelData memory _model,\n        Media[] memory _media,\n        Trait[] memory _traits,\n        uint256 quantity\n    ) external onlyOwner {\n        for (uint256 i; i < models.length; i++) {\n            if (\n                keccak256(abi.encodePacked(models[i].name)) ==\n                keccak256(abi.encodePacked(_model.name))\n            ) {\n                revert();\n            }\n        }\n\n        uint256 from;\n\n        if (models.length == 0) {\n            from = 0;\n        } else {\n            from = models[models.length - 1].to + 1;\n        }\n\n        uint256 to = from + quantity - 1;\n        models.push(Model(_model.name, _model.description, from, to));\n        uint256 modelId = models.length - 1;\n\n        for (uint256 i = 0; i < _media.length; i++) {\n            media[modelId].push(Media(_media[i].uri, _media[i].mime));\n        }\n\n        for (uint256 i = 0; i < _traits.length; i++) {\n            traits[modelId].push(Trait(_traits[i].name, _traits[i].value));\n        }\n\n        _increaseBalance(msg.sender, quantity);\n\n        for (uint256 i = from; i <= to; i++) {\n            emit Transfer(address(0), msg.sender, i);\n        }\n    }","after":"function create(\n        ModelData calldata _model,\n        Media[] calldata _media,\n        Trait[] calldata _traits,\n        uint256 quantity\n    ) external onlyOwner {\n        for (uint256 i; i < models.length; i++) {\n            if (\n                keccak256(abi.encodePacked(models[i].name)) ==\n                keccak256(abi.encodePacked(_model.name))\n            ) {\n                revert();\n            }\n        }\n\n        uint256 from;\n\n        if (models.length == 0) {\n            from = 0;\n        } else {\n            from = models[models.length - 1].to + 1;\n        }\n\n        uint256 to = from + quantity - 1;\n        models.push(Model(_model.name, _model.description, from, to));\n        uint256 modelId = models.length - 1;\n\n        for (uint256 i = 0; i < _media.length; i++) {\n            media[modelId].push(Media(_media[i].uri, _media[i].mime));\n        }\n\n        for (uint256 i = 0; i < _traits.length; i++) {\n            traits[modelId].push(Trait(_traits[i].name, _traits[i].value));\n        }\n\n        _increaseBalance(msg.sender, quantity);\n\n        for (uint256 i = from; i <= to; i++) {\n            emit Transfer(address(0), msg.sender, i);\n        }\n    }","contract":"E1337Wearable","time":0},{"type":"external-function ","before":"function addMediaForModel(uint256 _modelId, Media memory _media)\n        external\n        onlyOwner\n    {\n        media[_modelId].push(Media(_media.uri, _media.mime));\n    }","after":"function addMediaForModel(uint256 _modelId, Media calldata _media)\n        external\n        onlyOwner\n    {\n        media[_modelId].push(Media(_media.uri, _media.mime));\n    }","contract":"E1337Wearable","time":0},{"type":"external-function ","before":"function updateMediaForModelByURI(\n        uint256 _modelId,\n        string memory _uri,\n        string memory _newUri,\n        string memory _mime\n    ) external onlyOwner {\n        for (uint256 i; i < media[_modelId].length; i++) {\n            if (\n                keccak256(abi.encodePacked(media[_modelId][i].uri)) !=\n                keccak256(abi.encodePacked(_uri))\n            ) {\n                continue;\n            }\n\n            media[_modelId][i].uri = _newUri;\n            media[_modelId][i].mime = _mime;\n        }\n    }","after":"function updateMediaForModelByURI(\n        uint256 _modelId,\n        string calldata _uri,\n        string calldata _newUri,\n        string calldata _mime\n    ) external onlyOwner {\n        for (uint256 i; i < media[_modelId].length; i++) {\n            if (\n                keccak256(abi.encodePacked(media[_modelId][i].uri)) !=\n                keccak256(abi.encodePacked(_uri))\n            ) {\n                continue;\n            }\n\n            media[_modelId][i].uri = _newUri;\n            media[_modelId][i].mime = _mime;\n        }\n    }","contract":"E1337Wearable","time":0},{"type":"external-function ","before":"function addTraitForModel(uint256 _modelId, Trait memory _traits)\n        external\n        onlyOwner\n    {\n        traits[_modelId].push(Trait(_traits.name, _traits.value));\n    }","after":"function addTraitForModel(uint256 _modelId, Trait calldata _traits)\n        external\n        onlyOwner\n    {\n        traits[_modelId].push(Trait(_traits.name, _traits.value));\n    }","contract":"E1337Wearable","time":0},{"type":"external-function ","before":"function updateTraitForModelByName(\n        uint256 _modelId,\n        string memory _name,\n        string memory _value\n    ) external onlyOwner {\n        for (uint256 i; i < traits[_modelId].length; i++) {\n            if (\n                keccak256(abi.encodePacked(traits[_modelId][i].name)) !=\n                keccak256(abi.encodePacked(_name))\n            ) {\n                continue;\n            }\n\n            traits[_modelId][i].value = _value;\n        }\n    }","after":"function updateTraitForModelByName(\n        uint256 _modelId,\n        string calldata _name,\n        string calldata _value\n    ) external onlyOwner {\n        for (uint256 i; i < traits[_modelId].length; i++) {\n            if (\n                keccak256(abi.encodePacked(traits[_modelId][i].name)) !=\n                keccak256(abi.encodePacked(_name))\n            ) {\n                continue;\n            }\n\n            traits[_modelId][i].value = _value;\n        }\n    }","contract":"E1337Wearable","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) external onlyOwner {\n        baseURI = _uri;\n    }","after":"function setBaseTokenURI(string calldata _uri) external onlyOwner {\n        baseURI = _uri;\n    }","contract":"E1337Wearable","time":0}]}
{"time":215,"results":[{"type":"state-data-arrangement ","before":"\naddress constant WALLET1 = 0xffe5CBCDdF2bd1b4Dc3c00455d4cdCcf20F77587;\naddress constant WALLET2 = 0xe5c07AcF973Ccda3a141efbb2e829049591F938e;\naddress constant WALLET3 = 0xC87C8BF777701ccFfB1230051E33f0524E5975b5;\nuint256 public basePrice = 0.1 * 10 ** 18;\nuint256 public maxPerWallet = 1;\nuint256 public maxPerTransaction = 5;\nuint256 public maxSupply = 10000;\nuint256 public preSalePhase = 1;\nbool public preSaleIsActive = true;\nbool public saleIsActive = false;\naddress[] public contracts;\naddress proxyRegistryAddress;\nstring _baseTokenURI;\nbytes32 private merkleRoot;\nmapping(address => ContractWhitelist) public contractWhitelist;\nmapping(address => Minter) minters;","after":"uint256 public basePrice = 0.1 * 10 ** 18;\nuint256 public maxPerWallet = 1;\nuint256 public maxPerTransaction = 5;\nuint256 public maxSupply = 10000;\nuint256 public preSalePhase = 1;\naddress[] public contracts;\nstring _baseTokenURI;\nbytes32 private merkleRoot;\nmapping(address => ContractWhitelist) public contractWhitelist;\nmapping(address => Minter) minters;\naddress constant WALLET1 = 0xffe5CBCDdF2bd1b4Dc3c00455d4cdCcf20F77587;\naddress constant WALLET2 = 0xe5c07AcF973Ccda3a141efbb2e829049591F938e;\naddress constant WALLET3 = 0xC87C8BF777701ccFfB1230051E33f0524E5975b5;\naddress proxyRegistryAddress;\nbool public preSaleIsActive = true;\nbool public saleIsActive = false;\n","contract":"WLNFT_MintPass","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) public onlyOwner {\n        _baseTokenURI = _uri;\n    }","after":"function setBaseTokenURI(string calldata _uri) public onlyOwner {\n        _baseTokenURI = _uri;\n    }","contract":"WLNFT_MintPass","time":0},{"type":"external-function ","before":"function mint(\n        uint _quantity, \n        bytes32[] memory proof\n        ) public payable {\n\n        uint256 currentSupply = totalSupply();\n        require(saleIsActive, \"Sale is not active.\");\n        require(msg.value > 0, \"Must send ETH to mint.\");\n        require(currentSupply <= maxSupply, \"Sold out.\");\n        require(currentSupply + _quantity <= maxSupply, \"Requested quantity would exceed total supply.\");\n        if(preSaleIsActive) {\n            require(getPrice() * _quantity <= msg.value, \"ETH sent is incorrect.\");\n            require(_quantity <= maxPerWallet, \"Exceeds wallet presale limit.\");\n            if (preSalePhase == 1) {\n                mintPhase1(_quantity, proof);\n            }\n            if (preSalePhase == 2) {\n                mintPhase2(_quantity);\n            }\n        } else {\n            require(getPrice() * _quantity <= msg.value, \"ETH sent is incorrect.\");\n            require(_quantity <= maxPerTransaction, \"Exceeds per transaction limit for public sale.\");\n            _safeMint(msg.sender, _quantity);\n        }\n    }","after":"function mint(\n        uint _quantity, \n        bytes32[] calldata proof\n        ) public payable {\n\n        uint256 currentSupply = totalSupply();\n        require(saleIsActive, \"Sale is not active.\");\n        require(msg.value > 0, \"Must send ETH to mint.\");\n        require(currentSupply <= maxSupply, \"Sold out.\");\n        require(currentSupply + _quantity <= maxSupply, \"Requested quantity would exceed total supply.\");\n        if(preSaleIsActive) {\n            require(getPrice() * _quantity <= msg.value, \"ETH sent is incorrect.\");\n            require(_quantity <= maxPerWallet, \"Exceeds wallet presale limit.\");\n            if (preSalePhase == 1) {\n                mintPhase1(_quantity, proof);\n            }\n            if (preSalePhase == 2) {\n                mintPhase2(_quantity);\n            }\n        } else {\n            require(getPrice() * _quantity <= msg.value, \"ETH sent is incorrect.\");\n            require(_quantity <= maxPerTransaction, \"Exceeds per transaction limit for public sale.\");\n            _safeMint(msg.sender, _quantity);\n        }\n    }","contract":"WLNFT_MintPass","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxSupply = 10000;","after":"uint256 public constant maxSupply = 10000;","contract":"WLNFT_MintPass","time":1},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"WLNFT_MintPass","time":1}]}
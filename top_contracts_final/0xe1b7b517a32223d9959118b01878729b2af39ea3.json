{"time":52,"results":[{"type":"external-function ","before":"function lock(bytes memory _toAddress, uint256 _amount) public {\n        // need approve infinte amount from user then safe transfer from\n        IERC20(want).safeTransferFrom(msg.sender, address(this), _amount);\n        IERC20(want).safeApprove(xvault, _amount);\n        Vault(xvault).deposit(_amount);\n        // https://github.com/polynetwork/eth-contracts/blob/master/contracts/core/lock_proxy/LockProxy.sol#L64\n        IERC20(xvault).safeApprove(polyLockProxy, _amount);\n        // 4 -> neo mainnet 5 -> neo testnet\n        LockProxy(polyLockProxy).lock(xvault, toChainId, _toAddress, _amount);\n    }","after":"function lock(bytes calldata _toAddress, uint256 _amount) public {\n        // need approve infinte amount from user then safe transfer from\n        IERC20(want).safeTransferFrom(msg.sender, address(this), _amount);\n        IERC20(want).safeApprove(xvault, _amount);\n        Vault(xvault).deposit(_amount);\n        // https://github.com/polynetwork/eth-contracts/blob/master/contracts/core/lock_proxy/LockProxy.sol#L64\n        IERC20(xvault).safeApprove(polyLockProxy, _amount);\n        // 4 -> neo mainnet 5 -> neo testnet\n        LockProxy(polyLockProxy).lock(xvault, toChainId, _toAddress, _amount);\n    }","contract":"LockProxyBridgeUSDT","time":0},{"type":"external-function ","before":"function unlock(bytes memory proof,\n                    bytes memory rawHeader,\n                    bytes memory headerProof,\n                    bytes memory curRawHeader,\n                    bytes memory headerSig) public {\n        // need approve infinte amount from user then safe transfer from\n        // https://github.com/polynetwork/eth-contracts/blob/master/contracts/core/cross_chain_manager/logic/EthCrossChainManager.sol#L127\n        EthCrossChainManager(polyCCMC).verifyHeaderAndExecuteTx(proof, rawHeader, headerProof, curRawHeader, headerSig);\n        uint _amount = IERC20(xvault).balanceOf(msg.sender);\n        IERC20(xvault).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint _before = IERC20(want).balanceOf(address(this));\n        Vault(xvault).withdraw(_amount);\n        uint _after = IERC20(want).balanceOf(address(this));\n        _amount = _after.sub(_before);\n\n        IERC20(want).safeTransfer(msg.sender, _amount);\n    }","after":"function unlock(bytes calldata proof,\n                    bytes calldata rawHeader,\n                    bytes calldata headerProof,\n                    bytes calldata curRawHeader,\n                    bytes calldata headerSig) public {\n        // need approve infinte amount from user then safe transfer from\n        // https://github.com/polynetwork/eth-contracts/blob/master/contracts/core/cross_chain_manager/logic/EthCrossChainManager.sol#L127\n        EthCrossChainManager(polyCCMC).verifyHeaderAndExecuteTx(proof, rawHeader, headerProof, curRawHeader, headerSig);\n        uint _amount = IERC20(xvault).balanceOf(msg.sender);\n        IERC20(xvault).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint _before = IERC20(want).balanceOf(address(this));\n        Vault(xvault).withdraw(_amount);\n        uint _after = IERC20(want).balanceOf(address(this));\n        _amount = _after.sub(_before);\n\n        IERC20(want).safeTransfer(msg.sender, _amount);\n    }","contract":"LockProxyBridgeUSDT","time":1}]}
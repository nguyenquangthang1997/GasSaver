{"time":38,"results":[{"type":"external-function ","before":"function claim(\n        uint256 index,\n        uint256 amount,\n        bytes32[] memory merkleProof\n    ) public notPaused {\n        require(token.balanceOf(address(this)) > amount, \"Contract doesnt have enough tokens\");\n\n        // Make sure the tokens have not already been redeemed\n        (uint256 claimedBlock, uint256 claimedMask) = claimed(index);\n        _claimed[index / 256] = claimedBlock | claimedMask;\n\n        // Compute the merkle leaf from index, recipient and amount\n        bytes32 leaf = keccak256(abi.encodePacked(index, msg.sender, amount));\n        // verify the proof is valid\n        require(MerkleProof.verify(merkleProof, root, leaf), \"Proof is not valid\");\n        // Redeem!\n        token.transfer(msg.sender, amount);\n        emit Claim(msg.sender, amount, block.timestamp);\n    }","after":"function claim(\n        uint256 index,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) public notPaused {\n        require(token.balanceOf(address(this)) > amount, \"Contract doesnt have enough tokens\");\n\n        // Make sure the tokens have not already been redeemed\n        (uint256 claimedBlock, uint256 claimedMask) = claimed(index);\n        _claimed[index / 256] = claimedBlock | claimedMask;\n\n        // Compute the merkle leaf from index, recipient and amount\n        bytes32 leaf = keccak256(abi.encodePacked(index, msg.sender, amount));\n        // verify the proof is valid\n        require(MerkleProof.verify(merkleProof, root, leaf), \"Proof is not valid\");\n        // Redeem!\n        token.transfer(msg.sender, amount);\n        emit Claim(msg.sender, amount, block.timestamp);\n    }","contract":"Airdrop","time":0}]}
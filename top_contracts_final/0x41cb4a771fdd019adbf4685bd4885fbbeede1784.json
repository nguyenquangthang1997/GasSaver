{"time":258,"results":[{"type":"external-function ","before":"function addEvilNoundlers(address[] memory _noundles) public onlyOwner {\n        for (uint256 __noundles;__noundles < _noundles.length;__noundles++) {\n            evilNoundleAllowed[_noundles[__noundles]] = true;\n        }\n    }","after":"function addEvilNoundlers(address[] calldata _noundles) public onlyOwner {\n        for (uint256 __noundles;__noundles < _noundles.length;__noundles++) {\n            evilNoundleAllowed[_noundles[__noundles]] = true;\n        }\n    }","contract":"NoundlesTheory","time":0},{"type":"external-function ","before":"function addFreeNoundlers(address[] memory _noundles) public onlyOwner {\n        for (uint256 __noundles;__noundles < _noundles.length;__noundles++) {\n            freeCompanionAllowed[_noundles[__noundles]] = true;\n        }\n    }","after":"function addFreeNoundlers(address[] calldata _noundles) public onlyOwner {\n        for (uint256 __noundles;__noundles < _noundles.length;__noundles++) {\n            freeCompanionAllowed[_noundles[__noundles]] = true;\n        }\n    }","contract":"NoundlesTheory","time":0},{"type":"external-function ","before":"function migrateOldNoundles(uint256[] memory tokens) public payable {\n\n        require(migrationEnabled, \"Migration is not enabled\");\n\n        uint256 __noundles = localTotalSupply.current(); // totalSupply();\n\n        // Look up the types for each.\n        uint8[] memory foundTypes = BetaTheory.getTypeByTokenIds(tokens);\n\n        uint256 offset = 0;\n\n        // Claim each token they ask to migrate.\n        for(uint256 i = 0; i < tokens.length; i += 1){\n\n            // Verify it has not already been migrated.\n            if(alreadyClaimedMigration[tokens[i]]){\n                continue;\n            }\n\n            // Verify the owner if the sender.\n            if(BetaTheory.ownerOf(tokens[i]) != msg.sender){\n                continue;\n            }\n\n            // Mark it as already migrated.\n            alreadyClaimedMigration[tokens[i]] = true;\n\n            // Mint it.\n            _handleMinting(msg.sender, __noundles + offset, foundTypes[i], true);\n\n            if(foundTypes[i] == 1){\n                MigrationMapToMap[__noundles + offset] = tokens[i];\n\n                if(percentChance(__noundles + offset, 100, 15)){\n                    MigrationValue[tokens[i]] = 6;\n                }else {\n                    MigrationValue[tokens[i]] = 3;\n                }\n            }\n\n            offset++;\n        }\n    }","after":"function migrateOldNoundles(uint256[] calldata tokens) public payable {\n\n        require(migrationEnabled, \"Migration is not enabled\");\n\n        uint256 __noundles = localTotalSupply.current(); // totalSupply();\n\n        // Look up the types for each.\n        uint8[] memory foundTypes = BetaTheory.getTypeByTokenIds(tokens);\n\n        uint256 offset = 0;\n\n        // Claim each token they ask to migrate.\n        for(uint256 i = 0; i < tokens.length; i += 1){\n\n            // Verify it has not already been migrated.\n            if(alreadyClaimedMigration[tokens[i]]){\n                continue;\n            }\n\n            // Verify the owner if the sender.\n            if(BetaTheory.ownerOf(tokens[i]) != msg.sender){\n                continue;\n            }\n\n            // Mark it as already migrated.\n            alreadyClaimedMigration[tokens[i]] = true;\n\n            // Mint it.\n            _handleMinting(msg.sender, __noundles + offset, foundTypes[i], true);\n\n            if(foundTypes[i] == 1){\n                MigrationMapToMap[__noundles + offset] = tokens[i];\n\n                if(percentChance(__noundles + offset, 100, 15)){\n                    MigrationValue[tokens[i]] = 6;\n                }else {\n                    MigrationValue[tokens[i]] = 3;\n                }\n            }\n\n            offset++;\n        }\n    }","contract":"NoundlesTheory","time":0},{"type":"external-function ","before":"function setPayoutAddresses(address[] memory _noundles) public onlyOwner {\n        founder1 = _noundles[0];\n        founder2 = _noundles[1];\n    }","after":"function setPayoutAddresses(address[] calldata _noundles) public onlyOwner {\n        founder1 = _noundles[0];\n        founder2 = _noundles[1];\n    }","contract":"NoundlesTheory","time":0},{"type":"external-function ","before":"function setBaseURI(string memory arg) public onlyOwner { baseURI = arg; }","after":"function setBaseURI(string calldata arg) public onlyOwner { baseURI = arg; }","contract":"NoundlesTheory","time":0}]}
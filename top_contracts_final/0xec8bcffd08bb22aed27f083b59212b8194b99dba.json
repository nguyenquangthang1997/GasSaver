{"time":165,"results":[{"type":"state-data-arrangement ","before":"\n╠╠╠╠\n//       \n                       \"╚╠╠�\n��\n//                        \n           \"╙╝╠╠╩\n\n/\n//\n\npragma solidity ^0.8.0;\n\nport \"@openzeppelin/contr\ns-upgradeable/token/ERC721\nensions/ERC721EnumerableUpg\neable.sol\";\nimport \"@openzeppeli\nontracts/token/ERC721/extensions/I\n.sol\";\nimport \"@openzeppelin/contracts-\nable/proxy/utils/Initializable.sol\";\nimpor\n@openzeppelin/contracts-upgra\nl\";\nimport \"@openzeppelin/cont\nnse.sol\";\n\n\ncontract SunflowerArtV2 is Initializable, ERC721EnumerableUpgradeable, OwnableUpgra\nle, PausableUpgradeable {\n\n  string \nng public artCodeDependencies; //e.g.\nription;\n  bool public isArtCodeSe\n;\n\n  uint256 public currentTokenID;\n  uint256 public maxTokens;\n  uint256 public tokenPrice;\n\n  string public\nkenBaseURI;\n  string public extraStringArtist;\n  stri\ns payable public artistFundsAddress;\n  address public a","after":"╠╠╠╠\n//       \n                       \"╚╠╠�\n��\n//                        \n/\n//\n\npragma solidity ^0.8.0;\n\nport \"@openzeppelin/contr\ns-upgradeable/token/ERC721\nensions/ERC721EnumerableUpg\neable.sol\";\nimport \"@openzeppeli\nontracts/token/ERC721/extensions/I\nl\";\nimport \"@openzeppelin/cont\nle, PausableUpgradeable {\n\n  string \nng public artCodeDependencies; //e.g.\nription;\n  bool public isArtCodeSe\nkenBaseURI;\n  string public extraStringArtist;\n  stri\ns payable public artistFundsAddress;\n  address public a\n.sol\";\nimport \"@openzeppelin/contracts-\nable/proxy/utils/Initializable.sol\";\nimpor\n@openzeppelin/contracts-upgra\nnse.sol\";\n\n\ncontract SunflowerArtV2 is Initializable, ERC721EnumerableUpgradeable, OwnableUpgra\n;\n\n  uint256 public currentTokenID;\n  uint256 public maxTokens;\n  uint256 public tokenPrice;\n\n  string public\n           \"╙╝╠╠╩\n\n","contract":"SunflowerArtV2","time":1},{"type":"external-function ","before":"ist.\n  uint256 private artistBalance; // For safety with arbitrary address, use withdrawal mechanism.\n  address payable constant platformAddress = payable(0xf0bE1F2FB8abfa9aBF7d218a226ef4F046f09a40);\n\n  uint256 public sunflowerMintPercent; // e.g. 10 for %10\n  uint256 public sunflowerTokenRoyalty; // e.g. 31 for every 31th token\n  uint256 public artistTokenRoyalty;\n\n  address constant public sunflowerPreviousVersionContractAddress = 0xD58434F33a20661f186ff67626ea6BDf41B80bCA;\n  uint256 constant public sunflowerContractVersion = 2;\n\n  // Block hashes are determined at mint time.\n  // The seed corresponding to a token can only be accesed one block after, and is equal to keccak256(blockhash ^ tokenID)\n  mapping(uint256 => bytes32) internal blockhashForToken;\n\n  // Want \"initialize\" so can use proxy\n  function initialize(string memory _name, string memory _symbol, uint256 _maxTokens, uint256 _tokenPrice, address _artistFundsAddress, uint256 _artistTokenRoyalty) public initializer {\n    __ERC721_init(_n","after":"ist.\n  uint256 private artistBalance; // For safety with arbitrary address, use withdrawal mechanism.\n  address payable constant platformAddress = payable(0xf0bE1F2FB8abfa9aBF7d218a226ef4F046f09a40);\n\n  uint256 public sunflowerMintPercent; // e.g. 10 for %10\n  uint256 public sunflowerTokenRoyalty; // e.g. 31 for every 31th token\n  uint256 public artistTokenRoyalty;\n\n  address constant public sunflowerPreviousVersionContractAddress = 0xD58434F33a20661f186ff67626ea6BDf41B80bCA;\n  uint256 constant public sunflowerContractVersion = 2;\n\n  // Block hashes are determined at mint time.\n  // The seed corresponding to a token can only be accesed one block after, and is equal to keccak256(blockhash ^ tokenID)\n  mapping(uint256 => bytes32) internal blockhashForToken;\n\n  // Want \"initialize\" so can use proxy\n  function initialize(string memory _name, string memory _symbol, uint256 _maxTokens, uint256 _tokenPrice, address _artistFundsAddress, uint256 _artistTokenRoyalty) public initializer {\n    __ERC721_init(_n","contract":"SunflowerArtV2","time":0},{"type":"external-function ","before":"are only adjustable before sealing.\n  function setPlatformFields(uint256 _sunflowerMintPercent, uint256 _sunflowerTokenRoyalty) public {\n    requirePlatform();\n    requireNotSealed();\n    sunflowerMintPercent = _sunflowerMintPercent;\n    sunflowerTokenRoyalty = _sunflowerToken","after":"are only adjustable before sealing.\n  function setPlatformFields(uint256 _sunflowerMintPercent, uint256 _sunflowerTokenRoyalty) public {\n    requirePlatform();\n    requireNotSealed();\n    sunflowerMintPercent = _sunflowerMintPercent;\n    sunflowerTokenRoyalty = _sunflowerToken","contract":"SunflowerArtV2","time":0},{"type":"external-function ","before":";\n  }\n\n  // Seal the art code. Disables many functions of the contract\n  function sealArtCode() public {\n    requir","after":";\n  }\n\n  // Seal the art code. Disables many functions of the contract\n  function sealArtCode() public {\n    requir","contract":"SunflowerArtV2","time":0},{"type":"external-function ","before":"ner();\n    requireNotSealed();\n    require((bytes(artCode).length != 0) && (bytes(artCodeDependencies).length != 0) && (bytes(artDescription","after":"ner();\n    requireNotSealed();\n    require((bytes(artCode).length != 0) && (bytes(artCodeDependencies).length != 0) && (bytes(artDescription","contract":"SunflowerArtV2","time":0},{"type":"external-function ","before":"ength != 0), \"Art not fully set.\");\n    isArtCodeSealed = true;\n  }\n  function requireNotSealed() internal view {\n    require(isArtCodeSealed == false,","after":"ength != 0), \"Art not fully set.\");\n    isArtCodeSealed = true;\n  }\n  function requireNotSealed() internal view {\n    require(isArtCodeSealed == false,","contract":"SunflowerArtV2","time":0}]}
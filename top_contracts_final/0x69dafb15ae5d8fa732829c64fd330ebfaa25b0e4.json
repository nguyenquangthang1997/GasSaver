{"time":334,"results":[{"type":"external-function ","before":"function mintPresale(\n        uint256 amountOfArts,\n        bytes32 hash,\n        bytes memory signature\n    ) external payable whenPresaleStarted {\n        require(initializedYieldToken, \"TNI\");\n        require(\n            checkPresaleEligibility(hash, signature),\n            \"NotEligible\"\n        );\n        require(totalSupply() < MAX_ARTS, \"AllMinted\");\n        require(\n            amountOfArts <= presaleMaxMint,\n            \"exceeds max\"\n        );\n        require(\n            totalSupply() + amountOfArts <= MAX_ARTS,\n            \"exceed supply\"\n        );\n        require(\n            _totalClaimed[msg.sender] + amountOfArts <= presaleMaxMint,\n            \"exceed per address\"\n        );\n        require(amountOfArts > 0, \"at least 1\");\n        require(price * amountOfArts == msg.value, \"wrong ETH amount\");\n        uint256 _nextTokenId = totalSupply();\n        for (uint256 i = 0; i < amountOfArts; i++) {\n            _safeMint(msg.sender, _nextTokenId++);\n        }\n        _totalClaimed[msg.sender] += amountOfArts;\n        yieldToken.updateRewardOnMint(msg.sender);\n        emit PresaleMint(msg.sender, amountOfArts);\n    }","after":"function mintPresale(\n        uint256 amountOfArts,\n        bytes32 hash,\n        bytes calldata signature\n    ) external payable whenPresaleStarted {\n        require(initializedYieldToken, \"TNI\");\n        require(\n            checkPresaleEligibility(hash, signature),\n            \"NotEligible\"\n        );\n        require(totalSupply() < MAX_ARTS, \"AllMinted\");\n        require(\n            amountOfArts <= presaleMaxMint,\n            \"exceeds max\"\n        );\n        require(\n            totalSupply() + amountOfArts <= MAX_ARTS,\n            \"exceed supply\"\n        );\n        require(\n            _totalClaimed[msg.sender] + amountOfArts <= presaleMaxMint,\n            \"exceed per address\"\n        );\n        require(amountOfArts > 0, \"at least 1\");\n        require(price * amountOfArts == msg.value, \"wrong ETH amount\");\n        uint256 _nextTokenId = totalSupply();\n        for (uint256 i = 0; i < amountOfArts; i++) {\n            _safeMint(msg.sender, _nextTokenId++);\n        }\n        _totalClaimed[msg.sender] += amountOfArts;\n        yieldToken.updateRewardOnMint(msg.sender);\n        emit PresaleMint(msg.sender, amountOfArts);\n    }","contract":"AVYC","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        baseTokenURI = baseURI;\n        emit BaseURIChanged(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        baseTokenURI = baseURI;\n        emit BaseURIChanged(baseURI);\n    }","contract":"AVYC","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName)\n        public\n        override\n    {\n        require(initializedYieldToken, \"TNI\");\n        yieldToken.burn(msg.sender, nameChangePrice);\n        super.changeName(tokenId, newName);\n    }","after":"function changeName(uint256 tokenId, string calldata newName)\n        public\n        override\n    {\n        require(initializedYieldToken, \"TNI\");\n        yieldToken.burn(msg.sender, nameChangePrice);\n        super.changeName(tokenId, newName);\n    }","contract":"AVYC","time":0},{"type":"external-function ","before":"function changeBio(uint256 tokenId, string memory _bio) public override {\n        require(initializedYieldToken, \"TNI\");\n        yieldToken.burn(msg.sender, bioChangePrice);\n        super.changeBio(tokenId, _bio);\n    }","after":"function changeBio(uint256 tokenId, string calldata _bio) public override {\n        require(initializedYieldToken, \"TNI\");\n        yieldToken.burn(msg.sender, bioChangePrice);\n        super.changeBio(tokenId, _bio);\n    }","contract":"AVYC","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) public virtual {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(\n            sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])),\n            \"New name is same as the current one\"\n        );\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        emit NameChange(tokenId, newName);\n    }","after":"function changeName(uint256 tokenId, string calldata newName) public virtual {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(validateName(newName) == true, \"Not a valid new name\");\n        require(\n            sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])),\n            \"New name is same as the current one\"\n        );\n        require(isNameReserved(newName) == false, \"Name already reserved\");\n\n        // If already named, dereserve old name\n        if (bytes(_tokenName[tokenId]).length > 0) {\n            toggleReserveName(_tokenName[tokenId], false);\n        }\n        toggleReserveName(newName, true);\n        _tokenName[tokenId] = newName;\n        emit NameChange(tokenId, newName);\n    }","contract":"AVYC","time":0},{"type":"external-function ","before":"function changeBio(uint256 _tokenId, string memory _bio) public virtual {\n\t\taddress owner = ownerOf(_tokenId);\n\t\trequire(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n\t\tbio[_tokenId] = _bio;\n\t\temit BioChange(_tokenId, _bio);\n\t}","after":"function changeBio(uint256 _tokenId, string calldata _bio) public virtual {\n\t\taddress owner = ownerOf(_tokenId);\n\t\trequire(_msgSender() == owner, \"ERC721: caller is not the owner\");\n\n\t\tbio[_tokenId] = _bio;\n\t\temit BioChange(_tokenId, _bio);\n\t}","contract":"AVYC","time":0},{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n                !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n                (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":463,"column":16},"end":{"line":464,"column":46}},"contract":"ERC721Namable","time":0}]}
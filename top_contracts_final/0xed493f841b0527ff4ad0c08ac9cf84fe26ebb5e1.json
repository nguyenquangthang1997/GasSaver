{"time":148,"results":[{"type":"state-data-arrangement ","before":"\nuint256 constant APE_RESERVED = 100;\nuint256 constant APE_PRIVATE = 2900;\nuint256 constant APE_MAX = 3000;\nuint256 constant MINT_PRICE = 0.25 ether;\naddress constant TEAM_ADDRESS = 0xd97b398267C112eDB024018d6a1Eb84F505d699a;\nmapping(string => bool) private _nonces;\naddress private _signerAddress = 0xEF1f611A5D34ee2ceC474AbC212d625362329BC0;\nmapping(address => bool) public presalePurchased;\nuint256 public publicCounter;\nuint256 public privateCounter;\nbool public mintedReserve;\nbool public publicLive;\nbool public presaleLive;","after":"uint256 constant APE_RESERVED = 100;\nuint256 constant APE_PRIVATE = 2900;\nuint256 constant APE_MAX = 3000;\nuint256 constant MINT_PRICE = 0.25 ether;\nmapping(string => bool) private _nonces;\nmapping(address => bool) public presalePurchased;\nuint256 public publicCounter;\nuint256 public privateCounter;\naddress constant TEAM_ADDRESS = 0xd97b398267C112eDB024018d6a1Eb84F505d699a;\naddress private _signerAddress = 0xEF1f611A5D34ee2ceC474AbC212d625362329BC0;\nbool public mintedReserve;\nbool public publicLive;\nbool public presaleLive;\n","contract":"ApeInGenesis","time":0},{"type":"external-function ","before":"function presale(bytes memory signature) external payable {\r\n        require(presaleLive, \"NOT_RELEASED\");\r\n        require(totalSupply(1) < APE_MAX, \"SOLD_OUT\");\r\n        require(!presalePurchased[msg.sender], \"ALREADY_BOUGHT\");\r\n        require(privateCounter + 1 <= APE_PRIVATE, \"MAX_PRIVATE_SALE\");\r\n        require(verifyPresale(msg.sender, signature), \"INVALID_TRANSACTION\");\r\n        require(msg.value >= MINT_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n\r\n        presalePurchased[msg.sender] = true;\r\n        privateCounter++;\r\n        _mint(msg.sender, 1, 1, \"\");\r\n    }","after":"function presale(bytes calldata signature) external payable {\r\n        require(presaleLive, \"NOT_RELEASED\");\r\n        require(totalSupply(1) < APE_MAX, \"SOLD_OUT\");\r\n        require(!presalePurchased[msg.sender], \"ALREADY_BOUGHT\");\r\n        require(privateCounter + 1 <= APE_PRIVATE, \"MAX_PRIVATE_SALE\");\r\n        require(verifyPresale(msg.sender, signature), \"INVALID_TRANSACTION\");\r\n        require(msg.value >= MINT_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n\r\n        presalePurchased[msg.sender] = true;\r\n        privateCounter++;\r\n        _mint(msg.sender, 1, 1, \"\");\r\n    }","contract":"ApeInGenesis","time":0},{"type":"external-function ","before":"function purchase(uint256 amount, bytes memory signature, string memory nonce) external payable {\r\n        require(publicLive, \"NOT_RELEASED\");\r\n        require(!_nonces[nonce], \"NONCE_CONSUMED\");\r\n        require(totalSupply(1) < APE_MAX, \"SOLD_OUT\");\r\n        require(publicCounter + amount <= APE_MAX - privateCounter - APE_RESERVED, \"MAX_PUBLIC_SALE\");\r\n        require(verifyTransaction(msg.sender, amount, nonce, signature), \"INVALID_TRANSACTION\");\r\n        require(msg.value >= amount * MINT_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n\r\n        _nonces[nonce] = true;\r\n        publicCounter += amount;\r\n        _mint(msg.sender, 1, amount, \"\");\r\n    }","after":"function purchase(uint256 amount, bytes calldata signature, string calldata nonce) external payable {\r\n        require(publicLive, \"NOT_RELEASED\");\r\n        require(!_nonces[nonce], \"NONCE_CONSUMED\");\r\n        require(totalSupply(1) < APE_MAX, \"SOLD_OUT\");\r\n        require(publicCounter + amount <= APE_MAX - privateCounter - APE_RESERVED, \"MAX_PUBLIC_SALE\");\r\n        require(verifyTransaction(msg.sender, amount, nonce, signature), \"INVALID_TRANSACTION\");\r\n        require(msg.value >= amount * MINT_PRICE, \"INSUFFICIENT_ETH_SENT\");\r\n\r\n        _nonces[nonce] = true;\r\n        publicCounter += amount;\r\n        _mint(msg.sender, 1, amount, \"\");\r\n    }","contract":"ApeInGenesis","time":0},{"type":"external-function ","before":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","after":"   function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n  ","contract":"ApeInGenesis","time":0},{"type":"external-function ","before":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","after":"   function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n  ","contract":"ApeInGenesis","time":0}]}
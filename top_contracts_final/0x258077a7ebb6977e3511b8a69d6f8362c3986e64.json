{"time":158,"results":[{"type":"external-function ","before":"s);\r\n        _signerAddress = newSignerAddress;\r\n    }\r\n\r\n    function mintViaClaim(uint256 vipPassToken, uint256 torToken, uint256 id, bytes memory signature) public {\r\n        require(mintingIsActive, 'Minting not live');\r\n        require(vipPassContractInstance.ownerOf(vipPassToken) == msg.sender, 'Not owner of VIP');\r\n        require(torContractInstance.ownerOf(torToken) == msg.sender, 'Not owner of TOR');\r\n        require(! claimed[vipPassToken], 'Already claimed');\r\n        require(_signerAddress == hashAlbumId(torToken, id).toEthSignedMessageHash().recover(signature), \"Invalid signature\");\r\n\r\n        claimed[vipPa","after":"s);\r\n        _signerAddress = newSignerAddress;\r\n    }\r\n\r\n    function mintViaClaim(uint256 vipPassToken, uint256 torToken, uint256 id, bytes memory signature) public {\r\n        require(mintingIsActive, 'Minting not live');\r\n        require(vipPassContractInstance.ownerOf(vipPassToken) == msg.sender, 'Not owner of VIP');\r\n        require(torContractInstance.ownerOf(torToken) == msg.sender, 'Not owner of TOR');\r\n        require(! claimed[vipPassToken], 'Already claimed');\r\n        require(_signerAddress == hashAlbumId(torToken, id).toEthSignedMessageHash().recover(signature), \"Invalid signature\");\r\n\r\n        claimed[vipPa","contract":"TORAlbums","time":0},{"type":"external-function ","before":" = true;\r\n        _mint(msg.sender, id, 1, \"\");\r\n    }\r\n\r\n    function setBaseURI(string memory newBas","after":" = true;\r\n        _mint(msg.sender, id, 1, \"\");\r\n    }\r\n\r\n    function setBaseURI(string memory newBas","contract":"TORAlbums","time":0},{"type":"external-function ","before":"blic onlyOwner {\r\n        baseURI = newBaseURI;\r\n    }\r\n\r\n    function reserveMint(address account, uint256 id, uint256 amount, bytes memory data) public","after":"blic onlyOwner {\r\n        baseURI = newBaseURI;\r\n    }\r\n\r\n    function reserveMint(address account, uint256 id, uint256 amount, bytes memory data) public","contract":"TORAlbums","time":0},{"type":"external-function ","before":"er {\r\n        _mint(account, id, amount, data);\r\n    }\r\n\r\n    function reserveMintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public o","after":"er {\r\n        _mint(account, id, amount, data);\r\n    }\r\n\r\n    function reserveMintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public o","contract":"TORAlbums","time":0},{"type":"external-function ","before":" /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        )","after":" /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        )","contract":"TORAlbums","time":0},{"type":"external-function ","before":"     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n     ","after":"     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n     ","contract":"TORAlbums","time":0},{"type":"constant-restrict-modification  ","before":"d or not\r\n    mapping(uint256 => b","after":"d or not\r\n    mapping(uint256 => b","contract":"TORAlbums","time":1},{"type":"constant-restrict-modification  ","before":"ublic claimed;\r\n\r\n    string public","after":"ublic claimed;\r\n\r\n    string public","contract":"TORAlbums","time":1}]}
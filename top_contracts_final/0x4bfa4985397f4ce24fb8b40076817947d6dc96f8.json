{"time":152,"results":[{"type":"external-function ","before":"function setProvenanceHash(string memory _provenanceHash) public onlyOwner {\r\n        EH_PROVENANCE = _provenanceHash;\r\n    }","after":"function setProvenanceHash(string calldata _provenanceHash) public onlyOwner {\r\n        EH_PROVENANCE = _provenanceHash;\r\n    }","contract":"EtherHeads","time":0},{"type":"external-function ","before":"function earlyFreeAccessByCard(uint256[] memory tokenIds) public {\r\n        uint256 _redeemAmount = eligibleCards(tokenIds, freeClaimed);\r\n        require(_redeemAmount > 0,\"Nothing to redeem\");\r\n        require(freeCardsTaken[msg.sender] + _redeemAmount <= maxReedemAmount, \"You can claim max 10 free EtherHeads\");\r\n        freeAllocation += _redeemAmount;\r\n        require(freeAllocation <= maxFree,\"This exceeds the number of free cards available\");\r\n        uint256 mintIndex = totalSupply();\r\n        uint256 allocated;            \r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            if (isEligible(tokenId,freeClaimed)) {\r\n                freeClaimed[tokenId] = true;\r\n                allocated += 1;             \r\n                _safeMint(msg.sender, mintIndex + allocated);                \r\n            }\r\n        }\r\n        assert(_redeemAmount == allocated);\r\n        freeCardsTaken[msg.sender] += allocated;\r\n    }","after":"function earlyFreeAccessByCard(uint256[] calldata tokenIds) public {\r\n        uint256 _redeemAmount = eligibleCards(tokenIds, freeClaimed);\r\n        require(_redeemAmount > 0,\"Nothing to redeem\");\r\n        require(freeCardsTaken[msg.sender] + _redeemAmount <= maxReedemAmount, \"You can claim max 10 free EtherHeads\");\r\n        freeAllocation += _redeemAmount;\r\n        require(freeAllocation <= maxFree,\"This exceeds the number of free cards available\");\r\n        uint256 mintIndex = totalSupply();\r\n        uint256 allocated;            \r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            if (isEligible(tokenId,freeClaimed)) {\r\n                freeClaimed[tokenId] = true;\r\n                allocated += 1;             \r\n                _safeMint(msg.sender, mintIndex + allocated);                \r\n            }\r\n        }\r\n        assert(_redeemAmount == allocated);\r\n        freeCardsTaken[msg.sender] += allocated;\r\n    }","contract":"EtherHeads","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxReedemAmount = 10;","after":"uint256 public constant maxReedemAmount = 10;","contract":"EtherHeads","time":0},{"type":"constant-restrict-modification  ","before":"uint256                  public maxFree = 1000;","after":"uint256                  public constant maxFree = 1000;","contract":"EtherHeads","time":0},{"type":"constant-restrict-modification  ","before":"uint256                  public maxP50 = 1000;","after":"uint256                  public constant maxP50 = 1000;","contract":"EtherHeads","time":0}]}
{"time":36,"results":[{"type":"external-function ","before":"function redeemBonusPack(uint256 tokenId, bytes32[] memory proof) public {\r\n        require(merkleRoot != 0, \"BonusPackMinter: no MerkleRoot yet\");\r\n        require(isMinted[tokenId] == false, \"BonusPackMinter: Already Minted\");\r\n        require(proof.verify(merkleRoot, keccak256(abi.encodePacked(msg.sender,tokenId))), \"BonusPackMinter: Not Allocated\");\r\n\r\n        address minter = msg.sender;\r\n\r\n        isMinted[tokenId] = true;\r\n\r\n        netvrkBonusPack.mint(minter, tokenId);\r\n        emit BonusPackMinted(minter, tokenId);\r\n    }","after":"function redeemBonusPack(uint256 tokenId, bytes32[] calldata proof) public {\r\n        require(merkleRoot != 0, \"BonusPackMinter: no MerkleRoot yet\");\r\n        require(isMinted[tokenId] == false, \"BonusPackMinter: Already Minted\");\r\n        require(proof.verify(merkleRoot, keccak256(abi.encodePacked(msg.sender,tokenId))), \"BonusPackMinter: Not Allocated\");\r\n\r\n        address minter = msg.sender;\r\n\r\n        isMinted[tokenId] = true;\r\n\r\n        netvrkBonusPack.mint(minter, tokenId);\r\n        emit BonusPackMinted(minter, tokenId);\r\n    }","contract":"BonusPackMinter","time":0},{"type":"external-function ","before":"function batchRedeemBonusPacks(uint256[] calldata tokenIds, bytes32[][] memory proofs) public \r\n    {\r\n        require(merkleRoot != 0, \"BonusPackMinter: no MerkleRoot yet\");\r\n        uint256 tokenId;        \r\n        address minter = msg.sender;        \r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            tokenId = tokenIds[i];            \r\n            require(proofs[i].verify(merkleRoot, keccak256(abi.encodePacked(minter,tokenId))), \"BonusPackMinter: Not Allocated\");\r\n            require(isMinted[tokenId] == false, \"BonusPackMinter: Already Minted\");\r\n            isMinted[tokenId] = true;\r\n            netvrkBonusPack.mint(minter, tokenId);\r\n            emit BonusPackMinted(minter, tokenId);\r\n        }\r\n    }","after":"function batchRedeemBonusPacks(uint256[] calldata tokenIds, bytes32[][] calldata proofs) public \r\n    {\r\n        require(merkleRoot != 0, \"BonusPackMinter: no MerkleRoot yet\");\r\n        uint256 tokenId;        \r\n        address minter = msg.sender;        \r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            tokenId = tokenIds[i];            \r\n            require(proofs[i].verify(merkleRoot, keccak256(abi.encodePacked(minter,tokenId))), \"BonusPackMinter: Not Allocated\");\r\n            require(isMinted[tokenId] == false, \"BonusPackMinter: Already Minted\");\r\n            isMinted[tokenId] = true;\r\n            netvrkBonusPack.mint(minter, tokenId);\r\n            emit BonusPackMinted(minter, tokenId);\r\n        }\r\n    }","contract":"BonusPackMinter","time":0}]}
{"time":162,"results":[{"type":"external-function ","before":"function setSpecialTokenURI(uint256 tokenId, string memory uri)\n        external\n        onlyOwner\n    {\n        specialTokenURIs[tokenId] = uri;\n    }","after":"function setSpecialTokenURI(uint256 tokenId, string calldata uri)\n        external\n        onlyOwner\n    {\n        specialTokenURIs[tokenId] = uri;\n    }","contract":"Samurai2088","time":0},{"type":"external-function ","before":"function preSaleMint(\n        bytes memory ticketSignature,\n        uint8 ticketAllowance,\n        uint256 count\n    ) external payable {\n        require(\n            mintState == MintState.PRESALE,\n            \"Only available during presale\"\n        );\n        address sender = _msgSender();\n        bytes memory encodedData = abi.encode(sender, ticketAllowance);\n        bytes32 digest = ECDSA.toEthSignedMessageHash(keccak256(encodedData));\n        address recoveredAddress = ECDSA.recover(digest, ticketSignature);\n        require(recoveredAddress == _ticketSigningAddress, \"Invalid signature\");\n        _requireValidCountAndPrice(sender, count, ticketAllowance);\n        _unsafeMint(sender, count);\n    }","after":"function preSaleMint(\n        bytes calldata ticketSignature,\n        uint8 ticketAllowance,\n        uint256 count\n    ) external payable {\n        require(\n            mintState == MintState.PRESALE,\n            \"Only available during presale\"\n        );\n        address sender = _msgSender();\n        bytes memory encodedData = abi.encode(sender, ticketAllowance);\n        bytes32 digest = ECDSA.toEthSignedMessageHash(keccak256(encodedData));\n        address recoveredAddress = ECDSA.recover(digest, ticketSignature);\n        require(recoveredAddress == _ticketSigningAddress, \"Invalid signature\");\n        _requireValidCountAndPrice(sender, count, ticketAllowance);\n        _unsafeMint(sender, count);\n    }","contract":"Samurai2088","time":0},{"type":"immutable-restrict-modification ","before":"   uint256 public totalShares =","after":"   uint256 public immutable totalShares =","contract":"Samurai2088","time":0}]}
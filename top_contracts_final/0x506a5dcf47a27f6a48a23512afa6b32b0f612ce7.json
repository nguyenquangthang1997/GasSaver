{"time":108,"results":[{"type":"struct-data-arrangement ","before":"\nuint256 id\naddress proposer\nuint256 eta\nuint256 createTime\nuint256 startTime\nuint256 endTime\nuint256 forVotes\nuint256 againstVotes\nuint256 blockHeight\nbool canceled\nbool executed\nbool withdrawn","after":"uint256 id\nuint256 eta\nuint256 createTime\nuint256 startTime\nuint256 endTime\nuint256 forVotes\nuint256 againstVotes\nuint256 blockHeight\naddress proposer\nbool canceled\nbool executed\nbool withdrawn\n","contract":"DeFineVotingPortal","time":0},{"type":"external-function ","before":"function propose(uint256 endTime, string memory title, string memory description) public returns (uint256) {\n        uint256 startTime = block.timestamp + globalPendingTime;\n        require(startTime < endTime, \"purpose:: start time must be earlier than end time\");\n        require((endTime - startTime > minDuration) && (endTime - startTime < maxDuration), \"purpose:: illegal duration\");\n        IERC20Upgradeable(voteToken).safeTransferFrom(msg.sender, address(this), proposalThresholdCount);\n        proposalCount++;\n        Proposal memory newProposal = Proposal(\n            proposalCount,\n            msg.sender,\n            0,\n            block.timestamp,\n            block.timestamp + globalPendingTime,\n            endTime,\n            0,\n            0,\n            block.number,\n            false,\n            false,\n            false);\n        proposals[proposalCount] = newProposal;\n\n        emit ProposalCreated(proposalCount, msg.sender, startTime, endTime, title, description);\n        return proposalCount;\n    }","after":"function propose(uint256 endTime, string calldata title, string calldata description) public returns (uint256) {\n        uint256 startTime = block.timestamp + globalPendingTime;\n        require(startTime < endTime, \"purpose:: start time must be earlier than end time\");\n        require((endTime - startTime > minDuration) && (endTime - startTime < maxDuration), \"purpose:: illegal duration\");\n        IERC20Upgradeable(voteToken).safeTransferFrom(msg.sender, address(this), proposalThresholdCount);\n        proposalCount++;\n        Proposal memory newProposal = Proposal(\n            proposalCount,\n            msg.sender,\n            0,\n            block.timestamp,\n            block.timestamp + globalPendingTime,\n            endTime,\n            0,\n            0,\n            block.number,\n            false,\n            false,\n            false);\n        proposals[proposalCount] = newProposal;\n\n        emit ProposalCreated(proposalCount, msg.sender, startTime, endTime, title, description);\n        return proposalCount;\n    }","contract":"DeFineVotingPortal","time":0},{"type":"external-function ","before":"function castVoteBySig(uint256 proposalId, bool support, uint256 voteCount, bytes memory signature) public {\n        address signatory = verify(\n            voteToken,\n            msg.sender,\n            voteCount,\n            proposals[proposalId].blockHeight,\n            signature\n        );\n        require(signatory == signer, \"castVoteBySig: invalid signature\");\n        return _castVote(msg.sender, proposalId, support, voteCount);\n    }","after":"function castVoteBySig(uint256 proposalId, bool support, uint256 voteCount, bytes calldata signature) public {\n        address signatory = verify(\n            voteToken,\n            msg.sender,\n            voteCount,\n            proposals[proposalId].blockHeight,\n            signature\n        );\n        require(signatory == signer, \"castVoteBySig: invalid signature\");\n        return _castVote(msg.sender, proposalId, support, voteCount);\n    }","contract":"DeFineVotingPortal","time":0}]}
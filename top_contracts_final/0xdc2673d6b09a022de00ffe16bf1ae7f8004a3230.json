{"time":31,"results":[{"type":"external-function ","before":"function bond(address[] memory _vaults) external {\n    require(isBondWhitelist[msg.sender], \"Keeper: only bond whitelist\");\n\n    for (uint256 i = 0; i < _vaults.length; i++) {\n      IRewardBondDepositor(depositor).bond(_vaults[i]);\n    }\n  }","after":"function bond(address[] calldata _vaults) external {\n    require(isBondWhitelist[msg.sender], \"Keeper: only bond whitelist\");\n\n    for (uint256 i = 0; i < _vaults.length; i++) {\n      IRewardBondDepositor(depositor).bond(_vaults[i]);\n    }\n  }","contract":"Keeper","time":0},{"type":"external-function ","before":"function updateBondWhitelist(address[] memory _users, bool status) external onlyOwner {\n    for (uint256 i = 0; i < _users.length; i++) {\n      isBondWhitelist[_users[i]] = status;\n    }\n  }","after":"function updateBondWhitelist(address[] calldata _users, bool status) external onlyOwner {\n    for (uint256 i = 0; i < _users.length; i++) {\n      isBondWhitelist[_users[i]] = status;\n    }\n  }","contract":"Keeper","time":0},{"type":"external-function ","before":"function updateRebaseWhitelist(address[] memory _users, bool status) external onlyOwner {\n    for (uint256 i = 0; i < _users.length; i++) {\n      isRebaseWhitelist[_users[i]] = status;\n    }\n  }","after":"function updateRebaseWhitelist(address[] calldata _users, bool status) external onlyOwner {\n    for (uint256 i = 0; i < _users.length; i++) {\n      isRebaseWhitelist[_users[i]] = status;\n    }\n  }","contract":"Keeper","time":0}]}
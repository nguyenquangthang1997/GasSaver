{"time":255,"results":[{"type":"external-function ","before":"function launch(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner returns (bool){\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\n        require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\n        for(uint256 i = 0; i < airdropWallets.length; i++){\n            address wallet = airdropWallets[i];\n            uint256 amount = amounts[i];\n            _isAirdoppedWallet[wallet] = true;\n            _airDroppedTokenAmount[wallet] = amount;\n            _airDropTokensRemaining[wallet] = amount;\n            _airDropAddressNextSellDate[wallet] = block.timestamp.sub(1);\n            _transfer(msg.sender, wallet, amount);\n        }\n        enableTrading();\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n        require(address(this).balance > 0, \"Must have ETH on contract to launch\");\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n        setLiquidityAddress(address(0xdead));\n        return true;\n    }","after":"function launch(address[] calldata airdropWallets, uint256[] calldata amounts) external onlyOwner returns (bool){\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\n        require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\n        for(uint256 i = 0; i < airdropWallets.length; i++){\n            address wallet = airdropWallets[i];\n            uint256 amount = amounts[i];\n            _isAirdoppedWallet[wallet] = true;\n            _airDroppedTokenAmount[wallet] = amount;\n            _airDropTokensRemaining[wallet] = amount;\n            _airDropAddressNextSellDate[wallet] = block.timestamp.sub(1);\n            _transfer(msg.sender, wallet, amount);\n        }\n        enableTrading();\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n        require(address(this).balance > 0, \"Must have ETH on contract to launch\");\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n        setLiquidityAddress(address(0xdead));\n        return true;\n    }","contract":"PonyoInu","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public airDropLimitLiftDate;","after":"uint256 public immutable airDropLimitLiftDate;","contract":"PonyoInu","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public airDropDailySellPerc = 5;","after":"uint256 public constant airDropDailySellPerc = 5;","contract":"PonyoInu","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public maxTransactionAmount;","after":"uint256 public immutable maxTransactionAmount;","contract":"PonyoInu","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private minimumTokensBeforeSwap;","after":"uint256 private immutable minimumTokensBeforeSwap;","contract":"PonyoInu","time":0}]}
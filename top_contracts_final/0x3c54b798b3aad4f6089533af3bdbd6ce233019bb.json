{"time":157,"results":[{"type":"external-function ","before":"function landClaim(uint256 vaultTokenId, uint256 identityTokenId, uint256 itemCacheTokenId, uint256 spotOnLeaderboard, uint256 spotInWhitelist, bytes32[] memory proof) public nonReentrant {\n        require(landMintActive, \"Minting is not currently active\");\n        require(vaultTokenId > 0 && vaultTokenId < 2501, \"That vault cannot claim land\");\n        require(whitelistValidated(toString(vaultTokenId), spotOnLeaderboard, spotInWhitelist, proof), \"That vault cannot claim that item\");\n        require(vaultValidated(vaultTokenId), \"You are not the owner of that vault box\");\n        require(identityValidated(identityTokenId), \"You are not the owner of that identity\");\n        require(itemCacheValidated(itemCacheTokenId), \"You are not the owner of that item cache\");\n\n        _safeMint(_msgSender(), spotOnLeaderboard);\n\n        //Set the _vaultClaims value to spotOnLeaderboard for this vault so the vault cannot mint again\n        _vaultClaims[vaultTokenId] = spotOnLeaderboard;\n        //Set the _identityClaims value to spotOnLeaderboard for this identity so the identity cannot mint again\n        _identityClaims[identityTokenId] = spotOnLeaderboard;\n        //Set the _itemCacheClaims value to spotOnLeaderboard for this item cache so the item cache cannot mint again\n        _itemCacheClaims[itemCacheTokenId] = spotOnLeaderboard;\n\n        //Set the vault that minted this token for reverse lookup\n        _tokenMintedByVault[spotOnLeaderboard] = vaultTokenId;\n        //Set the identity that minted this token for reverse lookup\n        _tokenMintedByIdentity[spotOnLeaderboard] = identityTokenId;\n        //Set the itemCache that minted this token for reverse lookup\n        _tokenMintedByItemCache[spotOnLeaderboard] = itemCacheTokenId;\n    }","after":"function landClaim(uint256 vaultTokenId, uint256 identityTokenId, uint256 itemCacheTokenId, uint256 spotOnLeaderboard, uint256 spotInWhitelist, bytes32[] calldata proof) public nonReentrant {\n        require(landMintActive, \"Minting is not currently active\");\n        require(vaultTokenId > 0 && vaultTokenId < 2501, \"That vault cannot claim land\");\n        require(whitelistValidated(toString(vaultTokenId), spotOnLeaderboard, spotInWhitelist, proof), \"That vault cannot claim that item\");\n        require(vaultValidated(vaultTokenId), \"You are not the owner of that vault box\");\n        require(identityValidated(identityTokenId), \"You are not the owner of that identity\");\n        require(itemCacheValidated(itemCacheTokenId), \"You are not the owner of that item cache\");\n\n        _safeMint(_msgSender(), spotOnLeaderboard);\n\n        //Set the _vaultClaims value to spotOnLeaderboard for this vault so the vault cannot mint again\n        _vaultClaims[vaultTokenId] = spotOnLeaderboard;\n        //Set the _identityClaims value to spotOnLeaderboard for this identity so the identity cannot mint again\n        _identityClaims[identityTokenId] = spotOnLeaderboard;\n        //Set the _itemCacheClaims value to spotOnLeaderboard for this item cache so the item cache cannot mint again\n        _itemCacheClaims[itemCacheTokenId] = spotOnLeaderboard;\n\n        //Set the vault that minted this token for reverse lookup\n        _tokenMintedByVault[spotOnLeaderboard] = vaultTokenId;\n        //Set the identity that minted this token for reverse lookup\n        _tokenMintedByIdentity[spotOnLeaderboard] = identityTokenId;\n        //Set the itemCache that minted this token for reverse lookup\n        _tokenMintedByItemCache[spotOnLeaderboard] = itemCacheTokenId;\n    }","contract":"NTLandDeploy","time":0},{"type":"immutable-restrict-modification ","before":"address identityContract;","after":"address immutable identityContract;","contract":"NTLandDeploy","time":0}]}
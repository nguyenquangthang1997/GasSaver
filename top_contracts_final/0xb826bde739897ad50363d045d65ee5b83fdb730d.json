{"time":181,"results":[{"type":"external-function ","before":"function stakeMachinie(uint256[] memory machinieIds_,uint256[] memory hamachIds_) external {\r\n        require(enableStake, \"Machinie : Stake function is disable\");\r\n        for(uint8 _i=0; _i< machinieIds_.length; _i++){\r\n            require(ownerOf(machinieIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n            require(IHumach(humach).ownerOf(hamachIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent humach token\");\r\n            require(!staking[machinieIds_[_i]]  , \"Machinie : MachinieID is staking\");\r\n            require(!IHumach(humach).isStaking(hamachIds_[_i]) , \"Machinie : HumachID is staking\");\r\n            staking[machinieIds_[_i]] = true;\r\n            stakeTime[machinieIds_[_i]] = block.timestamp;\r\n            humachId[machinieIds_[_i]] = hamachIds_[_i];\r\n            IHumach(humach).updateStakStatus( hamachIds_[_i] , true);\r\n        }\r\n    }","after":"function stakeMachinie(uint256[] calldata machinieIds_,uint256[] calldata hamachIds_) external {\r\n        require(enableStake, \"Machinie : Stake function is disable\");\r\n        for(uint8 _i=0; _i< machinieIds_.length; _i++){\r\n            require(ownerOf(machinieIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n            require(IHumach(humach).ownerOf(hamachIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent humach token\");\r\n            require(!staking[machinieIds_[_i]]  , \"Machinie : MachinieID is staking\");\r\n            require(!IHumach(humach).isStaking(hamachIds_[_i]) , \"Machinie : HumachID is staking\");\r\n            staking[machinieIds_[_i]] = true;\r\n            stakeTime[machinieIds_[_i]] = block.timestamp;\r\n            humachId[machinieIds_[_i]] = hamachIds_[_i];\r\n            IHumach(humach).updateStakStatus( hamachIds_[_i] , true);\r\n        }\r\n    }","contract":"Machinie","time":0},{"type":"external-function ","before":"function unStakeMachinie(uint256[] memory machinieIds_) external returns(uint256) {\r\n        uint256 _totalReward = 0;\r\n        for(uint8 _i=0; _i< machinieIds_.length; _i++){\r\n            require(ownerOf(machinieIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n            require(staking[machinieIds_[_i]] , \"Machinie : MachinieID is not staking\");\r\n            uint256 _reward = getStakeReward(machinieIds_[_i]);\r\n            _totalReward = _totalReward + _reward;\r\n            IHumach(humach).updateStakStatus(humachId[machinieIds_[_i]], false);\r\n            staking[machinieIds_[_i]] = false;\r\n            stakeTime[machinieIds_[_i]] = 0;\r\n            humachId[machinieIds_[_i]] = 0;\r\n        }\r\n        if(_totalReward > 0){\r\n            IFloppy(floppy).mint(_msgSender(), _totalReward);\r\n        }\r\n        return(_totalReward);\r\n    }","after":"function unStakeMachinie(uint256[] calldata machinieIds_) external returns(uint256) {\r\n        uint256 _totalReward = 0;\r\n        for(uint8 _i=0; _i< machinieIds_.length; _i++){\r\n            require(ownerOf(machinieIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n            require(staking[machinieIds_[_i]] , \"Machinie : MachinieID is not staking\");\r\n            uint256 _reward = getStakeReward(machinieIds_[_i]);\r\n            _totalReward = _totalReward + _reward;\r\n            IHumach(humach).updateStakStatus(humachId[machinieIds_[_i]], false);\r\n            staking[machinieIds_[_i]] = false;\r\n            stakeTime[machinieIds_[_i]] = 0;\r\n            humachId[machinieIds_[_i]] = 0;\r\n        }\r\n        if(_totalReward > 0){\r\n            IFloppy(floppy).mint(_msgSender(), _totalReward);\r\n        }\r\n        return(_totalReward);\r\n    }","contract":"Machinie","time":0},{"type":"external-function ","before":"function claimFloppy(uint256[] memory machinieIds_) external returns(uint256){\r\n        uint256 _totalReward = 0;\r\n        for(uint8 _i=0; _i< machinieIds_.length; _i++){\r\n            require(ownerOf(machinieIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n            require(staking[machinieIds_[_i]] , \"Machinie : MachinieID is not staking\");\r\n            uint256 _reward = getStakeReward(machinieIds_[_i]);\r\n            _totalReward = _totalReward + _reward;\r\n            stakeTime[machinieIds_[_i]] = block.timestamp;\r\n        }\r\n        if(_totalReward > 0){\r\n            IFloppy(floppy).mint(_msgSender(), _totalReward);\r\n        }\r\n        return(_totalReward);\r\n    }","after":"function claimFloppy(uint256[] calldata machinieIds_) external returns(uint256){\r\n        uint256 _totalReward = 0;\r\n        for(uint8 _i=0; _i< machinieIds_.length; _i++){\r\n            require(ownerOf(machinieIds_[_i]) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n            require(staking[machinieIds_[_i]] , \"Machinie : MachinieID is not staking\");\r\n            uint256 _reward = getStakeReward(machinieIds_[_i]);\r\n            _totalReward = _totalReward + _reward;\r\n            stakeTime[machinieIds_[_i]] = block.timestamp;\r\n        }\r\n        if(_totalReward > 0){\r\n            IFloppy(floppy).mint(_msgSender(), _totalReward);\r\n        }\r\n        return(_totalReward);\r\n    }","contract":"Machinie","time":0},{"type":"external-function ","before":"function updateTokenName (uint256 tokenId_ ,string memory name_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeNameFee, \"Machinie : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeNameFee, \"Machinie : allowance Floppy isnot enought\");\r\n        require(bytes(name_).length <= maximumNameLength, \"Machinie : Name length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeNameFee);\r\n        idName[tokenId_] = name_;\r\n        emit changeName(tokenId_ , name_, idDescription[tokenId_]);\r\n    }","after":"function updateTokenName (uint256 tokenId_ ,string calldata name_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeNameFee, \"Machinie : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeNameFee, \"Machinie : allowance Floppy isnot enought\");\r\n        require(bytes(name_).length <= maximumNameLength, \"Machinie : Name length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeNameFee);\r\n        idName[tokenId_] = name_;\r\n        emit changeName(tokenId_ , name_, idDescription[tokenId_]);\r\n    }","contract":"Machinie","time":0},{"type":"external-function ","before":"function updateTokenDescription (uint256 tokenId_  ,string memory description_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeDescFee, \"Machinie : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeDescFee, \"Machinie : allowance Floppy isnot enought\");\r\n        require(bytes(description_).length <= maximumDescLength, \"Machinie : Description length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeDescFee);\r\n        idDescription[tokenId_] = description_;\r\n        emit changeName(tokenId_ , idName[tokenId_], description_);\r\n    }","after":"function updateTokenDescription (uint256 tokenId_  ,string calldata description_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Machinie : owner query for nonexistent machinie token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeDescFee, \"Machinie : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeDescFee, \"Machinie : allowance Floppy isnot enought\");\r\n        require(bytes(description_).length <= maximumDescLength, \"Machinie : Description length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeDescFee);\r\n        idDescription[tokenId_] = description_;\r\n        emit changeName(tokenId_ , idName[tokenId_], description_);\r\n    }","contract":"Machinie","time":0},{"type":"external-function ","before":"function updateLevel(uint256 [] memory tokenId_, uint8 level_) external onlyAdmin{\r\n        for(uint _i =0; _i<tokenId_.length; _i++)\r\n        {\r\n            level[tokenId_[_i]] = level_;\r\n        }\r\n    }","after":"function updateLevel(uint256 [] calldata tokenId_, uint8 level_) external onlyAdmin{\r\n        for(uint _i =0; _i<tokenId_.length; _i++)\r\n        {\r\n            level[tokenId_[_i]] = level_;\r\n        }\r\n    }","contract":"Machinie","time":0},{"type":"external-function ","before":"function updateBaseURI(string memory baseURI_)external onlyAdmin{\r\n        uri = baseURI_;\r\n    }","after":"function updateBaseURI(string calldata baseURI_)external onlyAdmin{\r\n        uri = baseURI_;\r\n    }","contract":"Machinie","time":0},{"type":"constant-restrict-modification  ","before":"address private machinieLevel = 0xb96E968b177D0A31b7aaDf9B39093ea217EFEB23;","after":"address private constant machinieLevel = 0xb96E968b177D0A31b7aaDf9B39093ea217EFEB23;","contract":"Machinie","time":1}]}
{"time":188,"results":[{"type":"state-data-arrangement ","before":"\nuint16 private _tokenId;\naddress [] teamWalletList = [\r\n       0x0CC494215f952b7cD96378D803a0D3a6CAb282b0,         // Wallet 1 address\r\n       0x214Fe0B10F0b2C4ea182F25DDdA95130C250C3e1,         // Wallet 2 address\r\n       0xcC27e870C2ee553c60f51582433E80D1A4ed79da,         // Wallet 3 address\r\n       0x1418a130132379b99f6E3871bef9507389b2972C,         // Wallet 4 address\r\n       0x77fc746a68bFa56812b96f9686495efFF6F39364          // Wallet 5 address\r\n    ];\nmapping (address => uint8) teamWalletPercent;\nmapping (address => uint8) addressFreeMintCountMap;\nmapping (address => uint8) addressPreSaleCountMap;\nmapping (address => uint8) addressPublicSaleCountMap;\nuint16 public secretFreeMintLimit = 600;\nuint16 public normalFreeMintLimit = 400;\nuint16 public preSaleDiscountLimit = 2000;\nuint16 public preSaleNormalLimit = 1000;\nuint16 public totalLimit = 8888;\nuint8 public mintStep = 0;\nbytes32 private merkleRoot;\nuint public mintPriceDiscount = 0.048 ether;\nuint public mintPrice = 0.06 ether;\nstring private realBaseURI = \"https://gateway.pinata.cloud/ipfs/QmWvVa8sUuRuTYLHNXPUVH7CmoDvXx7Ura8gVQBBn3zXcQ/\";\nstring private placeholderBaseURI  = \"https://ratdao.mypinata.cloud/ipfs/QmabSngCR5cztRiSemNnjXcv9KPtWYuBZ1Rg4ciHKfV4GN/\";\nuint8 private LIMIT5 = 5;\nuint8 private LIMIT2 = 2;","after":"address [] teamWalletList = [\r\n       0x0CC494215f952b7cD96378D803a0D3a6CAb282b0,         // Wallet 1 address\r\n       0x214Fe0B10F0b2C4ea182F25DDdA95130C250C3e1,         // Wallet 2 address\r\n       0xcC27e870C2ee553c60f51582433E80D1A4ed79da,         // Wallet 3 address\r\n       0x1418a130132379b99f6E3871bef9507389b2972C,         // Wallet 4 address\r\n       0x77fc746a68bFa56812b96f9686495efFF6F39364          // Wallet 5 address\r\n    ];\nmapping (address => uint8) teamWalletPercent;\nmapping (address => uint8) addressFreeMintCountMap;\nmapping (address => uint8) addressPreSaleCountMap;\nmapping (address => uint8) addressPublicSaleCountMap;\nbytes32 private merkleRoot;\nuint public mintPriceDiscount = 0.048 ether;\nuint public mintPrice = 0.06 ether;\nstring private realBaseURI = \"https://gateway.pinata.cloud/ipfs/QmWvVa8sUuRuTYLHNXPUVH7CmoDvXx7Ura8gVQBBn3zXcQ/\";\nstring private placeholderBaseURI  = \"https://ratdao.mypinata.cloud/ipfs/QmabSngCR5cztRiSemNnjXcv9KPtWYuBZ1Rg4ciHKfV4GN/\";\nuint16 private _tokenId;\nuint16 public secretFreeMintLimit = 600;\nuint16 public normalFreeMintLimit = 400;\nuint16 public preSaleDiscountLimit = 2000;\nuint16 public preSaleNormalLimit = 1000;\nuint16 public totalLimit = 8888;\nuint8 public mintStep = 0;\nuint8 private LIMIT5 = 5;\nuint8 private LIMIT2 = 2;\n","contract":"ratDAO","time":1},{"type":"external-function ","before":"function mintFreeNormal(uint8 _mintCount, bytes32[] memory _proof) external nonReentrant returns (uint256) {\r\n        \r\n        require(mintStep == 0 && _mintCount > 0 && _mintCount <= LIMIT2);\r\n        require(msg.sender != address(0));\r\n        require(addressFreeMintCountMap[msg.sender] + _mintCount <= LIMIT2);\r\n        require(_mintCount <= normalFreeMintLimit);\r\n        require(verifyWhitelist(_leaf(msg.sender), _proof) == true);\r\n\r\n        for (uint8 i = 0; i < _mintCount; i++) {\r\n            _tokenId++;\r\n            _safeMint(msg.sender, _tokenId);\r\n        }\r\n\r\n        addressFreeMintCountMap[msg.sender] += _mintCount;\r\n        normalFreeMintLimit -= _mintCount;\r\n        totalLimit -= _mintCount;\r\n\r\n        emit Mint(msg.sender, \r\n                    mintStep, \r\n                    _tokenId,\r\n                    0,  // _mintPrice\r\n                    _mintCount,\r\n                    addressFreeMintCountMap[msg.sender],\r\n                    addressPreSaleCountMap[msg.sender],\r\n                    addressPublicSaleCountMap[msg.sender]);\r\n\r\n        return _tokenId;\r\n    }","after":"function mintFreeNormal(uint8 _mintCount, bytes32[] calldata _proof) external nonReentrant returns (uint256) {\r\n        \r\n        require(mintStep == 0 && _mintCount > 0 && _mintCount <= LIMIT2);\r\n        require(msg.sender != address(0));\r\n        require(addressFreeMintCountMap[msg.sender] + _mintCount <= LIMIT2);\r\n        require(_mintCount <= normalFreeMintLimit);\r\n        require(verifyWhitelist(_leaf(msg.sender), _proof) == true);\r\n\r\n        for (uint8 i = 0; i < _mintCount; i++) {\r\n            _tokenId++;\r\n            _safeMint(msg.sender, _tokenId);\r\n        }\r\n\r\n        addressFreeMintCountMap[msg.sender] += _mintCount;\r\n        normalFreeMintLimit -= _mintCount;\r\n        totalLimit -= _mintCount;\r\n\r\n        emit Mint(msg.sender, \r\n                    mintStep, \r\n                    _tokenId,\r\n                    0,  // _mintPrice\r\n                    _mintCount,\r\n                    addressFreeMintCountMap[msg.sender],\r\n                    addressPreSaleCountMap[msg.sender],\r\n                    addressPublicSaleCountMap[msg.sender]);\r\n\r\n        return _tokenId;\r\n    }","contract":"ratDAO","time":0},{"type":"external-function ","before":"function mintPresale(uint8 _mintCount, bytes32[] memory _proof) external payable nonReentrant returns (uint256) {\r\n        \r\n        require(_mintCount > 0 && _mintCount <= LIMIT2);\r\n        require(msg.sender != address(0));\r\n        require(addressPreSaleCountMap[msg.sender] + _mintCount <= LIMIT2);\r\n        require((       // Presale 1\r\n                    mintStep == 1 \r\n                    && (_mintCount <= preSaleDiscountLimit)\r\n                    && (msg.value == (mintPriceDiscount * _mintCount))\r\n                ) || (  // Presale 2\r\n                    mintStep == 2 \r\n                    && (_mintCount <= preSaleNormalLimit)\r\n                    && (msg.value == (mintPrice * _mintCount))\r\n                ));\r\n            \r\n        require(verifyWhitelist(_leaf(msg.sender), _proof) == true);\r\n\r\n        for (uint8 i = 0; i < _mintCount; i++) {\r\n            _tokenId++;\r\n            _safeMint(msg.sender, _tokenId);\r\n        }\r\n        \r\n        addressPreSaleCountMap[msg.sender] += _mintCount;\r\n        if (mintStep == 1) {\r\n            preSaleDiscountLimit -= _mintCount;\r\n        } else {\r\n            preSaleNormalLimit -= _mintCount;\r\n        }\r\n        totalLimit -= _mintCount;\r\n\r\n        emit Mint(msg.sender, \r\n                    mintStep, \r\n                    _tokenId,\r\n                    mintPrice,\r\n                    _mintCount,\r\n                    addressFreeMintCountMap[msg.sender],\r\n                    addressPreSaleCountMap[msg.sender],\r\n                    addressPublicSaleCountMap[msg.sender]);\r\n        \r\n        return _tokenId;\r\n    }","after":"function mintPresale(uint8 _mintCount, bytes32[] calldata _proof) external payable nonReentrant returns (uint256) {\r\n        \r\n        require(_mintCount > 0 && _mintCount <= LIMIT2);\r\n        require(msg.sender != address(0));\r\n        require(addressPreSaleCountMap[msg.sender] + _mintCount <= LIMIT2);\r\n        require((       // Presale 1\r\n                    mintStep == 1 \r\n                    && (_mintCount <= preSaleDiscountLimit)\r\n                    && (msg.value == (mintPriceDiscount * _mintCount))\r\n                ) || (  // Presale 2\r\n                    mintStep == 2 \r\n                    && (_mintCount <= preSaleNormalLimit)\r\n                    && (msg.value == (mintPrice * _mintCount))\r\n                ));\r\n            \r\n        require(verifyWhitelist(_leaf(msg.sender), _proof) == true);\r\n\r\n        for (uint8 i = 0; i < _mintCount; i++) {\r\n            _tokenId++;\r\n            _safeMint(msg.sender, _tokenId);\r\n        }\r\n        \r\n        addressPreSaleCountMap[msg.sender] += _mintCount;\r\n        if (mintStep == 1) {\r\n            preSaleDiscountLimit -= _mintCount;\r\n        } else {\r\n            preSaleNormalLimit -= _mintCount;\r\n        }\r\n        totalLimit -= _mintCount;\r\n\r\n        emit Mint(msg.sender, \r\n                    mintStep, \r\n                    _tokenId,\r\n                    mintPrice,\r\n                    _mintCount,\r\n                    addressFreeMintCountMap[msg.sender],\r\n                    addressPreSaleCountMap[msg.sender],\r\n                    addressPublicSaleCountMap[msg.sender]);\r\n        \r\n        return _tokenId;\r\n    }","contract":"ratDAO","time":0},{"type":"external-function ","before":"function setRealBaseURI(string memory _realBaseURI) external onlyOwner returns (string memory) {\r\n        realBaseURI = _realBaseURI;\r\n        return realBaseURI;\r\n    }","after":"function setRealBaseURI(string calldata _realBaseURI) external onlyOwner returns (string memory) {\r\n        realBaseURI = _realBaseURI;\r\n        return realBaseURI;\r\n    }","contract":"ratDAO","time":0},{"type":"external-function ","before":"function setPlaceholderBaseURI(string memory _placeholderBaseURI) external onlyOwner returns (string memory) {\r\n        placeholderBaseURI = _placeholderBaseURI;\r\n        return placeholderBaseURI;\r\n    }","after":"function setPlaceholderBaseURI(string calldata _placeholderBaseURI) external onlyOwner returns (string memory) {\r\n        placeholderBaseURI = _placeholderBaseURI;\r\n        return placeholderBaseURI;\r\n    }","contract":"ratDAO","time":0},{"type":"constant-restrict-modification  ","before":"uint public mintPriceDiscount = 0.048 ether;","after":"uint public constant mintPriceDiscount = 0.048 ether;","contract":"ratDAO","time":2},{"type":"constant-restrict-modification  ","before":"uint public mintPrice = 0.06 ether;","after":"uint public constant mintPrice = 0.06 ether;","contract":"ratDAO","time":2},{"type":"constant-restrict-modification  ","before":"uint8 private LIMIT5 = 5;","after":"uint8 private constant LIMIT5 = 5;","contract":"ratDAO","time":2},{"type":"constant-restrict-modification  ","before":"uint8 private LIMIT2 = 2;","after":"uint8 private constant LIMIT2 = 2;","contract":"ratDAO","time":2}]}
{"time":261,"results":[{"type":"external-function ","before":"function cancelOrder(Order memory order) external {\n        require(order.maker == msg.sender, \"LOP: Access denied\");\n\n        bytes32 orderHash = hashOrder(order);\n        uint256 orderRemaining = _remaining[orderHash];\n        require(orderRemaining != _ORDER_FILLED, \"LOP: already filled\");\n        emit OrderCanceled(msg.sender, orderHash, orderRemaining);\n        _remaining[orderHash] = _ORDER_FILLED;\n    }","after":"function cancelOrder(Order calldata order) external {\n        require(order.maker == msg.sender, \"LOP: Access denied\");\n\n        bytes32 orderHash = hashOrder(order);\n        uint256 orderRemaining = _remaining[orderHash];\n        require(orderRemaining != _ORDER_FILLED, \"LOP: already filled\");\n        emit OrderCanceled(msg.sender, orderHash, orderRemaining);\n        _remaining[orderHash] = _ORDER_FILLED;\n    }","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"function fillOrder(\n        Order memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, msg.sender);\n    }","after":"function fillOrder(\n        Order calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, msg.sender);\n    }","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"function fillOrderToWithPermit(\n        Order memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount,\n        address target,\n        bytes calldata permit\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        require(permit.length >= 20, \"LOP: permit length too low\");\n        (address token, bytes calldata permitData) = permit.decodeTargetAndData();\n        _permit(token, permitData);\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, target);\n    }","after":"function fillOrderToWithPermit(\n        Order calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        uint256 thresholdAmount,\n        address target,\n        bytes calldata permit\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\n        require(permit.length >= 20, \"LOP: permit length too low\");\n        (address token, bytes calldata permitData) = permit.decodeTargetAndData();\n        _permit(token, permitData);\n        return fillOrderTo(order, signature, makingAmount, takingAmount, thresholdAmount, target);\n    }","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"function fillOrderRFQ(\n        OrderRFQ memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount\n    ) external returns(uint256, uint256) {\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, msg.sender);\n    }","after":"function fillOrderRFQ(\n        OrderRFQ calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount\n    ) external returns(uint256, uint256) {\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, msg.sender);\n    }","contract":"LimitOrderProtocol","time":0},{"type":"external-function ","before":"function fillOrderRFQToWithPermit(\n        OrderRFQ memory order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        address target,\n        bytes calldata permit\n    ) external returns(uint256, uint256) {\n        _permit(address(order.takerAsset), permit);\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, target);\n    }","after":"function fillOrderRFQToWithPermit(\n        OrderRFQ calldata order,\n        bytes calldata signature,\n        uint256 makingAmount,\n        uint256 takingAmount,\n        address target,\n        bytes calldata permit\n    ) external returns(uint256, uint256) {\n        _permit(address(order.takerAsset), permit);\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, target);\n    }","contract":"LimitOrderProtocol","time":0}]}
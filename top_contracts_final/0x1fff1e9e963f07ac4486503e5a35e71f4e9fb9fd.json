{"time":211,"results":[{"type":"loop-duplication","before":"\nstart line 1346 column 8, end line 1348 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            require(ownerOf(tokenIds[i]) == staker, \"permission denied\");\n        }\nstart line 1350 column 8, end line 1357 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = staker;\n            tokenToStakeTime[tokenId] = block.timestamp;\n            stakerToTokens[staker].push(tokenId);\n            safeTransferFrom(staker, address(this), tokenId);\n            totalStaked += 1;\n        }","after":"// merge loop\n\nstart line 1346 column 8, end line 1348 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            require(ownerOf(tokenIds[i]) == staker, \"permission denied\");\n        }\nstart line 1350 column 8, end line 1357 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = staker;\n            tokenToStakeTime[tokenId] = block.timestamp;\n            stakerToTokens[staker].push(tokenId);\n            safeTransferFrom(staker, address(this), tokenId);\n            totalStaked += 1;\n        }","contract":"Etholvants","time":0},{"type":"loop-duplication","before":"\nstart line 1363 column 8, end line 1365 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            require(tokenToStaker[tokenIds[i]] == staker, \"permission denied\");\n        }\nstart line 1367 column 8, end line 1377 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = address(0);\n            tokenToNumCells[tokenId] +=\n                ((block.timestamp - tokenToStakeTime[tokenId]) / 14400) *\n                (BASE_GROWTH_RATE + tokenToGrowthBoost[tokenId]);\n            tokenToStakeTime[tokenId] = 0;\n            _removeFromStakedList(staker, tokenId);\n            _transfer(address(this), staker, tokenId);\n            totalStaked -= 1;\n        }","after":"// merge loop\n\nstart line 1363 column 8, end line 1365 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            require(tokenToStaker[tokenIds[i]] == staker, \"permission denied\");\n        }\nstart line 1367 column 8, end line 1377 column 8\nfor (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = address(0);\n            tokenToNumCells[tokenId] +=\n                ((block.timestamp - tokenToStakeTime[tokenId]) / 14400) *\n                (BASE_GROWTH_RATE + tokenToGrowthBoost[tokenId]);\n            tokenToStakeTime[tokenId] = 0;\n            _removeFromStakedList(staker, tokenId);\n            _transfer(address(this), staker, tokenId);\n            totalStaked -= 1;\n        }","contract":"Etholvants","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseUri) external onlyOwner {\n        _baseUriStr = baseUri;\n    }","after":"function setBaseURI(string calldata baseUri) external onlyOwner {\n        _baseUriStr = baseUri;\n    }","contract":"Etholvants","time":0},{"type":"external-function ","before":"function stake(uint256[] memory tokenIds) external {\n        address staker = msg.sender;\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(ownerOf(tokenIds[i]) == staker, \"permission denied\");\n        }\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = staker;\n            tokenToStakeTime[tokenId] = block.timestamp;\n            stakerToTokens[staker].push(tokenId);\n            safeTransferFrom(staker, address(this), tokenId);\n            totalStaked += 1;\n        }\n    }","after":"function stake(uint256[] calldata tokenIds) external {\n        address staker = msg.sender;\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(ownerOf(tokenIds[i]) == staker, \"permission denied\");\n        }\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = staker;\n            tokenToStakeTime[tokenId] = block.timestamp;\n            stakerToTokens[staker].push(tokenId);\n            safeTransferFrom(staker, address(this), tokenId);\n            totalStaked += 1;\n        }\n    }","contract":"Etholvants","time":0},{"type":"external-function ","before":"function unstake(uint256[] memory tokenIds) external payable {\n        require(msg.value == 0.01 ether, \"unstaking fee is 0.01 ETH\");\n        address staker = msg.sender;\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(tokenToStaker[tokenIds[i]] == staker, \"permission denied\");\n        }\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = address(0);\n            tokenToNumCells[tokenId] +=\n                ((block.timestamp - tokenToStakeTime[tokenId]) / 14400) *\n                (BASE_GROWTH_RATE + tokenToGrowthBoost[tokenId]);\n            tokenToStakeTime[tokenId] = 0;\n            _removeFromStakedList(staker, tokenId);\n            _transfer(address(this), staker, tokenId);\n            totalStaked -= 1;\n        }\n    }","after":"function unstake(uint256[] calldata tokenIds) external payable {\n        require(msg.value == 0.01 ether, \"unstaking fee is 0.01 ETH\");\n        address staker = msg.sender;\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(tokenToStaker[tokenIds[i]] == staker, \"permission denied\");\n        }\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            tokenToStaker[tokenId] = address(0);\n            tokenToNumCells[tokenId] +=\n                ((block.timestamp - tokenToStakeTime[tokenId]) / 14400) *\n                (BASE_GROWTH_RATE + tokenToGrowthBoost[tokenId]);\n            tokenToStakeTime[tokenId] = 0;\n            _removeFromStakedList(staker, tokenId);\n            _transfer(address(this), staker, tokenId);\n            totalStaked -= 1;\n        }\n    }","contract":"Etholvants","time":0},{"type":"external-function ","before":"function combine(uint256[] memory tokenIds) external {\n        require(tokenIds.length > 1, \"you should provide more than 1 token\");\n        uint256 numCells = 0;\n        uint maxGrowthBoost = 0;\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(ownerOf(tokenIds[i]) == msg.sender, \"permission denied\");\n            numCells += tokenToNumCells[tokenIds[i]];\n            _burn(tokenIds[i]);\n            burnedWithCombine += 1;\n            if (tokenToGrowthBoost[tokenIds[i]] > maxGrowthBoost) {\n                maxGrowthBoost = tokenToGrowthBoost[tokenIds[i]];\n            }\n        }\n        bytes32 seed = keccak256(\n            abi.encodePacked(tokenToSeed[tokenIds[0]], tokenToSeed[tokenIds[1]])\n        );\n        for (uint256 i = 2; i < tokenIds.length; i++) {\n            seed = keccak256(abi.encodePacked(seed, tokenToSeed[tokenIds[i]]));\n        }\n        uint256 tokenId = nextId;\n        tokenToNumCells[tokenId] = numCells;\n        tokenToSeed[tokenId] = seed;\n        tokenToGrowthBoost[tokenId] = maxGrowthBoost;\n        _safeMint(msg.sender, tokenId);\n        nextId += 1;\n    }","after":"function combine(uint256[] calldata tokenIds) external {\n        require(tokenIds.length > 1, \"you should provide more than 1 token\");\n        uint256 numCells = 0;\n        uint maxGrowthBoost = 0;\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(ownerOf(tokenIds[i]) == msg.sender, \"permission denied\");\n            numCells += tokenToNumCells[tokenIds[i]];\n            _burn(tokenIds[i]);\n            burnedWithCombine += 1;\n            if (tokenToGrowthBoost[tokenIds[i]] > maxGrowthBoost) {\n                maxGrowthBoost = tokenToGrowthBoost[tokenIds[i]];\n            }\n        }\n        bytes32 seed = keccak256(\n            abi.encodePacked(tokenToSeed[tokenIds[0]], tokenToSeed[tokenIds[1]])\n        );\n        for (uint256 i = 2; i < tokenIds.length; i++) {\n            seed = keccak256(abi.encodePacked(seed, tokenToSeed[tokenIds[i]]));\n        }\n        uint256 tokenId = nextId;\n        tokenToNumCells[tokenId] = numCells;\n        tokenToSeed[tokenId] = seed;\n        tokenToGrowthBoost[tokenId] = maxGrowthBoost;\n        _safeMint(msg.sender, tokenId);\n        nextId += 1;\n    }","contract":"Etholvants","time":0}]}
{"time":142,"results":[{"type":"external-function ","before":"function dropHoney(address[] memory accounts, uint256[] memory amounts) public onlyOwner {\n        if (accounts.length != amounts.length) revert MismatchedArraySizes();\n        if (_honeyFrozen) revert HoneyDropFrozen();\n        \n        uint256 additionalSupply = 0;\n        for (uint256 index = 0; index < accounts.length; index++) {\n            uint256 amount = amounts[index];\n            _mint(accounts[index], 0, amount, \"\");\n            additionalSupply += amount;\n        }\n        _totalSupply += additionalSupply;\n    }","after":"function dropHoney(address[] calldata accounts, uint256[] calldata amounts) public onlyOwner {\n        if (accounts.length != amounts.length) revert MismatchedArraySizes();\n        if (_honeyFrozen) revert HoneyDropFrozen();\n        \n        uint256 additionalSupply = 0;\n        for (uint256 index = 0; index < accounts.length; index++) {\n            uint256 amount = amounts[index];\n            _mint(accounts[index], 0, amount, \"\");\n            additionalSupply += amount;\n        }\n        _totalSupply += additionalSupply;\n    }","contract":"TwoBitHoney","time":0},{"type":"external-function ","before":"function updateBaseUri(string memory newuri) external onlyOwner {\n        if (_honeyFrozen) revert HoneyDropFrozen();\n        _setURI(newuri);\n        emit SetBaseURI(newuri);\n    }","after":"function updateBaseUri(string calldata newuri) external onlyOwner {\n        if (_honeyFrozen) revert HoneyDropFrozen();\n        _setURI(newuri);\n        emit SetBaseURI(newuri);\n    }","contract":"TwoBitHoney","time":1},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"TwoBitHoney","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"TwoBitHoney","time":0}]}
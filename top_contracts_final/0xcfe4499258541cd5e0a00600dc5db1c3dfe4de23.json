{"time":143,"results":[{"type":"external-function ","before":"function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) public onlyOwner {\n        _setURI(newuri);\n    }","contract":"ExplodingHeads","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        EXPLODINGHEAD_PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        EXPLODINGHEAD_PROVENANCE = provenanceHash;\n    }","contract":"ExplodingHeads","time":0},{"type":"external-function ","before":"function changeLicense(string memory _license) public onlyOwner {\n        require(licenseLocked == false, \"Alrdy lckd\");\n        LICENSE_TEXT = _license;\n    }","after":"function changeLicense(string calldata _license) public onlyOwner {\n        require(licenseLocked == false, \"Alrdy lckd\");\n        LICENSE_TEXT = _license;\n    }","contract":"ExplodingHeads","time":0},{"type":"external-function ","before":"function changeExplodingHeadName(uint _tokenId, string memory _name) public payable {\n        require(balanceOf(msg.sender, _tokenId) == 1, \"Prmsns Err\");\n        require(sha256(bytes('Alien')) != sha256(bytes(explodingHeadNames[_tokenId])), \"Already an alien\");\n        //require(sha256(bytes(_name)) != sha256(bytes(explodingHeadNames[_tokenId])), \"Not new\");\n        require(msg.value == explodingHeadRenamePrice, \"Chk prce\");\n        explodingHeadNames[_tokenId] = _name;\n        \n        emit explodingHeadNameChange(msg.sender, _tokenId, _name);\n    }","after":"function changeExplodingHeadName(uint _tokenId, string calldata _name) public payable {\n        require(balanceOf(msg.sender, _tokenId) == 1, \"Prmsns Err\");\n        require(sha256(bytes('Alien')) != sha256(bytes(explodingHeadNames[_tokenId])), \"Already an alien\");\n        //require(sha256(bytes(_name)) != sha256(bytes(explodingHeadNames[_tokenId])), \"Not new\");\n        require(msg.value == explodingHeadRenamePrice, \"Chk prce\");\n        explodingHeadNames[_tokenId] = _name;\n        \n        emit explodingHeadNameChange(msg.sender, _tokenId, _name);\n    }","contract":"ExplodingHeads","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"ExplodingHeads","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"ExplodingHeads","time":0},{"type":"constant-restrict-modification  ","before":"address proxyRegistryAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;","after":"address constant proxyRegistryAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;","contract":"ExplodingHeads","time":0}]}
{"time":168,"results":[{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) public onlyOwner {\n        _baseTokenURI = _uri;\n    }","after":"function setBaseTokenURI(string calldata _uri) public onlyOwner {\n        _baseTokenURI = _uri;\n    }","contract":"DizzyDemons","time":0},{"type":"external-function ","before":"function setContractURI(string memory _uri) public onlyOwner {\n        _contractURI = _uri;\n    }","after":"function setContractURI(string calldata _uri) public onlyOwner {\n        _contractURI = _uri;\n    }","contract":"DizzyDemons","time":0},{"type":"external-function ","before":"function claimNDemons(uint256[] memory tokenIds) public {\n        require(tokenIds.length <= 20, \"Can't claim more than 20 Demons at once.\");\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(tokenIds[i] > 7500, \"This token is not fused.\");\n            require(dragons.ownerOf(tokenIds[i]) == msg.sender, \"You do not own this token.\");\n            require(!isClaimed(tokenIds[i]), \"Demon has already been claimed for this token.\");\n            claimlist[tokenIds[i]].tokenId = tokenIds[i];\n            claimlist[tokenIds[i]].claimed = true;\n            mintTo(msg.sender);\n        }\n    }","after":"function claimNDemons(uint256[] calldata tokenIds) public {\n        require(tokenIds.length <= 20, \"Can't claim more than 20 Demons at once.\");\n        for (uint i = 0; i < tokenIds.length; i++) {\n            require(tokenIds[i] > 7500, \"This token is not fused.\");\n            require(dragons.ownerOf(tokenIds[i]) == msg.sender, \"You do not own this token.\");\n            require(!isClaimed(tokenIds[i]), \"Demon has already been claimed for this token.\");\n            claimlist[tokenIds[i]].tokenId = tokenIds[i];\n            claimlist[tokenIds[i]].claimed = true;\n            mintTo(msg.sender);\n        }\n    }","contract":"DizzyDemons","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"DizzyDemons","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"DizzyDemons","time":1}]}
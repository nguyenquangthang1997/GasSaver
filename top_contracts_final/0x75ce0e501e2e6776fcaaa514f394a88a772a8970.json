{"time":273,"results":[{"type":"external-function ","before":"function updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\n\t\trequire(msg.sender == address(this), \"Can only be called from the contract itself\");\n\t\tinvocations += 1;\n\t\tmethodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\n\t\tcalldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\n\t}","after":"function updateInvocationCount(bytes4 methodId, bytes calldata originalMsgData) public {\n\t\trequire(msg.sender == address(this), \"Can only be called from the contract itself\");\n\t\tinvocations += 1;\n\t\tmethodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\n\t\tcalldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\n\t}","contract":"MockContract","time":0},{"type":"external-function ","before":"function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }","after":"function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes calldata data) public payable onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }","contract":"ProxyAdmin","time":0}]}
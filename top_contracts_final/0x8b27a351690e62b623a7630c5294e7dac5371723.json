{"time":170,"results":[{"type":"external-function ","before":"function claimDemiGods(uint256 _numberOfDemiGods, uint256 _maxMintAmount, bytes memory _signature) external payable nonReentrant{\n        require(\n            (currentState == ContractState.PRESALE_ONE ||\n            currentState == ContractState.PRESALE_TWO), \"The whitelist is not active yet. Stay tuned.\");\n        require(_numberOfDemiGods > 0, \"You cannot mint 0 Demi Gods.\");\n        require(SafeMath.add(_numMinted.current(), _numberOfDemiGods) <= maxTotalMint, \"The entire presale has been sold. Check back for public mint.\");\n        require(getNFTPrice(_numberOfDemiGods) <= msg.value, \"Amount of Ether sent is not correct.\");\n        require(_verify(msg.sender, _maxMintAmount, _signature), \"This signature is not verified. You are not on the whitelist.\");\n        require(SafeMath.add(addressMinted[msg.sender], _numberOfDemiGods) <= _maxMintAmount, \"This amount exceeds the quantity you are allowed to mint during presale.\");\n        \n        for(uint i = 0; i < _numberOfDemiGods; i++){\n            uint256 tokenIndex = _tokenIdCounter.current();\n            _numMinted.increment();\n            _tokenIdCounter.increment();\n            addressMinted[msg.sender]++;\n            _safeMint(msg.sender, tokenIndex);   \n        }\n    }","after":"function claimDemiGods(uint256 _numberOfDemiGods, uint256 _maxMintAmount, bytes calldata _signature) external payable nonReentrant{\n        require(\n            (currentState == ContractState.PRESALE_ONE ||\n            currentState == ContractState.PRESALE_TWO), \"The whitelist is not active yet. Stay tuned.\");\n        require(_numberOfDemiGods > 0, \"You cannot mint 0 Demi Gods.\");\n        require(SafeMath.add(_numMinted.current(), _numberOfDemiGods) <= maxTotalMint, \"The entire presale has been sold. Check back for public mint.\");\n        require(getNFTPrice(_numberOfDemiGods) <= msg.value, \"Amount of Ether sent is not correct.\");\n        require(_verify(msg.sender, _maxMintAmount, _signature), \"This signature is not verified. You are not on the whitelist.\");\n        require(SafeMath.add(addressMinted[msg.sender], _numberOfDemiGods) <= _maxMintAmount, \"This amount exceeds the quantity you are allowed to mint during presale.\");\n        \n        for(uint i = 0; i < _numberOfDemiGods; i++){\n            uint256 tokenIndex = _tokenIdCounter.current();\n            _numMinted.increment();\n            _tokenIdCounter.increment();\n            addressMinted[msg.sender]++;\n            _safeMint(msg.sender, tokenIndex);   \n        }\n    }","contract":"DemiGodsUniverse","time":0},{"type":"external-function ","before":"function setBaseURI(string memory uri) external onlyOwner {\n        baseURI = uri;\n    }","after":"function setBaseURI(string calldata uri) external onlyOwner {\n        baseURI = uri;\n    }","contract":"DemiGodsUniverse","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_PER_TRANSACTION = 10;","after":"uint256 public constant MAX_PER_TRANSACTION = 10;","contract":"DemiGodsUniverse","time":0}]}
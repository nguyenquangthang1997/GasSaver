{"time":260,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant MAX_SUPPLY = 4608;\nuint256 public constant RESERVE_PRICE = 3 * (10 ** 18);\nuint256 public constant STEEP_CURVE_PERIOD = 86400;\nuint256 public constant GENERAL_CURVE_PERIOD = 7 * 86400;\nuint256 public constant NAME_CHANGE_PRICE = 100000 * (10 ** 18);\nuint16[18] public DEVMINT_METADATA_INDICES = \n        [5, 618, 814, 2291, 2342, 2410, 3140, 4035, 4372, 4499, 1818, 111, 1274, 2331, 2885, 3369, 4268, 4589];\nstring public constant ARTIST_ATTESTATION_METADATA = \"ipfs://QmVeJyaLh44i2VsePHbwHaQT89SetXGKstZrjx38sjKGhL\";\nstring public imageIPFSURIPrefix = \"ipfs://QmWWMp4Srk6CC9nuGw7fJz6BfxNw7xT7QBHTtxFVRjQTzU/\";\nstring public imageArweaveURIPrefix = \"ar://placeholder/\";\nstring public galleryIPFSURIPrefix = \"ipfs://QmRv3YCXRYx3v36btcKGnuAXKFqjiWQPW7bGUHWKb9GWGv/\";\nstring public physicalSpecificationsIPFSURIPrefix = \"ipfs://QmNSsUw8Z3H5z2FroCwVVZ32vye9RF3QJKejiFLEnn4pik/\";\nmapping(uint256 => bool) public metadataAssigned;\nmapping(uint256 => uint256) public tokenIdToMetadataIndex;\nuint256 public immutable STEEP_CURVE_STARTING_PRICE;\nuint256 public immutable GENERAL_CURVE_STARTING_PRICE;\nuint256 public immutable HASHMASKS_DISCOUNT;\naddress public immutable HASHMASKS_ADDRESS;\nuint256 public SALE_START;\nbool public salePaused = false;\nuint256 public FINAL_SETTLEMENT_PRICE = 0;\nuint256 public SETTLEMENT_PRICE_SET_TIMESTAMP = 0;\nmapping(address => uint256) public addressToBidExcludingDiscount;\nmapping(bytes32 => uint256) public requestIdToFirstMintIdInBatch;\nbytes32 internal keyHash;\nuint256 internal fee;\nuint256[MAX_SUPPLY] internal indices;\nuint256 internal indicesAssigned = 0;\naddress public immutable NCT_ADDRESS;\nmapping(uint256 => string) public tokenName;\nmapping(string => bool) private nameReserved;\nuint256[7] public eraStartIndices = [0, 6, 814, 1847, 2540, 3518, 4372];\nstring[7] public eraNames = [\"High Renaissance\", \"Post-Impressionism\", \"Surrealism\", \"Cubism\", \"Pop Art\", \"Factory Art\", \"Beltracchi\"];\nuint256[33] public subEraStartIndices = [\n        0, 1,\n        6, 270, 440, 610,\n        814,\n        1847, 2291, 2321, 2342, 2362, 2410, 2539,\n        2540, 2790, 3040, 3140, 3240,\n        3518, 3668, 3828, 3956, 4212,\n        4372, 4410, 4481, 4510, 4537, 4574, 4581, 4594, 4605\n    ];\nstring[33] public subEraNames = [\n        \"Rebirth\", \"Umbra\",\n        \"Starry\", \"Wheatfield\", \"Olive Trees\", \"The Room\",\n        \"The Gambit of Salvator Mundi in the Desert Ocean\",\n        \"Synthetic Vantage\", \"Synthetic Limited\", \"Mephisto Voodoo\", \"Mephisto Plague\", \"Mephisto Nimbus\", \"Analytical\", \"Foundation\",\n        \"Nubian\", \"Light\", \"Moon\", \"Vietnam\", \"Far East\",\n        \"The Guru\", \"Unicolor\", \"Duality\", \"Solitude\", \"Angelic\",\n        \"Storming of Jerusalem\", \"The Witches\", \"Sieben Schalen der Apokalypse\", \"Feathers\", \"Comet\", \"Gold\", \"Angel's Hymn\", \"Fallen Angels\", \"Crimson Angel\"\n    ];","after":"uint256 public constant MAX_SUPPLY = 4608;\nuint256 public constant RESERVE_PRICE = 3 * (10 ** 18);\nuint256 public constant STEEP_CURVE_PERIOD = 86400;\nuint256 public constant GENERAL_CURVE_PERIOD = 7 * 86400;\nuint256 public constant NAME_CHANGE_PRICE = 100000 * (10 ** 18);\nuint16[18] public DEVMINT_METADATA_INDICES = \n        [5, 618, 814, 2291, 2342, 2410, 3140, 4035, 4372, 4499, 1818, 111, 1274, 2331, 2885, 3369, 4268, 4589];\nstring public constant ARTIST_ATTESTATION_METADATA = \"ipfs://QmVeJyaLh44i2VsePHbwHaQT89SetXGKstZrjx38sjKGhL\";\nstring public imageIPFSURIPrefix = \"ipfs://QmWWMp4Srk6CC9nuGw7fJz6BfxNw7xT7QBHTtxFVRjQTzU/\";\nstring public imageArweaveURIPrefix = \"ar://placeholder/\";\nstring public galleryIPFSURIPrefix = \"ipfs://QmRv3YCXRYx3v36btcKGnuAXKFqjiWQPW7bGUHWKb9GWGv/\";\nstring public physicalSpecificationsIPFSURIPrefix = \"ipfs://QmNSsUw8Z3H5z2FroCwVVZ32vye9RF3QJKejiFLEnn4pik/\";\nmapping(uint256 => bool) public metadataAssigned;\nmapping(uint256 => uint256) public tokenIdToMetadataIndex;\nuint256 public immutable STEEP_CURVE_STARTING_PRICE;\nuint256 public immutable GENERAL_CURVE_STARTING_PRICE;\nuint256 public immutable HASHMASKS_DISCOUNT;\nuint256 public SALE_START;\nuint256 public FINAL_SETTLEMENT_PRICE = 0;\nuint256 public SETTLEMENT_PRICE_SET_TIMESTAMP = 0;\nmapping(address => uint256) public addressToBidExcludingDiscount;\nmapping(bytes32 => uint256) public requestIdToFirstMintIdInBatch;\nbytes32 internal keyHash;\nuint256 internal fee;\nuint256[MAX_SUPPLY] internal indices;\nuint256 internal indicesAssigned = 0;\nmapping(uint256 => string) public tokenName;\nmapping(string => bool) private nameReserved;\nuint256[7] public eraStartIndices = [0, 6, 814, 1847, 2540, 3518, 4372];\nstring[7] public eraNames = [\"High Renaissance\", \"Post-Impressionism\", \"Surrealism\", \"Cubism\", \"Pop Art\", \"Factory Art\", \"Beltracchi\"];\nuint256[33] public subEraStartIndices = [\n        0, 1,\n        6, 270, 440, 610,\n        814,\n        1847, 2291, 2321, 2342, 2362, 2410, 2539,\n        2540, 2790, 3040, 3140, 3240,\n        3518, 3668, 3828, 3956, 4212,\n        4372, 4410, 4481, 4510, 4537, 4574, 4581, 4594, 4605\n    ];\nstring[33] public subEraNames = [\n        \"Rebirth\", \"Umbra\",\n        \"Starry\", \"Wheatfield\", \"Olive Trees\", \"The Room\",\n        \"The Gambit of Salvator Mundi in the Desert Ocean\",\n        \"Synthetic Vantage\", \"Synthetic Limited\", \"Mephisto Voodoo\", \"Mephisto Plague\", \"Mephisto Nimbus\", \"Analytical\", \"Foundation\",\n        \"Nubian\", \"Light\", \"Moon\", \"Vietnam\", \"Far East\",\n        \"The Guru\", \"Unicolor\", \"Duality\", \"Solitude\", \"Angelic\",\n        \"Storming of Jerusalem\", \"The Witches\", \"Sieben Schalen der Apokalypse\", \"Feathers\", \"Comet\", \"Gold\", \"Angel's Hymn\", \"Fallen Angels\", \"Crimson Angel\"\n    ];\naddress public immutable HASHMASKS_ADDRESS;\naddress public immutable NCT_ADDRESS;\nbool public salePaused = false;\n","contract":"Canary","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory name) external nonReentrant {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(NameUtils.validateName(name) == true, \"Not a valid new name\");\n        require(bytes(tokenName[tokenId]).length == 0, \"Token ID is already named\");\n        require(isNameReserved(name) == false, \"Name is already reserved\");\n\n        IERC20(NCT_ADDRESS).transferFrom(msg.sender, address(this), NAME_CHANGE_PRICE);\n        tokenName[tokenId] = name;\n        nameReserved[NameUtils.toLower(name)] = true;\n        IERC20(NCT_ADDRESS).burn(NAME_CHANGE_PRICE);\n        emit NameChange(tokenId, name);\n    }","after":"function changeName(uint256 tokenId, string calldata name) external nonReentrant {\n        address owner = ownerOf(tokenId);\n\n        require(_msgSender() == owner, \"ERC721: caller is not the owner\");\n        require(NameUtils.validateName(name) == true, \"Not a valid new name\");\n        require(bytes(tokenName[tokenId]).length == 0, \"Token ID is already named\");\n        require(isNameReserved(name) == false, \"Name is already reserved\");\n\n        IERC20(NCT_ADDRESS).transferFrom(msg.sender, address(this), NAME_CHANGE_PRICE);\n        tokenName[tokenId] = name;\n        nameReserved[NameUtils.toLower(name)] = true;\n        IERC20(NCT_ADDRESS).burn(NAME_CHANGE_PRICE);\n        emit NameChange(tokenId, name);\n    }","contract":"Canary","time":0},{"type":"external-function ","before":"function refundDifferenceToBidders(address[] memory bidderAddresses) external nonReentrant {\n        require(FINAL_SETTLEMENT_PRICE > 0, \"Settlement price not set\");\n\n        for (uint256 i = 0; i < bidderAddresses.length; i++) {\n            uint256 bidAmountExcludingDiscount = addressToBidExcludingDiscount[bidderAddresses[i]];\n\n            if (bidAmountExcludingDiscount != 0) {\n                addressToBidExcludingDiscount[bidderAddresses[i]] = 0;\n                payable(bidderAddresses[i]).transfer(\n                    bidAmountExcludingDiscount - FINAL_SETTLEMENT_PRICE\n                );\n            }\n        }\n    }","after":"function refundDifferenceToBidders(address[] calldata bidderAddresses) external nonReentrant {\n        require(FINAL_SETTLEMENT_PRICE > 0, \"Settlement price not set\");\n\n        for (uint256 i = 0; i < bidderAddresses.length; i++) {\n            uint256 bidAmountExcludingDiscount = addressToBidExcludingDiscount[bidderAddresses[i]];\n\n            if (bidAmountExcludingDiscount != 0) {\n                addressToBidExcludingDiscount[bidderAddresses[i]] = 0;\n                payable(bidderAddresses[i]).transfer(\n                    bidAmountExcludingDiscount - FINAL_SETTLEMENT_PRICE\n                );\n            }\n        }\n    }","contract":"Canary","time":0},{"type":"external-function ","before":"function changeURIs(\n        string memory imageURI,\n        string memory imageArweaveURI,\n        string memory galleryURI,\n        string memory physicalSpecsURI\n    ) external onlyOwner {\n        imageIPFSURIPrefix = imageURI;\n        imageArweaveURIPrefix = imageArweaveURI;\n        galleryIPFSURIPrefix = galleryURI;\n        physicalSpecificationsIPFSURIPrefix = physicalSpecsURI;\n    }","after":"function changeURIs(\n        string calldata imageURI,\n        string calldata imageArweaveURI,\n        string calldata galleryURI,\n        string calldata physicalSpecsURI\n    ) external onlyOwner {\n        imageIPFSURIPrefix = imageURI;\n        imageArweaveURIPrefix = imageArweaveURI;\n        galleryIPFSURIPrefix = galleryURI;\n        physicalSpecificationsIPFSURIPrefix = physicalSpecsURI;\n    }","contract":"Canary","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"Canary","time":1},{"type":"immutable-restrict-modification ","before":"uint256 internal fee;","after":"uint256 internal immutable fee;","contract":"Canary","time":1},{"type":"de-morgan-condition ","before":"!(char >= 0x30 && char <= 0x39) && //9-0\n                !(char >= 0x41 && char <= 0x5A)","after":"!((char >= 0x30 && char <= 0x39) && //9-0\n                (char >= 0x41 && char <= 0x5A))","loc":{"start":{"line":699,"column":16},"end":{"line":700,"column":46}},"contract":"NameUtils","time":0}]}
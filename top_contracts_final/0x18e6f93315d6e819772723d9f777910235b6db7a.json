{"time":66,"results":[{"type":"external-function ","before":"function deposit(uint256[] memory tokenIds) public nonReentrant whenNotPaused {\n      require(tokenIds.length > 0, \"Empty array\");\n      Staker storage user = _stakers[_msgSender()];\n\n      if (user.stakedVault.length == 0) {\n        uint256 currentLoomiPot = _getLoomiPot();\n        user.loomiPotSnapshot = currentLoomiPot;\n      } \n      accumulate(_msgSender());\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(loomiVault.ownerOf(tokenIds[i]) == _msgSender(), \"Not the owner\");\n        loomiVault.safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\n\n        _ownerOfToken[tokenIds[i]] = _msgSender();\n\n        user.stakedVault.push(tokenIds[i]);\n      }\n\n      emit Deposit(_msgSender(), tokenIds.length);\n    }","after":"function deposit(uint256[] calldata tokenIds) public nonReentrant whenNotPaused {\n      require(tokenIds.length > 0, \"Empty array\");\n      Staker storage user = _stakers[_msgSender()];\n\n      if (user.stakedVault.length == 0) {\n        uint256 currentLoomiPot = _getLoomiPot();\n        user.loomiPotSnapshot = currentLoomiPot;\n      } \n      accumulate(_msgSender());\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(loomiVault.ownerOf(tokenIds[i]) == _msgSender(), \"Not the owner\");\n        loomiVault.safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\n\n        _ownerOfToken[tokenIds[i]] = _msgSender();\n\n        user.stakedVault.push(tokenIds[i]);\n      }\n\n      emit Deposit(_msgSender(), tokenIds.length);\n    }","contract":"LordsAndCo","time":0},{"type":"external-function ","before":"function withdraw(uint256[] memory tokenIds) public nonReentrant whenNotPaused {\n      require(tokenIds.length > 0, \"Empty array\");\n\n      Staker storage user = _stakers[_msgSender()];\n      accumulate(_msgSender());\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(loomiVault.ownerOf(tokenIds[i]) == address(this), \"Not the owner\");\n\n        _ownerOfToken[tokenIds[i]] = address(0);\n        user.stakedVault = _moveTokenInTheList(user.stakedVault, tokenIds[i]);\n        user.stakedVault.pop();\n\n        loomiVault.safeTransferFrom(address(this), _msgSender(), tokenIds[i]);\n      }\n\n      emit Withdraw(_msgSender(), tokenIds.length);\n    }","after":"function withdraw(uint256[] calldata tokenIds) public nonReentrant whenNotPaused {\n      require(tokenIds.length > 0, \"Empty array\");\n\n      Staker storage user = _stakers[_msgSender()];\n      accumulate(_msgSender());\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(loomiVault.ownerOf(tokenIds[i]) == address(this), \"Not the owner\");\n\n        _ownerOfToken[tokenIds[i]] = address(0);\n        user.stakedVault = _moveTokenInTheList(user.stakedVault, tokenIds[i]);\n        user.stakedVault.pop();\n\n        loomiVault.safeTransferFrom(address(this), _msgSender(), tokenIds[i]);\n      }\n\n      emit Withdraw(_msgSender(), tokenIds.length);\n    }","contract":"LordsAndCo","time":0},{"type":"external-function ","before":"function emergencyWithdraw(address tokenAddress, uint256[] memory tokenIds) public onlyOwner {\n      require(tokenIds.length <= 50, \"50 is max per tx\");\n      for (uint256 i; i < tokenIds.length; i++) {\n        address receiver = _ownerOfToken[tokenIds[i]];\n        if (receiver != address(0) && IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)) {\n          IERC721(tokenAddress).transferFrom(address(this), receiver, tokenIds[i]);\n          emit WithdrawStuckERC721(receiver, tokenAddress, tokenIds[i]);\n        }\n      }\n    }","after":"function emergencyWithdraw(address tokenAddress, uint256[] calldata tokenIds) public onlyOwner {\n      require(tokenIds.length <= 50, \"50 is max per tx\");\n      for (uint256 i; i < tokenIds.length; i++) {\n        address receiver = _ownerOfToken[tokenIds[i]];\n        if (receiver != address(0) && IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)) {\n          IERC721(tokenAddress).transferFrom(address(this), receiver, tokenIds[i]);\n          emit WithdrawStuckERC721(receiver, tokenAddress, tokenIds[i]);\n        }\n      }\n    }","contract":"LordsAndCo","time":0}]}
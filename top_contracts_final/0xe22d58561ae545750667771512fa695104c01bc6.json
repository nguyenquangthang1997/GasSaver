{"time":109,"results":[{"type":"external-function ","before":"function addWhiteList(address[] memory whitelist) public onlyOwner {\n\n        require(whitelist.length == 40, \"Fantasy3K: incorrect whiteList length\");\n\n        for (uint64 i; i < whitelist.length; i++){\n               whiteList[whitelist[i]] = true;\n        }\n    \n        emit AddWhiteList(whitelist);\n    }","after":"function addWhiteList(address[] calldata whitelist) public onlyOwner {\n\n        require(whitelist.length == 40, \"Fantasy3K: incorrect whiteList length\");\n\n        for (uint64 i; i < whitelist.length; i++){\n               whiteList[whitelist[i]] = true;\n        }\n    \n        emit AddWhiteList(whitelist);\n    }","contract":"Fantasy3KControl","time":0},{"type":"external-function ","before":"function whiteListAirDrop(address[] memory droplist, uint32[] memory number) public onlyOwner {\n\n        require(droplist.length == 50, \"Fantasy3K: incorrect droplist airdrop length\");\n        require(droplist.length == number.length, \"Fantasy3K: incorrect droplist or number length\");\n\n        for (uint64 i; i < droplist.length; i++){\n            if (number[i] > 1) {\n                boxUpdate(f3k1155.nextTokenId(), droplist[i], 0, 6);\n                f3k1155.mint(droplist[i], 6);\n            } else {\n                f3k721.mintTokens(droplist[i], 1);\n            }\n        }\n    }","after":"function whiteListAirDrop(address[] calldata droplist, uint32[] calldata number) public onlyOwner {\n\n        require(droplist.length == 50, \"Fantasy3K: incorrect droplist airdrop length\");\n        require(droplist.length == number.length, \"Fantasy3K: incorrect droplist or number length\");\n\n        for (uint64 i; i < droplist.length; i++){\n            if (number[i] > 1) {\n                boxUpdate(f3k1155.nextTokenId(), droplist[i], 0, 6);\n                f3k1155.mint(droplist[i], 6);\n            } else {\n                f3k721.mintTokens(droplist[i], 1);\n            }\n        }\n    }","contract":"Fantasy3KControl","time":0},{"type":"external-function ","before":"function cooperativeSales(uint256 around, uint256[] memory round, uint256[] memory count, \n    uint256 mtype, uint256[] memory idx, bytes32[][] calldata merkleProof) public {\n\n        for (uint256 i; i < count.length; i++) {\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender, around, round[i], count[i], mtype, idx[i]));\n            require(!activity[leaf], \"Fantasy: leaf already participate\");\n            bool valid = MerkleProof.verify(merkleProof[i], merkleRoot, leaf);\n            require(valid, \"Fantasy: Valid proof required.\");\n            if (mtype == 1155){\n                boxUpdate(f3k1155.nextTokenId(), msg.sender, round[i], count[i]);\n                f3k1155.mint(msg.sender, count[i]);\n            }else if (mtype == 721) {\n                f3k721.mintTokens(msg.sender, count[i]);\n            }\n            activity[leaf] = true;\n        }\n    }","after":"function cooperativeSales(uint256 around, uint256[] calldata round, uint256[] calldata count, \n    uint256 mtype, uint256[] calldata idx, bytes32[][] calldata merkleProof) public {\n\n        for (uint256 i; i < count.length; i++) {\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender, around, round[i], count[i], mtype, idx[i]));\n            require(!activity[leaf], \"Fantasy: leaf already participate\");\n            bool valid = MerkleProof.verify(merkleProof[i], merkleRoot, leaf);\n            require(valid, \"Fantasy: Valid proof required.\");\n            if (mtype == 1155){\n                boxUpdate(f3k1155.nextTokenId(), msg.sender, round[i], count[i]);\n                f3k1155.mint(msg.sender, count[i]);\n            }else if (mtype == 721) {\n                f3k721.mintTokens(msg.sender, count[i]);\n            }\n            activity[leaf] = true;\n        }\n    }","contract":"Fantasy3KControl","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private immutable whiteListPrice = 0.5 ether;","after":"uint256 private immutable constant whiteListPrice = 0.5 ether;","contract":"Fantasy3KControl","time":1}]}
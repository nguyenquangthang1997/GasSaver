{"time":1478,"results":[{"type":"external-function ","before":"function initialize(\n    string memory _name,\n    string memory _symbol,\n    uint8 _decimals,\n    TokenControllerInterface _controller\n  )\n    public\n    virtual\n    override\n    initializer\n  {\n    super.initialize(_name, _symbol, _decimals, _controller);\n    sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\n  }","after":"function initialize(\n    string calldata _name,\n    string calldata _symbol,\n    uint8 _decimals,\n    TokenControllerInterface _controller\n  )\n    public\n    virtual\n    override\n    initializer\n  {\n    super.initialize(_name, _symbol, _decimals, _controller);\n    sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\n  }","contract":"Ticket","time":0},{"type":"external-function ","before":"function initialize(\n    string memory _name,\n    string memory _symbol,\n    uint8 _decimals,\n    TokenControllerInterface _controller\n  )\n    public\n    virtual\n    initializer\n  {\n    __ERC20_init(_name, _symbol);\n    controller = _controller;\n    _setupDecimals(_decimals);\n  }","after":"function initialize(\n    string calldata _name,\n    string calldata _symbol,\n    uint8 _decimals,\n    TokenControllerInterface _controller\n  )\n    public\n    virtual\n    initializer\n  {\n    __ERC20_init(_name, _symbol);\n    controller = _controller;\n    _setupDecimals(_decimals);\n  }","contract":"Ticket","time":0},{"type":"external-function ","before":"function createMultipleWinners(\n    PrizePool prizePool,\n    MultipleWinnersConfig memory prizeStrategyConfig,\n    uint8 decimals,\n    address owner\n  ) external returns (MultipleWinners) {\n    MultipleWinners mw = multipleWinnersProxyFactory.create();\n\n    Ticket ticket = _createTicket(\n      prizeStrategyConfig.ticketName,\n      prizeStrategyConfig.ticketSymbol,\n      decimals,\n      prizePool\n    );\n\n    ControlledToken sponsorship = _createSponsorship(\n      prizeStrategyConfig.sponsorshipName,\n      prizeStrategyConfig.sponsorshipSymbol,\n      decimals,\n      prizePool\n    );\n\n    mw.initializeMultipleWinners(\n      prizeStrategyConfig.prizePeriodStart,\n      prizeStrategyConfig.prizePeriodSeconds,\n      prizePool,\n      ticket,\n      sponsorship,\n      prizeStrategyConfig.rngService,\n      prizeStrategyConfig.numberOfWinners\n    );\n\n    if (prizeStrategyConfig.splitExternalErc20Awards) {\n      mw.setSplitExternalErc20Awards(true);\n    }\n\n    mw.transferOwnership(owner);\n\n    emit MultipleWinnersCreated(address(mw));\n\n    return mw;\n  }","after":"function createMultipleWinners(\n    PrizePool prizePool,\n    MultipleWinnersConfig calldata prizeStrategyConfig,\n    uint8 decimals,\n    address owner\n  ) external returns (MultipleWinners) {\n    MultipleWinners mw = multipleWinnersProxyFactory.create();\n\n    Ticket ticket = _createTicket(\n      prizeStrategyConfig.ticketName,\n      prizeStrategyConfig.ticketSymbol,\n      decimals,\n      prizePool\n    );\n\n    ControlledToken sponsorship = _createSponsorship(\n      prizeStrategyConfig.sponsorshipName,\n      prizeStrategyConfig.sponsorshipSymbol,\n      decimals,\n      prizePool\n    );\n\n    mw.initializeMultipleWinners(\n      prizeStrategyConfig.prizePeriodStart,\n      prizeStrategyConfig.prizePeriodSeconds,\n      prizePool,\n      ticket,\n      sponsorship,\n      prizeStrategyConfig.rngService,\n      prizeStrategyConfig.numberOfWinners\n    );\n\n    if (prizeStrategyConfig.splitExternalErc20Awards) {\n      mw.setSplitExternalErc20Awards(true);\n    }\n\n    mw.transferOwnership(owner);\n\n    emit MultipleWinnersCreated(address(mw));\n\n    return mw;\n  }","contract":"MultipleWinnersBuilder","time":0},{"type":"external-function ","before":"function createCompoundMultipleWinners(\n    CompoundPrizePoolBuilder.CompoundPrizePoolConfig memory prizePoolConfig,\n    MultipleWinnersBuilder.MultipleWinnersConfig memory prizeStrategyConfig,\n    uint8 decimals\n  ) external returns (CompoundPrizePool) {\n    CompoundPrizePool prizePool = compoundPrizePoolBuilder.createCompoundPrizePool(prizePoolConfig);\n    MultipleWinners prizeStrategy = _createMultipleWinnersAndTransferPrizePool(prizePool, prizeStrategyConfig, decimals);\n    emit CompoundPrizePoolWithMultipleWinnersCreated(address(prizePool), address(prizeStrategy));\n    return prizePool;\n  }","after":"function createCompoundMultipleWinners(\n    CompoundPrizePoolBuilder.CompoundPrizePoolConfig calldata prizePoolConfig,\n    MultipleWinnersBuilder.MultipleWinnersConfig calldata prizeStrategyConfig,\n    uint8 decimals\n  ) external returns (CompoundPrizePool) {\n    CompoundPrizePool prizePool = compoundPrizePoolBuilder.createCompoundPrizePool(prizePoolConfig);\n    MultipleWinners prizeStrategy = _createMultipleWinnersAndTransferPrizePool(prizePool, prizeStrategyConfig, decimals);\n    emit CompoundPrizePoolWithMultipleWinnersCreated(address(prizePool), address(prizeStrategy));\n    return prizePool;\n  }","contract":"PoolWithMultipleWinnersBuilder","time":0},{"type":"external-function ","before":"function createStakeMultipleWinners(\n    StakePrizePoolBuilder.StakePrizePoolConfig memory prizePoolConfig,\n    MultipleWinnersBuilder.MultipleWinnersConfig memory prizeStrategyConfig,\n    uint8 decimals\n  ) external returns (StakePrizePool) {\n    StakePrizePool prizePool = stakePrizePoolBuilder.createStakePrizePool(prizePoolConfig);\n    MultipleWinners prizeStrategy = _createMultipleWinnersAndTransferPrizePool(prizePool, prizeStrategyConfig, decimals);\n    emit StakePrizePoolWithMultipleWinnersCreated(address(prizePool), address(prizeStrategy));\n    return prizePool;\n  }","after":"function createStakeMultipleWinners(\n    StakePrizePoolBuilder.StakePrizePoolConfig calldata prizePoolConfig,\n    MultipleWinnersBuilder.MultipleWinnersConfig calldata prizeStrategyConfig,\n    uint8 decimals\n  ) external returns (StakePrizePool) {\n    StakePrizePool prizePool = stakePrizePoolBuilder.createStakePrizePool(prizePoolConfig);\n    MultipleWinners prizeStrategy = _createMultipleWinnersAndTransferPrizePool(prizePool, prizeStrategyConfig, decimals);\n    emit StakePrizePoolWithMultipleWinnersCreated(address(prizePool), address(prizeStrategy));\n    return prizePool;\n  }","contract":"PoolWithMultipleWinnersBuilder","time":0},{"type":"external-function ","before":"function createVaultMultipleWinners(\n    VaultPrizePoolBuilder.VaultPrizePoolConfig memory prizePoolConfig,\n    MultipleWinnersBuilder.MultipleWinnersConfig memory prizeStrategyConfig,\n    uint8 decimals\n  ) external returns (yVaultPrizePool) {\n    yVaultPrizePool prizePool = vaultPrizePoolBuilder.createVaultPrizePool(prizePoolConfig);\n    MultipleWinners prizeStrategy = _createMultipleWinnersAndTransferPrizePool(prizePool, prizeStrategyConfig, decimals);\n    emit VaultPrizePoolWithMultipleWinnersCreated(address(prizePool), address(prizeStrategy));\n    return prizePool;\n  }","after":"function createVaultMultipleWinners(\n    VaultPrizePoolBuilder.VaultPrizePoolConfig calldata prizePoolConfig,\n    MultipleWinnersBuilder.MultipleWinnersConfig calldata prizeStrategyConfig,\n    uint8 decimals\n  ) external returns (yVaultPrizePool) {\n    yVaultPrizePool prizePool = vaultPrizePoolBuilder.createVaultPrizePool(prizePoolConfig);\n    MultipleWinners prizeStrategy = _createMultipleWinnersAndTransferPrizePool(prizePool, prizeStrategyConfig, decimals);\n    emit VaultPrizePoolWithMultipleWinnersCreated(address(prizePool), address(prizeStrategy));\n    return prizePool;\n  }","contract":"PoolWithMultipleWinnersBuilder","time":0},{"type":"external-function ","before":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    IERC20Upgradeable _stakeToken\n  )\n    public\n    initializer\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    stakeToken = _stakeToken;\n\n    emit StakePrizePoolInitialized(address(stakeToken));\n  }","after":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    IERC20Upgradeable _stakeToken\n  )\n    public\n    initializer\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    stakeToken = _stakeToken;\n\n    emit StakePrizePoolInitialized(address(stakeToken));\n  }","contract":"StakePrizePool","time":0},{"type":"external-function ","before":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","after":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","contract":"StakePrizePool","time":0},{"type":"external-function ","before":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    CTokenInterface _cToken\n  )\n    public\n    initializer\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    cToken = _cToken;\n\n    emit CompoundPrizePoolInitialized(address(cToken));\n  }","after":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    CTokenInterface _cToken\n  )\n    public\n    initializer\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    cToken = _cToken;\n\n    emit CompoundPrizePoolInitialized(address(cToken));\n  }","contract":"CompoundPrizePoolHarness","time":0},{"type":"external-function ","before":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","after":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","contract":"CompoundPrizePoolHarness","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 public DOMAIN_SEPARATOR;","after":"bytes32 public immutable DOMAIN_SEPARATOR;","contract":"Dai","time":0},{"type":"external-function ","before":"function __waffle__mockReverts(bytes memory data) public {\n        mockConfig[keccak256(data)] = MockCall({\n            initialized: true,\n            reverts: true,\n            returnValue: \"\"\n        });\n    }","after":"function __waffle__mockReverts(bytes calldata data) public {\n        mockConfig[keccak256(data)] = MockCall({\n            initialized: true,\n            reverts: true,\n            returnValue: \"\"\n        });\n    }","contract":"DoppelgangerWithExec","time":0},{"type":"external-function ","before":"function __waffle__mockReturns(bytes memory data, bytes memory value) public {\n        mockConfig[keccak256(data)] = MockCall({\n            initialized: true,\n            reverts: false,\n            returnValue: value\n        });\n    }","after":"function __waffle__mockReturns(bytes calldata data, bytes calldata value) public {\n        mockConfig[keccak256(data)] = MockCall({\n            initialized: true,\n            reverts: false,\n            returnValue: value\n        });\n    }","contract":"DoppelgangerWithExec","time":0},{"type":"external-function ","before":"function initialize (\n    uint256 _prizePeriodStart,\n    uint256 _prizePeriodSeconds,\n    PrizePool _prizePool,\n    TicketInterface _ticket,\n    IERC20Upgradeable _sponsorship,\n    RNGInterface _rng,\n    IERC20Upgradeable[] memory externalErc20Awards\n  ) public initializer {\n    require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n    require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n    require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n    require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n    require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n    prizePool = _prizePool;\n    ticket = _ticket;\n    rng = _rng;\n    sponsorship = _sponsorship;\n\n    __Ownable_init();\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n    externalErc20s.initialize();\n    for (uint256 i = 0; i < externalErc20Awards.length; i++) {\n      _addExternalErc20Award(externalErc20Awards[i]);\n    }\n\n    prizePeriodSeconds = _prizePeriodSeconds;\n    prizePeriodStartedAt = _prizePeriodStart;\n\n    externalErc721s.initialize();\n\n    // 30 min timeout\n    _setRngRequestTimeout(1800);\n\n    emit Initialized(\n      _prizePeriodStart,\n      _prizePeriodSeconds,\n      _prizePool,\n      _ticket,\n      _sponsorship,\n      _rng,\n      externalErc20Awards\n    );\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }","after":"function initialize (\n    uint256 _prizePeriodStart,\n    uint256 _prizePeriodSeconds,\n    PrizePool _prizePool,\n    TicketInterface _ticket,\n    IERC20Upgradeable _sponsorship,\n    RNGInterface _rng,\n    IERC20Upgradeable[] calldata externalErc20Awards\n  ) public initializer {\n    require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n    require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n    require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n    require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n    require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n    prizePool = _prizePool;\n    ticket = _ticket;\n    rng = _rng;\n    sponsorship = _sponsorship;\n\n    __Ownable_init();\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n    externalErc20s.initialize();\n    for (uint256 i = 0; i < externalErc20Awards.length; i++) {\n      _addExternalErc20Award(externalErc20Awards[i]);\n    }\n\n    prizePeriodSeconds = _prizePeriodSeconds;\n    prizePeriodStartedAt = _prizePeriodStart;\n\n    externalErc721s.initialize();\n\n    // 30 min timeout\n    _setRngRequestTimeout(1800);\n\n    emit Initialized(\n      _prizePeriodStart,\n      _prizePeriodSeconds,\n      _prizePool,\n      _ticket,\n      _sponsorship,\n      _rng,\n      externalErc20Awards\n    );\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }","contract":"MultipleWinnersHarness","time":0},{"type":"external-function ","before":"function initialize (\n    uint256 _prizePeriodStart,\n    uint256 _prizePeriodSeconds,\n    PrizePool _prizePool,\n    TicketInterface _ticket,\n    IERC20Upgradeable _sponsorship,\n    RNGInterface _rng,\n    IERC20Upgradeable[] memory externalErc20Awards\n  ) public initializer {\n    require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n    require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n    require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n    require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n    require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n    prizePool = _prizePool;\n    ticket = _ticket;\n    rng = _rng;\n    sponsorship = _sponsorship;\n\n    __Ownable_init();\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n    externalErc20s.initialize();\n    for (uint256 i = 0; i < externalErc20Awards.length; i++) {\n      _addExternalErc20Award(externalErc20Awards[i]);\n    }\n\n    prizePeriodSeconds = _prizePeriodSeconds;\n    prizePeriodStartedAt = _prizePeriodStart;\n\n    externalErc721s.initialize();\n\n    // 30 min timeout\n    _setRngRequestTimeout(1800);\n\n    emit Initialized(\n      _prizePeriodStart,\n      _prizePeriodSeconds,\n      _prizePool,\n      _ticket,\n      _sponsorship,\n      _rng,\n      externalErc20Awards\n    );\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }","after":"function initialize (\n    uint256 _prizePeriodStart,\n    uint256 _prizePeriodSeconds,\n    PrizePool _prizePool,\n    TicketInterface _ticket,\n    IERC20Upgradeable _sponsorship,\n    RNGInterface _rng,\n    IERC20Upgradeable[] calldata externalErc20Awards\n  ) public initializer {\n    require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n    require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n    require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n    require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n    require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n    prizePool = _prizePool;\n    ticket = _ticket;\n    rng = _rng;\n    sponsorship = _sponsorship;\n\n    __Ownable_init();\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n    externalErc20s.initialize();\n    for (uint256 i = 0; i < externalErc20Awards.length; i++) {\n      _addExternalErc20Award(externalErc20Awards[i]);\n    }\n\n    prizePeriodSeconds = _prizePeriodSeconds;\n    prizePeriodStartedAt = _prizePeriodStart;\n\n    externalErc721s.initialize();\n\n    // 30 min timeout\n    _setRngRequestTimeout(1800);\n\n    emit Initialized(\n      _prizePeriodStart,\n      _prizePeriodSeconds,\n      _prizePool,\n      _ticket,\n      _sponsorship,\n      _rng,\n      externalErc20Awards\n    );\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }","contract":"PeriodicPrizeStrategyHarness","time":0},{"type":"external-function ","before":"function initializeAll(\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    YieldSourceStub _stubYieldSource\n  )\n    public\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    stubYieldSource = _stubYieldSource;\n  }","after":"function initializeAll(\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    YieldSourceStub _stubYieldSource\n  )\n    public\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    stubYieldSource = _stubYieldSource;\n  }","contract":"PrizePoolHarness","time":0},{"type":"external-function ","before":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","after":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","contract":"PrizePoolHarness","time":0},{"type":"external-function ","before":"function initialize (\n    uint256 _prizePeriodStart,\n    uint256 _prizePeriodSeconds,\n    PrizePool _prizePool,\n    TicketInterface _ticket,\n    IERC20Upgradeable _sponsorship,\n    RNGInterface _rng,\n    IERC20Upgradeable[] memory externalErc20Awards\n  ) public initializer {\n    require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n    require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n    require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n    require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n    require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n    prizePool = _prizePool;\n    ticket = _ticket;\n    rng = _rng;\n    sponsorship = _sponsorship;\n\n    __Ownable_init();\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n    externalErc20s.initialize();\n    for (uint256 i = 0; i < externalErc20Awards.length; i++) {\n      _addExternalErc20Award(externalErc20Awards[i]);\n    }\n\n    prizePeriodSeconds = _prizePeriodSeconds;\n    prizePeriodStartedAt = _prizePeriodStart;\n\n    externalErc721s.initialize();\n\n    // 30 min timeout\n    _setRngRequestTimeout(1800);\n\n    emit Initialized(\n      _prizePeriodStart,\n      _prizePeriodSeconds,\n      _prizePool,\n      _ticket,\n      _sponsorship,\n      _rng,\n      externalErc20Awards\n    );\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }","after":"function initialize (\n    uint256 _prizePeriodStart,\n    uint256 _prizePeriodSeconds,\n    PrizePool _prizePool,\n    TicketInterface _ticket,\n    IERC20Upgradeable _sponsorship,\n    RNGInterface _rng,\n    IERC20Upgradeable[] calldata externalErc20Awards\n  ) public initializer {\n    require(_prizePeriodSeconds > 0, \"PeriodicPrizeStrategy/prize-period-greater-than-zero\");\n    require(address(_prizePool) != address(0), \"PeriodicPrizeStrategy/prize-pool-not-zero\");\n    require(address(_ticket) != address(0), \"PeriodicPrizeStrategy/ticket-not-zero\");\n    require(address(_sponsorship) != address(0), \"PeriodicPrizeStrategy/sponsorship-not-zero\");\n    require(address(_rng) != address(0), \"PeriodicPrizeStrategy/rng-not-zero\");\n    prizePool = _prizePool;\n    ticket = _ticket;\n    rng = _rng;\n    sponsorship = _sponsorship;\n\n    __Ownable_init();\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n    externalErc20s.initialize();\n    for (uint256 i = 0; i < externalErc20Awards.length; i++) {\n      _addExternalErc20Award(externalErc20Awards[i]);\n    }\n\n    prizePeriodSeconds = _prizePeriodSeconds;\n    prizePeriodStartedAt = _prizePeriodStart;\n\n    externalErc721s.initialize();\n\n    // 30 min timeout\n    _setRngRequestTimeout(1800);\n\n    emit Initialized(\n      _prizePeriodStart,\n      _prizePeriodSeconds,\n      _prizePool,\n      _ticket,\n      _sponsorship,\n      _rng,\n      externalErc20Awards\n    );\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }","contract":"SingleRandomWinnerHarness","time":0},{"type":"external-function ","before":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    yVaultInterface _vault,\n    uint256 _reserveRateMantissa\n  )\n    public\n    initializer\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    vault = _vault;\n    _setReserveRateMantissa(_reserveRateMantissa);\n\n    emit yVaultPrizePoolInitialized(address(vault));\n  }","after":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    yVaultInterface _vault,\n    uint256 _reserveRateMantissa\n  )\n    public\n    initializer\n  {\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    vault = _vault;\n    _setReserveRateMantissa(_reserveRateMantissa);\n\n    emit yVaultPrizePoolInitialized(address(vault));\n  }","contract":"yVaultPrizePoolHarness","time":0},{"type":"external-function ","before":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","after":"function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] calldata _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    _tokens.initialize();\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      _addControlledToken(_controlledTokens[i]);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _setLiquidityCap(uint256(-1));\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa,\n      maxTimelockDuration\n    );\n  }","contract":"yVaultPrizePoolHarness","time":0}]}
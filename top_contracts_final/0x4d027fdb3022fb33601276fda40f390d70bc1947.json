{"time":195,"results":[{"type":"state-data-arrangement ","before":"\n�⣿⣿⣿⣿⣿⣿�\n⣿⣿⣿⣿⣿�\n��⢻⣿⣿�\n⡏  ⣡⣿⣿⣿⣿⣿⣿⣿⣿⡇\n//   ⣾⣿⣿⣿⣿⣿⣿�\n��⣿⣿⣿⣿⣿⣿�\n��⣿⣿⣆⣹⣿�\n��⢳⣼⣿⣿⣿⣿⣿�\n��⣿⣿⣿⡀\n//  ⢰⣿⣿⣿⣿⣿⣿\n/  ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿","after":"�⣿⣿⣿⣿⣿⣿�\n⣿⣿⣿⣿⣿�\n��⢻⣿⣿�\n��⣿⣿⣿⣿⣿⣿�\n��⢳⣼⣿⣿⣿⣿⣿�\n��⣿⣿⣿⡀\n//  ⢰⣿⣿⣿⣿⣿⣿\n/  ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n⡏  ⣡⣿⣿⣿⣿⣿⣿⣿⣿⡇\n//   ⣾⣿⣿⣿⣿⣿⣿�\n��⣿⣿⣆⣹⣿�\n","contract":"GoldenFrogs","time":0},{"type":"external-function ","before":"ttps://twitter.com/MrFwashere\n// Artwork by Fenoir - https://twitter.com/EscuerFlorian\n// Special thanks and love to the entire Golden Fro","after":"ttps://twitter.com/MrFwashere\n// Artwork by Fenoir - https://twitter.com/EscuerFlorian\n// Special thanks and love to the entire Golden Fro","contract":"GoldenFrogs","time":0},{"type":"external-function ","before":"rdToken {\n        uint withdrawn;\n        mapping(uint => uint) claimedTokens;\n    }\n\n    mapping(address => rewardToken) rewardTokens;\n\n    constructor() ERC721(\"GoldenFrogs\", \"GF\")  {\n    }\n    \n    fallback() external payable {\n    }\n\n    receive() external payable {\n    }\n\n    function set","after":"rdToken {\n        uint withdrawn;\n        mapping(uint => uint) claimedTokens;\n    }\n\n    mapping(address => rewardToken) rewardTokens;\n\n    constructor() ERC721(\"GoldenFrogs\", \"GF\")  {\n    }\n    \n    fallback() external payable {\n    }\n\n    receive() external payable {\n    }\n\n    function set","contract":"GoldenFrogs","time":0},{"type":"external-function ","before":"et functions (provenance)\n\n    function initOffset() public {\n        require(msg.sender == mrF);\n        offsetBlock = block.number + 1;\n    }\n\n    function finalizeOffset() public {\n        require(offset == 0);\n        require(offsetBlock != 0);\n        require(block.number - offsetBlock < 255);\n        \n        offset = uint(blockhash(offsetBlock)) % maxFrogs;\n\n        // Prevent default sequence\n        if (offset == 0) {\n            offset = 1;\n        }\n        delete offsetBlock;\n    }\n\n    // Withdrawing functions\n\n    function getUserFrogs(address user) public view returns (uint[] memory) {\n        uint coun","after":"et functions (provenance)\n\n    function initOffset() public {\n        require(msg.sender == mrF);\n        offsetBlock = block.number + 1;\n    }\n\n    function finalizeOffset() public {\n        require(offset == 0);\n        require(offsetBlock != 0);\n        require(block.number - offsetBlock < 255);\n        \n        offset = uint(blockhash(offsetBlock)) % maxFrogs;\n\n        // Prevent default sequence\n        if (offset == 0) {\n            offset = 1;\n        }\n        delete offsetBlock;\n    }\n\n    // Withdrawing functions\n\n    function getUserFrogs(address user) public view returns (uint[] memory) {\n        uint coun","contract":"GoldenFrogs","time":0},{"type":"external-function ","before":"g = receivedEth / totalSupply();\n        for (uint i = 0; i < ids.length; i++) {\n            require(ownerOf(ids[i]) == msg.sender, \"Must own the token\");\n            totalRewards += receivedEthPerFrog - claimedEth[ids[i]];\n            claimedEth[ids[i]] = receivedEthPerFrog;\n        }\n        withdrawnEth += totalRewards;\n        (bool success,) = address(msg.sender).call{value: totalRewards}('');\n        require(success, \"Transfer failed\");\n    }\n\n    function checkEth(uint32[] memory ids) public view returns (uint balance) {\n        uint totalRewards;\n        uint receivedEth = withdrawnEth + address(this).balance;\n        uint receivedEthPerToken = receivedEth / totalSupply","after":"g = receivedEth / totalSupply();\n        for (uint i = 0; i < ids.length; i++) {\n            require(ownerOf(ids[i]) == msg.sender, \"Must own the token\");\n            totalRewards += receivedEthPerFrog - claimedEth[ids[i]];\n            claimedEth[ids[i]] = receivedEthPerFrog;\n        }\n        withdrawnEth += totalRewards;\n        (bool success,) = address(msg.sender).call{value: totalRewards}('');\n        require(success, \"Transfer failed\");\n    }\n\n    function checkEth(uint32[] memory ids) public view returns (uint balance) {\n        uint totalRewards;\n        uint receivedEth = withdrawnEth + address(this).balance;\n        uint receivedEthPerToken = receivedEth / totalSupply","contract":"GoldenFrogs","time":0},{"type":"constant-restrict-modification  ","before":"�⣿⣿⣿⣿⣿⣿�","after":"�⣿⣿⣿⣿⣿⣿�","contract":"GoldenFrogs","time":1}]}
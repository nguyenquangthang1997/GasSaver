{"time":225,"results":[{"type":"external-function ","before":"function setTokenURIAddress(uint[] memory tokens, uint index) public {\n        require(index < tokenURIAddresses.length);\n\n        for(uint i; i < tokens.length; i++){\n            require(msg.sender == ownerOf(tokens[i]));\n            tokenToURIAddressIndex[tokens[i]] = index;\n        }\n    }","after":"function setTokenURIAddress(uint[] calldata tokens, uint index) public {\n        require(index < tokenURIAddresses.length);\n\n        for(uint i; i < tokens.length; i++){\n            require(msg.sender == ownerOf(tokens[i]));\n            tokenToURIAddressIndex[tokens[i]] = index;\n        }\n    }","contract":"Terraforms","time":0},{"type":"external-function ","before":"            indices of two rows\n    function commitDreamToCanvas(uint tokenId, uint[16] memory dream) public {\n        require(\n            (\n                msg.sender == ownerOf(tokenId) ||\n                msg.sender == tokenToAuthorizedDreamer[tokenId]\n            ) &&\n            uint(tokenToStatus[tokenId]) % 2 == 1\n        );\n        tokenToDreamer[tokenId] = msg.sender;\n        tokenToStatus[tokenId] = Status(uint(tokenToStatus[tokenId]) + 1);\n        tokenToCanvasData[tokenId] = dream;\n        emit Ter","after":"            indices of two rows\n    function commitDreamToCanvas(uint tokenId, uint[16] memory dream) public {\n        require(\n            (\n                msg.sender == ownerOf(tokenId) ||\n                msg.sender == tokenToAuthorizedDreamer[tokenId]\n            ) &&\n            uint(tokenToStatus[tokenId]) % 2 == 1\n        );\n        tokenToDreamer[tokenId] = msg.sender;\n        tokenToStatus[tokenId] = Status(uint(tokenToStatus[tokenId]) + 1);\n        tokenToCanvasData[tokenId] = dream;\n        emit Ter","contract":"Terraforms","time":0},{"type":"external-function ","before":"e addresses of mintpass holders\n    function setMintpassHolders(address[] memory mintpassHolders) \n        public\n        onlyOwner \n    {\n        for (uint i; i < mintpassHolders.length; i ++){\n            addressToMintpass[mintpassHolders[i]","after":"e addresses of mintpass holders\n    function setMintpassHolders(address[] memory mintpassHolders) \n        public\n        onlyOwner \n    {\n        for (uint i; i < mintpassHolders.length; i ++){\n            addressToMintpass[mintpassHolders[i]","contract":"Terraforms","time":0}]}
{"time":131,"results":[{"type":"external-function ","before":"function mint(\n        address user,\n        uint256[] memory family,\n        uint256[] memory amount\n    ) public virtual onlyRole(MINTER_ROLE) returns (bool) {\n        for (uint256 i = 0; i < family.length; i++) {\n            totalMint += amount[i];\n        }\n        /// @dev caps the maximum mint limit to 10,000 NFTs\n        require(totalMint <= 10000, \"Error: max mint limit reached\");\n        require(family.length == amount.length, \"Error: Invalid Arguments\");\n        _mintBatch(user, family, amount, \"\");\n        return true;\n    }","after":"function mint(\n        address user,\n        uint256[] calldata family,\n        uint256[] calldata amount\n    ) public virtual onlyRole(MINTER_ROLE) returns (bool) {\n        for (uint256 i = 0; i < family.length; i++) {\n            totalMint += amount[i];\n        }\n        /// @dev caps the maximum mint limit to 10,000 NFTs\n        require(totalMint <= 10000, \"Error: max mint limit reached\");\n        require(family.length == amount.length, \"Error: Invalid Arguments\");\n        _mintBatch(user, family, amount, \"\");\n        return true;\n    }","contract":"AlCabonesHalloween2021","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"AlCabonesHalloween2021","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"AlCabonesHalloween2021","time":0}]}
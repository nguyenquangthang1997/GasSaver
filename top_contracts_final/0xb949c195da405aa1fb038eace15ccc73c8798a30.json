{"time":154,"results":[{"type":"state-data-arrangement ","before":"\nstring public provenance;\nstring private _baseURIextended;\nbool public saleActive = false;\nuint256 public immutable tier0MaxAllowListMint;\nuint256 public immutable tier0MaxPublicMint;\nuint256 public immutable tier0PricePerToken;\nuint256 public immutable tier1MaxAllowListMint;\nuint256 public immutable tier1MaxPublicMint;\nuint256 public immutable tier1PricePerToken;\nuint256 public immutable maxSupply;\naddress public immutable shareholderAddress;","after":"string public provenance;\nstring private _baseURIextended;\nuint256 public immutable tier0MaxAllowListMint;\nuint256 public immutable tier0MaxPublicMint;\nuint256 public immutable tier0PricePerToken;\nuint256 public immutable tier1MaxAllowListMint;\nuint256 public immutable tier1MaxPublicMint;\nuint256 public immutable tier1PricePerToken;\nuint256 public immutable maxSupply;\naddress public immutable shareholderAddress;\nbool public saleActive = false;\n","contract":"TMAC","time":1},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }","contract":"TMAC","time":0},{"type":"external-function ","before":"function setProvenance(string memory provenance_) public onlyOwner {\n        provenance = provenance_;\n    }","after":"function setProvenance(string calldata provenance_) public onlyOwner {\n        provenance = provenance_;\n    }","contract":"TMAC","time":0},{"type":"external-function ","before":"function mintAllowListTier0(uint256 numberOfTokens, bytes32[] memory merkleProof) external payable nonReentrant {\n        require(tier0PricePerToken * numberOfTokens <= msg.value, 'Ether value sent is not correct');\n\n        _mintAllowList(0, numberOfTokens, tier0MaxAllowListMint, merkleProof);\n    }","after":"function mintAllowListTier0(uint256 numberOfTokens, bytes32[] calldata merkleProof) external payable nonReentrant {\n        require(tier0PricePerToken * numberOfTokens <= msg.value, 'Ether value sent is not correct');\n\n        _mintAllowList(0, numberOfTokens, tier0MaxAllowListMint, merkleProof);\n    }","contract":"TMAC","time":0},{"type":"external-function ","before":"function mintAllowListTier1(uint256 numberOfTokens, bytes32[] memory merkleProof) external payable nonReentrant {\n        require(tier1PricePerToken * numberOfTokens <= msg.value, 'Ether value sent is not correct');\n        _mintAllowList(1, numberOfTokens, tier1MaxAllowListMint, merkleProof);\n    }","after":"function mintAllowListTier1(uint256 numberOfTokens, bytes32[] calldata merkleProof) external payable nonReentrant {\n        require(tier1PricePerToken * numberOfTokens <= msg.value, 'Ether value sent is not correct');\n        _mintAllowList(1, numberOfTokens, tier1MaxAllowListMint, merkleProof);\n    }","contract":"TMAC","time":0}]}
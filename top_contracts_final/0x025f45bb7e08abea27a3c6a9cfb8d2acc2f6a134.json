{"time":208,"results":[{"type":"state-data-arrangement ","before":"\nstring public constant name = \"Buckets Club\";\nstring public constant symbol = \"BUCKETS\";\nuint32 public totalSupply = 0;\nuint32 public constant maxSupply = 1000;\nuint256 public constant unitPrice = 0.3 ether;\nuint32 public preSaleStart = 1639616400;\nuint32 public publicSaleStart = 1639702800;\nuint32 public constant preSaleMaxPerAddress = 1;\nuint32 public constant publicSaleMaxPerAddress = 5;\naddress private signerAddress = 0xbF645f208E06053a586ee6b23F2b5c430753BACc;\nmapping(address => uint256) private _tokensMintedByAddress;","after":"string public constant name = \"Buckets Club\";\nstring public constant symbol = \"BUCKETS\";\nuint256 public constant unitPrice = 0.3 ether;\nmapping(address => uint256) private _tokensMintedByAddress;\naddress private signerAddress = 0xbF645f208E06053a586ee6b23F2b5c430753BACc;\nuint32 public totalSupply = 0;\nuint32 public constant maxSupply = 1000;\nuint32 public preSaleStart = 1639616400;\nuint32 public publicSaleStart = 1639702800;\nuint32 public constant preSaleMaxPerAddress = 1;\nuint32 public constant publicSaleMaxPerAddress = 5;\n","contract":"BucketsClub","time":0},{"type":"external-function ","before":"function setURI(string memory uri) public onlyOwner {\n        _setURI(uri);\n    }","after":"function setURI(string calldata uri) public onlyOwner {\n        _setURI(uri);\n    }","contract":"BucketsClub","time":0},{"type":"external-function ","before":"function batchMint(address[] memory addresses) external onlyOwner {\n        require(\n            totalSupply + addresses.length <= maxSupply,\n            \"Count exceeds the maximum allowed supply.\"\n        );\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            mint(addresses[i], 1);\n        }\n    }","after":"function batchMint(address[] calldata addresses) external onlyOwner {\n        require(\n            totalSupply + addresses.length <= maxSupply,\n            \"Count exceeds the maximum allowed supply.\"\n        );\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            mint(addresses[i], 1);\n        }\n    }","contract":"BucketsClub","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"BucketsClub","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"BucketsClub","time":0}]}
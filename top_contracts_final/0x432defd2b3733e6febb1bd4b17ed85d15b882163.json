{"time":206,"results":[{"type":"external-function ","before":"  function sendBatch(\n    address[] memory to,\n    bytes[] memory data\n  )\n    public\n  {\n    _sendBatch(\n      msg.sender,\n      msg.sender,\n      to,\n      data\n    );\n ","after":"  function sendBatch(\n    address[] calldata to,\n    bytes[] calldata data\n  )\n    public\n  {\n    _sendBatch(\n      msg.sender,\n      msg.sender,\n      to,\n      data\n    );\n ","contract":"Gateway","time":1},{"type":"external-function ","before":"  function sendBatchFromAccount(\n    address account,\n    address[] memory to,\n    bytes[] memory data\n  )\n    public\n  {\n    _sendBatch(\n      account,\n      msg.sender,\n      to,\n      data\n    );\n ","after":"  function sendBatchFromAccount(\n    address account,\n    address[] calldata to,\n    bytes[] calldata data\n  )\n    public\n  {\n    _sendBatch(\n      account,\n      msg.sender,\n      to,\n      data\n    );\n ","contract":"Gateway","time":0},{"type":"external-function ","before":"  function delegateBatch(\n    address account,\n    uint256 nonce,\n    address[] memory to,\n    bytes[] memory data,\n    bytes memory senderSignature\n  )\n    public\n  {\n    require(\n      nonce > accountNonce[account],\n      \"Gateway: nonce is lower than current account nonce\"\n    );\n\n    address sender = _hashDelegatedBatch(\n      account,\n      nonce,\n      to,\n      data\n    ).recoverAddress(senderSignature);\n\n    accountNonce[account] = nonce;\n\n    _sendBatch(\n      account,\n      sender,\n      to,\n      data\n    );\n ","after":"  function delegateBatch(\n    address account,\n    uint256 nonce,\n    address[] calldata to,\n    bytes[] calldata data,\n    bytes calldata senderSignature\n  )\n    public\n  {\n    require(\n      nonce > accountNonce[account],\n      \"Gateway: nonce is lower than current account nonce\"\n    );\n\n    address sender = _hashDelegatedBatch(\n      account,\n      nonce,\n      to,\n      data\n    ).recoverAddress(senderSignature);\n\n    accountNonce[account] = nonce;\n\n    _sendBatch(\n      account,\n      sender,\n      to,\n      data\n    );\n ","contract":"Gateway","time":0},{"type":"external-function ","before":"  function delegateBatchWithGasPrice(\n    address account,\n    uint256 nonce,\n    address[] memory to,\n    bytes[] memory data,\n    bytes memory senderSignature\n  )\n    public\n  {\n    require(\n      nonce > accountNonce[account],\n      \"Gateway: nonce is lower than current account nonce\"\n    );\n\n    address sender = _hashDelegatedBatchWithGasPrice(\n      account,\n      nonce,\n      to,\n      data,\n      tx.gasprice\n    ).recoverAddress(senderSignature);\n\n    accountNonce[account] = nonce;\n\n    _sendBatch(\n      account,\n      sender,\n      to,\n      data\n    );\n ","after":"  function delegateBatchWithGasPrice(\n    address account,\n    uint256 nonce,\n    address[] calldata to,\n    bytes[] calldata data,\n    bytes calldata senderSignature\n  )\n    public\n  {\n    require(\n      nonce > accountNonce[account],\n      \"Gateway: nonce is lower than current account nonce\"\n    );\n\n    address sender = _hashDelegatedBatchWithGasPrice(\n      account,\n      nonce,\n      to,\n      data,\n      tx.gasprice\n    ).recoverAddress(senderSignature);\n\n    accountNonce[account] = nonce;\n\n    _sendBatch(\n      account,\n      sender,\n      to,\n      data\n    );\n ","contract":"Gateway","time":0},{"type":"external-function ","before":"  function delegateBatches(\n    bytes[] memory batches,\n    bool revertOnFailure\n  )\n    public\n  {\n    require(\n      batches.length > 0,\n      \"Gateway: cannot delegate empty batches\"\n    );\n\n    bool anySucceeded;\n\n    for (uint256 i = 0; i < batches.length; i++) {\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool succeeded,) = address(this).call(batches[i]);\n\n      if (revertOnFailure) {\n        require(\n          succeeded,\n          \"Gateway: batch reverted\"\n        );\n      } else if (succeeded && !anySucceeded) {\n        anySucceeded = true;\n      }\n\n      emit BatchDelegated(\n        msg.sender,\n        batches[i],\n        succeeded\n      );\n    }\n\n    if (!anySucceeded) {\n      revert(\"Gateway: all batches reverted\");\n    }\n ","after":"  function delegateBatches(\n    bytes[] calldata batches,\n    bool revertOnFailure\n  )\n    public\n  {\n    require(\n      batches.length > 0,\n      \"Gateway: cannot delegate empty batches\"\n    );\n\n    bool anySucceeded;\n\n    for (uint256 i = 0; i < batches.length; i++) {\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool succeeded,) = address(this).call(batches[i]);\n\n      if (revertOnFailure) {\n        require(\n          succeeded,\n          \"Gateway: batch reverted\"\n        );\n      } else if (succeeded && !anySucceeded) {\n        anySucceeded = true;\n      }\n\n      emit BatchDelegated(\n        msg.sender,\n        batches[i],\n        succeeded\n      );\n    }\n\n    if (!anySucceeded) {\n      revert(\"Gateway: all batches reverted\");\n    }\n ","contract":"Gateway","time":0},{"type":"immutable-restrict-modification ","before":"2;\n\n  uint256 public ch","after":"2;\n\n  uint256 public ch","contract":"Gateway","time":0},{"type":"immutable-restrict-modification ","before":"account address\n   */\n  ad","after":"account address\n   */\n  ad","contract":"Account","time":0},{"type":"immutable-restrict-modification ","before":"\ncontract AccountBase {\n","after":"\ncontract AccountBase {\n","contract":"Account","time":0}]}
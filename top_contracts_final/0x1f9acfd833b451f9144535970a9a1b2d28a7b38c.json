{"time":877,"results":[{"type":"external-function ","before":"function approveOrder_ (\n        address[7] memory addrs,\n        uint[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata,\n        bool orderbookInclusionDesired) \n        public\n    {\n\n        Order memory order = Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, callData, replacementPattern, addrs[5], staticExtradata, addrs[6], uints[2], uints[3], uints[4], uints[5], uints[6]);\n        return approveOrder(order, orderbookInclusionDesired);\n    }","after":"function approveOrder_ (\n        address[7] calldata addrs,\n        uint[7] calldata uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes calldata callData,\n        bytes calldata replacementPattern,\n        bytes calldata staticExtradata,\n        bool orderbookInclusionDesired) \n        public\n    {\n\n        Order memory order = Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, callData, replacementPattern, addrs[5], staticExtradata, addrs[6], uints[2], uints[3], uints[4], uints[5], uints[6]);\n        return approveOrder(order, orderbookInclusionDesired);\n    }","contract":"PaceArtExchange","time":0},{"type":"external-function ","before":"function cancelOrder_(\n        address[7] memory addrs,\n        uint[7] memory uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes memory callData,\n        bytes memory replacementPattern,\n        bytes memory staticExtradata,\n        uint8 v,\n        bytes32 r,\n        bytes32 s)\n        public\n    {\n\n        return cancelOrder(\n          Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, callData, replacementPattern, addrs[5], staticExtradata, addrs[6], uints[2], uints[3], uints[4], uints[5], uints[6]),\n          Sig(v, r, s)\n        );\n    }","after":"function cancelOrder_(\n        address[7] calldata addrs,\n        uint[7] calldata uints,\n        FeeMethod feeMethod,\n        SaleKindInterface.Side side,\n        SaleKindInterface.SaleKind saleKind,\n        AuthenticatedProxy.HowToCall howToCall,\n        bytes calldata callData,\n        bytes calldata replacementPattern,\n        bytes calldata staticExtradata,\n        uint8 v,\n        bytes32 r,\n        bytes32 s)\n        public\n    {\n\n        return cancelOrder(\n          Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, callData, replacementPattern, addrs[5], staticExtradata, addrs[6], uints[2], uints[3], uints[4], uints[5], uints[6]),\n          Sig(v, r, s)\n        );\n    }","contract":"PaceArtExchange","time":0},{"type":"external-function ","before":"function atomicMatch_(\n        address[14] memory addrs,\n        uint[14] memory uints,\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\n        bytes memory calldataBuy,\n        bytes memory calldataSell,\n        bytes memory replacementPatternBuy,\n        bytes memory replacementPatternSell,\n        bytes memory staticExtradataBuy,\n        bytes memory staticExtradataSell,\n        uint8[2] memory vs,\n        bytes32[5] memory rssMetadata)\n        public\n        payable\n    {\n        return atomicMatch(\n          Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], addrs[3], FeeMethod(feeMethodsSidesKindsHowToCalls[0]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]), addrs[4], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]), calldataBuy, replacementPatternBuy, addrs[5], staticExtradataBuy, addrs[6], uints[2], uints[3], uints[4], uints[5], uints[6]),\n          Sig(vs[0], rssMetadata[0], rssMetadata[1]),\n          Order(addrs[7], addrs[8], addrs[9], uints[7], uints[8], addrs[10], FeeMethod(feeMethodsSidesKindsHowToCalls[4]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]), addrs[11], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]), calldataSell, replacementPatternSell, addrs[12], staticExtradataSell, addrs[13], uints[9], uints[10], uints[11], uints[12], uints[13]),\n          Sig(vs[1], rssMetadata[2], rssMetadata[3]),\n          rssMetadata[4]\n        );\n    }","after":"function atomicMatch_(\n        address[14] calldata addrs,\n        uint[14] calldata uints,\n        uint8[8] calldata feeMethodsSidesKindsHowToCalls,\n        bytes calldata calldataBuy,\n        bytes calldata calldataSell,\n        bytes calldata replacementPatternBuy,\n        bytes calldata replacementPatternSell,\n        bytes calldata staticExtradataBuy,\n        bytes calldata staticExtradataSell,\n        uint8[2] calldata vs,\n        bytes32[5] calldata rssMetadata)\n        public\n        payable\n    {\n        return atomicMatch(\n          Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], addrs[3], FeeMethod(feeMethodsSidesKindsHowToCalls[0]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]), addrs[4], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]), calldataBuy, replacementPatternBuy, addrs[5], staticExtradataBuy, addrs[6], uints[2], uints[3], uints[4], uints[5], uints[6]),\n          Sig(vs[0], rssMetadata[0], rssMetadata[1]),\n          Order(addrs[7], addrs[8], addrs[9], uints[7], uints[8], addrs[10], FeeMethod(feeMethodsSidesKindsHowToCalls[4]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]), addrs[11], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]), calldataSell, replacementPatternSell, addrs[12], staticExtradataSell, addrs[13], uints[9], uints[10], uints[11], uints[12], uints[13]),\n          Sig(vs[1], rssMetadata[2], rssMetadata[3]),\n          rssMetadata[4]\n        );\n    }","contract":"PaceArtExchange","time":0},{"type":"constant-restrict-modification  ","before":"uint public DELAY_PERIOD = 2 weeks;","after":"uint public constant DELAY_PERIOD = 2 weeks;","contract":"ProxyRegistry","time":0},{"type":"external-function ","before":"function proxyAssert(address dest, HowToCall howToCall, bytes memory data)\n        public\n    {\n        (bool result, ) = proxy(dest, howToCall, data);\n        require(result, \"Proxy assertion failed\");\n    }","after":"function proxyAssert(address dest, HowToCall howToCall, bytes calldata data)\n        public\n    {\n        (bool result, ) = proxy(dest, howToCall, data);\n        require(result, \"Proxy assertion failed\");\n    }","contract":"AuthenticatedProxy","time":0},{"type":"external-function ","before":"function receiveApproval(address from, uint256 value, address token, bytes memory extraData) public {\n        ERC20 t = ERC20(token);\n        require(t.transferFrom(from, address(this), value), \"ERC20 token transfer failed\");\n        emit ReceivedTokens(from, value, token, extraData);\n    }","after":"function receiveApproval(address from, uint256 value, address token, bytes calldata extraData) public {\n        ERC20 t = ERC20(token);\n        require(t.transferFrom(from, address(this), value), \"ERC20 token transfer failed\");\n        emit ReceivedTokens(from, value, token, extraData);\n    }","contract":"AuthenticatedProxy","time":0},{"type":"external-function ","before":"function upgradeToAndCall(address implementation, bytes memory data) payable public onlyProxyOwner {\n        upgradeTo(implementation);\n        (bool success,) = address(this).delegatecall(data);\n        require(success, \"Call failed after proxy upgrade\");\n    }","after":"function upgradeToAndCall(address implementation, bytes calldata data) payable public onlyProxyOwner {\n        upgradeTo(implementation);\n        (bool success,) = address(this).delegatecall(data);\n        require(success, \"Call failed after proxy upgrade\");\n    }","contract":"OwnableDelegateProxy","time":0}]}
{"time":251,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nmapping(address => mapping(uint256 => uint256)) internal balances;\nmapping(address => mapping(address => bool)) internal operators;\nbytes4 private constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 private constant INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;","after":"mapping(address => mapping(uint256 => uint256)) internal balances;\nmapping(address => mapping(address => bool)) internal operators;\nbytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\nbytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\nbytes4 private constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\nbytes4 private constant INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n","contract":"ERC1155","time":0},{"type":"external-function ","before":"function setBaseMetadataURI(string memory _newBaseMetadataURI)\n        public\n        onlyWhitelistAdmin\n    {\n        _setBaseMetadataURI(_newBaseMetadataURI);\n    }","after":"function setBaseMetadataURI(string calldata _newBaseMetadataURI)\n        public\n        onlyWhitelistAdmin\n    {\n        _setBaseMetadataURI(_newBaseMetadataURI);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function mint(\n        address _to,\n        uint256 _id,\n        uint256 _quantity,\n        bytes memory _data\n    ) public onlyMinter {\n        uint256 tokenId = _id;\n        require(\n            tokenSupply[tokenId] < tokenMaxSupply[tokenId],\n            \"Max supply reached\"\n        );\n        _mint(_to, _id, _quantity, _data);\n        tokenSupply[_id] = tokenSupply[_id].add(_quantity);\n    }","after":"function mint(\n        address _to,\n        uint256 _id,\n        uint256 _quantity,\n        bytes calldata _data\n    ) public onlyMinter {\n        uint256 tokenId = _id;\n        require(\n            tokenSupply[tokenId] < tokenMaxSupply[tokenId],\n            \"Max supply reached\"\n        );\n        _mint(_to, _id, _quantity, _data);\n        tokenSupply[_id] = tokenSupply[_id].add(_quantity);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function batchMint(\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) public onlyMinter {\n        uint256 nMints = _ids.length;\n        for (uint256 i = 0; i < nMints; i++) {\n            uint256 tokenId = _ids[i];\n            require(\n                tokenSupply[tokenId] < tokenMaxSupply[tokenId],\n                \"Max supply reached\"\n            );\n            tokenSupply[tokenId] = tokenSupply[tokenId].add(_amounts[i]);\n        }\n        _batchMint(_to, _ids, _amounts, _data);\n    }","after":"function batchMint(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts,\n        bytes calldata _data\n    ) public onlyMinter {\n        uint256 nMints = _ids.length;\n        for (uint256 i = 0; i < nMints; i++) {\n            uint256 tokenId = _ids[i];\n            require(\n                tokenSupply[tokenId] < tokenMaxSupply[tokenId],\n                \"Max supply reached\"\n            );\n            tokenSupply[tokenId] = tokenSupply[tokenId].add(_amounts[i]);\n        }\n        _batchMint(_to, _ids, _amounts, _data);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    ) public {\n        require(\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\n            \"ERC1155#safeTransferFrom: INVALID_OPERATOR\"\n        );\n        require(\n            _to != address(0),\n            \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\"\n        );\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\n\n        _safeTransferFrom(_from, _to, _id, _amount);\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\n    }","after":"function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes calldata _data\n    ) public {\n        require(\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\n            \"ERC1155#safeTransferFrom: INVALID_OPERATOR\"\n        );\n        require(\n            _to != address(0),\n            \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\"\n        );\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\n\n        _safeTransferFrom(_from, _to, _id, _amount);\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\n    }","contract":"ERC1155Tradable","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) public {\n        // Requirements\n        require(\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\n            \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\"\n        );\n        require(\n            _to != address(0),\n            \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\"\n        );\n\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n    }","after":"function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts,\n        bytes calldata _data\n    ) public {\n        // Requirements\n        require(\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\n            \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\"\n        );\n        require(\n            _to != address(0),\n            \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\"\n        );\n\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\n    }","contract":"ERC1155Tradable","time":0}]}
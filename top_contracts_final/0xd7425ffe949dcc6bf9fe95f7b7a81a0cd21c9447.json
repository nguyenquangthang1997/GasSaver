{"time":141,"results":[{"type":"state-data-arrangement ","before":"\n██║        ██║       ██║     ╚██████╗\r\n  �\n��  ╚═══╝╚═╝        ╚═╝       ╚═╝      ╚═�\n�═╝\r\n  by @nichosystem\r\n*/\r\n\r\ncontract \nis ERC721Enumerable, Ownable {\r\n    us\nngs for uint256;\r\n   \n ECDSA for bytes32;\r\n\r\n    \nToggleSale(bool saleLive, bo\nsaleLive);\r\n\r\n    add\nublic constant SIGNER = \n9A0bc422E9Cc365FB0389C\n893C55;\r\n    address public constant VAULT = 0xB4C0E8628\n448504bA6d5fe3c59abDcD944;\r\n    uint256 public constant MAX_SUPPL","after":"�═╝\r\n  by @nichosystem\r\n*/\r\n\r\ncontract \nis ERC721Enumerable, Ownable {\r\n    us\nngs for uint256;\r\n   \n ECDSA for bytes32;\r\n\r\n    \nToggleSale(bool saleLive, bo\n9A0bc422E9Cc365FB0389C\n893C55;\r\n    address public constant VAULT = 0xB4C0E8628\n448504bA6d5fe3c59abDcD944;\r\n    uint256 public constant MAX_SUPPL\n██║        ██║       ██║     ╚██████╗\r\n  �\n��  ╚═══╝╚═╝        ╚═╝       ╚═╝      ╚═�\nsaleLive);\r\n\r\n    add\nublic constant SIGNER = \n","contract":"NFTFC","time":1},{"type":"external-function ","before":"y <= TX_LIMIT, \"Exceeds transaction limit\");\r\n        require(tokenQuantity > 0, \"No tokens issued\");\r\n        require(msg.value >= price * tokenQuantity, \"Insufficient ETH\");\r\n\r\n        uint256 _supply = totalSupply(); // Gas optimization\r\n        for (uint256 i = 1; i <= tokenQuantity; i++) {\r\n            _safeMint(msg.sender, _supply + i);\r\n        }\r\n    }\r\n\r\n    function presaleMint(\r\n        bytes32 hash,\r\n        bytes memory signature,\r\n        uint256 nonce,\r\n        uint256 tokenQuantity\r\n    ) external payable {\r\n        require(presaleLive, \"Presale closed\");\r\n        require(\r\n            totalSupply() + tokenQuantity <= batchSupply &&\r\n                totalSupply() + tokenQuantity <= MAX_SUPPLY,\r\n            \"Exceeds presale supply\"\r\n        );\r\n        require(tokenQuantity > 0, \"No tokens issued\");\r\n        require(msg.value >= price * tokenQuantity, \"Insufficient ETH\");\r\n        require(_matchSigner(hash, signature), \"No direct mint\");\r\n        require(!_usedNonces[msg.sender][nonce], \"Hash used\");\r\n        require(\r\n            _hashTransaction(msg.","after":"y <= TX_LIMIT, \"Exceeds transaction limit\");\r\n        require(tokenQuantity > 0, \"No tokens issued\");\r\n        require(msg.value >= price * tokenQuantity, \"Insufficient ETH\");\r\n\r\n        uint256 _supply = totalSupply(); // Gas optimization\r\n        for (uint256 i = 1; i <= tokenQuantity; i++) {\r\n            _safeMint(msg.sender, _supply + i);\r\n        }\r\n    }\r\n\r\n    function presaleMint(\r\n        bytes32 hash,\r\n        bytes memory signature,\r\n        uint256 nonce,\r\n        uint256 tokenQuantity\r\n    ) external payable {\r\n        require(presaleLive, \"Presale closed\");\r\n        require(\r\n            totalSupply() + tokenQuantity <= batchSupply &&\r\n                totalSupply() + tokenQuantity <= MAX_SUPPLY,\r\n            \"Exceeds presale supply\"\r\n        );\r\n        require(tokenQuantity > 0, \"No tokens issued\");\r\n        require(msg.value >= price * tokenQuantity, \"Insufficient ETH\");\r\n        require(_matchSigner(hash, signature), \"No direct mint\");\r\n        require(!_usedNonces[msg.sender][nonce], \"Hash used\");\r\n        require(\r\n            _hashTransaction(msg.","contract":"NFTFC","time":0}]}
{"time":153,"results":[{"type":"external-function ","before":"function mint(uint256 _mintAmount, bytes32[] memory _merkleProof) public payable {\n    require(!paused, \"The contract is paused\");\n    require(_mintAmount > 0, \"Must mint at least 1 NFT\");\n    uint256 supply = totalSupply();\n    require(supply + _mintAmount <= maxSupply, \"All NFTs have been minted\");\n    address operator = _msgSender();\n    if (operator != owner()) {\n        require(_mintAmount <= maxMintAmount, \"Cannot mint this many per call\");\n        if(onlyWhitelisted == true) {\n            require(reachedMintingLimit(),\"Already minted\");\n            require( onWhiteList(_merkleProof),'Not white listed');\n        }\n        require(msg.value >= cost * _mintAmount, \"Insufficient funds\");\n    }\n    for (uint256 i = 1; i <= _mintAmount; i++) {\n      whiteListClaimed[operator]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }","after":"function mint(uint256 _mintAmount, bytes32[] calldata _merkleProof) public payable {\n    require(!paused, \"The contract is paused\");\n    require(_mintAmount > 0, \"Must mint at least 1 NFT\");\n    uint256 supply = totalSupply();\n    require(supply + _mintAmount <= maxSupply, \"All NFTs have been minted\");\n    address operator = _msgSender();\n    if (operator != owner()) {\n        require(_mintAmount <= maxMintAmount, \"Cannot mint this many per call\");\n        if(onlyWhitelisted == true) {\n            require(reachedMintingLimit(),\"Already minted\");\n            require( onWhiteList(_merkleProof),'Not white listed');\n        }\n        require(msg.value >= cost * _mintAmount, \"Insufficient funds\");\n    }\n    for (uint256 i = 1; i <= _mintAmount; i++) {\n      whiteListClaimed[operator]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }","contract":"LucidPaths","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\n    baseExtension = _newBaseExtension;\n  }","after":"function setBaseExtension(string calldata _newBaseExtension) public onlyOwner {\n    baseExtension = _newBaseExtension;\n  }","contract":"LucidPaths","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxSupply = 1000;","after":"uint256 public constant maxSupply = 1000;","contract":"LucidPaths","time":1}]}
{"time":155,"results":[{"type":"external-function ","before":"function mint(\n        address _minter,\n        uint256 _tokenId,\n        uint256 _nonce,\n        bytes memory _signature\n    ) external {\n        require(erc721Address != address(0), \"SOS address not set yet\");\n        require(\n            IERC721(erc721Address).ownerOf(_tokenId) == msg.sender,\n            \"You do not own the SOS token\"\n        );\n        require(\n            getSigner(msg.sender, _tokenId, _nonce, _signature) == whitelistSigner,\n            \"Invalid signature\"\n        );\n\n        // token id has to be unique\n        // this prevent double mint for same SOS token id\n        _safeMint(msg.sender, _tokenId);\n    }","after":"function mint(\n        address _minter,\n        uint256 _tokenId,\n        uint256 _nonce,\n        bytes calldata _signature\n    ) external {\n        require(erc721Address != address(0), \"SOS address not set yet\");\n        require(\n            IERC721(erc721Address).ownerOf(_tokenId) == msg.sender,\n            \"You do not own the SOS token\"\n        );\n        require(\n            getSigner(msg.sender, _tokenId, _nonce, _signature) == whitelistSigner,\n            \"Invalid signature\"\n        );\n\n        // token id has to be unique\n        // this prevent double mint for same SOS token id\n        _safeMint(msg.sender, _tokenId);\n    }","contract":"SOSMetaID","time":0}]}
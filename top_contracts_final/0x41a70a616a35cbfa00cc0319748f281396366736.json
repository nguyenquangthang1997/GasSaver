{"time":196,"results":[{"type":"external-function ","before":"function mintStarWhitelist(bytes memory _signature, string memory _id, string memory _timestamp) public nonReentrant\n\t{\n\t\trequire(whitelist_sale_active, \"Whitelist not open\");\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Whitelist\"), \"Not authorised to mint\");\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\n\n\t\tmaybeMintTokens(1);\n\t}","after":"function mintStarWhitelist(bytes calldata _signature, string calldata _id, string calldata _timestamp) public nonReentrant\n\t{\n\t\trequire(whitelist_sale_active, \"Whitelist not open\");\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Whitelist\"), \"Not authorised to mint\");\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\n\n\t\tmaybeMintTokens(1);\n\t}","contract":"SolaStars","time":0},{"type":"external-function ","before":"function mintStarsWhitelist(bytes memory _signature, string memory _id, string memory _timestamp) public payable nonReentrant\n\t{\n\t\trequire(whitelist_sale_active, \"Whitelist not open\");\n\t\trequire(msg.value >= token_price, \"Not enough ETH\");\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Whitelist\"), \"Not authorised to mint\");\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\n\n\t\tmaybeMintTokens(2);\n\t}","after":"function mintStarsWhitelist(bytes calldata _signature, string calldata _id, string calldata _timestamp) public payable nonReentrant\n\t{\n\t\trequire(whitelist_sale_active, \"Whitelist not open\");\n\t\trequire(msg.value >= token_price, \"Not enough ETH\");\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Whitelist\"), \"Not authorised to mint\");\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\n\n\t\tmaybeMintTokens(2);\n\t}","contract":"SolaStars","time":0},{"type":"external-function ","before":"function mintStarRaffle(uint256 _num_tokens, bytes memory _signature, string memory _id, string memory _timestamp) public payable nonReentrant\n\t{\n\t\trequire(public_raffle_sale_active, \"Public Raffle not open\");\n\t\trequire(msg.value >= (token_price * _num_tokens), \"Not enough ETH\");\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Public-Raffle\"), \"Not authorised to mint\");\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\n\n\t\tmaybeMintTokens(_num_tokens);\n\t}","after":"function mintStarRaffle(uint256 _num_tokens, bytes calldata _signature, string calldata _id, string calldata _timestamp) public payable nonReentrant\n\t{\n\t\trequire(public_raffle_sale_active, \"Public Raffle not open\");\n\t\trequire(msg.value >= (token_price * _num_tokens), \"Not enough ETH\");\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Public-Raffle\"), \"Not authorised to mint\");\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\n\n\t\tmaybeMintTokens(_num_tokens);\n\t}","contract":"SolaStars","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory _provenance_hash) public onlyOwner\n\t{\n\t\tprovenance_hash = _provenance_hash;\n\t}","after":"function setProvenanceHash(string calldata _provenance_hash) public onlyOwner\n\t{\n\t\tprovenance_hash = _provenance_hash;\n\t}","contract":"SolaStars","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _new_token_base_uri) public onlyOwner\n\t{\n\t\t_setBaseURI(_new_token_base_uri);\n\t}","after":"function setBaseURI(string calldata _new_token_base_uri) public onlyOwner\n\t{\n\t\t_setBaseURI(_new_token_base_uri);\n\t}","contract":"SolaStars","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public max_tokens_per_transaction = 2;","after":"uint256 public constant max_tokens_per_transaction = 2;","contract":"SolaStars","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public token_price = 200000000000000000;","after":"uint256 public constant token_price = 200000000000000000;","contract":"SolaStars","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public max_token_supply = 2000;","after":"uint256 public constant max_token_supply = 2000;","contract":"SolaStars","time":0}]}
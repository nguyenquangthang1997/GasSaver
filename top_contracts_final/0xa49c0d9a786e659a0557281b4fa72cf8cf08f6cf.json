{"time":830,"results":[{"type":"external-function ","before":"function createCollection(\n        string memory uri,\n        uint256 _total,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _amount,\n        uint256 _percent,\n        address _admin,\n        CurrencyType cType,\n        address _token,\n        address _stone\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (address) {\n        CollectionData memory collecData;\n\n        collecData.uri = uri;\n        collecData.total = _total;\n        collecData.startTime = _startTime;\n        collecData.endTime = _endTime;\n        collecData.amount = _amount;\n        collecData.percent = _percent;\n        collecData.admin = _admin;\n        collecData.factoryAddress = address(this);\n        collecData.farm = farm;\n        collecData.moneyHandler = moneyHandler;\n        collecData.treasury = treasury;\n        collecData.token = _token;\n        collecData.stone = _stone;\n\n        CollectionV2 collection = new CollectionV2(collecData);\n\n        collections.push(collection);\n\n        cards[address(collection)] = Card(\n            cType,\n            _amount,\n            _total,\n            _startTime,\n            _endTime,\n            _percent,\n            uri\n        );\n\n        giveRole(farm, address(collection));\n        giveRoleMnyHnd(moneyHandler, address(collection));\n\n        emit NewCollection(\n            uri,\n            _total,\n            _startTime,\n            _endTime,\n            _amount,\n            _percent,\n            _admin,\n            address(this),\n            uint8(cType)\n        );\n        return address(collection);\n    }","after":"function createCollection(\n        string calldata uri,\n        uint256 _total,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _amount,\n        uint256 _percent,\n        address _admin,\n        CurrencyType cType,\n        address _token,\n        address _stone\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (address) {\n        CollectionData memory collecData;\n\n        collecData.uri = uri;\n        collecData.total = _total;\n        collecData.startTime = _startTime;\n        collecData.endTime = _endTime;\n        collecData.amount = _amount;\n        collecData.percent = _percent;\n        collecData.admin = _admin;\n        collecData.factoryAddress = address(this);\n        collecData.farm = farm;\n        collecData.moneyHandler = moneyHandler;\n        collecData.treasury = treasury;\n        collecData.token = _token;\n        collecData.stone = _stone;\n\n        CollectionV2 collection = new CollectionV2(collecData);\n\n        collections.push(collection);\n\n        cards[address(collection)] = Card(\n            cType,\n            _amount,\n            _total,\n            _startTime,\n            _endTime,\n            _percent,\n            uri\n        );\n\n        giveRole(farm, address(collection));\n        giveRoleMnyHnd(moneyHandler, address(collection));\n\n        emit NewCollection(\n            uri,\n            _total,\n            _startTime,\n            _endTime,\n            _amount,\n            _percent,\n            _admin,\n            address(this),\n            uint8(cType)\n        );\n        return address(collection);\n    }","contract":"FactoryV2","time":0},{"type":"external-function ","before":"function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amount_\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(available > ids.length, \"Sold Out\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!(soldCards.contains(ids[i])), \"This card already sold\");\n        }\n\n        _mintBatch(to, ids, amount_, \"\");\n\n        available -= ids.length;\n        sold += ids.length;\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            soldCards.add(ids[i]);\n        }\n    }","after":"function mintBatch(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amount_\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(available > ids.length, \"Sold Out\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!(soldCards.contains(ids[i])), \"This card already sold\");\n        }\n\n        _mintBatch(to, ids, amount_, \"\");\n\n        available -= ids.length;\n        sold += ids.length;\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            soldCards.add(ids[i]);\n        }\n    }","contract":"CollectionV2","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","contract":"CollectionV2","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","contract":"CollectionV2","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public percent;","after":"uint256 public immutable percent;","contract":"CollectionV2","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public total;","after":"uint256 public immutable total;","contract":"CollectionV2","time":0},{"type":"immutable-restrict-modification ","before":"address public facAddress;","after":"address public immutable facAddress;","contract":"CollectionV2","time":0},{"type":"external-function ","before":"function redeem(\n        address collection,\n        address _token,\n        address[] memory payees,\n        uint256[] memory sharePerc_\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(payees.length > 0, \"redeem: no payees\");\n        require(payees.length == sharePerc_.length, \"redeem: no payees\");\n\n        _totalCllcAmnt = collectionMoney[collection];\n\n        require(_totalCllcAmnt > 0, \"redeem: insufficient funds\");\n\n        uint256 totalShareAmount;\n\n        for (uint256 i = 0; i < sharePerc_.length; i++) {\n            totalShareAmount = totalShareAmount.add(\n                getAmountPer(_totalCllcAmnt, sharePerc_[i])\n            );\n        }\n\n        require(\n            _totalCllcAmnt >= totalShareAmount,\n            \"redeem: the total amount in the contract must be equal to or greater than the amount to be withdraw\"\n        );\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], sharePerc_[i], collection, _token);\n        }\n    }","after":"function redeem(\n        address collection,\n        address _token,\n        address[] calldata payees,\n        uint256[] calldata sharePerc_\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(payees.length > 0, \"redeem: no payees\");\n        require(payees.length == sharePerc_.length, \"redeem: no payees\");\n\n        _totalCllcAmnt = collectionMoney[collection];\n\n        require(_totalCllcAmnt > 0, \"redeem: insufficient funds\");\n\n        uint256 totalShareAmount;\n\n        for (uint256 i = 0; i < sharePerc_.length; i++) {\n            totalShareAmount = totalShareAmount.add(\n                getAmountPer(_totalCllcAmnt, sharePerc_[i])\n            );\n        }\n\n        require(\n            _totalCllcAmnt >= totalShareAmount,\n            \"redeem: the total amount in the contract must be equal to or greater than the amount to be withdraw\"\n        );\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], sharePerc_[i], collection, _token);\n        }\n    }","contract":"MoneyHandler","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public limit = 10000 ether;","after":"uint256 public constant limit = 10000 ether;","contract":"FarmV2","time":0}]}
{"time":138,"results":[{"type":"external-function ","before":";\n\n        // Check proper amount sent\n        require(msg.value == amount * dutchAuctionPrice(), \"Send proper ETH amount\");\n\n        _mintWithoutValidation(msg.sender, amount, false);\n    }\n\n    function whitelistMint(uint amount, uint totalAllocation, bytes32 leaf, bytes32[] memory proof) external payable {\n        // Create storage element tracking user mints if this is the first mint for them\n        if (!whitelistUsed[msg.sender]) {        \n            // Verify that (msg.sender, amount) correspond to Merkle leaf\n            require(keccak256(abi.encodePacked(msg.sender, totalAllocation)) == leaf, \"Sender and amount don't match Merkle leaf\");\n\n            // Verify that (leaf, proof) matches the Merkle root\n            require(verify(merkleRoot, leaf, proof), \"Not a valid leaf in the Merkle tree\");\n\n            whitelistUsed[msg.sender] = true;\n            whitelistRemaining[msg.sender] = totalAllocation;\n        }\n\n        // Require nonzero amount\n        require(amount > 0, \"Can't mint zero\");\n\n        // Check proper amount sent\n        require(msg.value == amount * presaleMintPrice, \"Send proper ETH amount\");\n\n        require(whiteli","after":";\n\n        // Check proper amount sent\n        require(msg.value == amount * dutchAuctionPrice(), \"Send proper ETH amount\");\n\n        _mintWithoutValidation(msg.sender, amount, false);\n    }\n\n    function whitelistMint(uint amount, uint totalAllocation, bytes32 leaf, bytes32[] memory proof) external payable {\n        // Create storage element tracking user mints if this is the first mint for them\n        if (!whitelistUsed[msg.sender]) {        \n            // Verify that (msg.sender, amount) correspond to Merkle leaf\n            require(keccak256(abi.encodePacked(msg.sender, totalAllocation)) == leaf, \"Sender and amount don't match Merkle leaf\");\n\n            // Verify that (leaf, proof) matches the Merkle root\n            require(verify(merkleRoot, leaf, proof), \"Not a valid leaf in the Merkle tree\");\n\n            whitelistUsed[msg.sender] = true;\n            whitelistRemaining[msg.sender] = totalAllocation;\n        }\n\n        // Require nonzero amount\n        require(amount > 0, \"Can't mint zero\");\n\n        // Check proper amount sent\n        require(msg.value == amount * presaleMintPrice, \"Send proper ETH amount\");\n\n        require(whiteli","contract":"GenF","time":0},{"type":"external-function ","before":"\n\n    function verify(bytes32 root, bytes32 leaf, bytes32[] memory proof) public pure returns (bool) {\n   ","after":"\n\n    function verify(bytes32 root, bytes32 leaf, bytes32[] memory proof) public pure returns (bool) {\n   ","contract":"GenF","time":0},{"type":"external-function ","before":"cipient) external onlyOwner {\n        recipient = _recipient;\n    }\n\n    function setStartTimestamp(uint _startTimestam","after":"cipient) external onlyOwner {\n        recipient = _recipient;\n    }\n\n    function setStartTimestamp(uint _startTimestam","contract":"GenF","time":0}]}
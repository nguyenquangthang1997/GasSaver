{"time":129,"results":[{"type":"external-function ","before":"function setURI(string memory newuri) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setURI(newuri);\n    }","contract":"Tokens1155","time":0},{"type":"external-function ","before":"function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\n        public\n        onlyRole(MINTER_ROLE)\n    {\n        if(ids[0] <= 10000) { // Fungible zone\n            for (uint256 i = 0; i < ids.length; i++) {\n                require(ids[i] <= 10000, \"Fungible ID must be below 10000\");\n            }\n        } else { // Non-fungible zone\n            for (uint256 i = 0; i < ids.length; i++) {\n                require(ids[i] == minimumId + i + 1, \"IDs are not incremental\");\n            }\n            minimumId += ids.length;\n        }\n\n        _mintBatch(to, ids, amounts, data);\n    }","after":"function mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data)\n        public\n        onlyRole(MINTER_ROLE)\n    {\n        if(ids[0] <= 10000) { // Fungible zone\n            for (uint256 i = 0; i < ids.length; i++) {\n                require(ids[i] <= 10000, \"Fungible ID must be below 10000\");\n            }\n        } else { // Non-fungible zone\n            for (uint256 i = 0; i < ids.length; i++) {\n                require(ids[i] == minimumId + i + 1, \"IDs are not incremental\");\n            }\n            minimumId += ids.length;\n        }\n\n        _mintBatch(to, ids, amounts, data);\n    }","contract":"Tokens1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Tokens1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Tokens1155","time":0}]}
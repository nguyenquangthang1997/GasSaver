{"time":169,"results":[{"type":"state-data-arrangement ","before":"\n�░░░░░░░▌▐░▌  ▐░\n▐░▌\n▐░█▀▀▀▀▀�\n��░▌ ▀▀▀▀▀▀▀\n�█░▌     ▐░▌     ▐░█▀▀�\n�▀▀█░▌▐░▌   ▐░▌ ▐░▌\n��▌       ▐░▌          ▐░▌     ▐░▌     ▐░▌       �\n��▐░▌    ▐░▌▐░▌\n▐░█▄▄▄▄▄▄�\n░▌ ▄▄▄▄▄▄▄▄▄█░▌ ▄�\n��█░█▄▄▄▄ ▐░▌       ▐\n▐░▌     ▐░▐░▌\n�\n��░░░░░░░�\n▌▐░░░░░�","after":"�░░░░░░░▌▐░▌  ▐░\n▐░▌\n▐░█▀▀▀▀▀�\n��░▌ ▀▀▀▀▀▀▀\n�█░▌     ▐░▌     ▐░█▀▀�\n�▀▀█░▌▐░▌   ▐░▌ ▐░▌\n��▐░▌    ▐░▌▐░▌\n▐░█▄▄▄▄▄▄�\n░▌ ▄▄▄▄▄▄▄▄▄█░▌ ▄�\n��█░█▄▄▄▄ ▐░▌       ▐\n��▌       ▐░▌          ▐░▌     ▐░▌     ▐░▌       �\n▐░▌     ▐░▐░▌\n�\n��░░░░░░░�\n▌▐░░░░░�\n","contract":"Holiday_8sian_CNY","time":0},{"type":"external-function ","before":"codePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(abi.encodePacked(msg.sender, SIG_WORD, _nonce))\n            )\n        );\n        return SIGNER_ADDRESS == hash.recover(signature);\n    }\n\n    function togglePrivateSaleStatus() external onlyOwner {\n        privateLive = !privateLive;\n    }\n\n    function togglePublicSaleStatus() external onlyOwner {\n        publicLive = !publicLive;\n    }\n\n    function setPrice(uint256 price) external onlyOwner {\n        PUBLIC_SALE_PRICE = price;\n    }\n\n    function addSeas","after":"codePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(abi.encodePacked(msg.sender, SIG_WORD, _nonce))\n            )\n        );\n        return SIGNER_ADDRESS == hash.recover(signature);\n    }\n\n    function togglePrivateSaleStatus() external onlyOwner {\n        privateLive = !privateLive;\n    }\n\n    function togglePublicSaleStatus() external onlyOwner {\n        publicLive = !publicLive;\n    }\n\n    function setPrice(uint256 price) external onlyOwner {\n        PUBLIC_SALE_PRICE = price;\n    }\n\n    function addSeas","contract":"Holiday_8sian_CNY","time":0},{"type":"external-function ","before":"ns(uint256 amount, bool newSeason)\n        external\n        onlyOwner\n    {\n        if (newSeason) {\n            currentSeason = currentSeason + 1;\n            for (uint256 i = 0; i < amount; i++) {\n                seasonTokens[currentSeason].push(_currentTokenID + i);\n            }\n        }\n        _currentTokenID = _currentTokenID + amount;\n    }\n\n    function changeSeason(uint32 season) external onlyOwner {\n        currentSeason = season;\n    }\n\n    function privateMint(bytes memory signature, uint256 id) external {\n        require(privateLive, \"PRIVATE_SALE_IS_NOT_ACTIVE\");\n        require(id < _currentTokenID, \"ID_DOES_NOT_EXIST\");\n        require(totalSupply(id) < MAX_TOKENS, \"EXCEED_MAX_TOKENS\");\n        require(\n            matchAddresSigner(signature, currentSeason),\n            \"DIRECT_MINT_DISALLOWED\"\n        );\n        require(!buyersList[currentSeason][msg.sender], \"ALREADY_MINTED\");\n\n        buyersList[currentSeason][msg.sender] = true;\n        _mint(msg.sender, id, 1, \"\");\n    }\n\n    function publicMint(\n        bytes memory signature,\n        uint256[] calldata ids,\n","after":"ns(uint256 amount, bool newSeason)\n        external\n        onlyOwner\n    {\n        if (newSeason) {\n            currentSeason = currentSeason + 1;\n            for (uint256 i = 0; i < amount; i++) {\n                seasonTokens[currentSeason].push(_currentTokenID + i);\n            }\n        }\n        _currentTokenID = _currentTokenID + amount;\n    }\n\n    function changeSeason(uint32 season) external onlyOwner {\n        currentSeason = season;\n    }\n\n    function privateMint(bytes memory signature, uint256 id) external {\n        require(privateLive, \"PRIVATE_SALE_IS_NOT_ACTIVE\");\n        require(id < _currentTokenID, \"ID_DOES_NOT_EXIST\");\n        require(totalSupply(id) < MAX_TOKENS, \"EXCEED_MAX_TOKENS\");\n        require(\n            matchAddresSigner(signature, currentSeason),\n            \"DIRECT_MINT_DISALLOWED\"\n        );\n        require(!buyersList[currentSeason][msg.sender], \"ALREADY_MINTED\");\n\n        buyersList[currentSeason][msg.sender] = true;\n        _mint(msg.sender, id, 1, \"\");\n    }\n\n    function publicMint(\n        bytes memory signature,\n        uint256[] calldata ids,\n","contract":"Holiday_8sian_CNY","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Holiday_8sian_CNY","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Holiday_8sian_CNY","time":0},{"type":"constant-restrict-modification  ","before":"�░░░░░░░▌▐░▌  ▐░","after":"�░░░░░░░▌▐░▌  ▐░","contract":"Holiday_8sian_CNY","time":0},{"type":"constant-restrict-modification  ","before":"��░▌ ▀▀▀▀▀▀▀","after":"��░▌ ▀▀▀▀▀▀▀","contract":"Holiday_8sian_CNY","time":0},{"type":"constant-restrict-modification  ","before":"��▌       ▐░▌          ▐░▌     ▐░▌     ▐░▌       �","after":"��▌       ▐░▌          ▐░▌     ▐░▌     ▐░▌       �","contract":"Holiday_8sian_CNY","time":0}]}
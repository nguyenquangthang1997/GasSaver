{"time":139,"results":[{"type":"state-data-arrangement ","before":"\nstring public baseURI;\nstring public baseExtension = \".json\";\nuint256 public cost = 0.15 ether;\nuint256 public maxLimit = 10000;\nuint256 public maxSupply = 5000;\nuint256 public maxMintAmountPerTx = 2;\nbool public paused = true;\nbool public presaleActive = false;\nbytes32 private seedPhrase = 0x6abe10cdef935bbc20e799c9ecc3ed3f94f70081687588d1fc0e81319936e6d8;\nbytes32 public merkleRoot = 0x6a3375101d42b3eb58b92e7bbc169175139f15e27519e2db3921c814d42f72f8;\nmapping(address => uint256) public whiteListMintedNFTs;\nuint256 public contractOwnerNFTs = 225;\nuint256 public mintedByOwner = 0;\nuint256 public publicNFTStartingTokenId = 225;\naddress payable private contractOwner;","after":"string public baseURI;\nstring public baseExtension = \".json\";\nuint256 public cost = 0.15 ether;\nuint256 public maxLimit = 10000;\nuint256 public maxSupply = 5000;\nuint256 public maxMintAmountPerTx = 2;\nbytes32 private seedPhrase = 0x6abe10cdef935bbc20e799c9ecc3ed3f94f70081687588d1fc0e81319936e6d8;\nbytes32 public merkleRoot = 0x6a3375101d42b3eb58b92e7bbc169175139f15e27519e2db3921c814d42f72f8;\nmapping(address => uint256) public whiteListMintedNFTs;\nuint256 public contractOwnerNFTs = 225;\nuint256 public mintedByOwner = 0;\nuint256 public publicNFTStartingTokenId = 225;\naddress payable private contractOwner;\nbool public paused = true;\nbool public presaleActive = false;\n","contract":"Mempo","time":0},{"type":"external-function ","before":"function mint(string memory phrase, uint256 _mintAmount) public payable {\n        require(!paused, \"the contract is paused\");\n        require(!presaleActive, \"Can not use this function during presale\");\n        require(msg.value >= cost * _mintAmount, \"insufficient funds\");\n        require(\n            msg.sender != owner(),\n            \"This function can only be called by an outsider\"\n        );\n        bytes32 hashedWord = sha256(abi.encodePacked(phrase));\n        require(hashedWord == seedPhrase, \"Password doesn't match\");\n        require(\n            _mintAmount > 0 && _mintAmount <= maxMintAmountPerTx,\n            \"max mint amount per session exceeded\"\n        );\n\n        uint256 supply = totalSupply();\n        require(\n            supply + _mintAmount <= maxSupply,\n            \"max NFT limit exceeded, Try minting less NFTs\"\n        );\n\n        for (uint256 i = 0; i < _mintAmount; i++) {\n            _safeMint(msg.sender, publicNFTStartingTokenId+i);   \n        }\n        publicNFTStartingTokenId = publicNFTStartingTokenId + _mintAmount;\n        contractOwner.transfer(address(this).balance);\n    }","after":"function mint(string calldata phrase, uint256 _mintAmount) public payable {\n        require(!paused, \"the contract is paused\");\n        require(!presaleActive, \"Can not use this function during presale\");\n        require(msg.value >= cost * _mintAmount, \"insufficient funds\");\n        require(\n            msg.sender != owner(),\n            \"This function can only be called by an outsider\"\n        );\n        bytes32 hashedWord = sha256(abi.encodePacked(phrase));\n        require(hashedWord == seedPhrase, \"Password doesn't match\");\n        require(\n            _mintAmount > 0 && _mintAmount <= maxMintAmountPerTx,\n            \"max mint amount per session exceeded\"\n        );\n\n        uint256 supply = totalSupply();\n        require(\n            supply + _mintAmount <= maxSupply,\n            \"max NFT limit exceeded, Try minting less NFTs\"\n        );\n\n        for (uint256 i = 0; i < _mintAmount; i++) {\n            _safeMint(msg.sender, publicNFTStartingTokenId+i);   \n        }\n        publicNFTStartingTokenId = publicNFTStartingTokenId + _mintAmount;\n        contractOwner.transfer(address(this).balance);\n    }","contract":"Mempo","time":0},{"type":"constant-restrict-modification  ","before":"string public baseExtension = \".json\";","after":"string public constant baseExtension = \".json\";","contract":"Mempo","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxLimit = 10000;","after":"uint256 public constant maxLimit = 10000;","contract":"Mempo","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public contractOwnerNFTs = 225;","after":"uint256 public constant contractOwnerNFTs = 225;","contract":"Mempo","time":0},{"type":"immutable-restrict-modification ","before":"address payable private contractOwner;","after":"address payable private immutable contractOwner;","contract":"Mempo","time":0}]}
{"time":148,"results":[{"type":"external-function ","before":"function addpass(\r\n        bytes32 _merkleRoot, \r\n        uint256 _maxSupply,            \r\n        string memory _ipfsMetadataHash,\r\n        address _burnContract,\r\n        address _claimContract\r\n    ) public onlyOwner {\r\n        Pass storage p = passes[counter.current()];\r\n        p.merkleRoot = _merkleRoot;\r\n        p.maxSupply = _maxSupply;                                        \r\n        p.ipfsMetadataHash = _ipfsMetadataHash;\r\n        p.burnContract = _burnContract;\r\n        p.claimContract = _claimContract;\r\n        counter.increment();\r\n    }","after":"function addpass(\r\n        bytes32 _merkleRoot, \r\n        uint256 _maxSupply,            \r\n        string calldata _ipfsMetadataHash,\r\n        address _burnContract,\r\n        address _claimContract\r\n    ) public onlyOwner {\r\n        Pass storage p = passes[counter.current()];\r\n        p.merkleRoot = _merkleRoot;\r\n        p.maxSupply = _maxSupply;                                        \r\n        p.ipfsMetadataHash = _ipfsMetadataHash;\r\n        p.burnContract = _burnContract;\r\n        p.claimContract = _claimContract;\r\n        counter.increment();\r\n    }","contract":"CritterPasses","time":0},{"type":"external-function ","before":"function editpass(\r\n        bytes32 _merkleRoot,      \r\n        string memory _ipfsMetadataHash,\r\n        address _burnContract,\r\n        address _claimContract,\r\n        uint256 _passIndex\r\n    ) external onlyOwner {\r\n        require(exists(_passIndex), \"Editpass: pass does not exist\");\r\n        passes[_passIndex].merkleRoot = _merkleRoot;                   \r\n        passes[_passIndex].ipfsMetadataHash = _ipfsMetadataHash;  \r\n        passes[_passIndex].burnContract = _burnContract;  \r\n        passes[_passIndex].claimContract = _claimContract;\r\n    }","after":"function editpass(\r\n        bytes32 _merkleRoot,      \r\n        string calldata _ipfsMetadataHash,\r\n        address _burnContract,\r\n        address _claimContract,\r\n        uint256 _passIndex\r\n    ) external onlyOwner {\r\n        require(exists(_passIndex), \"Editpass: pass does not exist\");\r\n        passes[_passIndex].merkleRoot = _merkleRoot;                   \r\n        passes[_passIndex].ipfsMetadataHash = _ipfsMetadataHash;  \r\n        passes[_passIndex].burnContract = _burnContract;  \r\n        passes[_passIndex].claimContract = _claimContract;\r\n    }","contract":"CritterPasses","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"CritterPasses","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"CritterPasses","time":0}]}
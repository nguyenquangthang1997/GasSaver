{"time":147,"results":[{"type":"external-function ","before":"   function addPool(\n        uint256 _allocPoint,\n        address _lpToken,\n        string memory _uuid, \n        bytes[] memory _sigs\n    ) public checkSig(_uuid, _sigs) {\n        checkPoolDuplicate(IERC20(_lpToken));\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n        poolInfo.push(\n            PoolInfo({\n                lpToken: IERC20(_lpToken),\n                allocPoint: _allocPoint,\n                lastRewardBlock: block.number,\n                accAngryPerShare: 0,\n                stakeAmount: 0\n            })\n        );\n        emit PoolAdd(_allocPoint,_lpToken, poolInfo.length-1);\n  ","after":"   function addPool(\n        uint256 _allocPoint,\n        address _lpToken,\n        string calldata _uuid, \n        bytes[] calldata _sigs\n    ) public checkSig(_uuid, _sigs) {\n        checkPoolDuplicate(IERC20(_lpToken));\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n        poolInfo.push(\n            PoolInfo({\n                lpToken: IERC20(_lpToken),\n                allocPoint: _allocPoint,\n                lastRewardBlock: block.number,\n                accAngryPerShare: 0,\n                stakeAmount: 0\n            })\n        );\n        emit PoolAdd(_allocPoint,_lpToken, poolInfo.length-1);\n  ","contract":"AngryMining","time":0},{"type":"external-function ","before":"   function changePool(\n        uint256 _pid,\n        uint256 _allocPoint,\n        string memory _uuid, \n        bytes[] memory _sigs\n    ) public validPool(_pid) checkSig(_uuid, _sigs) {\n        require( _allocPoint > 0, \"invalid allocPoint!\" );\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit PoolChange(_pid, _allocPoint);\n  ","after":"   function changePool(\n        uint256 _pid,\n        uint256 _allocPoint,\n        string calldata _uuid, \n        bytes[] calldata _sigs\n    ) public validPool(_pid) checkSig(_uuid, _sigs) {\n        require( _allocPoint > 0, \"invalid allocPoint!\" );\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit PoolChange(_pid, _allocPoint);\n  ","contract":"AngryMining","time":0},{"type":"external-function ","before":"   function changeAdmin(uint256 _index, address _newAddress, string memory _uuid, bytes[] memory _sigs) public checkSig(_uuid, _sigs) {\n        require(_index < adminList.length, \"index out of range!\");\n        emit AdminChange(adminList[_index], _newAddress);\n        adminList[_index] = _newAddress;\n  ","after":"   function changeAdmin(uint256 _index, address _newAddress, string calldata _uuid, bytes[] calldata _sigs) public checkSig(_uuid, _sigs) {\n        require(_index < adminList.length, \"index out of range!\");\n        emit AdminChange(adminList[_index], _newAddress);\n        adminList[_index] = _newAddress;\n  ","contract":"AngryMining","time":0},{"type":"external-function ","before":"   function changeRewardsPerBlock(uint256 _angryPerBlock, string memory _uuid, bytes[] memory _sigs) public checkSig(_uuid, _sigs){\n        emit RewardsPerBlockChange(angryPerBlock,_angryPerBlock);\n        angryPerBlock = _angryPerBlock;\n  ","after":"   function changeRewardsPerBlock(uint256 _angryPerBlock, string calldata _uuid, bytes[] calldata _sigs) public checkSig(_uuid, _sigs){\n        emit RewardsPerBlockChange(angryPerBlock,_angryPerBlock);\n        angryPerBlock = _angryPerBlock;\n  ","contract":"AngryMining","time":0}]}
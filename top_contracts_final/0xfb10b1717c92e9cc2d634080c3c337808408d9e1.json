{"time":127,"results":[{"type":"external-function ","before":"function mint(uint amount, string[] memory ipfsHashes) public onlyOwner {\n        require(totalSupply() + amount <= MAX_SUPPLY, \"Mint: max supply reached\");\n        require(amount == ipfsHashes.length, \"Mint: ipfs hash needed for each token\");\n\n        for(uint i = 0; i < amount; i++) {\n            uint256 tokenId = totalSupply() + 1;\n            \n            _mint(msg.sender, tokenId);\n            _setTokenURI(tokenId, ipfsHashes[i]);\n        }\n    }","after":"function mint(uint amount, string[] calldata ipfsHashes) public onlyOwner {\n        require(totalSupply() + amount <= MAX_SUPPLY, \"Mint: max supply reached\");\n        require(amount == ipfsHashes.length, \"Mint: ipfs hash needed for each token\");\n\n        for(uint i = 0; i < amount; i++) {\n            uint256 tokenId = totalSupply() + 1;\n            \n            _mint(msg.sender, tokenId);\n            _setTokenURI(tokenId, ipfsHashes[i]);\n        }\n    }","contract":"MetaHeroCore","time":0},{"type":"external-function ","before":"function updateIpfs(uint[] memory indexes, string[] memory ipfsHashes) external onlyOwner {\n        require(indexes.length == ipfsHashes.length, \"Update: ipfs hash needed for each token\");\n\n        for(uint i = 0; i < indexes.length; i++) {\n            _setTokenURI(indexes[i], ipfsHashes[i]);\n        }\n    }","after":"function updateIpfs(uint[] calldata indexes, string[] calldata ipfsHashes) external onlyOwner {\n        require(indexes.length == ipfsHashes.length, \"Update: ipfs hash needed for each token\");\n\n        for(uint i = 0; i < indexes.length; i++) {\n            _setTokenURI(indexes[i], ipfsHashes[i]);\n        }\n    }","contract":"MetaHeroCore","time":0},{"type":"external-function ","before":"function setArweaveAssets(string memory _arweaveAssets) external onlyOwner {\n        arweaveAssets = _arweaveAssets;\n    }","after":"function setArweaveAssets(string calldata _arweaveAssets) external onlyOwner {\n        arweaveAssets = _arweaveAssets;\n    }","contract":"MetaHeroCore","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseTokenURI) external onlyOwner {\n        baseTokenURI = _baseTokenURI;    \n    }","after":"function setBaseURI(string calldata _baseTokenURI) external onlyOwner {\n        baseTokenURI = _baseTokenURI;    \n    }","contract":"MetaHeroCore","time":0}]}
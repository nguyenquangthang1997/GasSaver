{"time":590,"results":[{"type":"external-function ","before":"function mintTokens(address _to, uint _count, uint _maxSupply, uint _maxMint, uint _price, bool _canMint, string memory _sessionId, bytes memory _signature) public payable saleIsOpen {\n    // verify the signature, it should be from owner\n    address signer = owner();\n    bool verified = verify(signer, _to, _maxSupply, _maxMint, _price, _canMint, _sessionId, _signature);\n    require(verified, \"Unable to verify the signature\");\n\n    require(totalSupply() + _count <= _maxSupply, \"Max limit\");\n    require(totalSupply() < _maxSupply, \"Sale end\");\n    require(_canMint, \"This user is not allowed to mint\");\n    require(_count < _maxMint, \"User can not mint more than maximum allowed at once\");\n\n    // Check used sessions\n    require(_usedSessions[_sessionId] == address(0), \"Duplicated session id\");\n\n    // Check the price\n    require(msg.value >= _count * _price, \"Sent value below price\");\n\n    // Assign to used sessions\n    _usedSessions[_sessionId] = _to;\n\n    for(uint i = 0; i < _count; i++){\n      uint256 newTokenId = totalSupply();\n      _safeMint(_to, newTokenId);\n      // Set token suffix after mint\n      string memory tokenURISuffix = string(abi.encodePacked(\"&userId=\", Strings.toHexString(uint256(uint160(_to))), \"&sessionId=\", _sessionId));\n      _setTokenURISuffix(newTokenId, tokenURISuffix);\n\n      // Emit mint event\n      emit Mint(_to, newTokenId, _sessionId);\n    }\n  }","after":"function mintTokens(address _to, uint _count, uint _maxSupply, uint _maxMint, uint _price, bool _canMint, string calldata _sessionId, bytes calldata _signature) public payable saleIsOpen {\n    // verify the signature, it should be from owner\n    address signer = owner();\n    bool verified = verify(signer, _to, _maxSupply, _maxMint, _price, _canMint, _sessionId, _signature);\n    require(verified, \"Unable to verify the signature\");\n\n    require(totalSupply() + _count <= _maxSupply, \"Max limit\");\n    require(totalSupply() < _maxSupply, \"Sale end\");\n    require(_canMint, \"This user is not allowed to mint\");\n    require(_count < _maxMint, \"User can not mint more than maximum allowed at once\");\n\n    // Check used sessions\n    require(_usedSessions[_sessionId] == address(0), \"Duplicated session id\");\n\n    // Check the price\n    require(msg.value >= _count * _price, \"Sent value below price\");\n\n    // Assign to used sessions\n    _usedSessions[_sessionId] = _to;\n\n    for(uint i = 0; i < _count; i++){\n      uint256 newTokenId = totalSupply();\n      _safeMint(_to, newTokenId);\n      // Set token suffix after mint\n      string memory tokenURISuffix = string(abi.encodePacked(\"&userId=\", Strings.toHexString(uint256(uint160(_to))), \"&sessionId=\", _sessionId));\n      _setTokenURISuffix(newTokenId, tokenURISuffix);\n\n      // Emit mint event\n      emit Mint(_to, newTokenId, _sessionId);\n    }\n  }","contract":"CryptoGemAlliance","time":0}]}
{"time":140,"results":[{"type":"external-function ","before":"function whitelistMint(bytes memory signature, uint256 quantity)\n    external payable\n    validSignature(signature, 1)\n    whitelistActive()\n    {\n        require(_whitelistMinted[msg.sender] + quantity <= whitelistMaxMint, 'MINT: Quantity is too high');\n        require(msg.value == quantity * whitelistPrice, 'MINT: Value is too low');\n        _whitelistMinted[msg.sender] += quantity;\n        for(uint256 i = 0; i < quantity; i++) {\n            if(_tokenIdTracker.current() < maxForSale) {\n                _mintSale(msg.sender);\n            }\n        }\n    }","after":"function whitelistMint(bytes calldata signature, uint256 quantity)\n    external payable\n    validSignature(signature, 1)\n    whitelistActive()\n    {\n        require(_whitelistMinted[msg.sender] + quantity <= whitelistMaxMint, 'MINT: Quantity is too high');\n        require(msg.value == quantity * whitelistPrice, 'MINT: Value is too low');\n        _whitelistMinted[msg.sender] += quantity;\n        for(uint256 i = 0; i < quantity; i++) {\n            if(_tokenIdTracker.current() < maxForSale) {\n                _mintSale(msg.sender);\n            }\n        }\n    }","contract":"Fbomb","time":0},{"type":"external-function ","before":"function presaleMint(bytes memory signature, uint256 quantity)\n    external payable\n    validSignature(signature, 2)\n    presaleActive()\n    {\n        require(_presaleMinted[msg.sender] + quantity <= presaleMaxMint, 'MINT: Quantity is too high');\n        require(msg.value == quantity * presalePrice, 'MINT: Value is too low');\n        _presaleMinted[msg.sender] += quantity;\n        for(uint256 i = 0; i < quantity; i++) {\n            if(_tokenIdTracker.current() < maxForSale) {\n                _mintSale(msg.sender);\n            }\n        }\n    }","after":"function presaleMint(bytes calldata signature, uint256 quantity)\n    external payable\n    validSignature(signature, 2)\n    presaleActive()\n    {\n        require(_presaleMinted[msg.sender] + quantity <= presaleMaxMint, 'MINT: Quantity is too high');\n        require(msg.value == quantity * presalePrice, 'MINT: Value is too low');\n        _presaleMinted[msg.sender] += quantity;\n        for(uint256 i = 0; i < quantity; i++) {\n            if(_tokenIdTracker.current() < maxForSale) {\n                _mintSale(msg.sender);\n            }\n        }\n    }","contract":"Fbomb","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseUri) external onlyOwner {\n        baseTokenURI = baseUri;\n    }","after":"function setBaseURI(string calldata baseUri) external onlyOwner {\n        baseTokenURI = baseUri;\n    }","contract":"Fbomb","time":0},{"type":"immutable-restrict-modification ","before":"address verifier;","after":"address immutable verifier;","contract":"Fbomb","time":0},{"type":"constant-restrict-modification  ","before":"string public hiddenTokenURI = 'ipfs://QmS8wQqihMheMStSfSXoCNrfJSswVX67QuXdFb98PyNnX5';","after":"string public constant hiddenTokenURI = 'ipfs://QmS8wQqihMheMStSfSXoCNrfJSswVX67QuXdFb98PyNnX5';","contract":"Fbomb","time":0}]}
{"time":130,"results":[{"type":"external-function ","before":"function mintBatch(address _to, uint[] memory _ids, uint[] memory _amounts) external adminOnly() {\r\n    _mintBatch(_to, _ids, _amounts, \"\");\r\n  }","after":"function mintBatch(address _to, uint[] calldata _ids, uint[] calldata _amounts) external adminOnly() {\r\n    _mintBatch(_to, _ids, _amounts, \"\");\r\n  }","contract":"WatcherMinter","time":0},{"type":"external-function ","before":"function burnBatch(uint[] memory _ids, uint[] memory _amounts) external {\r\n    _burnBatch(msg.sender, _ids, _amounts);\r\n  }","after":"function burnBatch(uint[] calldata _ids, uint[] calldata _amounts) external {\r\n    _burnBatch(msg.sender, _ids, _amounts);\r\n  }","contract":"WatcherMinter","time":0},{"type":"external-function ","before":"function burnForMint(address _from, uint[] memory _burnIds, uint[] memory _burnAmounts, uint[] memory _mintIds, uint[] memory _mintAmounts) external adminOnly() {\r\n    _burnBatch(_from, _burnIds, _burnAmounts);\r\n    _mintBatch(_from, _mintIds, _mintAmounts, \"\");\r\n  }","after":"function burnForMint(address _from, uint[] calldata _burnIds, uint[] calldata _burnAmounts, uint[] calldata _mintIds, uint[] calldata _mintAmounts) external adminOnly() {\r\n    _burnBatch(_from, _burnIds, _burnAmounts);\r\n    _mintBatch(_from, _mintIds, _mintAmounts, \"\");\r\n  }","contract":"WatcherMinter","time":0},{"type":"external-function ","before":"function setURI(uint _id, string memory _uri) external adminOnly() {\r\n    require(bytes(tokenURI[_id]).length == 0);\r\n    tokenURI[_id] = _uri;\r\n\r\n    _setRoyalties(_id, royaltyAddress, 1000);\r\n\r\n    emit URI(_uri, _id);\r\n  }","after":"function setURI(uint _id, string calldata _uri) external adminOnly() {\r\n    require(bytes(tokenURI[_id]).length == 0);\r\n    tokenURI[_id] = _uri;\r\n\r\n    _setRoyalties(_id, royaltyAddress, 1000);\r\n\r\n    emit URI(_uri, _id);\r\n  }","contract":"WatcherMinter","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"WatcherMinter","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"WatcherMinter","time":0},{"type":"constant-restrict-modification  ","before":"string public contractURI = \"QmdqrVASguJRJHAzbfys3xdfbhLCTyKogGNyQiDQeNSgss\";","after":"string public constant contractURI = \"QmdqrVASguJRJHAzbfys3xdfbhLCTyKogGNyQiDQeNSgss\";","contract":"WatcherMinter","time":1},{"type":"constant-restrict-modification  ","before":"bytes32 public OWNER_ROLE = keccak256(\"OWNER_ROLE\");","after":"bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");","contract":"WatcherMinter","time":1},{"type":"constant-restrict-modification  ","before":"bytes32 public ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");","after":"bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");","contract":"WatcherMinter","time":1},{"type":"immutable-restrict-modification ","before":"address public owner;","after":"address public immutable owner;","contract":"WatcherMinter","time":1},{"type":"constant-restrict-modification  ","before":"address payable public royaltyAddress = payable(0x21ff1ac88a4A7c07C7573132f976D05B259632EE);","after":"address payable public constant royaltyAddress = payable(0x21ff1ac88a4A7c07C7573132f976D05B259632EE);","contract":"WatcherMinter","time":1}]}
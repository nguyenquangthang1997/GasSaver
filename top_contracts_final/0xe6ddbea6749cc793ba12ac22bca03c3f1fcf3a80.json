{"time":309,"results":[{"type":"immutable-restrict-modification ","before":"uint256 public ownerCut;","after":"uint256 public immutable ownerCut;","contract":"MarsGenesisAuction","time":0},{"type":"immutable-restrict-modification ","before":"address _deployerAddress;","after":"address immutable _deployerAddress;","contract":"MarsGenesisAuction","time":0},{"type":"struct-data-arrangement ","before":"\nbool isForSale\nuint tokenId\naddress seller\nuint minValue","after":"uint tokenId\nuint minValue\naddress seller\nbool isForSale\n","contract":"MarsGenesisAuctionBase","time":0},{"type":"struct-data-arrangement ","before":"\nbool hasBid\nuint tokenId\naddress bidder\nuint value","after":"uint tokenId\nuint value\naddress bidder\nbool hasBid\n","contract":"MarsGenesisAuctionBase","time":0},{"type":"external-function ","before":"function mintLand(bool isPromo, string memory topLeftLatLong, string memory bottomRightLatLong, bytes memory signature, string memory ipfsHash, string memory metadataURI, uint cardId, address promoOwner) external payable returns (uint) {\n        if (isPromo == true) {\n            require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"INVALID_ROLE\");\n            require(_hashes[ipfsHash] != 1, \"HASH_EXISTS\");\n            require(_promoTokenIdTracker.current() < MAX_PROMO_LANDS, \"LIMIT_REACHED\");\n            _promoTokenIdTracker.increment();\n        } else {\n            require(msg.value >= _currentPrice(), \"PAYMENT_TOO_LOW\");\n            require(_hashes[ipfsHash] != 1, \"HASH_EXISTS\");\n            bytes32 hash = keccak256(abi.encodePacked(topLeftLatLong, bottomRightLatLong, address(this), cardId, msg.sender));\n            address signer = _recoverSigner(hash, signature);\n            require(signer == _deployerAddress, \"INVALID_SIGNATURE\");\n        }\n        address landOwner;\n        if (isPromo == true) {\n            landOwner = promoOwner;\n        } else {\n            landOwner = _msgSender();\n        }\n\n        uint newTokenId = _mintLand(landOwner, topLeftLatLong, bottomRightLatLong, ipfsHash, metadataURI, cardId);\n        return newTokenId;\n    }","after":"function mintLand(bool isPromo, string calldata topLeftLatLong, string calldata bottomRightLatLong, bytes calldata signature, string calldata ipfsHash, string calldata metadataURI, uint cardId, address promoOwner) external payable returns (uint) {\n        if (isPromo == true) {\n            require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"INVALID_ROLE\");\n            require(_hashes[ipfsHash] != 1, \"HASH_EXISTS\");\n            require(_promoTokenIdTracker.current() < MAX_PROMO_LANDS, \"LIMIT_REACHED\");\n            _promoTokenIdTracker.increment();\n        } else {\n            require(msg.value >= _currentPrice(), \"PAYMENT_TOO_LOW\");\n            require(_hashes[ipfsHash] != 1, \"HASH_EXISTS\");\n            bytes32 hash = keccak256(abi.encodePacked(topLeftLatLong, bottomRightLatLong, address(this), cardId, msg.sender));\n            address signer = _recoverSigner(hash, signature);\n            require(signer == _deployerAddress, \"INVALID_SIGNATURE\");\n        }\n        address landOwner;\n        if (isPromo == true) {\n            landOwner = promoOwner;\n        } else {\n            landOwner = _msgSender();\n        }\n\n        uint newTokenId = _mintLand(landOwner, topLeftLatLong, bottomRightLatLong, ipfsHash, metadataURI, cardId);\n        return newTokenId;\n    }","contract":"MarsGenesisCore","time":0},{"type":"immutable-restrict-modification ","before":"address private _deployerAddress;","after":"address private immutable _deployerAddress;","contract":"MarsGenesisCore","time":1},{"type":"struct-data-arrangement ","before":"\naddress founder\nuint equity\nbool approved\nbool isRemoval","after":"uint equity\naddress founder\nbool approved\nbool isRemoval\n","contract":"MarsGenesisWallet","time":0},{"type":"immutable-restrict-modification ","before":"address private _deployerAddress;","after":"address private immutable _deployerAddress;","contract":"MarsGenesisWallet","time":1}]}
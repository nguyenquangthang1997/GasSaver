{"time":34,"results":[{"type":"external-function ","before":"function register(string memory _name, address _beneficiary) public {\n        // Check gas price\n        require(tx.gasprice <= maxGasPrice, \"Maximum gas price allowed exceeded\");\n        // Check for valid beneficiary\n        require(_beneficiary != address(0), \"Invalid beneficiary\");\n\n        // Check if the name is valid\n        _requireNameValid(_name);\n        // Check if the sender has at least `price` and the contract has allowance to use on its behalf\n        _requireBalance(msg.sender);\n\n        // Register the name\n        registrar.register(_name, _beneficiary);\n        // Debit `price` from sender\n        acceptedToken.transferFrom(msg.sender, address(this), PRICE);\n        // Burn it\n        acceptedToken.burn(PRICE);\n        // Log\n        emit NameBought(msg.sender, _beneficiary, PRICE, _name);\n    }","after":"function register(string calldata _name, address _beneficiary) public {\n        // Check gas price\n        require(tx.gasprice <= maxGasPrice, \"Maximum gas price allowed exceeded\");\n        // Check for valid beneficiary\n        require(_beneficiary != address(0), \"Invalid beneficiary\");\n\n        // Check if the name is valid\n        _requireNameValid(_name);\n        // Check if the sender has at least `price` and the contract has allowance to use on its behalf\n        _requireBalance(msg.sender);\n\n        // Register the name\n        registrar.register(_name, _beneficiary);\n        // Debit `price` from sender\n        acceptedToken.transferFrom(msg.sender, address(this), PRICE);\n        // Burn it\n        acceptedToken.burn(PRICE);\n        // Log\n        emit NameBought(msg.sender, _beneficiary, PRICE, _name);\n    }","contract":"DCLController","time":0}]}
{"time":138,"results":[{"type":"external-function ","before":"function setContractURI(string memory contractUri) external onlyOwner {\n        contractMetadataURI = contractUri;\n        emit SetContractURI(msg.sender, contractUri);\n    }","after":"function setContractURI(string calldata contractUri) external onlyOwner {\n        contractMetadataURI = contractUri;\n        emit SetContractURI(msg.sender, contractUri);\n    }","contract":"WrappedPixereum","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseUri) external onlyOwner {\n        baseURI = baseUri;\n        emit SetBaseURI(msg.sender, baseUri);\n    }","after":"function setBaseURI(string calldata baseUri) external onlyOwner {\n        baseURI = baseUri;\n        emit SetBaseURI(msg.sender, baseUri);\n    }","contract":"WrappedPixereum","time":0},{"type":"external-function ","before":"function setMessage(uint16 pixelNumber, string memory message)\n        external\n        onlyWrappedPixelOwner(pixelNumber)\n    {\n        pixereum.setMessage(pixelNumber, message);\n        emit SetMessage(msg.sender, pixelNumber, message);\n    }","after":"function setMessage(uint16 pixelNumber, string calldata message)\n        external\n        onlyWrappedPixelOwner(pixelNumber)\n    {\n        pixereum.setMessage(pixelNumber, message);\n        emit SetMessage(msg.sender, pixelNumber, message);\n    }","contract":"WrappedPixereum","time":0},{"type":"external-function ","before":"function wrap(\n        uint16 pixelNumber,\n        uint24 color,\n        string memory message\n    ) external payable {\n        require(maxSupply > pixelNumber, \"Invalid Pixel Number\");\n        (, , uint256 price, bool isSale) = pixereum.getPixel(pixelNumber);\n        require(isSale, \"Pixel Should Be On Sale\");\n        require(msg.value >= price, \"Insufficient msg.value\");\n\n        pixereum.buyPixel{value: msg.value}(\n            address(this),\n            pixelNumber,\n            color,\n            message\n        );\n\n        _mint(msg.sender, pixelNumber);\n\n        emit Wrap(msg.sender, pixelNumber);\n    }","after":"function wrap(\n        uint16 pixelNumber,\n        uint24 color,\n        string calldata message\n    ) external payable {\n        require(maxSupply > pixelNumber, \"Invalid Pixel Number\");\n        (, , uint256 price, bool isSale) = pixereum.getPixel(pixelNumber);\n        require(isSale, \"Pixel Should Be On Sale\");\n        require(msg.value >= price, \"Insufficient msg.value\");\n\n        pixereum.buyPixel{value: msg.value}(\n            address(this),\n            pixelNumber,\n            color,\n            message\n        );\n\n        _mint(msg.sender, pixelNumber);\n\n        emit Wrap(msg.sender, pixelNumber);\n    }","contract":"WrappedPixereum","time":0}]}
{"time":99,"results":[{"type":"external-function ","before":"function withdraw(address[] memory _owners, uint256[] memory _amounts, uint256[] memory _requestsIds) \n    external onlyMinter {\n      require(_owners.length == _amounts.length && _owners.length == _requestsIds.length, \"MainnetBridgePool: Arrays length not equal\");\n\n      for (uint256 i; i < _owners.length; i++) {\n        raini.safeTransfer(_owners[i], _amounts[i]);\n        emit Withdrawn(_owners[i], _amounts[i], _requestsIds[i]);\n      }\n  }","after":"function withdraw(address[] calldata _owners, uint256[] calldata _amounts, uint256[] calldata _requestsIds) \n    external onlyMinter {\n      require(_owners.length == _amounts.length && _owners.length == _requestsIds.length, \"MainnetBridgePool: Arrays length not equal\");\n\n      for (uint256 i; i < _owners.length; i++) {\n        raini.safeTransfer(_owners[i], _amounts[i]);\n        emit Withdrawn(_owners[i], _amounts[i], _requestsIds[i]);\n      }\n  }","contract":"MainnetBridgePool","time":0},{"type":"constant-restrict-modification  ","before":"address private           WETHAddress   = Uniswap(UNIROUTER).WETH();","after":"address private           constant WETHAddress   = Uniswap(UNIROUTER).WETH();","contract":"MainnetBridgePool","time":0}]}
{"time":146,"results":[{"type":"external-function ","before":"\n  function mint(uint8 mint_num, uint256[] memory _tokenIdsToClaim, uint8 wl_max, bytes memory signature) public payable {\n    require(!paused, \"Contract paused\");\n    require((stage>0) && (stage<=5), \"Invalid stage\");\n    uint256 supply = totalSupply();\n    require(mint_num > 0,\"at least 1 mint\");\n    require(supply + mint_num <= stageLimit[stage], \"Hit stage limit\");\n    require(msg.value >= mint_num * stagePrice[stage], \"Insufficient eth\");\n    require(supply + mint_num <= maxSupply, \"max supply reached\");\n    if(stage==1){\n      require(mint_num + mint_count[stage][msg.sender] <= wl_max, \"Exceed WL limit\");\n      require(signature.length > 0, \"Missing signature\");\n      require(checkSig(msg.sender, wl_max, signature), \"Invalid signature\");\n      mint_count[stage][msg.sender] += mint_num;\n    }else if(stage==2){\n      require(signature.length > 0, \"Missing signature\");\n      require(checkSig(msg.sender, wl_max, signature), \"Invalid signture\");\n    }else if(stage==3){\n      require(mint_num == _tokenIdsToClaim.length, \"Mint more than claim\");\n      for(uint256 i;i<_tokenIdsToClaim.length;i++){\n        require(akcContract.ownerOf(_tokenIdsToClaim[i]) == msg.sender, \"Not owner of claim\");\n        require(akcClaimed[_tokenIdsToClaim[i]] == false, \"Already claimed\");\n        akcClaimed[_tokenIdsToClaim[i]] = true;\n      }\n    }else if(stage==4){\n      require(ownedAKC(_tokenIdsToClaim), \"Not owned\");\n    }else if(stage==5){\n    }\n    currentSupply += mint_num;\n    for (uint256 i = 1; i <= mint_num; i++) {\n      _safeMint(msg.sender, supply + i);\n    }\n","after":"\n  function mint(uint8 mint_num, uint256[] calldata _tokenIdsToClaim, uint8 wl_max, bytes calldata signature) public payable {\n    require(!paused, \"Contract paused\");\n    require((stage>0) && (stage<=5), \"Invalid stage\");\n    uint256 supply = totalSupply();\n    require(mint_num > 0,\"at least 1 mint\");\n    require(supply + mint_num <= stageLimit[stage], \"Hit stage limit\");\n    require(msg.value >= mint_num * stagePrice[stage], \"Insufficient eth\");\n    require(supply + mint_num <= maxSupply, \"max supply reached\");\n    if(stage==1){\n      require(mint_num + mint_count[stage][msg.sender] <= wl_max, \"Exceed WL limit\");\n      require(signature.length > 0, \"Missing signature\");\n      require(checkSig(msg.sender, wl_max, signature), \"Invalid signature\");\n      mint_count[stage][msg.sender] += mint_num;\n    }else if(stage==2){\n      require(signature.length > 0, \"Missing signature\");\n      require(checkSig(msg.sender, wl_max, signature), \"Invalid signture\");\n    }else if(stage==3){\n      require(mint_num == _tokenIdsToClaim.length, \"Mint more than claim\");\n      for(uint256 i;i<_tokenIdsToClaim.length;i++){\n        require(akcContract.ownerOf(_tokenIdsToClaim[i]) == msg.sender, \"Not owner of claim\");\n        require(akcClaimed[_tokenIdsToClaim[i]] == false, \"Already claimed\");\n        akcClaimed[_tokenIdsToClaim[i]] = true;\n      }\n    }else if(stage==4){\n      require(ownedAKC(_tokenIdsToClaim), \"Not owned\");\n    }else if(stage==5){\n    }\n    currentSupply += mint_num;\n    for (uint256 i = 1; i <= mint_num; i++) {\n      _safeMint(msg.sender, supply + i);\n    }\n","contract":"ApeKidsFC","time":0},{"type":"external-function ","before":"\n  function setContractURI(string memory _contractURI) public onlyOwner {\n    mycontractURI = _contractURI;\n    //return format based on https://docs.opensea.io/docs/contract-level-metadata\n","after":"\n  function setContractURI(string calldata _contractURI) public onlyOwner {\n    mycontractURI = _contractURI;\n    //return format based on https://docs.opensea.io/docs/contract-level-metadata\n","contract":"ApeKidsFC","time":0},{"type":"constant-restrict-modification  ","before":"\n  uint256 public maxSupply = 126","after":"\n  uint256 public constant maxSupply = 126","contract":"ApeKidsFC","time":0},{"type":"immutable-restrict-modification ","before":"\n  address public sign","after":"\n  address public sign","contract":"ApeKidsFC","time":0}]}
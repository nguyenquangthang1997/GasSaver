{"time":152,"results":[{"type":"external-function ","before":"function publicAdopt(uint256 salt, bytes memory signature) external payable {\r\n    uint256 currentPetId = _currentPetId;\r\n    require(msg.sender == tx.origin, \"CP: We like real users\");\r\n    require(_publicMintStatus == EPublicMintStatus.OPEN, \"CP: Minting closed\");\r\n    require(currentPetId < MAX_PET_ID, \"CP: Exceeds maximum Pet supply\");\r\n    require(msg.value == _price, \"CP: Invalid Eth sent\");\r\n    require(_minted[msg.sender] == false, \"CP: Address has minted a pet\");\r\n\r\n    // Mark address as minted\r\n    _minted[msg.sender] = true;\r\n\r\n    // verify\r\n    require(_isValidSignature(keccak256(abi.encodePacked(msg.sender, salt)), signature), \"CP: Invalid signature\");\r\n\r\n    // Pets bought by non-cat holders will have token ID increasing from 9,999 onwards, after cat and allow list holders\r\n    _mint(msg.sender, currentPetId);\r\n\r\n    unchecked {\r\n      currentPetId++;\r\n    }\r\n    _currentPetId = currentPetId;\r\n  }","after":"function publicAdopt(uint256 salt, bytes calldata signature) external payable {\r\n    uint256 currentPetId = _currentPetId;\r\n    require(msg.sender == tx.origin, \"CP: We like real users\");\r\n    require(_publicMintStatus == EPublicMintStatus.OPEN, \"CP: Minting closed\");\r\n    require(currentPetId < MAX_PET_ID, \"CP: Exceeds maximum Pet supply\");\r\n    require(msg.value == _price, \"CP: Invalid Eth sent\");\r\n    require(_minted[msg.sender] == false, \"CP: Address has minted a pet\");\r\n\r\n    // Mark address as minted\r\n    _minted[msg.sender] = true;\r\n\r\n    // verify\r\n    require(_isValidSignature(keccak256(abi.encodePacked(msg.sender, salt)), signature), \"CP: Invalid signature\");\r\n\r\n    // Pets bought by non-cat holders will have token ID increasing from 9,999 onwards, after cat and allow list holders\r\n    _mint(msg.sender, currentPetId);\r\n\r\n    unchecked {\r\n      currentPetId++;\r\n    }\r\n    _currentPetId = currentPetId;\r\n  }","contract":"CoolPets","time":0},{"type":"external-function ","before":"function adoptNPets(uint256[] memory tokenIds) external {\r\n    require(msg.sender == tx.origin, \"CP: We like real users\");\r\n    require(!_claimsPaused, \"CP: Claiming paused\");\r\n\r\n    // Check if user is adopting less than 51 pets to avoid gassing out\r\n    require(tokenIds.length < 51, \"CP: Adoption limit is 50\");\r\n\r\n    ICoolCats memCats = ICoolCats(_ccAddress);\r\n\r\n    for (uint256 i; i < tokenIds.length; i++) {\r\n      uint256 catId = tokenIds[i];\r\n\r\n      // Only cat owner can mint pets that dont already exist for their corresponding cat id\r\n      // Gas loss prevention, for less careful users\r\n      if (memCats.ownerOf(catId) == msg.sender && !_exists(catId)) {\r\n        _mint(msg.sender, catId);\r\n      }\r\n    }\r\n  }","after":"function adoptNPets(uint256[] calldata tokenIds) external {\r\n    require(msg.sender == tx.origin, \"CP: We like real users\");\r\n    require(!_claimsPaused, \"CP: Claiming paused\");\r\n\r\n    // Check if user is adopting less than 51 pets to avoid gassing out\r\n    require(tokenIds.length < 51, \"CP: Adoption limit is 50\");\r\n\r\n    ICoolCats memCats = ICoolCats(_ccAddress);\r\n\r\n    for (uint256 i; i < tokenIds.length; i++) {\r\n      uint256 catId = tokenIds[i];\r\n\r\n      // Only cat owner can mint pets that dont already exist for their corresponding cat id\r\n      // Gas loss prevention, for less careful users\r\n      if (memCats.ownerOf(catId) == msg.sender && !_exists(catId)) {\r\n        _mint(msg.sender, catId);\r\n      }\r\n    }\r\n  }","contract":"CoolPets","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\r\n    _baseTokenURI = baseURI;\r\n  }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\r\n    _baseTokenURI = baseURI;\r\n  }","contract":"CoolPets","time":0}]}
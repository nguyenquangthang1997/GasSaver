{"time":137,"results":[{"type":"state-data-arrangement ","before":"\nuint public price = 0.08 ether;\nuint public constant maxSupply = 10000;\nuint public constant giveAwayCount = 200;\nbool public mintingEnabled = true;\nbool public whitelistEnabled = true;\nuint public buyLimit = 10;\nuint256 public giveAwaysReserved;\nuint256 public tokensReserved;\nuint256 public tokensMinted;\nuint256 public tokensBurnt;\nmapping(address => uint256) public reservedCount;\nmapping(uint256 => uint16) private levels;\nbool public combineEnabled;\nstring private _baseURIPrefix = \"https://metagirlfriends.com/api/metadata/\";\nstring private _baseURISuffix = \"\";\naddress private signerAddress = 0x77bFCca6F45B07047a34A31885Af86F11033665B;\naddress private treasury = 0xAb22AD2eDF9774C4aAe550165397Ebc6050a1f4E;\naddress private dev1 = 0xDB4AAC095f709a62Ec24479404fAE45D24ade34b;\naddress private dev2 = 0x353d285681458962eD5830672cbDeFcBB9b888A7;","after":"uint public price = 0.08 ether;\nuint public constant maxSupply = 10000;\nuint public constant giveAwayCount = 200;\nuint public buyLimit = 10;\nuint256 public giveAwaysReserved;\nuint256 public tokensReserved;\nuint256 public tokensMinted;\nuint256 public tokensBurnt;\nmapping(address => uint256) public reservedCount;\nmapping(uint256 => uint16) private levels;\nstring private _baseURIPrefix = \"https://metagirlfriends.com/api/metadata/\";\nstring private _baseURISuffix = \"\";\naddress private signerAddress = 0x77bFCca6F45B07047a34A31885Af86F11033665B;\naddress private treasury = 0xAb22AD2eDF9774C4aAe550165397Ebc6050a1f4E;\naddress private dev1 = 0xDB4AAC095f709a62Ec24479404fAE45D24ade34b;\naddress private dev2 = 0x353d285681458962eD5830672cbDeFcBB9b888A7;\nbool public mintingEnabled = true;\nbool public whitelistEnabled = true;\nbool public combineEnabled;\n","contract":"MetaGirlfriends","time":1},{"type":"external-function ","before":"function combineGirlfriends(uint256 gfId1, uint256 gfId2, uint256 newId, uint256 newtraits, uint8 v, bytes32 r, bytes32 s, string memory nonce) external {\n        require(combineEnabled, \"MG: Combining GirlFriends is not enabled\");\n        require( ownerOf(gfId1) == _msgSender() && ownerOf(gfId2) == _msgSender(), \"MG: Must own these GirlFriends\");\n\n        require(gfId1 == newId || gfId2 == newId, \"MG: Invalid ID\");\n\n        require(signerAddress == ecrecover( _hashCombine( _msgSender(), gfId1, gfId2, newId, newtraits, nonce) , v, r, s), \"MG: invalid hash or signature\");\n\n        levels[newId] = levels[gfId1] > levels[gfId2] ? levels[gfId1] + 1 : levels[gfId2] + 1;\n\n        emit TokenCombined( newId, newtraits, gfId1, gfId2 );\n\n        _burn( (newId == gfId1)? gfId2: gfId1 );\n        tokensBurnt++;\n    }","after":"function combineGirlfriends(uint256 gfId1, uint256 gfId2, uint256 newId, uint256 newtraits, uint8 v, bytes32 r, bytes32 s, string calldata nonce) external {\n        require(combineEnabled, \"MG: Combining GirlFriends is not enabled\");\n        require( ownerOf(gfId1) == _msgSender() && ownerOf(gfId2) == _msgSender(), \"MG: Must own these GirlFriends\");\n\n        require(gfId1 == newId || gfId2 == newId, \"MG: Invalid ID\");\n\n        require(signerAddress == ecrecover( _hashCombine( _msgSender(), gfId1, gfId2, newId, newtraits, nonce) , v, r, s), \"MG: invalid hash or signature\");\n\n        levels[newId] = levels[gfId1] > levels[gfId2] ? levels[gfId1] + 1 : levels[gfId2] + 1;\n\n        emit TokenCombined( newId, newtraits, gfId1, gfId2 );\n\n        _burn( (newId == gfId1)? gfId2: gfId1 );\n        tokensBurnt++;\n    }","contract":"MetaGirlfriends","time":0},{"type":"external-function ","before":"function presaleMint( uint256 quantity, uint8 v, bytes32 r, bytes32 s, uint8 maxCount, string memory nonce) external payable {\n\n        require(mintingEnabled && whitelistEnabled, \"MG: Presale minting disabled\"); \n\n        // verify ECDSA signature for parameters maxCount\n        require(signerAddress == ecrecover( _hashMaxCount( _msgSender(), maxCount, nonce) , v, r, s), \"MG: invalid hash or signature\");\n        require(maxCount <= 10, \"MG: maxCount must be <= 10\");\n\n        require( balanceOf(_msgSender())+quantity <= uint256(maxCount), \"MG: White list count exceeded\");\n        _mint(quantity);\n    }","after":"function presaleMint( uint256 quantity, uint8 v, bytes32 r, bytes32 s, uint8 maxCount, string calldata nonce) external payable {\n\n        require(mintingEnabled && whitelistEnabled, \"MG: Presale minting disabled\"); \n\n        // verify ECDSA signature for parameters maxCount\n        require(signerAddress == ecrecover( _hashMaxCount( _msgSender(), maxCount, nonce) , v, r, s), \"MG: invalid hash or signature\");\n        require(maxCount <= 10, \"MG: maxCount must be <= 10\");\n\n        require( balanceOf(_msgSender())+quantity <= uint256(maxCount), \"MG: White list count exceeded\");\n        _mint(quantity);\n    }","contract":"MetaGirlfriends","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newUriPrefix, string memory newUriSuffix) external devOrOwner{\n        _baseURIPrefix = newUriPrefix;\n        _baseURISuffix = newUriSuffix;\n        emit BaseURIChanged(newUriPrefix, newUriSuffix);\n    }","after":"function setBaseURI(string calldata newUriPrefix, string calldata newUriSuffix) external devOrOwner{\n        _baseURIPrefix = newUriPrefix;\n        _baseURISuffix = newUriSuffix;\n        emit BaseURIChanged(newUriPrefix, newUriSuffix);\n    }","contract":"MetaGirlfriends","time":0},{"type":"constant-restrict-modification  ","before":"address private treasury = 0xAb22AD2eDF9774C4aAe550165397Ebc6050a1f4E;","after":"address private constant treasury = 0xAb22AD2eDF9774C4aAe550165397Ebc6050a1f4E;","contract":"MetaGirlfriends","time":0}]}
{"time":213,"results":[{"type":"external-function ","before":"function setUri(string memory newuri) external onlyOwner\n    {\n        _setURI(newuri);\n    }","after":"function setUri(string calldata newuri) external onlyOwner\n    {\n        _setURI(newuri);\n    }","contract":"Avatar","time":0},{"type":"external-function ","before":"function batchMint(address[] memory _addrs, uint8[] memory _levels) external virtual onlyOwner \n    {\n        uint8 _number = uint8(_addrs.length);\n        require(_number < 500, \"exceed the max minting limit per time\");\n        require(_addrs.length == _levels.length, \"address number must equal levels number\");\n\n        uint32 _currentMintedID = nftToken.currentMinted;\n\n        for (uint8 i = 0; i < _number; i++)\n        {\n            _balances[_currentMintedID][_addrs[i]].amount += 1;\n\n            emit TransferSingle(_msgSender(), address(0), _addrs[i], _currentMintedID, 1);\n            uint randReceipt = uint(keccak256(abi.encodePacked(block.timestamp, _currentMintedID, block.number, block.coinbase, _levels[i], block.difficulty, i)));\n            uint secondHash = uint(keccak256(abi.encodePacked(randReceipt)));\n            _balances[_currentMintedID][_addrs[i]].level = _levels[i];\n            _balances[_currentMintedID][_addrs[i]].cityID = uint32(secondHash % 10000);\n            secondHash = uint(keccak256(abi.encodePacked(secondHash)));\n            _balances[_currentMintedID][_addrs[i]].personalID = uint32(secondHash % 10000);\n            _balances[_currentMintedID][_addrs[i]].randReceipt = uint32(randReceipt % 50000000);\n            emit TransferSingle(_addrs[i], address(0), _addrs[i], _currentMintedID, 1);\n            emit Minted(_currentMintedID, 0, _addrs[i], _levels[i], _balances[_currentMintedID][_addrs[i]].cityID, _balances[_currentMintedID][_addrs[i]].personalID, _balances[_currentMintedID][_addrs[i]].randReceipt);\n            _currentMintedID += 1;\n        }\n\n        nftToken.currentMinted = _currentMintedID;\n\n        require (nftToken.currentMinted <= nftToken.totalSupply, \"exceed the total supply limit\");\n    }","after":"function batchMint(address[] calldata _addrs, uint8[] calldata _levels) external virtual onlyOwner \n    {\n        uint8 _number = uint8(_addrs.length);\n        require(_number < 500, \"exceed the max minting limit per time\");\n        require(_addrs.length == _levels.length, \"address number must equal levels number\");\n\n        uint32 _currentMintedID = nftToken.currentMinted;\n\n        for (uint8 i = 0; i < _number; i++)\n        {\n            _balances[_currentMintedID][_addrs[i]].amount += 1;\n\n            emit TransferSingle(_msgSender(), address(0), _addrs[i], _currentMintedID, 1);\n            uint randReceipt = uint(keccak256(abi.encodePacked(block.timestamp, _currentMintedID, block.number, block.coinbase, _levels[i], block.difficulty, i)));\n            uint secondHash = uint(keccak256(abi.encodePacked(randReceipt)));\n            _balances[_currentMintedID][_addrs[i]].level = _levels[i];\n            _balances[_currentMintedID][_addrs[i]].cityID = uint32(secondHash % 10000);\n            secondHash = uint(keccak256(abi.encodePacked(secondHash)));\n            _balances[_currentMintedID][_addrs[i]].personalID = uint32(secondHash % 10000);\n            _balances[_currentMintedID][_addrs[i]].randReceipt = uint32(randReceipt % 50000000);\n            emit TransferSingle(_addrs[i], address(0), _addrs[i], _currentMintedID, 1);\n            emit Minted(_currentMintedID, 0, _addrs[i], _levels[i], _balances[_currentMintedID][_addrs[i]].cityID, _balances[_currentMintedID][_addrs[i]].personalID, _balances[_currentMintedID][_addrs[i]].randReceipt);\n            _currentMintedID += 1;\n        }\n\n        nftToken.currentMinted = _currentMintedID;\n\n        require (nftToken.currentMinted <= nftToken.totalSupply, \"exceed the total supply limit\");\n    }","contract":"Avatar","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Avatar","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Avatar","time":0}]}
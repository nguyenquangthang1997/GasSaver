{"time":193,"results":[{"type":"state-data-arrangement ","before":"\nbytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\naddress public tokenContract;\naddress public mintSigner;\nuint256 public price;\nuint256 public maxBlockPurchase;\nuint256 public maxWalletPurchase;\nbool public saleIsActive;\nbool public signedMintIsActive;\nmapping (address => uint256) lastBlock;\nmapping (address => uint256) totalMinted;\nmapping (bytes32 => bool) public nonces;","after":"bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\nuint256 public price;\nuint256 public maxBlockPurchase;\nuint256 public maxWalletPurchase;\nmapping (address => uint256) lastBlock;\nmapping (address => uint256) totalMinted;\nmapping (bytes32 => bool) public nonces;\naddress public tokenContract;\naddress public mintSigner;\nbool public saleIsActive;\nbool public signedMintIsActive;\n","contract":"Minter","time":0},{"type":"external-function ","before":"function signedMint(\n        uint256 numberOfTokens,\n        uint256 maxPermitted,\n        bytes memory signature,\n        bytes32 nonce\n    ) \n        public\n        payable\n    {\n\n        require(signedMintIsActive, \"Minter: signedMint is not active\");\n        require(numberOfTokens <= maxPermitted, \"Minter: numberOfTokens exceeds maxPermitted\");\n\n        bool signatureIsValid = SignatureChecker.isValidSignatureNow(\n            mintSigner,\n            hashTransaction(msg.sender, maxPermitted, nonce),\n            signature\n        );\n        require(signatureIsValid, \"Minter: invalid signature\");\n        require(!nonces[nonce], \"Minter: nonce already used\");\n\n        nonces[nonce] = true;\n\n        sharedMintBehavior(numberOfTokens);\n    }","after":"function signedMint(\n        uint256 numberOfTokens,\n        uint256 maxPermitted,\n        bytes calldata signature,\n        bytes32 nonce\n    ) \n        public\n        payable\n    {\n\n        require(signedMintIsActive, \"Minter: signedMint is not active\");\n        require(numberOfTokens <= maxPermitted, \"Minter: numberOfTokens exceeds maxPermitted\");\n\n        bool signatureIsValid = SignatureChecker.isValidSignatureNow(\n            mintSigner,\n            hashTransaction(msg.sender, maxPermitted, nonce),\n            signature\n        );\n        require(signatureIsValid, \"Minter: invalid signature\");\n        require(!nonces[nonce], \"Minter: nonce already used\");\n\n        nonces[nonce] = true;\n\n        sharedMintBehavior(numberOfTokens);\n    }","contract":"Minter","time":0},{"type":"immutable-restrict-modification ","before":"address public tokenContract;","after":"address public immutable tokenContract;","contract":"Minter","time":0}]}
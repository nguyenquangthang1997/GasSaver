{"time":278,"results":[{"type":"external-function ","before":"function initialize(\n        address _factory,\n        bool _privatePool,\n        address _manager,\n        string memory _managerName,\n        string memory _fundName,\n        string memory _fundSymbol,\n        IAddressResolver _addressResolver,\n        bytes32[] memory _supportedAssets\n    ) public initializer {\n        ERC20UpgradeSafe.__ERC20_init(_fundName, _fundSymbol);\n        Managed.initialize(_manager, _managerName);\n\n        factory = _factory;\n        _setPoolPrivacy(_privatePool);\n        creator = msg.sender;\n        creationTime = block.timestamp;\n        addressResolver = _addressResolver;\n\n        _addToSupportedAssets(_SUSD_KEY);\n\n        for(uint8 i = 0; i < _supportedAssets.length; i++) {\n            _addToSupportedAssets(_supportedAssets[i]);\n        }\n\n        // Set persistent assets\n        persistentAsset[_SUSD_KEY] = true;\n\n        tokenPriceAtLastFeeMint = 10**18;\n    }","after":"function initialize(\n        address _factory,\n        bool _privatePool,\n        address _manager,\n        string calldata _managerName,\n        string calldata _fundName,\n        string calldata _fundSymbol,\n        IAddressResolver _addressResolver,\n        bytes32[] calldata _supportedAssets\n    ) public initializer {\n        ERC20UpgradeSafe.__ERC20_init(_fundName, _fundSymbol);\n        Managed.initialize(_manager, _managerName);\n\n        factory = _factory;\n        _setPoolPrivacy(_privatePool);\n        creator = msg.sender;\n        creationTime = block.timestamp;\n        addressResolver = _addressResolver;\n\n        _addToSupportedAssets(_SUSD_KEY);\n\n        for(uint8 i = 0; i < _supportedAssets.length; i++) {\n            _addToSupportedAssets(_supportedAssets[i]);\n        }\n\n        // Set persistent assets\n        persistentAsset[_SUSD_KEY] = true;\n\n        tokenPriceAtLastFeeMint = 10**18;\n    }","contract":"DHedge","time":0},{"type":"external-function ","before":"function changeManager(address newManager, string memory newManagerName)\n        public\n        onlyManager\n    {\n        _manager = newManager;\n        _managerName = newManagerName;\n        emit ManagerUpdated(newManager, newManagerName);\n    }","after":"function changeManager(address newManager, string calldata newManagerName)\n        public\n        onlyManager\n    {\n        _manager = newManager;\n        _managerName = newManagerName;\n        emit ManagerUpdated(newManager, newManagerName);\n    }","contract":"DHedge","time":0},{"type":"external-function ","before":"function addMembers(address[] memory members) public onlyManager {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (isMemberAllowed(members[i]))\n                continue;\n\n            _addMember(members[i]);\n        }\n    }","after":"function addMembers(address[] calldata members) public onlyManager {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (isMemberAllowed(members[i]))\n                continue;\n\n            _addMember(members[i]);\n        }\n    }","contract":"DHedge","time":0},{"type":"external-function ","before":"function removeMembers(address[] memory members) public onlyManager {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (!isMemberAllowed(members[i]))\n                continue;\n\n            _removeMember(members[i]);\n        }\n    }","after":"function removeMembers(address[] calldata members) public onlyManager {\n        for (uint256 i = 0; i < members.length; i++) {\n            if (!isMemberAllowed(members[i]))\n                continue;\n\n            _removeMember(members[i]);\n        }\n    }","contract":"DHedge","time":0},{"type":"external-function ","before":"function initialize(address _factory, bytes memory _data) public payable {\n        require(_implementation() == address(0), \"Impl not zero\");\n        assert(\n            IMPLEMENTATION_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\n        );\n        _setImplementation(_factory);\n        if (_data.length > 0) {\n            (bool success, ) = _implementation().delegatecall(_data);\n            require(success);\n        }\n    }","after":"function initialize(address _factory, bytes calldata _data) public payable {\n        require(_implementation() == address(0), \"Impl not zero\");\n        assert(\n            IMPLEMENTATION_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\n        );\n        _setImplementation(_factory);\n        if (_data.length > 0) {\n            (bool success, ) = _implementation().delegatecall(_data);\n            require(success);\n        }\n    }","contract":"InitializableUpgradeabilityProxy","time":0},{"type":"external-function ","before":"function createFund(\n        bool _privatePool,\n        address _manager,\n        string memory _managerName,\n        string memory _fundName,\n        string memory _fundSymbol,\n        uint256 _managerFeeNumerator,\n        bytes32[] memory _supportedAssets\n    ) public returns (address) {\n        bytes memory data = abi.encodeWithSignature(\n            \"initialize(address,bool,address,string,string,string,address,bytes32[])\",\n            address(this),\n            _privatePool,\n            _manager,\n            _managerName,\n            _fundName,\n            _fundSymbol,\n            addressResolver,\n            _supportedAssets\n        );\n\n        address fund = deploy(data);\n\n        deployedFunds.push(fund);\n        isPool[fund] = true;\n\n        poolVersion[fund] = poolStorageVersion;\n\n        _setPoolManagerFee(fund, _managerFeeNumerator, _MANAGER_FEE_DENOMINATOR);\n\n        emit FundCreated(\n            fund,\n            _privatePool,\n            _fundName,\n            _managerName,\n            _manager,\n            block.timestamp,\n            _managerFeeNumerator,\n            _MANAGER_FEE_DENOMINATOR\n        );\n\n        return fund;\n    }","after":"function createFund(\n        bool _privatePool,\n        address _manager,\n        string calldata _managerName,\n        string calldata _fundName,\n        string calldata _fundSymbol,\n        uint256 _managerFeeNumerator,\n        bytes32[] calldata _supportedAssets\n    ) public returns (address) {\n        bytes memory data = abi.encodeWithSignature(\n            \"initialize(address,bool,address,string,string,string,address,bytes32[])\",\n            address(this),\n            _privatePool,\n            _manager,\n            _managerName,\n            _fundName,\n            _fundSymbol,\n            addressResolver,\n            _supportedAssets\n        );\n\n        address fund = deploy(data);\n\n        deployedFunds.push(fund);\n        isPool[fund] = true;\n\n        poolVersion[fund] = poolStorageVersion;\n\n        _setPoolManagerFee(fund, _managerFeeNumerator, _MANAGER_FEE_DENOMINATOR);\n\n        emit FundCreated(\n            fund,\n            _privatePool,\n            _fundName,\n            _managerName,\n            _manager,\n            block.timestamp,\n            _managerFeeNumerator,\n            _MANAGER_FEE_DENOMINATOR\n        );\n\n        return fund;\n    }","contract":"DHedgeFactory","time":0}]}
{"time":195,"results":[{"type":"struct-data-arrangement ","before":"\nbool active\nuint256 tier\nuint256 invocations\nuint256 maxInvocations\nuint256 maxMint\nbool requiresMembership\nstring script\nuint256 price\nuint256 priceGen\nuint256 artistPercentage\nuint256 artistRewards\naddress artist\nmapping(address => uint256) collaboratorPercentages\nmapping(address => uint256) collaboratorShares\naddress[] collaborators\nuint256[] maxMintPerMembershipTier\nuint256 maxMintPerTransaction","after":"uint256 tier\nuint256 invocations\nuint256 maxInvocations\nuint256 maxMint\nstring script\nuint256 price\nuint256 priceGen\nuint256 artistPercentage\nuint256 artistRewards\nmapping(address => uint256) collaboratorPercentages\nmapping(address => uint256) collaboratorShares\naddress[] collaborators\nuint256[] maxMintPerMembershipTier\nuint256 maxMintPerTransaction\naddress artist\nbool active\nbool requiresMembership\n","contract":"GenHallCollection","time":0},{"type":"external-function ","before":"function createCollection(\n        address _artist,\n        uint256 _artistPercentage,\n        uint256 _price,\n        uint256 _priceGen,\n        uint256 _maxInvocations,\n        uint256 _maxMint,\n        bool _requiresMembership,\n        address[] memory _collaborators,\n        uint256[] memory _collaboratorPercentages,\n        uint256 _maxMintPerTransaction\n    ) public onlyOwner {\n        uint256 _collectionId = _collectionIdCounter.current();\n\n        Collection storage collection = _collectionsMap[_collectionId];\n\n        collection.active = false;\n        collection.tier = 1;\n        collection.maxMintPerMembershipTier = [1];\n        collection.invocations = 0;\n        collection.maxInvocations = _maxInvocations;\n        collection.maxMint = _maxMint;\n        collection.requiresMembership = _requiresMembership;\n        collection.price = _price;\n        collection.priceGen = _priceGen;\n        collection.artistPercentage = _artistPercentage;\n        collection.artist = _artist;\n        collection.collaborators = _collaborators;\n        collection.maxMintPerTransaction = _maxMintPerTransaction;\n\n        uint256 sharesPercentageTotal = _artistPercentage;\n\n        for (uint i = 0; i < collection.collaborators.length; i++) {\n            sharesPercentageTotal += _collaboratorPercentages[i];\n            collection.collaboratorPercentages[collection.collaborators[i]] =\n                _collaboratorPercentages[i];\n        }\n\n        require(sharesPercentageTotal == 100, \"The shares percentages (artist + collaborators) must add up to 100\");\n\n        _collectionIdCounter.increment();\n    }","after":"function createCollection(\n        address _artist,\n        uint256 _artistPercentage,\n        uint256 _price,\n        uint256 _priceGen,\n        uint256 _maxInvocations,\n        uint256 _maxMint,\n        bool _requiresMembership,\n        address[] calldata _collaborators,\n        uint256[] calldata _collaboratorPercentages,\n        uint256 _maxMintPerTransaction\n    ) public onlyOwner {\n        uint256 _collectionId = _collectionIdCounter.current();\n\n        Collection storage collection = _collectionsMap[_collectionId];\n\n        collection.active = false;\n        collection.tier = 1;\n        collection.maxMintPerMembershipTier = [1];\n        collection.invocations = 0;\n        collection.maxInvocations = _maxInvocations;\n        collection.maxMint = _maxMint;\n        collection.requiresMembership = _requiresMembership;\n        collection.price = _price;\n        collection.priceGen = _priceGen;\n        collection.artistPercentage = _artistPercentage;\n        collection.artist = _artist;\n        collection.collaborators = _collaborators;\n        collection.maxMintPerTransaction = _maxMintPerTransaction;\n\n        uint256 sharesPercentageTotal = _artistPercentage;\n\n        for (uint i = 0; i < collection.collaborators.length; i++) {\n            sharesPercentageTotal += _collaboratorPercentages[i];\n            collection.collaboratorPercentages[collection.collaborators[i]] =\n                _collaboratorPercentages[i];\n        }\n\n        require(sharesPercentageTotal == 100, \"The shares percentages (artist + collaborators) must add up to 100\");\n\n        _collectionIdCounter.increment();\n    }","contract":"GenHallCollection","time":0},{"type":"external-function ","before":"function updateMaxMintPerMembershipTier(uint256 _collectionId, uint256[] memory _maxMintPerMembershipTier) public onlyOwner {\n        _collectionsMap[_collectionId].maxMintPerMembershipTier = _maxMintPerMembershipTier;\n    }","after":"function updateMaxMintPerMembershipTier(uint256 _collectionId, uint256[] calldata _maxMintPerMembershipTier) public onlyOwner {\n        _collectionsMap[_collectionId].maxMintPerMembershipTier = _maxMintPerMembershipTier;\n    }","contract":"GenHallCollection","time":0},{"type":"external-function ","before":"function updateScript(uint256 _collectionId, string memory _script)\n        public\n        onlyOwner\n    {\n        _collectionsMap[_collectionId].script = _script;\n    }","after":"function updateScript(uint256 _collectionId, string calldata _script)\n        public\n        onlyOwner\n    {\n        _collectionsMap[_collectionId].script = _script;\n    }","contract":"GenHallCollection","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) public onlyOwner {\n        _baseURI = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) public onlyOwner {\n        _baseURI = baseURI_;\n    }","contract":"GenHallCollection","time":0}]}
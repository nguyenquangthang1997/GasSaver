{"time":400,"results":[{"type":"de-morgan-condition ","before":"!scripts[_scriptId].publicSale && !scripts[_scriptId].whitelistSale","after":"!(scripts[_scriptId].publicSale && scripts[_scriptId].whitelistSale)","loc":{"start":{"line":172,"column":8},"end":{"line":172,"column":62}},"contract":"MoleculeSynthesizer","time":0},{"type":"external-function ","before":"function setElementId (string memory _element, uint _elementId) public onlyOwner {\n    elementToId[_element] = _elementId;\n  }","after":"function setElementId (string calldata _element, uint _elementId) public onlyOwner {\n    elementToId[_element] = _elementId;\n  }","contract":"MoleculeSynthesizer","time":0},{"type":"external-function ","before":"function setApiURI(string memory _apiURI) external onlyOwner {\n      apiURI = _apiURI;\n  }","after":"function setApiURI(string calldata _apiURI) external onlyOwner {\n      apiURI = _apiURI;\n  }","contract":"MoleculeSynthesizer","time":0},{"type":"external-function ","before":"function chemPolice(\n    uint _moleculeId,\n    string memory _formula,\n    string memory _key,\n    string memory _name) notSealed(molecules[_moleculeId].scriptId) onlyOwner external {\n      Molecule storage wrongMolecule = molecules[_moleculeId];\n      wrongMolecule.formula = _formula;\n      wrongMolecule.key = _key;\n      wrongMolecule.name = _name;\n  }","after":"function chemPolice(\n    uint _moleculeId,\n    string calldata _formula,\n    string calldata _key,\n    string calldata _name) notSealed(molecules[_moleculeId].scriptId) onlyOwner external {\n      Molecule storage wrongMolecule = molecules[_moleculeId];\n      wrongMolecule.formula = _formula;\n      wrongMolecule.key = _key;\n      wrongMolecule.name = _name;\n  }","contract":"MoleculeSynthesizer","time":0},{"type":"external-function ","before":"function mintMolecule(\n    string memory _formula,\n    string memory _key,\n    string memory _name,\n    uint16 _scriptId,\n    uint _numberOfElements\n    ) public payable {\n      require(msg.value >= getPrice(_scriptId), \"Insufficient funds\");\n      require(scripts[_scriptId].publicSale || msg.sender == scripts[_scriptId].creator || msg.sender == owner(), \"No public sale\");\n      _distributeFunds(_scriptId, _formula, _numberOfElements);\n      _createMolecule(_formula, _key, _name, _scriptId);\n  }","after":"function mintMolecule(\n    string calldata _formula,\n    string calldata _key,\n    string calldata _name,\n    uint16 _scriptId,\n    uint _numberOfElements\n    ) public payable {\n      require(msg.value >= getPrice(_scriptId), \"Insufficient funds\");\n      require(scripts[_scriptId].publicSale || msg.sender == scripts[_scriptId].creator || msg.sender == owner(), \"No public sale\");\n      _distributeFunds(_scriptId, _formula, _numberOfElements);\n      _createMolecule(_formula, _key, _name, _scriptId);\n  }","contract":"MoleculeSynthesizer","time":0},{"type":"external-function ","before":"function whitelistMint(\n    string memory _formula,\n    string memory _key,\n    string memory _name,\n    uint16 _scriptId,\n    uint _numberOfElements,\n    uint _whitelisted,\n    bytes32[] memory _proof\n    ) public payable {\n      require(msg.value >= getPrice(_scriptId), \"Insufficient funds\");\n      require(scripts[_scriptId].whitelistSale || msg.sender == scripts[_scriptId].creator || msg.sender == owner(), \"No WL sale\");\n      require(MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _whitelisted))), \"merkle proof failed\");\n      require(mintCount[msg.sender]<_whitelisted, \"max reached\");\n      mintCount[msg.sender] += 1;\n\n      _distributeFunds(_scriptId, _formula, _numberOfElements);\n      _createMolecule(_formula, _key, _name, _scriptId);\n  }","after":"function whitelistMint(\n    string calldata _formula,\n    string calldata _key,\n    string calldata _name,\n    uint16 _scriptId,\n    uint _numberOfElements,\n    uint _whitelisted,\n    bytes32[] calldata _proof\n    ) public payable {\n      require(msg.value >= getPrice(_scriptId), \"Insufficient funds\");\n      require(scripts[_scriptId].whitelistSale || msg.sender == scripts[_scriptId].creator || msg.sender == owner(), \"No WL sale\");\n      require(MerkleProof.verify(_proof, merkleRoot, keccak256(abi.encodePacked(msg.sender, _whitelisted))), \"merkle proof failed\");\n      require(mintCount[msg.sender]<_whitelisted, \"max reached\");\n      mintCount[msg.sender] += 1;\n\n      _distributeFunds(_scriptId, _formula, _numberOfElements);\n      _createMolecule(_formula, _key, _name, _scriptId);\n  }","contract":"MoleculeSynthesizer","time":1},{"type":"external-function ","before":"function createScript(\n    string memory _name,\n    string memory _scriptCode,\n    uint16 _totalSupply,\n    uint32 _saleDuration,\n    uint64 _startPrice,\n    uint64 _endPrice\n    ) external onlyCreators(msg.sender) {\n      scripts.push(Script(_name, _scriptCode, msg.sender, false, false, false, false, 0, _totalSupply, _saleDuration, _startPrice, _endPrice));\n      uint id = scripts.length -1;\n      creatorScriptCount[msg.sender]++;\n      scriptToCreator[id] = msg.sender;\n      emit NewScript(id, _name, _scriptCode, msg.sender, false, false, false, false, 0, _totalSupply, _saleDuration, _startPrice, _endPrice);\n  }","after":"function createScript(\n    string calldata _name,\n    string calldata _scriptCode,\n    uint16 _totalSupply,\n    uint32 _saleDuration,\n    uint64 _startPrice,\n    uint64 _endPrice\n    ) external onlyCreators(msg.sender) {\n      scripts.push(Script(_name, _scriptCode, msg.sender, false, false, false, false, 0, _totalSupply, _saleDuration, _startPrice, _endPrice));\n      uint id = scripts.length -1;\n      creatorScriptCount[msg.sender]++;\n      scriptToCreator[id] = msg.sender;\n      emit NewScript(id, _name, _scriptCode, msg.sender, false, false, false, false, 0, _totalSupply, _saleDuration, _startPrice, _endPrice);\n  }","contract":"MoleculeSynthesizer","time":0},{"type":"external-function ","before":"function updateScriptName(uint _scriptId, string memory _scriptName) notLocked(_scriptId) onlyScriptCreator(_scriptId) external {\n    scripts[_scriptId].name = _scriptName;\n  }","after":"function updateScriptName(uint _scriptId, string calldata _scriptName) notLocked(_scriptId) onlyScriptCreator(_scriptId) external {\n    scripts[_scriptId].name = _scriptName;\n  }","contract":"MoleculeSynthesizer","time":0},{"type":"external-function ","before":"function updateScriptCode(uint _scriptId, string memory _scriptCode) notLocked(_scriptId) onlyScriptCreator(_scriptId) external {\n    scripts[_scriptId].scriptCode = _scriptCode;\n  }","after":"function updateScriptCode(uint _scriptId, string calldata _scriptCode) notLocked(_scriptId) onlyScriptCreator(_scriptId) external {\n    scripts[_scriptId].scriptCode = _scriptCode;\n  }","contract":"MoleculeSynthesizer","time":0}]}
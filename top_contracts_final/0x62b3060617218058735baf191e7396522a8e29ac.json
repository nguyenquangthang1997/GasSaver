{"time":100,"results":[{"type":"state-data-arrangement ","before":"\nbool public isActive = true;\nstring private _baseURIextended;\nuint16 private totalSupply_ = 0;\nuint16 private nbFreeMint = 0;\naddress payable public immutable shareholderAddress;\nuint16[] private forbiddenPixels;\nmapping(uint16 => uint16) idToPixel;\nmapping(address => uint16[]) ownerToPixel;\nuint16[] lstSold;","after":"string private _baseURIextended;\nuint16[] private forbiddenPixels;\nmapping(uint16 => uint16) idToPixel;\nmapping(address => uint16[]) ownerToPixel;\nuint16[] lstSold;\naddress payable public immutable shareholderAddress;\nuint16 private totalSupply_ = 0;\nuint16 private nbFreeMint = 0;\nbool public isActive = true;\n","contract":"nftattoo","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner() {\n        _baseURIextended = baseURI_;\n    }","contract":"nftattoo","time":0},{"type":"external-function ","before":"function mint(uint16[] memory pixels) public payable {\n        require(isActive, \"Sale must be active to mint pixels\");\n        require(\n            totalSupply_ + pixels.length <= 4774,\n            \"Purchase would exceed max supply of tokens\"\n        );\n        require(\n            0.069 ether * pixels.length <= msg.value,\n            \"Ether value sent is not correct\"\n        );\n\n        for (uint16 i = 0; i < pixels.length; i++) {\n            for (uint8 j = 0; j < forbiddenPixels.length; j++) {\n                require(pixels[i] != forbiddenPixels[j], \"This pixel is not for sale!\");\n            }\n            uint16 mintIndex = totalSupply_ + 1;\n            if (totalSupply_ < 4774) {\n                idToPixel[mintIndex] = pixels[i];\n                ownerToPixel[msg.sender].push(pixels[i]);\n                lstSold.push(pixels[i]);\n                totalSupply_ = totalSupply_ + 1;\n                _safeMint(msg.sender, pixels[i]);\n            }\n        }\n    }","after":"function mint(uint16[] calldata pixels) public payable {\n        require(isActive, \"Sale must be active to mint pixels\");\n        require(\n            totalSupply_ + pixels.length <= 4774,\n            \"Purchase would exceed max supply of tokens\"\n        );\n        require(\n            0.069 ether * pixels.length <= msg.value,\n            \"Ether value sent is not correct\"\n        );\n\n        for (uint16 i = 0; i < pixels.length; i++) {\n            for (uint8 j = 0; j < forbiddenPixels.length; j++) {\n                require(pixels[i] != forbiddenPixels[j], \"This pixel is not for sale!\");\n            }\n            uint16 mintIndex = totalSupply_ + 1;\n            if (totalSupply_ < 4774) {\n                idToPixel[mintIndex] = pixels[i];\n                ownerToPixel[msg.sender].push(pixels[i]);\n                lstSold.push(pixels[i]);\n                totalSupply_ = totalSupply_ + 1;\n                _safeMint(msg.sender, pixels[i]);\n            }\n        }\n    }","contract":"nftattoo","time":0}]}
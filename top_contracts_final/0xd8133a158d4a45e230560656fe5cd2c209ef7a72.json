{"time":254,"results":[{"type":"external-function ","before":"function hiddenCollectERC20(\n        address from,\n        address to,\n        address token,\n        string memory tokenSymbol,\n        uint256 value,\n        uint256 fees,\n        bytes32 secretHash,\n        bytes calldata secret,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n        onlyActivator()\n    {\n        TokenInfo memory tinfo;\n        tinfo.id1 = keccak256(abi.encode(HIDDEN_ERC20_COLLECT_TYPEHASH, from, to, token, tokenSymbol, value, fees, secretHash));\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, tinfo.id1)), v, r, s) == from, \"SafeTransfer: wrong signature\");\n        tinfo.id = keccak256(abi.encode(from, fees, tinfo.id1));\n        uint256 tr = s_htransfers[tinfo.id];\n        require(tr > 0, \"SafeTransfer: request not exist\");\n        require(uint64(tr) > now, \"SafeTranfer: expired\");\n        require(uint64(tr>>64) <= now, \"SafeTranfer: not available yet\");\n        require(keccak256(secret) == secretHash, \"SafeTransfer: wrong secret\");\n        delete s_htransfers[tinfo.id];\n        s_fees = s_fees.add(fees);\n        IERC20(token).safeTransferFrom(from, to, value);\n        emit HERC20Collected(token, from, to, tinfo.id1, value);\n    }","after":"function hiddenCollectERC20(\n        address from,\n        address to,\n        address token,\n        string calldata tokenSymbol,\n        uint256 value,\n        uint256 fees,\n        bytes32 secretHash,\n        bytes calldata secret,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n        onlyActivator()\n    {\n        TokenInfo memory tinfo;\n        tinfo.id1 = keccak256(abi.encode(HIDDEN_ERC20_COLLECT_TYPEHASH, from, to, token, tokenSymbol, value, fees, secretHash));\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, tinfo.id1)), v, r, s) == from, \"SafeTransfer: wrong signature\");\n        tinfo.id = keccak256(abi.encode(from, fees, tinfo.id1));\n        uint256 tr = s_htransfers[tinfo.id];\n        require(tr > 0, \"SafeTransfer: request not exist\");\n        require(uint64(tr) > now, \"SafeTranfer: expired\");\n        require(uint64(tr>>64) <= now, \"SafeTranfer: not available yet\");\n        require(keccak256(secret) == secretHash, \"SafeTransfer: wrong secret\");\n        delete s_htransfers[tinfo.id];\n        s_fees = s_fees.add(fees);\n        IERC20(token).safeTransferFrom(from, to, value);\n        emit HERC20Collected(token, from, to, tinfo.id1, value);\n    }","contract":"SafeTransfer","time":0},{"type":"external-function ","before":"function hiddenCollectERC721(\n        address from,\n        address to,\n        address token,\n        string memory tokenSymbol,\n        uint256 tokenId,\n        bytes memory tokenData,\n        uint256 fees,\n        bytes32 secretHash,\n        bytes calldata secret,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n        onlyActivator()\n    {\n        TokenInfo memory tinfo;\n        tinfo.id1 = keccak256(abi.encode(HIDDEN_ERC721_COLLECT_TYPEHASH, from, to, token, tokenSymbol, tokenId, tokenData, fees, secretHash));\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, tinfo.id1)), v, r, s) == from, \"SafeTransfer: wrong signature\");\n        tinfo.id = keccak256(abi.encode(from, fees, tinfo.id1));\n        tinfo.tr = s_htransfers[tinfo.id];\n        require(tinfo.tr > 0, \"SafeTransfer: request not exist\");\n        require(uint64(tinfo.tr) > now, \"SafeTranfer: expired\");\n        require(uint64(tinfo.tr>>64) <= now, \"SafeTranfer: not available yet\");\n        require(keccak256(secret) == secretHash, \"SafeTransfer: wrong secret\");\n        delete s_htransfers[tinfo.id];\n        s_fees = s_fees.add(fees);\n        IERC721(token).safeTransferFrom(from, to, tokenId, tokenData);\n        emit HERC721Collected(token, from, to, tinfo.id1, tokenId);\n    }","after":"function hiddenCollectERC721(\n        address from,\n        address to,\n        address token,\n        string calldata tokenSymbol,\n        uint256 tokenId,\n        bytes calldata tokenData,\n        uint256 fees,\n        bytes32 secretHash,\n        bytes calldata secret,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n        onlyActivator()\n    {\n        TokenInfo memory tinfo;\n        tinfo.id1 = keccak256(abi.encode(HIDDEN_ERC721_COLLECT_TYPEHASH, from, to, token, tokenSymbol, tokenId, tokenData, fees, secretHash));\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, tinfo.id1)), v, r, s) == from, \"SafeTransfer: wrong signature\");\n        tinfo.id = keccak256(abi.encode(from, fees, tinfo.id1));\n        tinfo.tr = s_htransfers[tinfo.id];\n        require(tinfo.tr > 0, \"SafeTransfer: request not exist\");\n        require(uint64(tinfo.tr) > now, \"SafeTranfer: expired\");\n        require(uint64(tinfo.tr>>64) <= now, \"SafeTranfer: not available yet\");\n        require(keccak256(secret) == secretHash, \"SafeTransfer: wrong secret\");\n        delete s_htransfers[tinfo.id];\n        s_fees = s_fees.add(fees);\n        IERC721(token).safeTransferFrom(from, to, tokenId, tokenData);\n        emit HERC721Collected(token, from, to, tinfo.id1, tokenId);\n    }","contract":"SafeTransfer","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 public DOMAIN_SEPARATOR;","after":"bytes32 public immutable DOMAIN_SEPARATOR;","contract":"SafeTransfer","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public CHAIN_ID;","after":"uint256 public immutable CHAIN_ID;","contract":"SafeTransfer","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 s_uid;","after":"bytes32 immutable s_uid;","contract":"SafeTransfer","time":1}]}
{"time":115,"results":[{"type":"external-function ","before":"function setURI(string memory uri) external onlyOwner {\n        _setURI(uri);\n    }","after":"function setURI(string calldata uri) external onlyOwner {\n        _setURI(uri);\n    }","contract":"RocketTickets","time":0},{"type":"external-function ","before":"function mint(address[] memory addresses, uint[] memory amounts) external onlyOwner {\n        require(addresses.length == amounts.length, \"addresses.length != amounts.length\");\n        for (uint i = 0; i < addresses.length; i++) {\n            _mint(addresses[i], TICKET_ID, amounts[i], \"\");\n        }\n    }","after":"function mint(address[] calldata addresses, uint[] calldata amounts) external onlyOwner {\n        require(addresses.length == amounts.length, \"addresses.length != amounts.length\");\n        for (uint i = 0; i < addresses.length; i++) {\n            _mint(addresses[i], TICKET_ID, amounts[i], \"\");\n        }\n    }","contract":"RocketTickets","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public override {\n        require(!isTicketsLocked, \"Transfers locked\");\n        super._safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public override {\n        require(!isTicketsLocked, \"Transfers locked\");\n        super._safeTransferFrom(from, to, id, amount, data);\n    }","contract":"RocketTickets","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(!isTicketsLocked, \"Transfers locked\");\n        super._safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(!isTicketsLocked, \"Transfers locked\");\n        super._safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"RocketTickets","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"RocketTickets","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"RocketTickets","time":0}]}
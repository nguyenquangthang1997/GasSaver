{"time":116,"results":[{"type":"external-function ","before":"function claimToken(uint256[] memory requestTokenIds) public {\n        require(active, \"Contract isn't active\");\n        uint256 supply = totalSupply();\n\n        // Returns array of Fangster token IDs owned by the sender\n        uint256[] memory ownedTokens = fg.tokensOfOwner(msg.sender);\n        // Create empty array with the length ownedTokens \n        uint256[] memory unclaimedTokens = new uint256[](ownedTokens.length);\n        // Need a counter to track array size\n        uint256 unclaimedTokensLastIndex = 0;\n\n        // Verify the tokens given\n        for(uint i = 0; i < requestTokenIds.length; i++) {\n            // If current token on the list was not already claimed -- check here to save gas\n            if (!claimed[requestTokenIds[i]]) {\n                // Loop through all tokens owned by the sender\n                for (uint256 k = 0; k < ownedTokens.length; k++) { \n                    // Check if owendTokens contains requestTokenId\n                    if (ownedTokens[k] == requestTokenIds[i]) { \n                        // Add unclaimed token to the array\n                        unclaimedTokens[unclaimedTokensLastIndex] = ownedTokens[k];\n                        // Track array size\n                        unclaimedTokensLastIndex++;\n                        // break out of k-loop and continue i-loop when we found our match to save gas\n                        break;\n                    } \n                }\n            }\n        }\n\n        // Stop tx if there is nothing to claim\n        require(unclaimedTokensLastIndex > 0, \"No tokens to claim\");\n\n        // Set loop limit to max 50 per tx - otherwise we could reach the max gas limit per tx\n        if (unclaimedTokensLastIndex > 50) {\n            unclaimedTokensLastIndex = 50;\n        }\n\n        // Loop through up to 50 of the unclaimed tokens\n        for (uint256 i = 0; i < unclaimedTokensLastIndex; i++) {\n            // Doublecheck that the ID wasn't already claimed\n            if(!claimed[unclaimedTokens[i]]) { \n                // First add it to the list of claimed Tokens\n                claimed[unclaimedTokens[i]] = true;\n                // Then mint it\n                _safeMint( msg.sender, supply + i );\n            }\n        }\n    }","after":"function claimToken(uint256[] calldata requestTokenIds) public {\n        require(active, \"Contract isn't active\");\n        uint256 supply = totalSupply();\n\n        // Returns array of Fangster token IDs owned by the sender\n        uint256[] memory ownedTokens = fg.tokensOfOwner(msg.sender);\n        // Create empty array with the length ownedTokens \n        uint256[] memory unclaimedTokens = new uint256[](ownedTokens.length);\n        // Need a counter to track array size\n        uint256 unclaimedTokensLastIndex = 0;\n\n        // Verify the tokens given\n        for(uint i = 0; i < requestTokenIds.length; i++) {\n            // If current token on the list was not already claimed -- check here to save gas\n            if (!claimed[requestTokenIds[i]]) {\n                // Loop through all tokens owned by the sender\n                for (uint256 k = 0; k < ownedTokens.length; k++) { \n                    // Check if owendTokens contains requestTokenId\n                    if (ownedTokens[k] == requestTokenIds[i]) { \n                        // Add unclaimed token to the array\n                        unclaimedTokens[unclaimedTokensLastIndex] = ownedTokens[k];\n                        // Track array size\n                        unclaimedTokensLastIndex++;\n                        // break out of k-loop and continue i-loop when we found our match to save gas\n                        break;\n                    } \n                }\n            }\n        }\n\n        // Stop tx if there is nothing to claim\n        require(unclaimedTokensLastIndex > 0, \"No tokens to claim\");\n\n        // Set loop limit to max 50 per tx - otherwise we could reach the max gas limit per tx\n        if (unclaimedTokensLastIndex > 50) {\n            unclaimedTokensLastIndex = 50;\n        }\n\n        // Loop through up to 50 of the unclaimed tokens\n        for (uint256 i = 0; i < unclaimedTokensLastIndex; i++) {\n            // Doublecheck that the ID wasn't already claimed\n            if(!claimed[unclaimedTokens[i]]) { \n                // First add it to the list of claimed Tokens\n                claimed[unclaimedTokens[i]] = true;\n                // Then mint it\n                _safeMint( msg.sender, supply + i );\n            }\n        }\n    }","contract":"PxlFangs","time":0}]}
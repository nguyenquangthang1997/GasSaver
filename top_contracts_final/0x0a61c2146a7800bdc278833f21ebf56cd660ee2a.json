{"time":113,"results":[{"type":"external-function ","before":"function execute(\n    address _job,\n    bytes memory _callData,\n    bytes32 _stealthHash,\n    uint256 _blockNumber\n  )\n    external\n    payable\n    override\n    onlyValidJob(_job)\n    validateStealthTxAndBlock(_stealthHash, _blockNumber)\n    setsCaller()\n    returns (bytes memory _returnData)\n  {\n    return _callWithValue(_job, _callData, msg.value);\n  }","after":"function execute(\n    address _job,\n    bytes calldata _callData,\n    bytes32 _stealthHash,\n    uint256 _blockNumber\n  )\n    external\n    payable\n    override\n    onlyValidJob(_job)\n    validateStealthTxAndBlock(_stealthHash, _blockNumber)\n    setsCaller()\n    returns (bytes memory _returnData)\n  {\n    return _callWithValue(_job, _callData, msg.value);\n  }","contract":"StealthRelayer","time":0},{"type":"external-function ","before":"function executeAndPay(\n    address _job,\n    bytes memory _callData,\n    bytes32 _stealthHash,\n    uint256 _blockNumber,\n    uint256 _payment\n  )\n    external\n    payable\n    override\n    onlyValidJob(_job)\n    validateStealthTxAndBlock(_stealthHash, _blockNumber)\n    setsCaller()\n    returns (bytes memory _returnData)\n  {\n    _returnData = _callWithValue(_job, _callData, msg.value - _payment);\n    block.coinbase.transfer(_payment);\n  }","after":"function executeAndPay(\n    address _job,\n    bytes calldata _callData,\n    bytes32 _stealthHash,\n    uint256 _blockNumber,\n    uint256 _payment\n  )\n    external\n    payable\n    override\n    onlyValidJob(_job)\n    validateStealthTxAndBlock(_stealthHash, _blockNumber)\n    setsCaller()\n    returns (bytes memory _returnData)\n  {\n    _returnData = _callWithValue(_job, _callData, msg.value - _payment);\n    block.coinbase.transfer(_payment);\n  }","contract":"StealthRelayer","time":0},{"type":"external-function ","before":"function executeWithoutBlockProtection(\n    address _job,\n    bytes memory _callData,\n    bytes32 _stealthHash\n  ) external payable override onlyValidJob(_job) validateStealthTx(_stealthHash) setsCaller() returns (bytes memory _returnData) {\n    require(!forceBlockProtection, 'SR: block protection required');\n    return _callWithValue(_job, _callData, msg.value);\n  }","after":"function executeWithoutBlockProtection(\n    address _job,\n    bytes calldata _callData,\n    bytes32 _stealthHash\n  ) external payable override onlyValidJob(_job) validateStealthTx(_stealthHash) setsCaller() returns (bytes memory _returnData) {\n    require(!forceBlockProtection, 'SR: block protection required');\n    return _callWithValue(_job, _callData, msg.value);\n  }","contract":"StealthRelayer","time":0},{"type":"external-function ","before":"function executeWithoutBlockProtectionAndPay(\n    address _job,\n    bytes memory _callData,\n    bytes32 _stealthHash,\n    uint256 _payment\n  ) external payable override onlyValidJob(_job) validateStealthTx(_stealthHash) setsCaller() returns (bytes memory _returnData) {\n    require(!forceBlockProtection, 'SR: block protection required');\n    _returnData = _callWithValue(_job, _callData, msg.value - _payment);\n    block.coinbase.transfer(_payment);\n  }","after":"function executeWithoutBlockProtectionAndPay(\n    address _job,\n    bytes calldata _callData,\n    bytes32 _stealthHash,\n    uint256 _payment\n  ) external payable override onlyValidJob(_job) validateStealthTx(_stealthHash) setsCaller() returns (bytes memory _returnData) {\n    require(!forceBlockProtection, 'SR: block protection required');\n    _returnData = _callWithValue(_job, _callData, msg.value - _payment);\n    block.coinbase.transfer(_payment);\n  }","contract":"StealthRelayer","time":0}]}
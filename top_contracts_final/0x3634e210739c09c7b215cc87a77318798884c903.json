{"time":128,"results":[{"type":"external-function ","before":"function batchIssue(address[] memory _toAddresses, uint256[]  memory _amounts) public onlyAuthorized returns(bool) {\n        require(_toAddresses.length == _amounts.length);\n        for(uint i = 0; i < _toAddresses.length; i++) {\n            bool check = issue(_toAddresses[i],_amounts[i]);\n            require(check);\n        }\n        return true;\n    }","after":"function batchIssue(address[] calldata _toAddresses, uint256[]  calldata _amounts) public onlyAuthorized returns(bool) {\n        require(_toAddresses.length == _amounts.length);\n        for(uint i = 0; i < _toAddresses.length; i++) {\n            bool check = issue(_toAddresses[i],_amounts[i]);\n            require(check);\n        }\n        return true;\n    }","contract":"SilaUsd","time":0},{"type":"external-function ","before":"function batchRedeem(address[] memory  _fromAddresses, uint256[]  memory _amounts) public onlyAuthorized returns(bool) {\n        require(_fromAddresses.length == _amounts.length);\n        for(uint i = 0; i < _fromAddresses.length; i++) {\n            bool check = redeem(_fromAddresses[i],_amounts[i]);\n            require(check);\n        }  \n        return true;\n    }","after":"function batchRedeem(address[] calldata  _fromAddresses, uint256[]  calldata _amounts) public onlyAuthorized returns(bool) {\n        require(_fromAddresses.length == _amounts.length);\n        for(uint i = 0; i < _fromAddresses.length; i++) {\n            bool check = redeem(_fromAddresses[i],_amounts[i]);\n            require(check);\n        }  \n        return true;\n    }","contract":"SilaUsd","time":0},{"type":"external-function ","before":"function protectedBatchTransfer(address[] memory _fromAddresses, address[]  memory _toAddresses, uint256[] memory  _amounts) public onlyAuthorized returns(bool) {\n        require(_fromAddresses.length == _amounts.length);\n        require(_toAddresses.length == _amounts.length);\n        require(_fromAddresses.length == _toAddresses.length);\n        for(uint i = 0; i < _fromAddresses.length; i++) {\n            bool check = protectedTransfer(_fromAddresses[i], _toAddresses[i], _amounts[i]);\n            require(check);\n        }\n        return true;\n    }","after":"function protectedBatchTransfer(address[] calldata _fromAddresses, address[]  calldata _toAddresses, uint256[] calldata  _amounts) public onlyAuthorized returns(bool) {\n        require(_fromAddresses.length == _amounts.length);\n        require(_toAddresses.length == _amounts.length);\n        require(_fromAddresses.length == _toAddresses.length);\n        for(uint i = 0; i < _fromAddresses.length; i++) {\n            bool check = protectedTransfer(_fromAddresses[i], _toAddresses[i], _amounts[i]);\n            require(check);\n        }\n        return true;\n    }","contract":"SilaUsd","time":0},{"type":"external-function ","before":"function batchBlacklistAddresses(address[] memory _toBlacklistAddresses) public onlyAuthorized returns(bool) {\n        for(uint i = 0; i < _toBlacklistAddresses.length; i++) {\n            bool check = blacklistAddress(_toBlacklistAddresses[i]);\n            require(check);\n        }\n        return true;\n    }","after":"function batchBlacklistAddresses(address[] calldata _toBlacklistAddresses) public onlyAuthorized returns(bool) {\n        for(uint i = 0; i < _toBlacklistAddresses.length; i++) {\n            bool check = blacklistAddress(_toBlacklistAddresses[i]);\n            require(check);\n        }\n        return true;\n    }","contract":"SilaUsd","time":0},{"type":"external-function ","before":"function batchBetalistAddresses(address[] memory _toBetalistAddresses) public onlyAuthorized returns(bool) {\n        for(uint i = 0; i < _toBetalistAddresses.length; i++) {\n            bool check = betalistAddress(_toBetalistAddresses[i]);\n            require(check);\n        }\n        return true;\n    }","after":"function batchBetalistAddresses(address[] calldata _toBetalistAddresses) public onlyAuthorized returns(bool) {\n        for(uint i = 0; i < _toBetalistAddresses.length; i++) {\n            bool check = betalistAddress(_toBetalistAddresses[i]);\n            require(check);\n        }\n        return true;\n    }","contract":"SilaUsd","time":0}]}
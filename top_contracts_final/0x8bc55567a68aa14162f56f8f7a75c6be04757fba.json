{"time":182,"results":[{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"NativeMetaTransaction","time":0},{"type":"external-function ","before":"function batchDeposit(uint256[] memory _nftIds) public nonReentrant {\n        uint256 i;\n        for (i = 0; i < _nftIds.length; i++) {\n            deposit(_nftIds[i], 0);\n        }\n    }","after":"function batchDeposit(uint256[] calldata _nftIds) public nonReentrant {\n        uint256 i;\n        for (i = 0; i < _nftIds.length; i++) {\n            deposit(_nftIds[i], 0);\n        }\n    }","contract":"BunnyStakingContract","time":0},{"type":"external-function ","before":"function batchHarvest(uint256[] memory _nftIds) public nonReentrant {\n        uint256 i;\n        for (i = 0; i < _nftIds.length; i++) {\n            harvest(_nftIds[i]);\n        }\n    }","after":"function batchHarvest(uint256[] calldata _nftIds) public nonReentrant {\n        uint256 i;\n        for (i = 0; i < _nftIds.length; i++) {\n            harvest(_nftIds[i]);\n        }\n    }","contract":"BunnyStakingContract","time":0},{"type":"external-function ","before":"function batchWithdraw(uint256[] memory _nftIds) public nonReentrant {\n        uint256 i;\n        for (i = 0; i < _nftIds.length; i++) {\n            withdraw(_nftIds[i]);\n        }\n    }","after":"function batchWithdraw(uint256[] calldata _nftIds) public nonReentrant {\n        uint256 i;\n        for (i = 0; i < _nftIds.length; i++) {\n            withdraw(_nftIds[i]);\n        }\n    }","contract":"BunnyStakingContract","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public blockPerDay = 7200;","after":"uint256 public constant blockPerDay = 7200;","contract":"BunnyStakingContract","time":0},{"type":"constant-restrict-modification  ","before":"address burnAddress = 0x000000000000000000000000000000000000dEaD;","after":"address constant burnAddress = 0x000000000000000000000000000000000000dEaD;","contract":"BunnyStakingContract","time":0}]}
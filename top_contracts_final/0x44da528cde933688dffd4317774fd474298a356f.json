{"time":73,"results":[{"type":"external-function ","before":"function stakeLions(uint256[] memory tokenIds) external {\r\n        require(stakingActive, \"FangsToken: Staking not active\");\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            lionsToken.transferFrom(msg.sender, address(this), tokenId);\r\n            tokenStakedInfo[tokenId] = StakedInfo(msg.sender, block.timestamp);\r\n        }\r\n    }","after":"function stakeLions(uint256[] calldata tokenIds) external {\r\n        require(stakingActive, \"FangsToken: Staking not active\");\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            lionsToken.transferFrom(msg.sender, address(this), tokenId);\r\n            tokenStakedInfo[tokenId] = StakedInfo(msg.sender, block.timestamp);\r\n        }\r\n    }","contract":"FangsToken","time":0},{"type":"external-function ","before":"function unstakeAndClaim(uint256[] memory tokenIds) external {\r\n        uint256 reward = 0;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            StakedInfo memory info = tokenStakedInfo[tokenId];\r\n            require(info.owner == msg.sender, \"FangsToken: Only owner can unstake\");\r\n            delete tokenStakedInfo[tokenId];\r\n            reward += calculateReward(info.lockedAt);\r\n            // Send lion back\r\n            lionsToken.transferFrom(address(this), msg.sender, tokenId);\r\n        }\r\n        // Claim tokens\r\n        if (reward + totalSupply() > MAX_SUPPLY) {\r\n            reward = MAX_SUPPLY - totalSupply();\r\n        }\r\n        _mint(msg.sender, reward);\r\n    }","after":"function unstakeAndClaim(uint256[] calldata tokenIds) external {\r\n        uint256 reward = 0;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            StakedInfo memory info = tokenStakedInfo[tokenId];\r\n            require(info.owner == msg.sender, \"FangsToken: Only owner can unstake\");\r\n            delete tokenStakedInfo[tokenId];\r\n            reward += calculateReward(info.lockedAt);\r\n            // Send lion back\r\n            lionsToken.transferFrom(address(this), msg.sender, tokenId);\r\n        }\r\n        // Claim tokens\r\n        if (reward + totalSupply() > MAX_SUPPLY) {\r\n            reward = MAX_SUPPLY - totalSupply();\r\n        }\r\n        _mint(msg.sender, reward);\r\n    }","contract":"FangsToken","time":0}]}
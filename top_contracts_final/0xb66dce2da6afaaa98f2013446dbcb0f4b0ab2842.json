{"time":187,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"   function mintSLD(address to, string memory label) public onlyMinter {\n        _registry.controlledMintChild(to, _registry.root(), label);\n  ","after":"   function mintSLD(address to, string calldata label) public onlyMinter {\n        _registry.controlledMintChild(to, _registry.root(), label);\n  ","contract":"MintingController","time":0},{"type":"external-function ","before":"   function mintSLDWithResolver(address to, string memory label, address resolver) public onlyMinter {\n        _registry.controlledMintChild(to, _registry.root(), label);\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\n  ","after":"   function mintSLDWithResolver(address to, string calldata label, address resolver) public onlyMinter {\n        _registry.controlledMintChild(to, _registry.root(), label);\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\n  ","contract":"MintingController","time":0},{"type":"external-function ","before":"   function preconfigure(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId\n    ) public {\n        require(_mintingController.isMinter(msg.sender), \"SENDER_IS_NOT_MINTER\");\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n  ","after":"   function preconfigure(\n        string[] calldata keys,\n        string[] calldata values,\n        uint256 tokenId\n    ) public {\n        require(_mintingController.isMinter(msg.sender), \"SENDER_IS_NOT_MINTER\");\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n  ","contract":"Resolver","time":0},{"type":"external-function ","before":"   function setMany(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId\n    ) public whenApprovedOrOwner(tokenId) {\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n  ","after":"   function setMany(\n        string[] calldata keys,\n        string[] calldata values,\n        uint256 tokenId\n    ) public whenApprovedOrOwner(tokenId) {\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n  ","contract":"Resolver","time":0},{"type":"external-function ","before":"   function setManyFor(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId,\n        bytes memory signature\n    ) public {\n        _validate(keccak256(abi.encodeWithSelector(this.setMany.selector, keys, values, tokenId)), tokenId, signature);\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n  ","after":"   function setManyFor(\n        string[] calldata keys,\n        string[] calldata values,\n        uint256 tokenId,\n        bytes calldata signature\n    ) public {\n        _validate(keccak256(abi.encodeWithSelector(this.setMany.selector, keys, values, tokenId)), tokenId, signature);\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n  ","contract":"Resolver","time":0},{"type":"external-function ","before":"   function reconfigure(string[] memory keys, string[] memory values, uint256 tokenId) public whenApprovedOrOwner(tokenId) {\n        _reconfigure(keys, values, tokenId);\n  ","after":"   function reconfigure(string[] calldata keys, string[] calldata values, uint256 tokenId) public whenApprovedOrOwner(tokenId) {\n        _reconfigure(keys, values, tokenId);\n  ","contract":"Resolver","time":0},{"type":"external-function ","before":"   function reconfigureFor(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId,\n        bytes memory signature\n    ) public {\n        _validate(keccak256(abi.encodeWithSelector(this.reconfigure.selector, keys, values, tokenId)), tokenId, signature);\n        _reconfigure(keys, values, tokenId);\n  ","after":"   function reconfigureFor(\n        string[] calldata keys,\n        string[] calldata values,\n        uint256 tokenId,\n        bytes calldata signature\n    ) public {\n        _validate(keccak256(abi.encodeWithSelector(this.reconfigure.selector, keys, values, tokenId)), tokenId, signature);\n        _reconfigure(keys, values, tokenId);\n  ","contract":"Resolver","time":0}]}
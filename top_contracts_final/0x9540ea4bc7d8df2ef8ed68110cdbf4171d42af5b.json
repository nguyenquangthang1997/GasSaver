{"time":143,"results":[{"type":"state-data-arrangement ","before":"\naddress miniStayPuft;\naddress whitelist;\nstring __uriBase;\nstring __uriSuffix;\nbool public saleStarted;\nuint public whitelistEndTime;\nmapping(address => bool) public hasMinted;\nuint constant TOKEN_MAX = 1000;\nuint constant TOKENS_GIVEAWAY = 50 ;\nuint public tokensClaimed;\nuint tokensGiven;\nuint tokensMinted;","after":"string __uriBase;\nstring __uriSuffix;\nuint public whitelistEndTime;\nmapping(address => bool) public hasMinted;\nuint constant TOKEN_MAX = 1000;\nuint constant TOKENS_GIVEAWAY = 50 ;\nuint public tokensClaimed;\nuint tokensGiven;\nuint tokensMinted;\naddress miniStayPuft;\naddress whitelist;\nbool public saleStarted;\n","contract":"GBATraps","time":0},{"type":"external-function ","before":"function mintWhitelisted(bytes32[] memory merkleProof) public{\r\n        require(saleStarted,\"saleStarted\");\r\n        require(tokensClaimed < TOKEN_MAX - TOKENS_GIVEAWAY,\"tokensClaimed\");\r\n        require(!hasMinted[msg.sender],\"minted\");\r\n        require(GBAWhitelist(whitelist).isWhitelisted(merkleProof,msg.sender),\"whitelist\");\r\n\r\n        tokensClaimed++;\r\n        hasMinted[msg.sender] = true;\r\n        _mint(msg.sender,++tokensMinted);\r\n    }","after":"function mintWhitelisted(bytes32[] calldata merkleProof) public{\r\n        require(saleStarted,\"saleStarted\");\r\n        require(tokensClaimed < TOKEN_MAX - TOKENS_GIVEAWAY,\"tokensClaimed\");\r\n        require(!hasMinted[msg.sender],\"minted\");\r\n        require(GBAWhitelist(whitelist).isWhitelisted(merkleProof,msg.sender),\"whitelist\");\r\n\r\n        tokensClaimed++;\r\n        hasMinted[msg.sender] = true;\r\n        _mint(msg.sender,++tokensMinted);\r\n    }","contract":"GBATraps","time":0},{"type":"external-function ","before":"function updateURI(string memory _uriBase, string memory _uriSuffix) public onlyOwner{\r\n        __uriBase   = _uriBase;\r\n        __uriSuffix = _uriSuffix;\r\n    }","after":"function updateURI(string calldata _uriBase, string calldata _uriSuffix) public onlyOwner{\r\n        __uriBase   = _uriBase;\r\n        __uriSuffix = _uriSuffix;\r\n    }","contract":"GBATraps","time":0},{"type":"immutable-restrict-modification ","before":"address whitelist;","after":"address immutable whitelist;","contract":"GBATraps","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 merkleRoot;","after":"bytes32 immutable merkleRoot;","contract":"GBAWhitelist","time":0}]}
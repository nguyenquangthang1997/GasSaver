{"time":122,"results":[{"type":"state-data-arrangement ","before":"\nstring private baseURI;\nuint256 private price = 0.03 ether;\nuint256 public constant MAX_SUPPLY = 2000;\nuint256 public constant MAX_PURCHASE = 20;\nbool public saleIsActive = false;\nuint256 private reserved = 40;\naddress withdrawAddress = 0x6907495b99FF6270B6de708c04f3DaCAedD40A40;","after":"string private baseURI;\nuint256 private price = 0.03 ether;\nuint256 public constant MAX_SUPPLY = 2000;\nuint256 public constant MAX_PURCHASE = 20;\nuint256 private reserved = 40;\naddress withdrawAddress = 0x6907495b99FF6270B6de708c04f3DaCAedD40A40;\nbool public saleIsActive = false;\n","contract":"PsychoPunks","time":0},{"type":"external-function ","before":"function mint(uint256 _amount, string memory _twitterUsername) public payable {\n        uint256 supply = totalSupply();\n\n        require( saleIsActive, \"Sale is not currently active\" );\n        require( _amount <= MAX_PURCHASE, \"Can only mint 20 tokens at a time\" );\n        require( (supply + _amount) <= (MAX_SUPPLY - reserved), \"Purchase would exceed maximum supply\" );\n        require( msg.value >= (price * _amount), \"Value sent is not correct\" );\n\n        for (uint256 i; i < _amount; i++) {\n            uint256 tokenId = (supply + i);\n            _safeMint(msg.sender, tokenId);\n            emit Mint(tokenId, _twitterUsername, msg.sender);\n        }\n\n        emit MintBatch(supply, _amount, _twitterUsername, msg.sender);\n    }","after":"function mint(uint256 _amount, string calldata _twitterUsername) public payable {\n        uint256 supply = totalSupply();\n\n        require( saleIsActive, \"Sale is not currently active\" );\n        require( _amount <= MAX_PURCHASE, \"Can only mint 20 tokens at a time\" );\n        require( (supply + _amount) <= (MAX_SUPPLY - reserved), \"Purchase would exceed maximum supply\" );\n        require( msg.value >= (price * _amount), \"Value sent is not correct\" );\n\n        for (uint256 i; i < _amount; i++) {\n            uint256 tokenId = (supply + i);\n            _safeMint(msg.sender, tokenId);\n            emit Mint(tokenId, _twitterUsername, msg.sender);\n        }\n\n        emit MintBatch(supply, _amount, _twitterUsername, msg.sender);\n    }","contract":"PsychoPunks","time":0},{"type":"external-function ","before":"function giveAway(address _to, uint256 _amount, string memory _twitterUsername) external onlyOwner() {\n        require(_amount <= reserved, \"Exceeds reserved token supply\" );\n\n        uint256 supply = totalSupply();\n        for (uint256 i; i < _amount; i++) {\n            uint256 tokenId = (supply + i);\n            _safeMint(_to, tokenId);\n            emit Mint(tokenId, _twitterUsername, msg.sender);\n        }\n\n        reserved -= _amount;\n        emit MintBatch(supply, _amount, _twitterUsername, msg.sender);\n    }","after":"function giveAway(address _to, uint256 _amount, string calldata _twitterUsername) external onlyOwner() {\n        require(_amount <= reserved, \"Exceeds reserved token supply\" );\n\n        uint256 supply = totalSupply();\n        for (uint256 i; i < _amount; i++) {\n            uint256 tokenId = (supply + i);\n            _safeMint(_to, tokenId);\n            emit Mint(tokenId, _twitterUsername, msg.sender);\n        }\n\n        reserved -= _amount;\n        emit MintBatch(supply, _amount, _twitterUsername, msg.sender);\n    }","contract":"PsychoPunks","time":0},{"type":"constant-restrict-modification  ","before":"address withdrawAddress = 0x6907495b99FF6270B6de708c04f3DaCAedD40A40;","after":"address constant withdrawAddress = 0x6907495b99FF6270B6de708c04f3DaCAedD40A40;","contract":"PsychoPunks","time":0}]}
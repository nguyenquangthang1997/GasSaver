{"time":96,"results":[{"type":"external-function ","before":"function mint(address to, uint256 tokenId, bytes memory extraBytes)\n        external {\n        (bool drop, bytes memory signature) = abi.decode(extraBytes, (bool, bytes));\n\n        if (drop) {\n            bytes32 hash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(to, tokenId)));\n            require(ECDSA.recover(hash, signature) == signer, \"Signature failed to recover\");\n        } else {\n            require(msg.sender == owner() || super.isApprovedForAll(owner(), msg.sender), \"msg.sender is not authorized to mint\");\n        }\n\n        _safeMint(to, tokenId);\n    }","after":"function mint(address to, uint256 tokenId, bytes calldata extraBytes)\n        external {\n        (bool drop, bytes memory signature) = abi.decode(extraBytes, (bool, bytes));\n\n        if (drop) {\n            bytes32 hash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(to, tokenId)));\n            require(ECDSA.recover(hash, signature) == signer, \"Signature failed to recover\");\n        } else {\n            require(msg.sender == owner() || super.isApprovedForAll(owner(), msg.sender), \"msg.sender is not authorized to mint\");\n        }\n\n        _safeMint(to, tokenId);\n    }","contract":"NiftyPistol","time":0},{"type":"external-function ","before":"function updateBaseURI(string memory newURI) external onlyOwner {\n        baseURI = newURI;\n    }","after":"function updateBaseURI(string calldata newURI) external onlyOwner {\n        baseURI = newURI;\n    }","contract":"NiftyPistol","time":0},{"type":"external-function ","before":"function updateContractURI(string memory newURI) external onlyOwner {\n        _contractMetadataURI = newURI;\n    }","after":"function updateContractURI(string calldata newURI) external onlyOwner {\n        _contractMetadataURI = newURI;\n    }","contract":"NiftyPistol","time":0}]}
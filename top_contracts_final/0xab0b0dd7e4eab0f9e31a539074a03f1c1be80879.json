{"time":152,"results":[{"type":"external-function ","before":"function whitelistClaim(uint256 tokenId, uint256 spotInWhitelist, bytes32[] memory proof) public nonReentrant {\n        require(whitelistActive, \"The whitelist is not active yet\");\n        require(tokenId > 0 && tokenId < 2501, \"Token ID invalid\");\n        require(whitelistValidated(_msgSender(), spotInWhitelist, proof), \"You're not on the whitelist\");\n        require(_whitelistMinters[_msgSender()] < 1, \"You've already minted\");\n\n        _safeMint(_msgSender(), tokenId);\n\n        //Set the _whitelistMinters value to tokenId for this address as it has minted\n        _whitelistMinters[_msgSender()] = tokenId;\n    }","after":"function whitelistClaim(uint256 tokenId, uint256 spotInWhitelist, bytes32[] calldata proof) public nonReentrant {\n        require(whitelistActive, \"The whitelist is not active yet\");\n        require(tokenId > 0 && tokenId < 2501, \"Token ID invalid\");\n        require(whitelistValidated(_msgSender(), spotInWhitelist, proof), \"You're not on the whitelist\");\n        require(_whitelistMinters[_msgSender()] < 1, \"You've already minted\");\n\n        _safeMint(_msgSender(), tokenId);\n\n        //Set the _whitelistMinters value to tokenId for this address as it has minted\n        _whitelistMinters[_msgSender()] = tokenId;\n    }","contract":"vaultBox","time":0}]}
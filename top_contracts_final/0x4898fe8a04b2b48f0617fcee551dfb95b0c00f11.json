{"time":136,"results":[{"type":"external-function ","before":"function createNonUnique(uint256 price, uint256 count, string memory ipfsHash) external nonReentrant minterOrOwner {\n        uint256 tokenId = ++_totalTokens;\n        require(_maxSupplies[tokenId] == 0, \"Already created.\");\n        require(price > 0, \"Must have price\");\n        require(count > 1, \"Must be non-unique\");\n        require(bytes(ipfsHash).length > 0, \"Need ipfs hash\");\n\n        _maxSupplies[tokenId] = count;\n        _prices[tokenId] = price;\n        _hashes[tokenId] = ipfsHash;\n\n        emit AllocatedTokens(tokenId, price, count);\n    }","after":"function createNonUnique(uint256 price, uint256 count, string calldata ipfsHash) external nonReentrant minterOrOwner {\n        uint256 tokenId = ++_totalTokens;\n        require(_maxSupplies[tokenId] == 0, \"Already created.\");\n        require(price > 0, \"Must have price\");\n        require(count > 1, \"Must be non-unique\");\n        require(bytes(ipfsHash).length > 0, \"Need ipfs hash\");\n\n        _maxSupplies[tokenId] = count;\n        _prices[tokenId] = price;\n        _hashes[tokenId] = ipfsHash;\n\n        emit AllocatedTokens(tokenId, price, count);\n    }","contract":"SupRecords","time":0},{"type":"external-function ","before":"function mintUnique(string memory ipfsHash) external nonReentrant minterOrOwner {\n        uint256 tokenId = ++_totalTokens;\n        require(_maxSupplies[tokenId] == 0, \"Already minted\");\n        require(bytes(ipfsHash).length > 0, \"Need ipfs hash\");\n\n        _totalSupplies[tokenId] = 1;\n        _maxSupplies[tokenId] = 1;\n        _hashes[tokenId] = ipfsHash;\n\n        _mint(_msgSender(), tokenId, 1, \"\");\n    }","after":"function mintUnique(string calldata ipfsHash) external nonReentrant minterOrOwner {\n        uint256 tokenId = ++_totalTokens;\n        require(_maxSupplies[tokenId] == 0, \"Already minted\");\n        require(bytes(ipfsHash).length > 0, \"Need ipfs hash\");\n\n        _totalSupplies[tokenId] = 1;\n        _maxSupplies[tokenId] = 1;\n        _hashes[tokenId] = ipfsHash;\n\n        _mint(_msgSender(), tokenId, 1, \"\");\n    }","contract":"SupRecords","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"SupRecords","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"SupRecords","time":0}]}
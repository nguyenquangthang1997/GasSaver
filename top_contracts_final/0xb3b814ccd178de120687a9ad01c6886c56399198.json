{"time":152,"results":[{"type":"external-function ","before":"function freeMint(\n        uint256 quantity,\n        LibMintpass.Mintpass memory mintpass,\n        bytes memory mintpassSignature\n    ) public {\n        require(\n            whitelistMintEnabled == true || publicMintEnabled == true,\n            \"TheWhitelist: Minting is not Enabled\"\n        );\n        require(\n            mintpass.minterAddress == msg.sender,\n            \"TheWhitelist: Mintpass Address and Sender do not match\"\n        );\n        require(\n            mintpassRedemptions[mintpassSignature] + quantity <=\n                mintpass.amount,\n            \"TheWhitelist: Mintpass already redeemed\"\n        );\n        require(\n            mintpass.minterCategory == 99,\n            \"TheWhitelist: Mintpass not a Free Mint\"\n        );\n\n        validateMintpass(mintpass, mintpassSignature);\n        mintQuantityToWallet(quantity, mintpass.minterAddress);\n        mintpassRedemptions[mintpassSignature] =\n            mintpassRedemptions[mintpassSignature] +\n            quantity;\n    }","after":"function freeMint(\n        uint256 quantity,\n        LibMintpass.Mintpass calldata mintpass,\n        bytes calldata mintpassSignature\n    ) public {\n        require(\n            whitelistMintEnabled == true || publicMintEnabled == true,\n            \"TheWhitelist: Minting is not Enabled\"\n        );\n        require(\n            mintpass.minterAddress == msg.sender,\n            \"TheWhitelist: Mintpass Address and Sender do not match\"\n        );\n        require(\n            mintpassRedemptions[mintpassSignature] + quantity <=\n                mintpass.amount,\n            \"TheWhitelist: Mintpass already redeemed\"\n        );\n        require(\n            mintpass.minterCategory == 99,\n            \"TheWhitelist: Mintpass not a Free Mint\"\n        );\n\n        validateMintpass(mintpass, mintpassSignature);\n        mintQuantityToWallet(quantity, mintpass.minterAddress);\n        mintpassRedemptions[mintpassSignature] =\n            mintpassRedemptions[mintpassSignature] +\n            quantity;\n    }","contract":"TheWhitelist","time":0},{"type":"external-function ","before":"function mintWhitelist(\n        uint256 quantity,\n        LibMintpass.Mintpass memory mintpass,\n        bytes memory mintpassSignature\n    ) public payable {\n        require(\n            whitelistMintEnabled == true,\n            \"TheWhitelist: Whitelist Minting is not Enabled\"\n        );\n        require(\n            mintpass.minterAddress == msg.sender,\n            \"TheWhitelist: Mintpass Address and Sender do not match\"\n        );\n        require(\n            msg.value >= whitelistMintPrice * quantity,\n            \"TheWhitelist: Insufficient Amount\"\n        );\n        require(\n            boughtWhitelistAmounts[mintpass.minterAddress] + quantity <=\n                whitelistMintLimitPerWallet,\n            \"TheWhitelist: Maximum Whitelist per Wallet reached\"\n        );\n\n        validateMintpass(mintpass, mintpassSignature);\n        mintQuantityToWallet(quantity, mintpass.minterAddress);\n        boughtWhitelistAmounts[mintpass.minterAddress] =\n            boughtWhitelistAmounts[mintpass.minterAddress] +\n            quantity;\n    }","after":"function mintWhitelist(\n        uint256 quantity,\n        LibMintpass.Mintpass calldata mintpass,\n        bytes calldata mintpassSignature\n    ) public payable {\n        require(\n            whitelistMintEnabled == true,\n            \"TheWhitelist: Whitelist Minting is not Enabled\"\n        );\n        require(\n            mintpass.minterAddress == msg.sender,\n            \"TheWhitelist: Mintpass Address and Sender do not match\"\n        );\n        require(\n            msg.value >= whitelistMintPrice * quantity,\n            \"TheWhitelist: Insufficient Amount\"\n        );\n        require(\n            boughtWhitelistAmounts[mintpass.minterAddress] + quantity <=\n                whitelistMintLimitPerWallet,\n            \"TheWhitelist: Maximum Whitelist per Wallet reached\"\n        );\n\n        validateMintpass(mintpass, mintpassSignature);\n        mintQuantityToWallet(quantity, mintpass.minterAddress);\n        boughtWhitelistAmounts[mintpass.minterAddress] =\n            boughtWhitelistAmounts[mintpass.minterAddress] +\n            quantity;\n    }","contract":"TheWhitelist","time":0},{"type":"external-function ","before":"function setBaseURI(string memory permanentBaseURI)\n        public\n        virtual\n        onlyOwner\n    {\n        _baseTokenURI = permanentBaseURI;\n    }","after":"function setBaseURI(string calldata permanentBaseURI)\n        public\n        virtual\n        onlyOwner\n    {\n        _baseTokenURI = permanentBaseURI;\n    }","contract":"TheWhitelist","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory permanentTokenURI)\n        public\n        virtual\n    {\n        require(\n            (msg.sender == ACE_WALLET || msg.sender == owner()),\n            \"TheWhitelist: Can only be modified by ACE\"\n        );\n        require(_exists(tokenId), \"TheWhitelist: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = permanentTokenURI;\n        emit TokenUriChanged(msg.sender, tokenId, permanentTokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata permanentTokenURI)\n        public\n        virtual\n    {\n        require(\n            (msg.sender == ACE_WALLET || msg.sender == owner()),\n            \"TheWhitelist: Can only be modified by ACE\"\n        );\n        require(_exists(tokenId), \"TheWhitelist: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = permanentTokenURI;\n        emit TokenUriChanged(msg.sender, tokenId, permanentTokenURI);\n    }","contract":"TheWhitelist","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public TOKEN_LIMIT = 10000;","after":"uint256 public constant TOKEN_LIMIT = 10000;","contract":"TheWhitelist","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public whitelistMintPrice = 0.17 ether;","after":"uint256 public constant whitelistMintPrice = 0.17 ether;","contract":"TheWhitelist","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public publicMintPrice = 0.19 ether;","after":"uint256 public constant publicMintPrice = 0.19 ether;","contract":"TheWhitelist","time":0}]}
{"time":138,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant MAX_NFT_SUPPLY = 10000;\nuint256 public maxPurchase = 10;\nuint256 public constant reserveTokens = 500;\nuint256 public tokenPrice = 50000000000000000;\naddress public constant devAddress = 0x0dd874F41cE844FcdaeBA33714B6197136D89B7F;\naddress public constant operationsAddress = 0xE9b8bC7aEf16Fb0d53d74f05a897E8A92B2de04f;\nstring public IBProvenanceHash;\nbool public metadataLocked = false;\nbool public saleIsActive = false;\naddress[] public _whitelistedAddresses;\nbool public publicSale = false;\nmapping(address => uint256) public _presaleCounter;\nmapping(address => uint256) public amountPerAddress;\nuint256 public presaleLimit = 5;\nuint256 public maxPerAddress = 10;\nuint256 public _reserveTokensTaken = 0;\nuint256 internal _randomOffset = 0;","after":"uint256 public constant MAX_NFT_SUPPLY = 10000;\nuint256 public maxPurchase = 10;\nuint256 public constant reserveTokens = 500;\nuint256 public tokenPrice = 50000000000000000;\nstring public IBProvenanceHash;\naddress[] public _whitelistedAddresses;\nmapping(address => uint256) public _presaleCounter;\nmapping(address => uint256) public amountPerAddress;\nuint256 public presaleLimit = 5;\nuint256 public maxPerAddress = 10;\nuint256 public _reserveTokensTaken = 0;\nuint256 internal _randomOffset = 0;\naddress public constant devAddress = 0x0dd874F41cE844FcdaeBA33714B6197136D89B7F;\naddress public constant operationsAddress = 0xE9b8bC7aEf16Fb0d53d74f05a897E8A92B2de04f;\nbool public metadataLocked = false;\nbool public saleIsActive = false;\nbool public publicSale = false;\n","contract":"InfectedBodies","time":0},{"type":"external-function ","before":"function setWhitelisted(address[] memory addresses) public onlyOwner {\n        delete _whitelistedAddresses;\n        _whitelistedAddresses = addresses;\n    }","after":"function setWhitelisted(address[] calldata addresses) public onlyOwner {\n        delete _whitelistedAddresses;\n        _whitelistedAddresses = addresses;\n    }","contract":"InfectedBodies","time":0},{"type":"external-function ","before":"function lockMetadata(string memory finalHash) public onlyOwner {\n        require(metadataLocked != true, \"Infected bodies: You've already locked the metadata!\");\n\n        IBProvenanceHash = finalHash;\n        metadataLocked = true;\n    }","after":"function lockMetadata(string calldata finalHash) public onlyOwner {\n        require(metadataLocked != true, \"Infected bodies: You've already locked the metadata!\");\n\n        IBProvenanceHash = finalHash;\n        metadataLocked = true;\n    }","contract":"InfectedBodies","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        require(metadataLocked != true, \"Metadata has already been locked and cannot be changed anymore!\");\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        require(metadataLocked != true, \"Metadata has already been locked and cannot be changed anymore!\");\n        _setBaseURI(baseURI);\n    }","contract":"InfectedBodies","time":0}]}
{"time":71,"results":[{"type":"state-data-arrangement ","before":"\nstring public name;\nstring public symbol;\nuint8 public decimals;\nuint256 public totalSupply;\naddress public tokenOwner;\naddress private ico;\nmapping(address => uint256) balances;\nmapping (address => mapping (address => uint256)) internal allowed;\nmapping(address => bool) public vestedlist;\nbool public mintingFinished = false;\nbool public locked = true;","after":"string public name;\nstring public symbol;\nuint256 public totalSupply;\nmapping(address => uint256) balances;\nmapping (address => mapping (address => uint256)) internal allowed;\nmapping(address => bool) public vestedlist;\naddress public tokenOwner;\naddress private ico;\nuint8 public decimals;\nbool public mintingFinished = false;\nbool public locked = true;\n","contract":"TokenContract","time":0},{"type":"external-function ","before":"function addToVestedlist(address[] memory _vestedAddress) public onlyOwner {\n        for (uint256 i = 0; i < _vestedAddress.length; i++) {\n            if (vestedlist[_vestedAddress[i]]) continue;\n            vestedlist[_vestedAddress[i]] = true;\n        }\n    }","after":"function addToVestedlist(address[] calldata _vestedAddress) public onlyOwner {\n        for (uint256 i = 0; i < _vestedAddress.length; i++) {\n            if (vestedlist[_vestedAddress[i]]) continue;\n            vestedlist[_vestedAddress[i]] = true;\n        }\n    }","contract":"TokenContract","time":0},{"type":"external-function ","before":"function removeFromVestedlist(address[] memory _vestedAddress) public onlyOwner {\n        for (uint256 i = 0; i < _vestedAddress.length; i++) {\n            if (!vestedlist[_vestedAddress[i]]) continue;\n            vestedlist[_vestedAddress[i]] = false;\n        }\n    }","after":"function removeFromVestedlist(address[] calldata _vestedAddress) public onlyOwner {\n        for (uint256 i = 0; i < _vestedAddress.length; i++) {\n            if (!vestedlist[_vestedAddress[i]]) continue;\n            vestedlist[_vestedAddress[i]] = false;\n        }\n    }","contract":"TokenContract","time":0},{"type":"immutable-restrict-modification ","before":"uint8 public decimals;","after":"uint8 public immutable decimals;","contract":"TokenContract","time":1}]}
{"time":123,"results":[{"type":"loop-duplication","before":"\nstart line 1143 column 8, end line 1145 column 8\nfor (uint256 i = 0; i < ids.length; i++) {\n            require(!tokenCheck[ids[i]], \"Token with this ID already exists\");\n        }\nstart line 1146 column 8, end line 1149 column 8\nfor (uint256 i = 0; i < ids.length; i++) {\n            tokenCheck[ids[i]] = true;\n            amounts[i]= 1;\n        }","after":"// merge loop\n\nstart line 1143 column 8, end line 1145 column 8\nfor (uint256 i = 0; i < ids.length; i++) {\n            require(!tokenCheck[ids[i]], \"Token with this ID already exists\");\n        }\nstart line 1146 column 8, end line 1149 column 8\nfor (uint256 i = 0; i < ids.length; i++) {\n            tokenCheck[ids[i]] = true;\n            amounts[i]= 1;\n        }","contract":"HappyHipposNFTs","time":0},{"type":"external-function ","before":"function mintSingleToMultipleBatch(address to, uint256[] memory ids, bytes memory data) public onlyOwner {\n        uint256 _length= ids.length;\n        uint256[] memory amounts = new uint256[](_length);\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!tokenCheck[ids[i]], \"Token with this ID already exists\");\n        }\n        for (uint256 i = 0; i < ids.length; i++) {\n            tokenCheck[ids[i]] = true;\n            amounts[i]= 1;\n        }\n        _mintBatch(to, ids, amounts, data);\n    }","after":"function mintSingleToMultipleBatch(address to, uint256[] calldata ids, bytes calldata data) public onlyOwner {\n        uint256 _length= ids.length;\n        uint256[] memory amounts = new uint256[](_length);\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!tokenCheck[ids[i]], \"Token with this ID already exists\");\n        }\n        for (uint256 i = 0; i < ids.length; i++) {\n            tokenCheck[ids[i]] = true;\n            amounts[i]= 1;\n        }\n        _mintBatch(to, ids, amounts, data);\n    }","contract":"HappyHipposNFTs","time":0},{"type":"external-function ","before":"function mintSingleToMultiple(address account, uint256[] memory ids) public onlyOwner {\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!tokenCheck[ids[i]], \"Token with this ID already exists\");\n            _mint(account, ids[i], 1, \"\");\n            tokenCheck[ids[i]] = true;\n        }\n    }","after":"function mintSingleToMultiple(address account, uint256[] calldata ids) public onlyOwner {\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(!tokenCheck[ids[i]], \"Token with this ID already exists\");\n            _mint(account, ids[i], 1, \"\");\n            tokenCheck[ids[i]] = true;\n        }\n    }","contract":"HappyHipposNFTs","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) public onlyOwner {\n        _setURI(newuri);\n    }","contract":"HappyHipposNFTs","time":1},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"HappyHipposNFTs","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"HappyHipposNFTs","time":0}]}
{"time":124,"results":[{"type":"external-function ","before":"function mintBatch(\n        address to,\n        uint256 number,\n        bytes memory data\n    ) external payable nonReentrant whenNotPaused {\n        // uint256 stage = _stage;\n        uint256 currentTokenId = _tokenIdCounter.current();\n        require((number > 0), \"PMCC: must mint at least one token\");\n        require(((number + currentTokenId) <= maxSupply), \"PMCC: request exceeds maxSupply\");\n        if (msg.sender != owner()) {\n            require((_stage > 0), \"PMCC: public minting not yet open\");\n            require((number <= 3), \"PMCC: minting limited to maximum 3 tokens\");\n            require(msg.value == getMintingPrice(number), \"PMCC: price must be equal to current getMintingPrice\");\n            if (_stage == 1) {\n                // revert if we are in whitelist period and minter is not on the whitelist and is not owner\n                require((_whiteListTotals[msg.sender] >= number), \"PMCC: sender has insufficient whitelist allowance\");\n                _whiteListTotals[msg.sender] = _whiteListTotals[msg.sender] - number;\n            }\n        }\n        uint256[] memory ids = new uint256[](number);\n        uint256[] memory amount = new uint256[](number);\n        for (uint256 i = 0; i < number; i++) {\n            _tokenIdCounter.increment();\n            ids[i] = _tokenIdCounter.current();\n            amount[i] = 0x00000000000000000000000000000001;\n        }\n        _mintBatch(to, ids, amount, data);\n    }","after":"function mintBatch(\n        address to,\n        uint256 number,\n        bytes calldata data\n    ) external payable nonReentrant whenNotPaused {\n        // uint256 stage = _stage;\n        uint256 currentTokenId = _tokenIdCounter.current();\n        require((number > 0), \"PMCC: must mint at least one token\");\n        require(((number + currentTokenId) <= maxSupply), \"PMCC: request exceeds maxSupply\");\n        if (msg.sender != owner()) {\n            require((_stage > 0), \"PMCC: public minting not yet open\");\n            require((number <= 3), \"PMCC: minting limited to maximum 3 tokens\");\n            require(msg.value == getMintingPrice(number), \"PMCC: price must be equal to current getMintingPrice\");\n            if (_stage == 1) {\n                // revert if we are in whitelist period and minter is not on the whitelist and is not owner\n                require((_whiteListTotals[msg.sender] >= number), \"PMCC: sender has insufficient whitelist allowance\");\n                _whiteListTotals[msg.sender] = _whiteListTotals[msg.sender] - number;\n            }\n        }\n        uint256[] memory ids = new uint256[](number);\n        uint256[] memory amount = new uint256[](number);\n        for (uint256 i = 0; i < number; i++) {\n            _tokenIdCounter.increment();\n            ids[i] = _tokenIdCounter.current();\n            amount[i] = 0x00000000000000000000000000000001;\n        }\n        _mintBatch(to, ids, amount, data);\n    }","contract":"PMCC1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"PMCC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"PMCC1155","time":0},{"type":"constant-restrict-modification  ","before":"uint256 maxSupply = 5000;","after":"uint256 constant maxSupply = 5000;","contract":"PMCC1155","time":1}]}
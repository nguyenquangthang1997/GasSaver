{"time":159,"results":[{"type":"external-function ","before":"function mint(uint256 _mintAmount, bytes memory _signature)\n        external\n        payable\n    {\n        /// @notice Check the mint is active or the sender is whitelisted\n        require(\n            mintMain ||\n                (mintWhitelist && isValidAccessMessage(msg.sender, _signature)),\n            \"Minting unavailable\"\n        );\n        require(_mintAmount > 0 && _mintAmount < MAX_MINT, \"Invalid amount\");\n        uint256 _tokenId = _tokenIdCounter.current();\n        require(_tokenId + _mintAmount <= MAX_SUPPLY, \"Supply limit reached\");\n        require(\n            addressMintedBalance[msg.sender] + _mintAmount < MAX_MINT,\n            \"Mint limit reached\"\n        );\n        require(msg.value == COST * _mintAmount, \"Incorrect ETH\");\n\n        /// @notice Increment minted amount for user and safe mint to address\n        addressMintedBalance[msg.sender] += _mintAmount;\n        for (uint256 i = 0; i < _mintAmount; i++) {\n            _safeMint(msg.sender, _tokenId + i);\n            _tokenIdCounter.increment();\n        }\n    }","after":"function mint(uint256 _mintAmount, bytes calldata _signature)\n        external\n        payable\n    {\n        /// @notice Check the mint is active or the sender is whitelisted\n        require(\n            mintMain ||\n                (mintWhitelist && isValidAccessMessage(msg.sender, _signature)),\n            \"Minting unavailable\"\n        );\n        require(_mintAmount > 0 && _mintAmount < MAX_MINT, \"Invalid amount\");\n        uint256 _tokenId = _tokenIdCounter.current();\n        require(_tokenId + _mintAmount <= MAX_SUPPLY, \"Supply limit reached\");\n        require(\n            addressMintedBalance[msg.sender] + _mintAmount < MAX_MINT,\n            \"Mint limit reached\"\n        );\n        require(msg.value == COST * _mintAmount, \"Incorrect ETH\");\n\n        /// @notice Increment minted amount for user and safe mint to address\n        addressMintedBalance[msg.sender] += _mintAmount;\n        for (uint256 i = 0; i < _mintAmount; i++) {\n            _safeMint(msg.sender, _tokenId + i);\n            _tokenIdCounter.increment();\n        }\n    }","contract":"DegenzDen","time":0},{"type":"external-function ","before":"function setHiddenURI(string memory _hiddenURI) external onlyOwner {\n        hiddenURI = _hiddenURI;\n    }","after":"function setHiddenURI(string calldata _hiddenURI) external onlyOwner {\n        hiddenURI = _hiddenURI;\n    }","contract":"DegenzDen","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newBaseURI) external onlyOwner {\n        baseURI = _newBaseURI;\n    }","after":"function setBaseURI(string calldata _newBaseURI) external onlyOwner {\n        baseURI = _newBaseURI;\n    }","contract":"DegenzDen","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension)\n        external\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","after":"function setBaseExtension(string calldata _newBaseExtension)\n        external\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","contract":"DegenzDen","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public COST = 0.04 ether;","after":"uint256 public constant COST = 0.04 ether;","contract":"DegenzDen","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_SUPPLY = 2000;","after":"uint256 public constant MAX_SUPPLY = 2000;","contract":"DegenzDen","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_MINT = 6;","after":"uint256 public constant MAX_MINT = 6;","contract":"DegenzDen","time":0}]}
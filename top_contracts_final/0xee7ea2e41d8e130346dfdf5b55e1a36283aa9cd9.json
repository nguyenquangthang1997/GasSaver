{"time":726,"results":[{"type":"external-function ","before":"function mint(uint256 parentId, bytes memory layer) public payable returns (uint256) {\n      require(isForkActivated(parentId), \"Invalid parent, not yet activated\");\n      require(currentPriceToMint(parentId) <= msg.value, \"Eth value sent is not sufficient\");\n      \n      _autonomousArt._validateLayer(layer);\n\n      Fork    storage fork      = _forks[parentId];\n      uint256         mintIndex = _tokenCount;\n      uint256         forkIndex = fork.layers.length;\n\n      fork.layers.push(Layer({creator: msg.sender,\n                              timestamp: block.timestamp,\n                              funded: msg.value,\n                              withdrawIndex: forkIndex,\n                              tokenId: mintIndex,\n                              data: layer}));\n      fork.totalFunded += msg.value;\n\n      _index[mintIndex] = LayerIndex({parentId: parentId, index: forkIndex});\n\n      _tokenCount         += 1;\n      _rootBalance        += msg.value / (forkIndex + 1 + 1 + 1);\n      _totalFundsReceived += msg.value;\n\n      _safeMint(msg.sender, mintIndex);\n\n      return mintIndex;\n    }","after":"function mint(uint256 parentId, bytes calldata layer) public payable returns (uint256) {\n      require(isForkActivated(parentId), \"Invalid parent, not yet activated\");\n      require(currentPriceToMint(parentId) <= msg.value, \"Eth value sent is not sufficient\");\n      \n      _autonomousArt._validateLayer(layer);\n\n      Fork    storage fork      = _forks[parentId];\n      uint256         mintIndex = _tokenCount;\n      uint256         forkIndex = fork.layers.length;\n\n      fork.layers.push(Layer({creator: msg.sender,\n                              timestamp: block.timestamp,\n                              funded: msg.value,\n                              withdrawIndex: forkIndex,\n                              tokenId: mintIndex,\n                              data: layer}));\n      fork.totalFunded += msg.value;\n\n      _index[mintIndex] = LayerIndex({parentId: parentId, index: forkIndex});\n\n      _tokenCount         += 1;\n      _rootBalance        += msg.value / (forkIndex + 1 + 1 + 1);\n      _totalFundsReceived += msg.value;\n\n      _safeMint(msg.sender, mintIndex);\n\n      return mintIndex;\n    }","contract":"AutonomousSubArt","time":0},{"type":"external-function ","before":"function mint(bytes memory layer) public payable returns (uint256) {\n      require(currentPriceToMint() <= msg.value, \"Eth value sent is not sufficient\");\n      \n      _validateLayer(layer);\n\n      uint mintIndex = _layers.length;\n      _layers.push(layer);\n\n      _safeMint(msg.sender, mintIndex);\n      _tokenMetadata[mintIndex] = TokenMetadata({creator: msg.sender, \n                                                 timestamp: block.timestamp, \n                                                 funded: msg.value, \n                                                 withdrawn: 0});\n\n      return mintIndex;\n    }","after":"function mint(bytes calldata layer) public payable returns (uint256) {\n      require(currentPriceToMint() <= msg.value, \"Eth value sent is not sufficient\");\n      \n      _validateLayer(layer);\n\n      uint mintIndex = _layers.length;\n      _layers.push(layer);\n\n      _safeMint(msg.sender, mintIndex);\n      _tokenMetadata[mintIndex] = TokenMetadata({creator: msg.sender, \n                                                 timestamp: block.timestamp, \n                                                 funded: msg.value, \n                                                 withdrawn: 0});\n\n      return mintIndex;\n    }","contract":"CollectiveCanvas","time":0}]}
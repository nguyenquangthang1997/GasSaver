{"time":110,"results":[{"type":"external-function ","before":"function presaleMint(bytes memory _signature, uint256 quantity) public payable{\n        require(verify(owner(), _signature), \"You are not Whitelisted.\");\n        require((whitelistMinted[msg.sender] + quantity) <= 3, \"You have mint your all NFTs.\");\n        require(msg.value >= (mintPrice * quantity), \"Invalid Price To Mint\");\n        require(reserved > 0, \"All reserved NFTs are minted.\");\n\n        (bool success,) = owner().call{value: msg.value}(\"\");\n        if(!success) {\n            revert(\"Payment Sending Failed\");\n        }\n        else{\n            for (uint256 i=0; i < quantity; i++) {\n                totalSupply++;\n                _safeMint(msg.sender, totalSupply);\n                whitelistMinted[msg.sender] += 1;\n            }\n            reserved = reserved - quantity;     \n        }\n    }","after":"function presaleMint(bytes calldata _signature, uint256 quantity) public payable{\n        require(verify(owner(), _signature), \"You are not Whitelisted.\");\n        require((whitelistMinted[msg.sender] + quantity) <= 3, \"You have mint your all NFTs.\");\n        require(msg.value >= (mintPrice * quantity), \"Invalid Price To Mint\");\n        require(reserved > 0, \"All reserved NFTs are minted.\");\n\n        (bool success,) = owner().call{value: msg.value}(\"\");\n        if(!success) {\n            revert(\"Payment Sending Failed\");\n        }\n        else{\n            for (uint256 i=0; i < quantity; i++) {\n                totalSupply++;\n                _safeMint(msg.sender, totalSupply);\n                whitelistMinted[msg.sender] += 1;\n            }\n            reserved = reserved - quantity;     \n        }\n    }","contract":"SuburbanColors","time":0},{"type":"external-function ","before":"function _setbaseURI(string memory _baseUri) external onlyOwner{\n        baseUri = _baseUri;\n    }","after":"function _setbaseURI(string calldata _baseUri) external onlyOwner{\n        baseUri = _baseUri;\n    }","contract":"SuburbanColors","time":0},{"type":"external-function ","before":"function batchMintByOwner(address[] memory mintAddressList,uint256[] memory quantityList) external onlyOwner {\n        require (mintAddressList.length == quantityList.length, \"The length should be same\");\n\n        for (uint256 i=0; i<mintAddressList.length; i++) {\n            mintByOwner(mintAddressList[i], quantityList[i]);\n        }\n    }","after":"function batchMintByOwner(address[] calldata mintAddressList,uint256[] calldata quantityList) external onlyOwner {\n        require (mintAddressList.length == quantityList.length, \"The length should be same\");\n\n        for (uint256 i=0; i<mintAddressList.length; i++) {\n            mintByOwner(mintAddressList[i], quantityList[i]);\n        }\n    }","contract":"SuburbanColors","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public launchedAt;","after":"uint256 public immutable launchedAt;","contract":"SuburbanColors","time":1}]}
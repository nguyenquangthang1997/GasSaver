{"time":189,"results":[{"type":"external-function ","before":"function claim(\r\n        uint256[] memory claimedRatIds,\r\n        uint256 from,\r\n        uint256 count\r\n    ) public {\r\n        _enforceSaleStarted();\r\n        _enforceClaimPeriod(true);\r\n        if (claimedRatIds.length == 0) {\r\n            if (from == 0 && count == 0) {\r\n                // I. Claim All\r\n                uint256[] memory unclaimed = _listUnclaimed();\r\n                _enforceClaimConditions(unclaimed.length);\r\n                for (uint256 i = 0; i < unclaimed.length; i++) {\r\n                    _straightMintGG(msg.sender, unclaimed[i]);\r\n                }\r\n            } else {\r\n                if (from == 0) {\r\n                    // claim count GGs\r\n                    _enforceClaimConditions(count);\r\n                    for (uint256 i = 0; i < count; i++) {\r\n                        _straightMintGG(msg.sender, _nextUnclaimedRatId());\r\n                    }\r\n                } else {\r\n                    // claim count GGs starting with from\r\n                    _enforceClaimConditions(count);\r\n                    uint256[] memory tokenIds = _enforceSequentialAvailability(\r\n                        from,\r\n                        count\r\n                    );\r\n                    for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                        _straightMintGG(msg.sender, tokenIds[i]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (claimedRatIds.length == 1) {\r\n                if (claimedRatIds[0] == 0) {\r\n                    // claim single GG based on the next unclaimed Rat\r\n                    _enforceClaimConditions(1);\r\n                    _straightMintGG(msg.sender, _nextUnclaimedRatId());\r\n                } else {\r\n                    // claim single GG based on a specific unclaimed Rat\r\n                    _enforceClaimConditions(1);\r\n                    _straightMintGG(msg.sender, claimedRatIds[0]);\r\n                }\r\n            } else {\r\n                // claim multiple GGs based on specific unclaimed Rats\r\n                _enforceClaimConditions(claimedRatIds.length);\r\n                for (uint256 i = 0; i < claimedRatIds.length; i++) {\r\n                    _straightMintGG(msg.sender, claimedRatIds[i]);\r\n                }\r\n            }\r\n        }\r\n        _contemplateStartingIndex();\r\n    }","after":"function claim(\r\n        uint256[] calldata claimedRatIds,\r\n        uint256 from,\r\n        uint256 count\r\n    ) public {\r\n        _enforceSaleStarted();\r\n        _enforceClaimPeriod(true);\r\n        if (claimedRatIds.length == 0) {\r\n            if (from == 0 && count == 0) {\r\n                // I. Claim All\r\n                uint256[] memory unclaimed = _listUnclaimed();\r\n                _enforceClaimConditions(unclaimed.length);\r\n                for (uint256 i = 0; i < unclaimed.length; i++) {\r\n                    _straightMintGG(msg.sender, unclaimed[i]);\r\n                }\r\n            } else {\r\n                if (from == 0) {\r\n                    // claim count GGs\r\n                    _enforceClaimConditions(count);\r\n                    for (uint256 i = 0; i < count; i++) {\r\n                        _straightMintGG(msg.sender, _nextUnclaimedRatId());\r\n                    }\r\n                } else {\r\n                    // claim count GGs starting with from\r\n                    _enforceClaimConditions(count);\r\n                    uint256[] memory tokenIds = _enforceSequentialAvailability(\r\n                        from,\r\n                        count\r\n                    );\r\n                    for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                        _straightMintGG(msg.sender, tokenIds[i]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (claimedRatIds.length == 1) {\r\n                if (claimedRatIds[0] == 0) {\r\n                    // claim single GG based on the next unclaimed Rat\r\n                    _enforceClaimConditions(1);\r\n                    _straightMintGG(msg.sender, _nextUnclaimedRatId());\r\n                } else {\r\n                    // claim single GG based on a specific unclaimed Rat\r\n                    _enforceClaimConditions(1);\r\n                    _straightMintGG(msg.sender, claimedRatIds[0]);\r\n                }\r\n            } else {\r\n                // claim multiple GGs based on specific unclaimed Rats\r\n                _enforceClaimConditions(claimedRatIds.length);\r\n                for (uint256 i = 0; i < claimedRatIds.length; i++) {\r\n                    _straightMintGG(msg.sender, claimedRatIds[i]);\r\n                }\r\n            }\r\n        }\r\n        _contemplateStartingIndex();\r\n    }","contract":"GoodGuys","time":0},{"type":"external-function ","before":"function setTokenURI(string memory newUri)\r\n        public\r\n        onlyOwner\r\n        whenUriNotLocked\r\n    {\r\n        _baseTokenUri = newUri;\r\n        emit TokenURISet(_baseTokenUri);\r\n    }","after":"function setTokenURI(string calldata newUri)\r\n        public\r\n        onlyOwner\r\n        whenUriNotLocked\r\n    {\r\n        _baseTokenUri = newUri;\r\n        emit TokenURISet(_baseTokenUri);\r\n    }","contract":"GoodGuys","time":0}]}
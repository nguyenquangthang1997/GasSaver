{"time":98,"results":[{"type":"loop-duplication","before":"\nstart line 27 column 8, end line 31 column 8\nfor(uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            \n            require(collection.ownerOf(tokenId) == msg.sender, \"You must own the corresponding NFT to mint this.\");\n        }\nstart line 35 column 8, end line 38 column 8\nfor(uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            _safeMint(msg.sender, tokenId);\n        }","after":"// merge loop\n\nstart line 27 column 8, end line 31 column 8\nfor(uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            \n            require(collection.ownerOf(tokenId) == msg.sender, \"You must own the corresponding NFT to mint this.\");\n        }\nstart line 35 column 8, end line 38 column 8\nfor(uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            _safeMint(msg.sender, tokenId);\n        }","contract":"ZodiacCapsule","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _tokenBaseURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _tokenBaseURI = baseURI;\n    }","contract":"ZodiacCapsule","time":0}]}
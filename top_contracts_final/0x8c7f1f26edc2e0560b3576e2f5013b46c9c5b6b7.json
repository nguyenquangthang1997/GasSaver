{"time":181,"results":[{"type":"external-function ","before":"function stakeByIds(uint256[] memory tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                IERC721(apeMferAddress).ownerOf(tokenIds[i]) == msg.sender &&\n                    tokenIdToStaker[tokenIds[i]] == nullAddress,\n                \"Token must be stakable by you!\"\n            );\n\n            IERC721(apeMferAddress).transferFrom(\n                msg.sender,\n                address(this),\n                tokenIds[i]\n            );\n\n            stakerToTokenIds[msg.sender].push(tokenIds[i]);\n\n            tokenIdToTimeStamp[tokenIds[i]] = block.timestamp;\n            tokenIdToStaker[tokenIds[i]] = msg.sender;\n        }\n    }","after":"function stakeByIds(uint256[] calldata tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                IERC721(apeMferAddress).ownerOf(tokenIds[i]) == msg.sender &&\n                    tokenIdToStaker[tokenIds[i]] == nullAddress,\n                \"Token must be stakable by you!\"\n            );\n\n            IERC721(apeMferAddress).transferFrom(\n                msg.sender,\n                address(this),\n                tokenIds[i]\n            );\n\n            stakerToTokenIds[msg.sender].push(tokenIds[i]);\n\n            tokenIdToTimeStamp[tokenIds[i]] = block.timestamp;\n            tokenIdToStaker[tokenIds[i]] = msg.sender;\n        }\n    }","contract":"Jungle","time":0},{"type":"external-function ","before":"function unstakeByIds(uint256[] memory tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                tokenIdToStaker[tokenIds[i]] == msg.sender,\n                \"Message Sender was not original staker!\"\n            );\n\n            IERC721(apeMferAddress).transferFrom(\n                address(this),\n                msg.sender,\n                tokenIds[i]\n            );\n\n            totalRewards =\n                totalRewards +\n                ((block.timestamp - tokenIdToTimeStamp[tokenIds[i]]) *\n                    EMISSIONS_RATE);\n\n            removeTokenIdFromStaker(msg.sender, tokenIds[i]);\n\n            tokenIdToStaker[tokenIds[i]] = nullAddress;\n        }\n\n        _mint(msg.sender, totalRewards);\n    }","after":"function unstakeByIds(uint256[] calldata tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                tokenIdToStaker[tokenIds[i]] == msg.sender,\n                \"Message Sender was not original staker!\"\n            );\n\n            IERC721(apeMferAddress).transferFrom(\n                address(this),\n                msg.sender,\n                tokenIds[i]\n            );\n\n            totalRewards =\n                totalRewards +\n                ((block.timestamp - tokenIdToTimeStamp[tokenIds[i]]) *\n                    EMISSIONS_RATE);\n\n            removeTokenIdFromStaker(msg.sender, tokenIds[i]);\n\n            tokenIdToStaker[tokenIds[i]] = nullAddress;\n        }\n\n        _mint(msg.sender, totalRewards);\n    }","contract":"Jungle","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public EMISSIONS_RATE = 1028703700000000;","after":"uint256 public constant EMISSIONS_RATE = 1028703700000000;","contract":"Jungle","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public CLAIM_END_TIME = 1874980800;","after":"uint256 public constant CLAIM_END_TIME = 1874980800;","contract":"Jungle","time":0},{"type":"constant-restrict-modification  ","before":"address nullAddress = 0x0000000000000000000000000000000000000000;","after":"address constant nullAddress = 0x0000000000000000000000000000000000000000;","contract":"Jungle","time":0}]}
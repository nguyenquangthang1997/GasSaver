{"time":50,"results":[{"type":"external-function ","before":"function stake(uint256[] memory craniumIds, uint256[] memory stallionIds) public {\n        require(isStakingActive, \"stake: staking must be active\");\n        require(craniumIds.length == stallionIds.length, \"stake: Total number of Craniums staked must match the total number of Stallions staked.\");\n        require(craniumIds.length >= 1, \"stake: 1 or more {Cranium, Stallion} pairs must be staked.\");\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            require(twc.ownerOf(craniumIds[i]) == msg.sender, \"stake: msg.sender must be the owner of all Craniums staked.\");\n        }\n\n        for (uint256 i = 0; i < stallionIds.length; i++) {\n            require(tws.ownerOf(stallionIds[i]) == msg.sender, \"stake: msg.sender must be the owner of all Stallions staked.\");\n        }\n\n        // twc.setApprovalForAll(address(this), true);\n        // tws.setApprovalForAll(address(this), true);\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            twc.transferFrom(msg.sender, address(this), craniumIds[i]);\n        }\n\n        for (uint256 i = 0; i < stallionIds.length; i++) {\n            tws.transferFrom(msg.sender, address(this), stallionIds[i]);\n        }\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            haylos.safeMint(msg.sender);\n        }\n\n        pagesUnredeemed[msg.sender] += craniumIds.length;\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            addressToCraniumsStaked[msg.sender].push(craniumIds[i]);\n            addressToStallionsStaked[msg.sender].push(stallionIds[i]);\n        }\n    }","after":"function stake(uint256[] calldata craniumIds, uint256[] calldata stallionIds) public {\n        require(isStakingActive, \"stake: staking must be active\");\n        require(craniumIds.length == stallionIds.length, \"stake: Total number of Craniums staked must match the total number of Stallions staked.\");\n        require(craniumIds.length >= 1, \"stake: 1 or more {Cranium, Stallion} pairs must be staked.\");\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            require(twc.ownerOf(craniumIds[i]) == msg.sender, \"stake: msg.sender must be the owner of all Craniums staked.\");\n        }\n\n        for (uint256 i = 0; i < stallionIds.length; i++) {\n            require(tws.ownerOf(stallionIds[i]) == msg.sender, \"stake: msg.sender must be the owner of all Stallions staked.\");\n        }\n\n        // twc.setApprovalForAll(address(this), true);\n        // tws.setApprovalForAll(address(this), true);\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            twc.transferFrom(msg.sender, address(this), craniumIds[i]);\n        }\n\n        for (uint256 i = 0; i < stallionIds.length; i++) {\n            tws.transferFrom(msg.sender, address(this), stallionIds[i]);\n        }\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            haylos.safeMint(msg.sender);\n        }\n\n        pagesUnredeemed[msg.sender] += craniumIds.length;\n\n        for (uint256 i = 0; i < craniumIds.length; i++) {\n            addressToCraniumsStaked[msg.sender].push(craniumIds[i]);\n            addressToStallionsStaked[msg.sender].push(stallionIds[i]);\n        }\n    }","contract":"WickedStaking","time":0}]}
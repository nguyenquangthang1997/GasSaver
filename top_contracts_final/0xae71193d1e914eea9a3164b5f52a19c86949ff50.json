{"time":178,"results":[{"type":"state-data-arrangement ","before":"\nbool public _isWhiteListSaleActive = false;\nbool public _isSaleActive = false;\nbool public _isAuctionActive = false;\nuint256 constant public MAX_SUPPLY = 1024;\nuint256 public mintPrice = 0.3 ether;\nuint256 public whiteListPrice = 0.3 ether;\nuint256 public totalSupply;\nuint256 public tierSupply = 184;\nuint256 public maxBalance = 1;\nuint256 public maxMint = 1;\nuint256 public auctionStartTime;\nuint256 public auctionTimeStep;\nuint256 public auctionStartPrice;\nuint256 public auctionEndPrice;\nuint256 public auctionPriceStep;\nuint256 public auctionStepNumber;\nuint256 public saleStartTime = 1642226400;\nstring private _baseURIExtended;\naddress private _signerAddress = 0x6a389354957955Bef004222B3dBF4FAb40Ace650;\nmapping(string => bool) private _usedNonces;\nmapping(address => bool) private whiteList;","after":"uint256 constant public MAX_SUPPLY = 1024;\nuint256 public mintPrice = 0.3 ether;\nuint256 public whiteListPrice = 0.3 ether;\nuint256 public totalSupply;\nuint256 public tierSupply = 184;\nuint256 public maxBalance = 1;\nuint256 public maxMint = 1;\nuint256 public auctionStartTime;\nuint256 public auctionTimeStep;\nuint256 public auctionStartPrice;\nuint256 public auctionEndPrice;\nuint256 public auctionPriceStep;\nuint256 public auctionStepNumber;\nuint256 public saleStartTime = 1642226400;\nstring private _baseURIExtended;\nmapping(string => bool) private _usedNonces;\nmapping(address => bool) private whiteList;\naddress private _signerAddress = 0x6a389354957955Bef004222B3dBF4FAb40Ace650;\nbool public _isWhiteListSaleActive = false;\nbool public _isSaleActive = false;\nbool public _isAuctionActive = false;\n","contract":"OnionMeta","time":0},{"type":"external-function ","before":"function mintOnionMeta(bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity) external payable {\r\n    require(totalSupply + tokenQuantity <= tierSupply, \"Sale would exceed tier supply\");\r\n    require(totalSupply + tokenQuantity <= MAX_SUPPLY, \"Sale would exceed max supply\");\r\n    require(block.timestamp >= saleStartTime, \"Sale not start\");\r\n    require(_isSaleActive, \"Sale must be active to mint OnionMetas\");\r\n    require(balanceOf(msg.sender) + tokenQuantity <= maxBalance, \"Sale would exceed max balance\");\r\n    require(tokenQuantity <= maxMint, \"Sale would exceed max mint\");\r\n    require(tokenQuantity * mintPrice <= msg.value, \"Not enough ether sent\");    \r\n    require(!_usedNonces[nonce], \"HASH_USED\");\r\n    require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\r\n    require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\r\n   \r\n    _mintOnionMeta(tokenQuantity, msg.sender);\r\n    emit TokenMinted(totalSupply);  \r\n    _usedNonces[nonce] = true;\r\n  }","after":"function mintOnionMeta(bytes32 hash, bytes calldata signature, string calldata nonce, uint256 tokenQuantity) external payable {\r\n    require(totalSupply + tokenQuantity <= tierSupply, \"Sale would exceed tier supply\");\r\n    require(totalSupply + tokenQuantity <= MAX_SUPPLY, \"Sale would exceed max supply\");\r\n    require(block.timestamp >= saleStartTime, \"Sale not start\");\r\n    require(_isSaleActive, \"Sale must be active to mint OnionMetas\");\r\n    require(balanceOf(msg.sender) + tokenQuantity <= maxBalance, \"Sale would exceed max balance\");\r\n    require(tokenQuantity <= maxMint, \"Sale would exceed max mint\");\r\n    require(tokenQuantity * mintPrice <= msg.value, \"Not enough ether sent\");    \r\n    require(!_usedNonces[nonce], \"HASH_USED\");\r\n    require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\r\n    require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\r\n   \r\n    _mintOnionMeta(tokenQuantity, msg.sender);\r\n    emit TokenMinted(totalSupply);  \r\n    _usedNonces[nonce] = true;\r\n  }","contract":"OnionMeta","time":0},{"type":"external-function ","before":"function auctionMintOnionMeta(bytes32 hash, bytes memory signature, string memory nonce, uint tokenQuantity) public payable {\r\n    require(totalSupply + tokenQuantity <= tierSupply, \"Auction would exceed tier supply\");\r\n    require(totalSupply + tokenQuantity <= MAX_SUPPLY, \"Auction would exceed max supply\");\r\n    require(_isAuctionActive, \"Auction must be active to mint OnionMetas\");\r\n    require(block.timestamp >= auctionStartTime, \"Auction not start\");\r\n    require(balanceOf(msg.sender) + tokenQuantity <= maxBalance, \"Auction would exceed max balance\");\r\n    require(tokenQuantity <= maxMint, \"Auction would exceed max mint\");\r\n    require(tokenQuantity * getAuctionPrice() <= msg.value, \"Not enough ether sent\");\r\n    require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\r\n    require(!_usedNonces[nonce], \"HASH_USED\");\r\n    require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\r\n    _mintOnionMeta(tokenQuantity, msg.sender);\r\n    emit TokenMinted(totalSupply);\r\n    _usedNonces[nonce] = true;\r\n  }","after":"function auctionMintOnionMeta(bytes32 hash, bytes calldata signature, string calldata nonce, uint tokenQuantity) public payable {\r\n    require(totalSupply + tokenQuantity <= tierSupply, \"Auction would exceed tier supply\");\r\n    require(totalSupply + tokenQuantity <= MAX_SUPPLY, \"Auction would exceed max supply\");\r\n    require(_isAuctionActive, \"Auction must be active to mint OnionMetas\");\r\n    require(block.timestamp >= auctionStartTime, \"Auction not start\");\r\n    require(balanceOf(msg.sender) + tokenQuantity <= maxBalance, \"Auction would exceed max balance\");\r\n    require(tokenQuantity <= maxMint, \"Auction would exceed max mint\");\r\n    require(tokenQuantity * getAuctionPrice() <= msg.value, \"Not enough ether sent\");\r\n    require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\r\n    require(!_usedNonces[nonce], \"HASH_USED\");\r\n    require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\r\n    _mintOnionMeta(tokenQuantity, msg.sender);\r\n    emit TokenMinted(totalSupply);\r\n    _usedNonces[nonce] = true;\r\n  }","contract":"OnionMeta","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner {\r\n    _baseURIExtended = baseURI_;\r\n  }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner {\r\n    _baseURIExtended = baseURI_;\r\n  }","contract":"OnionMeta","time":0},{"type":"constant-restrict-modification  ","before":"address private _signerAddress = 0x6a389354957955Bef004222B3dBF4FAb40Ace650;","after":"address private constant _signerAddress = 0x6a389354957955Bef004222B3dBF4FAb40Ace650;","contract":"OnionMeta","time":0}]}
{"time":171,"results":[{"type":"external-function ","before":"function setColorProvier(IColorProvider[] memory colorProviders) external onlyOwner {\n        _setColorProviders(colorProviders);\n    }","after":"function setColorProvier(IColorProvider[] calldata colorProviders) external onlyOwner {\n        _setColorProviders(colorProviders);\n    }","contract":"Synesthesia","time":0},{"type":"external-function ","before":"function revealColors(string memory salt) external onlyOwner {\n        require(keccak256(bytes(salt)) == _saltHash, \"Synesthesia: invalid salt\");\n        require(_config.randomSeed == 0, \"Synesthesia: already revealed\");\n\n        uint256 lastBlock = block.number - 1;\n        _config.randomSeed = uint128(uint256(keccak256(abi.encodePacked(\n            salt,\n            _config.minterSeed,\n            uint256(blockhash(lastBlock)),\n            uint256(block.timestamp)))));\n    }","after":"function revealColors(string calldata salt) external onlyOwner {\n        require(keccak256(bytes(salt)) == _saltHash, \"Synesthesia: invalid salt\");\n        require(_config.randomSeed == 0, \"Synesthesia: already revealed\");\n\n        uint256 lastBlock = block.number - 1;\n        _config.randomSeed = uint128(uint256(keccak256(abi.encodePacked(\n            salt,\n            _config.minterSeed,\n            uint256(blockhash(lastBlock)),\n            uint256(block.timestamp)))));\n    }","contract":"Synesthesia","time":0},{"type":"loop-duplication","before":"\nstart line 1087 column 8, end line 1087 column 58\nfor (uint16 i = 0; i < idMax; i++) newIdSeq[i] = i;\nstart line 1089 column 8, end line 1097 column 8\nfor (uint16 i = 0; i < idMax; i++) {\n            // LCG\n            unchecked { seed = (A * seed + C) % M; }\n\n            uint16 iToSwap = uint16(seed % idMax);\n            uint16 temp = newIdSeq[i];\n            newIdSeq[i] = newIdSeq[iToSwap];\n            newIdSeq[iToSwap] = temp;\n        }","after":"// merge loop\n\nstart line 1087 column 8, end line 1087 column 58\nfor (uint16 i = 0; i < idMax; i++) newIdSeq[i] = i;\nstart line 1089 column 8, end line 1097 column 8\nfor (uint16 i = 0; i < idMax; i++) {\n            // LCG\n            unchecked { seed = (A * seed + C) % M; }\n\n            uint16 iToSwap = uint16(seed % idMax);\n            uint16 temp = newIdSeq[i];\n            newIdSeq[i] = newIdSeq[iToSwap];\n            newIdSeq[iToSwap] = temp;\n        }","contract":"Random","time":0}]}
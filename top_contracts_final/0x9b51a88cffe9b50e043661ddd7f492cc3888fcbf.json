{"time":249,"results":[{"type":"external-function ","before":"function claimForTokenIds(uint256[] memory tokenIds) external {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            _claim(tokenIds[i], _msgSender());\n        }\n    }","after":"function claimForTokenIds(uint256[] calldata tokenIds) external {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            _claim(tokenIds[i], _msgSender());\n        }\n    }","contract":"Lootmart","time":0},{"type":"external-function ","before":"function claimForTokenIdsWithAdventurer(uint256[] memory tokenIds) external {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            _claim(tokenIds[i], _msgSender());\n        }\n\n        adventurer.mintToAccount(_msgSender());\n    }","after":"function claimForTokenIdsWithAdventurer(uint256[] calldata tokenIds) external {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            _claim(tokenIds[i], _msgSender());\n        }\n\n        adventurer.mintToAccount(_msgSender());\n    }","contract":"Lootmart","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Lootmart","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Lootmart","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newBaseURI) external {\n        baseURI = _newBaseURI;\n    }","after":"function setBaseURI(string calldata _newBaseURI) external {\n        baseURI = _newBaseURI;\n    }","contract":"Lootmart","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public tokenIdStart = 1;","after":"uint256 public constant tokenIdStart = 1;","contract":"Lootmart","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public tokenIdEnd = 8000;","after":"uint256 public constant tokenIdEnd = 8000;","contract":"Lootmart","time":1}]}
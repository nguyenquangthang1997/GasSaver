{"time":216,"results":[{"type":"external-function ","before":"function addAddressToWhitelist(address[] memory addresses_)\n        public\n        onlyOwner\n    {\n        uint256 _amountOfAddresses = addresses_.length;\n        for (uint256 i = 0; i < _amountOfAddresses; i++) {\n            addressToWhitelistQuota[addresses_[i]] = 1; // record the whitelisted address and quota\n        }\n        addressesWhitelisted += _amountOfAddresses; // increase tracker by amount of whitelisted addreses\n    }","after":"function addAddressToWhitelist(address[] calldata addresses_)\n        public\n        onlyOwner\n    {\n        uint256 _amountOfAddresses = addresses_.length;\n        for (uint256 i = 0; i < _amountOfAddresses; i++) {\n            addressToWhitelistQuota[addresses_[i]] = 1; // record the whitelisted address and quota\n        }\n        addressesWhitelisted += _amountOfAddresses; // increase tracker by amount of whitelisted addreses\n    }","contract":"UnbankedBankersNFT","time":0},{"type":"external-function ","before":"function mintWhitelistMerkleTree(bytes32[] memory proof_)\n        public\n        payable\n        onlySender\n        whiteListMint\n    {\n        require(isMerkleWhitelisted(proof_), \"You are not whitelisted!\");\n        require(\n            addressToWhitelistMinted[msg.sender] == 0,\n            \"You have no more whitelist mints left!\"\n        );\n        require(msg.value == whiteListPrice, \"Invalid value sent!\");\n        require(\n            tokensReservedForWhitelist > tokensMintedForWhitelist,\n            \"No more whitelist tokens!\"\n        );\n        require(maxTokens > totalSupply(), \"No more tokens remaining!\");\n\n        addressToWhitelistMinted[msg.sender]++; // increments the tracker so that they cannot mint again\n        tokensMintedForWhitelist++; // increments tracker of how many tokens have been minted from whitelist\n\n        uint256 _mintId = totalSupply();\n        _mint(msg.sender, _mintId);\n\n        emit MintWhitelist(msg.sender, _mintId);\n    }","after":"function mintWhitelistMerkleTree(bytes32[] calldata proof_)\n        public\n        payable\n        onlySender\n        whiteListMint\n    {\n        require(isMerkleWhitelisted(proof_), \"You are not whitelisted!\");\n        require(\n            addressToWhitelistMinted[msg.sender] == 0,\n            \"You have no more whitelist mints left!\"\n        );\n        require(msg.value == whiteListPrice, \"Invalid value sent!\");\n        require(\n            tokensReservedForWhitelist > tokensMintedForWhitelist,\n            \"No more whitelist tokens!\"\n        );\n        require(maxTokens > totalSupply(), \"No more tokens remaining!\");\n\n        addressToWhitelistMinted[msg.sender]++; // increments the tracker so that they cannot mint again\n        tokensMintedForWhitelist++; // increments tracker of how many tokens have been minted from whitelist\n\n        uint256 _mintId = totalSupply();\n        _mint(msg.sender, _mintId);\n\n        emit MintWhitelist(msg.sender, _mintId);\n    }","contract":"UnbankedBankersNFT","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory uri_) external onlyOwner {\n        baseTokenURI = uri_;\n    }","after":"function setBaseTokenURI(string calldata uri_) external onlyOwner {\n        baseTokenURI = uri_;\n    }","contract":"UnbankedBankersNFT","time":0},{"type":"external-function ","before":"function setBaseTokenURI_EXT(string memory ext_) external onlyOwner {\n        baseTokenURI_EXT = ext_;\n    }","after":"function setBaseTokenURI_EXT(string calldata ext_) external onlyOwner {\n        baseTokenURI_EXT = ext_;\n    }","contract":"UnbankedBankersNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 MINT_PER_MINT_PASS = 1;","after":"uint256 constant MINT_PER_MINT_PASS = 1;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public maxTokens = 10000;","after":"uint256 public constant maxTokens = 10000;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public tokensReservedForWhitelist = 336;","after":"uint256 public constant tokensReservedForWhitelist = 336;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public tokensReservedForDutchAuction = 9565;","after":"uint256 public constant tokensReservedForDutchAuction = 9565;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public tokensReservedForReserved = 99;","after":"uint256 public constant tokensReservedForReserved = 99;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_1 = 0xAB2c989e7eD65f558a2f5DF46968B82dC7Fa8F53;","after":"address internal constant Shareholder_1 = 0xAB2c989e7eD65f558a2f5DF46968B82dC7Fa8F53;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_2 = 0x8173FAe402f05d62B8B5ccAAD09CA4EDFcBA3fb4;","after":"address internal constant Shareholder_2 = 0x8173FAe402f05d62B8B5ccAAD09CA4EDFcBA3fb4;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_3 = 0x333e7e956FeA76dA56c6a2EA7DE97d0B043c54bb;","after":"address internal constant Shareholder_3 = 0x333e7e956FeA76dA56c6a2EA7DE97d0B043c54bb;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 internal Shareholder_1_Share = 90;","after":"uint256 internal constant Shareholder_1_Share = 90;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 internal Shareholder_2_Share = 1;","after":"uint256 internal constant Shareholder_2_Share = 1;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 internal Shareholder_3_Share = 9;","after":"uint256 internal constant Shareholder_3_Share = 9;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public whiteListPrice = 0 ether;","after":"uint256 public constant whiteListPrice = 0 ether;","contract":"UnbankedBankersNFT","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public dutchEndingPrice = 0.01 ether;","after":"uint256 public constant dutchEndingPrice = 0.01 ether;","contract":"UnbankedBankersNFT","time":1}]}
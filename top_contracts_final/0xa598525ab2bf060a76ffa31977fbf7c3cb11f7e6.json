{"time":63,"results":[{"type":"external-function ","before":"function batchCreate(address[] memory accounts, uint[] memory amounts) public onlyOwner {\n        uint totalAmount;\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount += amounts[i];\n        }\n\n        if(poolInfo.amount > 0){\n            collectPoolYield();\n        }\n\n        rbxs.transferFrom(msg.sender, address(this), totalAmount);\n        rbxs.approve(address(rocketDrop),totalAmount);\n        rocketDrop.deposit(poolInfo.poolID, totalAmount);\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            require(userInfo[accounts[i]].amount == 0, \"Allotment already exists\");\n            userInfo[accounts[i]].amount = amounts[i];\n            userInfo[accounts[i]].distroDebt = amounts[i] * poolInfo.accruedValuePerShare / 1e18;\n            poolInfo.accounts += 1;\n            poolInfo.amount += userInfo[accounts[i]].amount;\n        }   \n    }","after":"function batchCreate(address[] calldata accounts, uint[] calldata amounts) public onlyOwner {\n        uint totalAmount;\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount += amounts[i];\n        }\n\n        if(poolInfo.amount > 0){\n            collectPoolYield();\n        }\n\n        rbxs.transferFrom(msg.sender, address(this), totalAmount);\n        rbxs.approve(address(rocketDrop),totalAmount);\n        rocketDrop.deposit(poolInfo.poolID, totalAmount);\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            require(userInfo[accounts[i]].amount == 0, \"Allotment already exists\");\n            userInfo[accounts[i]].amount = amounts[i];\n            userInfo[accounts[i]].distroDebt = amounts[i] * poolInfo.accruedValuePerShare / 1e18;\n            poolInfo.accounts += 1;\n            poolInfo.amount += userInfo[accounts[i]].amount;\n        }   \n    }","contract":"RBXStakeManager","time":0},{"type":"external-function ","before":"function batchDiscard(address[] memory accounts, uint[] memory amounts) public onlyOwner {\n        uint totalAmount;\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount += userInfo[accounts[i]].amount;\n        }\n\n        uint bal0 = rbxs.balanceOf(address(this));\n\n        rocketDrop.withdraw(poolInfo.poolID, totalAmount);\n        rbxs.transfer(msg.sender, totalAmount);\n\n        uint newYield = rbxs.balanceOf(address(this)) - bal0;\n\n        poolInfo.collected += newYield;\n        poolInfo.accruedValuePerShare += newYield * 1e18 / poolInfo.amount;\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            poolInfo.amount -= userInfo[accounts[i]].amount;\n            poolInfo.accounts -= 1;\n            userInfo[accounts[i]].amount = 0;\n            userInfo[accounts[i]].distroDebt = 0;\n        }   \n    }","after":"function batchDiscard(address[] calldata accounts, uint[] calldata amounts) public onlyOwner {\n        uint totalAmount;\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount += userInfo[accounts[i]].amount;\n        }\n\n        uint bal0 = rbxs.balanceOf(address(this));\n\n        rocketDrop.withdraw(poolInfo.poolID, totalAmount);\n        rbxs.transfer(msg.sender, totalAmount);\n\n        uint newYield = rbxs.balanceOf(address(this)) - bal0;\n\n        poolInfo.collected += newYield;\n        poolInfo.accruedValuePerShare += newYield * 1e18 / poolInfo.amount;\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            poolInfo.amount -= userInfo[accounts[i]].amount;\n            poolInfo.accounts -= 1;\n            userInfo[accounts[i]].amount = 0;\n            userInfo[accounts[i]].distroDebt = 0;\n        }   \n    }","contract":"RBXStakeManager","time":0}]}
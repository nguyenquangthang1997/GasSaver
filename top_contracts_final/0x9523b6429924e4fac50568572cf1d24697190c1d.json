{"time":156,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant MAX_SUPPLY = 10000;\nbool public claimActive = true;\nuint256 public constant PRE_PRESALE_START_TIME = 1638297020;\nuint256 public constant PRESALE_START_TIME = 1638302400;\nuint256 public constant PRESALE_MINT_PRICE = 100000000000000000;\nuint256 public constant PRESALE_SUPPLY = 3333;\nbool public firstPublicSaleStarted = false;\nuint256 public constant PUBLIC_SALE_1_MINT_PRICE = 150000000000000000;\nuint256 public constant PUBLIC_SALE_1_SUPPLY = 6666;\nbool public secondPublicSaleStarted = false;\nuint256 public PUBLIC_SALE_2_MINT_PRICE = 200000000000000000;\nbool public saleStarted = true;\nstring private _baseURIextended;\nmapping(address => PreviousHolders) prevHolders;\nmapping(address => WhitelistedUser) whitelistedUsers;","after":"uint256 public constant MAX_SUPPLY = 10000;\nuint256 public constant PRE_PRESALE_START_TIME = 1638297020;\nuint256 public constant PRESALE_START_TIME = 1638302400;\nuint256 public constant PRESALE_MINT_PRICE = 100000000000000000;\nuint256 public constant PRESALE_SUPPLY = 3333;\nuint256 public constant PUBLIC_SALE_1_MINT_PRICE = 150000000000000000;\nuint256 public constant PUBLIC_SALE_1_SUPPLY = 6666;\nuint256 public PUBLIC_SALE_2_MINT_PRICE = 200000000000000000;\nstring private _baseURIextended;\nmapping(address => PreviousHolders) prevHolders;\nmapping(address => WhitelistedUser) whitelistedUsers;\nbool public claimActive = true;\nbool public firstPublicSaleStarted = false;\nbool public secondPublicSaleStarted = false;\nbool public saleStarted = true;\n","contract":"Magnum","time":0},{"type":"external-function ","before":"function batchAddPrevHolders(address[] memory _addresses, uint256 amtPrePresaleMints, uint256 amtClaimable) public onlyOwner {\n       uint size = _addresses.length;\n       for (uint256 i = 0; i < size; i++){\n          prevHolders[_addresses[i]].amtPrePresaleMints = amtPrePresaleMints;\n          prevHolders[_addresses[i]].amtClaimable = amtClaimable;\n       }\n    }","after":"function batchAddPrevHolders(address[] calldata _addresses, uint256 amtPrePresaleMints, uint256 amtClaimable) public onlyOwner {\n       uint size = _addresses.length;\n       for (uint256 i = 0; i < size; i++){\n          prevHolders[_addresses[i]].amtPrePresaleMints = amtPrePresaleMints;\n          prevHolders[_addresses[i]].amtClaimable = amtClaimable;\n       }\n    }","contract":"Magnum","time":0},{"type":"external-function ","before":"function batchAddToWhitelist(address[] memory _addresses) public onlyOwner {\n        uint size = _addresses.length;\n        for (uint256 i = 0; i < size; i++){\n            whitelistedUsers[_addresses[i]].amtMinted = 0;\n            whitelistedUsers[_addresses[i]].exists = true;\n        }\n    }","after":"function batchAddToWhitelist(address[] calldata _addresses) public onlyOwner {\n        uint size = _addresses.length;\n        for (uint256 i = 0; i < size; i++){\n            whitelistedUsers[_addresses[i]].amtMinted = 0;\n            whitelistedUsers[_addresses[i]].exists = true;\n        }\n    }","contract":"Magnum","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner {\n        _baseURIextended = baseURI_;\n    }","contract":"Magnum","time":0}]}
{"time":174,"results":[{"type":"external-function ","before":"��████████████████████████████████████\r\n█─▄▄▄─█─▄▄─█▄─██─▄█▄─▀█▄─▄█─▄─▄─█▄─▄▄▀█▄─█─▄███─▄▄▄─█▄─▄███▄─██─▄█▄─▄─▀█\r\n█─███▀█─██─██─██─███─█▄▀─████─████─▄─▄██▄─▄████─███�","after":"��████████████��███████████████████████\r\n█─▄▄▄─█─▄▄─█▄─██─▄█▄─▀█▄─▄█─▄─▄─█▄─▄▄▀█▄─█─▄███─▄▄▄─█▄─▄███▄─██─▄█▄─▄─▀█\r\n█─███▀█─██─██─██─███─█▄▀─████─████─▄─▄██▄─▄████─███�","contract":"Ticket","time":0},{"type":"external-function ","before":"n/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n\r\ninterface Iminter {\r\n    function mi","after":"n/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n\r\ninterface Iminter {\r\n    function mi","contract":"Ticket","time":0},{"type":"external-function ","before":"ecipient, uint256 quantity) external;   \r\n}\r\n\r\ncontract Ticket is ERC1155, Ownable, Reentr","after":"ecipient, uint256 quantity) external;   \r\n}\r\n\r\ncontract Ticket is ERC1155, Ownable, Reentr","contract":"Ticket","time":0},{"type":"external-function ","before":"s, uint256 indexed _id, uint256 _tickets);\r\n     event RedeemPhysical(address indexed _address, uint256 indexed _id, uint256 _tickets);\r\n\r\n     Iminter public CurrentNFTContract;\r\n     IERC20 public FractionsContract;\r\n     \r\n     mapping(uint256 => string) uriTokenHash;\r\n     \r\n     mapping(uint256 => uint256) public TotalRedeemed;\r\n     \r\n     mapping(uint256 => bool) public FractionRedeemAllowed;\r\n     mapping(uint256 => uint256) public FractionsPerTicket;\r\n     \r\n     mapping(uint256 => bool) public AlternateRedeemAllowed;\r\n     mapping(uint256 => uint256) public TicketsPerAlternate;\r\n     \r\n     mapping(uint256 => bool) public ERC721RedeemAllowe","after":"s, uint256 indexed _id, uint256 _tickets);\r\n     event RedeemPhysical(address indexed _address, uint256 indexed _id, uint256 _tickets);\r\n\r\n     Iminter public CurrentNFTContract;\r\n     IERC20 public FractionsContract;\r\n     \r\n     mapping(uint256 => string) uriTokenHash;\r\n     \r\n     mapping(uint256 => uint256) public TotalRedeemed;\r\n     \r\n     mapping(uint256 => bool) public FractionRedeemAllowed;\r\n     mapping(uint256 => uint256) public FractionsPerTicket;\r\n     \r\n     mapping(uint256 => bool) public AlternateRedeemAllowed;\r\n     mapping(uint256 => uint256) public TicketsPerAlternate;\r\n     \r\n     mapping(uint256 => bool) public ERC721RedeemAllowe","contract":"Ticket","time":0},{"type":"external-function ","before":"ionsContract(address fractions) public onlyOwner{\r\n        FractionsContract = IERC20(fractions);\r\n    }\r\n    \r\n    function setNFTContract(address nftAddress) public onlyOwner{\r\n        CurrentNFTContract = Iminter(nftAddress);\r\n    }\r\n    \r\n    function addNewTicket(string memory hash) publ","after":"ionsContract(address fractions) public onlyOwner{\r\n        FractionsContract = IERC20(fractions);\r\n    }\r\n    \r\n    function setNFTContract(address nftAddress) public onlyOwner{\r\n        CurrentNFTContract = Iminter(nftAddress);\r\n    }\r\n    \r\n    function addNewTicket(string memory hash) publ","contract":"Ticket","time":0},{"type":"external-function ","before":"ovals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n ","after":"ovals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n ","contract":"Ticket","time":0},{"type":"external-function ","before":"rtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mech","after":"rtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mech","contract":"Ticket","time":0}]}
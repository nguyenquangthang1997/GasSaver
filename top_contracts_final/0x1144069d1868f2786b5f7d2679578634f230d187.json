{"time":168,"results":[{"type":"state-data-arrangement ","before":"\n   string public baseURI = \"ipfs://QmSAo4kt2N9mdgwTF5MREgSWHoF3CxwwmbhZV5M3u83SVg\n   uint256 public cost = 0.1 eth\n   uint16 public maxSupply = 6\n   uint16 private privateMaxSupply = 6\n   uint public maxMintAmount =\n   bool public publicSale = fal\n   bool public privateSale = fal\n   address public signe\n   address public signe\n   address public signe\n   address public signe","after":"   string public baseURI = \"ipfs://QmSAo4kt2N9mdgwTF5MREgSWHoF3CxwwmbhZV5M3u83SVg\n   uint256 public cost = 0.1 eth\n   uint public maxMintAmount =\n   address public signe\n   address public signe\n   address public signe\n   address public signe\n   uint16 public maxSupply = 6\n   uint16 private privateMaxSupply = 6\n   bool public publicSale = fal\n   bool public privateSale = fal\n","contract":"ByeBanx","time":3},{"type":"external-function ","before":"   function privateSaleMint(uint _mintAmount, bytes memory signature) external payable {\n        require(privateSale, \"Private sale is not currently running\");\n        uint8 group = 0;\n        address recover = recoverSignerAddress(msg.sender, signature);\n        if (recover == signer1) {\n            group = 1;\n        }else if (recover == signer2) {\n            group = 2;\n        }else if (recover == signer3) {\n            group = 3;\n        }else if (recover == signer4) {\n            group = 4;\n        }\n\n        require(group > 0 && group <= 4, \"Address not whitelisted for sale\");\n        require(totalSupply() + _mintAmount <= privateMaxSupply, \"Purchase would exceed max supply of private sale\");\n        require(balanceOf(msg.sender) + _mintAmount <= group, \"Minting would exceed max per wallet for presale\");\n        mintX(_mintAmount);\n  ","after":"   function privateSaleMint(uint _mintAmount, bytes calldata signature) external payable {\n        require(privateSale, \"Private sale is not currently running\");\n        uint8 group = 0;\n        address recover = recoverSignerAddress(msg.sender, signature);\n        if (recover == signer1) {\n            group = 1;\n        }else if (recover == signer2) {\n            group = 2;\n        }else if (recover == signer3) {\n            group = 3;\n        }else if (recover == signer4) {\n            group = 4;\n        }\n\n        require(group > 0 && group <= 4, \"Address not whitelisted for sale\");\n        require(totalSupply() + _mintAmount <= privateMaxSupply, \"Purchase would exceed max supply of private sale\");\n        require(balanceOf(msg.sender) + _mintAmount <= group, \"Minting would exceed max per wallet for presale\");\n        mintX(_mintAmount);\n  ","contract":"ByeBanx","time":0},{"type":"external-function ","before":"   function setBaseURI(string memory _newBaseURI) public onlyOwner() {\n        baseURI = _newBaseURI;\n  ","after":"   function setBaseURI(string calldata _newBaseURI) public onlyOwner() {\n        baseURI = _newBaseURI;\n  ","contract":"ByeBanx","time":0},{"type":"constant-restrict-modification  ","before":"   uint16 public maxSupply = 6","after":"   uint16 public constant maxSupply = 6","contract":"ByeBanx","time":0},{"type":"constant-restrict-modification  ","before":"   uint16 private privateMaxSupply = 6","after":"   uint16 private constant privateMaxSupply = 6","contract":"ByeBanx","time":0}]}
{"time":156,"results":[{"type":"external-function ","before":"function addCollaborators(Collaborators[] memory _collaborators)\n        external\n        onlyOwner\n    {\n        require(collaborators.length == 0, \"Collaborators were already set\");\n\n        uint128 totalCut;\n        for (uint256 i; i < _collaborators.length; i++) {\n            collaborators.push(_collaborators[i]);\n            totalCut += uint128(_collaborators[i].cut);\n        }\n\n        require(totalCut == basisPoints, \"Total cut does not add to 100%\");\n    }","after":"function addCollaborators(Collaborators[] calldata _collaborators)\n        external\n        onlyOwner\n    {\n        require(collaborators.length == 0, \"Collaborators were already set\");\n\n        uint128 totalCut;\n        for (uint256 i; i < _collaborators.length; i++) {\n            collaborators.push(_collaborators[i]);\n            totalCut += uint128(_collaborators[i].cut);\n        }\n\n        require(totalCut == basisPoints, \"Total cut does not add to 100%\");\n    }","contract":"TheWonderQuest","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory _uri) external onlyCollaborator {\n        baseURI = _uri;\n    }","after":"function setBaseTokenURI(string calldata _uri) external onlyCollaborator {\n        baseURI = _uri;\n    }","contract":"TheWonderQuest","time":0},{"type":"external-function ","before":"function allocateTokens(uint256[] memory tokenIds)\n        external\n        onlyCollaborator\n    {\n        require(availableEggs.length == 0, \"Available eggs are already set\");\n\n        _batchMint(msg.sender, tokenIds);\n\n        totalMintedTokens += tokenIds.length;\n    }","after":"function allocateTokens(uint256[] calldata tokenIds)\n        external\n        onlyCollaborator\n    {\n        require(availableEggs.length == 0, \"Available eggs are already set\");\n\n        _batchMint(msg.sender, tokenIds);\n\n        totalMintedTokens += tokenIds.length;\n    }","contract":"TheWonderQuest","time":0},{"type":"external-function ","before":"function devHatchEggs(uint256[] memory tokenIds) external onlyCollaborator {\n        for (uint256 i; i < tokenIds.length; i++) {\n            require(\n                ownerOf(tokenIds[i]) == msg.sender,\n                \"You can only hatch your own eggs\"\n            );\n\n            require(\n                hatchedEggs[tokenIds[i]] == false,\n                \"Egg is already hatched\"\n            );\n\n            hatchedEggs[tokenIds[i]] = true;\n\n            emit Hatch(msg.sender, tokenIds[i]);\n        }\n    }","after":"function devHatchEggs(uint256[] calldata tokenIds) external onlyCollaborator {\n        for (uint256 i; i < tokenIds.length; i++) {\n            require(\n                ownerOf(tokenIds[i]) == msg.sender,\n                \"You can only hatch your own eggs\"\n            );\n\n            require(\n                hatchedEggs[tokenIds[i]] == false,\n                \"Egg is already hatched\"\n            );\n\n            hatchedEggs[tokenIds[i]] = true;\n\n            emit Hatch(msg.sender, tokenIds[i]);\n        }\n    }","contract":"TheWonderQuest","time":0},{"type":"external-function ","before":"function devClaimEggs(address[] memory addresses)\n        external\n        onlyCollaborator\n    {\n        require(\n            availableEggs.length >= addresses.length,\n            \"No eggs left to be claimed\"\n        );\n        totalMintedTokens += addresses.length;\n\n        for (uint256 i; i < addresses.length; i++) {\n            _mint(addresses[i], getEggToBeClaimed());\n        }\n    }","after":"function devClaimEggs(address[] calldata addresses)\n        external\n        onlyCollaborator\n    {\n        require(\n            availableEggs.length >= addresses.length,\n            \"No eggs left to be claimed\"\n        );\n        totalMintedTokens += addresses.length;\n\n        for (uint256 i; i < addresses.length; i++) {\n            _mint(addresses[i], getEggToBeClaimed());\n        }\n    }","contract":"TheWonderQuest","time":0},{"type":"external-function ","before":"function hatchEggs(uint256[] memory tokenIds)\n        external\n        callerIsUser\n        hatchStarted\n    {\n        for (uint256 i; i < tokenIds.length; i++) {\n            require(\n                ownerOf(tokenIds[i]) == msg.sender,\n                \"You can only hatch your own eggs\"\n            );\n\n            require(\n                hatchedEggs[tokenIds[i]] == false,\n                \"Egg is already hatched\"\n            );\n\n            hatchedEggs[tokenIds[i]] = true;\n\n            emit Hatch(msg.sender, tokenIds[i]);\n        }\n    }","after":"function hatchEggs(uint256[] calldata tokenIds)\n        external\n        callerIsUser\n        hatchStarted\n    {\n        for (uint256 i; i < tokenIds.length; i++) {\n            require(\n                ownerOf(tokenIds[i]) == msg.sender,\n                \"You can only hatch your own eggs\"\n            );\n\n            require(\n                hatchedEggs[tokenIds[i]] == false,\n                \"Egg is already hatched\"\n            );\n\n            hatchedEggs[tokenIds[i]] = true;\n\n            emit Hatch(msg.sender, tokenIds[i]);\n        }\n    }","contract":"TheWonderQuest","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private totalTokens = 10000;","after":"uint256 private constant totalTokens = 10000;","contract":"TheWonderQuest","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private maxClaimsPerWallet = 10;","after":"uint256 private constant maxClaimsPerWallet = 10;","contract":"TheWonderQuest","time":0},{"type":"constant-restrict-modification  ","before":"uint128 private basisPoints = 10000;","after":"uint128 private constant basisPoints = 10000;","contract":"TheWonderQuest","time":0}]}
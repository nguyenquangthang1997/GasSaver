{"time":143,"results":[{"type":"external-function ","before":"function send(address recipient, uint256 amount, bytes memory data) public virtual override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }","after":"function send(address recipient, uint256 amount, bytes calldata data) public virtual override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }","contract":"XRUNE","time":0},{"type":"external-function ","before":"function burn(uint256 amount, bytes memory data) public virtual override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }","after":"function burn(uint256 amount, bytes calldata data) public virtual override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }","contract":"XRUNE","time":0},{"type":"external-function ","before":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        public\n        virtual\n        override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }","after":"function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n        public\n        virtual\n        override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }","contract":"XRUNE","time":0},{"type":"external-function ","before":"function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }","after":"function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) public virtual override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }","contract":"XRUNE","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","after":"bytes32 private immutable constant _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");","contract":"XRUNE","time":1}]}
{"time":716,"results":[{"type":"external-function ","before":"   function setup(\n        uint256 numPasses,\n        uint256[] memory maxItems,\n        uint256[] memory maxPerWallet,\n        uint256[] memory maxPerTransaction,\n        uint256[] memory prices,\n        uint256[] memory open,\n        uint256[] memory close\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(numPasses > 0, \"INVALID_NUMBER_TOKENS\");\n        require(maxItems.length == numPasses, \"INVALID_MAX_ITEMS_SIZE\");\n\n        require(maxPerWallet.length == numPasses, \"INVALID_MAX_WALLET_SIZE\");\n        require(\n            maxPerTransaction.length == numPasses,\n            \"INVALID_MAX_TRANSACTION_SIZE\"\n        );\n\n        require(prices.length == numPasses, \"INVALID_PRICES_SIZE\");\n\n        require(open.length == numPasses, \"INVALID_OPEN_SIZE\");\n        require(close.length == numPasses, \"INVALID_CLOSE_SIZE\");\n\n        for (uint256 i = 0; i < numPasses; i++) {\n            require(maxItems[i] > 0, \"INVALID_MAX_ITEM\");\n            require(open[i] <= close[i], \"INVALID_DATES\");\n\n            Pass storage pass = _passes[_passCounter.current()];\n            pass.maxItems = maxItems[i];\n\n            pass.maxPerTransaction = maxPerTransaction[i];\n            pass.maxPerWallet = maxPerWallet[i];\n            pass.price = prices[i];\n            pass.open = open[i];\n            pass.close = close[i];\n\n            _passCounter.increment();\n        }\n  ","after":"   function setup(\n        uint256 numPasses,\n        uint256[] calldata maxItems,\n        uint256[] calldata maxPerWallet,\n        uint256[] calldata maxPerTransaction,\n        uint256[] calldata prices,\n        uint256[] calldata open,\n        uint256[] calldata close\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(numPasses > 0, \"INVALID_NUMBER_TOKENS\");\n        require(maxItems.length == numPasses, \"INVALID_MAX_ITEMS_SIZE\");\n\n        require(maxPerWallet.length == numPasses, \"INVALID_MAX_WALLET_SIZE\");\n        require(\n            maxPerTransaction.length == numPasses,\n            \"INVALID_MAX_TRANSACTION_SIZE\"\n        );\n\n        require(prices.length == numPasses, \"INVALID_PRICES_SIZE\");\n\n        require(open.length == numPasses, \"INVALID_OPEN_SIZE\");\n        require(close.length == numPasses, \"INVALID_CLOSE_SIZE\");\n\n        for (uint256 i = 0; i < numPasses; i++) {\n            require(maxItems[i] > 0, \"INVALID_MAX_ITEM\");\n            require(open[i] <= close[i], \"INVALID_DATES\");\n\n            Pass storage pass = _passes[_passCounter.current()];\n            pass.maxItems = maxItems[i];\n\n            pass.maxPerTransaction = maxPerTransaction[i];\n            pass.maxPerWallet = maxPerWallet[i];\n            pass.price = prices[i];\n            pass.open = open[i];\n            pass.close = close[i];\n\n            _passCounter.increment();\n        }\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setContractURI(string memory newContractURI)\n    external\n    onlyRole(OPERATOR_ROLE)\n    {\n        _contractURI = newContractURI;\n  ","after":"   function setContractURI(string calldata newContractURI)\n    external\n    onlyRole(OPERATOR_ROLE)\n    {\n        _contractURI = newContractURI;\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setDates(\n        uint256[] memory ids,\n        uint256[] memory open,\n        uint256[] memory close\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(open.length == ids.length, \"INVALID_OPEN_SIZE\");\n        require(close.length == ids.length, \"INVALID_CLOSE_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(open[i] <= close[i], \"INVALID_DATES\");\n            Pass storage pass = _passes[ids[i]];\n\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.open = open[i];\n            pass.close = close[i];\n        }\n\n        emit DatesChanged(ids, open, close);\n  ","after":"   function setDates(\n        uint256[] calldata ids,\n        uint256[] calldata open,\n        uint256[] calldata close\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(open.length == ids.length, \"INVALID_OPEN_SIZE\");\n        require(close.length == ids.length, \"INVALID_CLOSE_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(open[i] <= close[i], \"INVALID_DATES\");\n            Pass storage pass = _passes[ids[i]];\n\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.open = open[i];\n            pass.close = close[i];\n        }\n\n        emit DatesChanged(ids, open, close);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setMaxPerWallet(\n        uint256[] memory ids,\n        uint256[] memory maxPerWallet\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(maxPerWallet.length == ids.length, \"INVALID_MAX_WALLET_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.maxPerWallet = maxPerWallet[i];\n        }\n        emit MaxPerWalletChanged(ids, maxPerWallet);\n  ","after":"   function setMaxPerWallet(\n        uint256[] calldata ids,\n        uint256[] calldata maxPerWallet\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(maxPerWallet.length == ids.length, \"INVALID_MAX_WALLET_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.maxPerWallet = maxPerWallet[i];\n        }\n        emit MaxPerWalletChanged(ids, maxPerWallet);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setMaxPerTransaction(\n        uint256[] memory ids,\n        uint256[] memory maxPerTransaction\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(\n            maxPerTransaction.length == ids.length,\n            \"INVALID_MAX_TRANSACTION_SIZE\"\n        );\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.maxPerTransaction = maxPerTransaction[i];\n        }\n        emit MaxPerTransactionChanged(ids, maxPerTransaction);\n  ","after":"   function setMaxPerTransaction(\n        uint256[] calldata ids,\n        uint256[] calldata maxPerTransaction\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(\n            maxPerTransaction.length == ids.length,\n            \"INVALID_MAX_TRANSACTION_SIZE\"\n        );\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.maxPerTransaction = maxPerTransaction[i];\n        }\n        emit MaxPerTransactionChanged(ids, maxPerTransaction);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setRedeemContracts(\n        uint256[] memory ids,\n        address[] memory redeemContracts\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(\n            redeemContracts.length == ids.length,\n            \"INVALID_REDEEM_CONTRACTS_SIZE\"\n        );\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.redeemContract = redeemContracts[i];\n        }\n        emit RedeemContractAddressChanged(ids, redeemContracts);\n  ","after":"   function setRedeemContracts(\n        uint256[] calldata ids,\n        address[] calldata redeemContracts\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(\n            redeemContracts.length == ids.length,\n            \"INVALID_REDEEM_CONTRACTS_SIZE\"\n        );\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.redeemContract = redeemContracts[i];\n        }\n        emit RedeemContractAddressChanged(ids, redeemContracts);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setPrices(uint256[] memory ids, uint256[] memory prices)\n    external\n    onlyRole(OPERATOR_ROLE)\n    {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(prices.length == ids.length, \"INVALID_PRICES_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.price = prices[i];\n        }\n        emit PricesChanged(ids, prices);\n  ","after":"   function setPrices(uint256[] calldata ids, uint256[] calldata prices)\n    external\n    onlyRole(OPERATOR_ROLE)\n    {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(prices.length == ids.length, \"INVALID_PRICES_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.price = prices[i];\n        }\n        emit PricesChanged(ids, prices);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setMaxItems(uint256[] memory ids, uint256[] memory maxItems)\n    external\n    onlyRole(OPERATOR_ROLE)\n    {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(maxItems.length == ids.length, \"INVALID_MAX_ITEMS_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(maxItems[i] > 0, \"INVALID_MAX_ITEM\");\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.maxItems = maxItems[i];\n        }\n        emit MaxItemsChanged(ids, maxItems);\n  ","after":"   function setMaxItems(uint256[] calldata ids, uint256[] calldata maxItems)\n    external\n    onlyRole(OPERATOR_ROLE)\n    {\n        require(ids.length > 0, \"INVALID_TOKENS_SIZE\");\n        require(maxItems.length == ids.length, \"INVALID_MAX_ITEMS_SIZE\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(maxItems[i] > 0, \"INVALID_MAX_ITEM\");\n            Pass storage pass = _passes[ids[i]];\n            require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n            pass.maxItems = maxItems[i];\n        }\n        emit MaxItemsChanged(ids, maxItems);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function setURI(string memory newUri) external onlyRole(OPERATOR_ROLE) {\n        _setURI(newUri);\n        emit UriChanged(newUri);\n  ","after":"   function setURI(string calldata newUri) external onlyRole(OPERATOR_ROLE) {\n        _setURI(newUri);\n        emit UriChanged(newUri);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function mint(\n        address account,\n        uint256 tokenId,\n        uint256 amount,\n        bytes memory data\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(!paused(), \"CONTRACT_PAUSED\");\n        Pass storage pass = _passes[tokenId];\n        require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n        require(\n            (totalSupply(tokenId) + amount) <= pass.maxItems,\n            \"PURCHASE_EXCEED_MAX_ITEMS\"\n        );\n        _mint(account, tokenId, amount, data);\n  ","after":"   function mint(\n        address account,\n        uint256 tokenId,\n        uint256 amount,\n        bytes calldata data\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(!paused(), \"CONTRACT_PAUSED\");\n        Pass storage pass = _passes[tokenId];\n        require(pass.maxItems > 0, \"TOKEN_ID_NOT_EXIST\");\n        require(\n            (totalSupply(tokenId) + amount) <= pass.maxItems,\n            \"PURCHASE_EXCEED_MAX_ITEMS\"\n        );\n        _mint(account, tokenId, amount, data);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"   function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(!paused(), \"CONTRACT_PAUSED\");\n        _mintBatch(to, ids, amounts, data);\n  ","after":"   function mintBatch(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external onlyRole(OPERATOR_ROLE) {\n        require(!paused(), \"CONTRACT_PAUSED\");\n        _mintBatch(to, ids, amounts, data);\n  ","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"GenesisToken","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"GenesisToken","time":0}]}
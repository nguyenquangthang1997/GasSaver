{"time":143,"results":[{"type":"external-function ","before":"function preSaleMint(uint _mintAmount, uint _MaxMintAmount,bool _earlyInvest, bytes32[] memory proof) external payable {\n        require(presale, \"Pre-sale minting is not active\");\n        require(_earlyInvest || msg.value >= presaleCost * _mintAmount,\"You have unsufficient fund!\");\n        require( MerkleProof.verify(proof,merkleRoot, keccak256(abi.encodePacked(msg.sender,_MaxMintAmount,_earlyInvest))),\"You're not in whitelist!\");\n        \n        if (!whitelistUsed[msg.sender]){\n            whitelistUsed[msg.sender]=true;\n            whitelistRemaining[msg.sender]=_MaxMintAmount;\n        }\n        require(whitelistRemaining[msg.sender]-_mintAmount>=0,\"You're exceeding registered amount\");\n        whitelistRemaining[msg.sender]-=_mintAmount;\n        mint_function(_mintAmount);\n    }","after":"function preSaleMint(uint _mintAmount, uint _MaxMintAmount,bool _earlyInvest, bytes32[] calldata proof) external payable {\n        require(presale, \"Pre-sale minting is not active\");\n        require(_earlyInvest || msg.value >= presaleCost * _mintAmount,\"You have unsufficient fund!\");\n        require( MerkleProof.verify(proof,merkleRoot, keccak256(abi.encodePacked(msg.sender,_MaxMintAmount,_earlyInvest))),\"You're not in whitelist!\");\n        \n        if (!whitelistUsed[msg.sender]){\n            whitelistUsed[msg.sender]=true;\n            whitelistRemaining[msg.sender]=_MaxMintAmount;\n        }\n        require(whitelistRemaining[msg.sender]-_mintAmount>=0,\"You're exceeding registered amount\");\n        whitelistRemaining[msg.sender]-=_mintAmount;\n        mint_function(_mintAmount);\n    }","contract":"PeacefulToadz","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension) public onlyOwner() {\n        baseExtension = _newBaseExtension;\n    }","after":"function setBaseExtension(string calldata _newBaseExtension) public onlyOwner() {\n        baseExtension = _newBaseExtension;\n    }","contract":"PeacefulToadz","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxSupply = 8888;","after":"uint public constant maxSupply = 8888;","contract":"PeacefulToadz","time":0},{"type":"constant-restrict-modification  ","before":"uint private holderMaxMintAmount = 3;","after":"uint private constant holderMaxMintAmount = 3;","contract":"PeacefulToadz","time":0},{"type":"constant-restrict-modification  ","before":"uint private publicMaxMintAmount = 25;","after":"uint private constant publicMaxMintAmount = 25;","contract":"PeacefulToadz","time":0},{"type":"constant-restrict-modification  ","before":"uint private reservedOwnerMint=100;","after":"uint private constant reservedOwnerMint=100;","contract":"PeacefulToadz","time":0}]}
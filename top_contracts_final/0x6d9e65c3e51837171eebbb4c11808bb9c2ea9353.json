{"time":204,"results":[{"type":"struct-data-arrangement ","before":"\nuint64 start\nuint64 end\nint16 maxPerWallet\nuint8 maxPerTx\nuint256 price\nbool paused","after":"uint256 price\nuint64 start\nuint64 end\nint16 maxPerWallet\nuint8 maxPerTx\nbool paused\n","contract":"Soulware","time":1},{"type":"external-function ","before":"function pauseSale(string memory _name, bool _pause) public onlyOwner{\r\n        sales[_name].paused = _pause;\r\n    }","after":"function pauseSale(string calldata _name, bool _pause) public onlyOwner{\r\n        sales[_name].paused = _pause;\r\n    }","contract":"Soulware","time":0},{"type":"external-function ","before":"function preSalesMint(uint8 _count, bool _isCert, uint256 _signatureId, bytes memory _signature) public payable isOpen(\"PRESALES\", _count) {\r\n\r\n        address wallet = _msgSender();\r\n\r\n        if(!_isCert){\r\n            require(int16(balanceSale[\"PRESALES\"][wallet]) <= int16(MAX_TRUE), \"Max per wallet limit (PRESALES)\");\r\n        }\r\n        require(signatureIds[_signatureId] == false, \"Signature already used\");\r\n        require(checkSignature(wallet, _isCert, _count, _signatureId, _signature) == signAddress, \"Signature error : bad owner\");\r\n        signatureIds[_signatureId] = true;\r\n\r\n        _mintTokens(_count);\r\n\r\n    }","after":"function preSalesMint(uint8 _count, bool _isCert, uint256 _signatureId, bytes calldata _signature) public payable isOpen(\"PRESALES\", _count) {\r\n\r\n        address wallet = _msgSender();\r\n\r\n        if(!_isCert){\r\n            require(int16(balanceSale[\"PRESALES\"][wallet]) <= int16(MAX_TRUE), \"Max per wallet limit (PRESALES)\");\r\n        }\r\n        require(signatureIds[_signatureId] == false, \"Signature already used\");\r\n        require(checkSignature(wallet, _isCert, _count, _signatureId, _signature) == signAddress, \"Signature error : bad owner\");\r\n        signatureIds[_signatureId] = true;\r\n\r\n        _mintTokens(_count);\r\n\r\n    }","contract":"Soulware","time":0},{"type":"external-function ","before":"function freeSalesMint(uint16[] memory _originIds) public payable isOpen(\"FREE\", uint8(_originIds.length * 5)) {\r\n\r\n        for(uint8 i = 0; i < _originIds.length; i++){\r\n            require(originAddress.ownerOf(_originIds[i]) == _msgSender(), \"Not owner of this Origin\");\r\n            require(freeClaimOriginIds[_originIds[i]] == false, \"Origin already claim\");\r\n            freeClaimOriginIds[_originIds[i]] = true;\r\n\r\n            for(uint8 k = 0; k < 5; k++){\r\n                freeTracked += 1;\r\n                _mintToken(reservedTracked + freeTracked);\r\n            }\r\n        }\r\n    }","after":"function freeSalesMint(uint16[] calldata _originIds) public payable isOpen(\"FREE\", uint8(_originIds.length * 5)) {\r\n\r\n        for(uint8 i = 0; i < _originIds.length; i++){\r\n            require(originAddress.ownerOf(_originIds[i]) == _msgSender(), \"Not owner of this Origin\");\r\n            require(freeClaimOriginIds[_originIds[i]] == false, \"Origin already claim\");\r\n            freeClaimOriginIds[_originIds[i]] = true;\r\n\r\n            for(uint8 k = 0; k < 5; k++){\r\n                freeTracked += 1;\r\n                _mintToken(reservedTracked + freeTracked);\r\n            }\r\n        }\r\n    }","contract":"Soulware","time":0}]}
{"time":142,"results":[{"type":"state-data-arrangement ","before":"\nstring public name;\nstring public symbol;\nuint256 tokenId = 0;\nuint256 amountMinted = 0;\nuint256 public TotalAmount = 10000;\nuint256 private tokenPrice = 10000000000000000;\nuint256 minPrice = 10000000000000000;\naddress bearhoodContractAddress;\nmapping (address => mapping (uint256 => bool)) openedBoxes;\nbool salesStarted = false;\nbool openBoxStarted = false;\nuint256 increaseBuffer;\nuint256 decreaseBuffer;\nuint256 increaseRate = 20000000000000000;\nuint256 decreaseRate = 10000000000000000;","after":"string public name;\nstring public symbol;\nuint256 tokenId = 0;\nuint256 amountMinted = 0;\nuint256 public TotalAmount = 10000;\nuint256 private tokenPrice = 10000000000000000;\nuint256 minPrice = 10000000000000000;\nmapping (address => mapping (uint256 => bool)) openedBoxes;\nuint256 increaseBuffer;\nuint256 decreaseBuffer;\nuint256 increaseRate = 20000000000000000;\nuint256 decreaseRate = 10000000000000000;\naddress bearhoodContractAddress;\nbool salesStarted = false;\nbool openBoxStarted = false;\n","contract":"BlindBox","time":0},{"type":"external-function ","before":"  function airdrop(address[] memory receivers, uint256[] memory amounts) public onlyOwner {\n        for(uint256 i; i<receivers.length; i++){\n            require(amounts[i] + amountMinted <= TotalAmount, \"Limit reached\");\n            amountMinted = amountMinted + amounts[i];\n            _mint(receivers[i], tokenId, amounts[i], \"\");\n        }\n   ","after":"  function airdrop(address[] calldata receivers, uint256[] calldata amounts) public onlyOwner {\n        for(uint256 i; i<receivers.length; i++){\n            require(amounts[i] + amountMinted <= TotalAmount, \"Limit reached\");\n            amountMinted = amountMinted + amounts[i];\n            _mint(receivers[i], tokenId, amounts[i], \"\");\n        }\n   ","contract":"BlindBox","time":0},{"type":"external-function ","before":"  function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n   ","after":"  function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n   ","contract":"BlindBox","time":0},{"type":"external-function ","before":"  function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n   ","after":"  function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n   ","contract":"BlindBox","time":0},{"type":"external-function ","before":"  function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n   ","after":"  function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n   ","contract":"BlindBox","time":0},{"type":"constant-restrict-modification  ","before":"uint256 tokenId = 0;","after":"uint256 constant tokenId = 0;","contract":"BlindBox","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public TotalAmount = 10000;","after":"uint256 public constant TotalAmount = 10000;","contract":"BlindBox","time":0},{"type":"constant-restrict-modification  ","before":"uint256 minPrice = 10000000000000000;","after":"uint256 constant minPrice = 10000000000000000;","contract":"BlindBox","time":0},{"type":"constant-restrict-modification  ","before":"uint256 increaseRate = 20000000000000000;","after":"uint256 constant increaseRate = 20000000000000000;","contract":"BlindBox","time":0},{"type":"constant-restrict-modification  ","before":"uint256 decreaseRate = 10000000000000000;","after":"uint256 constant decreaseRate = 10000000000000000;","contract":"BlindBox","time":0}]}
{"time":135,"results":[{"type":"external-function ","before":"function validateAndBurn(uint256[] memory tokenIds, address owner) external onlyMega {\n      require(tokenIds.length == 5, \"Invalid array passed\");\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(ownerOf(tokenIds[i]) == owner, \"Not the owner\");\n        _burn(tokenIds[i]);\n      }\n    }","after":"function validateAndBurn(uint256[] calldata tokenIds, address owner) external onlyMega {\n      require(tokenIds.length == 5, \"Invalid array passed\");\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(ownerOf(tokenIds[i]) == owner, \"Not the owner\");\n        _burn(tokenIds[i]);\n      }\n    }","contract":"CreepzShapeshifters","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n      require(bytes(PROVENANCE_HASH).length == 0, \"Provenance hash has already been set\");\n      PROVENANCE_HASH = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n      require(bytes(PROVENANCE_HASH).length == 0, \"Provenance hash has already been set\");\n      PROVENANCE_HASH = provenanceHash;\n    }","contract":"CreepzShapeshifters","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) public onlyOwner {\n      require(!metadataFinalised, \"Metadata already finalised\");\n\n      string memory currentURI = _shapesBaseURI;\n      _shapesBaseURI = newBaseURI;\n      emit BaseUriUpdated(currentURI, newBaseURI);\n    }","after":"function setBaseURI(string calldata newBaseURI) public onlyOwner {\n      require(!metadataFinalised, \"Metadata already finalised\");\n\n      string memory currentURI = _shapesBaseURI;\n      _shapesBaseURI = newBaseURI;\n      emit BaseUriUpdated(currentURI, newBaseURI);\n    }","contract":"CreepzShapeshifters","time":0},{"type":"immutable-restrict-modification ","before":"address public royaltyAddress;","after":"address public immutable royaltyAddress;","contract":"CreepzShapeshifters","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private ROYALTY_SIZE = 750;","after":"uint256 private constant ROYALTY_SIZE = 750;","contract":"CreepzShapeshifters","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private ROYALTY_DENOMINATOR = 10000;","after":"uint256 private constant ROYALTY_DENOMINATOR = 10000;","contract":"CreepzShapeshifters","time":1},{"type":"immutable-restrict-modification ","before":"bytes32 internal keyHash;","after":"bytes32 internal immutable keyHash;","contract":"CreepzShapeshifters","time":1},{"type":"immutable-restrict-modification ","before":"uint256 internal fee;","after":"uint256 internal immutable fee;","contract":"CreepzShapeshifters","time":1}]}
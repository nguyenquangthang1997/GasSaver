{"time":170,"results":[{"type":"external-function ","before":"function setSaleTimes(uint[] memory _newTimes) external onlyOwner {\n        require(_newTimes.length == 3, \"You need to update all times at once\");\n        presaleNuggetStart = _newTimes[0];\n        presaleApeStart = _newTimes[1];\n        publicSale = _newTimes[2];\n    }","after":"function setSaleTimes(uint[] calldata _newTimes) external onlyOwner {\n        require(_newTimes.length == 3, \"You need to update all times at once\");\n        presaleNuggetStart = _newTimes[0];\n        presaleApeStart = _newTimes[1];\n        publicSale = _newTimes[2];\n    }","contract":"ETHWalkersMinting","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        ethWalkersProvenance = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        ethWalkersProvenance = provenanceHash;\n    }","contract":"ETHWalkersMinting","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }","after":"function setBaseURI(string calldata newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }","contract":"ETHWalkersMinting","time":0},{"type":"external-function ","before":"function mintPreSaleRedeemSixPackNuggets(uint256[] memory ids) external nonReentrant {\n        require(saleState >= 1, \"Pre-sale must be active to mint\");\n        require(block.timestamp >= presaleNuggetStart, \"Pre-sale must be active to mint\");\n        require(totalSupply().add(1) <= maxEthWalkers, \"Purchase exceeds max supply of ETHWalkers\");\n        require(ids.length == 6, \"Must redeem exactly 6 nuggets for Six Pack\");\n\n        for(uint i = 0; i < ids.length; i++) {\n            uint id = uint(ids[i]);\n            require(nerdyNuggets.ownerOf(id) == msg.sender, \"Must own a Nerdy Nugget to mint ETH Walkers in presale\");\n            require(!nuggetPartOfSixPackRedeemed[id], \"This nugget already redeemed\");\n            nuggetPartOfSixPackRedeemed[ids[i]] = true;\n        }\n\n\n        uint mintIndex = totalSupply();\n        if (totalSupply() < maxEthWalkers) {\n            _safeMint(msg.sender, mintIndex);\n        }\n    }","after":"function mintPreSaleRedeemSixPackNuggets(uint256[] calldata ids) external nonReentrant {\n        require(saleState >= 1, \"Pre-sale must be active to mint\");\n        require(block.timestamp >= presaleNuggetStart, \"Pre-sale must be active to mint\");\n        require(totalSupply().add(1) <= maxEthWalkers, \"Purchase exceeds max supply of ETHWalkers\");\n        require(ids.length == 6, \"Must redeem exactly 6 nuggets for Six Pack\");\n\n        for(uint i = 0; i < ids.length; i++) {\n            uint id = uint(ids[i]);\n            require(nerdyNuggets.ownerOf(id) == msg.sender, \"Must own a Nerdy Nugget to mint ETH Walkers in presale\");\n            require(!nuggetPartOfSixPackRedeemed[id], \"This nugget already redeemed\");\n            nuggetPartOfSixPackRedeemed[ids[i]] = true;\n        }\n\n\n        uint mintIndex = totalSupply();\n        if (totalSupply() < maxEthWalkers) {\n            _safeMint(msg.sender, mintIndex);\n        }\n    }","contract":"ETHWalkersMinting","time":0},{"type":"external-function ","before":"function mintPreSaleNuggetsEthWalkers(uint256[] memory ids) external payable {\n        uint numberOfTokens = ids.length;\n        require(saleState >= 1, \"Sale must be active\");\n        require(block.timestamp >= presaleNuggetStart, \"Pre-sale must be active to mint\");\n        require(numberOfTokens > 0 && numberOfTokens <= maxETHWalkersPurchase, \"Oops - you can only mint 20 ETHWalkers at a time\");\n        require(msg.value >= _eTHWalkersPrice.mul(numberOfTokens), \"Ether value is incorrect. Check and try again\");\n        require(!isContract(msg.sender), \"I fight for the user! No contracts\");\n        require(totalSupply().add(numberOfTokens) <= maxEthWalkers, \"Purchase exceeds max supply of ETHWalkers\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            require(nerdyNuggets.ownerOf(ids[i]) == msg.sender, \"Must own a Nerdy Nugget to mint ETH Walkers in presale\");\n            require(!nuggetsEarlyMintRedeemed[ids[i]], \"This nugget already redeemed for mint\");\n            nuggetsEarlyMintRedeemed[ids[i]] = true;\n            uint mintIndex = totalSupply();\n            if (totalSupply() < maxEthWalkers) {\n                _safeMint(msg.sender, mintIndex);\n            }\n        }\n        (bool sent, ) = payoutsAddress.call{value: address(this).balance}(\"\");\n        require(sent, \"Something wrong with payoutsAddress\");\n    }","after":"function mintPreSaleNuggetsEthWalkers(uint256[] calldata ids) external payable {\n        uint numberOfTokens = ids.length;\n        require(saleState >= 1, \"Sale must be active\");\n        require(block.timestamp >= presaleNuggetStart, \"Pre-sale must be active to mint\");\n        require(numberOfTokens > 0 && numberOfTokens <= maxETHWalkersPurchase, \"Oops - you can only mint 20 ETHWalkers at a time\");\n        require(msg.value >= _eTHWalkersPrice.mul(numberOfTokens), \"Ether value is incorrect. Check and try again\");\n        require(!isContract(msg.sender), \"I fight for the user! No contracts\");\n        require(totalSupply().add(numberOfTokens) <= maxEthWalkers, \"Purchase exceeds max supply of ETHWalkers\");\n\n        for(uint i = 0; i < numberOfTokens; i++) {\n            require(nerdyNuggets.ownerOf(ids[i]) == msg.sender, \"Must own a Nerdy Nugget to mint ETH Walkers in presale\");\n            require(!nuggetsEarlyMintRedeemed[ids[i]], \"This nugget already redeemed for mint\");\n            nuggetsEarlyMintRedeemed[ids[i]] = true;\n            uint mintIndex = totalSupply();\n            if (totalSupply() < maxEthWalkers) {\n                _safeMint(msg.sender, mintIndex);\n            }\n        }\n        (bool sent, ) = payoutsAddress.call{value: address(this).balance}(\"\");\n        require(sent, \"Something wrong with payoutsAddress\");\n    }","contract":"ETHWalkersMinting","time":0},{"type":"constant-restrict-modification  ","before":"address payable public payoutsAddress = payable(address(0x812bDAD0057B78251412Db8B1FB92e210ecbF108));","after":"address payable public constant payoutsAddress = payable(address(0x812bDAD0057B78251412Db8B1FB92e210ecbF108));","contract":"ETHWalkersMinting","time":0},{"type":"constant-restrict-modification  ","before":"address boredApesAddress = 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D;","after":"address constant boredApesAddress = 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D;","contract":"ETHWalkersMinting","time":0},{"type":"constant-restrict-modification  ","before":"address mutantApesAddress = 0x60E4d786628Fea6478F785A6d7e704777c86a7c6;","after":"address constant mutantApesAddress = 0x60E4d786628Fea6478F785A6d7e704777c86a7c6;","contract":"ETHWalkersMinting","time":0},{"type":"constant-restrict-modification  ","before":"address nerdyNuggetsAddress = 0xb45F2ba6b25b8f326f0562905338b3Aa00D07640;","after":"address constant nerdyNuggetsAddress = 0xb45F2ba6b25b8f326f0562905338b3Aa00D07640;","contract":"ETHWalkersMinting","time":0},{"type":"constant-restrict-modification  ","before":"address zenAcademyAddress = 0xf64e6fB725f04042b5197e2529b84be4a925902C;","after":"address constant zenAcademyAddress = 0xf64e6fB725f04042b5197e2529b84be4a925902C;","contract":"ETHWalkersMinting","time":0}]}
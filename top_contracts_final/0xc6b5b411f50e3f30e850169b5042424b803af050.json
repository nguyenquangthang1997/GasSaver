{"time":258,"results":[{"type":"external-function ","before":"function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external onlyOwner {\n        antiSnipe.setBlacklistEnabledMultiple(accounts, enabled);\n    }","after":"function setBlacklistEnabledMultiple(address[] calldata accounts, bool enabled) external onlyOwner {\n        antiSnipe.setBlacklistEnabledMultiple(accounts, enabled);\n    }","contract":"MillionaireLifestyleToken","time":0},{"type":"external-function ","before":"function multiSendTokens(address[] memory accounts, uint256[] memory amounts) external {\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= amounts[i]);\n            _transfer(msg.sender, accounts[i], amounts[i]*10**_decimals);\n        }\n    }","after":"function multiSendTokens(address[] calldata accounts, uint256[] calldata amounts) external {\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= amounts[i]);\n            _transfer(msg.sender, accounts[i], amounts[i]*10**_decimals);\n        }\n    }","contract":"MillionaireLifestyleToken","time":0},{"type":"external-function ","before":"function multiSendPercents(address[] memory accounts, uint256[] memory percents, uint256[] memory divisors) external {\n        require(accounts.length == percents.length && percents.length == divisors.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= (_tTotal * percents[i]) / divisors[i]);\n            _transfer(msg.sender, accounts[i], (_tTotal * percents[i]) / divisors[i]);\n        }\n    }","after":"function multiSendPercents(address[] calldata accounts, uint256[] calldata percents, uint256[] calldata divisors) external {\n        require(accounts.length == percents.length && percents.length == divisors.length, \"Lengths do not match.\");\n        for (uint8 i = 0; i < accounts.length; i++) {\n            require(balanceOf(msg.sender) >= (_tTotal * percents[i]) / divisors[i]);\n            _transfer(msg.sender, accounts[i], (_tTotal * percents[i]) / divisors[i]);\n        }\n    }","contract":"MillionaireLifestyleToken","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private startingSupply = 500_000_000_000;","after":"uint256 private constant startingSupply = 500_000_000_000;","contract":"MillionaireLifestyleToken","time":1},{"type":"constant-restrict-modification  ","before":"uint8 private _decimals = 9;","after":"uint8 private constant _decimals = 9;","contract":"MillionaireLifestyleToken","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private _tTotal = startingSupply * 10**_decimals;","after":"uint256 private constant _tTotal = startingSupply * 10**_decimals;","contract":"MillionaireLifestyleToken","time":1}]}
{"time":324,"results":[{"type":"external-function ","before":"ract_address], 'Contract has been already registered');\n    dailyReward[contract_address] = reward_per_block_day;\n    NFTTokens[contract_address] = NFTExtension(contract_address);\n    NFTTokenList.push(contract_address","after":"ract_address], 'Contract has been already registered');\n    dailyReward[contract_address] = reward_per_block_day;\n    NFTTokens[contract_address] = NFTExtension(contract_address);\n    NFTTokenList.push(contract_address","contract":"NFTStaking","time":0},{"type":"external-function ","before":"DRESS');\n      require(!preSaleWhitelist[entry], 'DUPLICATE_ENTRY');\n\n      preSaleWhitelist[","after":"DRESS');\n      require(!preSaleWhitelist[entry], 'DUPLICATE_ENTRY');\n\n      preSaleWhitelist[","contract":"CrazyClown","time":0},{"type":"external-function ","before":"y] = true;\n    }\n  }\n\n  // Remove an array of wallet addresses to the presale white list\n ","after":"y] = true;\n    }\n  }\n\n  // Remove an array of wallet addresses to the presale white list\n ","contract":"CrazyClown","time":0},{"type":"external-function ","before":"ternal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n    ","after":"ternal pure returns (string calldata) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n    ","contract":"CrazyClown","time":0},{"type":"external-function ","before":"if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(di","after":"if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(di","contract":"CrazyClown","time":0},{"type":"external-function ","before":"ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) int","after":"ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) int","contract":"CrazyClown","time":0},{"type":"immutable-restrict-modification ","before":"cked {\n            c","after":"cked {\n            c","contract":"CrazyClown","time":0},{"type":"immutable-restrict-modification ","before":"�▓▄ ▄██▒▒██░    ","after":"�▓▄ ▄██▒▒██░    ","contract":"CrazyClown","time":0}]}
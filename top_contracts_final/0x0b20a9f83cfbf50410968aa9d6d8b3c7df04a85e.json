{"time":156,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function batchTransfer(address giver, address[] memory recipients, uint256[] memory values) public {\n\n    for (uint256 i = 0; i < values.length; i++) {\n      transferFrom(giver, recipients[i], values[i]);\n     items[values[i]].state = TokenState.Transferred;\n    }\n    emit BatchTransfered(items[values[0]].metaId, recipients, values);\n  }","after":"function batchTransfer(address giver, address[] calldata recipients, uint256[] calldata values) public {\n\n    for (uint256 i = 0; i < values.length; i++) {\n      transferFrom(giver, recipients[i], values[i]);\n     items[values[i]].state = TokenState.Transferred;\n    }\n    emit BatchTransfered(items[values[0]].metaId, recipients, values);\n  }","contract":"Sevens","time":0},{"type":"external-function ","before":"function batchMint(address to, uint256 amountToMint, string memory metaId, uint256 setPrice, address payable[] memory royaltyAddress, uint256[] memory royaltyBps) public onlyMinter {\n    require(amountToMint <= 40, \"Over 40\");\n    for (uint256 i = 0; i < amountToMint; i++) {\n      id = id.add(1);\n      items[id].price = setPrice;\n      items[id].metaId = metaId;\n      creatorAddresses[id] = royaltyAddress;\n\t  creatorShares[id] = royaltyBps;\n      _mint(to, id);\n      emit Minted(id, metaId);\n    }\n  }","after":"function batchMint(address to, uint256 amountToMint, string calldata metaId, uint256 setPrice, address payable[] calldata royaltyAddress, uint256[] calldata royaltyBps) public onlyMinter {\n    require(amountToMint <= 40, \"Over 40\");\n    for (uint256 i = 0; i < amountToMint; i++) {\n      id = id.add(1);\n      items[id].price = setPrice;\n      items[id].metaId = metaId;\n      creatorAddresses[id] = royaltyAddress;\n\t  creatorShares[id] = royaltyBps;\n      _mint(to, id);\n      emit Minted(id, metaId);\n    }\n  }","contract":"Sevens","time":0},{"type":"external-function ","before":"function batchBurn(uint256[] memory tokenIds) public onlyMinter {\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      _burn(tokenIds[i]);\n    }\n    emit BatchBurned(items[tokenIds[0]].metaId, tokenIds);\n  }","after":"function batchBurn(uint256[] calldata tokenIds) public onlyMinter {\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      _burn(tokenIds[i]);\n    }\n    emit BatchBurned(items[tokenIds[0]].metaId, tokenIds);\n  }","contract":"Sevens","time":0},{"type":"external-function ","before":"function mintWithTokenURI(address to, uint256 tokenId, string memory tokenURI) public onlyMinter returns (bool) {\n        _mint(to, tokenId);\n        _setTokenURI(tokenId, tokenURI);\n        return true;\n    }","after":"function mintWithTokenURI(address to, uint256 tokenId, string calldata tokenURI) public onlyMinter returns (bool) {\n        _mint(to, tokenId);\n        _setTokenURI(tokenId, tokenURI);\n        return true;\n    }","contract":"Sevens","time":0}]}
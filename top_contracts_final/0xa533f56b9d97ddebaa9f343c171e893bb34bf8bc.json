{"time":74,"results":[{"type":"external-function ","before":"function sendETH(\n        address payable[] memory payees,\n        uint256[] memory amounts,\n        address payable referrer\n    ) public payable {\n        uint256 txCount = payees.length;\n        require(txCount == amounts.length, \"Params not match\");\n\n        uint256 remain = msg.value;\n        uint256 fee = calcFee(msg.sender, txCount);\n        require(remain >= fee, \"Fee is not enough\");\n        remain -= fee;\n\n        for (uint256 i = 0; i < txCount; i++) {\n            remain -= amounts[i];\n            // payees[i].transfer(amounts[i]);\n            (bool success, ) = payees[i].call{ value: amounts[i] }(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        if (fee > 0 && _refBonus > 0 && referrer != address(0x0) && referrer != msg.sender) {\n            uint256 bonus = (fee * 100) / _refBonus;\n            // use send to enable fail\n            referrer.send(bonus);\n        }\n    }","after":"function sendETH(\n        address payable[] calldata payees,\n        uint256[] calldata amounts,\n        address payable referrer\n    ) public payable {\n        uint256 txCount = payees.length;\n        require(txCount == amounts.length, \"Params not match\");\n\n        uint256 remain = msg.value;\n        uint256 fee = calcFee(msg.sender, txCount);\n        require(remain >= fee, \"Fee is not enough\");\n        remain -= fee;\n\n        for (uint256 i = 0; i < txCount; i++) {\n            remain -= amounts[i];\n            // payees[i].transfer(amounts[i]);\n            (bool success, ) = payees[i].call{ value: amounts[i] }(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        if (fee > 0 && _refBonus > 0 && referrer != address(0x0) && referrer != msg.sender) {\n            uint256 bonus = (fee * 100) / _refBonus;\n            // use send to enable fail\n            referrer.send(bonus);\n        }\n    }","contract":"BatchTransfer","time":0},{"type":"external-function ","before":"function sendToken(\n        address token,\n        address payable[] memory payees,\n        uint256[] memory amounts,\n        address payable referrer\n    ) public payable {\n        uint256 txCount = payees.length;\n        require(txCount == amounts.length, \"Params not match\");\n\n        uint256 fee = calcFee(msg.sender, txCount);\n        require(msg.value >= fee, \"Fee is not enough\");\n\n        for (uint256 i = 0; i < txCount; i++) {\n            // safeTransferFrom is required\n            IERC20(token).safeTransferFrom(msg.sender, payees[i], amounts[i]);\n        }\n\n        if (fee > 0 && _refBonus > 0 && referrer != address(0x0) && referrer != msg.sender) {\n            uint256 bonus = (fee * 100) / _refBonus;\n            // use send to enable fail\n            referrer.send(bonus);\n        }\n    }","after":"function sendToken(\n        address token,\n        address payable[] calldata payees,\n        uint256[] calldata amounts,\n        address payable referrer\n    ) public payable {\n        uint256 txCount = payees.length;\n        require(txCount == amounts.length, \"Params not match\");\n\n        uint256 fee = calcFee(msg.sender, txCount);\n        require(msg.value >= fee, \"Fee is not enough\");\n\n        for (uint256 i = 0; i < txCount; i++) {\n            // safeTransferFrom is required\n            IERC20(token).safeTransferFrom(msg.sender, payees[i], amounts[i]);\n        }\n\n        if (fee > 0 && _refBonus > 0 && referrer != address(0x0) && referrer != msg.sender) {\n            uint256 bonus = (fee * 100) / _refBonus;\n            // use send to enable fail\n            referrer.send(bonus);\n        }\n    }","contract":"BatchTransfer","time":0}]}
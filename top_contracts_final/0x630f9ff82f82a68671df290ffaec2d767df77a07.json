{"time":155,"results":[{"type":"state-data-arrangement ","before":"\nstring public name;\nstring public symbol;\nuint256 public tokenCount;\nstring public baseUri;\nuint256 public cost = 0.06 ether;\nuint256 public maxMintAmount = 5;\nbool public revealed = false;\nstring public notRevealedUri;\nbool public onlyWhitelisted = true;\naddress[] public whitelistedAddresses;\nuint256 public nftsAvailable = 1888;","after":"string public name;\nstring public symbol;\nuint256 public tokenCount;\nstring public baseUri;\nuint256 public cost = 0.06 ether;\nuint256 public maxMintAmount = 5;\nstring public notRevealedUri;\naddress[] public whitelistedAddresses;\nuint256 public nftsAvailable = 1888;\nbool public revealed = false;\nbool public onlyWhitelisted = true;\n","contract":"HeartbreakBears","time":0},{"type":"external-function ","before":"function airdrop(address[] memory accounts) public nonReentrant whenNotPaused onlyOwner {\n        require(\n            tokenCount + accounts.length <= nftsAvailable,\n            \"No NFTs available for minting\"\n        );\n\n        tokenCount += 1;\n        for (uint256 i = tokenCount; i < tokenCount + accounts.length; i++) {\n            address account = accounts[i - tokenCount];\n            _balances[i][account] += 1;\n            emit TransferSingle(msg.sender, address(0), account, i, 1);\n            _doSafeTransferAcceptanceCheck(msg.sender, address(0), account, i, 1, \"\");\n        }\n\n        tokenCount += accounts.length - 1;\n\n    }","after":"function airdrop(address[] calldata accounts) public nonReentrant whenNotPaused onlyOwner {\n        require(\n            tokenCount + accounts.length <= nftsAvailable,\n            \"No NFTs available for minting\"\n        );\n\n        tokenCount += 1;\n        for (uint256 i = tokenCount; i < tokenCount + accounts.length; i++) {\n            address account = accounts[i - tokenCount];\n            _balances[i][account] += 1;\n            emit TransferSingle(msg.sender, address(0), account, i, 1);\n            _doSafeTransferAcceptanceCheck(msg.sender, address(0), account, i, 1, \"\");\n        }\n\n        tokenCount += accounts.length - 1;\n\n    }","contract":"HeartbreakBears","time":0},{"type":"external-function ","before":"function reveal(string memory _baseUri) public onlyOwner {\n        baseUri = _baseUri;\n        revealed = true;\n    }","after":"function reveal(string calldata _baseUri) public onlyOwner {\n        baseUri = _baseUri;\n        revealed = true;\n    }","contract":"HeartbreakBears","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseUri = _newBaseURI;\n    }","after":"function setBaseURI(string calldata _newBaseURI) public onlyOwner {\n        baseUri = _newBaseURI;\n    }","contract":"HeartbreakBears","time":0},{"type":"external-function ","before":"function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\n        notRevealedUri = _notRevealedURI;\n    }","after":"function setNotRevealedURI(string calldata _notRevealedURI) public onlyOwner {\n        notRevealedUri = _notRevealedURI;\n    }","contract":"HeartbreakBears","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"HeartbreakBears","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"HeartbreakBears","time":1},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"HeartbreakBears","time":0}]}
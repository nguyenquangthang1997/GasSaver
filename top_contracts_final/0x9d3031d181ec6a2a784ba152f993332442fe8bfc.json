{"time":147,"results":[{"type":"external-function ","before":"function hatch(\n      address account,\n      string memory nonce,\n      bytes memory signature\n    ) external returns (uint256) {\n      if(!teamAddresses[account]) {\n        require(!_paused, \"Breeding Paused\");\n      }\n      require(_verify(_hash(account, 1, nonce), signature), \"Invalid signature\");\n      require(!_usedNonces[nonce], \"Hash used\");\n      \n      _tokenIds.increment();\n      _mint(account, _tokenIds.current(), 1, \"\");\n      _usedNonces[nonce] = true;\n      return _tokenIds.current();\n    }","after":"function hatch(\n      address account,\n      string calldata nonce,\n      bytes calldata signature\n    ) external returns (uint256) {\n      if(!teamAddresses[account]) {\n        require(!_paused, \"Breeding Paused\");\n      }\n      require(_verify(_hash(account, 1, nonce), signature), \"Invalid signature\");\n      require(!_usedNonces[nonce], \"Hash used\");\n      \n      _tokenIds.increment();\n      _mint(account, _tokenIds.current(), 1, \"\");\n      _usedNonces[nonce] = true;\n      return _tokenIds.current();\n    }","contract":"FlyFrogsTadpoles","time":0},{"type":"external-function ","before":"function multiHatch(\n      address account,\n      uint256 count,\n      string memory nonce,\n      bytes memory signature\n    ) external returns (uint256[] memory) {\n      if(!teamAddresses[account]) {\n        require(!_paused, \"Breeding Paused\");\n      }\n      require(_verify(_hash(account, count, nonce), signature), \"Invalid signature\");\n      require(!_usedNonces[nonce], \"Hash used\");\n      \n      uint256[] memory ids = new uint256[](count);\n      uint256[] memory amounts = new uint256[](count);\n      \n      for(uint i = 0; i < count; i++) {\n        _tokenIds.increment();\n        ids[i]= _tokenIds.current();\n        amounts[i] = 1;\n      }\n\n      _mintBatch(account, ids, amounts, \"\");\n      _usedNonces[nonce] = true;\n      return ids;\n    }","after":"function multiHatch(\n      address account,\n      uint256 count,\n      string calldata nonce,\n      bytes calldata signature\n    ) external returns (uint256[] memory) {\n      if(!teamAddresses[account]) {\n        require(!_paused, \"Breeding Paused\");\n      }\n      require(_verify(_hash(account, count, nonce), signature), \"Invalid signature\");\n      require(!_usedNonces[nonce], \"Hash used\");\n      \n      uint256[] memory ids = new uint256[](count);\n      uint256[] memory amounts = new uint256[](count);\n      \n      for(uint i = 0; i < count; i++) {\n        _tokenIds.increment();\n        ids[i]= _tokenIds.current();\n        amounts[i] = 1;\n      }\n\n      _mintBatch(account, ids, amounts, \"\");\n      _usedNonces[nonce] = true;\n      return ids;\n    }","contract":"FlyFrogsTadpoles","time":0},{"type":"external-function ","before":"function setURI(string memory _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n    }","after":"function setURI(string calldata _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n    }","contract":"FlyFrogsTadpoles","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"FlyFrogsTadpoles","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"FlyFrogsTadpoles","time":0}]}
{"time":136,"results":[{"type":"external-function ","before":"function setToken(uint id, string memory name_, string memory uri_, uint supply,\r\n    bool isBurnActive, uint burnPrice,\r\n    bool isMintActive, uint mintPrice, bool burnStar ) public onlyDelegates{\r\n    require( id < tokens.length || id == tokens.length, \"ERC1155: Invalid token id\" );\r\n    if( id == tokens.length ){\r\n      tokens.push();\r\n    }\r\n    else{\r\n      require( tokens[id].balance <= supply, \"ERC1155: Specified supply is lower than current balance\" );\r\n    }\r\n\r\n\r\n    Token storage token = tokens[id];\r\n    token.name         = name_;\r\n    token.uri          = uri_;\r\n    token.isBurnActive = isBurnActive;\r\n    token.isMintActive = isMintActive;\r\n    token.burnPrice    = burnPrice;\r\n    token.mintPrice    = mintPrice;\r\n    token.supply       = supply;\r\n    token.burnStar     = burnStar;\r\n\r\n    if( bytes(uri_).length > 0 )\r\n      emit URI( uri_, id );\r\n  }","after":"function setToken(uint id, string calldata name_, string calldata uri_, uint supply,\r\n    bool isBurnActive, uint burnPrice,\r\n    bool isMintActive, uint mintPrice, bool burnStar ) public onlyDelegates{\r\n    require( id < tokens.length || id == tokens.length, \"ERC1155: Invalid token id\" );\r\n    if( id == tokens.length ){\r\n      tokens.push();\r\n    }\r\n    else{\r\n      require( tokens[id].balance <= supply, \"ERC1155: Specified supply is lower than current balance\" );\r\n    }\r\n\r\n\r\n    Token storage token = tokens[id];\r\n    token.name         = name_;\r\n    token.uri          = uri_;\r\n    token.isBurnActive = isBurnActive;\r\n    token.isMintActive = isMintActive;\r\n    token.burnPrice    = burnPrice;\r\n    token.mintPrice    = mintPrice;\r\n    token.supply       = supply;\r\n    token.burnStar     = burnStar;\r\n\r\n    if( bytes(uri_).length > 0 )\r\n      emit URI( uri_, id );\r\n  }","contract":"StarShop","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"StarShop","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"StarShop","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"Ethaliens: Star Shop\";","after":"string public constant name = \"Ethaliens: Star Shop\";","contract":"StarShop","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"ESS\";","after":"string public constant symbol = \"ESS\";","contract":"StarShop","time":0},{"type":"constant-restrict-modification  ","before":"address proxyRegistryAddress = 0xF57B2c51dED3A29e6891aba85459d600256Cf317;","after":"address constant proxyRegistryAddress = 0xF57B2c51dED3A29e6891aba85459d600256Cf317;","contract":"StarShop","time":0}]}
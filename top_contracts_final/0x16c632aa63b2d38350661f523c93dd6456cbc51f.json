{"time":326,"results":[{"type":"external-function ","before":"function claimComic(address receiver, bytes memory signature) public whenNotPaused {\n        require(hasClaimed[receiver] == false, \"AlreadyClaimed\");\n        require(collection.presaleIsActive(), \"TheLostGlitchesComic: Sale is not active\");\n        bytes32 messageHash = keccak256(abi.encodePacked(address(this), receiver));\n        bytes32 ethMessageHash = ECDSA.toEthSignedMessageHash(messageHash);\n\n        require(SignatureChecker.isValidSignatureNow(trustedSigner, ethMessageHash, signature), \"InvalidSignature\");\n\n        hasClaimed[receiver] = true;\n        collection.mintAirdrop(receiver);\n    }","after":"function claimComic(address receiver, bytes calldata signature) public whenNotPaused {\n        require(hasClaimed[receiver] == false, \"AlreadyClaimed\");\n        require(collection.presaleIsActive(), \"TheLostGlitchesComic: Sale is not active\");\n        bytes32 messageHash = keccak256(abi.encodePacked(address(this), receiver));\n        bytes32 ethMessageHash = ECDSA.toEthSignedMessageHash(messageHash);\n\n        require(SignatureChecker.isValidSignatureNow(trustedSigner, ethMessageHash, signature), \"InvalidSignature\");\n\n        hasClaimed[receiver] = true;\n        collection.mintAirdrop(receiver);\n    }","contract":"ComicAirdropMinter","time":0},{"type":"external-function ","before":"   function setBaseUri(string memory _baseUri) external onlyOwner whenMetadataNotFrozen {\n      baseUri = _baseUri;\n      emit SetBaseUri(baseUri);\n  ","after":"   function setBaseUri(string calldata _baseUri) external onlyOwner whenMetadataNotFrozen {\n      baseUri = _baseUri;\n      emit SetBaseUri(baseUri);\n  ","contract":"TheLostGlitchesComic","time":0},{"type":"immutable-restrict-modification ","before":"   uint256 public MAX_COMI","after":"   uint256 public MAX_COMI","contract":"TheLostGlitchesComic","time":0},{"type":"immutable-restrict-modification ","before":"   uint256 public maxPerMi","after":"   uint256 public maxPerMi","contract":"TheLostGlitchesComic","time":0},{"type":"state-data-arrangement ","before":"\n   string public PROVENANCE_HASH = \n   uint256 public MAX_GLITCH\n   uint256 public OFFSET_VAL\n   bool public METADATA_FROZ\n   bool public PROVENANCE_FROZ\n   string public baseU\n   bool public saleIsActi\n   uint256 public mintPri\n   uint256 public maxPerMi","after":"   string public PROVENANCE_HASH = \n   uint256 public MAX_GLITCH\n   uint256 public OFFSET_VAL\n   string public baseU\n   uint256 public mintPri\n   uint256 public maxPerMi\n   bool public METADATA_FROZ\n   bool public PROVENANCE_FROZ\n   bool public saleIsActi\n","contract":"TheLostGlitches","time":0},{"type":"external-function ","before":"   function setBaseUri(string memory _baseUri) external onlyOwner whenMetadataNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n  ","after":"   function setBaseUri(string calldata _baseUri) external onlyOwner whenMetadataNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n  ","contract":"TheLostGlitches","time":0},{"type":"external-function ","before":"   function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyOwner whenMetadataNotFrozen {\n        super._setTokenURI(tokenId, _tokenURI);\n  ","after":"   function setTokenURI(uint256 tokenId, string calldata _tokenURI) external onlyOwner whenMetadataNotFrozen {\n        super._setTokenURI(tokenId, _tokenURI);\n  ","contract":"TheLostGlitches","time":0},{"type":"external-function ","before":"   function setProvenanceHash(string memory _provenanceHash) external onlyOwner whenProvenanceNotFrozen {\n        PROVENANCE_HASH = _provenanceHash;\n  ","after":"   function setProvenanceHash(string calldata _provenanceHash) external onlyOwner whenProvenanceNotFrozen {\n        PROVENANCE_HASH = _provenanceHash;\n  ","contract":"TheLostGlitches","time":0},{"type":"immutable-restrict-modification ","before":"   uint256 public MAX_GLITCH","after":"   uint256 public MAX_GLITCH","contract":"TheLostGlitches","time":1}]}
{"time":161,"results":[{"type":"external-function ","before":"function buy(\r\n        bytes32 hash,\r\n        bytes memory signature,\r\n        string memory nonce,\r\n        uint256 tokenQuantity\r\n    ) external payable {\r\n        require(saleLive, \"Sale Not Active\");\r\n        require(getSignerAddress() != address(0x0), \"Signer Not Yet Set\");\r\n        require(\r\n            getSignerAddress() == hash.recover(signature),\r\n            \"Direct Minting Disallowed\"\r\n        );\r\n        require(!_usedNonces[nonce], \"Invalid Nonce\");\r\n        require(\r\n            hashTransaction(msg.sender, tokenQuantity, nonce) == hash,\r\n            \"Signature Failed\"\r\n        );\r\n        require(totalMinted.add(tokenQuantity) < getMaxMint(), \"Out of Stock\");\r\n        require(\r\n            getPrice().mul(tokenQuantity) <= msg.value,\r\n            \"Insufficient Funds\"\r\n        );\r\n        _usedNonces[nonce] = true;\r\n        safeMint(msg.sender, tokenQuantity);\r\n    }","after":"function buy(\r\n        bytes32 hash,\r\n        bytes calldata signature,\r\n        string calldata nonce,\r\n        uint256 tokenQuantity\r\n    ) external payable {\r\n        require(saleLive, \"Sale Not Active\");\r\n        require(getSignerAddress() != address(0x0), \"Signer Not Yet Set\");\r\n        require(\r\n            getSignerAddress() == hash.recover(signature),\r\n            \"Direct Minting Disallowed\"\r\n        );\r\n        require(!_usedNonces[nonce], \"Invalid Nonce\");\r\n        require(\r\n            hashTransaction(msg.sender, tokenQuantity, nonce) == hash,\r\n            \"Signature Failed\"\r\n        );\r\n        require(totalMinted.add(tokenQuantity) < getMaxMint(), \"Out of Stock\");\r\n        require(\r\n            getPrice().mul(tokenQuantity) <= msg.value,\r\n            \"Insufficient Funds\"\r\n        );\r\n        _usedNonces[nonce] = true;\r\n        safeMint(msg.sender, tokenQuantity);\r\n    }","contract":"SlimeSale","time":0},{"type":"external-function ","before":"function addRangeURI(uint256 lastId, string memory uri) external onlyOwner {\r\n        require(lastId <= totalSupply(),\"Id Range exceeded\");\r\n        require(lastId > lastRevealedId, \"Range URI already Set\");\r\n        lastRevealedId = lastId;\r\n        _rangedURIs.push(RangedURI(lastId, uri));\r\n    }","after":"function addRangeURI(uint256 lastId, string calldata uri) external onlyOwner {\r\n        require(lastId <= totalSupply(),\"Id Range exceeded\");\r\n        require(lastId > lastRevealedId, \"Range URI already Set\");\r\n        lastRevealedId = lastId;\r\n        _rangedURIs.push(RangedURI(lastId, uri));\r\n    }","contract":"SlimeProducer","time":0},{"type":"external-function ","before":"function setDefaultBaseURI(string memory baseURI) external onlyOwner {\r\n        defaultBaseURI = baseURI;\r\n    }","after":"function setDefaultBaseURI(string calldata baseURI) external onlyOwner {\r\n        defaultBaseURI = baseURI;\r\n    }","contract":"SlimeProducer","time":0},{"type":"constant-restrict-modification  ","before":"address public proxyRegistryAddress=0xa5409ec958C83C3f309868babACA7c86DCB077c1;","after":"address public constant proxyRegistryAddress=0xa5409ec958C83C3f309868babACA7c86DCB077c1;","contract":"SlimeProducer","time":0}]}
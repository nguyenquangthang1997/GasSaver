{"time":155,"results":[{"type":"external-function ","before":"function setURIs(\n        string memory _blindURI, \n        string memory _URI\n    ) \n        external \n        onlyOwner \n    {\n        blindURI = _blindURI;\n        baseURI = _URI;\n    }","after":"function setURIs(\n        string calldata _blindURI, \n        string calldata _URI\n    ) \n        external \n        onlyOwner \n    {\n        blindURI = _blindURI;\n        baseURI = _URI;\n    }","contract":"METAINVASION","time":0},{"type":"external-function ","before":"function mintNFTDuringPresale(\n        uint32 _numOfTokens,\n        bytes32[] memory _proof\n    ) \n        public \n        payable\n    {\n        require(isActive, 'Contract is not active');\n        require(isPresaleActive, 'Presale not active');\n        require(verify(_proof, bytes32(uint256(uint160(msg.sender)))), \"Not whitelisted\");\n        require(totalSupply.sub(giveawayCount) < MAX_NFT_PUBLIC, 'All public tokens have been minted');\n        require(totalSupply.add(_numOfTokens).sub(giveawayCount) <= MAX_NFT_PUBLIC, 'Purchase would exceed max public supply of NFTs');\n        require( msg.value >= NFTPrice.mul(_numOfTokens), \"Ether value sent is not correct\");\n        mint(msg.sender,_numOfTokens);\n           \n    }","after":"function mintNFTDuringPresale(\n        uint32 _numOfTokens,\n        bytes32[] calldata _proof\n    ) \n        public \n        payable\n    {\n        require(isActive, 'Contract is not active');\n        require(isPresaleActive, 'Presale not active');\n        require(verify(_proof, bytes32(uint256(uint160(msg.sender)))), \"Not whitelisted\");\n        require(totalSupply.sub(giveawayCount) < MAX_NFT_PUBLIC, 'All public tokens have been minted');\n        require(totalSupply.add(_numOfTokens).sub(giveawayCount) <= MAX_NFT_PUBLIC, 'Purchase would exceed max public supply of NFTs');\n        require( msg.value >= NFTPrice.mul(_numOfTokens), \"Ether value sent is not correct\");\n        mint(msg.sender,_numOfTokens);\n           \n    }","contract":"METAINVASION","time":0},{"type":"external-function ","before":"function mintMultipleByOwner(\n        address[] memory _to\n    ) \n        public \n        onlyOwner\n    {\n        require(totalSupply.add(_to.length) < MAX_NFT, \"Tokens number to mint cannot exceed number of MAX tokens\");\n        require(giveawayCount.add(_to.length)<=maxGiveaway,\"Cannot do that much giveaway\");\n        for(uint256 i = 0; i < _to.length; i++){\n            mint(_to[i],1);\n        }\n        giveawayCount=giveawayCount.add(_to.length);\n    }","after":"function mintMultipleByOwner(\n        address[] calldata _to\n    ) \n        public \n        onlyOwner\n    {\n        require(totalSupply.add(_to.length) < MAX_NFT, \"Tokens number to mint cannot exceed number of MAX tokens\");\n        require(giveawayCount.add(_to.length)<=maxGiveaway,\"Cannot do that much giveaway\");\n        for(uint256 i = 0; i < _to.length; i++){\n            mint(_to[i],1);\n        }\n        giveawayCount=giveawayCount.add(_to.length);\n    }","contract":"METAINVASION","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"METAINVASION","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"METAINVASION","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_NFT_PRICE = 200000000000000000;","after":"uint256 public constant MAX_NFT_PRICE = 200000000000000000;","contract":"METAINVASION","time":1}]}
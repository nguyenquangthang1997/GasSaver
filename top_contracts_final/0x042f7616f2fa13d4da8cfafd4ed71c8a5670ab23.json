{"time":245,"results":[{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n    }","after":"function setBaseURI(string calldata _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n    }","contract":"MangaNFT","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"MangaNFT","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"MangaNFT","time":0},{"type":"external-function ","before":"function setBatchWhiteList(address[] memory _users, uint8[] memory _numbers, uint256[] memory _prices) external onlyOwner {\n        require(_users.length == _numbers.length, \"Array no match\");\n        require(_users.length == _prices.length, \"Array no match\");\n\n        for (uint256 i = 0; i < _users.length; i++) {\n            whitelist[_users[i]] = _numbers[i];\n            whitelistPrice[_users[i]] = _prices[i];\n        }\n    }","after":"function setBatchWhiteList(address[] calldata _users, uint8[] calldata _numbers, uint256[] calldata _prices) external onlyOwner {\n        require(_users.length == _numbers.length, \"Array no match\");\n        require(_users.length == _prices.length, \"Array no match\");\n\n        for (uint256 i = 0; i < _users.length; i++) {\n            whitelist[_users[i]] = _numbers[i];\n            whitelistPrice[_users[i]] = _prices[i];\n        }\n    }","contract":"BunnyRouter","time":0}]}
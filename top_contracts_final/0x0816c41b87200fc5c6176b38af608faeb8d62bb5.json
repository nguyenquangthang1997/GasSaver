{"time":243,"results":[{"type":"state-data-arrangement ","before":"\nuint public maxTokens = 10000;\nuint public tokensReservedForWhitelist = 6695;\nuint public tokensMintedForWhitelist = 0;\nuint public tokensReservedForDutchAuction = 3000;\nuint public tokensMintedForDutchAuction = 0;\nuint public tokensReservedForReserved = 305;\nuint public tokensMintedForReserved = 0;\nstring internal baseTokenURI;\nstring internal baseTokenURI_EXT;\nmapping(address => bool) internal shareholderToUnlockGovernance;\naddress internal Shareholder_1 = 0x9eEFBb6759E48aAafd8a49d825abFdD0B22d5aD1;\naddress internal Shareholder_2 = 0x506aeaEb48cA2E4145910606a6Fe97f294477d1B;\naddress internal Shareholder_3 = 0x2f3Db2A40C01d1fDd6Fd4ac6040684292B8807e8;\naddress internal Shareholder_4 = 0x458E0c06506eabE9C21074A46E7fAb70672D6205;\naddress internal Shareholder_5 = 0x2cF855E17bD28Bb34982Ca1E4371ef7d3E6817e1;\naddress internal Shareholder_6 = 0xB4C84F2848ba2FF988f4Ca33A5b37f0FCC4a60c2;\naddress internal Shareholder_7 = 0x1eD3D146cb5945e1C894A70013Ed83F95693EA22;\nuint internal Shareholder_1_Share = 7;\nuint internal Shareholder_2_Share = 7;\nuint internal Shareholder_3_Share = 21;\nuint internal Shareholder_4_Share = 35;\nuint internal Shareholder_5_Share = 12;\nuint internal Shareholder_6_Share = 10;\nuint internal Shareholder_7_Share = 8;\nuint public addressesWhitelisted = 0;\nuint public whiteListPrice = 0.08 ether;\nmapping(address => uint) public addressToWhitelistQuota;\nmapping(address => uint) public addressToWhitelistMinted;\nbool public whiteListMintEnabled;\nbytes32 public merkleRoot = 0x57c359b719e25852692060d2b4d8ce73ad9fea9406622eab2d3cb352cf46373c;\nuint public dutchEndingPrice = 0.08 ether;\nuint public dutchPriceAdditional;\nuint public dutchStartTime;\nuint public dutchDuration;\nuint public dutchEndTime;\nbool public dutchAuctionStarted;\nuint public rolloverSalePrice;\nuint public rolloverSaleStartTime;\nbool public rolloverSaleStarted;\nuint public rolloverSaleTokensMinted;","after":"uint public maxTokens = 10000;\nuint public tokensReservedForWhitelist = 6695;\nuint public tokensMintedForWhitelist = 0;\nuint public tokensReservedForDutchAuction = 3000;\nuint public tokensMintedForDutchAuction = 0;\nuint public tokensReservedForReserved = 305;\nuint public tokensMintedForReserved = 0;\nstring internal baseTokenURI;\nstring internal baseTokenURI_EXT;\nmapping(address => bool) internal shareholderToUnlockGovernance;\nuint internal Shareholder_1_Share = 7;\nuint internal Shareholder_2_Share = 7;\nuint internal Shareholder_3_Share = 21;\nuint internal Shareholder_4_Share = 35;\nuint internal Shareholder_5_Share = 12;\nuint internal Shareholder_6_Share = 10;\nuint internal Shareholder_7_Share = 8;\nuint public addressesWhitelisted = 0;\nuint public whiteListPrice = 0.08 ether;\nmapping(address => uint) public addressToWhitelistQuota;\nmapping(address => uint) public addressToWhitelistMinted;\nbytes32 public merkleRoot = 0x57c359b719e25852692060d2b4d8ce73ad9fea9406622eab2d3cb352cf46373c;\nuint public dutchEndingPrice = 0.08 ether;\nuint public dutchPriceAdditional;\nuint public dutchStartTime;\nuint public dutchDuration;\nuint public dutchEndTime;\nuint public rolloverSalePrice;\nuint public rolloverSaleStartTime;\nuint public rolloverSaleTokensMinted;\naddress internal Shareholder_1 = 0x9eEFBb6759E48aAafd8a49d825abFdD0B22d5aD1;\naddress internal Shareholder_2 = 0x506aeaEb48cA2E4145910606a6Fe97f294477d1B;\naddress internal Shareholder_3 = 0x2f3Db2A40C01d1fDd6Fd4ac6040684292B8807e8;\naddress internal Shareholder_4 = 0x458E0c06506eabE9C21074A46E7fAb70672D6205;\naddress internal Shareholder_5 = 0x2cF855E17bD28Bb34982Ca1E4371ef7d3E6817e1;\naddress internal Shareholder_6 = 0xB4C84F2848ba2FF988f4Ca33A5b37f0FCC4a60c2;\naddress internal Shareholder_7 = 0x1eD3D146cb5945e1C894A70013Ed83F95693EA22;\nbool public whiteListMintEnabled;\nbool public dutchAuctionStarted;\nbool public rolloverSaleStarted;\n","contract":"nonFungibleFungiMintPass","time":1},{"type":"external-function ","before":"function addAddressToWhitelist(address[] memory addresses_) public onlyOwner {\n        uint _amountOfAddresses = addresses_.length;\n        for (uint i = 0; i < _amountOfAddresses; i++) {\n            addressToWhitelistQuota[addresses_[i]] = 1; // record the whitelisted address and quota\n        }\n        addressesWhitelisted += _amountOfAddresses; // increase tracker by amount of whitelisted addreses\n    }","after":"function addAddressToWhitelist(address[] calldata addresses_) public onlyOwner {\n        uint _amountOfAddresses = addresses_.length;\n        for (uint i = 0; i < _amountOfAddresses; i++) {\n            addressToWhitelistQuota[addresses_[i]] = 1; // record the whitelisted address and quota\n        }\n        addressesWhitelisted += _amountOfAddresses; // increase tracker by amount of whitelisted addreses\n    }","contract":"nonFungibleFungiMintPass","time":0},{"type":"external-function ","before":"function mintWhitelistMerkleTree(bytes32[] memory proof_) public payable onlySender whiteListMint {\n        require(isMerkleWhitelisted(proof_), \"You are not whitelisted!\");\n        require(addressToWhitelistMinted[msg.sender] == 0, \"You have no more whitelist mints left!\");\n        require(msg.value == whiteListPrice, \"Invalid value sent!\");\n        require(tokensReservedForWhitelist > tokensMintedForWhitelist, \"No more whitelist tokens!\");\n        require(maxTokens > totalSupply(), \"No more tokens remaining!\");\n\n        addressToWhitelistMinted[msg.sender]++; // increments the tracker so that they cannot mint again\n        tokensMintedForWhitelist++; // increments tracker of how many tokens have been minted from whitelist\n\n        uint _mintId = totalSupply();\n        _mint(msg.sender, _mintId);\n\n        emit MintWhitelist(msg.sender, _mintId);\n    }","after":"function mintWhitelistMerkleTree(bytes32[] calldata proof_) public payable onlySender whiteListMint {\n        require(isMerkleWhitelisted(proof_), \"You are not whitelisted!\");\n        require(addressToWhitelistMinted[msg.sender] == 0, \"You have no more whitelist mints left!\");\n        require(msg.value == whiteListPrice, \"Invalid value sent!\");\n        require(tokensReservedForWhitelist > tokensMintedForWhitelist, \"No more whitelist tokens!\");\n        require(maxTokens > totalSupply(), \"No more tokens remaining!\");\n\n        addressToWhitelistMinted[msg.sender]++; // increments the tracker so that they cannot mint again\n        tokensMintedForWhitelist++; // increments tracker of how many tokens have been minted from whitelist\n\n        uint _mintId = totalSupply();\n        _mint(msg.sender, _mintId);\n\n        emit MintWhitelist(msg.sender, _mintId);\n    }","contract":"nonFungibleFungiMintPass","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory uri_) external onlyOwner {\n        baseTokenURI = uri_;\n    }","after":"function setBaseTokenURI(string calldata uri_) external onlyOwner {\n        baseTokenURI = uri_;\n    }","contract":"nonFungibleFungiMintPass","time":0},{"type":"external-function ","before":"function setBaseTokenURI_EXT(string memory ext_) external onlyOwner {\n        baseTokenURI_EXT = ext_;\n    }","after":"function setBaseTokenURI_EXT(string calldata ext_) external onlyOwner {\n        baseTokenURI_EXT = ext_;\n    }","contract":"nonFungibleFungiMintPass","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxTokens = 10000;","after":"uint public constant maxTokens = 10000;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint public tokensReservedForWhitelist = 6695;","after":"uint public constant tokensReservedForWhitelist = 6695;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint public tokensReservedForDutchAuction = 3000;","after":"uint public constant tokensReservedForDutchAuction = 3000;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint public tokensReservedForReserved = 305;","after":"uint public constant tokensReservedForReserved = 305;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_1 = 0x9eEFBb6759E48aAafd8a49d825abFdD0B22d5aD1;","after":"address internal constant Shareholder_1 = 0x9eEFBb6759E48aAafd8a49d825abFdD0B22d5aD1;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_2 = 0x506aeaEb48cA2E4145910606a6Fe97f294477d1B;","after":"address internal constant Shareholder_2 = 0x506aeaEb48cA2E4145910606a6Fe97f294477d1B;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_3 = 0x2f3Db2A40C01d1fDd6Fd4ac6040684292B8807e8;","after":"address internal constant Shareholder_3 = 0x2f3Db2A40C01d1fDd6Fd4ac6040684292B8807e8;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_4 = 0x458E0c06506eabE9C21074A46E7fAb70672D6205;","after":"address internal constant Shareholder_4 = 0x458E0c06506eabE9C21074A46E7fAb70672D6205;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_5 = 0x2cF855E17bD28Bb34982Ca1E4371ef7d3E6817e1;","after":"address internal constant Shareholder_5 = 0x2cF855E17bD28Bb34982Ca1E4371ef7d3E6817e1;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_6 = 0xB4C84F2848ba2FF988f4Ca33A5b37f0FCC4a60c2;","after":"address internal constant Shareholder_6 = 0xB4C84F2848ba2FF988f4Ca33A5b37f0FCC4a60c2;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"address internal Shareholder_7 = 0x1eD3D146cb5945e1C894A70013Ed83F95693EA22;","after":"address internal constant Shareholder_7 = 0x1eD3D146cb5945e1C894A70013Ed83F95693EA22;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_1_Share = 7;","after":"uint internal constant Shareholder_1_Share = 7;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_2_Share = 7;","after":"uint internal constant Shareholder_2_Share = 7;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_3_Share = 21;","after":"uint internal constant Shareholder_3_Share = 21;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_4_Share = 35;","after":"uint internal constant Shareholder_4_Share = 35;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_5_Share = 12;","after":"uint internal constant Shareholder_5_Share = 12;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_6_Share = 10;","after":"uint internal constant Shareholder_6_Share = 10;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint internal Shareholder_7_Share = 8;","after":"uint internal constant Shareholder_7_Share = 8;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint public whiteListPrice = 0.08 ether;","after":"uint public constant whiteListPrice = 0.08 ether;","contract":"nonFungibleFungiMintPass","time":1},{"type":"constant-restrict-modification  ","before":"uint public dutchEndingPrice = 0.08 ether;","after":"uint public constant dutchEndingPrice = 0.08 ether;","contract":"nonFungibleFungiMintPass","time":1}]}
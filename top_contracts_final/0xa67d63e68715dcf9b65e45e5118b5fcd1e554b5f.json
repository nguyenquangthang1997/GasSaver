{"time":173,"results":[{"type":"state-data-arrangement ","before":"\nmapping(address => bool) public alreadyMinted;\nuint16 private reserveMicDropsId;\nuint16 private micDropsId;\nbytes32 public merkleRoot;\nbool public merkleEnabled = true;\nstring private baseURI;\nbool private saleStarted = true;\nuint256 public constant maxMint = 1893;","after":"mapping(address => bool) public alreadyMinted;\nbytes32 public merkleRoot;\nstring private baseURI;\nuint256 public constant maxMint = 1893;\nuint16 private reserveMicDropsId;\nuint16 private micDropsId;\nbool public merkleEnabled = true;\nbool private saleStarted = true;\n","contract":"PepsiMicDrop","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseUri) public onlyOwner {\n        baseURI = _baseUri;\n    }","after":"function setBaseURI(string calldata _baseUri) public onlyOwner {\n        baseURI = _baseUri;\n    }","contract":"PepsiMicDrop","time":0},{"type":"external-function ","before":"function mint(bytes32[] memory proof, bytes32 leaf) public returns (uint256) {\n        // merkle tree\n        if (merkleEnabled) {\n            require(keccak256(abi.encodePacked(msg.sender)) == leaf, \"This leaf does not belong to the sender\");\n            require(proof.verify(merkleRoot, leaf), \"You are not in the list\");\n        }\n\n        require(saleStarted == true, \"The sale is paused\");\n        require(msg.sender != address(0x0), \"Public address is not correct\");\n        require(alreadyMinted[msg.sender] == false, \"Address already used\");\n        require(micDropsId <= maxMint, \"Mint limit reached\");\n\n        _safeMint(msg.sender, micDropsId++);\n\n        alreadyMinted[msg.sender] = true;\n\n        return micDropsId;\n    }","after":"function mint(bytes32[] calldata proof, bytes32 leaf) public returns (uint256) {\n        // merkle tree\n        if (merkleEnabled) {\n            require(keccak256(abi.encodePacked(msg.sender)) == leaf, \"This leaf does not belong to the sender\");\n            require(proof.verify(merkleRoot, leaf), \"You are not in the list\");\n        }\n\n        require(saleStarted == true, \"The sale is paused\");\n        require(msg.sender != address(0x0), \"Public address is not correct\");\n        require(alreadyMinted[msg.sender] == false, \"Address already used\");\n        require(micDropsId <= maxMint, \"Mint limit reached\");\n\n        _safeMint(msg.sender, micDropsId++);\n\n        alreadyMinted[msg.sender] = true;\n\n        return micDropsId;\n    }","contract":"PepsiMicDrop","time":0}]}
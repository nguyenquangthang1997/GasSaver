{"time":142,"results":[{"type":"loop-duplication","before":"\nstart line 63 column 8, end line 66 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(sara, _tokenIds.current());\n        }\nstart line 67 column 8, end line 70 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(daniel, _tokenIds.current());\n        }","after":"// merge loop\n\nstart line 63 column 8, end line 66 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(sara, _tokenIds.current());\n        }\nstart line 67 column 8, end line 70 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(daniel, _tokenIds.current());\n        }","contract":"Glitches","time":0},{"type":"loop-duplication","before":"\nstart line 67 column 8, end line 70 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(daniel, _tokenIds.current());\n        }\nstart line 71 column 8, end line 74 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(maxwell, _tokenIds.current());\n        }","after":"// merge loop\n\nstart line 67 column 8, end line 70 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(daniel, _tokenIds.current());\n        }\nstart line 71 column 8, end line 74 column 8\nfor(uint256 i=0; i<10; i++) {\n            _tokenIds.increment();\n            _safeMint(maxwell, _tokenIds.current());\n        }","contract":"Glitches","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _baseUri) public onlyOwner {\n        require(!sealContract, \"Contract must not be sealed.\");\n        baseUri = _baseUri;\n    }","after":"function setBaseUri(string calldata _baseUri) public onlyOwner {\n        require(!sealContract, \"Contract must not be sealed.\");\n        baseUri = _baseUri;\n    }","contract":"Glitches","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory whitelist, uint256 total) public onlyOwner {\n        require(whitelisted.add(total) <= maxWhitelist, \"Would exceed total whitelist.\");\n        for(uint256 i=0; i<total; i++) {\n            if(!Whitelist[whitelist[i]]) {\n                Whitelist[whitelist[i]] = true;\n                whitelisted++;\n            }\n        }\n    }","after":"function addToWhitelist(address[] calldata whitelist, uint256 total) public onlyOwner {\n        require(whitelisted.add(total) <= maxWhitelist, \"Would exceed total whitelist.\");\n        for(uint256 i=0; i<total; i++) {\n            if(!Whitelist[whitelist[i]]) {\n                Whitelist[whitelist[i]] = true;\n                whitelisted++;\n            }\n        }\n    }","contract":"Glitches","time":0}]}
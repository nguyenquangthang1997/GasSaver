{"time":183,"results":[{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyRole(MINTER_ROLE) {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) public onlyRole(MINTER_ROLE) {\n        _baseTokenURI = baseURI;\n    }","contract":"CanvasArtistsMembershipV2","time":0},{"type":"external-function ","before":"function addToWhitelistArray(address[] memory _users, uint256 _dType ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        for (uint i = 0; i < _users.length; i++) {\n            _grantRole(WHITELIST_ROLE, _users[i]);\n            _discountType[_users[i]] = _dType;\n        }\n    }","after":"function addToWhitelistArray(address[] calldata _users, uint256 _dType ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        for (uint i = 0; i < _users.length; i++) {\n            _grantRole(WHITELIST_ROLE, _users[i]);\n            _discountType[_users[i]] = _dType;\n        }\n    }","contract":"CanvasArtistsMembershipV2","time":0},{"type":"external-function ","before":"function setTokenURI( uint256 tokenId, string memory _uri ) public onlyRole(MINTER_ROLE) {\n         _setTokenURI( tokenId, _uri );\n    }","after":"function setTokenURI( uint256 tokenId, string calldata _uri ) public onlyRole(MINTER_ROLE) {\n         _setTokenURI( tokenId, _uri );\n    }","contract":"CanvasArtistsMembershipV2","time":0},{"type":"external-function ","before":"function mintReserve( uint _mType, address _to, string memory _uri ) public onlyRole(MINTER_ROLE) {\n\n        // Mint reserve supply\n        uint quantity = _reservedSupply[_mType];\n        require( quantity > 0, \"M10: already minted\" );               \n\n        _mintTokens( _mType, quantity, _to, _uri, true );\n\n        // erase the reserve\n        _reservedSupply[_mType] = 0;\n    }","after":"function mintReserve( uint _mType, address _to, string calldata _uri ) public onlyRole(MINTER_ROLE) {\n\n        // Mint reserve supply\n        uint quantity = _reservedSupply[_mType];\n        require( quantity > 0, \"M10: already minted\" );               \n\n        _mintTokens( _mType, quantity, _to, _uri, true );\n\n        // erase the reserve\n        _reservedSupply[_mType] = 0;\n    }","contract":"CanvasArtistsMembershipV2","time":0},{"type":"external-function ","before":"function airdropMembership( uint _mType, uint _quantity, address _to, string memory _uri ) public onlyRole(MINTER_ROLE) {\n\n        // is the membership type available for sale\n        require( isAvailableForSale(_mType), \"M0: not for sale\" );\n\n        // trying to mint zero tokens\n        require( _quantity != 0, \"M3: zero tokens\" );\n\n        // make sure not trying to mint too many\n        require( _quantity <= howManyCanMint(_to), \"M4: too many\" );\n\n        // is there enough supply available\n        require( _forSaleSupply[_mType] >= _quantity, \"M5: mint fewer\" );\n\n        // Mint it! \n        _mintTokens( _mType, _quantity, _to, _uri, false );\n    }","after":"function airdropMembership( uint _mType, uint _quantity, address _to, string calldata _uri ) public onlyRole(MINTER_ROLE) {\n\n        // is the membership type available for sale\n        require( isAvailableForSale(_mType), \"M0: not for sale\" );\n\n        // trying to mint zero tokens\n        require( _quantity != 0, \"M3: zero tokens\" );\n\n        // make sure not trying to mint too many\n        require( _quantity <= howManyCanMint(_to), \"M4: too many\" );\n\n        // is there enough supply available\n        require( _forSaleSupply[_mType] >= _quantity, \"M5: mint fewer\" );\n\n        // Mint it! \n        _mintTokens( _mType, _quantity, _to, _uri, false );\n    }","contract":"CanvasArtistsMembershipV2","time":0},{"type":"external-function ","before":"function mintMembership( uint _mType, uint _quantity, address _to, string memory _uri ) public payable {\n\n        // is the membership type available for sale\n        require( isAvailableForSale(_mType), \"M0: not for sale\" );\n\n        // is presale or public sale open\n        require( isPresaleOpen() || isPublicSaleOpen(), \"M1: not available for sale\" );\n\n        // if premint is on make sure the address is allowed to buy\n        bool onWhitelist = isOnWhitelist(_to);\n        uint hasDiscount =  _discountType[_to];\n\n        if ( _premintIsOn ) {\n            require( onWhitelist, \"M2: not whitelist\" );\n        }\n\n        // trying to mint zero tokens\n        require( _quantity != 0, \"M3: zero tokens\" );\n\n        // make sure not trying to mint too many\n        require( _quantity <= howManyCanMint(_to), \"M4: too many\" );\n\n        // is there enough supply available\n        require( _forSaleSupply[_mType] >= _quantity, \"M5: mint fewer\" );\n\n        // did they give us enough money \n        //uint cost = _quantity * getPriceForWallet( _mType, _to );\n        uint cost = _quantity * getPriceForWallet( _mType, _to );\n        require( msg.value >= cost, \"M6: not enough ETH\" );\n\n        // Mint it! \n        _mintTokens( _mType, _quantity, _to, _uri, false );\n\n        // if you had a discount, it's spent\n        if ( hasDiscount != 0 ) {\n           _discountType[_to] = 0; \n        }\n    }","after":"function mintMembership( uint _mType, uint _quantity, address _to, string calldata _uri ) public payable {\n\n        // is the membership type available for sale\n        require( isAvailableForSale(_mType), \"M0: not for sale\" );\n\n        // is presale or public sale open\n        require( isPresaleOpen() || isPublicSaleOpen(), \"M1: not available for sale\" );\n\n        // if premint is on make sure the address is allowed to buy\n        bool onWhitelist = isOnWhitelist(_to);\n        uint hasDiscount =  _discountType[_to];\n\n        if ( _premintIsOn ) {\n            require( onWhitelist, \"M2: not whitelist\" );\n        }\n\n        // trying to mint zero tokens\n        require( _quantity != 0, \"M3: zero tokens\" );\n\n        // make sure not trying to mint too many\n        require( _quantity <= howManyCanMint(_to), \"M4: too many\" );\n\n        // is there enough supply available\n        require( _forSaleSupply[_mType] >= _quantity, \"M5: mint fewer\" );\n\n        // did they give us enough money \n        //uint cost = _quantity * getPriceForWallet( _mType, _to );\n        uint cost = _quantity * getPriceForWallet( _mType, _to );\n        require( msg.value >= cost, \"M6: not enough ETH\" );\n\n        // Mint it! \n        _mintTokens( _mType, _quantity, _to, _uri, false );\n\n        // if you had a discount, it's spent\n        if ( hasDiscount != 0 ) {\n           _discountType[_to] = 0; \n        }\n    }","contract":"CanvasArtistsMembershipV2","time":0}]}
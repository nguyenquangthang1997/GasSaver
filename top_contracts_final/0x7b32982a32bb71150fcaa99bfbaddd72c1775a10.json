{"time":186,"results":[{"type":"external-function ","before":"function claimUltraRewards(uint256[] memory tokenIDs) public {\n        require(uDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(uContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkUltraDailyReward(id);\n            if(reward > 0){\n                uLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","after":"function claimUltraRewards(uint256[] calldata tokenIDs) public {\n        require(uDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(uContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkUltraDailyReward(id);\n            if(reward > 0){\n                uLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","contract":"HASHPOWER","time":0},{"type":"external-function ","before":"function claimAlphaRewards(uint256[] memory tokenIDs) public {\n        require(aDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(aContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkAlphaDailyReward(id);\n            if(reward > 0){\n                aLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","after":"function claimAlphaRewards(uint256[] calldata tokenIDs) public {\n        require(aDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(aContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkAlphaDailyReward(id);\n            if(reward > 0){\n                aLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","contract":"HASHPOWER","time":0},{"type":"external-function ","before":"function claimBetaRewards(uint256[] memory tokenIDs) public {\n        require(bDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(bContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkBetaDailyReward(id);\n            if(reward > 0){\n                bLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","after":"function claimBetaRewards(uint256[] calldata tokenIDs) public {\n        require(bDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(bContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkBetaDailyReward(id);\n            if(reward > 0){\n                bLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","contract":"HASHPOWER","time":0},{"type":"external-function ","before":"function claimGammaRewards(uint256[] memory tokenIDs) public {\n        require(cDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(cContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkGammaDailyReward(id);\n            if(reward > 0){\n                cLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","after":"function claimGammaRewards(uint256[] calldata tokenIDs) public {\n        require(cDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(cContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkGammaDailyReward(id);\n            if(reward > 0){\n                cLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","contract":"HASHPOWER","time":0},{"type":"external-function ","before":"function claimDeltaRewards(uint256[] memory tokenIDs) public {\n        require(dDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(dContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkDeltaDailyReward(id);\n            if(reward > 0){\n                dLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","after":"function claimDeltaRewards(uint256[] calldata tokenIDs) public {\n        require(dDailyReward,\"Not Active\");\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l = tokenIDs.length;\n        uint256 timestamp = block.timestamp;\n\n        for (uint256 i = 0; i < l; i++) {\n            uint256 id = tokenIDs[i];\n            require(dContract.ownerOf(id) == caller, \"Not Owner\");\n            reward = checkDeltaDailyReward(id);\n            if(reward > 0){\n                dLastReward[id] = timestamp;\n                total += reward;\n            }\n        }\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n    }","contract":"HASHPOWER","time":0},{"type":"external-function ","before":"function claimAllRewards(uint256[] memory utokenIDs, uint256[] memory atokenIDs, uint256[] memory btokenIDs, uint256[] memory ctokenIDs, uint256[] memory dtokenIDs) public {\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l;\n        uint256 id;\n        uint256 timestamp = block.timestamp;\n\n        if (uDailyReward && utokenIDs.length > 0){\n            l = utokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = utokenIDs[i];\n                require(uContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkUltraDailyReward(id);\n                if(reward > 0){\n                    uLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (aDailyReward && atokenIDs.length > 0){\n            l = atokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = atokenIDs[i];\n                require(aContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkAlphaDailyReward(id);\n                if(reward > 0){\n                    aLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (bDailyReward && btokenIDs.length > 0){\n            l = btokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = btokenIDs[i];\n                require(bContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkBetaDailyReward(id);\n                if(reward > 0){\n                    bLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (cDailyReward && ctokenIDs.length > 0){\n            l = ctokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = ctokenIDs[i];\n                require(cContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkGammaDailyReward(id);\n                if(reward > 0){\n                    cLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (dDailyReward && dtokenIDs.length > 0){\n            l = dtokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = dtokenIDs[i];\n                require(dContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkDeltaDailyReward(id);\n                if(reward > 0){\n                    dLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n\n    }","after":"function claimAllRewards(uint256[] calldata utokenIDs, uint256[] calldata atokenIDs, uint256[] calldata btokenIDs, uint256[] calldata ctokenIDs, uint256[] calldata dtokenIDs) public {\n        address caller = _msgSender();\n        require (caller == tx.origin, \"No Smart Contracts\");\n        uint256 total;\n        uint256 reward;\n        uint256 l;\n        uint256 id;\n        uint256 timestamp = block.timestamp;\n\n        if (uDailyReward && utokenIDs.length > 0){\n            l = utokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = utokenIDs[i];\n                require(uContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkUltraDailyReward(id);\n                if(reward > 0){\n                    uLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (aDailyReward && atokenIDs.length > 0){\n            l = atokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = atokenIDs[i];\n                require(aContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkAlphaDailyReward(id);\n                if(reward > 0){\n                    aLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (bDailyReward && btokenIDs.length > 0){\n            l = btokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = btokenIDs[i];\n                require(bContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkBetaDailyReward(id);\n                if(reward > 0){\n                    bLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (cDailyReward && ctokenIDs.length > 0){\n            l = ctokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = ctokenIDs[i];\n                require(cContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkGammaDailyReward(id);\n                if(reward > 0){\n                    cLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        if (dDailyReward && dtokenIDs.length > 0){\n            l = dtokenIDs.length;\n            for (uint256 i = 0; i < l; i++) {\n                id = dtokenIDs[i];\n                require(dContract.ownerOf(id) == caller, \"Not Owner\");\n                reward = checkDeltaDailyReward(id);\n                if(reward > 0){\n                    dLastReward[id] = timestamp;\n                    total += reward;\n                }\n            }\n        }\n\n        require(total > 0, \"None to claim\");\n        _mint(caller, total);\n\n    }","contract":"HASHPOWER","time":1},{"type":"external-function ","before":"function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n        uint256 r = receivers.length;\n        require(r != 0, \"Zero length passed\");\n        require(r == amounts.length, \"Different Lengths\");\n        for (uint256 i = 0; i < r; i++) {\n            transfer(receivers[i], amounts[i]);\n        }\n    }","after":"function multiTransfer(address[] calldata receivers, uint256[] calldata amounts) public {\n        uint256 r = receivers.length;\n        require(r != 0, \"Zero length passed\");\n        require(r == amounts.length, \"Different Lengths\");\n        for (uint256 i = 0; i < r; i++) {\n            transfer(receivers[i], amounts[i]);\n        }\n    }","contract":"HASHPOWER","time":0}]}
{"time":314,"results":[{"type":"external-function ","before":"function userData(\n        uint256[] memory _depositId,\n        uint256[] memory _amount,\n        address[] memory _user\n    ) external onlyAdmin {\n        require(\n            _amount.length == _depositId.length &&\n                _depositId.length == _user.length,\n            \"invalid number of arguments\"\n        );\n        for (uint256 i; i < _depositId.length; i++) {\n            totalStaked = totalStaked + (_amount[i]);\n            currentStaked = currentStaked + (_amount[i]);\n \n            if (_depositId[i] == 1) {\n                PlanI[_user[i]].Claimable = calcRewards(\n                    _user[i],\n                    _depositId[i]\n                );\n                PlanI[_user[i]].TokenPerDay =\n                    PlanI[_user[i]].TokenPerDay +\n                    (\n                        CalculatePerDay(\n                            (_amount[i] * (StakeI.StakePercent)) /\n                                (percentDivider),\n                            StakeI.StakePeriod\n                        )\n                    );\n                PlanI[_user[i]].MaxClaimable =\n                    PlanI[_user[i]].MaxClaimable +\n                    ((_amount[i] * (StakeI.StakePercent)) / (percentDivider));\n                PlanI[_user[i]].LastClaimTime = block.timestamp;\n                PlanI[_user[i]].StakeTime = block.timestamp;\n                PlanI[_user[i]].UnStakeTime =\n                    block.timestamp +\n                    (StakeI.StakePeriod);\n                PlanI[_user[i]].Amount = PlanI[_user[i]].Amount + (_amount[i]);\n            } else if (_depositId[i] == 2) {\n                PlanII[_user[i]].Claimable = calcRewards(\n                    _user[i],\n                    _depositId[i]\n                );\n                PlanII[_user[i]].TokenPerDay =\n                    PlanII[_user[i]].TokenPerDay +\n                    (\n                        CalculatePerDay(\n                            (_amount[i] * (StakeII.StakePercent)) /\n                                (percentDivider),\n                            StakeII.StakePeriod\n                        )\n                    );\n                PlanII[_user[i]].MaxClaimable =\n                    PlanII[_user[i]].MaxClaimable +\n                    ((_amount[i] * (StakeII.StakePercent)) / (percentDivider));\n                PlanII[_user[i]].LastClaimTime = block.timestamp;\n                PlanII[_user[i]].StakeTime = block.timestamp;\n                PlanII[_user[i]].UnStakeTime =\n                    block.timestamp +\n                    (StakeII.StakePeriod);\n                PlanII[_user[i]].Amount =\n                    PlanII[_user[i]].Amount +\n                    (_amount[i]);\n            } else if (_depositId[i] == 3) {\n                PlanIII[_user[i]].Claimable = calcRewards(\n                    _user[i],\n                    _depositId[i]\n                );\n                PlanIII[_user[i]].TokenPerDay =\n                    PlanIII[_user[i]].TokenPerDay +\n                    (\n                        CalculatePerDay(\n                            (_amount[i] * (StakeIII.StakePercent)) /\n                                (percentDivider),\n                            StakeIII.StakePeriod\n                        )\n                    );\n                PlanIII[_user[i]].MaxClaimable =\n                    PlanIII[_user[i]].MaxClaimable +\n                    ((_amount[i] * (StakeIII.StakePercent)) / (percentDivider));\n                PlanIII[_user[i]].LastClaimTime = block.timestamp;\n                PlanIII[_user[i]].StakeTime = block.timestamp;\n                PlanIII[_user[i]].UnStakeTime =\n                    block.timestamp +\n                    (StakeIII.StakePeriod);\n                PlanIII[_user[i]].Amount =\n                    PlanIII[_user[i]].Amount +\n                    (_amount[i]);\n            }\n        }\n    }","after":"function userData(\n        uint256[] calldata _depositId,\n        uint256[] calldata _amount,\n        address[] calldata _user\n    ) external onlyAdmin {\n        require(\n            _amount.length == _depositId.length &&\n                _depositId.length == _user.length,\n            \"invalid number of arguments\"\n        );\n        for (uint256 i; i < _depositId.length; i++) {\n            totalStaked = totalStaked + (_amount[i]);\n            currentStaked = currentStaked + (_amount[i]);\n \n            if (_depositId[i] == 1) {\n                PlanI[_user[i]].Claimable = calcRewards(\n                    _user[i],\n                    _depositId[i]\n                );\n                PlanI[_user[i]].TokenPerDay =\n                    PlanI[_user[i]].TokenPerDay +\n                    (\n                        CalculatePerDay(\n                            (_amount[i] * (StakeI.StakePercent)) /\n                                (percentDivider),\n                            StakeI.StakePeriod\n                        )\n                    );\n                PlanI[_user[i]].MaxClaimable =\n                    PlanI[_user[i]].MaxClaimable +\n                    ((_amount[i] * (StakeI.StakePercent)) / (percentDivider));\n                PlanI[_user[i]].LastClaimTime = block.timestamp;\n                PlanI[_user[i]].StakeTime = block.timestamp;\n                PlanI[_user[i]].UnStakeTime =\n                    block.timestamp +\n                    (StakeI.StakePeriod);\n                PlanI[_user[i]].Amount = PlanI[_user[i]].Amount + (_amount[i]);\n            } else if (_depositId[i] == 2) {\n                PlanII[_user[i]].Claimable = calcRewards(\n                    _user[i],\n                    _depositId[i]\n                );\n                PlanII[_user[i]].TokenPerDay =\n                    PlanII[_user[i]].TokenPerDay +\n                    (\n                        CalculatePerDay(\n                            (_amount[i] * (StakeII.StakePercent)) /\n                                (percentDivider),\n                            StakeII.StakePeriod\n                        )\n                    );\n                PlanII[_user[i]].MaxClaimable =\n                    PlanII[_user[i]].MaxClaimable +\n                    ((_amount[i] * (StakeII.StakePercent)) / (percentDivider));\n                PlanII[_user[i]].LastClaimTime = block.timestamp;\n                PlanII[_user[i]].StakeTime = block.timestamp;\n                PlanII[_user[i]].UnStakeTime =\n                    block.timestamp +\n                    (StakeII.StakePeriod);\n                PlanII[_user[i]].Amount =\n                    PlanII[_user[i]].Amount +\n                    (_amount[i]);\n            } else if (_depositId[i] == 3) {\n                PlanIII[_user[i]].Claimable = calcRewards(\n                    _user[i],\n                    _depositId[i]\n                );\n                PlanIII[_user[i]].TokenPerDay =\n                    PlanIII[_user[i]].TokenPerDay +\n                    (\n                        CalculatePerDay(\n                            (_amount[i] * (StakeIII.StakePercent)) /\n                                (percentDivider),\n                            StakeIII.StakePeriod\n                        )\n                    );\n                PlanIII[_user[i]].MaxClaimable =\n                    PlanIII[_user[i]].MaxClaimable +\n                    ((_amount[i] * (StakeIII.StakePercent)) / (percentDivider));\n                PlanIII[_user[i]].LastClaimTime = block.timestamp;\n                PlanIII[_user[i]].StakeTime = block.timestamp;\n                PlanIII[_user[i]].UnStakeTime =\n                    block.timestamp +\n                    (StakeIII.StakePeriod);\n                PlanIII[_user[i]].Amount =\n                    PlanIII[_user[i]].Amount +\n                    (_amount[i]);\n            }\n        }\n    }","contract":"LifeStake","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public TimeStep = 1 days;","after":"uint256 public constant TimeStep = 1 days;","contract":"LifeStake","time":1}]}
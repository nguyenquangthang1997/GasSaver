{"time":185,"results":[{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        AW_PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        AW_PROVENANCE = provenanceHash;\n    }","contract":"Aworld","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }","contract":"Aworld","time":0},{"type":"external-function ","before":"function airdropBatchCryptid(address[] memory receivers, uint256 amount) external onlyOwner {\n        require(\n            cryptidtokenIds.current().add(amount.mul(receivers.length)) <= MAX_AWS,\n            'Airdrop amount will exceed max supply of Aworld cryptids'\n        );\n        for (uint256 i = 0; i < receivers.length; i++) {\n            airdropCryptid(receivers[i], amount);\n        }\n    }","after":"function airdropBatchCryptid(address[] calldata receivers, uint256 amount) external onlyOwner {\n        require(\n            cryptidtokenIds.current().add(amount.mul(receivers.length)) <= MAX_AWS,\n            'Airdrop amount will exceed max supply of Aworld cryptids'\n        );\n        for (uint256 i = 0; i < receivers.length; i++) {\n            airdropCryptid(receivers[i], amount);\n        }\n    }","contract":"Aworld","time":0}]}
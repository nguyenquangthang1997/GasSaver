{"time":175,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public startingMintPrice = 1000000000000000;\nuint256 public GAME_END_TIMESTAMP;\nbool gameHasEnded = false;\nuint256 public endingPotBalance;\nuint256 public endingClaimablePotBalance;\nuint256 public adjustedTokenTotal;\nbool ownerWithdraw = false;","after":"uint256 public startingMintPrice = 1000000000000000;\nuint256 public GAME_END_TIMESTAMP;\nuint256 public endingPotBalance;\nuint256 public endingClaimablePotBalance;\nuint256 public adjustedTokenTotal;\nbool gameHasEnded = false;\nbool ownerWithdraw = false;\n","contract":"CircleGame","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) public onlyOwner {\r\n        _setURI(newuri);\r\n    }","after":"function setURI(string calldata newuri) public onlyOwner {\r\n        _setURI(newuri);\r\n    }","contract":"CircleGame","time":0},{"type":"external-function ","before":"function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _mintBatch(to, ids, amounts, data);\r\n    }","after":"function mintBatch(address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _mintBatch(to, ids, amounts, data);\r\n    }","contract":"CircleGame","time":0},{"type":"external-function ","before":"function claimStake(uint[] memory numberOfTokens) public  {\r\n        require(gameHasEnded == true, \"Game hasn't ended yet\");\r\n        require(numberOfTokens.length == 6, \"numberOfTokens length must == 6\");\r\n        \r\n        //Adjust tokens by tier multipliers, burn tokens, and payout reward\r\n        //Tier Multipliers: 1x = Orange, 1.1x = Green, 1.2x = Red, 1.3x = Blue, 1.4x = Purple, 1.5x = Pink\r\n        uint playerAdjustedTokens = 0;\r\n        for (uint i = 0; i < 6; i++) {\r\n\r\n            playerAdjustedTokens = playerAdjustedTokens.add(numberOfTokens[i].mul(5**i).mul(10 + i).div(10));\r\n            _burn(msg.sender, i, numberOfTokens[i]);\r\n        }\r\n        \r\n        uint reward = playerAdjustedTokens.mul(endingClaimablePotBalance).div(adjustedTokenTotal);\r\n        \r\n        /* Burn tokens and payout reward */\r\n        payable(msg.sender).transfer(reward);\r\n    }","after":"function claimStake(uint[] calldata numberOfTokens) public  {\r\n        require(gameHasEnded == true, \"Game hasn't ended yet\");\r\n        require(numberOfTokens.length == 6, \"numberOfTokens length must == 6\");\r\n        \r\n        //Adjust tokens by tier multipliers, burn tokens, and payout reward\r\n        //Tier Multipliers: 1x = Orange, 1.1x = Green, 1.2x = Red, 1.3x = Blue, 1.4x = Purple, 1.5x = Pink\r\n        uint playerAdjustedTokens = 0;\r\n        for (uint i = 0; i < 6; i++) {\r\n\r\n            playerAdjustedTokens = playerAdjustedTokens.add(numberOfTokens[i].mul(5**i).mul(10 + i).div(10));\r\n            _burn(msg.sender, i, numberOfTokens[i]);\r\n        }\r\n        \r\n        uint reward = playerAdjustedTokens.mul(endingClaimablePotBalance).div(adjustedTokenTotal);\r\n        \r\n        /* Burn tokens and payout reward */\r\n        payable(msg.sender).transfer(reward);\r\n    }","contract":"CircleGame","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"CircleGame","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"CircleGame","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"CircleGame","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public GAME_END_TIMESTAMP;","after":"uint256 public immutable GAME_END_TIMESTAMP;","contract":"CircleGame","time":0}]}
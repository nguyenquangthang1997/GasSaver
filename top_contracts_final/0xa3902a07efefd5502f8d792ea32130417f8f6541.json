{"time":185,"results":[{"type":"immutable-restrict-modification ","before":"address public owner;","after":"address public immutable owner;","contract":"Migrations","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _uri) external onlyOwner {\n        baseTokenURI = _uri;\n    }","after":"function setBaseUri(string calldata _uri) external onlyOwner {\n        baseTokenURI = _uri;\n    }","contract":"SpaceAliens","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"SpaceAliens","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public special = 4;","after":"uint256 public constant special = 4;","contract":"SpaceAliens","time":1},{"type":"constant-restrict-modification  ","before":"uint256 Group1_MAX_SUPPLY =  1000;","after":"uint256 constant Group1_MAX_SUPPLY =  1000;","contract":"SpaceAliens","time":1},{"type":"constant-restrict-modification  ","before":"string public waiting_special_url = \"https://gateway.pinata.cloud/ipfs/QmeeVrEW44rvVhhzUTJkPEv95h5sMArYRm59qxP4yxSEQA\";","after":"string public constant waiting_special_url = \"https://gateway.pinata.cloud/ipfs/QmeeVrEW44rvVhhzUTJkPEv95h5sMArYRm59qxP4yxSEQA\";","contract":"SpaceAliens","time":1},{"type":"constant-restrict-modification  ","before":"string public waiting_url = \"https://gateway.pinata.cloud/ipfs/QmS6wFpvTh8mMV6tmatjssz5ysp7rqCJ52ahxdmrzWENS6\";","after":"string public constant waiting_url = \"https://gateway.pinata.cloud/ipfs/QmS6wFpvTh8mMV6tmatjssz5ysp7rqCJ52ahxdmrzWENS6\";","contract":"SpaceAliens","time":1},{"type":"constant-restrict-modification  ","before":"address SB_address = 0x672C1f1C978b8FD1E9AE18e25D0E55176824989c;","after":"address constant SB_address = 0x672C1f1C978b8FD1E9AE18e25D0E55176824989c;","contract":"SpaceAliens","time":1}]}
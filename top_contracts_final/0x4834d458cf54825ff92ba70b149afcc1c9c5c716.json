{"time":158,"results":[{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"Nft","time":0},{"type":"immutable-restrict-modification ","before":"address public revealer;","after":"address public immutable revealer;","contract":"Nft","time":0},{"type":"immutable-restrict-modification ","before":"address public proxyRegistryAddress;","after":"address public immutable proxyRegistryAddress;","contract":"Nft","time":0},{"type":"constant-restrict-modification  ","before":"uint256 NFT_SUPPLY = 10_000;","after":"uint256 constant NFT_SUPPLY = 10_000;","contract":"Factory","time":0},{"type":"constant-restrict-modification  ","before":"uint256 NUM_OPTIONS = 3;","after":"uint256 constant NUM_OPTIONS = 3;","contract":"Factory","time":0},{"type":"constant-restrict-modification  ","before":"uint256 SINGLE_CREATURE_OPTION = 0;","after":"uint256 constant SINGLE_CREATURE_OPTION = 0;","contract":"Factory","time":0},{"type":"constant-restrict-modification  ","before":"uint256 MULTIPLE_CREATURE_OPTION_1 = 1;","after":"uint256 constant MULTIPLE_CREATURE_OPTION_1 = 1;","contract":"Factory","time":0},{"type":"constant-restrict-modification  ","before":"uint256 MULTIPLE_CREATURE_OPTION_2 = 2;","after":"uint256 constant MULTIPLE_CREATURE_OPTION_2 = 2;","contract":"Factory","time":0},{"type":"constant-restrict-modification  ","before":"uint256 NUM_CREATURES_IN_MULTIPLE_CREATURE_OPTION_1 = 5;","after":"uint256 constant NUM_CREATURES_IN_MULTIPLE_CREATURE_OPTION_1 = 5;","contract":"Factory","time":0},{"type":"constant-restrict-modification  ","before":"uint256 NUM_CREATURES_IN_MULTIPLE_CREATURE_OPTION_2 = 10;","after":"uint256 constant NUM_CREATURES_IN_MULTIPLE_CREATURE_OPTION_2 = 10;","contract":"Factory","time":0}]}
{"time":171,"results":[{"type":"external-function ","before":" function privateBuy(uint256 tokenQuantity, bytes32 hash, bytes memory signature) external payable {\n        require(!saleLive && presaleLive, \"Presale Inactive\");\n        require(matchAddressSigner(hash, signature), \"Contract Disabled for Presale\");\n        require(tokenQuantity <= PRIV_PER_MINT, \"Exceed Max\");\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= PRIV_PER_MINT, \"Holding Max Allowed\");\n        require(CBC_PRICE * tokenQuantity <= msg.value, \"More ETH\");\n        require(totalSupply() + tokenQuantity <= CBC_PRIVATE, \"Exceed Supply\");\n\n        for (uint256 i = 0; i < tokenQuantity; i++) {\n            _safeMint(msg.sender);\n        }\n\n        presalerListPurchases[msg.sender] += tokenQuantity;\n    ","after":" function privateBuy(uint256 tokenQuantity, bytes32 hash, bytes calldata signature) external payable {\n        require(!saleLive && presaleLive, \"Presale Inactive\");\n        require(matchAddressSigner(hash, signature), \"Contract Disabled for Presale\");\n        require(tokenQuantity <= PRIV_PER_MINT, \"Exceed Max\");\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= PRIV_PER_MINT, \"Holding Max Allowed\");\n        require(CBC_PRICE * tokenQuantity <= msg.value, \"More ETH\");\n        require(totalSupply() + tokenQuantity <= CBC_PRIVATE, \"Exceed Supply\");\n\n        for (uint256 i = 0; i < tokenQuantity; i++) {\n            _safeMint(msg.sender);\n        }\n\n        presalerListPurchases[msg.sender] += tokenQuantity;\n    ","contract":"CatBricksClubhouse","time":0},{"type":"external-function ","before":"    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n ","after":"    function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n ","contract":"CatBricksClubhouse","time":0},{"type":"constant-restrict-modification  ","before":" address private _signer = 0xb82209b16Ab5c56716f096dc1a51B95d424f755a","after":" address private constant _signer = 0xb82209b16Ab5c56716f096dc1a51B95d424f755a","contract":"CatBricksClubhouse","time":0}]}
{"time":74,"results":[{"type":"external-function ","before":"function buyForVIP(uint256 _amount, bytes memory _signature) external payable\n    {\n        if (msg.sender != owner()) {\n            require(vipSaleStartTimestamp <= block.timestamp, \"sale not started\");\n        }\n        require(block.timestamp < wlSaleStartTimestamp, \"sale ended\");\n\n        require(_amount <= MAX_UNITS_PER_TRANSACTION, \"the amount is out of range\");\n\n        require(msg.value == _amount * vipPrice, \"invalid value\");\n\n        require(_verifyVIP(msg.sender, _signature), \"invalid signature\");\n        \n        _safeTransferETH(incomeRecipientWallet, address(this).balance);\n\n        (uint256 fromId, uint256 toId) = token.mintBatch(msg.sender, _amount);\n        royaltyDistributor.setRoyaltyKindForTokenBatch(fromId, toId, 2);\n    }","after":"function buyForVIP(uint256 _amount, bytes calldata _signature) external payable\n    {\n        if (msg.sender != owner()) {\n            require(vipSaleStartTimestamp <= block.timestamp, \"sale not started\");\n        }\n        require(block.timestamp < wlSaleStartTimestamp, \"sale ended\");\n\n        require(_amount <= MAX_UNITS_PER_TRANSACTION, \"the amount is out of range\");\n\n        require(msg.value == _amount * vipPrice, \"invalid value\");\n\n        require(_verifyVIP(msg.sender, _signature), \"invalid signature\");\n        \n        _safeTransferETH(incomeRecipientWallet, address(this).balance);\n\n        (uint256 fromId, uint256 toId) = token.mintBatch(msg.sender, _amount);\n        royaltyDistributor.setRoyaltyKindForTokenBatch(fromId, toId, 2);\n    }","contract":"NFTSale","time":0},{"type":"external-function ","before":"function buyForWL(uint256 _amount, bytes memory _signature) external payable\n    {\n        require(wlSaleStartTimestamp <= block.timestamp, \"sale not started\");\n        require(block.timestamp < publicSaleStartTimestamp, \"sale ended\");\n\n        require(_amount <= MAX_UNITS_PER_TRANSACTION, \"the amount is out of range\");\n\n        require(msg.value == _amount * wlPrice, \"invalid value\");\n\n        require(_verifyWL(msg.sender, _signature), \"invalid signature\");\n\n        _safeTransferETH(incomeRecipientWallet, address(this).balance);\n\n        (uint256 fromId, uint256 toId) = token.mintBatch(msg.sender, _amount);\n        royaltyDistributor.setRoyaltyKindForTokenBatch(fromId, toId, 1);\n    }","after":"function buyForWL(uint256 _amount, bytes calldata _signature) external payable\n    {\n        require(wlSaleStartTimestamp <= block.timestamp, \"sale not started\");\n        require(block.timestamp < publicSaleStartTimestamp, \"sale ended\");\n\n        require(_amount <= MAX_UNITS_PER_TRANSACTION, \"the amount is out of range\");\n\n        require(msg.value == _amount * wlPrice, \"invalid value\");\n\n        require(_verifyWL(msg.sender, _signature), \"invalid signature\");\n\n        _safeTransferETH(incomeRecipientWallet, address(this).balance);\n\n        (uint256 fromId, uint256 toId) = token.mintBatch(msg.sender, _amount);\n        royaltyDistributor.setRoyaltyKindForTokenBatch(fromId, toId, 1);\n    }","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public vipSaleStartTimestamp;","after":"uint256 public immutable vipSaleStartTimestamp;","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public wlSaleStartTimestamp;","after":"uint256 public immutable wlSaleStartTimestamp;","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public publicSaleStartTimestamp;","after":"uint256 public immutable publicSaleStartTimestamp;","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public vipPrice;","after":"uint256 public immutable vipPrice;","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public wlPrice;","after":"uint256 public immutable wlPrice;","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public publicPrice;","after":"uint256 public immutable publicPrice;","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"address public signaturePublicKey;","after":"address public immutable signaturePublicKey;","contract":"NFTSale","time":0},{"type":"immutable-restrict-modification ","before":"address public incomeRecipientWallet;","after":"address public immutable incomeRecipientWallet;","contract":"NFTSale","time":0}]}
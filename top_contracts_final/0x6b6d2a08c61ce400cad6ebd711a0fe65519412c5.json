{"time":151,"results":[{"type":"state-data-arrangement ","before":"\nageHash(bytes32 hash) internal pure retu\nbytes32) {\n        // 32 is the length in b\nof hash,\n        // enforced by \nype signature above\n        return keccak2\ni.encodePacked(\"\\x19Ethereum Signed Message\n\", hash));\n    }\n\n    /**\n     * @d\nd Typed Data, created from a\n     * \ninSeparator` and a `structHash`. This p\nes hash corresponding\n     * \nhereum.org/EIPS/eip-712\n_signTypedData`]\n     * JSON\ntion toTypedDataHash(bytes32 domainSeparator, byt\n     return keccak256(abi.enco","after":"ageHash(bytes32 hash) internal pure retu\nbytes32) {\n        // 32 is the length in b\nof hash,\n        // enforced by \nype signature above\n        return keccak2\ni.encodePacked(\"\\x19Ethereum Signed Message\n\", hash));\n    }\n\n    /**\n     * @d\nhereum.org/EIPS/eip-712\n_signTypedData`]\n     * JSON\ntion toTypedDataHash(bytes32 domainSeparator, byt\n     return keccak256(abi.enco\nd Typed Data, created from a\n     * \ninSeparator` and a `structHash`. This p\nes hash corresponding\n     * \n","contract":"PangaensTheGenesis","time":0},{"type":"external-function ","before":"ring memory _symbol,\n        string memory _initBaseURI,\n        string memory _initPreRevealURI,\n        address _initPresaleSigner\n    ) ERC721(_name, _symbol) {\n        setBaseURI(_initBaseURI);\n        setPreRevealURI(_initPreRevealURI);\n        setPresaleSigner(_initPresaleSigner);\n    }\n  \n    /**\n     * @dev Public sale mint\n     * \n     * @param _mintAmount Number of tokens to mint.\n     */\n    function mintPublicSale(\n        uint256 _mintAmount\n    ) external nonReentrant payable {\n        require(isPublicSaleActive, \"Sale is not active\");\n        require(_mintAmount > 0, \"Must mint at least 1 NFT\");\n        require(_mintAmount <= publicSaleMaxMintPerTx, \"Mint count exceeds limit for public sale\");\n        require((publicSaleCost * _mintAmount) <= msg.value, \"ETH sent does not match required payment\");\n        \n        // Mint\n        _mintToUser(msg.sender, _mintAmount, maxSupply);\n    }\n    \n    /**\n     * @dev Presale mint\n     * \n     * @param _hashMessage Must be a valid hash message.\n     * @param _signature Must be a valid signature.\n     * @param _mintAmount Num","after":"ring calldata _symbol,\n        string memory _initBaseURI,\n        string memory _initPreRevealURI,\n        address _initPresaleSigner\n    ) ERC721(_name, _symbol) {\n        setBaseURI(_initBaseURI);\n        setPreRevealURI(_initPreRevealURI);\n        setPresaleSigner(_initPresaleSigner);\n    }\n  \n    /**\n     * @dev Public sale mint\n     * \n     * @param _mintAmount Number of tokens to mint.\n     */\n    function mintPublicSale(\n        uint256 _mintAmount\n    ) external nonReentrant payable {\n        require(isPublicSaleActive, \"Sale is not active\");\n        require(_mintAmount > 0, \"Must mint at least 1 NFT\");\n        require(_mintAmount <= publicSaleMaxMintPerTx, \"Mint count exceeds limit for public sale\");\n        require((publicSaleCost * _mintAmount) <= msg.value, \"ETH sent does not match required payment\");\n        \n        // Mint\n        _mintToUser(msg.sender, _mintAmount, maxSupply);\n    }\n    \n    /**\n     * @dev Presale mint\n     * \n     * @param _hashMessage Must be a valid hash message.\n     * @param _signature Must be a valid signature.\n     * @param _mintAmount Num","contract":"PangaensTheGenesis","time":0},{"type":"constant-restrict-modification  ","before":"of hash,\n        // enforced by ","after":"of hash,\n        // enforced by ","contract":"PangaensTheGenesis","time":1},{"type":"constant-restrict-modification  ","before":"ype signature above\n        return keccak2","after":"ype signature above\n        return keccak2","contract":"PangaensTheGenesis","time":1}]}
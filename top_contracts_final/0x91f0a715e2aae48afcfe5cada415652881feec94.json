{"time":206,"results":[{"type":"state-data-arrangement ","before":"\naddress payable public clientAddress;\naddress payable public artistAddress;\naddress payable public giveawayAddress;\naddress payable public paymentAddress;\nstring public baseTokenURI = \"\";\nstring public baseExtension = \".json\";\nbool public revealed = false;\nstring public notRevealedURI = \"\";","after":"string public baseTokenURI = \"\";\nstring public baseExtension = \".json\";\nstring public notRevealedURI = \"\";\naddress payable public clientAddress;\naddress payable public artistAddress;\naddress payable public giveawayAddress;\naddress payable public paymentAddress;\nbool public revealed = false;\n","contract":"RichIslandTikis","time":1},{"type":"external-function ","before":"function setNotRevealedURI(string memory _notRevealedURI)\n        external\n        onlyOwner\n    {\n        notRevealedURI = _notRevealedURI;\n    }","after":"function setNotRevealedURI(string calldata _notRevealedURI)\n        external\n        onlyOwner\n    {\n        notRevealedURI = _notRevealedURI;\n    }","contract":"RichIslandTikis","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseTokenURI) external onlyOwner {\n        baseTokenURI = _baseTokenURI;\n    }","after":"function setBaseURI(string calldata _baseTokenURI) external onlyOwner {\n        baseTokenURI = _baseTokenURI;\n    }","contract":"RichIslandTikis","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","after":"function setBaseExtension(string calldata _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","contract":"RichIslandTikis","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"RichIslandTikis","time":0},{"type":"external-function ","before":"function addAddressesToWhitelist(address[] memory addrs)\n        external\n        onlyOwner\n    {\n        _addAddressesToWhitelist(addrs);\n    }","after":"function addAddressesToWhitelist(address[] calldata addrs)\n        external\n        onlyOwner\n    {\n        _addAddressesToWhitelist(addrs);\n    }","contract":"RichIslandTikis","time":0},{"type":"external-function ","before":"function removeAddressesFromWhitelist(address[] memory addrs)\n        external\n        onlyOwner\n    {\n        for (uint32 i = 0; i < addrs.length; i++) {\n            whitelist[addrs[i]] = false;\n            emit WhitelistedAddressRemoved(addrs[i]);\n        }\n    }","after":"function removeAddressesFromWhitelist(address[] calldata addrs)\n        external\n        onlyOwner\n    {\n        for (uint32 i = 0; i < addrs.length; i++) {\n            whitelist[addrs[i]] = false;\n            emit WhitelistedAddressRemoved(addrs[i]);\n        }\n    }","contract":"RichIslandTikis","time":0},{"type":"immutable-restrict-modification ","before":"address payable public clientAddress;","after":"address payable public immutable clientAddress;","contract":"RichIslandTikis","time":0},{"type":"immutable-restrict-modification ","before":"address payable public artistAddress;","after":"address payable public immutable artistAddress;","contract":"RichIslandTikis","time":0},{"type":"immutable-restrict-modification ","before":"address payable public giveawayAddress;","after":"address payable public immutable giveawayAddress;","contract":"RichIslandTikis","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private _maxSupply = 1000;","after":"uint256 private immutable _maxSupply = 1000;","contract":"RichIslandTikis","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private _limit = 5;","after":"uint256 private immutable _limit = 5;","contract":"RichIslandTikis","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private startFrom;","after":"uint256 private immutable startFrom;","contract":"RichIslandTikis","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private _totalSupply;","after":"uint256 private immutable _totalSupply;","contract":"RichIslandTikis","time":0}]}
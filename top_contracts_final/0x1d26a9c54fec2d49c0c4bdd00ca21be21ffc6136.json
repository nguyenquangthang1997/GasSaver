{"time":66,"results":[{"type":"external-function ","before":"function claim(bytes32[] memory proof, uint256 amount)\n        external\n        nonReentrant\n    {\n        require(!disabled, \"the contract is disabled\");\n        require(block.timestamp > startTime, \"claim has not started\");\n        require(block.timestamp < endTime, \"claim has finished\");\n        require(!claimed[msg.sender], \"this address has already claimed\");\n        require(\n            proof.verify(\n                tokenClaimMerkleRoot,\n                keccak256(abi.encodePacked(msg.sender, amount))\n            ),\n            \"failed to verify merkle proof\"\n        );\n\n        claimed[msg.sender] = true;\n        token.safeTransfer(msg.sender, amount);\n        emit TokenClaimed(msg.sender, amount);\n    }","after":"function claim(bytes32[] calldata proof, uint256 amount)\n        external\n        nonReentrant\n    {\n        require(!disabled, \"the contract is disabled\");\n        require(block.timestamp > startTime, \"claim has not started\");\n        require(block.timestamp < endTime, \"claim has finished\");\n        require(!claimed[msg.sender], \"this address has already claimed\");\n        require(\n            proof.verify(\n                tokenClaimMerkleRoot,\n                keccak256(abi.encodePacked(msg.sender, amount))\n            ),\n            \"failed to verify merkle proof\"\n        );\n\n        claimed[msg.sender] = true;\n        token.safeTransfer(msg.sender, amount);\n        emit TokenClaimed(msg.sender, amount);\n    }","contract":"TokenClaim","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 public tokenClaimMerkleRoot;","after":"bytes32 public immutable tokenClaimMerkleRoot;","contract":"TokenClaim","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public startTime;","after":"uint256 public immutable startTime;","contract":"TokenClaim","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public endTime;","after":"uint256 public immutable endTime;","contract":"TokenClaim","time":0}]}
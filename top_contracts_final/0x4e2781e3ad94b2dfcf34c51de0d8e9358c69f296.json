{"time":216,"results":[{"type":"external-function ","before":"function getRngSeed(uint _rngSeedKeyHash, uint _rngCodeHash, string memory _rngCodeURI) public onlyOwner returns (bytes32 requestId) {\n        require(RNG_VRF_RESULT == 0, \"Already generated!\");\n        require(LINK.balanceOf(address(this)) >= vrfFee, \"Not enough LINK.\");\n        \n        RNG_SEED_KEY_HASH = _rngSeedKeyHash;\n        RNG_CODE_HASH = _rngCodeHash;\n        RNG_CODE_URI = _rngCodeURI;\n        emit RNGSeedRequested(_rngSeedKeyHash, _rngCodeHash, _rngCodeURI);\n        return requestRandomness(vrfkeyHash, vrfFee);\n    }","after":"function getRngSeed(uint _rngSeedKeyHash, uint _rngCodeHash, string calldata _rngCodeURI) public onlyOwner returns (bytes32 requestId) {\n        require(RNG_VRF_RESULT == 0, \"Already generated!\");\n        require(LINK.balanceOf(address(this)) >= vrfFee, \"Not enough LINK.\");\n        \n        RNG_SEED_KEY_HASH = _rngSeedKeyHash;\n        RNG_CODE_HASH = _rngCodeHash;\n        RNG_CODE_URI = _rngCodeURI;\n        emit RNGSeedRequested(_rngSeedKeyHash, _rngCodeHash, _rngCodeURI);\n        return requestRandomness(vrfkeyHash, vrfFee);\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function setRNGSeedKey(string memory _rngSeedKey) public onlyOwner {\n        RNG_SEED_KEY = _rngSeedKey;\n        emit RNGSeedKeyRevealed(_rngSeedKey);\n    }","after":"function setRNGSeedKey(string calldata _rngSeedKey) public onlyOwner {\n        RNG_SEED_KEY = _rngSeedKey;\n        emit RNGSeedKeyRevealed(_rngSeedKey);\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function setRNGCodeUri(string memory _rngCodeURI) public onlyOwner {\n        RNG_CODE_URI = _rngCodeURI;\n        emit RNGCodeUriChanged(_rngCodeURI);\n    }","after":"function setRNGCodeUri(string calldata _rngCodeURI) public onlyOwner {\n        RNG_CODE_URI = _rngCodeURI;\n        emit RNGCodeUriChanged(_rngCodeURI);\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function setProvenance(string memory _provenance) public onlyOwner {\n        PROVENANCE = _provenance;\n        emit ProvenanceChanged(_provenance);\n    }","after":"function setProvenance(string calldata _provenance) public onlyOwner {\n        PROVENANCE = _provenance;\n        emit ProvenanceChanged(_provenance);\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) public onlyOwner {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) public onlyOwner {\n        _setBaseURI(_baseURI);\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function forceMint(address[] memory _addresses) public onlyOwner { \n        require(totalSupply().add(_addresses.length) <= MAX_TOKENS, \"Not enough slots.\");\n        for (uint i = 0; i < _addresses.length; i++) {\n            uint mintIndex = totalSupply();\n            if (mintIndex < MAX_TOKENS) {\n                _safeMint(_addresses[i], mintIndex);\n            }\n        }\n    }","after":"function forceMint(address[] calldata _addresses) public onlyOwner { \n        require(totalSupply().add(_addresses.length) <= MAX_TOKENS, \"Not enough slots.\");\n        for (uint i = 0; i < _addresses.length; i++) {\n            uint mintIndex = totalSupply();\n            if (mintIndex < MAX_TOKENS) {\n                _safeMint(_addresses[i], mintIndex);\n            }\n        }\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function reserveForPreSale(address[] memory _addresses, uint _numPerAddress) public onlyOwner {\n        uint numNeeded = _numPerAddress.mul(_addresses.length);\n        require(numPreSaleReservations.add(numNeeded) <= MAX_TOKENS, \"Not enough slots.\");\n        \n        for (uint i = 0; i < _addresses.length; i++) {\n            presaleReservations[_addresses[i]] += _numPerAddress;\n        }\n        numPreSaleReservations += numNeeded;\n    }","after":"function reserveForPreSale(address[] calldata _addresses, uint _numPerAddress) public onlyOwner {\n        uint numNeeded = _numPerAddress.mul(_addresses.length);\n        require(numPreSaleReservations.add(numNeeded) <= MAX_TOKENS, \"Not enough slots.\");\n        \n        for (uint i = 0; i < _addresses.length; i++) {\n            presaleReservations[_addresses[i]] += _numPerAddress;\n        }\n        numPreSaleReservations += numNeeded;\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function removePreSaleReservations(address[] memory _addresses) public onlyOwner {\n        uint numRemoved = 0;\n        for (uint i = 0; i < _addresses.length; i++) {\n            numRemoved += presaleReservations[_addresses[i]];\n            presaleReservations[_addresses[i]] = 0;\n        }\n        numPreSaleReservations -= numRemoved; \n    }","after":"function removePreSaleReservations(address[] calldata _addresses) public onlyOwner {\n        uint numRemoved = 0;\n        for (uint i = 0; i < _addresses.length; i++) {\n            numRemoved += presaleReservations[_addresses[i]];\n            presaleReservations[_addresses[i]] = 0;\n        }\n        numPreSaleReservations -= numRemoved; \n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function setLicense(string memory _license) public onlyOwner {\n        LICENSE = _license;\n        emit LicenseChanged(_license);\n    }","after":"function setLicense(string calldata _license) public onlyOwner {\n        LICENSE = _license;\n        emit LicenseChanged(_license);\n    }","contract":"Sora","time":0},{"type":"external-function ","before":"function changeTokenName(uint _id, string memory _name) public {\n        require(ownerOf(_id) == msg.sender, \"You do not own this token.\");\n        require(sha256(bytes(_name)) != sha256(bytes(tokenNames[_id])), \"Name unchanged.\");\n        tokenNames[_id] = _name;\n        emit TokenNameChanged(msg.sender, _id, _name);\n    }","after":"function changeTokenName(uint _id, string calldata _name) public {\n        require(ownerOf(_id) == msg.sender, \"You do not own this token.\");\n        require(sha256(bytes(_name)) != sha256(bytes(tokenNames[_id])), \"Name unchanged.\");\n        tokenNames[_id] = _name;\n        emit TokenNameChanged(msg.sender, _id, _name);\n    }","contract":"Sora","time":0},{"type":"immutable-restrict-modification ","before":"bytes32 internal vrfkeyHash;","after":"bytes32 internal immutable vrfkeyHash;","contract":"Sora","time":1},{"type":"immutable-restrict-modification ","before":"uint256 internal vrfFee;","after":"uint256 internal immutable vrfFee;","contract":"Sora","time":1}]}
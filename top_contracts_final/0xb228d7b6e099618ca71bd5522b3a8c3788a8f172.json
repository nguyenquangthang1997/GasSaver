{"time":147,"results":[{"type":"external-function ","before":"on to create a new edition. Can only be called by the allowed creator\n           Sets the only allowed minter to the address that creates/owns the edition.\n           This can be re-assigned or updated later\n     */\n    function initialize(\n        address _owner,\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS\n    ) public initializer {\n        __ERC721_init(_name, _symbol);\n        __Ownable_init();\n        // Set ownership to original sender of contract call\n        transferOwnership(_owner);\n        description = _description;\n        animationUrl = _animationUrl;\n        animationHash = _animationHa","after":"on to create a new edition. Can only be called by the allowed creator\n           Sets the only allowed minter to the address that creates/owns the edition.\n           This can be re-assigned or updated later\n     */\n    function initialize(\n        address _owner,\n        string calldata _name,\n        string calldata _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS\n    ) public initializer {\n        __ERC721_init(_name, _symbol);\n        __Ownable_init();\n        // Set ownership to original sender of contract call\n        transferOwnership(_owner);\n        description = _description;\n        animationUrl = _animationUrl;\n        animationHash = _animationHa","contract":"SingleEditionMintable","time":0},{"type":"external-function ","before":"to;\n        return _mintEditions(toMint);\n    }\n\n    /**\n      @param recipients list of addresses to send the newly minted editions to\n      @dev This mints multiple editions to the given list of addresses.\n     */\n    function mintE","after":"to;\n        return _mintEditions(toMint);\n    }\n\n    /**\n      @param recipients list of addresses to send the newly minted editions to\n      @dev This mints multiple editions to the given list of addresses.\n     */\n    function mintE","contract":"SingleEditionMintable","time":0},{"type":"external-function ","before":"edMinters[minter] = allowed;\n    }\n\n    /**\n      @dev Allows for updates of edition urls by the owner of the edition.\n           Only URLs can be updated (data-uris are supported), hashes cannot","after":"edMinters[minter] = allowed;\n    }\n\n    /**\n      @dev Allows for updates of edition urls by the owner of the edition.\n           Only URLs can be updated (data-uris are supported), hashes cannot","contract":"SingleEditionMintable","time":0},{"type":"external-function ","before":" entry\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\n    /// @param _editionSize Total size of the edition (number of possible editions)\n    /// @param _royaltyBPS BPS amount of royalty\n    function createEdition(\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS\n    ) external returns (uint256) {\n        uint256 newId = atContract.current();\n        address newContract = ClonesUpgradeable.cloneDeterministic(\n            implementation,\n            bytes32(abi.encodePacked(newId))\n        );\n        SingleEditionMintable(newContract).initialize(\n            msg.sender,\n            _name,\n            _symbol,\n            _","after":" entry\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\n    /// @param _editionSize Total size of the edition (number of possible editions)\n    /// @param _royaltyBPS BPS amount of royalty\n    function createEdition(\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS\n    ) external returns (uint256) {\n        uint256 newId = atContract.current();\n        address newContract = ClonesUpgradeable.cloneDeterministic(\n            implementation,\n            bytes32(abi.encodePacked(newId))\n        );\n        SingleEditionMintable(newContract).initialize(\n            msg.sender,\n            _name,\n            _symbol,\n            _","contract":"SingleEditionMintableCreator","time":0},{"type":"immutable-restrict-modification ","before":"Upgradeable.sol\";\nimport {Coun","after":"Upgradeable.sol\";\nimport {Coun","contract":"SingleEditionMintableCreator","time":0}]}
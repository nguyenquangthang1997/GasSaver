{"time":125,"results":[{"type":"external-function ","before":"function setOperators(address[] memory _operators) public onlyOwner {\n    for (uint256 j = 0; j < _operators.length; j++) {\n      require(_operators[j] != address(0), \"operator cannot be 0x0\");\n      operators[_operators[j]] = true;\n      emit OperatorSet(_operators[j]);\n    }\n  }","after":"function setOperators(address[] calldata _operators) public onlyOwner {\n    for (uint256 j = 0; j < _operators.length; j++) {\n      require(_operators[j] != address(0), \"operator cannot be 0x0\");\n      operators[_operators[j]] = true;\n      emit OperatorSet(_operators[j]);\n    }\n  }","contract":"SynCityPasses","time":0},{"type":"external-function ","before":"function updateBaseTokenURI(string memory uri) external onlyOwner {\n    require(!tokenURIHasBeenFrozen, \"token uri has been frozen\");\n    _baseTokenURI = uri;\n    emit BaseURIUpdated();\n  }","after":"function updateBaseTokenURI(string calldata uri) external onlyOwner {\n    require(!tokenURIHasBeenFrozen, \"token uri has been frozen\");\n    _baseTokenURI = uri;\n    emit BaseURIUpdated();\n  }","contract":"SynCityPasses","time":0},{"type":"external-function ","before":"function claimFreeToken(\n    bytes32 authCode,\n    uint256 typeIndex,\n    bytes memory signature\n  ) external {\n    _mintToken(_msgSender(), authCode, typeIndex, signature);\n  }","after":"function claimFreeToken(\n    bytes32 authCode,\n    uint256 typeIndex,\n    bytes calldata signature\n  ) external {\n    _mintToken(_msgSender(), authCode, typeIndex, signature);\n  }","contract":"SynCityPasses","time":0},{"type":"external-function ","before":"function giveawayToken(\n    address to,\n    bytes32 authCode,\n    bytes memory signature\n  ) external onlyOperator {\n    _mintToken(to, authCode, 4, signature);\n  }","after":"function giveawayToken(\n    address to,\n    bytes32 authCode,\n    bytes calldata signature\n  ) external onlyOperator {\n    _mintToken(to, authCode, 4, signature);\n  }","contract":"SynCityPasses","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxTokenId = 888;","after":"uint256 public constant maxTokenId = 888;","contract":"SynCityPasses","time":1}]}
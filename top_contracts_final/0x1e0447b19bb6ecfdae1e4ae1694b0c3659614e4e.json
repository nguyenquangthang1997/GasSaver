{"time":676,"results":[{"type":"external-function ","before":" function ownerAddMarket(\n        Storage.State storage state,\n        address token,\n        IPriceOracle priceOracle,\n        IInterestSetter interestSetter,\n        Decimal.D256 memory marginPremium,\n        Decimal.D256 memory spreadPremium\n    )\n        public\n    {\n        _requireNoMarket(state, token);\n\n        uint256 marketId = state.numMarkets;\n\n        state.numMarkets++;\n        state.markets[marketId].token = token;\n        state.markets[marketId].index = Interest.newIndex();\n\n        emit LogAddMarket(marketId, token);\n\n        _setPriceOracle(state, marketId, priceOracle);\n        _setInterestSetter(state, marketId, interestSetter);\n        _setMarginPremium(state, marketId, marginPremium);\n        _setSpreadPremium(state, marketId, spreadPremium);\n    ","after":" function ownerAddMarket(\n        Storage.State storage state,\n        address token,\n        IPriceOracle priceOracle,\n        IInterestSetter interestSetter,\n        Decimal.D256 calldata marginPremium,\n        Decimal.D256 calldata spreadPremium\n    )\n        public\n    {\n        _requireNoMarket(state, token);\n\n        uint256 marketId = state.numMarkets;\n\n        state.numMarkets++;\n        state.markets[marketId].token = token;\n        state.markets[marketId].index = Interest.newIndex();\n\n        emit LogAddMarket(marketId, token);\n\n        _setPriceOracle(state, marketId, priceOracle);\n        _setInterestSetter(state, marketId, interestSetter);\n        _setMarginPremium(state, marketId, marginPremium);\n        _setSpreadPremium(state, marketId, spreadPremium);\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetMarginPremium(\n        Storage.State storage state,\n        uint256 marketId,\n        Decimal.D256 memory marginPremium\n    )\n        public\n    {\n        _validateMarketId(state, marketId);\n        _setMarginPremium(state, marketId, marginPremium);\n    ","after":" function ownerSetMarginPremium(\n        Storage.State storage state,\n        uint256 marketId,\n        Decimal.D256 calldata marginPremium\n    )\n        public\n    {\n        _validateMarketId(state, marketId);\n        _setMarginPremium(state, marketId, marginPremium);\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetSpreadPremium(\n        Storage.State storage state,\n        uint256 marketId,\n        Decimal.D256 memory spreadPremium\n    )\n        public\n    {\n        _validateMarketId(state, marketId);\n        _setSpreadPremium(state, marketId, spreadPremium);\n    ","after":" function ownerSetSpreadPremium(\n        Storage.State storage state,\n        uint256 marketId,\n        Decimal.D256 calldata spreadPremium\n    )\n        public\n    {\n        _validateMarketId(state, marketId);\n        _setSpreadPremium(state, marketId, spreadPremium);\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetMarginRatio(\n        Storage.State storage state,\n        Decimal.D256 memory ratio\n    )\n        public\n    {\n        Require.that(\n            ratio.value <= state.riskLimits.marginRatioMax,\n            FILE,\n            \"Ratio too high\"\n        );\n        Require.that(\n            ratio.value > state.riskParams.liquidationSpread.value,\n            FILE,\n            \"Ratio cannot be <= spread\"\n        );\n        state.riskParams.marginRatio = ratio;\n        emit LogSetMarginRatio(ratio);\n    ","after":" function ownerSetMarginRatio(\n        Storage.State storage state,\n        Decimal.D256 calldata ratio\n    )\n        public\n    {\n        Require.that(\n            ratio.value <= state.riskLimits.marginRatioMax,\n            FILE,\n            \"Ratio too high\"\n        );\n        Require.that(\n            ratio.value > state.riskParams.liquidationSpread.value,\n            FILE,\n            \"Ratio cannot be <= spread\"\n        );\n        state.riskParams.marginRatio = ratio;\n        emit LogSetMarginRatio(ratio);\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetLiquidationSpread(\n        Storage.State storage state,\n        Decimal.D256 memory spread\n    )\n        public\n    {\n        Require.that(\n            spread.value <= state.riskLimits.liquidationSpreadMax,\n            FILE,\n            \"Spread too high\"\n        );\n        Require.that(\n            spread.value < state.riskParams.marginRatio.value,\n            FILE,\n            \"Spread cannot be >= ratio\"\n        );\n        state.riskParams.liquidationSpread = spread;\n        emit LogSetLiquidationSpread(spread);\n    ","after":" function ownerSetLiquidationSpread(\n        Storage.State storage state,\n        Decimal.D256 calldata spread\n    )\n        public\n    {\n        Require.that(\n            spread.value <= state.riskLimits.liquidationSpreadMax,\n            FILE,\n            \"Spread too high\"\n        );\n        Require.that(\n            spread.value < state.riskParams.marginRatio.value,\n            FILE,\n            \"Spread cannot be >= ratio\"\n        );\n        state.riskParams.liquidationSpread = spread;\n        emit LogSetLiquidationSpread(spread);\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetEarningsRate(\n        Storage.State storage state,\n        Decimal.D256 memory earningsRate\n    )\n        public\n    {\n        Require.that(\n            earningsRate.value <= state.riskLimits.earningsRateMax,\n            FILE,\n            \"Rate too high\"\n        );\n        state.riskParams.earningsRate = earningsRate;\n        emit LogSetEarningsRate(earningsRate);\n    ","after":" function ownerSetEarningsRate(\n        Storage.State storage state,\n        Decimal.D256 calldata earningsRate\n    )\n        public\n    {\n        Require.that(\n            earningsRate.value <= state.riskLimits.earningsRateMax,\n            FILE,\n            \"Rate too high\"\n        );\n        state.riskParams.earningsRate = earningsRate;\n        emit LogSetEarningsRate(earningsRate);\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function ownerSetMinBorrowedValue(\n        Storage.State storage state,\n        Monetary.Value memory minBorrowedValue\n    )\n        public\n    {\n        Require.that(\n            minBorrowedValue.value <= state.riskLimits.minBorrowedValueMax,\n            FILE,\n            \"Value too high\"\n        );\n        state.riskParams.minBorrowedValue = minBorrowedValue;\n        emit LogSetMinBorrowedValue(minBorrowedValue);\n    ","after":" function ownerSetMinBorrowedValue(\n        Storage.State storage state,\n        Monetary.Value calldata minBorrowedValue\n    )\n        public\n    {\n        Require.that(\n            minBorrowedValue.value <= state.riskLimits.minBorrowedValueMax,\n            FILE,\n            \"Value too high\"\n        );\n        state.riskParams.minBorrowedValue = minBorrowedValue;\n        emit LogSetMinBorrowedValue(minBorrowedValue);\n    ","contract":"AdminImpl","time":0},{"type":"external-function ","before":" function operate(\n        Storage.State storage state,\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    )\n        public\n    {\n        Events.logOperation();\n\n        _verifyInputs(accounts, actions);\n\n        (\n            bool[] memory primaryAccounts,\n            Cache.MarketCache memory cache\n        ) = _runPreprocessing(\n            state,\n            accounts,\n            actions\n        );\n\n        _runActions(\n            state,\n            accounts,\n            actions,\n            cache\n        );\n\n        _verifyFinalState(\n            state,\n            accounts,\n            primaryAccounts,\n            cache\n        );\n    ","after":" function operate(\n        Storage.State storage state,\n        Account.Info[] calldata accounts,\n        Actions.ActionArgs[] calldata actions\n    )\n        public\n    {\n        Events.logOperation();\n\n        _verifyInputs(accounts, actions);\n\n        (\n            bool[] memory primaryAccounts,\n            Cache.MarketCache memory cache\n        ) = _runPreprocessing(\n            state,\n            accounts,\n            actions\n        );\n\n        _runActions(\n            state,\n            accounts,\n            actions,\n            cache\n        );\n\n        _verifyFinalState(\n            state,\n            accounts,\n            primaryAccounts,\n            cache\n        );\n    ","contract":"OperationImpl","time":0},{"type":"external-function ","before":" function ownerAddMarket(\n        address token,\n        IPriceOracle priceOracle,\n        IInterestSetter interestSetter,\n        Decimal.D256 memory marginPremium,\n        Decimal.D256 memory spreadPremium\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerAddMarket(\n            g_state,\n            token,\n            priceOracle,\n            interestSetter,\n            marginPremium,\n            spreadPremium\n        );\n    ","after":" function ownerAddMarket(\n        address token,\n        IPriceOracle priceOracle,\n        IInterestSetter interestSetter,\n        Decimal.D256 calldata marginPremium,\n        Decimal.D256 calldata spreadPremium\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerAddMarket(\n            g_state,\n            token,\n            priceOracle,\n            interestSetter,\n            marginPremium,\n            spreadPremium\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetMarginPremium(\n        uint256 marketId,\n        Decimal.D256 memory marginPremium\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetMarginPremium(\n            g_state,\n            marketId,\n            marginPremium\n        );\n    ","after":" function ownerSetMarginPremium(\n        uint256 marketId,\n        Decimal.D256 calldata marginPremium\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetMarginPremium(\n            g_state,\n            marketId,\n            marginPremium\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetSpreadPremium(\n        uint256 marketId,\n        Decimal.D256 memory spreadPremium\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetSpreadPremium(\n            g_state,\n            marketId,\n            spreadPremium\n        );\n    ","after":" function ownerSetSpreadPremium(\n        uint256 marketId,\n        Decimal.D256 calldata spreadPremium\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetSpreadPremium(\n            g_state,\n            marketId,\n            spreadPremium\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetMarginRatio(\n        Decimal.D256 memory ratio\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetMarginRatio(\n            g_state,\n            ratio\n        );\n    ","after":" function ownerSetMarginRatio(\n        Decimal.D256 calldata ratio\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetMarginRatio(\n            g_state,\n            ratio\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetLiquidationSpread(\n        Decimal.D256 memory spread\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetLiquidationSpread(\n            g_state,\n            spread\n        );\n    ","after":" function ownerSetLiquidationSpread(\n        Decimal.D256 calldata spread\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetLiquidationSpread(\n            g_state,\n            spread\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetEarningsRate(\n        Decimal.D256 memory earningsRate\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetEarningsRate(\n            g_state,\n            earningsRate\n        );\n    ","after":" function ownerSetEarningsRate(\n        Decimal.D256 calldata earningsRate\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetEarningsRate(\n            g_state,\n            earningsRate\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function ownerSetMinBorrowedValue(\n        Monetary.Value memory minBorrowedValue\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetMinBorrowedValue(\n            g_state,\n            minBorrowedValue\n        );\n    ","after":" function ownerSetMinBorrowedValue(\n        Monetary.Value calldata minBorrowedValue\n    )\n        public\n        onlyOwner\n        nonReentrant\n    {\n        AdminImpl.ownerSetMinBorrowedValue(\n            g_state,\n            minBorrowedValue\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function operate(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    )\n        public\n        nonReentrant\n    {\n        OperationImpl.operate(\n            g_state,\n            accounts,\n            actions\n        );\n    ","after":" function operate(\n        Account.Info[] calldata accounts,\n        Actions.ActionArgs[] calldata actions\n    )\n        public\n        nonReentrant\n    {\n        OperationImpl.operate(\n            g_state,\n            accounts,\n            actions\n        );\n    ","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function setOperators(\n        OperatorArg[] memory args\n    )\n        public\n    {\n        for (uint256 i = 0; i < args.length; i++) {\n            address operator = args[i].operator;\n            bool trusted = args[i].trusted;\n            g_state.operators[msg.sender][operator] = trusted;\n            emit LogOperatorSet(msg.sender, operator, trusted);\n        }\n    ","after":" function setOperators(\n        OperatorArg[] calldata args\n    )\n        public\n    {\n        for (uint256 i = 0; i < args.length; i++) {\n            address operator = args[i].operator;\n            bool trusted = args[i].trusted;\n            g_state.operators[msg.sender][operator] = trusted;\n            emit LogOperatorSet(msg.sender, operator, trusted);\n        }\n    ","contract":"SoloMargin","time":0},{"type":"constant-restrict-modification  ","before":" bytes32 FILE = \"Getters\"","after":" bytes32 constant FILE = \"Getters\"","contract":"SoloMargin","time":0}]}
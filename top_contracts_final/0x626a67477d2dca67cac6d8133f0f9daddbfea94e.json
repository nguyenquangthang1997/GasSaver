{"time":273,"results":[{"type":"external-function ","before":"ializes contract\n    */\n    function initialize(\n        string memory name_, \n        string memory symbol_, \n        string memory contractURI_,\n        address costManager_,\n        address producedBy_\n    ) \n        public \n        initializer \n    {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        __ERC721SafeHook_init(name_, symbol_, costManager_, producedBy_);\n        _contra","after":"ializes contract\n    */\n    function initialize(\n        string calldata name_, \n        string calldata symbol_, \n        string calldata contractURI_,\n        address costManager_,\n        address producedBy_\n    ) \n        public \n        initializer \n    {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        __ERC721SafeHook_init(name_, symbol_, costManager_, producedBy_);\n        _contra","contract":"NFTSafeHook","time":0},{"type":"external-function ","before":"RI\n    */\n    function setContractURI(string memory newContractURI) external onlyOwner {\n        _contractURI = newContractURI;\n        _accountForOperation(\n            OPERATION_SETMETADATA << OPERATION_SHIFT_BITS,\n            0x001,\n            0\n  ","after":"RI\n    */\n    function setContractURI(string calldata newContractURI) external onlyOwner {\n        _contractURI = newContractURI;\n        _accountForOperation(\n            OPERATION_SETMETADATA << OPERATION_SHIFT_BITS,\n            0x001,\n            0\n  ","contract":"NFTSafeHook","time":0},{"type":"external-function ","before":"et\n    */\n    function setSeriesInfo(\n        uint64 seriesId, \n        SeriesInfo memory info \n    ) \n        external\n    {\n        _requireCanManageSeries(seriesId);\n        if (info.saleInfo.onSaleUntil > seriesInfo[seriesId].saleInfo.onSaleUntil && \n            info.saleInfo.onSaleUntil > block.timestamp\n        ) {\n            emit SeriesPutOnSale(\n                seriesId, \n                info.saleInfo.price, \n                info.saleInfo.currency, \n                info.saleInfo.onSaleUntil\n            );\n        } else if (info.saleInfo.onSaleUntil <= block.timestamp ) {\n            emit SeriesRemovedFromSale(seriesId);\n        }\n        \n        seriesInfo[seriesId] = info;\n\n        _accountForOperation(\n            (OPERATION_SETSERIESINFO << OPERATION_SHIFT_BITS) | seriesId,\n            uint256(uint160(info.saleInfo.currency)),\n            info.saleInfo.price\n        );\n","after":"et\n    */\n    function setSeriesInfo(\n        uint64 seriesId, \n        SeriesInfo memory info \n    ) \n        external\n    {\n        _requireCanManageSeries(seriesId);\n        if (info.saleInfo.onSaleUntil > seriesInfo[seriesId].saleInfo.onSaleUntil && \n            info.saleInfo.onSaleUntil > block.timestamp\n        ) {\n            emit SeriesPutOnSale(\n                seriesId, \n                info.saleInfo.price, \n                info.saleInfo.currency, \n                info.saleInfo.onSaleUntil\n            );\n        } else if (info.saleInfo.onSaleUntil <= block.timestamp ) {\n            emit SeriesRemovedFromSale(seriesId);\n        }\n        \n        seriesInfo[seriesId] = info;\n\n        _accountForOperation(\n            (OPERATION_SETSERIESINFO << OPERATION_SHIFT_BITS) | seriesId,\n            uint256(uint160(info.saleInfo.currency)),\n            info.saleInfo.price\n        );\n","contract":"NFTSafeHook","time":0},{"type":"external-function ","before":"fo\n    */\n    function setOwnerCommission(\n        CommissionInfo memory commission\n    ) \n        external \n        onlyOwner \n    {\n        commissionInfo = commission;\n\n        _accountForOperation(\n            OPERATION_SETOWNERCOMMISSION << OPERATION_SHIFT_BITS,\n            uint256(uint160(commission.ownerCommission.recipient)),\n            commission.ownerCommission.value\n   ","after":"fo\n    */\n    function setOwnerCommission(\n        CommissionInfo memory commission\n    ) \n        external \n        onlyOwner \n    {\n        commissionInfo = commission;\n\n        _accountForOperation(\n            OPERATION_SETOWNERCOMMISSION << OPERATION_SHIFT_BITS,\n            uint256(uint160(commission.ownerCommission.recipient)),\n            commission.ownerCommission.value\n   ","contract":"NFTSafeHook","time":0},{"type":"external-function ","before":"ta\n    */\n    function setCommission(\n        uint64 seriesId, \n        CommissionData memory commissionData\n    ) \n        external \n    {\n        _requireCanManageSeries(seriesId);\n        require(\n            (\n                commissionData.value <= commissionInfo.maxValue &&\n                commissionData.value >= commissionInfo.minValue &&\n                commissionData.value + commissionInfo.ownerCommission.value < FRACTION\n            ),\n            \"COMMISSION_INVALID\"\n        );\n        require(commissionData.recipient != address(0), \"RECIPIENT_INVALID\");\n        seriesInfo[seriesId].commission = commissionData;\n        \n        _accountForOperation(\n            (OPERATION_SETCOMMISSION << OPERATION_SHIFT_BITS) | seriesId,\n            commissionData.value,\n            uint256(uint160(commissionData.recipient))\n        );\n","after":"ta\n    */\n    function setCommission(\n        uint64 seriesId, \n        CommissionData calldata commissionData\n    ) \n        external \n    {\n        _requireCanManageSeries(seriesId);\n        require(\n            (\n                commissionData.value <= commissionInfo.maxValue &&\n                commissionData.value >= commissionInfo.minValue &&\n                commissionData.value + commissionInfo.ownerCommission.value < FRACTION\n            ),\n            \"COMMISSION_INVALID\"\n        );\n        require(commissionData.recipient != address(0), \"RECIPIENT_INVALID\");\n        seriesInfo[seriesId].commission = commissionData;\n        \n        _accountForOperation(\n            (OPERATION_SETCOMMISSION << OPERATION_SHIFT_BITS) | seriesId,\n            commissionData.value,\n            uint256(uint160(commissionData.recipient))\n        );\n","contract":"NFTSafeHook","time":0},{"type":"external-function ","before":"es\n    */\n    function mintAndDistribute(\n        uint256[] memory tokenIds, \n        address[] memory addresses\n    )\n        external \n    {\n        uint256 len = addresses.length;\n        require(tokenIds.length == len, \"lengths should be the same\");\n        for(uint256 i = 0; i < len; i++) {\n            _requireCanManageSeries(getSeriesId(tokenIds[i]));\n            _mint(addresses[i], tokenIds[i]);\n        }\n        \n        _accountForOperation(\n            OPERATION_MINTANDDISTRIBUTE << OPERATION_SHIFT_BITS,\n            len,\n            0\n  ","after":"es\n    */\n    function mintAndDistribute(\n        uint256[] calldata tokenIds, \n        address[] memory addresses\n    )\n        external \n    {\n        uint256 len = addresses.length;\n        require(tokenIds.length == len, \"lengths should be the same\");\n        for(uint256 i = 0; i < len; i++) {\n            _requireCanManageSeries(getSeriesId(tokenIds[i]));\n            _mint(addresses[i], tokenIds[i]);\n        }\n        \n        _accountForOperation(\n            OPERATION_MINTANDDISTRIBUTE << OPERATION_SHIFT_BITS,\n            len,\n            0\n  ","contract":"NFTSafeHook","time":0},{"type":"external-function ","before":"l \n    */\n    function setNameAndSymbol(\n        string memory newName, \n        string memory newSymbol\n    ) \n        public \n        onlyOwner \n    {\n        _setNameAndSymbol(newName, new","after":"l \n    */\n    function setNameAndSymbol(\n        string calldata newName, \n        string memory newSymbol\n    ) \n        public \n        onlyOwner \n    {\n        _setNameAndSymbol(newName, new","contract":"NFTSafeHook","time":0}]}
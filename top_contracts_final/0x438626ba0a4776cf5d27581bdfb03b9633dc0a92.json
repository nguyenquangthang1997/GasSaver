{"time":970,"results":[{"type":"external-function ","before":"    .feePercentages = _feePercentages;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .buyNowPrice = _buyNowPrice;\n        nftContractAuctions[_nftContractAddress][_tokenId].minPrice = _minPrice;\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = msg\n            .sender;\n    }\n\n    function _createNewNftAuction(\n        address _nftContractAddress,\n        uint256 _tokenId,\n        address _erc20Token,\n        uint128 _minPrice,\n        uint128 _buyNowPrice,\n        address[] memory _feeRecipients,\n        uint32[] memory _feePercentages\n    ) internal {\n        // Sending the NF","after":"    .feePercentages = _feePercentages;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .buyNowPrice = _buyNowPrice;\n        nftContractAuctions[_nftContractAddress][_tokenId].minPrice = _minPrice;\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = msg\n            .sender;\n    }\n\n    function _createNewNftAuction(\n        address _nftContractAddress,\n        uint256 _tokenId,\n        address _erc20Token,\n        uint128 _minPrice,\n        uint128 _buyNowPrice,\n        address[] memory _feeRecipients,\n        uint32[] memory _feePercentages\n    ) internal {\n        // Sending the NF","contract":"NFTAuction","time":0},{"type":"external-function ","before":"his contract\n        _setupAuction(\n            _nftContractAddress,\n            _tokenId,\n            _erc20Token,\n            _minPrice,\n            _buyNowPrice,\n            _feeRecipients,\n            _feePercentages\n        );\n        emit NftAuctionCreated(\n            _nftContractAddress,\n            _tokenId,\n            msg.sender,\n            _erc20Token,\n            _minPrice,\n            _buyNowPrice,\n            _getAuctionBidPeriod(_nftContractAddress, _tokenId),\n            _getBidIncreasePercentage(_nftContractAddress, _tokenId),\n            _feeRecipients,\n            _feePercentages\n        );\n        _updateOngoingAuction(_nftContractAddress, _tokenId);\n    }\n\n    /**\n     * Create an auction that uses the default bid increase percentage\n     * & the default auction bid period.\n     */\n    function createDefaultNftAuction(\n        address _nftContractAddress,\n        uint256 _tokenId,\n        address _erc20Token,\n        uint128 _minPrice,\n        uint128 _buyNowPrice,\n        address[] memory _feeRecipients,\n        uint32[","after":"his contract\n        _setupAuction(\n            _nftContractAddress,\n            _tokenId,\n            _erc20Token,\n            _minPrice,\n            _buyNowPrice,\n            _feeRecipients,\n            _feePercentages\n        );\n        emit NftAuctionCreated(\n            _nftContractAddress,\n            _tokenId,\n            msg.sender,\n            _erc20Token,\n            _minPrice,\n            _buyNowPrice,\n            _getAuctionBidPeriod(_nftContractAddress, _tokenId),\n            _getBidIncreasePercentage(_nftContractAddress, _tokenId),\n            _feeRecipients,\n            _feePercentages\n        );\n        _updateOngoingAuction(_nftContractAddress, _tokenId);\n    }\n\n    /**\n     * Create an auction that uses the default bid increase percentage\n     * & the default auction bid period.\n     */\n    function createDefaultNftAuction(\n        address _nftContractAddress,\n        uint256 _tokenId,\n        address _erc20Token,\n        uint128 _minPrice,\n        uint128 _buyNowPrice,\n        address[] memory _feeRecipients,\n        uint32[","contract":"NFTAuction","time":0},{"type":"external-function ","before":"            ║\n      ╚══════════════════════════════╝*/\n\n    /********************************************************************\n     * Allows for a standard sale mechanism where the NFT seller can    *\n     * can select an address to be whitelisted. This address is then    *\n     * allowed to make a bid on the NFT. No other address can bid on    *\n     * the NFT.                                                         *\n     ********************************************************************/\n    function _setupSale(\n        address _nftContractAddress,\n        uint256 _tokenId,\n        address _erc20Token,\n        uint128 _buyNowPrice,\n        address _whitelistedBuyer,\n        address[] memory _feeRecipients,\n        uint32[] memory _feePercentages\n    )\n        internal\n        correctFeeRecipientsAndPercentages(\n            _feeRecipients.length,\n            _feePercentages.length\n        )\n        isFeePercentagesLessThanMaximum(_feePercentages)\n    {\n        if (_erc20Token != address(0)) {\n            nftContractAuctions[_nftContractAddress][_tokenId]\n                .ERC20Token = _erc20Token;\n        }\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .feeRecipients = _feeRecipients;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .feePercentages = _feePercentages;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .buyNowPrice = _buyNowPrice;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .whitelistedBuyer = _whitelistedBuyer;\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = msg\n            .sender;\n    }\n\n    function createSale(\n        address _nftContractAddress,\n        uint256 _tokenId,\n","after":"            ║\n      ╚══════════════════════════════╝*/\n\n    /********************************************************************\n     * Allows for a standard sale mechanism where the NFT seller can    *\n     * can select an address to be whitelisted. This address is then    *\n     * allowed to make a bid on the NFT. No other address can bid on    *\n     * the NFT.                                                         *\n     ********************************************************************/\n    function _setupSale(\n        address _nftContractAddress,\n        uint256 _tokenId,\n        address _erc20Token,\n        uint128 _buyNowPrice,\n        address _whitelistedBuyer,\n        address[] memory _feeRecipients,\n        uint32[] memory _feePercentages\n    )\n        internal\n        correctFeeRecipientsAndPercentages(\n            _feeRecipients.length,\n            _feePercentages.length\n        )\n        isFeePercentagesLessThanMaximum(_feePercentages)\n    {\n        if (_erc20Token != address(0)) {\n            nftContractAuctions[_nftContractAddress][_tokenId]\n                .ERC20Token = _erc20Token;\n        }\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .feeRecipients = _feeRecipients;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .feePercentages = _feePercentages;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .buyNowPrice = _buyNowPrice;\n        nftContractAuctions[_nftContractAddress][_tokenId]\n            .whitelistedBuyer = _whitelistedBuyer;\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = msg\n            .sender;\n    }\n\n    function createSale(\n        address _nftContractAddress,\n        uint256 _tokenId,\n","contract":"NFTAuction","time":0},{"type":"immutable-restrict-modification ","before":"uint32 public defaultBidIncreasePercentage;","after":"uint32 public immutable defaultBidIncreasePercentage;","contract":"NFTAuction","time":0},{"type":"immutable-restrict-modification ","before":"uint32 public minimumSettableIncreasePercentage;","after":"uint32 public immutable minimumSettableIncreasePercentage;","contract":"NFTAuction","time":0},{"type":"immutable-restrict-modification ","before":"uint32 public maximumMinPricePercentage;","after":"uint32 public immutable maximumMinPricePercentage;","contract":"NFTAuction","time":0},{"type":"immutable-restrict-modification ","before":"uint32 public defaultAuctionBidPeriod;","after":"uint32 public immutable defaultAuctionBidPeriod;","contract":"NFTAuction","time":0}]}
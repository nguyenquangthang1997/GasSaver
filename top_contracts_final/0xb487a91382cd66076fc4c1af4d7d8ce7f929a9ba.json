{"time":248,"results":[{"type":"state-data-arrangement ","before":"\nstring private _currentBaseURI;\nbool public preSaleStatus;\nbool public mainSaleStatus;\naddress private ownerAddress;\nuint256 public round;\nuint256 public preSaleCount = 0;\nuint256 public publicSaleCount = 0;\nuint256 public stotalSupply = 100;\nuint256 public maxItemsPerPreSale = 5;\nuint256 public preSaleMaxItems = 3000;\nuint256 public mintPrice = 0.05 ether;\nuint256 public maxItemsPerTx = 5;\nuint256 public adoptionsCount = 800;\nuint256 public OgsCount = 100;\nuint256 totalDividends = 0;\nuint256 private maxToken;\nstring private _currentGatewayURI;\nbytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\nmapping(uint256 => address) public Ogs;\nmapping(uint256 => bool) public addressExist;\nmapping(address => uint256) public preMints;\nmapping(uint256 => uint256) tokenRound;\nmapping(uint256 => uint256) tokenAdoption;\nmapping(uint256 => uint256) staticTokenAdoption;\nmapping(uint256 => address) public genesisAddress;\nuint256 ownerRoyalty = 0;\nmapping(uint256 => Giraffe) public giraffes;","after":"string private _currentBaseURI;\nuint256 public round;\nuint256 public preSaleCount = 0;\nuint256 public publicSaleCount = 0;\nuint256 public stotalSupply = 100;\nuint256 public maxItemsPerPreSale = 5;\nuint256 public preSaleMaxItems = 3000;\nuint256 public mintPrice = 0.05 ether;\nuint256 public maxItemsPerTx = 5;\nuint256 public adoptionsCount = 800;\nuint256 public OgsCount = 100;\nuint256 totalDividends = 0;\nuint256 private maxToken;\nstring private _currentGatewayURI;\nmapping(uint256 => address) public Ogs;\nmapping(uint256 => bool) public addressExist;\nmapping(address => uint256) public preMints;\nmapping(uint256 => uint256) tokenRound;\nmapping(uint256 => uint256) tokenAdoption;\nmapping(uint256 => uint256) staticTokenAdoption;\nmapping(uint256 => address) public genesisAddress;\nuint256 ownerRoyalty = 0;\nmapping(uint256 => Giraffe) public giraffes;\naddress private ownerAddress;\nbytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\nbool public preSaleStatus;\nbool public mainSaleStatus;\n","contract":"GiraffeTower","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory toAdd) external ownerOnly {\n        for (uint256 i = 0; i < toAdd.length; i++) {\n            preMints[toAdd[i]] = maxItemsPerPreSale;\n        }\n    }","after":"function addToWhitelist(address[] calldata toAdd) external ownerOnly {\n        for (uint256 i = 0; i < toAdd.length; i++) {\n            preMints[toAdd[i]] = maxItemsPerPreSale;\n        }\n    }","contract":"GiraffeTower","time":0},{"type":"external-function ","before":"function setAdoptions(uint256[] memory adoptions) external ownerOnly {\n        for (uint256 i = 0; i < adoptions.length; i++) {\n            tokenAdoption[i + 1] = adoptions[i];\n            staticTokenAdoption[i + 1] = adoptions[i];\n        }\n    }","after":"function setAdoptions(uint256[] calldata adoptions) external ownerOnly {\n        for (uint256 i = 0; i < adoptions.length; i++) {\n            tokenAdoption[i + 1] = adoptions[i];\n            staticTokenAdoption[i + 1] = adoptions[i];\n        }\n    }","contract":"GiraffeTower","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external ownerOnly {\n        _currentBaseURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) external ownerOnly {\n        _currentBaseURI = baseURI;\n    }","contract":"GiraffeTower","time":0},{"type":"external-function ","before":"function addToOg(address[] memory toAdd, uint256[] memory pick)\n        external\n        ownerOnly\n    {\n        for (uint256 i = 0; i < toAdd.length; i++) {\n            Ogs[pick[i]] = toAdd[i];\n            addressExist[pick[i]] = true;\n            // preMints[toAdd[i]] = maxItemsPerPreMint;\n        }\n    }","after":"function addToOg(address[] calldata toAdd, uint256[] calldata pick)\n        external\n        ownerOnly\n    {\n        for (uint256 i = 0; i < toAdd.length; i++) {\n            Ogs[pick[i]] = toAdd[i];\n            addressExist[pick[i]] = true;\n            // preMints[toAdd[i]] = maxItemsPerPreMint;\n        }\n    }","contract":"GiraffeTower","time":0},{"type":"external-function ","before":"function ogbulkMint(uint256[] memory pick) external {\n        for (uint256 i = 0; i < pick.length; i++) {\n            require(\n                pick[i] <= 100 && pick[i] > 0,\n                \"Error: Maximum number of tokens have been minted\"\n            );\n            _ogmintToken(pick[i]);\n        }\n    }","after":"function ogbulkMint(uint256[] calldata pick) external {\n        for (uint256 i = 0; i < pick.length; i++) {\n            require(\n                pick[i] <= 100 && pick[i] > 0,\n                \"Error: Maximum number of tokens have been minted\"\n            );\n            _ogmintToken(pick[i]);\n        }\n    }","contract":"GiraffeTower","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public preSaleMaxItems = 3000;","after":"uint256 public constant preSaleMaxItems = 3000;","contract":"GiraffeTower","time":2},{"type":"constant-restrict-modification  ","before":"uint256 public adoptionsCount = 800;","after":"uint256 public constant adoptionsCount = 800;","contract":"GiraffeTower","time":2},{"type":"constant-restrict-modification  ","before":"uint256 public OgsCount = 100;","after":"uint256 public constant OgsCount = 100;","contract":"GiraffeTower","time":2},{"type":"immutable-restrict-modification ","before":"uint256 private maxToken;","after":"uint256 private immutable maxToken;","contract":"GiraffeTower","time":2}]}
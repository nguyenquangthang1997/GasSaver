{"time":110,"results":[{"type":"external-function ","before":"function lock(address fromAsset, uint64 toChainId, bytes memory toAddress, uint amount, uint fee, uint id) external payable nonReentrant whenNotPaused {\n        \n        require(toChainId != chainId && toChainId != 0, \"!toChainId\");\n        require(toAddress.length !=0, \"empty toAddress\");\n        address addr;\n        assembly { addr := mload(add(toAddress,0x14)) }\n        require(addr != address(0),\"zero toAddress\");\n        \n        _pull(fromAsset, amount);\n\n        amount = _checkoutFee(fromAsset, amount, fee);\n        \n        address lockProxy = _getSupportLockProxy(fromAsset, toChainId);\n        _push(fromAsset, toChainId, toAddress, amount, lockProxy);\n\n        emit PolyWrapperLock(fromAsset, msg.sender, toChainId, toAddress, amount, fee, id);\n    }","after":"function lock(address fromAsset, uint64 toChainId, bytes calldata toAddress, uint amount, uint fee, uint id) external payable nonReentrant whenNotPaused {\n        \n        require(toChainId != chainId && toChainId != 0, \"!toChainId\");\n        require(toAddress.length !=0, \"empty toAddress\");\n        address addr;\n        assembly { addr := mload(add(toAddress,0x14)) }\n        require(addr != address(0),\"zero toAddress\");\n        \n        _pull(fromAsset, amount);\n\n        amount = _checkoutFee(fromAsset, amount, fee);\n        \n        address lockProxy = _getSupportLockProxy(fromAsset, toChainId);\n        _push(fromAsset, toChainId, toAddress, amount, lockProxy);\n\n        emit PolyWrapperLock(fromAsset, msg.sender, toChainId, toAddress, amount, fee, id);\n    }","contract":"PolyWrapper","time":0},{"type":"external-function ","before":"function specifiedLock(address fromAsset, uint64 toChainId, bytes memory toAddress, uint amount, uint fee, uint id, address lockProxy) external payable nonReentrant whenNotPaused {\n        \n        require(toChainId != chainId && toChainId != 0, \"!toChainId\");\n        require(toAddress.length !=0, \"empty toAddress\");\n        address addr;\n        assembly { addr := mload(add(toAddress,0x14)) }\n        require(addr != address(0),\"zero toAddress\");\n        \n        _pull(fromAsset, amount);\n\n        amount = _checkoutFee(fromAsset, amount, fee);\n        \n        require(isValidLockProxy(lockProxy),\"invalid lockProxy\");\n        _push(fromAsset, toChainId, toAddress, amount, lockProxy);\n\n        emit PolyWrapperLock(fromAsset, msg.sender, toChainId, toAddress, amount, fee, id);\n    }","after":"function specifiedLock(address fromAsset, uint64 toChainId, bytes calldata toAddress, uint amount, uint fee, uint id, address lockProxy) external payable nonReentrant whenNotPaused {\n        \n        require(toChainId != chainId && toChainId != 0, \"!toChainId\");\n        require(toAddress.length !=0, \"empty toAddress\");\n        address addr;\n        assembly { addr := mload(add(toAddress,0x14)) }\n        require(addr != address(0),\"zero toAddress\");\n        \n        _pull(fromAsset, amount);\n\n        amount = _checkoutFee(fromAsset, amount, fee);\n        \n        require(isValidLockProxy(lockProxy),\"invalid lockProxy\");\n        _push(fromAsset, toChainId, toAddress, amount, lockProxy);\n\n        emit PolyWrapperLock(fromAsset, msg.sender, toChainId, toAddress, amount, fee, id);\n    }","contract":"PolyWrapper","time":0},{"type":"external-function ","before":"function speedUp(address fromAsset, bytes memory txHash, uint fee) external payable nonReentrant whenNotPaused {\n        _pull(fromAsset, fee);\n        emit PolyWrapperSpeedUp(fromAsset, txHash, msg.sender, fee);\n    }","after":"function speedUp(address fromAsset, bytes calldata txHash, uint fee) external payable nonReentrant whenNotPaused {\n        _pull(fromAsset, fee);\n        emit PolyWrapperSpeedUp(fromAsset, txHash, msg.sender, fee);\n    }","contract":"PolyWrapper","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxLockProxyIndex = 0;","after":"uint public constant maxLockProxyIndex = 0;","contract":"PolyWrapper","time":0},{"type":"immutable-restrict-modification ","before":"uint public chainId;","after":"uint public immutable chainId;","contract":"PolyWrapper","time":0}]}
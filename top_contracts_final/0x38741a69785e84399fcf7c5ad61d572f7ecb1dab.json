{"time":55,"results":[{"type":"external-function ","before":"function submit(\n        uint256 proposalID, // ar tx id\n        bytes32 everHash,\n        address to,\n        uint256 value,\n        bytes memory data,\n        bytes[] memory sigs\n    ) public whenNotPaused returns (bytes32, bool) {\n        bytes32 id = txHash(proposalID, everHash, to, value, data);\n        require(!executed[id], \"tx_executed\");\n\n        for (uint256 i = 0; i < sigs.length; i++) {\n            address owner = ecAddress(id, sigs[i]);\n            if (!isOwner[owner]) {\n                emit SubmissionFailure(id, proposalID, everHash, owner, to, value, data);\n                continue;\n            }\n\n            confirmations[id][owner] = true;\n            emit Submission(id, proposalID, everHash, owner, to, value, data);\n        }\n\n        if (!isConfirmed(id)) return (id, false);\n        executed[id] = true;\n\n        (bool ok, ) = to.call{value: value}(data);\n        if (ok) {\n            emit Execution(id, proposalID, everHash, to, value, data);\n        } else {\n            emit ExecutionFailure(id, proposalID, everHash, to, value, data);\n        }\n\n        return (id, true);\n    }","after":"function submit(\n        uint256 proposalID, // ar tx id\n        bytes32 everHash,\n        address to,\n        uint256 value,\n        bytes calldata data,\n        bytes[] calldata sigs\n    ) public whenNotPaused returns (bytes32, bool) {\n        bytes32 id = txHash(proposalID, everHash, to, value, data);\n        require(!executed[id], \"tx_executed\");\n\n        for (uint256 i = 0; i < sigs.length; i++) {\n            address owner = ecAddress(id, sigs[i]);\n            if (!isOwner[owner]) {\n                emit SubmissionFailure(id, proposalID, everHash, owner, to, value, data);\n                continue;\n            }\n\n            confirmations[id][owner] = true;\n            emit Submission(id, proposalID, everHash, owner, to, value, data);\n        }\n\n        if (!isConfirmed(id)) return (id, false);\n        executed[id] = true;\n\n        (bool ok, ) = to.call{value: value}(data);\n        if (ok) {\n            emit Execution(id, proposalID, everHash, to, value, data);\n        } else {\n            emit ExecutionFailure(id, proposalID, everHash, to, value, data);\n        }\n\n        return (id, true);\n    }","contract":"EverPay","time":0},{"type":"external-function ","before":"function executes(address[] memory tos, uint256[] memory values, bytes[] memory datas) payable public onlyWallet {\n        require(tos.length == values.length, \"invalid_length\");\n        require(tos.length == datas.length, \"invalid_length\");\n\n        for (uint256 i = 0; i < tos.length; i++) {\n          (bool ok, ) = tos[i].call{value: values[i]}(datas[i]);\n          require(ok, \"executed_falied\");\n        }\n    }","after":"function executes(address[] calldata tos, uint256[] calldata values, bytes[] calldata datas) payable public onlyWallet {\n        require(tos.length == values.length, \"invalid_length\");\n        require(tos.length == datas.length, \"invalid_length\");\n\n        for (uint256 i = 0; i < tos.length; i++) {\n          (bool ok, ) = tos[i].call{value: values[i]}(datas[i]);\n          require(ok, \"executed_falied\");\n        }\n    }","contract":"EverPay","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public chainID;","after":"uint256 public immutable chainID;","contract":"EverPay","time":0}]}
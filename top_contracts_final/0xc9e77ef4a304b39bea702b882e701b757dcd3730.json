{"time":159,"results":[{"type":"external-function ","before":"/\n    function breedOwnLeaders(uint256 maleTokenId, uint256 femaleTokenId, bool hasSignature, bool instantCooldown, bytes memory signature) public {\n        require(breedingIsActive, \"Breeding not live\");\n        \n        breedingManagerContractInstance.breedOwnLeaders(msg.sender, maleTokenId, femaleTokenId, hasSignature, instantCooldown, signature);\n\n        roarTokenContractInstance.burnFrom(msg.sender, (mintRoarPrice + (instantCooldown ? cooldownPillPrice : 0)) * (hasSignature ? signatureMultiplier : 1) * 10 ** 18);\n        \n        _tokenIdCounter.increment();\n        _safeMint(msg.sender, _tokenIdCounter.current());\n\n        emit CubBorn(_tokenIdCounter.current(), maleTokenId, femaleTokenId, hasSignature, instantCooldown);","after":"/\n    function breedOwnLeaders(uint256 maleTokenId, uint256 femaleTokenId, bool hasSignature, bool instantCooldown, bytes calldata signature) public {\n        require(breedingIsActive, \"Breeding not live\");\n        \n        breedingManagerContractInstance.breedOwnLeaders(msg.sender, maleTokenId, femaleTokenId, hasSignature, instantCooldown, signature);\n\n        roarTokenContractInstance.burnFrom(msg.sender, (mintRoarPrice + (instantCooldown ? cooldownPillPrice : 0)) * (hasSignature ? signatureMultiplier : 1) * 10 ** 18);\n        \n        _tokenIdCounter.increment();\n        _safeMint(msg.sender, _tokenIdCounter.current());\n\n        emit CubBorn(_tokenIdCounter.current(), maleTokenId, femaleTokenId, hasSignature, instantCooldown);","contract":"RoaringRoccstars","time":0},{"type":"external-function ","before":"/\n    function breedUsingMarketplace(uint256 maleTokenId, uint256 femaleTokenId, bool hasSignature, bool instantCooldown, address renter, bool acceptorIsMaleOwner, uint256 rentalFee, uint256 expiry, bytes memory cooldownSignature, bytes memory listingSignature) public {\n        require(breedingIsActive, \"Breeding not live\");\n        \n        breedingManagerContractInstance.breedUsingMarketplace(msg.sender, maleTokenId, femaleTokenId, hasSignature, instantCooldown, renter, acceptorIsMaleOwner, rentalFee, expiry, cooldownSignature, listingSignature);\n\n        roarTokenContractInstance.burnFrom(msg.sender, (mintRoarPrice + (instantCooldown ? cooldownPillPrice : 0)) * (hasSignature ? signatureMultiplier : 1) * 10 ** 18);\n        roarTokenContractInstance.transferFrom(msg.sender, renter, rentalFee * 10 ** 18);\n        \n        _tokenIdCounter.increment();\n        _safeMint(msg.sender, _tokenIdCounter.current());\n\n        emit CubBornViaMarketplace(_tokenIdCounter.current(), maleTokenId, femaleTokenId, hasSignature, instantCooldown, renter, acceptorIsMaleOwner, rentalFee, expiry);","after":"/\n    function breedUsingMarketplace(uint256 maleTokenId, uint256 femaleTokenId, bool hasSignature, bool instantCooldown, address renter, bool acceptorIsMaleOwner, uint256 rentalFee, uint256 expiry, bytes calldata cooldownSignature, bytes calldata listingSignature) public {\n        require(breedingIsActive, \"Breeding not live\");\n        \n        breedingManagerContractInstance.breedUsingMarketplace(msg.sender, maleTokenId, femaleTokenId, hasSignature, instantCooldown, renter, acceptorIsMaleOwner, rentalFee, expiry, cooldownSignature, listingSignature);\n\n        roarTokenContractInstance.burnFrom(msg.sender, (mintRoarPrice + (instantCooldown ? cooldownPillPrice : 0)) * (hasSignature ? signatureMultiplier : 1) * 10 ** 18);\n        roarTokenContractInstance.transferFrom(msg.sender, renter, rentalFee * 10 ** 18);\n        \n        _tokenIdCounter.increment();\n        _safeMint(msg.sender, _tokenIdCounter.current());\n\n        emit CubBornViaMarketplace(_tokenIdCounter.current(), maleTokenId, femaleTokenId, hasSignature, instantCooldown, renter, acceptorIsMaleOwner, rentalFee, expiry);","contract":"RoaringRoccstars","time":0},{"type":"external-function ","before":"\n\n    function setBaseURI(string memory newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;","after":"\n\n    function setBaseURI(string calldata newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;","contract":"RoaringRoccstars","time":0}]}
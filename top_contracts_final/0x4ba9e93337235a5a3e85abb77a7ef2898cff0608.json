{"time":169,"results":[{"type":"external-function ","before":"function mintWithSignature(\n        uint256 tokenCount,\n        uint256 valueInWei,\n        address mintKey,\n        bytes memory signature\n    ) external payable nonReentrant {\n        // contract state\n        require(\n            _state == ContractState.PRIVATE || _state == ContractState.PUBLIC,\n            \"minting is disabled\"\n        );\n\n        // tokenCount, > zero and < available supply handled by_mintInSequenceToAddress\n\n        // payable\n        require(valueInWei == msg.value, \"payable does match require amount\");\n\n        // verify fresh nonce\n        require(_claimedMintKeys[mintKey] == false, \"mintKey already claimed\");\n\n        // Verify signature\n        require(\n            _verificationAddress != address(0),\n            \"verification address not set\"\n        );\n\n        SignatureVerification.requireValidSignature(\n            abi.encodePacked(msg.sender, tokenCount, valueInWei, mintKey, this),\n            signature,\n            _verificationAddress\n        );\n\n        // claim mint key\n        _claimedMintKeys[mintKey] = true;\n\n        // mint\n        _mintInSequenceToAddress(msg.sender, tokenCount);\n\n        emit MintKeyClaimed(msg.sender, mintKey, tokenCount);\n    }","after":"function mintWithSignature(\n        uint256 tokenCount,\n        uint256 valueInWei,\n        address mintKey,\n        bytes calldata signature\n    ) external payable nonReentrant {\n        // contract state\n        require(\n            _state == ContractState.PRIVATE || _state == ContractState.PUBLIC,\n            \"minting is disabled\"\n        );\n\n        // tokenCount, > zero and < available supply handled by_mintInSequenceToAddress\n\n        // payable\n        require(valueInWei == msg.value, \"payable does match require amount\");\n\n        // verify fresh nonce\n        require(_claimedMintKeys[mintKey] == false, \"mintKey already claimed\");\n\n        // Verify signature\n        require(\n            _verificationAddress != address(0),\n            \"verification address not set\"\n        );\n\n        SignatureVerification.requireValidSignature(\n            abi.encodePacked(msg.sender, tokenCount, valueInWei, mintKey, this),\n            signature,\n            _verificationAddress\n        );\n\n        // claim mint key\n        _claimedMintKeys[mintKey] = true;\n\n        // mint\n        _mintInSequenceToAddress(msg.sender, tokenCount);\n\n        emit MintKeyClaimed(msg.sender, mintKey, tokenCount);\n    }","contract":"MintMachineERC721FiniteSequence","time":0},{"type":"external-function ","before":"function setBaseURI(string memory uri) external onlyOwner {\n        require(!_freezeURI, \"baseURI is frozen\");\n\n        _uri = uri;\n    }","after":"function setBaseURI(string calldata uri) external onlyOwner {\n        require(!_freezeURI, \"baseURI is frozen\");\n\n        _uri = uri;\n    }","contract":"MintMachineERC721FiniteSequence","time":0},{"type":"external-function ","before":"function setContractURI(string memory uri) external onlyOwner {\n        _contractURI = uri;\n    }","after":"function setContractURI(string calldata uri) external onlyOwner {\n        _contractURI = uri;\n    }","contract":"MintMachineERC721FiniteSequence","time":0}]}
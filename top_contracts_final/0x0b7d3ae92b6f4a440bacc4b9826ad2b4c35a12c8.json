{"time":136,"results":[{"type":"external-function ","before":"function swap(\n        address token,\n        bytes memory path,\n        bool send\n    ) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        uint256 allowance = IERC20(token).allowance(address(this), address(router));\n        if (token != USDT && allowance < balance) IERC20(token).safeIncreaseAllowance(address(router), balance.sub(allowance));\n        uint256 amountOut = router.exactInput(\n            ISwapRouter.ExactInputParams(\n                path,\n                send ? recipient : address(this),\n                block.timestamp + 10000,\n                balance,\n                0\n            )\n        );\n        emit SwapVISR(token, send ? recipient : address(this), amountOut);\n    }","after":"function swap(\n        address token,\n        bytes calldata path,\n        bool send\n    ) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        uint256 allowance = IERC20(token).allowance(address(this), address(router));\n        if (token != USDT && allowance < balance) IERC20(token).safeIncreaseAllowance(address(router), balance.sub(allowance));\n        uint256 amountOut = router.exactInput(\n            ISwapRouter.ExactInputParams(\n                path,\n                send ? recipient : address(this),\n                block.timestamp + 10000,\n                balance,\n                0\n            )\n        );\n        emit SwapVISR(token, send ? recipient : address(this), amountOut);\n    }","contract":"Swap","time":0},{"type":"immutable-restrict-modification ","before":"address public VISR;","after":"address public immutable VISR;","contract":"Swap","time":1},{"type":"constant-restrict-modification  ","before":"address public USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;","after":"address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;","contract":"Swap","time":1}]}
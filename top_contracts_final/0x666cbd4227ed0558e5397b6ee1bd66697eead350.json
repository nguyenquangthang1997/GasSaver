{"time":152,"results":[{"type":"state-data-arrangement ","before":"\nstring private _baseTokenURI;\nuint256 private _maxTokenSupply;\nuint256 public publicSalePrice;\nuint256 private publicSaleLimit = 5;\nbool public publicSaleActive = false;\nuint256 public presaleId = 1;\nbool public presaleActive = false;\nmapping(bytes32 => uint256) private _mintedPresale;","after":"string private _baseTokenURI;\nuint256 private _maxTokenSupply;\nuint256 public publicSalePrice;\nuint256 private publicSaleLimit = 5;\nuint256 public presaleId = 1;\nmapping(bytes32 => uint256) private _mintedPresale;\nbool public publicSaleActive = false;\nbool public presaleActive = false;\n","contract":"MetaWatchesAnalogSummer","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","contract":"MetaWatchesAnalogSummer","time":0},{"type":"external-function ","before":"function presaleMint(\n        uint256 amount,\n        uint256 price,\n        uint256 limit,\n        bytes memory signature\n    ) external payable {\n        require(presaleActive, 'Presale is not active');\n\n        bytes32 data = keccak256(abi.encodePacked(address(this), msg.sender, price, limit, presaleId));\n        require(_verifySignature(owner(), data, signature), 'Invalid signature for presale');\n\n        uint256 minted = _mintedPresale[data] + amount;\n        require(minted <= limit, 'Minting would exceed presale limit');\n\n        _mintForPrice(amount, price);\n        _mintedPresale[data] = minted;\n    }","after":"function presaleMint(\n        uint256 amount,\n        uint256 price,\n        uint256 limit,\n        bytes calldata signature\n    ) external payable {\n        require(presaleActive, 'Presale is not active');\n\n        bytes32 data = keccak256(abi.encodePacked(address(this), msg.sender, price, limit, presaleId));\n        require(_verifySignature(owner(), data, signature), 'Invalid signature for presale');\n\n        uint256 minted = _mintedPresale[data] + amount;\n        require(minted <= limit, 'Minting would exceed presale limit');\n\n        _mintForPrice(amount, price);\n        _mintedPresale[data] = minted;\n    }","contract":"MetaWatchesAnalogSummer","time":0},{"type":"immutable-restrict-modification ","before":"uint256 private _maxTokenSupply;","after":"uint256 private immutable _maxTokenSupply;","contract":"MetaWatchesAnalogSummer","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private publicSaleLimit = 5;","after":"uint256 private constant publicSaleLimit = 5;","contract":"MetaWatchesAnalogSummer","time":1}]}
{"time":146,"results":[{"type":"de-morgan-condition ","before":"!STATUS.LP_GENERATION_COMPLETE && !STATUS.FORCE_FAILED","after":"!(STATUS.LP_GENERATION_COMPLETE && STATUS.FORCE_FAILED)","loc":{"start":{"line":869,"column":12},"end":{"line":869,"column":54}},"contract":"Spaceportv1","time":0},{"type":"external-function ","before":"function editWhitelist(address[] memory _users, bool _add) external onlySpaceportOwner {\n    if (_add) {\n        for (uint i = 0; i < _users.length; i++) {\n          WHITELIST.add(_users[i]);\n        }\n    } else {\n        for (uint i = 0; i < _users.length; i++) {\n          WHITELIST.remove(_users[i]);\n        }\n    }\n  }","after":"function editWhitelist(address[] calldata _users, bool _add) external onlySpaceportOwner {\n    if (_add) {\n        for (uint i = 0; i < _users.length; i++) {\n          WHITELIST.add(_users[i]);\n        }\n    } else {\n        for (uint i = 0; i < _users.length; i++) {\n          WHITELIST.remove(_users[i]);\n        }\n    }\n  }","contract":"Spaceportv1","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public CONTRACT_VERSION = 1;","after":"uint256 public constant CONTRACT_VERSION = 1;","contract":"Spaceportv1","time":1},{"type":"immutable-restrict-modification ","before":"address public SPACEPORT_GENERATOR;","after":"address public immutable SPACEPORT_GENERATOR;","contract":"Spaceportv1","time":1},{"type":"immutable-restrict-modification ","before":"address PLFI_DEV_ADDRESS;","after":"address immutable PLFI_DEV_ADDRESS;","contract":"Spaceportv1","time":1}]}
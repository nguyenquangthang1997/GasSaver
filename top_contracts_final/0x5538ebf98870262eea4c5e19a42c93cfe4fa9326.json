{"time":76,"results":[{"type":"external-function ","before":"function stake(uint256[] memory _tokenIds) public {\n    // Ensure at least one token ID was sent\n    require(_tokenIds.length > 0, \"no token IDs sent\");\n\n    // Enumerate sent token IDs\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\n      // Get token ID\n      uint256 tokenId = _tokenIds[i];\n\n      // Store NFT owner\n      ownerOf[tokenId] = msg.sender;\n\n      // Add NFT to owner staked tokens\n      stakedTokens[msg.sender].add(tokenId);\n\n      // Store staking time as block timestamp the\n      // the transaction was confirmed in\n      stakedAt[tokenId] = block.timestamp;\n\n      // Transfer token to staking contract\n      // Will fail if the user does not own the\n      // token or has not approved the staking\n      // contract for transferring tokens on his\n      // behalf\n      erc721.safeTransferFrom(msg.sender, address(this), tokenId, \"\");\n\n      // Emit event\n      emit Staked(msg.sender, tokenId, stakedAt[tokenId]);\n    }\n  }","after":"function stake(uint256[] calldata _tokenIds) public {\n    // Ensure at least one token ID was sent\n    require(_tokenIds.length > 0, \"no token IDs sent\");\n\n    // Enumerate sent token IDs\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\n      // Get token ID\n      uint256 tokenId = _tokenIds[i];\n\n      // Store NFT owner\n      ownerOf[tokenId] = msg.sender;\n\n      // Add NFT to owner staked tokens\n      stakedTokens[msg.sender].add(tokenId);\n\n      // Store staking time as block timestamp the\n      // the transaction was confirmed in\n      stakedAt[tokenId] = block.timestamp;\n\n      // Transfer token to staking contract\n      // Will fail if the user does not own the\n      // token or has not approved the staking\n      // contract for transferring tokens on his\n      // behalf\n      erc721.safeTransferFrom(msg.sender, address(this), tokenId, \"\");\n\n      // Emit event\n      emit Staked(msg.sender, tokenId, stakedAt[tokenId]);\n    }\n  }","contract":"TokenRewardStaking","time":0},{"type":"external-function ","before":"function unstake(uint256[] memory _tokenIds) public {\n    // Ensure at least one token ID was sent\n    require(_tokenIds.length > 0, \"no token IDs sent\");\n\n    // Create a variable to store the total rewards for all\n    // NFTs sent\n    uint256 totalRewards = 0;\n\n    // Enumerate sent token IDs\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\n      // Get token ID\n      uint256 tokenId = _tokenIds[i];\n\n      // Verify sender is token ID owner\n      // Will fail if token is not staked (owner is 0x0)\n      require(ownerOf[tokenId] == msg.sender, \"not token owner\");\n\n      // Calculate rewards for token ID. Will revert\n      // if the token is not staken\n      uint256 rewards = currentRewardsOf(tokenId);\n\n      // Increase amount of total rewards\n      // for all tokens sent\n      totalRewards += rewards;\n\n      // Emit event\n      emit Unstaked(msg.sender, tokenId, block.timestamp, stakedAt[tokenId], rewards);\n\n      // Reset `ownerOf` and `stakedAt`\n      // for token\n      ownerOf[tokenId] = address(0);\n      stakedAt[tokenId] = 0;\n\n      // Remove NFT from owner staked tokens\n      stakedTokens[msg.sender].remove(tokenId);\n\n      // Transfer NFT back to user\n      erc721.transferFrom(address(this), msg.sender, tokenId);\n    }\n\n    // Mint total rewards for all sent NFTs\n    // to user\n    erc20.mint(msg.sender, totalRewards);\n  }","after":"function unstake(uint256[] calldata _tokenIds) public {\n    // Ensure at least one token ID was sent\n    require(_tokenIds.length > 0, \"no token IDs sent\");\n\n    // Create a variable to store the total rewards for all\n    // NFTs sent\n    uint256 totalRewards = 0;\n\n    // Enumerate sent token IDs\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\n      // Get token ID\n      uint256 tokenId = _tokenIds[i];\n\n      // Verify sender is token ID owner\n      // Will fail if token is not staked (owner is 0x0)\n      require(ownerOf[tokenId] == msg.sender, \"not token owner\");\n\n      // Calculate rewards for token ID. Will revert\n      // if the token is not staken\n      uint256 rewards = currentRewardsOf(tokenId);\n\n      // Increase amount of total rewards\n      // for all tokens sent\n      totalRewards += rewards;\n\n      // Emit event\n      emit Unstaked(msg.sender, tokenId, block.timestamp, stakedAt[tokenId], rewards);\n\n      // Reset `ownerOf` and `stakedAt`\n      // for token\n      ownerOf[tokenId] = address(0);\n      stakedAt[tokenId] = 0;\n\n      // Remove NFT from owner staked tokens\n      stakedTokens[msg.sender].remove(tokenId);\n\n      // Transfer NFT back to user\n      erc721.transferFrom(address(this), msg.sender, tokenId);\n    }\n\n    // Mint total rewards for all sent NFTs\n    // to user\n    erc20.mint(msg.sender, totalRewards);\n  }","contract":"TokenRewardStaking","time":0},{"type":"external-function ","before":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"TokenRewardStaking","time":0}]}
{"time":181,"results":[{"type":"external-function ","before":"function setContractURI(string memory _cURI) external onlyOwner {\n        _contractURI = _cURI;\n    }","after":"function setContractURI(string calldata _cURI) external onlyOwner {\n        _contractURI = _cURI;\n    }","contract":"AbstractWarriors","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _newURI) public onlyOwner {\n        baseURI = _newURI;\n    }","after":"function setBaseURI(string calldata _newURI) public onlyOwner {\n        baseURI = _newURI;\n    }","contract":"AbstractWarriors","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"AbstractWarriors","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public totalCount = 333;","after":"uint256 public constant totalCount = 333;","contract":"AbstractWarriors","time":0},{"type":"constant-restrict-modification  ","before":"address private artist_1 = 0xA09b6583fb1dE9a183b403EBEF04194Bb76894e6;","after":"address private constant artist_1 = 0xA09b6583fb1dE9a183b403EBEF04194Bb76894e6;","contract":"AbstractWarriors","time":0},{"type":"constant-restrict-modification  ","before":"address private artist_2 = 0x4E0acB5a71ccE2187e60E4b10eD0e5CE13b03A46;","after":"address private constant artist_2 = 0x4E0acB5a71ccE2187e60E4b10eD0e5CE13b03A46;","contract":"AbstractWarriors","time":0},{"type":"constant-restrict-modification  ","before":"address private artist_3 = 0x4b6232E1E198A3b6C03494BE0669Cf3Fc25996C4;","after":"address private constant artist_3 = 0x4b6232E1E198A3b6C03494BE0669Cf3Fc25996C4;","contract":"AbstractWarriors","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"AbstractWarriors","time":0}]}
{"time":174,"results":[{"type":"struct-data-arrangement ","before":"\nbool isCollectingOpen\nuint256 mintPrice\nuint256 maxPerTx\nstring uriCharged\nstring uriDischarged\naddress redeemableAddress\nbytes32 merkle\nbool isWhitelistBased\nbool podsCharged\nbool enforceBalance\naddress linkedAsset\nmapping (address => uint256) claims","after":"uint256 mintPrice\nuint256 maxPerTx\nstring uriCharged\nstring uriDischarged\nbytes32 merkle\nmapping (address => uint256) claims\naddress redeemableAddress\naddress linkedAsset\nbool isCollectingOpen\nbool isWhitelistBased\nbool podsCharged\nbool enforceBalance\n","contract":"BYOVape","time":0},{"type":"external-function ","before":"function createBYOVape(\n        bytes32 _merkle,\n        bool _isWhitelistBased,\n        bool _enforceBalance,\n        uint256  _mintPrice, \n        uint256 _maxPerTx,\n        string memory _uriCharged,\n        string memory _uriDischarged,\n        bool _podsCharged,    \n        address _redeemableAddress,\n        address _linkedAsset\n    ) public onlyOwner {\n        BYOVapeData storage byoVape = m_byoVapes[m_vapeCounter.current()];\n        byoVape.merkle = _merkle;\n        byoVape.isCollectingOpen = false;\n        byoVape.isWhitelistBased = _isWhitelistBased;\n        byoVape.enforceBalance = _enforceBalance;\n        byoVape.mintPrice = _mintPrice;\n        byoVape.maxPerTx = _maxPerTx;\n        byoVape.uriCharged = _uriCharged;\n        byoVape.uriDischarged = _uriDischarged;\n        byoVape.redeemableAddress = _redeemableAddress;\n        byoVape.linkedAsset = _linkedAsset;\n        byoVape.podsCharged = _podsCharged;\n        m_vapeCounter.increment();\n    }","after":"function createBYOVape(\n        bytes32 _merkle,\n        bool _isWhitelistBased,\n        bool _enforceBalance,\n        uint256  _mintPrice, \n        uint256 _maxPerTx,\n        string calldata _uriCharged,\n        string calldata _uriDischarged,\n        bool _podsCharged,    \n        address _redeemableAddress,\n        address _linkedAsset\n    ) public onlyOwner {\n        BYOVapeData storage byoVape = m_byoVapes[m_vapeCounter.current()];\n        byoVape.merkle = _merkle;\n        byoVape.isCollectingOpen = false;\n        byoVape.isWhitelistBased = _isWhitelistBased;\n        byoVape.enforceBalance = _enforceBalance;\n        byoVape.mintPrice = _mintPrice;\n        byoVape.maxPerTx = _maxPerTx;\n        byoVape.uriCharged = _uriCharged;\n        byoVape.uriDischarged = _uriDischarged;\n        byoVape.redeemableAddress = _redeemableAddress;\n        byoVape.linkedAsset = _linkedAsset;\n        byoVape.podsCharged = _podsCharged;\n        m_vapeCounter.increment();\n    }","contract":"BYOVape","time":0},{"type":"external-function ","before":"function updateBaseURIs (uint256 _vapeIdx, string memory _chargedURI, string memory _emptyURI) public onlyOwner {\n        m_byoVapes[_vapeIdx].uriCharged = _chargedURI;\n        m_byoVapes[_vapeIdx].uriDischarged = _emptyURI;\n    }","after":"function updateBaseURIs (uint256 _vapeIdx, string calldata _chargedURI, string calldata _emptyURI) public onlyOwner {\n        m_byoVapes[_vapeIdx].uriCharged = _chargedURI;\n        m_byoVapes[_vapeIdx].uriDischarged = _emptyURI;\n    }","contract":"BYOVape","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"BYOVape","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"BYOVape","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"BYOVape","time":0}]}
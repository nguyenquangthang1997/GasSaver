{"time":140,"results":[{"type":"external-function ","before":"function mint(bytes32[] memory proof) external payable {\n        require(\n            proof.verify(merkleRoot, keccak256(abi.encodePacked(msg.sender))),\n            \"Not on the list!\"\n        );\n        require(\n            isMintable == true,\n            \"ATX DAO NFT is not mintable at the moment!\"\n        );\n        require(\n            !hasMinted[msg.sender],\n            \"Minting is only available for non-holders\"\n        );\n        require(msg.value >= _mintPrice, \"Not enough ether sent to mint!\");\n        require(!isContract(msg.sender), \"No contracts!\");\n\n        // Mint\n        _tokenIds.increment();\n        uint256 newTokenId = _tokenIds.current();\n        hasMinted[msg.sender] = true;\n        _safeMint(msg.sender, newTokenId);\n        _setTokenURI(\n            newTokenId,\n            string(\n                abi.encodePacked(baseURI, newTokenId.toString(), baseExtension)\n            )\n        );\n\n        _mintCount.increment();\n    }","after":"function mint(bytes32[] calldata proof) external payable {\n        require(\n            proof.verify(merkleRoot, keccak256(abi.encodePacked(msg.sender))),\n            \"Not on the list!\"\n        );\n        require(\n            isMintable == true,\n            \"ATX DAO NFT is not mintable at the moment!\"\n        );\n        require(\n            !hasMinted[msg.sender],\n            \"Minting is only available for non-holders\"\n        );\n        require(msg.value >= _mintPrice, \"Not enough ether sent to mint!\");\n        require(!isContract(msg.sender), \"No contracts!\");\n\n        // Mint\n        _tokenIds.increment();\n        uint256 newTokenId = _tokenIds.current();\n        hasMinted[msg.sender] = true;\n        _safeMint(msg.sender, newTokenId);\n        _setTokenURI(\n            newTokenId,\n            string(\n                abi.encodePacked(baseURI, newTokenId.toString(), baseExtension)\n            )\n        );\n\n        _mintCount.increment();\n    }","contract":"ATXDAONFT_V2","time":0},{"type":"external-function ","before":"function resetHasMinted(address[] memory recipients) external onlyOwner {\n        for (uint64 i = 0; i < recipients.length; i++) {\n            hasMinted[recipients[i]] = false;\n        }\n    }","after":"function resetHasMinted(address[] calldata recipients) external onlyOwner {\n        for (uint64 i = 0; i < recipients.length; i++) {\n            hasMinted[recipients[i]] = false;\n        }\n    }","contract":"ATXDAONFT_V2","time":0},{"type":"external-function ","before":"function mintSpecial(\n        address[] memory recipients,\n        string memory tokenURI,\n        bool _dynamic\n    ) external onlyOwner {\n        for (uint64 i = 0; i < recipients.length; i++) {\n            _tokenIds.increment();\n            uint256 newTokenId = _tokenIds.current();\n            hasMinted[recipients[i]] = true;\n\n            _safeMint(recipients[i], newTokenId);\n            _dynamic\n                ? _setTokenURI(\n                    newTokenId,\n                    string(\n                        abi.encodePacked(\n                            tokenURI,\n                            newTokenId.toString(),\n                            baseExtension\n                        )\n                    )\n                )\n                : _setTokenURI(newTokenId, tokenURI);\n        }\n    }","after":"function mintSpecial(\n        address[] calldata recipients,\n        string calldata tokenURI,\n        bool _dynamic\n    ) external onlyOwner {\n        for (uint64 i = 0; i < recipients.length; i++) {\n            _tokenIds.increment();\n            uint256 newTokenId = _tokenIds.current();\n            hasMinted[recipients[i]] = true;\n\n            _safeMint(recipients[i], newTokenId);\n            _dynamic\n                ? _setTokenURI(\n                    newTokenId,\n                    string(\n                        abi.encodePacked(\n                            tokenURI,\n                            newTokenId.toString(),\n                            baseExtension\n                        )\n                    )\n                )\n                : _setTokenURI(newTokenId, tokenURI);\n        }\n    }","contract":"ATXDAONFT_V2","time":0},{"type":"external-function ","before":"function startMint(\n        uint256 mintPrice,\n        string memory tokenURI,\n        bytes32 _root\n    ) public onlyOwner {\n        isMintable = true;\n        _mintPrice = mintPrice;\n        baseURI = tokenURI;\n        setMerkleRoot(_root);\n        _mintCount.reset();\n    }","after":"function startMint(\n        uint256 mintPrice,\n        string calldata tokenURI,\n        bytes32 _root\n    ) public onlyOwner {\n        isMintable = true;\n        _mintPrice = mintPrice;\n        baseURI = tokenURI;\n        setMerkleRoot(_root);\n        _mintCount.reset();\n    }","contract":"ATXDAONFT_V2","time":0},{"type":"constant-restrict-modification  ","before":"string public baseExtension = \".json\";","after":"string public constant baseExtension = \".json\";","contract":"ATXDAONFT_V2","time":1}]}
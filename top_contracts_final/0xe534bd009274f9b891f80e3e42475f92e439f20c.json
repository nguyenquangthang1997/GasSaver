{"time":156,"results":[{"type":"external-function ","before":"function setURI(\n        string memory _URI\n    )\n        external\n        onlyOwner\n    {\n        baseURI = _URI;\n    }","after":"function setURI(\n        string calldata _URI\n    )\n        external\n        onlyOwner\n    {\n        baseURI = _URI;\n    }","contract":"MoodyApeClub","time":0},{"type":"external-function ","before":"function mintNFTDuringPresale(\n        uint32 _numOfTokens,\n        bytes32[] memory _proof\n    )\n        public\n        payable\n    {\n        require(isActive, 'Contract is not active');\n        require(verify(_proof, bytes32(uint256(uint160(msg.sender)))), \"Not whitelisted\");\n\n        if (!isPresaleActive) {\n            require(isPrivateSaleActive, 'Private sale not active');\n            require(msg.value >= privateSalePrice.mul(_numOfTokens), \"Ether value sent is not correct\");\n            require(nftBalances[msg.sender].add(_numOfTokens)<= maxPerWalletPresale, 'Max per wallet reached for this phase');\n\n            mint(msg.sender,_numOfTokens);\n            nftBalances[msg.sender] = nftBalances[msg.sender].add(_numOfTokens);\n            return;\n        }\n\n        require(msg.value >= presalePrice.mul(_numOfTokens), \"Ether value sent is not correct\");\n        require(nftBalances[msg.sender].add(_numOfTokens)<= maxPerWalletPresale, 'Max per wallet reached for this phase');\n\n        mint(msg.sender,_numOfTokens);\n        nftBalances[msg.sender] = nftBalances[msg.sender].add(_numOfTokens);\n    }","after":"function mintNFTDuringPresale(\n        uint32 _numOfTokens,\n        bytes32[] calldata _proof\n    )\n        public\n        payable\n    {\n        require(isActive, 'Contract is not active');\n        require(verify(_proof, bytes32(uint256(uint160(msg.sender)))), \"Not whitelisted\");\n\n        if (!isPresaleActive) {\n            require(isPrivateSaleActive, 'Private sale not active');\n            require(msg.value >= privateSalePrice.mul(_numOfTokens), \"Ether value sent is not correct\");\n            require(nftBalances[msg.sender].add(_numOfTokens)<= maxPerWalletPresale, 'Max per wallet reached for this phase');\n\n            mint(msg.sender,_numOfTokens);\n            nftBalances[msg.sender] = nftBalances[msg.sender].add(_numOfTokens);\n            return;\n        }\n\n        require(msg.value >= presalePrice.mul(_numOfTokens), \"Ether value sent is not correct\");\n        require(nftBalances[msg.sender].add(_numOfTokens)<= maxPerWalletPresale, 'Max per wallet reached for this phase');\n\n        mint(msg.sender,_numOfTokens);\n        nftBalances[msg.sender] = nftBalances[msg.sender].add(_numOfTokens);\n    }","contract":"MoodyApeClub","time":0},{"type":"external-function ","before":"function mintMultipleByOwner(\n        address[] memory _to\n    )\n        public\n        onlyOwner\n    {\n        require(totalSupply.add(_to.length) < MAX_NFT, \"Tokens number to mint cannot exceed number of MAX tokens\");\n        require(giveawayCount.add(_to.length)<=maxGiveaway,\"Cannot do that much giveaway\");\n        for(uint256 i = 0; i < _to.length; i++){\n            mint(_to[i],1);\n        }\n        giveawayCount=giveawayCount.add(_to.length);\n\n    }","after":"function mintMultipleByOwner(\n        address[] calldata _to\n    )\n        public\n        onlyOwner\n    {\n        require(totalSupply.add(_to.length) < MAX_NFT, \"Tokens number to mint cannot exceed number of MAX tokens\");\n        require(giveawayCount.add(_to.length)<=maxGiveaway,\"Cannot do that much giveaway\");\n        for(uint256 i = 0; i < _to.length; i++){\n            mint(_to[i],1);\n        }\n        giveawayCount=giveawayCount.add(_to.length);\n\n    }","contract":"MoodyApeClub","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"MoodyApeClub","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"MoodyApeClub","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public privateSalePrice = 120000000000000000;","after":"uint256 public constant privateSalePrice = 120000000000000000;","contract":"MoodyApeClub","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public presalePrice = 140000000000000000;","after":"uint256 public constant presalePrice = 140000000000000000;","contract":"MoodyApeClub","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public NFTPrice = 180000000000000000;","after":"uint256 public constant NFTPrice = 180000000000000000;","contract":"MoodyApeClub","time":1},{"type":"constant-restrict-modification  ","before":"address private devAddress = 0x0AF3f0461f2bEE2F18f405d0a4463A0cC131723D;","after":"address private constant devAddress = 0x0AF3f0461f2bEE2F18f405d0a4463A0cC131723D;","contract":"MoodyApeClub","time":1}]}
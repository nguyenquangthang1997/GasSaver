{"time":149,"results":[{"type":"external-function ","before":"function presaleMint(uint256 _mintAmount, string memory _signature)\n        public\n        payable\n    {\n        require(!paused, \"Contract is paused\");\n        require(whitelistedSale);\n        require(\n            keccak256(abi.encodePacked((signature))) ==\n                keccak256(abi.encodePacked((_signature))),\n            \"Invalid signature\"\n        );\n        require(msg.sender != owner());\n\n        uint256 supply = totalSupply();\n        uint256 totalAmount;\n\n        uint256 tokenCount = balanceOf(msg.sender);\n\n        require(\n            tokenCount + _mintAmount <= maxMintAmount,\n            string(abi.encodePacked(\"Limit token \", tokenCount.toString()))\n        );\n        require(\n            supply + _mintAmount <= maxSupply - reservedForTeam,\n            \"Max Supply\"\n        );\n\n        totalAmount = cost * _mintAmount;\n\n        require(\n            msg.value >= totalAmount,\n            string(\n                abi.encodePacked(\n                    \"Incorrect amount \",\n                    totalAmount.toString(),\n                    \" \",\n                    msg.value.toString()\n                )\n            )\n        );\n\n        for (uint256 i = 1; i <= _mintAmount; i++) {\n            _safeMint(msg.sender, supply + i);\n        }\n    }","after":"function presaleMint(uint256 _mintAmount, string calldata _signature)\n        public\n        payable\n    {\n        require(!paused, \"Contract is paused\");\n        require(whitelistedSale);\n        require(\n            keccak256(abi.encodePacked((signature))) ==\n                keccak256(abi.encodePacked((_signature))),\n            \"Invalid signature\"\n        );\n        require(msg.sender != owner());\n\n        uint256 supply = totalSupply();\n        uint256 totalAmount;\n\n        uint256 tokenCount = balanceOf(msg.sender);\n\n        require(\n            tokenCount + _mintAmount <= maxMintAmount,\n            string(abi.encodePacked(\"Limit token \", tokenCount.toString()))\n        );\n        require(\n            supply + _mintAmount <= maxSupply - reservedForTeam,\n            \"Max Supply\"\n        );\n\n        totalAmount = cost * _mintAmount;\n\n        require(\n            msg.value >= totalAmount,\n            string(\n                abi.encodePacked(\n                    \"Incorrect amount \",\n                    totalAmount.toString(),\n                    \" \",\n                    msg.value.toString()\n                )\n            )\n        );\n\n        for (uint256 i = 1; i <= _mintAmount; i++) {\n            _safeMint(msg.sender, supply + i);\n        }\n    }","contract":"LordSocietyNFT","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","after":"function setBaseExtension(string calldata _newBaseExtension)\n        public\n        onlyOwner\n    {\n        baseExtension = _newBaseExtension;\n    }","contract":"LordSocietyNFT","time":0},{"type":"external-function ","before":"function setSignature(string memory _signature) public onlyOwner {\n        signature = _signature;\n    }","after":"function setSignature(string calldata _signature) public onlyOwner {\n        signature = _signature;\n    }","contract":"LordSocietyNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxSupply = 7777;","after":"uint256 public constant maxSupply = 7777;","contract":"LordSocietyNFT","time":0}]}
{"time":206,"results":[{"type":"external-function ","before":"function claim(uint256[] memory ids) external nonReentrant whenNotPaused {\n\t\tuint256 count = ids.length;\n\t\trequire(count > 0, \"cannot be Zero\");\n\t\trequire(genesisIndex + count <= OGIndex, \"Cannot exceeds supply\");\n\t\trequire(OGIndex + count <= supply, \"Cannot exceeds supply\");\n\t\trequire(publicMint.balanceOf(msg.sender, 1) == count, \"need to own pass specified\");\n\t\tfor(uint256 i = 0; i < count; i++) {\n\t\t\t_safeMint(msg.sender, genesisIndex + i);\n\t\t\t_safeMint(msg.sender, OGIndex + i);\t\t\t\t\t\t\t\t\t\n\t\t}\n\t\tpublicMint.burnBatch(msg.sender, ids, ids);\n\t\tgenesisIndex += count;\n\t\tOGIndex += count;\n\t\ttotalGenesisClaimed += count;\n\t\temit Claimed(msg.sender, count * 2);\n\t}","after":"function claim(uint256[] calldata ids) external nonReentrant whenNotPaused {\n\t\tuint256 count = ids.length;\n\t\trequire(count > 0, \"cannot be Zero\");\n\t\trequire(genesisIndex + count <= OGIndex, \"Cannot exceeds supply\");\n\t\trequire(OGIndex + count <= supply, \"Cannot exceeds supply\");\n\t\trequire(publicMint.balanceOf(msg.sender, 1) == count, \"need to own pass specified\");\n\t\tfor(uint256 i = 0; i < count; i++) {\n\t\t\t_safeMint(msg.sender, genesisIndex + i);\n\t\t\t_safeMint(msg.sender, OGIndex + i);\t\t\t\t\t\t\t\t\t\n\t\t}\n\t\tpublicMint.burnBatch(msg.sender, ids, ids);\n\t\tgenesisIndex += count;\n\t\tOGIndex += count;\n\t\ttotalGenesisClaimed += count;\n\t\temit Claimed(msg.sender, count * 2);\n\t}","contract":"BowerBirds","time":0},{"type":"external-function ","before":"function earlyClaim(uint256[] memory ids) external nonReentrant whenNotPaused {\n\t\tuint256 count = ids.length;\n\t\trequire(count > 0, \"cannot be Zero\");\n\t\trequire(genesisIndex + count <= OGIndex, \"Cannot exceeds supply\");\n\t\trequire(OGIndex + count <= supply, \"Cannot exceeds supply\");\n\t\trequire(earlyBird.balanceOf(msg.sender, 1) == count, \"need to own pass specified\");\n\t\tfor(uint256 i = 0; i < count; i++) {\t\t\t\t\t\n\t\t\t_safeMint(msg.sender, genesisIndex + i);\t\t\t\n\t\t}\n\t\tfor(uint256 i = 0; i < count * 2; i++) {\n\t\t\t_safeMint(msg.sender, OGIndex + i);\n\t\t}\n\t\tearlyBird.burnBatch(msg.sender, ids, ids);\n\t\tgenesisIndex += count;\n\t\tOGIndex += 2 * count;\n\t\ttotalGenesisClaimed += count;\n\t\temit Claimed(msg.sender, count * 2);\n\t}","after":"function earlyClaim(uint256[] calldata ids) external nonReentrant whenNotPaused {\n\t\tuint256 count = ids.length;\n\t\trequire(count > 0, \"cannot be Zero\");\n\t\trequire(genesisIndex + count <= OGIndex, \"Cannot exceeds supply\");\n\t\trequire(OGIndex + count <= supply, \"Cannot exceeds supply\");\n\t\trequire(earlyBird.balanceOf(msg.sender, 1) == count, \"need to own pass specified\");\n\t\tfor(uint256 i = 0; i < count; i++) {\t\t\t\t\t\n\t\t\t_safeMint(msg.sender, genesisIndex + i);\t\t\t\n\t\t}\n\t\tfor(uint256 i = 0; i < count * 2; i++) {\n\t\t\t_safeMint(msg.sender, OGIndex + i);\n\t\t}\n\t\tearlyBird.burnBatch(msg.sender, ids, ids);\n\t\tgenesisIndex += count;\n\t\tOGIndex += 2 * count;\n\t\ttotalGenesisClaimed += count;\n\t\temit Claimed(msg.sender, count * 2);\n\t}","contract":"BowerBirds","time":0}]}
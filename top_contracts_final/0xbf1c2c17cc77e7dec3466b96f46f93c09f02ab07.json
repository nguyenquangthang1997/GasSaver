{"time":198,"results":[{"type":"external-function ","before":"function setFeeTokens(\n        address[] memory _feeTokenAddr,\n        uint8[] memory _exchangeIndex,\n        address[][] memory _path,\n        uint8[] memory _LFactor,\n        uint8[] memory _RFactor,\n        bool[] memory _enable,\n        uint256[] memory _minBuy,\n        uint256[] memory _maxBuy\n    ) external only_Operator_or_Owner {\n        uint256 inputLength = _feeTokenAddr.length;\n        require(\n            (_exchangeIndex.length == inputLength) &&\n                (_path.length == inputLength) &&\n                (_LFactor.length == inputLength) &&\n                (_RFactor.length == inputLength) &&\n                (_enable.length == inputLength) &&\n                (_minBuy.length == inputLength) &&\n                (_maxBuy.length == inputLength),\n            \"input not the same length\"\n        );\n\n        for (uint256 i = 0; i < inputLength; i++) {\n            try\n                this.setFeeToken(\n                    _feeTokenAddr[i],\n                    _exchangeIndex[i],\n                    _path[i],\n                    _LFactor[i],\n                    _RFactor[i],\n                    _enable[i],\n                    _minBuy[i],\n                    _maxBuy[i]\n                )\n            {\n                continue;\n            } catch Error(string memory reason) {\n                emit SetFeeTokenFailure(_feeTokenAddr[i], reason, bytes(\"\"));\n            } catch (bytes memory lowLevelData) {\n                emit SetFeeTokenFailure(_feeTokenAddr[i], \"\", lowLevelData);\n            }\n        }\n    }","after":"function setFeeTokens(\n        address[] calldata _feeTokenAddr,\n        uint8[] calldata _exchangeIndex,\n        address[][] calldata _path,\n        uint8[] calldata _LFactor,\n        uint8[] calldata _RFactor,\n        bool[] calldata _enable,\n        uint256[] calldata _minBuy,\n        uint256[] calldata _maxBuy\n    ) external only_Operator_or_Owner {\n        uint256 inputLength = _feeTokenAddr.length;\n        require(\n            (_exchangeIndex.length == inputLength) &&\n                (_path.length == inputLength) &&\n                (_LFactor.length == inputLength) &&\n                (_RFactor.length == inputLength) &&\n                (_enable.length == inputLength) &&\n                (_minBuy.length == inputLength) &&\n                (_maxBuy.length == inputLength),\n            \"input not the same length\"\n        );\n\n        for (uint256 i = 0; i < inputLength; i++) {\n            try\n                this.setFeeToken(\n                    _feeTokenAddr[i],\n                    _exchangeIndex[i],\n                    _path[i],\n                    _LFactor[i],\n                    _RFactor[i],\n                    _enable[i],\n                    _minBuy[i],\n                    _maxBuy[i]\n                )\n            {\n                continue;\n            } catch Error(string memory reason) {\n                emit SetFeeTokenFailure(_feeTokenAddr[i], reason, bytes(\"\"));\n            } catch (bytes memory lowLevelData) {\n                emit SetFeeTokenFailure(_feeTokenAddr[i], \"\", lowLevelData);\n            }\n        }\n    }","contract":"RewardDistributor","time":0}]}
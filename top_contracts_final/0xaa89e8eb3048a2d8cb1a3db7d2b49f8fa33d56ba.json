{"time":283,"results":[{"type":"state-data-arrangement ","before":"\nmapping(uint256 => uint256)private level;\nmapping(uint256 => uint256) private exp;\nmapping(uint256 => uint256) private stakeTime;\nmapping(address => uint8) private whiteListsMints;\nmapping(address => bool) private whiteLists;\nmapping(uint256 => uint256) breedFee;\nmapping(uint256 => string) private idName;\nmapping(uint256 => string) private idDescription;\naddress private machinieOld = 0xE6d3e488b9D31943dF6e3B7d82f6F842679a1a8c;\naddress private blackHole = 0x000000000000000000000000000000000000dEaD;\naddress private machinieNew = 0xB826bDe739897ad50363d045d65eE5b83FDb730d ;\naddress private floppy = 0x9F3dDF3309D501FfBDC4587ab11e9D61ADD3126a;\nuint256 private tokenId = 888;\nuint256 private mintFee = 0.068 ether;\nuint256 private changeNameFee = 35 ether;\nuint256 private changeDescFee = 35 ether;\nuint256 private maximumMintAmount = 2562;\nuint256 private maximumBreedAmount = 5388;\nuint256 private upgradeAmount;\nuint256 private totalMintFee;\nuint256 private mintAmount ;\nuint256 private breedAmount  ;\nuint256 private maxSupply = 8888;\nuint256 private expPerLevel =10;\nuint256 private minStakeForExp = 86400;\nuint256 private maxLevel = 5;\nuint256 private tOpenWhiteLists = 1637024400;\nuint256 private tCloseWhiteLists = 1637197200;\nuint256 private tOpenPublicMint = 1637197200;\nuint8 private maximunMintPerTransaction =3;\nuint8 private maximumWhiteListsMint = 2;\nuint16 private maximumNameLength = 20;\nuint16 private maximumDescLength = 300;\nbool private enableStake;\nstring private uri = \"https://api.machinienft.com/api/humach/unrevealed/\";","after":"mapping(uint256 => uint256)private level;\nmapping(uint256 => uint256) private exp;\nmapping(uint256 => uint256) private stakeTime;\nmapping(address => uint8) private whiteListsMints;\nmapping(address => bool) private whiteLists;\nmapping(uint256 => uint256) breedFee;\nmapping(uint256 => string) private idName;\nmapping(uint256 => string) private idDescription;\nuint256 private tokenId = 888;\nuint256 private mintFee = 0.068 ether;\nuint256 private changeNameFee = 35 ether;\nuint256 private changeDescFee = 35 ether;\nuint256 private maximumMintAmount = 2562;\nuint256 private maximumBreedAmount = 5388;\nuint256 private upgradeAmount;\nuint256 private totalMintFee;\nuint256 private mintAmount ;\nuint256 private breedAmount  ;\nuint256 private maxSupply = 8888;\nuint256 private expPerLevel =10;\nuint256 private minStakeForExp = 86400;\nuint256 private maxLevel = 5;\nuint256 private tOpenWhiteLists = 1637024400;\nuint256 private tCloseWhiteLists = 1637197200;\nuint256 private tOpenPublicMint = 1637197200;\nstring private uri = \"https://api.machinienft.com/api/humach/unrevealed/\";\naddress private machinieOld = 0xE6d3e488b9D31943dF6e3B7d82f6F842679a1a8c;\naddress private blackHole = 0x000000000000000000000000000000000000dEaD;\naddress private machinieNew = 0xB826bDe739897ad50363d045d65eE5b83FDb730d ;\naddress private floppy = 0x9F3dDF3309D501FfBDC4587ab11e9D61ADD3126a;\nuint16 private maximumNameLength = 20;\nuint16 private maximumDescLength = 300;\nuint8 private maximunMintPerTransaction =3;\nuint8 private maximumWhiteListsMint = 2;\nbool private enableStake;\n","contract":"Humach","time":16},{"type":"external-function ","before":"function machiniesUpgrade(uint256[] memory tokenIds_ ) external  {\r\n        require(IERC721(machinieOld).isApprovedForAll(_msgSender(), address(this)), \"Humach : Need approve this address for All\");\r\n        for(uint _i =0; _i< tokenIds_.length; _i++)\r\n        {\r\n            require(IERC721(machinieOld).ownerOf(tokenIds_[_i]) == _msgSender() , \"Humach : owner query for nonexistent machinie token\");          \r\n            IERC721(machinieOld).safeTransferFrom(_msgSender(), blackHole, tokenIds_[_i]);\r\n            _safeMint(_msgSender(), tokenIds_[_i]);\r\n            IMachinie(machinieNew).mintMachinie( _msgSender(),tokenIds_[_i]);\r\n            level[tokenIds_[_i]] = 1;\r\n            upgradeAmount++;\r\n        }\r\n    }","after":"function machiniesUpgrade(uint256[] calldata tokenIds_ ) external  {\r\n        require(IERC721(machinieOld).isApprovedForAll(_msgSender(), address(this)), \"Humach : Need approve this address for All\");\r\n        for(uint _i =0; _i< tokenIds_.length; _i++)\r\n        {\r\n            require(IERC721(machinieOld).ownerOf(tokenIds_[_i]) == _msgSender() , \"Humach : owner query for nonexistent machinie token\");          \r\n            IERC721(machinieOld).safeTransferFrom(_msgSender(), blackHole, tokenIds_[_i]);\r\n            _safeMint(_msgSender(), tokenIds_[_i]);\r\n            IMachinie(machinieNew).mintMachinie( _msgSender(),tokenIds_[_i]);\r\n            level[tokenIds_[_i]] = 1;\r\n            upgradeAmount++;\r\n        }\r\n    }","contract":"Humach","time":0},{"type":"external-function ","before":"function stakeHumach (uint256 [] memory tokenIds_) external {\r\n        require(enableStake, \"Humach : Stake function is disable\");\r\n        for(uint8 _i=0; _i< tokenIds_.length; _i++)\r\n        {\r\n            require(ownerOf(tokenIds_[_i]) == _msgSender() , \"Humach : owner query for nonexistent Humach token\");\r\n            require(!staking[tokenIds_[_i]], \"Humach : HumachID is staking\");\r\n            stakeTime[tokenIds_[_i]] = block.timestamp;\r\n            staking[tokenIds_[_i]] = true;\r\n        }\r\n\r\n    }","after":"function stakeHumach (uint256 [] calldata tokenIds_) external {\r\n        require(enableStake, \"Humach : Stake function is disable\");\r\n        for(uint8 _i=0; _i< tokenIds_.length; _i++)\r\n        {\r\n            require(ownerOf(tokenIds_[_i]) == _msgSender() , \"Humach : owner query for nonexistent Humach token\");\r\n            require(!staking[tokenIds_[_i]], \"Humach : HumachID is staking\");\r\n            stakeTime[tokenIds_[_i]] = block.timestamp;\r\n            staking[tokenIds_[_i]] = true;\r\n        }\r\n\r\n    }","contract":"Humach","time":0},{"type":"external-function ","before":"function unStakeHumach (uint256 [] memory tokenIds_) external {\r\n        for(uint8 _i=0; _i< tokenIds_.length; _i++)\r\n        {\r\n            require(ownerOf(tokenIds_[_i]) == _msgSender() , \"Humach : You are not owner of this tokenId\");\r\n            require(staking[tokenIds_[_i]], \"Humach : HumachID is staking\");\r\n            require(stakeTime[tokenIds_[_i]] !=0, \"Humach: is staking with Machinie\" );\r\n        \r\n            (uint256 _level, uint256 _exp) = calculateLevel(tokenIds_[_i]);\r\n            level[tokenIds_[_i]] =_level;\r\n            exp[tokenIds_[_i]] =_exp;\r\n            staking[tokenIds_[_i]] = false;\r\n            stakeTime[tokenIds_[_i]] = 0;\r\n        }\r\n\r\n\r\n    }","after":"function unStakeHumach (uint256 [] calldata tokenIds_) external {\r\n        for(uint8 _i=0; _i< tokenIds_.length; _i++)\r\n        {\r\n            require(ownerOf(tokenIds_[_i]) == _msgSender() , \"Humach : You are not owner of this tokenId\");\r\n            require(staking[tokenIds_[_i]], \"Humach : HumachID is staking\");\r\n            require(stakeTime[tokenIds_[_i]] !=0, \"Humach: is staking with Machinie\" );\r\n        \r\n            (uint256 _level, uint256 _exp) = calculateLevel(tokenIds_[_i]);\r\n            level[tokenIds_[_i]] =_level;\r\n            exp[tokenIds_[_i]] =_exp;\r\n            staking[tokenIds_[_i]] = false;\r\n            stakeTime[tokenIds_[_i]] = 0;\r\n        }\r\n\r\n\r\n    }","contract":"Humach","time":0},{"type":"external-function ","before":"function updateWhiteLists(address [] memory account_, bool status_) external onlyAdmin{\r\n        for(uint _i =0; _i<account_.length; _i++)\r\n        {\r\n            whiteLists[account_[_i]] = status_;\r\n        }\r\n    }","after":"function updateWhiteLists(address [] calldata account_, bool status_) external onlyAdmin{\r\n        for(uint _i =0; _i<account_.length; _i++)\r\n        {\r\n            whiteLists[account_[_i]] = status_;\r\n        }\r\n    }","contract":"Humach","time":0},{"type":"external-function ","before":"function updateTokenName (uint256 tokenId_ ,string memory name_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Humach : owner query for nonexistent Humach token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeNameFee, \"Humach : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeNameFee, \"Humach : allowance Floppy isnot enought\");\r\n        require(bytes(name_).length <= maximumNameLength, \"Humach : Name length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeNameFee);\r\n        idName[tokenId_] = name_;\r\n        emit changeName(tokenId_ , name_, idDescription[tokenId_]);\r\n    }","after":"function updateTokenName (uint256 tokenId_ ,string calldata name_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Humach : owner query for nonexistent Humach token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeNameFee, \"Humach : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeNameFee, \"Humach : allowance Floppy isnot enought\");\r\n        require(bytes(name_).length <= maximumNameLength, \"Humach : Name length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeNameFee);\r\n        idName[tokenId_] = name_;\r\n        emit changeName(tokenId_ , name_, idDescription[tokenId_]);\r\n    }","contract":"Humach","time":0},{"type":"external-function ","before":"function updateTokenDescription (uint256 tokenId_  ,string memory description_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Humach : owner query for nonexistent Humach token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeDescFee, \"Humach : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeDescFee, \"Humach : allowance Floppy isnot enought\");\r\n        require(bytes(description_).length <= maximumDescLength, \"Humach : Description length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeDescFee);\r\n        idDescription[tokenId_] = description_;\r\n        emit changeName(tokenId_ , idName[tokenId_], description_);\r\n    }","after":"function updateTokenDescription (uint256 tokenId_  ,string calldata description_ ) external  {\r\n        require(ownerOf(tokenId_) == _msgSender() , \"Humach : owner query for nonexistent Humach token\");\r\n        require(IERC20(floppy).balanceOf(_msgSender()) >= changeDescFee, \"Humach : BalanceOf Floppy is not enought\");\r\n        require(IERC20(floppy).allowance(_msgSender(), address(this)) >= changeDescFee, \"Humach : allowance Floppy isnot enought\");\r\n        require(bytes(description_).length <= maximumDescLength, \"Humach : Description length is over Limit\");\r\n\r\n        IERC20(floppy).transferFrom(_msgSender(), blackHole, changeDescFee);\r\n        idDescription[tokenId_] = description_;\r\n        emit changeName(tokenId_ , idName[tokenId_], description_);\r\n    }","contract":"Humach","time":0},{"type":"external-function ","before":"function updateLevel(uint256 [] memory tokenId_, uint256  level_) external onlyAdmin{\r\n        for(uint _i =0; _i<tokenId_.length; _i++)\r\n        {\r\n            level[tokenId_[_i]] = level_;\r\n        }\r\n    }","after":"function updateLevel(uint256 [] calldata tokenId_, uint256  level_) external onlyAdmin{\r\n        for(uint _i =0; _i<tokenId_.length; _i++)\r\n        {\r\n            level[tokenId_[_i]] = level_;\r\n        }\r\n    }","contract":"Humach","time":0},{"type":"external-function ","before":"function updateBaseURI(string memory baseURI_)external onlyOwner{\r\n        uri = baseURI_;\r\n    }","after":"function updateBaseURI(string calldata baseURI_)external onlyOwner{\r\n        uri = baseURI_;\r\n    }","contract":"Humach","time":0},{"type":"constant-restrict-modification  ","before":"address private blackHole = 0x000000000000000000000000000000000000dEaD;","after":"address private constant blackHole = 0x000000000000000000000000000000000000dEaD;","contract":"Humach","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private maxSupply = 8888;","after":"uint256 private constant maxSupply = 8888;","contract":"Humach","time":1},{"type":"constant-restrict-modification  ","before":"uint8 private maximumWhiteListsMint = 2;","after":"uint8 private constant maximumWhiteListsMint = 2;","contract":"Humach","time":1}]}
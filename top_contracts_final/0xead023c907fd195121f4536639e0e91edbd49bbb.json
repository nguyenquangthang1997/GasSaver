{"time":67,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nuint256[] public stakedNFTs;\nmapping(uint256 => StakedNFT) public stakedInfo;\naddress public nft;","after":"uint256[] public stakedNFTs;\nmapping(uint256 => StakedNFT) public stakedInfo;\naddress public nft;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n","contract":"KnightStaking","time":0},{"type":"external-function ","before":"function batchStakeNFT(uint256[] memory tokenIDs) external{\n      uint256 tokenID = 0;\n      for(uint256 i=0; i<tokenIDs.length; i++){\n         tokenID = tokenIDs[i];\n         require(IERC721(nft).ownerOf(tokenID)==msg.sender, \"Staking: Not the NFT owner!\");\n         require(IERC721(nft).isApprovedForAll(msg.sender, address(this)), \"Staking:Staking contract not set as operator!\");\n        IERC721(nft).safeTransferFrom(msg.sender, address(this), tokenID);\n        _stakeNFT(tokenID);\n      }\n  }","after":"function batchStakeNFT(uint256[] calldata tokenIDs) external{\n      uint256 tokenID = 0;\n      for(uint256 i=0; i<tokenIDs.length; i++){\n         tokenID = tokenIDs[i];\n         require(IERC721(nft).ownerOf(tokenID)==msg.sender, \"Staking: Not the NFT owner!\");\n         require(IERC721(nft).isApprovedForAll(msg.sender, address(this)), \"Staking:Staking contract not set as operator!\");\n        IERC721(nft).safeTransferFrom(msg.sender, address(this), tokenID);\n        _stakeNFT(tokenID);\n      }\n  }","contract":"KnightStaking","time":0},{"type":"external-function ","before":"function batchUnStakeNFT(uint256[] memory tokenIDs) external{\n      uint256 tokenID = 0;\n      for(uint256 i=0; i<tokenIDs.length; i++){\n         tokenID = tokenIDs[i];\n         claimReward(tokenID);\n         IERC721(nft).safeTransferFrom(address(this), msg.sender, tokenID);\n         _unstakeNFT(tokenID);\n      }\n  }","after":"function batchUnStakeNFT(uint256[] calldata tokenIDs) external{\n      uint256 tokenID = 0;\n      for(uint256 i=0; i<tokenIDs.length; i++){\n         tokenID = tokenIDs[i];\n         claimReward(tokenID);\n         IERC721(nft).safeTransferFrom(address(this), msg.sender, tokenID);\n         _unstakeNFT(tokenID);\n      }\n  }","contract":"KnightStaking","time":0},{"type":"immutable-restrict-modification ","before":"address public nft;","after":"address public immutable nft;","contract":"KnightStaking","time":0}]}
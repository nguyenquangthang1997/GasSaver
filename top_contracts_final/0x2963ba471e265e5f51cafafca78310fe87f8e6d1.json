{"time":262,"results":[{"type":"state-data-arrangement ","before":"\n   address public oboAdm\n   uint256 constant public newAddressWaitPeriod = 1 da\n   bool public canAddOBOImmediately = tr\n   mapping (address => uint256) public approvedOB","after":"   uint256 constant public newAddressWaitPeriod = 1 da\n   mapping (address => uint256) public approvedOB\n   address public oboAdm\n   bool public canAddOBOImmediately = tr\n","contract":"OBOControl","time":0},{"type":"external-function ","before":"   function createDigitalMediaAndReleases(\n            DigitalMediaCreateRequest memory request,\n            bytes calldata signature)\n            external\n            whenNotPaused {\n        require(request.creator == msg.sender, \"msgSender != creator\");\n        ChainSignatureRequest memory signatureRequest = ChainSignatureRequest(request.onchainId, request.creator);\n        _verifyReleaseRequestSignature(signatureRequest, signature);\n        uint256 digitalMediaId = _createDigitalMedia(msg.sender, request.onchainId, request.totalSupply,\n            request.metadataPath, request.collaborators, request.royalty, request.immutableMedia);\n        _createDigitalMediaReleases(msg.sender, digitalMediaId, request.releaseIds);\n  ","after":"   function createDigitalMediaAndReleases(\n            DigitalMediaCreateRequest calldata request,\n            bytes calldata signature)\n            external\n            whenNotPaused {\n        require(request.creator == msg.sender, \"msgSender != creator\");\n        ChainSignatureRequest memory signatureRequest = ChainSignatureRequest(request.onchainId, request.creator);\n        _verifyReleaseRequestSignature(signatureRequest, signature);\n        uint256 digitalMediaId = _createDigitalMedia(msg.sender, request.onchainId, request.totalSupply,\n            request.metadataPath, request.collaborators, request.royalty, request.immutableMedia);\n        _createDigitalMediaReleases(msg.sender, digitalMediaId, request.releaseIds);\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function createDigitalMediaReleases(\n            DigitalMediaReleaseCreateRequest memory request)\n            external\n            whenNotPaused {\n        // require(request.owner == msg.sender, \"owner != msg.sender\");\n        require(signerAddress != address(0), \"signer not set\");\n        _createDigitalMediaReleases(msg.sender, request.digitalMediaId, request.releaseIds);\n  ","after":"   function createDigitalMediaReleases(\n            DigitalMediaReleaseCreateRequest calldata request)\n            external\n            whenNotPaused {\n        // require(request.owner == msg.sender, \"owner != msg.sender\");\n        require(signerAddress != address(0), \"signer not set\");\n        _createDigitalMediaReleases(msg.sender, request.digitalMediaId, request.releaseIds);\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function oboCreateDigitalMediaAndReleases(\n                DigitalMediaCreateRequest memory request)\n            external\n            whenNotPaused\n            isApprovedOBO {\n        uint256 digitalMediaId = _createDigitalMedia(request.creator, request.onchainId, request.totalSupply, request.metadataPath,\n            request.collaborators, request.royalty, request.immutableMedia);\n        _createDigitalMediaReleases(request.creator, digitalMediaId, request.releaseIds);\n  ","after":"   function oboCreateDigitalMediaAndReleases(\n                DigitalMediaCreateRequest calldata request)\n            external\n            whenNotPaused\n            isApprovedOBO {\n        uint256 digitalMediaId = _createDigitalMedia(request.creator, request.onchainId, request.totalSupply, request.metadataPath,\n            request.collaborators, request.royalty, request.immutableMedia);\n        _createDigitalMediaReleases(request.creator, digitalMediaId, request.releaseIds);\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function oboCreateManyDigitalMedias(\n            DigitalMediaCreateRequest[] memory requests) external whenNotPaused isApprovedOBO {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaCreateRequest memory request = requests[i];\n            _createDigitalMedia(request.creator, request.onchainId, request.totalSupply,\n                request.metadataPath, request.collaborators, request.royalty, request.immutableMedia);\n        }\n  ","after":"   function oboCreateManyDigitalMedias(\n            DigitalMediaCreateRequest[] calldata requests) external whenNotPaused isApprovedOBO {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaCreateRequest memory request = requests[i];\n            _createDigitalMedia(request.creator, request.onchainId, request.totalSupply,\n                request.metadataPath, request.collaborators, request.royalty, request.immutableMedia);\n        }\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function oboCreateDigitalMediaReleases(\n                DigitalMediaReleaseCreateRequest memory request)\n            external\n            whenNotPaused\n            isApprovedOBO {\n        _createDigitalMediaReleases(request.owner, request.digitalMediaId, request.releaseIds);\n  ","after":"   function oboCreateDigitalMediaReleases(\n                DigitalMediaReleaseCreateRequest calldata request)\n            external\n            whenNotPaused\n            isApprovedOBO {\n        _createDigitalMediaReleases(request.owner, request.digitalMediaId, request.releaseIds);\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function oboCreateManyDigitalMediasAndReleases(\n        DigitalMediaCreateRequest[] memory requests) external whenNotPaused isApprovedOBO {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaCreateRequest memory request = requests[i];\n            uint256 digitalMediaId = _createDigitalMedia(request.creator, request.onchainId, request.totalSupply,\n                request.metadataPath, request.collaborators, request.royalty, request.immutableMedia);\n            _createDigitalMediaReleases(request.creator, digitalMediaId, request.releaseIds);\n        }\n  ","after":"   function oboCreateManyDigitalMediasAndReleases(\n        DigitalMediaCreateRequest[] calldata requests) external whenNotPaused isApprovedOBO {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaCreateRequest memory request = requests[i];\n            uint256 digitalMediaId = _createDigitalMedia(request.creator, request.onchainId, request.totalSupply,\n                request.metadataPath, request.collaborators, request.royalty, request.immutableMedia);\n            _createDigitalMediaReleases(request.creator, digitalMediaId, request.releaseIds);\n        }\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function oboCreateManyReleases(\n        DigitalMediaReleaseCreateRequest[] memory requests) external whenNotPaused isApprovedOBO {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaReleaseCreateRequest memory request = requests[i];\n            DigitalMedia storage _digitalMedia = idToDigitalMedia[request.digitalMediaId];\n            require(_digitalMedia.creator != address(0), \"DigitalMedia not found.\");\n            _createDigitalMediaReleases(request.owner, request.digitalMediaId, request.releaseIds);\n        }\n  ","after":"   function oboCreateManyReleases(\n        DigitalMediaReleaseCreateRequest[] calldata requests) external whenNotPaused isApprovedOBO {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaReleaseCreateRequest memory request = requests[i];\n            DigitalMedia storage _digitalMedia = idToDigitalMedia[request.digitalMediaId];\n            require(_digitalMedia.creator != address(0), \"DigitalMedia not found.\");\n            _createDigitalMediaReleases(request.owner, request.digitalMediaId, request.releaseIds);\n        }\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function safeTransferMany(TokenDestinationRequest[] memory requests) external whenNotPaused {\n        for (uint32 i=0; i < requests.length; i++) {\n            TokenDestinationRequest memory request = requests[i];\n            safeTransferFrom(ownerOf(request.tokenId), request.destinationAddress, request.tokenId);\n        }\n  ","after":"   function safeTransferMany(TokenDestinationRequest[] calldata requests) external whenNotPaused {\n        for (uint32 i=0; i < requests.length; i++) {\n            TokenDestinationRequest memory request = requests[i];\n            safeTransferFrom(ownerOf(request.tokenId), request.destinationAddress, request.tokenId);\n        }\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function updateMedia(DigitalMediaUpdateRequest memory request) external {\n        require(request.creator == msg.sender, \"msgSender != creator\");\n        DigitalMedia storage _digitalMedia = idToDigitalMedia[request.onchainId];\n        require(_digitalMedia.creator != address(0) && _digitalMedia.creator == msg.sender,\n            \"DM creator issue\");\n        _updateDigitalMedia(request, _digitalMedia);\n  ","after":"   function updateMedia(DigitalMediaUpdateRequest calldata request) external {\n        require(request.creator == msg.sender, \"msgSender != creator\");\n        DigitalMedia storage _digitalMedia = idToDigitalMedia[request.onchainId];\n        require(_digitalMedia.creator != address(0) && _digitalMedia.creator == msg.sender,\n            \"DM creator issue\");\n        _updateDigitalMedia(request, _digitalMedia);\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function updateManyMedias(DigitalMediaUpdateRequest[] memory requests)\n            external whenNotPaused isApprovedOBO vaultInitialized {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaUpdateRequest memory request = requests[i];\n            DigitalMedia storage _digitalMedia = idToDigitalMedia[request.onchainId];\n            // Call creator registry to check if the creator gave approveAll to vault\n            require(_digitalMedia.creator != address(0) && _digitalMedia.creator == request.creator,\n                \"DM creator\");\n            require(isApprovedForAll(_digitalMedia.creator, address(vaultStore)) == true, \"approveall missing\");\n            _updateDigitalMedia(request, _digitalMedia);\n        }\n  ","after":"   function updateManyMedias(DigitalMediaUpdateRequest[] calldata requests)\n            external whenNotPaused isApprovedOBO vaultInitialized {\n        for (uint32 i=0; i < requests.length; i++) {\n            DigitalMediaUpdateRequest memory request = requests[i];\n            DigitalMedia storage _digitalMedia = idToDigitalMedia[request.onchainId];\n            // Call creator registry to check if the creator gave approveAll to vault\n            require(_digitalMedia.creator != address(0) && _digitalMedia.creator == request.creator,\n                \"DM creator\");\n            require(isApprovedForAll(_digitalMedia.creator, address(vaultStore)) == true, \"approveall missing\");\n            _updateDigitalMedia(request, _digitalMedia);\n        }\n  ","contract":"DigitalMediaCore","time":0},{"type":"external-function ","before":"   function makeMediasImmutable(uint256[] memory mediaIds) external whenNotPaused isApprovedOBO vaultInitialized {\n        for (uint32 i=0; i < mediaIds.length; i++) {\n            uint256 mediaId = mediaIds[i];\n            DigitalMedia storage _digitalMedia = idToDigitalMedia[mediaId];\n            require(_digitalMedia.creator != address(0), \"DM not found.\");\n            require(_digitalMedia.immutableMedia == false, \"DM immutable\");\n            require(isApprovedForAll(_digitalMedia.creator, address(vaultStore)) == true, \"approveall missing\");\n            _digitalMedia.immutableMedia = true;\n        }\n        emit MediasImmutableEvent(mediaIds);\n  ","after":"   function makeMediasImmutable(uint256[] calldata mediaIds) external whenNotPaused isApprovedOBO vaultInitialized {\n        for (uint32 i=0; i < mediaIds.length; i++) {\n            uint256 mediaId = mediaIds[i];\n            DigitalMedia storage _digitalMedia = idToDigitalMedia[mediaId];\n            require(_digitalMedia.creator != address(0), \"DM not found.\");\n            require(_digitalMedia.immutableMedia == false, \"DM immutable\");\n            require(isApprovedForAll(_digitalMedia.creator, address(vaultStore)) == true, \"approveall missing\");\n            _digitalMedia.immutableMedia = true;\n        }\n        emit MediasImmutableEvent(mediaIds);\n  ","contract":"DigitalMediaCore","time":0}]}
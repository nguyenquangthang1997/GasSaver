{"time":205,"results":[{"type":"state-data-arrangement ","before":"\nbool public isSaleActive = false;\nuint256 constant public maxMintAtOnce = 50;\naddress constant public traceBurnAddress = 0x0000000000000000000000000000000000000000;\naddress constant public fragmentBurnAddress = 0x000000000000000000000000000000000000dEaD;\naddress public traceContract;\nuint256 constant public tracePerTemple = 100;\naddress public fragmentContract;\nuint256 constant public fragmentPerTemple = 1;\nuint256 constant public fragmentId = 1;\nuint256 constant public maxTemplesFromFragments = 1477;\nuint256 constant public maxTemplesFromTrace = 9706;\nuint256 public currFragmentTempleIDPointer = 0;\nuint256 public currTraceTempleIDPointer = maxTemplesFromFragments;\nstring public baseURI;","after":"uint256 constant public maxMintAtOnce = 50;\nuint256 constant public tracePerTemple = 100;\nuint256 constant public fragmentPerTemple = 1;\nuint256 constant public fragmentId = 1;\nuint256 constant public maxTemplesFromFragments = 1477;\nuint256 constant public maxTemplesFromTrace = 9706;\nuint256 public currFragmentTempleIDPointer = 0;\nuint256 public currTraceTempleIDPointer = maxTemplesFromFragments;\nstring public baseURI;\naddress constant public traceBurnAddress = 0x0000000000000000000000000000000000000000;\naddress constant public fragmentBurnAddress = 0x000000000000000000000000000000000000dEaD;\naddress public traceContract;\naddress public fragmentContract;\nbool public isSaleActive = false;\n","contract":"Temple","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI_) external onlyOwner {\n        baseURI = baseURI_;\n    }","after":"function setBaseURI(string calldata baseURI_) external onlyOwner {\n        baseURI = baseURI_;\n    }","contract":"Temple","time":0},{"type":"external-function ","before":"function initializeSale(address traceContract_, address fragmentContract_, string memory baseURI_) public onlyOwner {\n        require(!isSaleActive, \"First disable Temple Minting to re-initialize.\");\n\n        traceContract = traceContract_;\n        fragmentContract = fragmentContract_;\n        baseURI = baseURI_;\n\n        emit Initialize();\n    }","after":"function initializeSale(address traceContract_, address fragmentContract_, string calldata baseURI_) public onlyOwner {\n        require(!isSaleActive, \"First disable Temple Minting to re-initialize.\");\n\n        traceContract = traceContract_;\n        fragmentContract = fragmentContract_;\n        baseURI = baseURI_;\n\n        emit Initialize();\n    }","contract":"Temple","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"ERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"ERC1155","time":0}]}
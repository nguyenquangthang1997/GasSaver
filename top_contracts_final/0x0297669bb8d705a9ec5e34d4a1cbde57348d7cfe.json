{"time":195,"results":[{"type":"external-function ","before":"function presaleMint(uint256 tokenCount, bytes memory signature, bool ambassador) public payable {\r\n      require(!(_publicSaleIsActive), \"Public Sale is active\");\r\n      require(_presaleIsActive, \"Pre-Sale not active yet\");\r\n      require(verify(msg.sender, signature, ambassador), \"You are not on the Presale List\");\r\n      if(!(ambassador)) {\r\n        require(_mintPrice * tokenCount <= msg.value, \"Incorrect Ether value sent\");\r\n      }\r\n      else{\r\n        require(_discMintPrice * tokenCount <= msg.value, \"Incorrect discount Ether value sent\");\r\n      }\r\n\r\n      _presaleMintCount[msg.sender] += tokenCount;\r\n      require(_presaleMintCount[msg.sender] <= _maxPresaleCount, \"Exceeds max allowed limit\");\r\n\r\n      MintFBH(tokenCount);\r\n      (bool sent, bytes memory data) = payable(_multiSig).call{value: msg.value}(\"\");\r\n      require(sent, \"Failed to send Ether\");\r\n      emit PresaleEvent(tokenCount, msg.value, ambassador);\r\n    }","after":"function presaleMint(uint256 tokenCount, bytes calldata signature, bool ambassador) public payable {\r\n      require(!(_publicSaleIsActive), \"Public Sale is active\");\r\n      require(_presaleIsActive, \"Pre-Sale not active yet\");\r\n      require(verify(msg.sender, signature, ambassador), \"You are not on the Presale List\");\r\n      if(!(ambassador)) {\r\n        require(_mintPrice * tokenCount <= msg.value, \"Incorrect Ether value sent\");\r\n      }\r\n      else{\r\n        require(_discMintPrice * tokenCount <= msg.value, \"Incorrect discount Ether value sent\");\r\n      }\r\n\r\n      _presaleMintCount[msg.sender] += tokenCount;\r\n      require(_presaleMintCount[msg.sender] <= _maxPresaleCount, \"Exceeds max allowed limit\");\r\n\r\n      MintFBH(tokenCount);\r\n      (bool sent, bytes memory data) = payable(_multiSig).call{value: msg.value}(\"\");\r\n      require(sent, \"Failed to send Ether\");\r\n      emit PresaleEvent(tokenCount, msg.value, ambassador);\r\n    }","contract":"FishbowlHeads","time":0},{"type":"constant-restrict-modification  ","before":"uint256   public _ecMaxSupply               = 2000;","after":"uint256   public constant _ecMaxSupply               = 2000;","contract":"FishbowlHeads","time":1},{"type":"immutable-restrict-modification ","before":"address   public _dustToken;","after":"address   public immutable _dustToken;","contract":"FishbowlHeads","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private _teamTokenCount       = 24;","after":"uint256 private constant _teamTokenCount       = 24;","contract":"FishbowlHeads","time":1}]}
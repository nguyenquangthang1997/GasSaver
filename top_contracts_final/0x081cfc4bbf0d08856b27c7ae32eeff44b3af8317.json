{"time":336,"results":[{"type":"external-function ","before":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public onlyRole(MINTER_ROLE) whenNotPaused {\n        _mint(account, id, amount, data);\n    }","after":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public onlyRole(MINTER_ROLE) whenNotPaused {\n        _mint(account, id, amount, data);\n    }","contract":"DeepSkyNetwork","time":0},{"type":"external-function ","before":"function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public onlyRole(MINTER_ROLE) whenNotPaused {\n        _mintBatch(to, ids, amounts, data);\n    }","after":"function mintBatch(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public onlyRole(MINTER_ROLE) whenNotPaused {\n        _mintBatch(to, ids, amounts, data);\n    }","contract":"DeepSkyNetwork","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public override whenNotPaused {\n        ERC1155Burnable.burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public override whenNotPaused {\n        ERC1155Burnable.burnBatch(account, ids, values);\n    }","contract":"DeepSkyNetwork","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) public onlyRole(URI_SETTER_ROLE) {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) public onlyRole(URI_SETTER_ROLE) {\n        _setURI(newuri);\n    }","contract":"DeepSkyNetwork","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"DeepSkyNetwork","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"DeepSkyNetwork","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"DeepSkyNetwork","time":0},{"type":"state-data-arrangement ","before":"\nstring public PROVENANCE_HASH = \"\";\nuint256 public MAX_GLITCHES;\nuint256 public OFFSET_VALUE;\nbool public METADATA_FROZEN;\nbool public PROVENANCE_FROZEN;\nstring public baseUri;\nbool public saleIsActive;\nuint256 public mintPrice;\nuint256 public maxPerMint;","after":"string public PROVENANCE_HASH = \"\";\nuint256 public MAX_GLITCHES;\nuint256 public OFFSET_VALUE;\nstring public baseUri;\nuint256 public mintPrice;\nuint256 public maxPerMint;\nbool public METADATA_FROZEN;\nbool public PROVENANCE_FROZEN;\nbool public saleIsActive;\n","contract":"TheLostGlitches","time":0},{"type":"external-function ","before":"function setBaseUri(string memory _baseUri) external onlyOwner whenMetadataNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n    }","after":"function setBaseUri(string calldata _baseUri) external onlyOwner whenMetadataNotFrozen {\n        baseUri = _baseUri;\n        emit SetBaseUri(baseUri);\n    }","contract":"TheLostGlitches","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyOwner whenMetadataNotFrozen {\n        super._setTokenURI(tokenId, _tokenURI);\n    }","after":"function setTokenURI(uint256 tokenId, string calldata _tokenURI) external onlyOwner whenMetadataNotFrozen {\n        super._setTokenURI(tokenId, _tokenURI);\n    }","contract":"TheLostGlitches","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory _provenanceHash) external onlyOwner whenProvenanceNotFrozen {\n        PROVENANCE_HASH = _provenanceHash;\n    }","after":"function setProvenanceHash(string calldata _provenanceHash) external onlyOwner whenProvenanceNotFrozen {\n        PROVENANCE_HASH = _provenanceHash;\n    }","contract":"TheLostGlitches","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public MAX_GLITCHES;","after":"uint256 public immutable MAX_GLITCHES;","contract":"TheLostGlitches","time":1}]}
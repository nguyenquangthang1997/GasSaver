{"time":138,"results":[{"type":"external-function ","before":"function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) public onlyOwner {\n        _setURI(newuri);\n    }","contract":"NonFungibleLifetimeMembership","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"NonFungibleLifetimeMembership","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"NonFungibleLifetimeMembership","time":0},{"type":"constant-restrict-modification  ","before":"uint16 public SUPPLY = 1000;","after":"uint16 public constant SUPPLY = 1000;","contract":"NonFungibleLifetimeMembership","time":1},{"type":"constant-restrict-modification  ","before":"uint8 public RESERVED_SUPPLY = 20;","after":"uint8 public constant RESERVED_SUPPLY = 20;","contract":"NonFungibleLifetimeMembership","time":1},{"type":"constant-restrict-modification  ","before":"uint8 public MAX_MINT_PER_TX = 3;","after":"uint8 public constant MAX_MINT_PER_TX = 3;","contract":"NonFungibleLifetimeMembership","time":1},{"type":"constant-restrict-modification  ","before":"uint8 FOUNDING_MEMBERS_CLAIMABLE = 2;","after":"uint8 constant FOUNDING_MEMBERS_CLAIMABLE = 2;","contract":"NonFungibleLifetimeMembership","time":1},{"type":"constant-restrict-modification  ","before":"uint8 TOKEN_INDEX = 0;","after":"uint8 constant TOKEN_INDEX = 0;","contract":"NonFungibleLifetimeMembership","time":1},{"type":"immutable-restrict-modification ","before":"address public foundingMembershipContractAddress;","after":"address public immutable foundingMembershipContractAddress;","contract":"NonFungibleLifetimeMembership","time":1}]}
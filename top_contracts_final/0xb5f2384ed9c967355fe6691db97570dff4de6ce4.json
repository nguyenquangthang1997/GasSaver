{"time":138,"results":[{"type":"external-function ","before":"function mintAndRelease(uint256 runnerId, string memory _tokenURI)\n        external\n        payable\n    {\n        mint(runnerId, _tokenURI);\n        sealTokenForCreator(runnerId);\n    }","after":"function mintAndRelease(uint256 runnerId, string calldata _tokenURI)\n        external\n        payable\n    {\n        mint(runnerId, _tokenURI);\n        sealTokenForCreator(runnerId);\n    }","contract":"SyntheticRunners","time":0},{"type":"external-function ","before":"function release(uint256 runnerId, string memory _tokenURI)\n        external\n        onlyOwnerOrCreator\n        creatorCanUpdateToken(runnerId)\n        nonReentrant\n    {\n        _setTokenURI(runnerId, _tokenURI);\n        sealTokenForCreator(runnerId);\n    }","after":"function release(uint256 runnerId, string calldata _tokenURI)\n        external\n        onlyOwnerOrCreator\n        creatorCanUpdateToken(runnerId)\n        nonReentrant\n    {\n        _setTokenURI(runnerId, _tokenURI);\n        sealTokenForCreator(runnerId);\n    }","contract":"SyntheticRunners","time":0},{"type":"external-function ","before":"function airdrop(\n        address[] memory addresses,\n        uint256[] memory runnerIds,\n        string[] memory tokenURIs\n    ) external onlyOwnerOrCreator nonReentrant {\n        require(\n            addresses.length == runnerIds.length &&\n                addresses.length == tokenURIs.length,\n            \"DerivedRunner: length mismatch\"\n        );\n\n        for (uint32 i = 0; i < addresses.length; i++) {\n            address to = addresses[i];\n            uint256 runnerId = runnerIds[i];\n            string memory _tokenURI = tokenURIs[i];\n\n            mintToAddress(to, runnerId, _tokenURI);\n        }\n    }","after":"function airdrop(\n        address[] calldata addresses,\n        uint256[] calldata runnerIds,\n        string[] calldata tokenURIs\n    ) external onlyOwnerOrCreator nonReentrant {\n        require(\n            addresses.length == runnerIds.length &&\n                addresses.length == tokenURIs.length,\n            \"DerivedRunner: length mismatch\"\n        );\n\n        for (uint32 i = 0; i < addresses.length; i++) {\n            address to = addresses[i];\n            uint256 runnerId = runnerIds[i];\n            string memory _tokenURI = tokenURIs[i];\n\n            mintToAddress(to, runnerId, _tokenURI);\n        }\n    }","contract":"SyntheticRunners","time":0}]}
{"time":214,"results":[{"type":"struct-data-arrangement ","before":"\naddress to\nuint value\nbytes data\nbool executed\nmapping(address => bool) isConfirmed\nuint numConfirmations","after":"uint value\nbytes data\nmapping(address => bool) isConfirmed\nuint numConfirmations\naddress to\nbool executed\n","contract":"MultiSigWallet","time":0},{"type":"external-function ","before":"function submitTransaction(address _to, uint _value, bytes memory _data)\n        public\n        onlyOwner\n    {\n        uint txIndex = transactions.length;\n\n        transactions.push(Transaction({\n            to: _to,\n            value: _value,\n            data: _data,\n            executed: false,\n            numConfirmations: 0\n        }));\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }","after":"function submitTransaction(address _to, uint _value, bytes calldata _data)\n        public\n        onlyOwner\n    {\n        uint txIndex = transactions.length;\n\n        transactions.push(Transaction({\n            to: _to,\n            value: _value,\n            data: _data,\n            executed: false,\n            numConfirmations: 0\n        }));\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }","contract":"MultiSigWallet","time":0},{"type":"external-function ","before":"function dropToken(address[] memory receivers, uint256[] memory values) public {\n    require(receivers.length != 0);\n    require(receivers.length == values.length);\n\n    for (uint256 i = 0; i < receivers.length; i++) {\n      address receiver = receivers[i];\n      uint256 amount = values[i];\n\n      transfer(receiver, amount);\n      airDropHistory[receiver] += amount;\n\n      emit AirDrop(receiver, amount);\n    }\n  }","after":"function dropToken(address[] calldata receivers, uint256[] calldata values) public {\n    require(receivers.length != 0);\n    require(receivers.length == values.length);\n\n    for (uint256 i = 0; i < receivers.length; i++) {\n      address receiver = receivers[i];\n      uint256 amount = values[i];\n\n      transfer(receiver, amount);\n      airDropHistory[receiver] += amount;\n\n      emit AirDrop(receiver, amount);\n    }\n  }","contract":"QuiztokToken","time":0},{"type":"external-function ","before":"function multiTransfer(address[] memory _to, uint256[] memory _amount) onlyOwner public returns (bool) {\n        _multiTransfer(_to, _amount);\n    \n        return true;\n    }","after":"function multiTransfer(address[] calldata _to, uint256[] calldata _amount) onlyOwner public returns (bool) {\n        _multiTransfer(_to, _amount);\n    \n        return true;\n    }","contract":"QuiztokToken","time":0}]}
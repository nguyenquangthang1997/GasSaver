{"time":206,"results":[{"type":"external-function ","before":"function setPartnerBatch(uint256 _tokenID,  address[] memory _partners, uint256[] memory _limits) external onlyOwner {\n        require(_partners.length == _limits.length, \"Array params must have equal length\");\n        require(_partners.length <= 256, \"Not more than 256\");\n        for (uint8 i; i < _partners.length; i ++) {\n            _setPartner(_tokenID, _partners[i], _limits[i]);\n        }\n    }","after":"function setPartnerBatch(uint256 _tokenID,  address[] calldata _partners, uint256[] calldata _limits) external onlyOwner {\n        require(_partners.length == _limits.length, \"Array params must have equal length\");\n        require(_partners.length <= 256, \"Not more than 256\");\n        for (uint8 i; i < _partners.length; i ++) {\n            _setPartner(_tokenID, _partners[i], _limits[i]);\n        }\n    }","contract":"Modifiers1155","time":0},{"type":"external-function ","before":"function createNewBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256[] memory _mintPrice,\n        uint256[] memory _maxBuyPerTx,\n        uint256[] memory _maxMintPerTx,\n        uint256[] memory _stopMintAfter,\n        uint256[] memory _maxTotalSupply) external onlyOwner {\n        require(ids.length == _mintPrice.length, \"mintPrice params must have equal length\");\n        require(ids.length == _maxBuyPerTx.length, \"maxBuyPerTx params must have equal length\");\n        require(ids.length == _maxMintPerTx.length, \"maxMintPerTx params must have equal length\");\n        require(ids.length == _stopMintAfter.length, \"stopMintAfter params must have equal length\");\n        require(ids.length == _maxTotalSupply.length, \"maxTotalSupply params must have equal length\");\n        _mintBatch(account, ids, amounts, bytes('0'));\n\n        for(uint256 i=0; i<ids.length; i++) {\n            _setTokenReq(ids[i], _mintPrice[i],_maxBuyPerTx[i], _maxMintPerTx[i], _stopMintAfter[i], _maxTotalSupply[i]);\n        }\n\n    }","after":"function createNewBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        uint256[] calldata _mintPrice,\n        uint256[] calldata _maxBuyPerTx,\n        uint256[] calldata _maxMintPerTx,\n        uint256[] calldata _stopMintAfter,\n        uint256[] calldata _maxTotalSupply) external onlyOwner {\n        require(ids.length == _mintPrice.length, \"mintPrice params must have equal length\");\n        require(ids.length == _maxBuyPerTx.length, \"maxBuyPerTx params must have equal length\");\n        require(ids.length == _maxMintPerTx.length, \"maxMintPerTx params must have equal length\");\n        require(ids.length == _stopMintAfter.length, \"stopMintAfter params must have equal length\");\n        require(ids.length == _maxTotalSupply.length, \"maxTotalSupply params must have equal length\");\n        _mintBatch(account, ids, amounts, bytes('0'));\n\n        for(uint256 i=0; i<ids.length; i++) {\n            _setTokenReq(ids[i], _mintPrice[i],_maxBuyPerTx[i], _maxMintPerTx[i], _stopMintAfter[i], _maxTotalSupply[i]);\n        }\n\n    }","contract":"Modifiers1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"Modifiers1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"Modifiers1155","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"SIDUS NFT HEROES - Galaxy Modificators\";","after":"string public constant name = \"SIDUS NFT HEROES - Galaxy Modificators\";","contract":"Modifiers1155","time":1}]}
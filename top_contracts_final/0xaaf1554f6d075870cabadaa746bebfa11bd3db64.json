{"time":215,"results":[{"type":"external-function ","before":"function claimBatch(uint256[] memory animetas_tokens_ids_to_claim) public nonReentrant whenMintNotPaused() {\r\n        _claimBatch(animetas_tokens_ids_to_claim);\r\n    }","after":"function claimBatch(uint256[] calldata animetas_tokens_ids_to_claim) public nonReentrant whenMintNotPaused() {\r\n        _claimBatch(animetas_tokens_ids_to_claim);\r\n    }","contract":"Hovercars","time":0},{"type":"external-function ","before":"function claimAndMintBatch(\r\n        uint256[] memory animetas_tokens_ids_to_claim,\r\n        uint256[] memory animetas_tokens_ids_to_mint,\r\n        address[] memory accounts) public payable nonReentrant whenMintNotPaused() {\r\n        uint256 num = animetas_tokens_ids_to_mint.length;\r\n\r\n        require(160 >= num, \"Avatracks: Batch size must be less than 160\");\r\n        require(160 >= animetas_tokens_ids_to_claim.length, \"Hovercars: Batch size must be less than 160\");\r\n\r\n        if (num < 5) {\r\n            require(msg.value >= num * avatracks_price, \"Avatracks: Ether sent is less than price * tokens_count\");\r\n        } else {\r\n            require(msg.value >= num * avatracks_discount_price, \"Avatracks: Mint batch more than 5 Animetracks: Ether sent is less than discount price * tokens_count\");\r\n        }\r\n\r\n        avatracks.giveawayBatch(accounts, animetas_tokens_ids_to_mint);\r\n        _claimBatch(animetas_tokens_ids_to_claim);\r\n    }","after":"function claimAndMintBatch(\r\n        uint256[] calldata animetas_tokens_ids_to_claim,\r\n        uint256[] calldata animetas_tokens_ids_to_mint,\r\n        address[] calldata accounts) public payable nonReentrant whenMintNotPaused() {\r\n        uint256 num = animetas_tokens_ids_to_mint.length;\r\n\r\n        require(160 >= num, \"Avatracks: Batch size must be less than 160\");\r\n        require(160 >= animetas_tokens_ids_to_claim.length, \"Hovercars: Batch size must be less than 160\");\r\n\r\n        if (num < 5) {\r\n            require(msg.value >= num * avatracks_price, \"Avatracks: Ether sent is less than price * tokens_count\");\r\n        } else {\r\n            require(msg.value >= num * avatracks_discount_price, \"Avatracks: Mint batch more than 5 Animetracks: Ether sent is less than discount price * tokens_count\");\r\n        }\r\n\r\n        avatracks.giveawayBatch(accounts, animetas_tokens_ids_to_mint);\r\n        _claimBatch(animetas_tokens_ids_to_claim);\r\n    }","contract":"Hovercars","time":0},{"type":"external-function ","before":"function giveawayBatch(address[] memory accounts, uint256[] memory animetas_tokens_ids_to_claim) external onlyRole(WHITE_LIST_ROLE) {\r\n        for (uint256 i; i < animetas_tokens_ids_to_claim.length; i++) {\r\n            require(!_animetas_claimed_tokens[animetas_tokens_ids_to_claim[i]], \"Hovercars: Animetas token was already claimed\");\r\n            require(accountIsAnimetasTokenOwner(accounts[i], animetas_tokens_ids_to_claim[i]), \"Hovercars: Account is not the owner of the given animetas\");\r\n            _lfg(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n            emit GiveawayPerformed(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n        }\r\n    }","after":"function giveawayBatch(address[] calldata accounts, uint256[] calldata animetas_tokens_ids_to_claim) external onlyRole(WHITE_LIST_ROLE) {\r\n        for (uint256 i; i < animetas_tokens_ids_to_claim.length; i++) {\r\n            require(!_animetas_claimed_tokens[animetas_tokens_ids_to_claim[i]], \"Hovercars: Animetas token was already claimed\");\r\n            require(accountIsAnimetasTokenOwner(accounts[i], animetas_tokens_ids_to_claim[i]), \"Hovercars: Account is not the owner of the given animetas\");\r\n            _lfg(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n            emit GiveawayPerformed(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n        }\r\n    }","contract":"Hovercars","time":0},{"type":"external-function ","before":"function cleanup(address[] memory accounts, uint256[] memory animetas_tokens_ids_to_claim) external onlyRole(WHITE_LIST_ROLE) {\r\n        require(paused_mint, \"Hovercars: can cleanup only when mint is paused\");\r\n\r\n        for (uint256 i; i < animetas_tokens_ids_to_claim.length; i++) {\r\n            require(!_animetas_claimed_tokens[animetas_tokens_ids_to_claim[i]], \"Hovercars: Animetas token was already claimed\");\r\n            _lfg(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n            emit GiveawayPerformed(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n        }\r\n    }","after":"function cleanup(address[] calldata accounts, uint256[] calldata animetas_tokens_ids_to_claim) external onlyRole(WHITE_LIST_ROLE) {\r\n        require(paused_mint, \"Hovercars: can cleanup only when mint is paused\");\r\n\r\n        for (uint256 i; i < animetas_tokens_ids_to_claim.length; i++) {\r\n            require(!_animetas_claimed_tokens[animetas_tokens_ids_to_claim[i]], \"Hovercars: Animetas token was already claimed\");\r\n            _lfg(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n            emit GiveawayPerformed(accounts[i], animetas_tokens_ids_to_claim[i]);\r\n        }\r\n    }","contract":"Hovercars","time":0},{"type":"external-function ","before":"function setBaseURI(string memory new_uri) public onlyRole(WHITE_LIST_ROLE) {\r\n        _base_uri = new_uri;\r\n    }","after":"function setBaseURI(string calldata new_uri) public onlyRole(WHITE_LIST_ROLE) {\r\n        _base_uri = new_uri;\r\n    }","contract":"Hovercars","time":0}]}
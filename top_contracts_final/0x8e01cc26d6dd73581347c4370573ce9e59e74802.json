{"time":126,"results":[{"type":"external-function ","before":"function withdrawSigned(\n            address token,\n            address payee,\n            uint256 amount,\n            bytes32 salt,\n            bytes memory signature)\n    external returns(uint256) {\n        bytes32 message = withdrawSignedMessage(token, payee, amount, salt);\n        address _signer = signerUnique(message, signature);\n        require(signers[_signer], \"BridgePool: Invalid signer\");\n\n        uint256 fee = 0;\n        address _feeDistributor = feeDistributor;\n        if (_feeDistributor != address(0)) {\n            fee = amount.mul(fees[token]).div(10000);\n            amount = amount.sub(fee);\n            if (fee != 0) {\n                IERC20(token).safeTransfer(_feeDistributor, fee);\n                IGeneralTaxDistributor(_feeDistributor).distributeTax(token, msg.sender);\n            }\n        }\n        IERC20(token).safeTransfer(payee, amount);\n        emit TransferBySignature(_signer, payee, token, amount, fee);\n        return amount;\n    }","after":"function withdrawSigned(\n            address token,\n            address payee,\n            uint256 amount,\n            bytes32 salt,\n            bytes calldata signature)\n    external returns(uint256) {\n        bytes32 message = withdrawSignedMessage(token, payee, amount, salt);\n        address _signer = signerUnique(message, signature);\n        require(signers[_signer], \"BridgePool: Invalid signer\");\n\n        uint256 fee = 0;\n        address _feeDistributor = feeDistributor;\n        if (_feeDistributor != address(0)) {\n            fee = amount.mul(fees[token]).div(10000);\n            amount = amount.sub(fee);\n            if (fee != 0) {\n                IERC20(token).safeTransfer(_feeDistributor, fee);\n                IGeneralTaxDistributor(_feeDistributor).distributeTax(token, msg.sender);\n            }\n        }\n        IERC20(token).safeTransfer(payee, amount);\n        emit TransferBySignature(_signer, payee, token, amount, fee);\n        return amount;\n    }","contract":"BridgePool","time":0}]}
{"time":685,"results":[{"type":"external-function ","before":"function purchase(\n        uint256[5] memory character,\n        uint256[3] memory head,\n        uint256[6] memory clothing,\n        uint256[6] memory accessories,\n        uint256[2] memory items\n    ) external payable whenNotPaused {\n        uint256 currentSupply = totalSupply.current();\n        require(currentSupply >= 3 || _msgSender() == owner(), \"Sale has not started\");\n        require(msg.value == getNFTPrice(), \"Ether value incorrect\");\n        _validateTraits(character, head, clothing, accessories, items);\n        uint256 traitCombo = _generateTraitCombo(character, head, clothing, accessories, items);\n        _storeNewCharacter(traitCombo);\n    }","after":"function purchase(\n        uint256[5] calldata character,\n        uint256[3] calldata head,\n        uint256[6] calldata clothing,\n        uint256[6] calldata accessories,\n        uint256[2] calldata items\n    ) external payable whenNotPaused {\n        uint256 currentSupply = totalSupply.current();\n        require(currentSupply >= 3 || _msgSender() == owner(), \"Sale has not started\");\n        require(msg.value == getNFTPrice(), \"Ether value incorrect\");\n        _validateTraits(character, head, clothing, accessories, items);\n        uint256 traitCombo = _generateTraitCombo(character, head, clothing, accessories, items);\n        _storeNewCharacter(traitCombo);\n    }","contract":"NiftyDegen","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) public onlyOwner {\n        _baseTokenUri = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) public onlyOwner {\n        _baseTokenUri = baseURI;\n    }","contract":"NiftyDegen","time":0},{"type":"external-function ","before":"function changeName(uint256 tokenId, string memory newName) external returns (string memory) {\n        require(_exists(tokenId), \"nonexistent token\");\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Caller is not owner nor approved\");\n        string memory prevName = _characters[tokenId].name;\n        require(sha256(bytes(newName)) != sha256(bytes(prevName)), \"New name and old name are equal\");\n        require(validateName(newName), \"Name is not allowed\");\n        require(!isNameReserved(newName), \"Name already reserved\");\n\n        INFTL(_nftlAddress).burnFrom(_msgSender(), NAME_CHANGE_PRICE);\n        if (bytes(_characters[tokenId].name).length > 0) {\n            _toggleReserveName(_characters[tokenId].name, false);\n        }\n        _toggleReserveName(newName, true);\n        _characters[tokenId].name = newName;\n        emit NameUpdated(tokenId, prevName, newName);\n        return newName;\n    }","after":"function changeName(uint256 tokenId, string calldata newName) external returns (string memory) {\n        require(_exists(tokenId), \"nonexistent token\");\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Caller is not owner nor approved\");\n        string memory prevName = _characters[tokenId].name;\n        require(sha256(bytes(newName)) != sha256(bytes(prevName)), \"New name and old name are equal\");\n        require(validateName(newName), \"Name is not allowed\");\n        require(!isNameReserved(newName), \"Name already reserved\");\n\n        INFTL(_nftlAddress).burnFrom(_msgSender(), NAME_CHANGE_PRICE);\n        if (bytes(_characters[tokenId].name).length > 0) {\n            _toggleReserveName(_characters[tokenId].name, false);\n        }\n        _toggleReserveName(newName, true);\n        _characters[tokenId].name = newName;\n        emit NameUpdated(tokenId, prevName, newName);\n        return newName;\n    }","contract":"NiftyDegen","time":0},{"type":"de-morgan-condition ","before":"!(currentChar >= 0x30 && currentChar <= 0x39) && //0-9\n                !(currentChar >= 0x41 && currentChar <= 0x5A)","after":"!((currentChar >= 0x30 && currentChar <= 0x39) && //0-9\n                (currentChar >= 0x41 && currentChar <= 0x5A))","loc":{"start":{"line":439,"column":16},"end":{"line":440,"column":60}},"contract":"NameableCharacter","time":0},{"type":"external-function ","before":"function setAllowedColorsOnTribe(\n        uint256 tribe,\n        uint256[] memory colors,\n        bool allowed\n    ) external onlyOwner {\n        require(tribe > 0 && tribe < 10, \"Invalid tribe provided\");\n        for (uint256 i = 0; i < colors.length; i++) {\n            _toggleColorAllowed(tribe, colors[i], allowed);\n        }\n    }","after":"function setAllowedColorsOnTribe(\n        uint256 tribe,\n        uint256[] calldata colors,\n        bool allowed\n    ) external onlyOwner {\n        require(tribe > 0 && tribe < 10, \"Invalid tribe provided\");\n        for (uint256 i = 0; i < colors.length; i++) {\n            _toggleColorAllowed(tribe, colors[i], allowed);\n        }\n    }","contract":"AllowedColorsStorage","time":0}]}
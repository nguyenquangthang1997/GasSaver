{"time":138,"results":[{"type":"loop-duplication","before":"\nstart line 270 column 8, end line 274 column 8\nfor (uint8 i = 0; i < nColors; i++) {\n            require(_checkDuplicateColors[colors[i]] == false, 'Shields: all colors must be unique');\n            require(emblemWeaver.fieldGenerator().colorExists(colors[i]), 'Shields: color does not exist');\n            _checkDuplicateColors[colors[i]] = true;\n        }\nstart line 275 column 8, end line 277 column 8\nfor (uint8 i = 0; i < nColors; i++) {\n            _checkDuplicateColors[colors[i]] = false;\n        }","after":"// merge loop\n\nstart line 270 column 8, end line 274 column 8\nfor (uint8 i = 0; i < nColors; i++) {\n            require(_checkDuplicateColors[colors[i]] == false, 'Shields: all colors must be unique');\n            require(emblemWeaver.fieldGenerator().colorExists(colors[i]), 'Shields: color does not exist');\n            _checkDuplicateColors[colors[i]] = true;\n        }\nstart line 275 column 8, end line 277 column 8\nfor (uint8 i = 0; i < nColors; i++) {\n            _checkDuplicateColors[colors[i]] = false;\n        }","contract":"Shields","time":0},{"type":"external-function ","before":"function build(\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] memory colors,\n        uint256 tokenId\n    )\n        external\n        payable\n        override\n        onlyTokenOwner(tokenId)\n        shieldNotBuilt(tokenId)\n        validHardware(tokenId, hardware)\n        validColors(field, colors)\n    {\n        // shield must be unique\n        bytes32 shieldHash = keccak256(abi.encode(field, hardware, colors));\n        require(!shieldHashes[shieldHash], 'Shields: unique Shield already built');\n        shieldHashes[shieldHash] = true;\n\n        // Construct Shield\n        Shield memory shield = Shield({\n            built: true,\n            field: field,\n            hardware: hardware,\n            frame: frame,\n            colors: colors,\n            shieldBadge: calculateShieldBadge(tokenId)\n        });\n        _shields[tokenId] = shield;\n\n        // Calculate Fee\n        {\n            uint256 fee;\n            ICategories.FieldCategories fieldType = emblemWeaver\n                .fieldGenerator()\n                .generateField(shield.field, shield.colors)\n                .fieldType;\n            ICategories.HardwareCategories hardwareType = emblemWeaver\n                .hardwareGenerator()\n                .generateHardware(shield.hardware)\n                .hardwareType;\n            uint256 frameFee = emblemWeaver.frameGenerator().generateFrame(shield.frame).fee;\n            if (fieldType == ICategories.FieldCategories.MYTHIC) {\n                fee += mythicFee;\n            }\n            if (hardwareType == ICategories.HardwareCategories.SPECIAL) {\n                fee += specialFee;\n            }\n            fee += frameFee;\n            require(msg.value == fee, 'Shields: invalid building fee');\n        }\n\n        emit ShieldBuilt(tokenId, field, hardware, frame, colors, calculateShieldBadge(tokenId));\n    }","after":"function build(\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] calldata colors,\n        uint256 tokenId\n    )\n        external\n        payable\n        override\n        onlyTokenOwner(tokenId)\n        shieldNotBuilt(tokenId)\n        validHardware(tokenId, hardware)\n        validColors(field, colors)\n    {\n        // shield must be unique\n        bytes32 shieldHash = keccak256(abi.encode(field, hardware, colors));\n        require(!shieldHashes[shieldHash], 'Shields: unique Shield already built');\n        shieldHashes[shieldHash] = true;\n\n        // Construct Shield\n        Shield memory shield = Shield({\n            built: true,\n            field: field,\n            hardware: hardware,\n            frame: frame,\n            colors: colors,\n            shieldBadge: calculateShieldBadge(tokenId)\n        });\n        _shields[tokenId] = shield;\n\n        // Calculate Fee\n        {\n            uint256 fee;\n            ICategories.FieldCategories fieldType = emblemWeaver\n                .fieldGenerator()\n                .generateField(shield.field, shield.colors)\n                .fieldType;\n            ICategories.HardwareCategories hardwareType = emblemWeaver\n                .hardwareGenerator()\n                .generateHardware(shield.hardware)\n                .hardwareType;\n            uint256 frameFee = emblemWeaver.frameGenerator().generateFrame(shield.frame).fee;\n            if (fieldType == ICategories.FieldCategories.MYTHIC) {\n                fee += mythicFee;\n            }\n            if (hardwareType == ICategories.HardwareCategories.SPECIAL) {\n                fee += specialFee;\n            }\n            fee += frameFee;\n            require(msg.value == fee, 'Shields: invalid building fee');\n        }\n\n        emit ShieldBuilt(tokenId, field, hardware, frame, colors, calculateShieldBadge(tokenId));\n    }","contract":"Shields","time":0}]}
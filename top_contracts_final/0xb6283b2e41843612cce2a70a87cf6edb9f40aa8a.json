{"time":166,"results":[{"type":"external-function ","before":"function setURI(string memory newuri) public onlyOwnerOrManager {\r\n        _setURI(newuri);\r\n    }","after":"function setURI(string calldata newuri) public onlyOwnerOrManager {\r\n        _setURI(newuri);\r\n    }","contract":"CyberKeys","time":0},{"type":"external-function ","before":"function burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory values\r\n    ) public {\r\n        require(\r\n            account == _msgSender() || isApprovedForAll(account, _msgSender()) || _msgSender() == owner() || _msgSender() == _manager,\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        _burnBatch(account, ids, values);\r\n    }","after":"function burnBatch(\r\n        address account,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values\r\n    ) public {\r\n        require(\r\n            account == _msgSender() || isApprovedForAll(account, _msgSender()) || _msgSender() == owner() || _msgSender() == _manager,\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        _burnBatch(account, ids, values);\r\n    }","contract":"CyberKeys","time":0},{"type":"external-function ","before":"function ownerBurn(\r\n        address[] memory accounts,\r\n        uint256[] memory values\r\n  \r\n    ) public onlyOwnerOrManager {\r\n        require(\r\n            _msgSender() == owner() || _msgSender() == _manager,\r\n            \"ERC1155: caller is not owner or manager\"\r\n        );\r\n\r\n        for (uint i; i < accounts.length; i++) {\r\n            _burn(accounts[i], _tokenId, values[i]);\r\n        }\r\n    }","after":"function ownerBurn(\r\n        address[] calldata accounts,\r\n        uint256[] calldata values\r\n  \r\n    ) public onlyOwnerOrManager {\r\n        require(\r\n            _msgSender() == owner() || _msgSender() == _manager,\r\n            \"ERC1155: caller is not owner or manager\"\r\n        );\r\n\r\n        for (uint i; i < accounts.length; i++) {\r\n            _burn(accounts[i], _tokenId, values[i]);\r\n        }\r\n    }","contract":"CyberKeys","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"CyberKeys","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"CyberKeys","time":0},{"type":"constant-restrict-modification  ","before":"address public cyberbabiesAddress = 0x991A546A167cEb2a6a7C344C9D85269Ac03035D9;","after":"address public constant cyberbabiesAddress = 0x991A546A167cEb2a6a7C344C9D85269Ac03035D9;","contract":"CyberKeys","time":1}]}
{"time":579,"results":[{"type":"external-function ","before":"    StakerRewardsBeneficiary(_token, _stakerRewards)\n    {}\n}\n\npragma solidity 0.5.17;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\nimport \"openzeppelin-solidity/contracts/token/","after":"    StakerRewardsBeneficiary(_token, _stakerRewards)\n    {}\n}\n\npragma solidity 0.5.17;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\nimport \"openzeppelin-solidity/contracts/token/","contract":"PhasedEscrow","time":0},{"type":"external-function ","before":"receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n/// @title KEEP Token\n/// @dev Standard ERC20Burnable token\ncontract KeepToken is ERC20Burnable, ERC20Detailed {\n    string public constant NAME = \"KEEP Token\";\n    string public constant SYMBOL = \"KEEP\";\n    uint8 public constant DECIM","after":"receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n/// @title KEEP Token\n/// @dev Standard ERC20Burnable token\ncontract KeepToken is ERC20Burnable, ERC20Detailed {\n    string public constant NAME = \"KEEP Token\";\n    string public constant SYMBOL = \"KEEP\";\n    uint8 public constant DECIM","contract":"KeepToken","time":0},{"type":"external-function ","before":"he amount of steps and the length of the minimum stake schedule in seconds.\n    function minimumStake() public view returns (uint256) {\n        return MinimumStakeSchedule.current(minimumStakeScheduleStart);\n    }\n\n    /// @notice Returns the current value of the undelegation period.\n    /// The staking contract guarantees that an undelegated operator’s stakes\n    /// will stay locked for a period of time after undelegation, and thus\n    /// available as collateral for any work the operator is engaged in.\n    /// The undelegation period is two weeks for the first two months and\n    /// two months after that.\n    function undelegationPeriod() public view returns(uint256) {\n        return block.timestamp < deployedAt.add(twoMonths) ? twoWeeks : twoMonths;\n    }\n\n    /// @notice Receives approval of token transfer and stakes the approved\n    /// amount or adds the approved amount to an existing delegation (a “top-up”).\n    /// In c","after":"he amount of steps and the length of the minimum stake schedule in seconds.\n    function minimumStake() public view returns (uint256) {\n        return MinimumStakeSchedule.current(minimumStakeScheduleStart);\n    }\n\n    /// @notice Returns the current value of the undelegation period.\n    /// The staking contract guarantees that an undelegated operator’s stakes\n    /// will stay locked for a period of time after undelegation, and thus\n    /// available as collateral for any work the operator is engaged in.\n    /// The undelegation period is two weeks for the first two months and\n    /// two months after that.\n    function undelegationPeriod() public view returns(uint256) {\n        return block.timestamp < deployedAt.add(twoMonths) ? twoWeeks : twoMonths;\n    }\n\n    /// @notice Receives approval of token transfer and stakes the approved\n    /// amount or adds the approved amount to an existing delegation (a “top-up”).\n    /// In c","contract":"TokenStaking","time":0},{"type":"external-function ","before":"'t need to check for current approval status of the caller\n    /// because unlocking stake cannot harm the operator\n    /// nor interfere with other operator contracts.\n    /// Therefore even disabled operator contracts may freely unlock stake.\n    /// @param operator Operator address.\n    function unlockStake(\n        address operator\n    ) public {\n        require(\n            isAuthorizedForOperator(operator, msg.sender),\n            \"Not authorized\"\n        );\n        locks.releaseLock(operator);\n    }\n\n    /// @notice Removes the lock of the specified operator contract\n    /// if the lock has expired or the contract has been disabled.\n    /// @dev Necessary for removing locks placed by contracts\n    /// that have been disabled by the panic button.\n    /// Also applicable to prevent inadvertent DoS of `recoverStake`\n    /// if too many operator contracts have failed to clean up their locks.\n    function releaseExpiredLock(\n        address operator,\n        address operatorContract\n    ) public {\n        locks.releaseExpiredLock(operator, operatorContract, address(this));\n    }\n\n    /// @notice Check whether the operator has any active locks\n    /// that haven't expired yet\n    /// and whose creators aren't disabled by the panic button.\n    function isStakeLocked(address operator) public view returns (bool) {\n        return locks.isStakeLocked(operator, address(this));\n    }\n\n    /// @notice Get the locks placed on the operator.\n    /// @return creators The","after":"'t need to check for current approval status of the caller\n    /// because unlocking stake cannot harm the operator\n    /// nor interfere with other operator contracts.\n    /// Therefore even disabled operator contracts may freely unlock stake.\n    /// @param operator Operator address.\n    function unlockStake(\n        address operator\n    ) public {\n        require(\n            isAuthorizedForOperator(operator, msg.sender),\n            \"Not authorized\"\n        );\n        locks.releaseLock(operator);\n    }\n\n    /// @notice Removes the lock of the specified operator contract\n    /// if the lock has expired or the contract has been disabled.\n    /// @dev Necessary for removing locks placed by contracts\n    /// that have been disabled by the panic button.\n    /// Also applicable to prevent inadvertent DoS of `recoverStake`\n    /// if too many operator contracts have failed to clean up their locks.\n    function releaseExpiredLock(\n        address operator,\n        address operatorContract\n    ) public {\n        locks.releaseExpiredLock(operator, operatorContract, address(this));\n    }\n\n    /// @notice Check whether the operator has any active locks\n    /// that haven't expired yet\n    /// and whose creators aren't disabled by the panic button.\n    function isStakeLocked(address operator) public view returns (bool) {\n        return locks.isStakeLocked(operator, address(this));\n    }\n\n    /// @notice Get the locks placed on the operator.\n    /// @return creators The","contract":"TokenStaking","time":0},{"type":"external-function ","before":" every misbehaved operator.\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\n    function slash(uint256 amountToSlash, address[] memory misbehavedOperators)\n        public\n        onlyApprovedOperatorContract(msg.sender) {\n\n        uint256 totalAmountToBurn;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(operatorParams),\n                \"Inactive stake\"\n            );\n\n            require(\n                !_isStakeReleased(operator, operatorParams, msg.sender),\n                \"Stake is released\"\n            );\n\n            uint256 currentAmount = operatorParams.getAmount();\n\n            if (currentAmount < amountToSlash) {\n                totalAmountToBurn = totalAmountToBurn.add(currentAmount);\n                operators[operator].packedParams = operatorParams.setAmount(0);\n                emit TokensSlashed(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSlash);\n                operators[operator].packedParams = operatorParams.setAmount(\n                    currentAmount.sub(amountToSlash)\n                );\n                emit TokensSlashed(operator, amountToSlash);\n            }\n        }\n\n        token.burn(totalAmountToBurn);\n    }\n\n    /// @notice Seize provided token amount from every member in the misbehaved\n    /// operators array. The tattletale is re","after":" every misbehaved operator.\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\n    function slash(uint256 amountToSlash, address[] memory misbehavedOperators)\n        public\n        onlyApprovedOperatorContract(msg.sender) {\n\n        uint256 totalAmountToBurn;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(operatorParams),\n                \"Inactive stake\"\n            );\n\n            require(\n                !_isStakeReleased(operator, operatorParams, msg.sender),\n                \"Stake is released\"\n            );\n\n            uint256 currentAmount = operatorParams.getAmount();\n\n            if (currentAmount < amountToSlash) {\n                totalAmountToBurn = totalAmountToBurn.add(currentAmount);\n                operators[operator].packedParams = operatorParams.setAmount(0);\n                emit TokensSlashed(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSlash);\n                operators[operator].packedParams = operatorParams.setAmount(\n                    currentAmount.sub(amountToSlash)\n                );\n                emit TokensSlashed(operator, amountToSlash);\n            }\n        }\n\n        token.burn(totalAmountToBurn);\n    }\n\n    /// @notice Seize provided token amount from every member in the misbehaved\n    /// operators array. The tattletale is re","contract":"TokenStaking","time":0},{"type":"external-function ","before":"minimum stake parametrization and\n/// schedule. It starts with a minimum stake of 100k KEEP. Over the following\n/// 2 years, the minimum stake is lowered periodically using a uniform stepwise\n/// function, eventually ending at 10k.\nlibrary MinimumStakeSchedule {\n    using SafeMath for uint256;\n\n    // 2 years in seconds (seconds per day * days in a year * years)\n    uint256 public constant schedule = 86400 * 365 * 2;\n    uint256 public constant steps = 10;\n    uint256 public constant base = 10000 * 1e18;\n\n    /// @notice Returns the current value of the minimum stake. The minimum\n    /// stake i","after":"minimum stake parametrization and\n/// schedule. It starts with a minimum stake of 100k KEEP. Over the following\n/// 2 years, the minimum stake is lowered periodically using a uniform stepwise\n/// function, eventually ending at 10k.\nlibrary MinimumStakeSchedule {\n    using SafeMath for uint256;\n\n    // 2 years in seconds (seconds per day * days in a year * years)\n    uint256 public constant schedule = 86400 * 365 * 2;\n    uint256 public constant steps = 10;\n    uint256 public constant base = 10000 * 1e18;\n\n    /// @notice Returns the current value of the minimum stake. The minimum\n    /// stake i","contract":"GrantStaking","time":0},{"type":"external-function ","before":"▓▓▓▓\n  ▓▓▓▓▓▓▓▓▓▓▓▓▓▀        ▐▓▓▓▓▓▓▓▓▓▓         ▓▓▓▓▓▓▓▓▓▓▌        ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  ▓▓▓▓▓▓▀▀▓▓▓▓▓▓▄       ▐▓▓▓▓▓▓▀▀▀▀         ▓▓▓▓▓▓▀▀▀▀         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀\n  ▓▓▓▓▓▓   ▀▓▓▓▓▓▓▄     ▐▓▓▓▓▓▓     ▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓","after":"▓▓▓▓\n  ▓▓▓▓▓▓▓▓▓▓▓▓▓▀        ▐▓▓▓▓▓▓▓▓▓▓         ▓▓▓▓▓��▓▓▓▓▌        ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  ▓▓▓▓▓▓▀▀▓▓▓▓▓▓▄       ▐▓▓▓▓▓▓▀▀▀▀         ▓▓▓▓▓▓▀▀▀▀         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀\n  ▓▓▓▓▓▓   ▀▓▓▓▓▓▓▄     ▐▓▓▓▓▓▓     ▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓","contract":"TokenStakingEscrow","time":0},{"type":"external-function ","before":"h.sol\";\n\nimport \"./libraries/grant/UnlockingSchedule.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./KeepToken.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./TokenGrant.sol\";\nimport \"./ManagedGrant.sol\";\nimport \"./TokenSender.sol\";\n\n/// @title TokenStakingEscrow\n/// @notice Escrow lets the staking contract to deposit undelegated, granted\n/// tokens and either withdraw them based on the grant unlocking schedule or\n/// re-delegate them to another operator.\n/// @dev The owner of TokenStakingEscrow is TokenStaking contract and only owner\n/// can deposit. This contract works with an assumption that operator is unique\n/// in the scope of `TokenStaking`, that is, no more than one delegation in the\n/// `TokenStaking` can be done do the given operator ever. Even if the previous\n/// delegation ended, operator address cannot be reused.\ncontract TokenStakingEscrow is Ownable {\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using BytesLib for bytes;\n    using UnlockingSchedule for uint256;\n\n    event Deposited(\n        address indexed operator,\n        uint256 indexed grantId,\n        uint256 amount\n    );\n    event DepositRedelegated(\n        address index","after":"h.sol\";\n\nimport \"./libraries/grant/UnlockingSchedule.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./KeepToken.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./TokenGrant.sol\";\nimport \"./ManagedGrant.sol\";\nimport \"./TokenSender.sol\";\n\n/// @title TokenStakingEscrow\n/// @notice Escrow lets the staking contract to deposit undelegated, granted\n/// tokens and either withdraw them based on the grant unlocking schedule or\n/// re-delegate them to another operator.\n/// @dev The owner of TokenStakingEscrow is TokenStaking contract and only owner\n/// can deposit. This contract works with an assumption that operator is unique\n/// in the scope of `TokenStaking`, that is, no more than one delegation in the\n/// `TokenStaking` can be done do the given operator ever. Even if the previous\n/// delegation ended, operator address cannot be reused.\ncontract TokenStakingEscrow is Ownable {\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using BytesLib for bytes;\n    using UnlockingSchedule for uint256;\n\n    event Deposited(\n        address indexed operator,\n        uint256 indexed grantId,\n        uint256 amount\n    );\n    event DepositRedelegated(\n        address index","contract":"TokenStakingEscrow","time":0},{"type":"external-function ","before":",\n/// proxying instructions from the actual grantee.\n/// The address used by the actual grantee\n/// to issue instructions and withdraw tokens\n/// can be reassigned with the consent of the grant manager.\ncontract M","after":",\n/// proxying instructions from the actual grantee.\n/// The address used by the actual grantee\n/// to issue instructions and withdraw tokens\n/// can be reassigned with the consent of the grant manager.\ncontract M","contract":"ManagedGrant","time":0},{"type":"external-function ","before":" be called only for active operators with\n    /// initialized stake.\n    /// @param value Top-up value, the number of tokens added to the stake.\n    /// @param operator Operator The operator with existing delegation to which\n    /// the tokens should be added to.\n    /// @param operatorParams Parameters of that ope","after":" be called only for active operators with\n    /// initialized stake.\n    /// @param value Top-up value, the number of tokens added to the stake.\n    /// @param operator Operator The operator with existing delegation to which\n    /// the tokens should be added to.\n    /// @param operatorParams Parameters of that ope","contract":"TokenGrantStake","time":0},{"type":"external-function ","before":"by the passed address.\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /// @notice Gets the stake balance of the specified address.\n    /// @param _address The address to query the balance of.\n    /// @return An uint256 representing the amount staked by the passed address.\n    function stakeBalanceOf(address _address) public view returns (uint256 balance) {\n        for (uint i = 0; i < grantIndices[_address].length; i++) {\n            uint256 id = grantIndices[_address][i];\n            balance += grants[id].staked;\n        }\n        return balance;\n    }\n\n    /// @notice Gets grant by ID. Returns only basic grant data.\n    /// If you need unlocking schedule for the grant you must call `getGrantUnlockingSchedule()`\n    /// This is to avoid Ethereum `Stack too deep` issue described here:\n    /// https://forum.ethereum.org/discussion/2400/error-stack-too-deep-try-removing-local-variables\n    /// @param _id ID of the token grant.\n    /// @return amount The amount of tokens the grant provides.\n    /// @return withdrawn The amount of tokens that have already been withdrawn\n    ///                   from the grant.\n    /// @return staked The amount of tokens that have been staked from the grant.\n    /// @return revoked A boolean indicating whether the grant has been revoked,\n    ///                 which is to say that it is no longer unlocking.\n    /// @return grantee The grantee of grant.\n    function getGrant(uint256 _id) public view returns (\n        uint256 amount,\n        uint256 withdrawn,\n        uint256 staked,\n        uint256 revokedAmount,\n        uint256 revokedAt,\n        address grantee\n    ) {\n        return (\n            grants[_i","after":"by the passed address.\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /// @notice Gets the stake balance of the specified address.\n    /// @param _address The address to query the balance of.\n    /// @return An uint256 representing the amount staked by the passed address.\n    function stakeBalanceOf(address _address) public view returns (uint256 balance) {\n        for (uint i = 0; i < grantIndices[_address].length; i++) {\n            uint256 id = grantIndices[_address][i];\n            balance += grants[id].staked;\n        }\n        return balance;\n    }\n\n    /// @notice Gets grant by ID. Returns only basic grant data.\n    /// If you need unlocking schedule for the grant you must call `getGrantUnlockingSchedule()`\n    /// This is to avoid Ethereum `Stack too deep` issue described here:\n    /// https://forum.ethereum.org/discussion/2400/error-stack-too-deep-try-removing-local-variables\n    /// @param _id ID of the token grant.\n    /// @return amount The amount of tokens the grant provides.\n    /// @return withdrawn The amount of tokens that have already been withdrawn\n    ///                   from the grant.\n    /// @return staked The amount of tokens that have been staked from the grant.\n    /// @return revoked A boolean indicating whether the grant has been revoked,\n    ///                 which is to say that it is no longer unlocking.\n    /// @return grantee The grantee of grant.\n    function getGrant(uint256 _id) public view returns (\n        uint256 amount,\n        uint256 withdrawn,\n        uint256 staked,\n        uint256 revokedAmount,\n        uint256 revokedAt,\n        address grantee\n    ) {\n        return (\n            grants[_i","contract":"TokenGrant","time":0},{"type":"external-function ","before":"mount);\n\n        // Maintain a record of the unlocked amount\n        balances[_grantee] = balances[_grantee].add(_amount);\n        emit TokenGrantCreated(id);\n    }\n\n    /// @notice Withdraws Token grant amount to grantee.\n    /// @dev Transfers unlocked tokens of the token grant to grantee.\n    /// @param _id Grant ID.\n    function withdraw(uint256 _id) public {\n        uint256 amount = withdrawable(_id);\n        require(amount > 0, \"Grant available to withdraw amount should be greater than zero.\");\n\n        // Update withdrawn amount.\n        grants[_id].withdrawn = grants[_id].withdrawn.add(amount);\n\n        // Update grantee grants balance.\n        balances[grants[_id].grantee] = balances[grants[_id].grantee].sub(amount);\n\n        // Transfer tokens from this contract balance to the grantee token balance.\n        token.safeTransfer(grants[_id].grantee, amount);\n\n        emit TokenGrantWithdrawn(_id, amount);\n    }\n\n    /// @notice Calculates and returns unlocked grant amount.\n    /// @dev Calculates token grant amount that has already unlocked,\n    /// including any tokens that have already been withdrawn by the grantee as well\n    /// as any tokens that are available to withdraw but have not yet been withdrawn.\n    /// @param _id Grant ID.\n    function unlockedAmount(uint256 _id) public view returns (uint256) {\n        Grant storage grant = grants[_id];\n        return (grant.revokedAt != 0)\n            // Grant revoked -> return what is remaining\n            ? gr","after":"mount);\n\n        // Maintain a record of the unlocked amount\n        balances[_grantee] = balances[_grantee].add(_amount);\n        emit TokenGrantCreated(id);\n    }\n\n    /// @notice Withdraws Token grant amount to grantee.\n    /// @dev Transfers unlocked tokens of the token grant to grantee.\n    /// @param _id Grant ID.\n    function withdraw(uint256 _id) public {\n        uint256 amount = withdrawable(_id);\n        require(amount > 0, \"Grant available to withdraw amount should be greater than zero.\");\n\n        // Update withdrawn amount.\n        grants[_id].withdrawn = grants[_id].withdrawn.add(amount);\n\n        // Update grantee grants balance.\n        balances[grants[_id].grantee] = balances[grants[_id].grantee].sub(amount);\n\n        // Transfer tokens from this contract balance to the grantee token balance.\n        token.safeTransfer(grants[_id].grantee, amount);\n\n        emit TokenGrantWithdrawn(_id, amount);\n    }\n\n    /// @notice Calculates and returns unlocked grant amount.\n    /// @dev Calculates token grant amount that has already unlocked,\n    /// including any tokens that have already been withdrawn by the grantee as well\n    /// as any tokens that are available to withdraw but have not yet been withdrawn.\n    /// @param _id Grant ID.\n    function unlockedAmount(uint256 _id) public view returns (uint256) {\n        Grant storage grant = grants[_id];\n        return (grant.revokedAt != 0)\n            // Grant revoked -> return what is remaining\n            ? gr","contract":"TokenGrant","time":0}]}
{"time":127,"results":[{"type":"external-function ","before":"function mintWithWhitelist(uint256 timestamp, uint256 count, uint256 limit, bytes memory signature) external payable {\n        require(presaleMintings[_msgSender()] + count <= limit, \"More than limit\");\n        require(_msgSender() == tx.origin, \"Reverted\");\n        require(presaleActive, \"Presale sale is not active\");\n        require(totalSupply + count <= maxSupply, \"Can not mint more than max supply\");\n        require(msg.value >= count * price, \"Insufficient payment\");\n        require(block.timestamp <= timestamp, \"Too late\");\n        require(\n            recover(keccak256(abi.encode(\"\\x19Ethereum Signed Message EtherTroopers:\\n32\", timestamp, limit, _msgSender())), signature) ==\n            _signingAuthority,\n            \"Not allowed\"\n        );\n        presaleLimits[_msgSender()] = limit;\n\n        for (uint256 i = 0; i < count; i++) {\n            totalSupply++;\n            presaleMintings[_msgSender()]++;\n            _mint(_msgSender(), totalSupply);\n        }\n    }","after":"function mintWithWhitelist(uint256 timestamp, uint256 count, uint256 limit, bytes calldata signature) external payable {\n        require(presaleMintings[_msgSender()] + count <= limit, \"More than limit\");\n        require(_msgSender() == tx.origin, \"Reverted\");\n        require(presaleActive, \"Presale sale is not active\");\n        require(totalSupply + count <= maxSupply, \"Can not mint more than max supply\");\n        require(msg.value >= count * price, \"Insufficient payment\");\n        require(block.timestamp <= timestamp, \"Too late\");\n        require(\n            recover(keccak256(abi.encode(\"\\x19Ethereum Signed Message EtherTroopers:\\n32\", timestamp, limit, _msgSender())), signature) ==\n            _signingAuthority,\n            \"Not allowed\"\n        );\n        presaleLimits[_msgSender()] = limit;\n\n        for (uint256 i = 0; i < count; i++) {\n            totalSupply++;\n            presaleMintings[_msgSender()]++;\n            _mint(_msgSender(), totalSupply);\n        }\n    }","contract":"EtherTroopers","time":0},{"type":"external-function ","before":"function mintWithMintPass(uint256[] memory mintPassIds) external payable {\n        uint256 count = mintPassIds.length;\n        require(_msgSender() == tx.origin, \"Reverted\");\n        require(presaleActive, \"Presale is not active\");\n        require(totalSupply + count <= maxSupply, \"Can not mint more than max supply\");\n        require(msg.value >= count * price, \"Insufficient payment\");\n\n        for (uint256 i = 0; i < count; i++) {\n            require(mintPassContract.ownerOf(mintPassIds[i]) == _msgSender(), \"You don't own that mint pass\");\n            mintPassContract.burnFrom(mintPassIds[i]);\n            totalSupply++;\n            _mint(_msgSender(), totalSupply);\n        }\n    }","after":"function mintWithMintPass(uint256[] calldata mintPassIds) external payable {\n        uint256 count = mintPassIds.length;\n        require(_msgSender() == tx.origin, \"Reverted\");\n        require(presaleActive, \"Presale is not active\");\n        require(totalSupply + count <= maxSupply, \"Can not mint more than max supply\");\n        require(msg.value >= count * price, \"Insufficient payment\");\n\n        for (uint256 i = 0; i < count; i++) {\n            require(mintPassContract.ownerOf(mintPassIds[i]) == _msgSender(), \"You don't own that mint pass\");\n            mintPassContract.burnFrom(mintPassIds[i]);\n            totalSupply++;\n            _mint(_msgSender(), totalSupply);\n        }\n    }","contract":"EtherTroopers","time":0},{"type":"external-function ","before":"function mintGiveaway(address[] memory winners) external onlyOwner {\n        uint256 count = winners.length;\n        require(_msgSender() == tx.origin, \"Reverted\");\n        require(totalSupply + count <= maxSupply, \"Can not mint more than max supply\");\n\n        for (uint256 i = 0; i < count; i++) {\n            totalSupply++;\n            _mint(winners[i], totalSupply);\n        }\n    }","after":"function mintGiveaway(address[] calldata winners) external onlyOwner {\n        uint256 count = winners.length;\n        require(_msgSender() == tx.origin, \"Reverted\");\n        require(totalSupply + count <= maxSupply, \"Can not mint more than max supply\");\n\n        for (uint256 i = 0; i < count; i++) {\n            totalSupply++;\n            _mint(winners[i], totalSupply);\n        }\n    }","contract":"EtherTroopers","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory newProvenanceHash) external onlyOwner {\n        provenanceHash = newProvenanceHash;\n    }","after":"function setProvenanceHash(string calldata newProvenanceHash) external onlyOwner {\n        provenanceHash = newProvenanceHash;\n    }","contract":"EtherTroopers","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) external onlyOwner {\n        baseURI = newBaseURI;\n    }","after":"function setBaseURI(string calldata newBaseURI) external onlyOwner {\n        baseURI = newBaseURI;\n    }","contract":"EtherTroopers","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public maxSupply = 8888;","after":"uint256 public constant maxSupply = 8888;","contract":"EtherTroopers","time":0},{"type":"constant-restrict-modification  ","before":"address private _wallet1 = 0x9dB8922f8044d4cFE9C361b53C149fD5D63d90f9;","after":"address private constant _wallet1 = 0x9dB8922f8044d4cFE9C361b53C149fD5D63d90f9;","contract":"EtherTroopers","time":0},{"type":"constant-restrict-modification  ","before":"address private _wallet2 = 0x4502F16e0Aa869EA9AAdC7f941e3dE472Af94100;","after":"address private constant _wallet2 = 0x4502F16e0Aa869EA9AAdC7f941e3dE472Af94100;","contract":"EtherTroopers","time":0},{"type":"constant-restrict-modification  ","before":"address private _signingAuthority = 0x8753fD9b83f0C713CdbD19D21a3b448035d6E5ce;","after":"address private constant _signingAuthority = 0x8753fD9b83f0C713CdbD19D21a3b448035d6E5ce;","contract":"EtherTroopers","time":0}]}
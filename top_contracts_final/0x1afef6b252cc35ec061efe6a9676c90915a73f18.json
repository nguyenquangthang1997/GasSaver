{"time":162,"results":[{"type":"external-function ","before":"function setImmutableIPFSBucket(string memory immutableIPFSBucket_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            bytes(_immutableIPFSBucket).length == 0,\r\n            \"This IPFS bucket is immuable and can only be set once.\"\r\n        );\r\n        _immutableIPFSBucket = immutableIPFSBucket_;\r\n    }","after":"function setImmutableIPFSBucket(string calldata immutableIPFSBucket_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            bytes(_immutableIPFSBucket).length == 0,\r\n            \"This IPFS bucket is immuable and can only be set once.\"\r\n        );\r\n        _immutableIPFSBucket = immutableIPFSBucket_;\r\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function setMutableIPFSBucket(string memory mutableIPFSBucket_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _mutableIPFSBucket = mutableIPFSBucket_;\r\n    }","after":"function setMutableIPFSBucket(string calldata mutableIPFSBucket_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _mutableIPFSBucket = mutableIPFSBucket_;\r\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function setTokenURI(string memory tokenUriBase_) public onlyOwner {\r\n        _tokenUriBase = tokenUriBase_;\r\n    }","after":"function setTokenURI(string calldata tokenUriBase_) public onlyOwner {\r\n        _tokenUriBase = tokenUriBase_;\r\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function changeNameAndDescription(\r\n        uint256 tokenId,\r\n        string memory newName,\r\n        string memory newDescription\r\n    ) public payable {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        require(_msgSender() == owner, \"This isn't your Thingie.\");\r\n\r\n        uint256 amountPaid = msg.value;\r\n\r\n        if (_nameChanged[tokenId]) {\r\n            require(\r\n                amountPaid == RENAME_PRICE,\r\n                \"It costs to create a new identity.\"\r\n            );\r\n        } else {\r\n            require(\r\n                amountPaid == 0,\r\n                \"First time's free my fluffy little friend.\"\r\n            );\r\n            _nameChanged[tokenId] = true;\r\n        }\r\n\r\n        emit NameAndDescriptionChanged(tokenId, newName, newDescription);\r\n    }","after":"function changeNameAndDescription(\r\n        uint256 tokenId,\r\n        string calldata newName,\r\n        string calldata newDescription\r\n    ) public payable {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        require(_msgSender() == owner, \"This isn't your Thingie.\");\r\n\r\n        uint256 amountPaid = msg.value;\r\n\r\n        if (_nameChanged[tokenId]) {\r\n            require(\r\n                amountPaid == RENAME_PRICE,\r\n                \"It costs to create a new identity.\"\r\n            );\r\n        } else {\r\n            require(\r\n                amountPaid == 0,\r\n                \"First time's free my fluffy little friend.\"\r\n            );\r\n            _nameChanged[tokenId] = true;\r\n        }\r\n\r\n        emit NameAndDescriptionChanged(tokenId, newName, newDescription);\r\n    }","contract":"Thingies","time":0},{"type":"external-function ","before":"function mintThingieBatch(uint256[] memory flufId)\r\n        public\r\n        virtual\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        address human = msg.sender;\r\n        if (human != owner()) {\r\n            require(_state != State.Setup, \"THINGIES aren't ready yet!\");\r\n        }\r\n        require(\r\n            totalSupply().add(1) <= MAX_THINGIES,\r\n            \"Sorry, there's not that many THINGIES left.\"\r\n        );\r\n        require(\r\n            flufId.length <= MAX_MINT,\r\n            \"You can only mint 10 THINGIES at a time.\"\r\n        );\r\n\r\n        uint256 firstThingieRecieved = flufId[0];\r\n\r\n        for (uint256 i = 0; i < flufId.length; i++) {\r\n            require(\r\n                !_thingieForFluf[flufId[i]],\r\n                \"The Thingie for this FLUF has already been minted.\"\r\n            );\r\n            if (msg.sender == owner()) {\r\n                _safeMint(human, flufId[i]);\r\n                _thingieForFluf[flufId[i]] = true;\r\n            } else {\r\n                require(\r\n                    isFlufOwner(flufId[i], human),\r\n                    \"You are not the owner of this FLUF\"\r\n                );\r\n                _safeMint(human, flufId[i]);\r\n                _thingieForFluf[flufId[i]] = true;\r\n            }\r\n        }\r\n\r\n        return firstThingieRecieved;\r\n    }","after":"function mintThingieBatch(uint256[] calldata flufId)\r\n        public\r\n        virtual\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        address human = msg.sender;\r\n        if (human != owner()) {\r\n            require(_state != State.Setup, \"THINGIES aren't ready yet!\");\r\n        }\r\n        require(\r\n            totalSupply().add(1) <= MAX_THINGIES,\r\n            \"Sorry, there's not that many THINGIES left.\"\r\n        );\r\n        require(\r\n            flufId.length <= MAX_MINT,\r\n            \"You can only mint 10 THINGIES at a time.\"\r\n        );\r\n\r\n        uint256 firstThingieRecieved = flufId[0];\r\n\r\n        for (uint256 i = 0; i < flufId.length; i++) {\r\n            require(\r\n                !_thingieForFluf[flufId[i]],\r\n                \"The Thingie for this FLUF has already been minted.\"\r\n            );\r\n            if (msg.sender == owner()) {\r\n                _safeMint(human, flufId[i]);\r\n                _thingieForFluf[flufId[i]] = true;\r\n            } else {\r\n                require(\r\n                    isFlufOwner(flufId[i], human),\r\n                    \"You are not the owner of this FLUF\"\r\n                );\r\n                _safeMint(human, flufId[i]);\r\n                _thingieForFluf[flufId[i]] = true;\r\n            }\r\n        }\r\n\r\n        return firstThingieRecieved;\r\n    }","contract":"Thingies","time":0}]}
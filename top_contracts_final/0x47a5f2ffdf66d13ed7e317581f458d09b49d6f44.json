{"time":696,"results":[{"type":"external-function ","before":"function receiveApproval(\n        address _from,\n        uint256 _value,\n        address _token,\n        bytes memory\n    ) public {\n        require(IERC20(_token) == token, \"Unsupported token\");\n        token.safeTransferFrom(_from, address(this), _value);\n    }","after":"function receiveApproval(\n        address _from,\n        uint256 _value,\n        address _token,\n        bytes calldata\n    ) public {\n        require(IERC20(_token) == token, \"Unsupported token\");\n        token.safeTransferFrom(_from, address(this), _value);\n    }","contract":"BatchedPhasedEscrow","time":0},{"type":"external-function ","before":"function batchedWithdraw(\n        IBeneficiaryContract[] memory beneficiaries,\n        uint256[] memory amounts\n    ) public onlyDrawee {\n        require(\n            beneficiaries.length == amounts.length,\n            \"Mismatched arrays length\"\n        );\n\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            IBeneficiaryContract beneficiary = beneficiaries[i];\n            require(\n                isBeneficiaryApproved(beneficiary),\n                \"Beneficiary was not approved\"\n            );\n            withdraw(beneficiary, amounts[i]);\n        }\n    }","after":"function batchedWithdraw(\n        IBeneficiaryContract[] calldata beneficiaries,\n        uint256[] calldata amounts\n    ) public onlyDrawee {\n        require(\n            beneficiaries.length == amounts.length,\n            \"Mismatched arrays length\"\n        );\n\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            IBeneficiaryContract beneficiary = beneficiaries[i];\n            require(\n                isBeneficiaryApproved(beneficiary),\n                \"Beneficiary was not approved\"\n            );\n            withdraw(beneficiary, amounts[i]);\n        }\n    }","contract":"BatchedPhasedEscrow","time":0},{"type":"external-function ","before":"  function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _extraData) public {\n        require(ERC20Burnable(_token) == token, \"Token contract must be the same one linked to this contract.\");\n        require(_amount <= token.balanceOf(_from), \"Sender must have enough amount.\");\n        (address _grantManager,\n         address _grantee,\n         uint256 _duration,\n         uint256 _start,\n         uint256 _cliffDuration,\n         bool _revocable,\n         address _stakingPolicy) = abi.decode(\n             _extraData,\n             (address, address, uint256, uint256, uint256, bool, address)\n        );\n\n        require(_grantee != address(0), \"Grantee address can't be zero.\");\n        require(\n            _cliffDuration <= _duration,\n            \"Unlocking cliff duration must be less or equal total unlocking duration.\"\n        );\n\n        require(_stakingPolicy != address(0), \"Staking policy can't be zero.\");\n\n        uint256 id = numGrants++;\n        grants[id] = Grant(\n            _grantManager,\n            _grantee,\n            0, 0, 0,\n            _revocable,\n            _amount,\n            _duration,\n            _start,\n            _start.add(_cliffDuration),\n            0, 0,\n            GrantStakingPolicy(_stakingPolicy)\n        );\n\n        // Maintain a record to make it easier to query grants by grant manager.\n        grantIndices[_from].push(id);\n\n        // Maintain a record to make it easier to query grants by grantee.\n        grantIndices[_grantee].push(id);\n\n        token.safeTransferFrom(_from, address(this), _amount);\n\n        // Maintain a record of the unlocked amount\n        balances[_grantee] = balances[_grantee].add(_amount);\n        emit TokenGrantCreated(id);\n   ","after":"  function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _extraData) public {\n        require(ERC20Burnable(_token) == token, \"Token contract must be the same one linked to this contract.\");\n        require(_amount <= token.balanceOf(_from), \"Sender must have enough amount.\");\n        (address _grantManager,\n         address _grantee,\n         uint256 _duration,\n         uint256 _start,\n         uint256 _cliffDuration,\n         bool _revocable,\n         address _stakingPolicy) = abi.decode(\n             _extraData,\n             (address, address, uint256, uint256, uint256, bool, address)\n        );\n\n        require(_grantee != address(0), \"Grantee address can't be zero.\");\n        require(\n            _cliffDuration <= _duration,\n            \"Unlocking cliff duration must be less or equal total unlocking duration.\"\n        );\n\n        require(_stakingPolicy != address(0), \"Staking policy can't be zero.\");\n\n        uint256 id = numGrants++;\n        grants[id] = Grant(\n            _grantManager,\n            _grantee,\n            0, 0, 0,\n            _revocable,\n            _amount,\n            _duration,\n            _start,\n            _start.add(_cliffDuration),\n            0, 0,\n            GrantStakingPolicy(_stakingPolicy)\n        );\n\n        // Maintain a record to make it easier to query grants by grant manager.\n        grantIndices[_from].push(id);\n\n        // Maintain a record to make it easier to query grants by grantee.\n        grantIndices[_grantee].push(id);\n\n        token.safeTransferFrom(_from, address(this), _amount);\n\n        // Maintain a record of the unlocked amount\n        balances[_grantee] = balances[_grantee].add(_amount);\n        emit TokenGrantCreated(id);\n   ","contract":"TokenGrant","time":0},{"type":"external-function ","before":"  function stake(uint256 _id, address _stakingContract, uint256 _amount, bytes memory _extraData) public {\n        require(grants[_id].grantee == msg.sender, \"Only grantee of the grant can stake it.\");\n        require(grants[_id].revokedAt == 0, \"Revoked grant can not be staked\");\n        require(\n            stakingContracts[grants[_id].grantManager][_stakingContract],\n            \"Provided staking contract is not authorized.\"\n        );\n\n        // Expecting 60 bytes _extraData for stake delegation.\n        require(_extraData.length == 60, \"Stake delegation data must be provided.\");\n        address operator = _extraData.toAddress(20);\n\n        // Calculate available amount. Amount of unlocked tokens minus what user already withdrawn and staked.\n        require(_amount <= availableToStake(_id), \"Must have available granted amount to stake.\");\n\n        // Keep staking record.\n        TokenGrantStake grantStake = new TokenGrantStake(\n            address(token),\n            _id,\n            _stakingContract\n        );\n        grantStakes[operator] = grantStake;\n        granteesToOperators[grants[_id].grantee].push(operator);\n        grants[_id].staked += _amount;\n\n        token.transfer(address(grantStake), _amount);\n\n        // Staking contract expects 40 bytes _extraData for stake delegation.\n        // 20 bytes beneficiary's address + 20 bytes operator's address.\n        grantStake.stake(_amount, _extraData);\n        emit TokenGrantStaked(_id, _amount, operator);\n   ","after":"  function stake(uint256 _id, address _stakingContract, uint256 _amount, bytes calldata _extraData) public {\n        require(grants[_id].grantee == msg.sender, \"Only grantee of the grant can stake it.\");\n        require(grants[_id].revokedAt == 0, \"Revoked grant can not be staked\");\n        require(\n            stakingContracts[grants[_id].grantManager][_stakingContract],\n            \"Provided staking contract is not authorized.\"\n        );\n\n        // Expecting 60 bytes _extraData for stake delegation.\n        require(_extraData.length == 60, \"Stake delegation data must be provided.\");\n        address operator = _extraData.toAddress(20);\n\n        // Calculate available amount. Amount of unlocked tokens minus what user already withdrawn and staked.\n        require(_amount <= availableToStake(_id), \"Must have available granted amount to stake.\");\n\n        // Keep staking record.\n        TokenGrantStake grantStake = new TokenGrantStake(\n            address(token),\n            _id,\n            _stakingContract\n        );\n        grantStakes[operator] = grantStake;\n        granteesToOperators[grants[_id].grantee].push(operator);\n        grants[_id].staked += _amount;\n\n        token.transfer(address(grantStake), _amount);\n\n        // Staking contract expects 40 bytes _extraData for stake delegation.\n        // 20 bytes beneficiary's address + 20 bytes operator's address.\n        grantStake.stake(_amount, _extraData);\n        emit TokenGrantStaked(_id, _amount, operator);\n   ","contract":"TokenGrant","time":0},{"type":"external-function ","before":"ame source of\n    /// tokens as the initial delegation. That is, if the tokens were delegated\n    /// from a grant, top-up has to be performed from the same grant. If the\n    /// delegation was done using liquid tokens, only liquid tokens from the\n    /// same owner can be used to top-up the stake.\n    /// Top-up can not be cancelled so it is important to be careful with the\n    /// amount of KEEP added to the stake.\n    /// @dev Requires that the provided token contract be the same one linked to\n    /// this contract.\n    /// @param _from The owner of the tokens who approved them to transfer.\n    /// @param _value Approved amount for the transfer and stake.\n    /// @param _token Token contract address.\n    /// @param _extraData Data for stake delegation. This byte array must have\n    /// the following values concatenated:\n    /// - Beneficiary address (20 bytes), ignored for a top-up\n    /// - Operator address (20 bytes)\n    /// - Au","after":"ame source of\n    /// tokens as the initial delegation. That is, if the tokens were delegated\n    /// from a grant, top-up has to be performed from the same grant. If the\n    /// delegation was done using liquid tokens, only liquid tokens from the\n    /// same owner can be used to top-up the stake.\n    /// Top-up can not be cancelled so it is important to be careful with the\n    /// amount of KEEP added to the stake.\n    /// @dev Requires that the provided token contract be the same one linked to\n    /// this contract.\n    /// @param _from The owner of the tokens who approved them to transfer.\n    /// @param _value Approved amount for the transfer and stake.\n    /// @param _token Token contract address.\n    /// @param _extraData Data for stake delegation. This byte array must have\n    /// the following values concatenated:\n    /// - Beneficiary address (20 bytes), ignored for a top-up\n    /// - Operator address (20 bytes)\n    /// - Au","contract":"TokenStaking","time":0},{"type":"external-function ","before":", address(this));\n    }\n\n    /// @notice Check whether the operator has any active locks\n    /// that haven't expired yet\n    /// and whose creators aren't disabled by the panic button.\n    function isStakeLocked(address operator) public view returns (bool) {\n        return locks.isStakeLocked(operator, address(this));\n    }\n\n    /// @notice Get the locks placed on the operator.\n    /// @return creators The addresses of operator contracts\n    /// that have placed a lock on the operator.\n    /// @return expirations The expiration times\n    /// of the locks placed on the operator.\n    function getLocks(address operator)\n        public\n        view\n        returns (address[] memory creators, uint256[] memory expirations) {\n        return locks.getLocks(operator);\n    }\n\n    /// @notice Slash provided token amount from every member in the misbehaved\n    /// operators array and burn 100% of all the tokens.\n    /// @param amountToSlash Token amount to slash from every misbehaved operator.\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\n    function slash(uint256 amountToSlash, address[] memory misbehavedOperators)\n        public\n        onlyApprovedOperatorContract(msg.sender) {\n\n        uint256 totalAmountToBurn;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[auth","after":", address(this));\n    }\n\n    /// @notice Check whether the operator has any active locks\n    /// that haven't expired yet\n    /// and whose creators aren't disabled by the panic button.\n    function isStakeLocked(address operator) public view returns (bool) {\n        return locks.isStakeLocked(operator, address(this));\n    }\n\n    /// @notice Get the locks placed on the operator.\n    /// @return creators The addresses of operator contracts\n    /// that have placed a lock on the operator.\n    /// @return expirations The expiration times\n    /// of the locks placed on the operator.\n    function getLocks(address operator)\n        public\n        view\n        returns (address[] memory creators, uint256[] memory expirations) {\n        return locks.getLocks(operator);\n    }\n\n    /// @notice Slash provided token amount from every member in the misbehaved\n    /// operators array and burn 100% of all the tokens.\n    /// @param amountToSlash Token amount to slash from every misbehaved operator.\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\n    function slash(uint256 amountToSlash, address[] memory misbehavedOperators)\n        public\n        onlyApprovedOperatorContract(msg.sender) {\n\n        uint256 totalAmountToBurn;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[auth","contract":"TokenStaking","time":0},{"type":"external-function ","before":"ount);\n                operators[operator].packedParams = operatorParams.setAmount(0);\n                emit TokensSlashed(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSlash);\n                operators[operator].packedParams = operatorParams.setAmount(\n                    currentAmount.sub(amountToSlash)\n                );\n                emit TokensSlashed(operator, amountToSlash);\n            }\n        }\n\n        token.burn(totalAmountToBurn);\n    }\n\n    /// @notice Seize provided token amount from every member in the misbehaved\n    /// operators array. The tattletale is rewarded with 5% of the total seized\n    /// amount scaled by the reward adjustment parameter and the rest 95% is burned.\n    /// @param amountToSeize Token amount to seize from every misbehaved operator.\n    /// @param rewardMultiplier Reward adjustment in percentage. Min 1% and 100% max.\n    /// @param tattletale Address to receive the 5% reward.\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\n    function seize(\n        uint256 amountToSeize,\n        uint256 rewardMultiplier,\n        address tattletale,\n        address[] memory misbehavedOperators\n    ) public onlyApprovedOperatorContract(msg.sender) {\n        uint256 totalAmountToBurn;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(opera","after":"ount);\n                operators[operator].packedParams = operatorParams.setAmount(0);\n                emit TokensSlashed(operator, currentAmount);\n            } else {\n                totalAmountToBurn = totalAmountToBurn.add(amountToSlash);\n                operators[operator].packedParams = operatorParams.setAmount(\n                    currentAmount.sub(amountToSlash)\n                );\n                emit TokensSlashed(operator, amountToSlash);\n            }\n        }\n\n        token.burn(totalAmountToBurn);\n    }\n\n    /// @notice Seize provided token amount from every member in the misbehaved\n    /// operators array. The tattletale is rewarded with 5% of the total seized\n    /// amount scaled by the reward adjustment parameter and the rest 95% is burned.\n    /// @param amountToSeize Token amount to seize from every misbehaved operator.\n    /// @param rewardMultiplier Reward adjustment in percentage. Min 1% and 100% max.\n    /// @param tattletale Address to receive the 5% reward.\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\n    function seize(\n        uint256 amountToSeize,\n        uint256 rewardMultiplier,\n        address tattletale,\n        address[] memory misbehavedOperators\n    ) public onlyApprovedOperatorContract(msg.sender) {\n        uint256 totalAmountToBurn;\n        address authoritySource = getAuthoritySource(msg.sender);\n        for (uint i = 0; i < misbehavedOperators.length; i++) {\n            address operator = misbehavedOperators[i];\n            require(authorizations[authoritySource][operator], \"Not authorized\");\n\n            uint256 operatorParams = operators[operator].packedParams;\n            require(\n                _isInitialized(opera","contract":"TokenStaking","time":0},{"type":"external-function ","before":"nGrant.sol\";\nimport \"../../TokenStakingEscrow.sol\";\nimport \"../..//utils/BytesLib.sol\";\nimport \"../RolesLookup.sol\";\n\n/// @notice TokenStaking contract library allowing to capture the details of\n/// delegated grants and offering functions allowing to check grantee\n/// authentication for stake delegation management.\nlibrary GrantStaking {\n    using BytesLib for bytes;\n    using RolesLookup for address payable;\n\n    /// @dev Grant ID is flagged with the most significant bit set, to\n    /// distinguish the grant ID `0` from default (null) value. The flag is\n    /// toggled with bitwise XOR (`^`) wh","after":"nGrant.sol\";\nimport \"../../TokenStakingEscrow.sol\";\nimport \"../..//utils/BytesLib.sol\";\nimport \"../RolesLookup.sol\";\n\n/// @notice TokenStaking contract library allowing to capture the details of\n/// delegated grants and offering functions allowing to check grantee\n/// authentication for stake delegation management.\nlibrary GrantStaking {\n    using BytesLib for bytes;\n    using RolesLookup for address payable;\n\n    /// @dev Grant ID is flagged with the most significant bit set, to\n    /// distinguish the grant ID `0` from default (null) value. The flag is\n    /// toggled with bitwise XOR (`^`) wh","contract":"GrantStaking","time":0},{"type":"external-function ","before":"racts/ownership/Ownable.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\";\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\nimport \"./libraries/grant/UnlockingSchedule.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./KeepToken.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./TokenGrant.sol\";\nimport \"./ManagedGrant.sol\";\nimport \"./TokenSender.sol\";\n\n/// @title TokenStakingEscrow\n/// @notice Escrow lets the staking contract to deposit undelegated, granted\n/// tokens and either with","after":"racts/ownership/Ownable.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\";\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\nimport \"./libraries/grant/UnlockingSchedule.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./KeepToken.sol\";\nimport \"./utils/BytesLib.sol\";\nimport \"./TokenGrant.sol\";\nimport \"./ManagedGrant.sol\";\nimport \"./TokenSender.sol\";\n\n/// @title TokenStakingEscrow\n/// @notice Escrow lets the staking contract to deposit undelegated, granted\n/// tokens and either with","contract":"TokenStakingEscrow","time":0},{"type":"external-function ","before":"   uint256 indexed grantId,\n        uint256 amount\n    );\n    event DepositRedelegated(\n        address indexed previousOperator,\n        address indexed newOperator,\n        uint256 indexed grantId,\n        uint256 amount\n    );\n    event DepositWithdrawn(\n        address indexed operator,\n        address indexed grantee,\n        uint256 amount\n    );\n    event RevokedDepositWithdrawn(\n        address indexed operator,\n        address indexed grantManager,\n        uint256 amount\n    );\n    event EscrowAuthorized(\n        address indexed grantManager,\n        address escrow\n    );\n\n    IERC20 public keepToken;\n    TokenGrant public tokenGrant;\n\n    struct Deposit {\n        uint256 grantId;\n        uint256 amount;\n        uint256 withdrawn;\n        uint256 redelegated;\n    }\n\n    // operator address -> KEEP deposit\n    mapping(address => Deposit) internal deposits;\n\n    // Other escrows authorized by grant manager. Grantee may request to migrate\n    // tokens to another authorized escrow.\n    // grant manager -> escrow -> authorized?\n    mapping(address => mapping (address => bool)) internal authorizedEscrows;\n\n    constructor(\n        KeepToken _keepToken,\n        ","after":"   uint256 indexed grantId,\n        uint256 amount\n    );\n    event DepositRedelegated(\n        address indexed previousOperator,\n        address indexed newOperator,\n        uint256 indexed grantId,\n        uint256 amount\n    );\n    event DepositWithdrawn(\n        address indexed operator,\n        address indexed grantee,\n        uint256 amount\n    );\n    event RevokedDepositWithdrawn(\n        address indexed operator,\n        address indexed grantManager,\n        uint256 amount\n    );\n    event EscrowAuthorized(\n        address indexed grantManager,\n        address escrow\n    );\n\n    IERC20 public keepToken;\n    TokenGrant public tokenGrant;\n\n    struct Deposit {\n        uint256 grantId;\n        uint256 amount;\n        uint256 withdrawn;\n        uint256 redelegated;\n    }\n\n    // operator address -> KEEP deposit\n    mapping(address => Deposit) internal deposits;\n\n    // Other escrows authorized by grant manager. Grantee may request to migrate\n    // tokens to another authorized escrow.\n    // grant manager -> escrow -> authorized?\n    mapping(address => mapping (address => bool)) internal authorizedEscrows;\n\n    constructor(\n        KeepToken _keepToken,\n        ","contract":"TokenStakingEscrow","time":0},{"type":"external-function ","before":"wnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of ","after":"wnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of ","contract":"KeepToken","time":0},{"type":"external-function ","before":"        address _grantee\n    ) public {\n        token = ERC20Burnable(_tokenAddress);\n        tokenGrant = TokenGrant(_tokenGrant);\n        grantManager = _grantManager;\n        grantId = _grantId;\n        grantee","after":"        address _grantee\n    ) public {\n        token = ERC20Burnable(_tokenAddress);\n        tokenGrant = TokenGrant(_tokenGrant);\n        grantManager = _grantManager;\n        grantId = _grantId;\n        grantee","contract":"ManagedGrant","time":0},{"type":"external-function ","before":"        );\n        require(value > 0, \"Top-up value must be greater than zero\");\n\n        TopUp memory awaiting = self.topUps[operator];\n        self.topUps[operator] = TopUp(awaiting.amount.add(value), now);\n        emit TopUpInitiated(operator, value);\n    }\n\n    /// @notice Commits the top-up if it passed the in","after":"        );\n        require(value > 0, \"Top-up value must be greater than zero\");\n\n        TopUp memory awaiting = self.topUps[operator];\n        self.topUps[operator] = TopUp(awaiting.amount.add(value), now);\n        emit TopUpInitiated(operator, value);\n    }\n\n    /// @notice Commits the top-up if it passed the in","contract":"TokenGrantStake","time":0},{"type":"external-function ","before":"function receiveApproval(\n        address _from,\n        uint256 _value,\n        address _token,\n        bytes memory\n    ) public {\n        require(IERC20(_token) == token, \"Unsupported token\");\n        token.safeTransferFrom(_from, address(this), _value);\n    }","after":"function receiveApproval(\n        address _from,\n        uint256 _value,\n        address _token,\n        bytes calldata\n    ) public {\n        require(IERC20(_token) == token, \"Unsupported token\");\n        token.safeTransferFrom(_from, address(this), _value);\n    }","contract":"ECDSARewardsDistributorEscrow","time":0}]}
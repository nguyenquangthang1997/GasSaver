{"time":37,"results":[{"type":"external-function ","before":"function claim(\n    uint256[] memory rounds,\n    uint256[] memory amounts,\n    bytes32[][] memory proofs\n  ) external {\n    require(\n      rounds.length == amounts.length && amounts.length == proofs.length,\n      \"invalid length\"\n    );\n\n    uint256 totalAmount = 0;\n    for (uint256 i = 0; i < rounds.length; i++) {\n      uint256 round = rounds[i];\n      require(round < roots.length, \"invalid round\");\n      require(!claimed[msg.sender][round], \"already claimed\");\n      claimed[msg.sender][round] = true;\n      totalAmount += amounts[i];\n      bytes32 leaf = keccak256(abi.encodePacked(msg.sender, amounts[i]));\n      require(\n        MerkleProof.verify(proofs[i], roots[round], leaf),\n        \"invalid proof\"\n      );\n      emit Claimed(msg.sender, round, amounts[i]);\n    }\n    require(token.approve(address(ve), totalAmount), \"approve failed\");\n    if (ve.locked__end(msg.sender) == 0) {\n      ve.create_lock_for(\n        msg.sender,\n        totalAmount,\n        // solhint-disable-next-line not-rely-on-time\n        block.timestamp + MAX_LOCK_TIME\n      );\n    } else {\n      ve.deposit_for(msg.sender, totalAmount);\n    }\n  }","after":"function claim(\n    uint256[] calldata rounds,\n    uint256[] calldata amounts,\n    bytes32[][] calldata proofs\n  ) external {\n    require(\n      rounds.length == amounts.length && amounts.length == proofs.length,\n      \"invalid length\"\n    );\n\n    uint256 totalAmount = 0;\n    for (uint256 i = 0; i < rounds.length; i++) {\n      uint256 round = rounds[i];\n      require(round < roots.length, \"invalid round\");\n      require(!claimed[msg.sender][round], \"already claimed\");\n      claimed[msg.sender][round] = true;\n      totalAmount += amounts[i];\n      bytes32 leaf = keccak256(abi.encodePacked(msg.sender, amounts[i]));\n      require(\n        MerkleProof.verify(proofs[i], roots[round], leaf),\n        \"invalid proof\"\n      );\n      emit Claimed(msg.sender, round, amounts[i]);\n    }\n    require(token.approve(address(ve), totalAmount), \"approve failed\");\n    if (ve.locked__end(msg.sender) == 0) {\n      ve.create_lock_for(\n        msg.sender,\n        totalAmount,\n        // solhint-disable-next-line not-rely-on-time\n        block.timestamp + MAX_LOCK_TIME\n      );\n    } else {\n      ve.deposit_for(msg.sender, totalAmount);\n    }\n  }","contract":"SOSAirdrop","time":0}]}
{"time":146,"results":[{"type":"external-function ","before":"function setContractUri(string memory _uri) public virtual onlyOwner {\n        _contractUri = _uri;\n    }","after":"function setContractUri(string calldata _uri) public virtual onlyOwner {\n        _contractUri = _uri;\n    }","contract":"DontBurnMeme","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) public virtual onlyOwner {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) public virtual onlyOwner {\n        _setURI(newuri);\n    }","contract":"DontBurnMeme","time":0},{"type":"external-function ","before":"function setTokenMedia(uint256 id, string memory key)\n        public\n        virtual\n        onlyOwner\n    {\n        _setTokenMedia(id, key);\n    }","after":"function setTokenMedia(uint256 id, string calldata key)\n        public\n        virtual\n        onlyOwner\n    {\n        _setTokenMedia(id, key);\n    }","contract":"DontBurnMeme","time":0},{"type":"external-function ","before":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public onlyMinter {\n        if (_isMediaEmpty(_tokenMedia[id]) == true) {\n            _setTokenMedia(id, id.toString());\n        }\n        _mint(account, id, amount, data);\n    }","after":"function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public onlyMinter {\n        if (_isMediaEmpty(_tokenMedia[id]) == true) {\n            _setTokenMedia(id, id.toString());\n        }\n        _mint(account, id, amount, data);\n    }","contract":"DontBurnMeme","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n        _afterBurn(account, ids[0], values[0]);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n        _afterBurn(account, ids[0], values[0]);\n    }","contract":"DontBurnMeme","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"DontBurnMeme","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"DontBurnMeme","time":0},{"type":"external-function ","before":"function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","after":"function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }","contract":"ERC1155Burnable","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"ERC1155Burnable","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"ERC1155Burnable","time":0}]}
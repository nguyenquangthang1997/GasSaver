{"time":88,"results":[{"type":"external-function ","before":"function vote(bool[10] memory votes, uint256 auctionCounter) public {\n        require(votersForAuctionNumber[auctionCounter][msg.sender] == false, 'Can only vote once per day');\n\n        IAxonsAuctionHouse.Auction memory _auction = auctionHouse.currentAuction();\n        require(block.timestamp < _auction.endTime, 'Auction expired');\n        require(auctionCounter == _auction.counter, 'Can only vote for current auction');\n        require(!AnonymiceLibrary.isContract(msg.sender));\n\n        require(registeredVoters[msg.sender] > 0 || IAxonsToken(axonsToken).isGenesisAddress(msg.sender), 'Must own a Filament or Axon (and register it to vote) or be a genesis $AXON holder to vote');\n\n        // Record voting for today\n        votersForAuctionNumber[auctionCounter][msg.sender] = true;\n\n        // Add upvotes\n        for (uint i=0; i<10; i++) {\n            if (votes[i] == true) {\n                currentVotesForAxonNumbers[auctionCounter][i]++;\n            }\n        }\n\n        // Track total votes\n        currentNumberOfVotes[auctionCounter]++;\n        votesToClaim[msg.sender]++;\n    }","after":"function vote(bool[10] calldata votes, uint256 auctionCounter) public {\n        require(votersForAuctionNumber[auctionCounter][msg.sender] == false, 'Can only vote once per day');\n\n        IAxonsAuctionHouse.Auction memory _auction = auctionHouse.currentAuction();\n        require(block.timestamp < _auction.endTime, 'Auction expired');\n        require(auctionCounter == _auction.counter, 'Can only vote for current auction');\n        require(!AnonymiceLibrary.isContract(msg.sender));\n\n        require(registeredVoters[msg.sender] > 0 || IAxonsToken(axonsToken).isGenesisAddress(msg.sender), 'Must own a Filament or Axon (and register it to vote) or be a genesis $AXON holder to vote');\n\n        // Record voting for today\n        votersForAuctionNumber[auctionCounter][msg.sender] = true;\n\n        // Add upvotes\n        for (uint i=0; i<10; i++) {\n            if (votes[i] == true) {\n                currentVotesForAxonNumbers[auctionCounter][i]++;\n            }\n        }\n\n        // Track total votes\n        currentNumberOfVotes[auctionCounter]++;\n        votesToClaim[msg.sender]++;\n    }","contract":"AxonsVoting","time":0},{"type":"constant-restrict-modification  ","before":"address public filaments = 0x0a57e26e480355510028b5310FD251df96e2274b;","after":"address public constant filaments = 0x0a57e26e480355510028b5310FD251df96e2274b;","contract":"AxonsVoting","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public registrationCooldown = 86400;","after":"uint256 public constant registrationCooldown = 86400;","contract":"AxonsVoting","time":1}]}
{"time":163,"results":[{"type":"external-function ","before":"function addForgedGoatz(uint256[] memory _tokenId) external onlyOwner {\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            claimedStatus[_tokenId[i]] = 1;\n        }\n    }","after":"function addForgedGoatz(uint256[] calldata _tokenId) external onlyOwner {\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            claimedStatus[_tokenId[i]] = 1;\n        }\n    }","contract":"KIDz","time":0},{"type":"external-function ","before":"function removeForgedGoatz(uint256[] memory _tokenId) external onlyOwner {\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            claimedStatus[_tokenId[i]] = 0;\n        }\n    }","after":"function removeForgedGoatz(uint256[] calldata _tokenId) external onlyOwner {\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            claimedStatus[_tokenId[i]] = 0;\n        }\n    }","contract":"KIDz","time":0},{"type":"external-function ","before":"function burnToEarn(uint256[] memory _tokenId) external {\n        _beforeMint(_tokenId.length);\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            require(claimedStatus[_tokenId[i]] == 0, \"Not eligible for burn\");\n            goatz.transferFrom(_msgSender(), address(this), _tokenId[i]);\n            goatz.burn(_tokenId[i]);\n            _mintKidz(_msgSender());\n        }\n    }","after":"function burnToEarn(uint256[] calldata _tokenId) external {\n        _beforeMint(_tokenId.length);\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            require(claimedStatus[_tokenId[i]] == 0, \"Not eligible for burn\");\n            goatz.transferFrom(_msgSender(), address(this), _tokenId[i]);\n            goatz.burn(_tokenId[i]);\n            _mintKidz(_msgSender());\n        }\n    }","contract":"KIDz","time":0},{"type":"external-function ","before":"function claim(uint256[] memory _tokenId) external {\n        _beforeMint(_tokenId.length);\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            require(claimedStatus[_tokenId[i]] == 1, \"Not eligible for claim\");\n            claimedStatus[_tokenId[i]] = 2;\n            _mintKidz(_msgSender());\n        }\n    }","after":"function claim(uint256[] calldata _tokenId) external {\n        _beforeMint(_tokenId.length);\n        for (uint256 i = 0; i < _tokenId.length; i++) {\n            require(claimedStatus[_tokenId[i]] == 1, \"Not eligible for claim\");\n            claimedStatus[_tokenId[i]] = 2;\n            _mintKidz(_msgSender());\n        }\n    }","contract":"KIDz","time":0},{"type":"external-function ","before":"function setTokenURI(uint256 _tokenId, string memory _uri) external onlyOwner {\n        _setTokenURI(_tokenId, _uri);\n    }","after":"function setTokenURI(uint256 _tokenId, string calldata _uri) external onlyOwner {\n        _setTokenURI(_tokenId, _uri);\n    }","contract":"KIDz","time":0},{"type":"external-function ","before":"function setBaseURI(string memory _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","after":"function setBaseURI(string calldata _baseURI) external onlyOwner {\n        _setBaseURI(_baseURI);\n    }","contract":"KIDz","time":0}]}
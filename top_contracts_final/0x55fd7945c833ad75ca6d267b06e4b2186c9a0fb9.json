{"time":155,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant LBP_GIFT = 500;\nuint256 public constant LBP_PUBLIC = 9499;\nuint256 public constant LBP_MAX = LBP_PUBLIC + LBP_GIFT;\nuint256 public constant LBP_PRICE = 0.03 ether;\nuint256 public constant LBP_PRIVATE_PRICE = 0.02 ether;\nuint256 public constant LBP_PER_MINT = 5;\nmapping(string => bool) private _usedNonces;\nstring private _contractURI;\nstring private _tokenBaseURI = \"https://api.babypunks.net/metadata/\";\naddress private _signerAddress = 0xFDA548926C2c3161B9409A3027FFcce9E7d6Ef25;\naddress private _privateSignerAddress = 0xa5b69c2E15BdC33B32df777dC7c659e40176b259;\nstring public proof;\nuint256 public giftedAmount;\nuint256 public publicAmountMinted;\nbool public saleLive;\nbool public locked;","after":"uint256 public constant LBP_GIFT = 500;\nuint256 public constant LBP_PUBLIC = 9499;\nuint256 public constant LBP_MAX = LBP_PUBLIC + LBP_GIFT;\nuint256 public constant LBP_PRICE = 0.03 ether;\nuint256 public constant LBP_PRIVATE_PRICE = 0.02 ether;\nuint256 public constant LBP_PER_MINT = 5;\nmapping(string => bool) private _usedNonces;\nstring private _contractURI;\nstring private _tokenBaseURI = \"https://api.babypunks.net/metadata/\";\nstring public proof;\nuint256 public giftedAmount;\nuint256 public publicAmountMinted;\naddress private _signerAddress = 0xFDA548926C2c3161B9409A3027FFcce9E7d6Ef25;\naddress private _privateSignerAddress = 0xa5b69c2E15BdC33B32df777dC7c659e40176b259;\nbool public saleLive;\nbool public locked;\n","contract":"LBPNFT","time":0},{"type":"external-function ","before":"function buy(bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, false), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < LBP_MAX, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= LBP_PUBLIC, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= LBP_PER_MINT, \"EXCEED_LBP_PER_MINT\");\n      require(LBP_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      \n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","after":"function buy(bytes32 hash, bytes calldata signature, string calldata nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, false), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < LBP_MAX, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= LBP_PUBLIC, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= LBP_PER_MINT, \"EXCEED_LBP_PER_MINT\");\n      require(LBP_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      \n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","contract":"LBPNFT","time":0},{"type":"external-function ","before":"function privateBuy(bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, true), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < LBP_MAX, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= LBP_PUBLIC, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= LBP_PER_MINT, \"EXCEED_LBP_PER_MINT\");\n      require(LBP_PRIVATE_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      \n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","after":"function privateBuy(bytes32 hash, bytes calldata signature, string calldata nonce, uint256 tokenQuantity) external payable {\n      require(saleLive, \"SALE_CLOSED\");\n      require(matchAddresSigner(hash, signature, true), \"DIRECT_MINT_DISALLOWED\");\n      require(!_usedNonces[nonce], \"HASH_USED\");\n      require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n      require(totalSupply() < LBP_MAX, \"OUT_OF_STOCK\");\n      require(publicAmountMinted + tokenQuantity <= LBP_PUBLIC, \"EXCEED_PUBLIC\");\n      require(tokenQuantity <= LBP_PER_MINT, \"EXCEED_LBP_PER_MINT\");\n      require(LBP_PRIVATE_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n      \n      for(uint256 i = 0; i < tokenQuantity; i++) {\n          publicAmountMinted++;\n          _safeMint(msg.sender, totalSupply() + 1);\n      }\n      \n      _usedNonces[nonce] = true;\n    }","contract":"LBPNFT","time":0}]}
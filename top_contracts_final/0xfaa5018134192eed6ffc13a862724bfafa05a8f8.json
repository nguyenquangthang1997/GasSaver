{"time":150,"results":[{"type":"struct-data-arrangement ","before":"\naddress discoveredBy\nuint256 mintPrice\nbool refundable","after":"uint256 mintPrice\naddress discoveredBy\nbool refundable\n","contract":"TheRockingUniquehorns","time":0},{"type":"external-function ","before":"function fire(uint256[] memory tokenIds) external nonReentrant {\n        require(_isRefundPeriodActive(),                \"Return period is not active.\");\n\n        uint256 totalRefund = 0 ether;\n\n        for(uint256 i = 0; i < tokenIds.length; i++){\n            uint256 tokenId = tokenIds[i];\n            if(ownerOf(tokenId) == msg.sender && originalBandMembers[tokenId].refundable) {\n                //Transfer back to TRU to pool\n                _transfer(msg.sender, _returnPoolAddress, tokenId);\n                _returnedCounter.increment();\n                totalRefund += originalBandMembers[tokenId].mintPrice;\n            }\n        }\n\n        // refund former holder with the price that was paid during minting\n        _widthdraw(msg.sender, totalRefund);\n    }","after":"function fire(uint256[] calldata tokenIds) external nonReentrant {\n        require(_isRefundPeriodActive(),                \"Return period is not active.\");\n\n        uint256 totalRefund = 0 ether;\n\n        for(uint256 i = 0; i < tokenIds.length; i++){\n            uint256 tokenId = tokenIds[i];\n            if(ownerOf(tokenId) == msg.sender && originalBandMembers[tokenId].refundable) {\n                //Transfer back to TRU to pool\n                _transfer(msg.sender, _returnPoolAddress, tokenId);\n                _returnedCounter.increment();\n                totalRefund += originalBandMembers[tokenId].mintPrice;\n            }\n        }\n\n        // refund former holder with the price that was paid during minting\n        _widthdraw(msg.sender, totalRefund);\n    }","contract":"TheRockingUniquehorns","time":0},{"type":"external-function ","before":"function stagedive(address[] memory addresses) external onlyOwner {\n        require( addresses.length <= PROMO_TICKETS, \"Not enough promo tickets. This would exceed reserved TRU supply\" );\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            //promo TRUs can't be refunded\n            _mintInternal(addresses[i], 1, false);\n            PROMO_TICKETS--;\n        }\n    }","after":"function stagedive(address[] calldata addresses) external onlyOwner {\n        require( addresses.length <= PROMO_TICKETS, \"Not enough promo tickets. This would exceed reserved TRU supply\" );\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            //promo TRUs can't be refunded\n            _mintInternal(addresses[i], 1, false);\n            PROMO_TICKETS--;\n        }\n    }","contract":"TheRockingUniquehorns","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) external onlyOwner {\n        PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) external onlyOwner {\n        PROVENANCE = provenanceHash;\n    }","contract":"TheRockingUniquehorns","time":0},{"type":"external-function ","before":"function setBaseURI(string memory baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","after":"function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }","contract":"TheRockingUniquehorns","time":0},{"type":"external-function ","before":"function setContractURI(string memory newURI) external onlyOwner {\n        _contractURI = newURI;\n    }","after":"function setContractURI(string calldata newURI) external onlyOwner {\n        _contractURI = newURI;\n    }","contract":"TheRockingUniquehorns","time":0},{"type":"external-function ","before":"function addToWhitelist(address[] memory addresses) external onlyOwner {\n        for(uint256 i = 0; i < addresses.length; i++) {\n            whitelist[addresses[i]] = _maxBookingSizeWhitelist;\n        }\n    }","after":"function addToWhitelist(address[] calldata addresses) external onlyOwner {\n        for(uint256 i = 0; i < addresses.length; i++) {\n            whitelist[addresses[i]] = _maxBookingSizeWhitelist;\n        }\n    }","contract":"TheRockingUniquehorns","time":0},{"type":"external-function ","before":"function editWhitelist(address[] memory addresses, uint256[] memory amounts) external onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelist[addresses[i]] = amounts[i];\n        }\n    }","after":"function editWhitelist(address[] calldata addresses, uint256[] calldata amounts) external onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelist[addresses[i]] = amounts[i];\n        }\n    }","contract":"TheRockingUniquehorns","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public MAX_SUPPLY = 9990;","after":"uint256 public immutable MAX_SUPPLY = 9990;","contract":"TheRockingUniquehorns","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public PRICE = 0.0666 ether;","after":"uint256 public constant PRICE = 0.0666 ether;","contract":"TheRockingUniquehorns","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public RETURN_PERIOD_START = 1638813966;","after":"uint256 public immutable RETURN_PERIOD_START = 1638813966;","contract":"TheRockingUniquehorns","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public RETURN_PERIOD_END = 1644516366;","after":"uint256 public immutable RETURN_PERIOD_END = 1644516366;","contract":"TheRockingUniquehorns","time":1},{"type":"constant-restrict-modification  ","before":"uint256 private _maxReturnable = 0;","after":"uint256 private constant _maxReturnable = 0;","contract":"TheRockingUniquehorns","time":1}]}
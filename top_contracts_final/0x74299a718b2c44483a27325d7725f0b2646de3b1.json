{"time":116,"results":[{"type":"external-function ","before":"function addProject(string memory _name, uint256 _startBlock, uint256 _endBlock) external {\n        require(msg.sender == owner, \"addNewProject: Caller is not the owner\");\n        require(bytes(_name).length > 0 , \"addNewProject: Project name cannot be empty string.\");\n        require(\n            _startBlock >= block.number, \n            \"addNewProject: startBlock is less than the current block number.\"\n        );\n        require(\n            _startBlock < _endBlock, \n            \"addNewProject: startBlock is greater than or equal to the endBlock.\"\n        );\n        require(!isProjectNameTaken[_name], \"addNewProject: project name already taken.\");\n        \n        Project memory project;\n        project.name = _name;  \n        project.startBlock = _startBlock;\n        project.endBlock = _endBlock;\n        project.numberOfPools = 0;        \n        project.totalAmountStaked = 0;    \n        \n        uint256 projectsLength = projects.length;\n        projects.push(project);\n        projectNameToProjectId[_name] = projectsLength;\n        isProjectNameTaken[_name] = true;\n        \n        emit ProjectAdded(projectsLength, _name);\n    }","after":"function addProject(string calldata _name, uint256 _startBlock, uint256 _endBlock) external {\n        require(msg.sender == owner, \"addNewProject: Caller is not the owner\");\n        require(bytes(_name).length > 0 , \"addNewProject: Project name cannot be empty string.\");\n        require(\n            _startBlock >= block.number, \n            \"addNewProject: startBlock is less than the current block number.\"\n        );\n        require(\n            _startBlock < _endBlock, \n            \"addNewProject: startBlock is greater than or equal to the endBlock.\"\n        );\n        require(!isProjectNameTaken[_name], \"addNewProject: project name already taken.\");\n        \n        Project memory project;\n        project.name = _name;  \n        project.startBlock = _startBlock;\n        project.endBlock = _endBlock;\n        project.numberOfPools = 0;        \n        project.totalAmountStaked = 0;    \n        \n        uint256 projectsLength = projects.length;\n        projects.push(project);\n        projectNameToProjectId[_name] = projectsLength;\n        isProjectNameTaken[_name] = true;\n        \n        emit ProjectAdded(projectsLength, _name);\n    }","contract":"LatticeStakingPool","time":0},{"type":"external-function ","before":"function whitelistAddresses( \n        uint256 _projectId, \n        address[] memory _newAddressesToWhitelist\n    ) external {\n        require(msg.sender == owner, \"whitelistAddresses: Caller is not the owner\");\n        require(_projectId < projects.length, \"whitelistAddresses: Invalid project ID.\");\n        require(\n            _newAddressesToWhitelist.length > 0, \n            \"whitelistAddresses: Addresses array is empty.\"\n        );\n        \n        for (uint i=0; i < _newAddressesToWhitelist.length; i++) {\n            if(!projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]]){\n                projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]] = true;\n                projectIdToWhitelistedArray[_projectId].push(_newAddressesToWhitelist[i]);\n            }\n        }\n    }","after":"function whitelistAddresses( \n        uint256 _projectId, \n        address[] calldata _newAddressesToWhitelist\n    ) external {\n        require(msg.sender == owner, \"whitelistAddresses: Caller is not the owner\");\n        require(_projectId < projects.length, \"whitelistAddresses: Invalid project ID.\");\n        require(\n            _newAddressesToWhitelist.length > 0, \n            \"whitelistAddresses: Addresses array is empty.\"\n        );\n        \n        for (uint i=0; i < _newAddressesToWhitelist.length; i++) {\n            if(!projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]]){\n                projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]] = true;\n                projectIdToWhitelistedArray[_projectId].push(_newAddressesToWhitelist[i]);\n            }\n        }\n    }","contract":"LatticeStakingPool","time":0},{"type":"immutable-restrict-modification ","before":"address private owner;","after":"address private immutable owner;","contract":"LatticeStakingPool","time":0}]}
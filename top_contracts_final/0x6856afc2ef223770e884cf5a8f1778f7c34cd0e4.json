{"time":613,"results":[{"type":"state-data-arrangement ","before":"\nstring public TastyToastys_HASH = \"\";\naddress private _signerAddress = 0x5F732aA85B34904bd8d6418aF8b6F534E354d5D4;\nuint256 public constant TT_RESERVE = 100;\nuint256 public constant NFT_PRESALE_PRICE = 38000000000000000;\nuint256 public constant NFT_PRICE = 58000000000000000;\nuint public constant MAX_SUPPLY = 7600;\nstring private _baseTokenURI;\nbool public hasSaleStarted = false;\nuint private constant MAX_MINT_PER_CALL = 4;\nbool public hasPreSaleStarted = false;\nuint public constant MAX_PRESALE_SUPPLY = 800;\nuint256 public presaleMaxMint = 2;\nmapping (address => bool) private presaleList;\nmapping (address => uint256) private presaleListClaimed;\nmapping (string => bool) private _usedNonces;","after":"string public TastyToastys_HASH = \"\";\nuint256 public constant TT_RESERVE = 100;\nuint256 public constant NFT_PRESALE_PRICE = 38000000000000000;\nuint256 public constant NFT_PRICE = 58000000000000000;\nuint public constant MAX_SUPPLY = 7600;\nstring private _baseTokenURI;\nuint private constant MAX_MINT_PER_CALL = 4;\nuint public constant MAX_PRESALE_SUPPLY = 800;\nuint256 public presaleMaxMint = 2;\nmapping (address => bool) private presaleList;\nmapping (address => uint256) private presaleListClaimed;\nmapping (string => bool) private _usedNonces;\naddress private _signerAddress = 0x5F732aA85B34904bd8d6418aF8b6F534E354d5D4;\nbool public hasSaleStarted = false;\nbool public hasPreSaleStarted = false;\n","contract":"TastyToastys","time":1},{"type":"external-function ","before":"function Mint(uint256 numNFTs, bytes32 hash, bytes memory signature, string memory nonce) public payable {\n    require(hasSaleStarted, \"Sale has not started\");\n    require(MAX_SUPPLY > totalSupply(), \"Sale has ended\");\n    require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n    require(!_usedNonces[nonce], \"HASH_USED\");\n    require(hashTransaction(msg.sender, numNFTs, nonce) == hash, \"HASH_FAIL\");\n    require(numNFTs > 0 && numNFTs <= MAX_MINT_PER_CALL, \"Exceeds MAX_MINT_PER_CALL\");\n    require(MAX_SUPPLY >= totalSupply() + numNFTs, \"Exceeds MAX_SUPPLY\");\n    require(msg.value >= NFT_PRICE * numNFTs, \"Incorrect ether value\");\n\n    for (uint i = 0; i < numNFTs; i++) {\n      uint mintIndex = totalSupply() + 1; // +1 so it doesn't start on index 0.\n      _safeMint(msg.sender, mintIndex);\n    }    \n    _usedNonces[nonce] = true;\n  }","after":"function Mint(uint256 numNFTs, bytes32 hash, bytes calldata signature, string calldata nonce) public payable {\n    require(hasSaleStarted, \"Sale has not started\");\n    require(MAX_SUPPLY > totalSupply(), \"Sale has ended\");\n    require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n    require(!_usedNonces[nonce], \"HASH_USED\");\n    require(hashTransaction(msg.sender, numNFTs, nonce) == hash, \"HASH_FAIL\");\n    require(numNFTs > 0 && numNFTs <= MAX_MINT_PER_CALL, \"Exceeds MAX_MINT_PER_CALL\");\n    require(MAX_SUPPLY >= totalSupply() + numNFTs, \"Exceeds MAX_SUPPLY\");\n    require(msg.value >= NFT_PRICE * numNFTs, \"Incorrect ether value\");\n\n    for (uint i = 0; i < numNFTs; i++) {\n      uint mintIndex = totalSupply() + 1; // +1 so it doesn't start on index 0.\n      _safeMint(msg.sender, mintIndex);\n    }    \n    _usedNonces[nonce] = true;\n  }","contract":"TastyToastys","time":0},{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n    TastyToastys_HASH = provenanceHash;\n  }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n    TastyToastys_HASH = provenanceHash;\n  }","contract":"TastyToastys","time":0},{"type":"constant-restrict-modification  ","before":"address private _signerAddress = 0x5F732aA85B34904bd8d6418aF8b6F534E354d5D4;","after":"address private constant _signerAddress = 0x5F732aA85B34904bd8d6418aF8b6F534E354d5D4;","contract":"TastyToastys","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public presaleMaxMint = 2;","after":"uint256 public constant presaleMaxMint = 2;","contract":"TastyToastys","time":1}]}
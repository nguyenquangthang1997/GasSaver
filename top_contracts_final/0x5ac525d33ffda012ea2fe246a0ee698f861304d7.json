{"time":237,"results":[{"type":"de-morgan-condition ","before":"!_isExcludedFromFee[from] && !_isExcludedFromFee[to]","after":"!(_isExcludedFromFee[from] && _isExcludedFromFee[to])","loc":{"start":{"line":1065,"column":12},"end":{"line":1065,"column":63}},"contract":"MetaverseCapital","time":0},{"type":"external-function ","before":"function airdropToWallets(address[] memory airdropWallets, uint256[] memory amount) external onlyOwner() {\n        require(airdropWallets.length == amount.length, \"airdropToWallets:: Arrays must be the same length\");\n        removeAllFee();\n        buyOrSellSwitch = TRANSFER;\n        for(uint256 i = 0; i < airdropWallets.length; i++){\n            address wallet = airdropWallets[i];\n            uint256 airdropAmount = amount[i]  * (10**9);\n            _tokenTransfer(msg.sender, wallet, airdropAmount);\n        }\n        restoreAllFee();\n    }","after":"function airdropToWallets(address[] calldata airdropWallets, uint256[] calldata amount) external onlyOwner() {\n        require(airdropWallets.length == amount.length, \"airdropToWallets:: Arrays must be the same length\");\n        removeAllFee();\n        buyOrSellSwitch = TRANSFER;\n        for(uint256 i = 0; i < airdropWallets.length; i++){\n            address wallet = airdropWallets[i];\n            uint256 airdropAmount = amount[i]  * (10**9);\n            _tokenTransfer(msg.sender, wallet, airdropAmount);\n        }\n        restoreAllFee();\n    }","contract":"MetaverseCapital","time":1},{"type":"external-function ","before":"function launch(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner returns (bool){\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\n        require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\n        for(uint256 i = 0; i < airdropWallets.length; i++){\n            address wallet = airdropWallets[i];\n            uint256 amount = amounts[i] * (10**9);\n            _transfer(msg.sender, wallet, amount);\n        }\n        enableTrading();\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);    \n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n        require(address(this).balance > 0, \"Must have ETH on contract to launch\");\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n        liquidityAddress = payable(address(0xc4c3F428C6f128ceaf8C0c6C6C9B947d41352666));\n        return true;\n    }","after":"function launch(address[] calldata airdropWallets, uint256[] calldata amounts) external onlyOwner returns (bool){\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\n        require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\n        for(uint256 i = 0; i < airdropWallets.length; i++){\n            address wallet = airdropWallets[i];\n            uint256 amount = amounts[i] * (10**9);\n            _transfer(msg.sender, wallet, amount);\n        }\n        enableTrading();\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);    \n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n        require(address(this).balance > 0, \"Must have ETH on contract to launch\");\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n        liquidityAddress = payable(address(0xc4c3F428C6f128ceaf8C0c6C6C9B947d41352666));\n        return true;\n    }","contract":"MetaverseCapital","time":0},{"type":"constant-restrict-modification  ","before":"address payable public devAddress =\n        payable(0x69f671B159De297358e900e983caA3CB1C2aE019);","after":"address payable public constant devAddress =\n        payable(0x69f671B159De297358e900e983caA3CB1C2aE019);","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"address public immutable deadAddress =\n        0x000000000000000000000000000000000000dEaD;","after":"address public immutable constant deadAddress =\n        0x000000000000000000000000000000000000dEaD;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public _buyTaxFee = 0;","after":"uint256 public constant _buyTaxFee = 0;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public _buyLiquidityFee = 0;","after":"uint256 public constant _buyLiquidityFee = 0;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public _buyBuybackFee = 0;","after":"uint256 public constant _buyBuybackFee = 0;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public _sellTaxFee = 0;","after":"uint256 public constant _sellTaxFee = 0;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public _sellLiquidityFee = 0;","after":"uint256 public constant _sellLiquidityFee = 0;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public _sellBuybackFee = 0;","after":"uint256 public constant _sellBuybackFee = 0;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public liquidityActiveBlock = 0;","after":"uint256 public constant liquidityActiveBlock = 0;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"bool public swapEnabled = false;","after":"bool public constant swapEnabled = false;","contract":"MetaverseCapital","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public minimumTokensBeforeSwap = _tTotal * 5 / 10000;","after":"uint256 public constant minimumTokensBeforeSwap = _tTotal * 5 / 10000;","contract":"MetaverseCapital","time":1},{"type":"immutable-restrict-modification ","before":"uint256 public maxWallet;","after":"uint256 public immutable maxWallet;","contract":"MetaverseCapital","time":1}]}
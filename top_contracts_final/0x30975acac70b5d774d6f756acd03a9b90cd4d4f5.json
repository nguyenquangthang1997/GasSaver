{"time":133,"results":[{"type":"state-data-arrangement ","before":"\nstring public baseURI;\nstring public baseExtension = \".json\";\naddress private signerAddress;\nuint256 public cost = .0 ether;\nuint256 public maxSupply = 10000;\nuint256 public maxAmountPerMint = 2;\nuint256 public maxMintPerAddress = 2;\nbool public publicEnabled = false;\nbool public presaleEnabled = false;\nmapping(address => bool) public whitelisted;\nmapping(address => uint256) public addressMintCount;","after":"string public baseURI;\nstring public baseExtension = \".json\";\nuint256 public cost = .0 ether;\nuint256 public maxSupply = 10000;\nuint256 public maxAmountPerMint = 2;\nuint256 public maxMintPerAddress = 2;\nmapping(address => bool) public whitelisted;\nmapping(address => uint256) public addressMintCount;\naddress private signerAddress;\nbool public publicEnabled = false;\nbool public presaleEnabled = false;\n","contract":"MutantPunksNFT","time":0},{"type":"external-function ","before":"function presaleMint(address _to, uint256 _mintAmount, bytes memory sig) public payable mintConditionsMet(_to, _mintAmount) {\n        uint256 supply = totalSupply();\n        require(presaleEnabled, \"pre-sale is not enabled\");\n        require(isValidSignedData(sig), \"wallet was not signed by the official whitelisting signer\");\n        for (uint256 i = 1; i <= _mintAmount; i++) {\n            _safeMint(_to, supply + i);\n            addressMintCount[_to] = (addressMintCount[_to] + _mintAmount);\n        }\n    }","after":"function presaleMint(address _to, uint256 _mintAmount, bytes calldata sig) public payable mintConditionsMet(_to, _mintAmount) {\n        uint256 supply = totalSupply();\n        require(presaleEnabled, \"pre-sale is not enabled\");\n        require(isValidSignedData(sig), \"wallet was not signed by the official whitelisting signer\");\n        for (uint256 i = 1; i <= _mintAmount; i++) {\n            _safeMint(_to, supply + i);\n            addressMintCount[_to] = (addressMintCount[_to] + _mintAmount);\n        }\n    }","contract":"MutantPunksNFT","time":0},{"type":"external-function ","before":"function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\n        baseExtension = _newBaseExtension;\n    }","after":"function setBaseExtension(string calldata _newBaseExtension) public onlyOwner {\n        baseExtension = _newBaseExtension;\n    }","contract":"MutantPunksNFT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public maxSupply = 10000;","after":"uint256 public constant maxSupply = 10000;","contract":"MutantPunksNFT","time":1}]}
{"time":133,"results":[{"type":"external-function ","before":"function checkSwap(IERC20 depositToken, IERC20 outToken, uint inAmount, DexAggregatorInterface dexAgg, bytes memory data) external payable {\n        depositToken.safeTransferFrom(msg.sender, address(this), inAmount);\n        checkSwapInternal(depositToken, outToken, inAmount, dexAgg, data);\n    }","after":"function checkSwap(IERC20 depositToken, IERC20 outToken, uint inAmount, DexAggregatorInterface dexAgg, bytes calldata data) external payable {\n        depositToken.safeTransferFrom(msg.sender, address(this), inAmount);\n        checkSwapInternal(depositToken, outToken, inAmount, dexAgg, data);\n    }","contract":"LPoolDepositor","time":0},{"type":"external-function ","before":"function checkSwapNative(IWETH weth, IERC20 outToken, DexAggregatorInterface dexAgg, bytes memory data) external payable {\n        weth.deposit{value : msg.value}();\n        checkSwapInternal(IERC20(address(weth)), outToken, msg.value, dexAgg, data);\n    }","after":"function checkSwapNative(IWETH weth, IERC20 outToken, DexAggregatorInterface dexAgg, bytes calldata data) external payable {\n        weth.deposit{value : msg.value}();\n        checkSwapInternal(IERC20(address(weth)), outToken, msg.value, dexAgg, data);\n    }","contract":"LPoolDepositor","time":0},{"type":"state-data-arrangement ","before":"\nbool internal _notEntered;\nstring public name;\nstring public symbol;\nuint8 public decimals;\nuint public totalSupply;\nmapping(address => uint) internal accountTokens;\nmapping(address => mapping(address => uint)) internal transferAllowances;\nuint internal constant borrowRateMaxMantissa = 0.0005e16;\nuint public  borrowCapFactorMantissa;\naddress public controller;\nuint internal initialExchangeRateMantissa;\nuint public accrualBlockNumber;\nuint public borrowIndex;\nuint public totalBorrows;\nuint internal totalCash;\nuint public reserveFactorMantissa;\nuint public totalReserves;\naddress public underlying;\nbool public isWethPool;\nuint256 public baseRatePerBlock;\nuint256 public multiplierPerBlock;\nuint256 public jumpMultiplierPerBlock;\nuint256 public kink;\nmapping(address => BorrowSnapshot) internal accountBorrows;","after":"string public name;\nstring public symbol;\nuint public totalSupply;\nmapping(address => uint) internal accountTokens;\nmapping(address => mapping(address => uint)) internal transferAllowances;\nuint internal constant borrowRateMaxMantissa = 0.0005e16;\nuint public  borrowCapFactorMantissa;\nuint internal initialExchangeRateMantissa;\nuint public accrualBlockNumber;\nuint public borrowIndex;\nuint public totalBorrows;\nuint internal totalCash;\nuint public reserveFactorMantissa;\nuint public totalReserves;\nuint256 public baseRatePerBlock;\nuint256 public multiplierPerBlock;\nuint256 public jumpMultiplierPerBlock;\nuint256 public kink;\nmapping(address => BorrowSnapshot) internal accountBorrows;\naddress public controller;\naddress public underlying;\nbool internal _notEntered;\nuint8 public decimals;\nbool public isWethPool;\n","contract":"LPoolStorage","time":0}]}
{"time":198,"results":[{"type":"state-data-arrangement ","before":"\nuint256 public constant OVCD_GIFT = 77;\nuint256 public constant OVCD_PUBLIC = 7700;\nuint256 public constant OVCD_MAX = OVCD_GIFT + OVCD_PUBLIC;\nuint256 public constant OVCD_PRICE = 0.07 ether;\nuint256 public constant PURCHASE_LIMIT = 5;\nuint256 public totalGiftSupply;\nuint256 public totalPublicSupply;\nbool public isPresale;\nbool public isPublic;\nbool public locked;\nstring public proof;\nstring private _contractURI;\nstring private _tokenBaseURI;\naddress private _partnerAddress = 0xA49fe1C6369015020999A5bEAf464b18e6BB6c18;\naddress private _signerAddress;\nmapping(string => bool) private _usedNonces;\nmapping(address => uint256) public presalerListPurchases;","after":"uint256 public constant OVCD_GIFT = 77;\nuint256 public constant OVCD_PUBLIC = 7700;\nuint256 public constant OVCD_MAX = OVCD_GIFT + OVCD_PUBLIC;\nuint256 public constant OVCD_PRICE = 0.07 ether;\nuint256 public constant PURCHASE_LIMIT = 5;\nuint256 public totalGiftSupply;\nuint256 public totalPublicSupply;\nstring public proof;\nstring private _contractURI;\nstring private _tokenBaseURI;\nmapping(string => bool) private _usedNonces;\nmapping(address => uint256) public presalerListPurchases;\naddress private _partnerAddress = 0xA49fe1C6369015020999A5bEAf464b18e6BB6c18;\naddress private _signerAddress;\nbool public isPresale;\nbool public isPublic;\nbool public locked;\n","contract":"OverCloudz","time":0},{"type":"external-function ","before":"function purchaseWhitelist(bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity, uint256 hashQuantity) external payable {\r\n        require(isPresale, \"Presale is not active\");\r\n        require(matchAddresSigner(hash, signature), \"No direct mint\");\r\n        \r\n        require(hashTransaction(msg.sender, hashQuantity, nonce) == hash, \"Unable to verify hash\");\r\n        require(tokenQuantity <= hashQuantity, \"Unable to mint more than determined number\");\r\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= hashQuantity, \"Purchase would exceed presale limit\");\r\n        \r\n        require(totalSupply() < OVCD_MAX, \"All tokens have been minted\");\r\n        require(totalPublicSupply + tokenQuantity <= OVCD_PUBLIC, \"Purchase would exceed public limit\");\r\n        require(tokenQuantity <= PURCHASE_LIMIT, \"Purchase would exceed purchase limit\");\r\n        require(OVCD_PRICE * tokenQuantity <= msg.value, \"Insufficient ETH\");\r\n        \r\n        for(uint256 i = 0; i < tokenQuantity; i++) {\r\n            uint256 tokenId = totalSupply() + 1;\r\n            \r\n            presalerListPurchases[msg.sender]++;\r\n            totalPublicSupply++;\r\n            _safeMint(msg.sender, tokenId);\r\n        }\r\n        \r\n        _usedNonces[nonce] = true;\r\n    }","after":"function purchaseWhitelist(bytes32 hash, bytes calldata signature, string calldata nonce, uint256 tokenQuantity, uint256 hashQuantity) external payable {\r\n        require(isPresale, \"Presale is not active\");\r\n        require(matchAddresSigner(hash, signature), \"No direct mint\");\r\n        \r\n        require(hashTransaction(msg.sender, hashQuantity, nonce) == hash, \"Unable to verify hash\");\r\n        require(tokenQuantity <= hashQuantity, \"Unable to mint more than determined number\");\r\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= hashQuantity, \"Purchase would exceed presale limit\");\r\n        \r\n        require(totalSupply() < OVCD_MAX, \"All tokens have been minted\");\r\n        require(totalPublicSupply + tokenQuantity <= OVCD_PUBLIC, \"Purchase would exceed public limit\");\r\n        require(tokenQuantity <= PURCHASE_LIMIT, \"Purchase would exceed purchase limit\");\r\n        require(OVCD_PRICE * tokenQuantity <= msg.value, \"Insufficient ETH\");\r\n        \r\n        for(uint256 i = 0; i < tokenQuantity; i++) {\r\n            uint256 tokenId = totalSupply() + 1;\r\n            \r\n            presalerListPurchases[msg.sender]++;\r\n            totalPublicSupply++;\r\n            _safeMint(msg.sender, tokenId);\r\n        }\r\n        \r\n        _usedNonces[nonce] = true;\r\n    }","contract":"OverCloudz","time":0},{"type":"constant-restrict-modification  ","before":"address private _partnerAddress = 0xA49fe1C6369015020999A5bEAf464b18e6BB6c18;","after":"address private constant _partnerAddress = 0xA49fe1C6369015020999A5bEAf464b18e6BB6c18;","contract":"OverCloudz","time":1}]}
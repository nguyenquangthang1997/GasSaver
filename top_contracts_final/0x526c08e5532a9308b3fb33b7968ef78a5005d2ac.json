{"time":608,"results":[{"type":"external-function ","before":"function unqualifiedDepositToTbtc(\n        address payable _depositAddress,\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        Deposit _d = Deposit(_depositAddress);\n        _d.provideBTCFundingProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n\n        tdtToTbtc(uint256(_depositAddress));\n    }","after":"function unqualifiedDepositToTbtc(\n        address payable _depositAddress,\n        bytes4 _txVersion,\n        bytes calldata _txInputVector,\n        bytes calldata _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes calldata _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes calldata _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        Deposit _d = Deposit(_depositAddress);\n        _d.provideBTCFundingProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n\n        tdtToTbtc(uint256(_depositAddress));\n    }","contract":"VendingMachine","time":0},{"type":"external-function ","before":"function tbtcToBtc(\n        address payable _depositAddress,\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        require(tbtcDepositToken.exists(uint256(_depositAddress)), \"tBTC Deposit Token does not exist\");\n        Deposit _d = Deposit(_depositAddress);\n\n        tbtcToken.burnFrom(msg.sender, _d.lotSizeTbtc());\n        tbtcDepositToken.approve(_depositAddress, uint256(_depositAddress));\n\n        uint256 tbtcOwed = _d.getOwnerRedemptionTbtcRequirement(msg.sender);\n\n        if(tbtcOwed != 0){\n            tbtcToken.transferFrom(msg.sender, address(this), tbtcOwed);\n            tbtcToken.approve(_depositAddress, tbtcOwed);\n        }\n\n        _d.transferAndRequestRedemption(_outputValueBytes, _redeemerOutputScript, msg.sender);\n    }","after":"function tbtcToBtc(\n        address payable _depositAddress,\n        bytes8 _outputValueBytes,\n        bytes calldata _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        require(tbtcDepositToken.exists(uint256(_depositAddress)), \"tBTC Deposit Token does not exist\");\n        Deposit _d = Deposit(_depositAddress);\n\n        tbtcToken.burnFrom(msg.sender, _d.lotSizeTbtc());\n        tbtcDepositToken.approve(_depositAddress, uint256(_depositAddress));\n\n        uint256 tbtcOwed = _d.getOwnerRedemptionTbtcRequirement(msg.sender);\n\n        if(tbtcOwed != 0){\n            tbtcToken.transferFrom(msg.sender, address(this), tbtcOwed);\n            tbtcToken.approve(_depositAddress, tbtcOwed);\n        }\n\n        _d.transferAndRequestRedemption(_outputValueBytes, _redeemerOutputScript, msg.sender);\n    }","contract":"VendingMachine","time":0},{"type":"external-function ","before":"function requestFunderAbort(bytes memory _abortOutputScript) public { // not external to allow bytes memory parameters\n        require(\n            self.depositOwner() == msg.sender,\n            \"Only TDT holder can request funder abort\"\n        );\n\n        self.requestFunderAbort(_abortOutputScript);\n    }","after":"function requestFunderAbort(bytes calldata _abortOutputScript) public { // not external to allow bytes memory parameters\n        require(\n            self.depositOwner() == msg.sender,\n            \"Only TDT holder can request funder abort\"\n        );\n\n        self.requestFunderAbort(_abortOutputScript);\n    }","contract":"Deposit","time":0},{"type":"external-function ","before":"function provideFundingECDSAFraudProof(\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        self.provideFundingECDSAFraudProof(_v, _r, _s, _signedDigest, _preimage);\n    }","after":"function provideFundingECDSAFraudProof(\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes calldata _preimage\n    ) public { // not external to allow bytes memory parameters\n        self.provideFundingECDSAFraudProof(_v, _r, _s, _signedDigest, _preimage);\n    }","contract":"Deposit","time":0},{"type":"external-function ","before":"function provideBTCFundingProof(\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        self.provideBTCFundingProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n    }","after":"function provideBTCFundingProof(\n        bytes4 _txVersion,\n        bytes calldata _txInputVector,\n        bytes calldata _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes calldata _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes calldata _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        self.provideBTCFundingProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n    }","contract":"Deposit","time":0},{"type":"external-function ","before":"function provideECDSAFraudProof(\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        self.provideECDSAFraudProof(_v, _r, _s, _signedDigest, _preimage);\n    }","after":"function provideECDSAFraudProof(\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes calldata _preimage\n    ) public { // not external to allow bytes memory parameters\n        self.provideECDSAFraudProof(_v, _r, _s, _signedDigest, _preimage);\n    }","contract":"Deposit","time":0},{"type":"external-function ","before":"function requestRedemption(\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        self.requestRedemption(_outputValueBytes, _redeemerOutputScript);\n    }","after":"function requestRedemption(\n        bytes8 _outputValueBytes,\n        bytes calldata _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        self.requestRedemption(_outputValueBytes, _redeemerOutputScript);\n    }","contract":"Deposit","time":0},{"type":"external-function ","before":"function provideRedemptionProof(\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        self.provideRedemptionProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n    }","after":"function provideRedemptionProof(\n        bytes4 _txVersion,\n        bytes calldata _txInputVector,\n        bytes calldata _txOutputVector,\n        bytes4 _txLocktime,\n        bytes calldata _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes calldata _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        self.provideRedemptionProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n    }","contract":"Deposit","time":0},{"type":"external-function ","before":"function transferAndRequestRedemption(\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript,\n        address payable _finalRecipient\n    ) public { // not external to allow bytes memory parameters\n        require(\n            msg.sender == self.vendingMachineAddress,\n            \"Only the vending machine can call transferAndRequestRedemption\"\n        );\n        self.transferAndRequestRedemption(\n            _outputValueBytes,\n            _redeemerOutputScript,\n            _finalRecipient\n        );\n    }","after":"function transferAndRequestRedemption(\n        bytes8 _outputValueBytes,\n        bytes calldata _redeemerOutputScript,\n        address payable _finalRecipient\n    ) public { // not external to allow bytes memory parameters\n        require(\n            msg.sender == self.vendingMachineAddress,\n            \"Only the vending machine can call transferAndRequestRedemption\"\n        );\n        self.transferAndRequestRedemption(\n            _outputValueBytes,\n            _redeemerOutputScript,\n            _finalRecipient\n        );\n    }","contract":"Deposit","time":0},{"type":"external-function ","before":"function provideECDSAFraudProof(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        require(\n            !_d.inFunding(),\n            \"Use provideFundingECDSAFraudProof instead\"\n        );\n        require(\n            !_d.inSignerLiquidation(),\n            \"Signer liquidation already in progress\"\n        );\n        require(!_d.inEndState(), \"Contract has halted\");\n        submitSignatureFraud(_d, _v, _r, _s, _signedDigest, _preimage);\n\n        startLiquidation(_d, true);\n    }","after":"function provideECDSAFraudProof(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes calldata _preimage\n    ) public { // not external to allow bytes memory parameters\n        require(\n            !_d.inFunding(),\n            \"Use provideFundingECDSAFraudProof instead\"\n        );\n        require(\n            !_d.inSignerLiquidation(),\n            \"Signer liquidation already in progress\"\n        );\n        require(!_d.inEndState(), \"Contract has halted\");\n        submitSignatureFraud(_d, _v, _r, _s, _signedDigest, _preimage);\n\n        startLiquidation(_d, true);\n    }","contract":"DepositLiquidation","time":0},{"type":"external-function ","before":"function requestFunderAbort(\n        DepositUtils.Deposit storage _d,\n        bytes memory _abortOutputScript\n    ) public { // not external to allow bytes memory parameters\n        require(\n            _d.inFailedSetup(),\n            \"The deposit has not failed funding\"\n        );\n\n        _d.logFunderRequestedAbort(_abortOutputScript);\n    }","after":"function requestFunderAbort(\n        DepositUtils.Deposit storage _d,\n        bytes calldata _abortOutputScript\n    ) public { // not external to allow bytes memory parameters\n        require(\n            _d.inFailedSetup(),\n            \"The deposit has not failed funding\"\n        );\n\n        _d.logFunderRequestedAbort(_abortOutputScript);\n    }","contract":"DepositFunding","time":0},{"type":"external-function ","before":"function provideFundingECDSAFraudProof(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        require(\n            _d.inAwaitingBTCFundingProof(),\n            \"Signer fraud during funding flow only available while awaiting funding\"\n        );\n\n        _d.submitSignatureFraud(_v, _r, _s, _signedDigest, _preimage);\n        _d.logFraudDuringSetup();\n\n        // Allow deposit owner to withdraw seized bonds after contract termination.\n        uint256 _seized = _d.seizeSignerBonds();\n        _d.enableWithdrawal(_d.depositOwner(), _seized);\n\n        fundingFraudTeardown(_d);\n        _d.setFailedSetup();\n        _d.logSetupFailed();\n    }","after":"function provideFundingECDSAFraudProof(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes calldata _preimage\n    ) public { // not external to allow bytes memory parameters\n        require(\n            _d.inAwaitingBTCFundingProof(),\n            \"Signer fraud during funding flow only available while awaiting funding\"\n        );\n\n        _d.submitSignatureFraud(_v, _r, _s, _signedDigest, _preimage);\n        _d.logFraudDuringSetup();\n\n        // Allow deposit owner to withdraw seized bonds after contract termination.\n        uint256 _seized = _d.seizeSignerBonds();\n        _d.enableWithdrawal(_d.depositOwner(), _seized);\n\n        fundingFraudTeardown(_d);\n        _d.setFailedSetup();\n        _d.logSetupFailed();\n    }","contract":"DepositFunding","time":0},{"type":"external-function ","before":"function provideBTCFundingProof(\n        DepositUtils.Deposit storage _d,\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n\n        require(_d.inAwaitingBTCFundingProof(), \"Not awaiting funding\");\n\n        bytes8 _valueBytes;\n        bytes memory  _utxoOutpoint;\n\n        (_valueBytes, _utxoOutpoint) = _d.validateAndParseFundingSPVProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n\n        // Write down the UTXO info and set to active. Congratulations :)\n        _d.utxoValueBytes = _valueBytes;\n        _d.utxoOutpoint = _utxoOutpoint;\n        _d.fundedAt = block.timestamp;\n\n        bytes32 _txid = abi.encodePacked(_txVersion, _txInputVector, _txOutputVector, _txLocktime).hash256();\n\n        fundingTeardown(_d);\n        _d.setActive();\n        _d.logFunded(_txid);\n    }","after":"function provideBTCFundingProof(\n        DepositUtils.Deposit storage _d,\n        bytes4 _txVersion,\n        bytes calldata _txInputVector,\n        bytes calldata _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes calldata _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes calldata _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n\n        require(_d.inAwaitingBTCFundingProof(), \"Not awaiting funding\");\n\n        bytes8 _valueBytes;\n        bytes memory  _utxoOutpoint;\n\n        (_valueBytes, _utxoOutpoint) = _d.validateAndParseFundingSPVProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n\n        // Write down the UTXO info and set to active. Congratulations :)\n        _d.utxoValueBytes = _valueBytes;\n        _d.utxoOutpoint = _utxoOutpoint;\n        _d.fundedAt = block.timestamp;\n\n        bytes32 _txid = abi.encodePacked(_txVersion, _txInputVector, _txOutputVector, _txLocktime).hash256();\n\n        fundingTeardown(_d);\n        _d.setActive();\n        _d.logFunded(_txid);\n    }","contract":"DepositFunding","time":0},{"type":"external-function ","before":"function transferAndRequestRedemption(\n        DepositUtils.Deposit storage _d,\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript,\n        address payable _finalRecipient\n    ) public { // not external to allow bytes memory parameters\n        _d.tbtcDepositToken.transferFrom(msg.sender, _finalRecipient, uint256(address(this)));\n\n        _requestRedemption(_d, _outputValueBytes, _redeemerOutputScript, _finalRecipient);\n    }","after":"function transferAndRequestRedemption(\n        DepositUtils.Deposit storage _d,\n        bytes8 _outputValueBytes,\n        bytes calldata _redeemerOutputScript,\n        address payable _finalRecipient\n    ) public { // not external to allow bytes memory parameters\n        _d.tbtcDepositToken.transferFrom(msg.sender, _finalRecipient, uint256(address(this)));\n\n        _requestRedemption(_d, _outputValueBytes, _redeemerOutputScript, _finalRecipient);\n    }","contract":"DepositRedemption","time":0},{"type":"external-function ","before":"function requestRedemption(\n        DepositUtils.Deposit storage _d,\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        _requestRedemption(_d, _outputValueBytes, _redeemerOutputScript, msg.sender);\n    }","after":"function requestRedemption(\n        DepositUtils.Deposit storage _d,\n        bytes8 _outputValueBytes,\n        bytes calldata _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        _requestRedemption(_d, _outputValueBytes, _redeemerOutputScript, msg.sender);\n    }","contract":"DepositRedemption","time":0},{"type":"external-function ","before":"function provideRedemptionProof(\n        DepositUtils.Deposit storage _d,\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        bytes32 _txid;\n        uint256 _fundingOutputValue;\n\n        require(_d.inRedemption(), \"Redemption proof only allowed from redemption flow\");\n\n        _fundingOutputValue = redemptionTransactionChecks(_d, _txInputVector, _txOutputVector);\n\n        _txid = abi.encodePacked(_txVersion, _txInputVector, _txOutputVector, _txLocktime).hash256();\n        _d.checkProofFromTxId(_txid, _merkleProof, _txIndexInBlock, _bitcoinHeaders);\n\n        require((_d.utxoValue().sub(_fundingOutputValue)) <= _d.latestRedemptionFee, \"Incorrect fee amount\");\n\n        // Transfer TBTC to signers and close the keep.\n        distributeSignerFee(_d);\n        _d.closeKeep();\n\n        _d.distributeFeeRebate();\n\n        // We're done yey!\n        _d.setRedeemed();\n        _d.redemptionTeardown();\n        _d.logRedeemed(_txid);\n    }","after":"function provideRedemptionProof(\n        DepositUtils.Deposit storage _d,\n        bytes4 _txVersion,\n        bytes calldata _txInputVector,\n        bytes calldata _txOutputVector,\n        bytes4 _txLocktime,\n        bytes calldata _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes calldata _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        bytes32 _txid;\n        uint256 _fundingOutputValue;\n\n        require(_d.inRedemption(), \"Redemption proof only allowed from redemption flow\");\n\n        _fundingOutputValue = redemptionTransactionChecks(_d, _txInputVector, _txOutputVector);\n\n        _txid = abi.encodePacked(_txVersion, _txInputVector, _txOutputVector, _txLocktime).hash256();\n        _d.checkProofFromTxId(_txid, _merkleProof, _txIndexInBlock, _bitcoinHeaders);\n\n        require((_d.utxoValue().sub(_fundingOutputValue)) <= _d.latestRedemptionFee, \"Incorrect fee amount\");\n\n        // Transfer TBTC to signers and close the keep.\n        distributeSignerFee(_d);\n        _d.closeKeep();\n\n        _d.distributeFeeRebate();\n\n        // We're done yey!\n        _d.setRedeemed();\n        _d.redemptionTeardown();\n        _d.logRedeemed(_txid);\n    }","contract":"DepositRedemption","time":0},{"type":"external-function ","before":"function logRedemptionRequested(\n        DepositUtils.Deposit storage _d,\n        address _redeemer,\n        bytes32 _digest,\n        uint256 _utxoValue,\n        bytes memory _redeemerOutputScript,\n        uint256 _requestedFee,\n        bytes memory _outpoint\n    ) public { // not external to allow bytes memory parameters\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logRedemptionRequested(\n            _redeemer,\n            _digest,\n            _utxoValue,\n            _redeemerOutputScript,\n            _requestedFee,\n            _outpoint\n        );\n    }","after":"function logRedemptionRequested(\n        DepositUtils.Deposit storage _d,\n        address _redeemer,\n        bytes32 _digest,\n        uint256 _utxoValue,\n        bytes calldata _redeemerOutputScript,\n        uint256 _requestedFee,\n        bytes calldata _outpoint\n    ) public { // not external to allow bytes memory parameters\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logRedemptionRequested(\n            _redeemer,\n            _digest,\n            _utxoValue,\n            _redeemerOutputScript,\n            _requestedFee,\n            _outpoint\n        );\n    }","contract":"OutsourceDepositLogging","time":0},{"type":"external-function ","before":"function logFunderRequestedAbort(\n        DepositUtils.Deposit storage _d,\n        bytes memory _abortOutputScript\n    ) public { // not external to allow bytes memory parameters\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logFunderRequestedAbort(_abortOutputScript);\n    }","after":"function logFunderRequestedAbort(\n        DepositUtils.Deposit storage _d,\n        bytes calldata _abortOutputScript\n    ) public { // not external to allow bytes memory parameters\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logFunderRequestedAbort(_abortOutputScript);\n    }","contract":"OutsourceDepositLogging","time":0},{"type":"external-function ","before":"function logRedemptionRequested(\n        address _requester,\n        bytes32 _digest,\n        uint256 _utxoValue,\n        bytes memory _redeemerOutputScript,\n        uint256 _requestedFee,\n        bytes memory _outpoint\n    ) public {\n        // not external to allow bytes memory parameters\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit RedemptionRequested(\n            msg.sender,\n            _requester,\n            _digest,\n            _utxoValue,\n            _redeemerOutputScript,\n            _requestedFee,\n            _outpoint\n        );\n    }","after":"function logRedemptionRequested(\n        address _requester,\n        bytes32 _digest,\n        uint256 _utxoValue,\n        bytes calldata _redeemerOutputScript,\n        uint256 _requestedFee,\n        bytes calldata _outpoint\n    ) public {\n        // not external to allow bytes memory parameters\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit RedemptionRequested(\n            msg.sender,\n            _requester,\n            _digest,\n            _utxoValue,\n            _redeemerOutputScript,\n            _requestedFee,\n            _outpoint\n        );\n    }","contract":"DepositLog","time":0},{"type":"external-function ","before":"function logFunderRequestedAbort(bytes memory _abortOutputScript) public {\n        // not external to allow bytes memory parameters\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit FunderAbortRequested(msg.sender, _abortOutputScript);\n    }","after":"function logFunderRequestedAbort(bytes calldata _abortOutputScript) public {\n        // not external to allow bytes memory parameters\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit FunderAbortRequested(msg.sender, _abortOutputScript);\n    }","contract":"DepositLog","time":0},{"type":"external-function ","before":"function approveAndCall(\n        ITokenRecipient _spender,\n        uint256 _tdtId,\n        bytes memory _extraData\n    ) public returns (bool) { // not external to allow bytes memory parameters\n        approve(address(_spender), _tdtId);\n        _spender.receiveApproval(msg.sender, _tdtId, address(this), _extraData);\n        return true;\n    }","after":"function approveAndCall(\n        ITokenRecipient _spender,\n        uint256 _tdtId,\n        bytes calldata _extraData\n    ) public returns (bool) { // not external to allow bytes memory parameters\n        approve(address(_spender), _tdtId);\n        _spender.receiveApproval(msg.sender, _tdtId, address(this), _extraData);\n        return true;\n    }","contract":"TBTCDepositToken","time":0},{"type":"external-function ","before":"  function approveAndCall(ITokenRecipient _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\n        if (approve(address(_spender), _value)) {\n            _spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n        return false;\n   ","after":"  function approveAndCall(ITokenRecipient _spender, uint256 _value, bytes calldata _extraData) public returns (bool) {\n        if (approve(address(_spender), _value)) {\n            _spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n        return false;\n   ","contract":"TBTCToken","time":0},{"type":"state-data-arrangement ","before":"\ne _burn(uint256) instead.\n     * @param owner owner of\nt256 ID of the token being burned by the msg.send\nkenId) internal {\n        super._burn(owner, tokenId)\ntokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../mat\n token\n    mapping (address => Counters.Counter) private _","after":"t256 ID of the token being burned by the msg.send\nkenId) internal {\n        super._burn(owner, tokenId)\ntokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../mat\ne _burn(uint256) instead.\n     * @param owner owner of\n token\n    mapping (address => Counters.Counter) private _\n","contract":"ERC721","time":0}]}
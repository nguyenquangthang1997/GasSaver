{"time":327,"results":[{"type":"external-function ","before":"function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n        PROVENANCE = provenanceHash;\n    }","after":"function setProvenanceHash(string calldata provenanceHash) public onlyOwner {\n        PROVENANCE = provenanceHash;\n    }","contract":"COBI","time":0},{"type":"external-function ","before":"function setBaseURI(string memory BaseURI) public onlyOwner {\n        baseURI = BaseURI;\n    }","after":"function setBaseURI(string calldata BaseURI) public onlyOwner {\n        baseURI = BaseURI;\n    }","contract":"COBI","time":0},{"type":"external-function ","before":"function multiClaim(uint256[] memory _tokenIds) public {\n        uint256 totalRewardAmount = 0;\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(\n                _exists(_tokenIds[i]),\n                \"ERC721Metadata: URI query for nonexistent token\"\n            );\n            require(msg.sender == ownerOf(_tokenIds[i]), \"not from owner\");\n            totalRewardAmount =\n                totalRewardAmount +\n                getRewardAmount(_receivedCOBI[_tokenIds[i]].receivedTime);\n            _receivedCOBI[_tokenIds[i]].receivedTime = block.timestamp;\n        }\n        rewardToken.safeTransferFrom(\n            masterAccountAddress,\n            msg.sender,\n            totalRewardAmount\n        );\n    }","after":"function multiClaim(uint256[] calldata _tokenIds) public {\n        uint256 totalRewardAmount = 0;\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(\n                _exists(_tokenIds[i]),\n                \"ERC721Metadata: URI query for nonexistent token\"\n            );\n            require(msg.sender == ownerOf(_tokenIds[i]), \"not from owner\");\n            totalRewardAmount =\n                totalRewardAmount +\n                getRewardAmount(_receivedCOBI[_tokenIds[i]].receivedTime);\n            _receivedCOBI[_tokenIds[i]].receivedTime = block.timestamp;\n        }\n        rewardToken.safeTransferFrom(\n            masterAccountAddress,\n            msg.sender,\n            totalRewardAmount\n        );\n    }","contract":"COBI","time":0},{"type":"constant-restrict-modification  ","before":"address masterAccountAddress = 0xBECcA544dA77c293e1017A621da5F44374500317;","after":"address constant masterAccountAddress = 0xBECcA544dA77c293e1017A621da5F44374500317;","contract":"COBI","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private totalReward = 20000000000000000000000000;","after":"uint256 private constant totalReward = 20000000000000000000000000;","contract":"COBI","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public periodFinish;","after":"uint256 public immutable periodFinish;","contract":"COBI","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public MAX_PURCHASE = 20;","after":"uint256 public constant MAX_PURCHASE = 20;","contract":"COBI","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }","contract":"ERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }","contract":"ERC1155","time":0}]}
{"time":180,"results":[{"type":"state-data-arrangement ","before":"\nuint256 constant public maxPages = 65536;\nuint256 public claimedPages;\nbool public active;\nuint256 public privateActiveTimestamp;\nuint256 public publicActiveTimestamp;\nuint256 public endTimestamp;\naddress public ashContract;\nuint256 public ashThreshold;\nuint256 constant private _tokenId = 1;\nuint256 private _price = 320000000000000000;\nuint256 private _royaltyBps;\naddress payable private _royaltyRecipient;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;","after":"uint256 constant public maxPages = 65536;\nuint256 public claimedPages;\nuint256 public privateActiveTimestamp;\nuint256 public publicActiveTimestamp;\nuint256 public endTimestamp;\nuint256 public ashThreshold;\nuint256 constant private _tokenId = 1;\nuint256 private _price = 320000000000000000;\nuint256 private _royaltyBps;\naddress public ashContract;\naddress payable private _royaltyRecipient;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\nbytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\nbool public active;\n","contract":"LostPoetPages","time":2},{"type":"external-function ","before":"function setURI(string memory newuri) external adminRequired {\n        _setURI(newuri);\n    }","after":"function setURI(string calldata newuri) external adminRequired {\n        _setURI(newuri);\n    }","contract":"LostPoetPages","time":0},{"type":"external-function ","before":"function rewardPages(Reward[] memory rewards) external adminRequired {\n        require(!active && endTimestamp == 0, \"Can only reward while inactive\");\n        for (uint i = 0; i < rewards.length; i++) {\n            claimedPages += rewards[i].amount;\n            require(claimedPages <= maxPages, \"Too many requested\");\n            _mint(rewards[i].recipient, _tokenId, rewards[i].amount, \"\");\n        }\n    }","after":"function rewardPages(Reward[] calldata rewards) external adminRequired {\n        require(!active && endTimestamp == 0, \"Can only reward while inactive\");\n        for (uint i = 0; i < rewards.length; i++) {\n            claimedPages += rewards[i].amount;\n            require(claimedPages <= maxPages, \"Too many requested\");\n            _mint(rewards[i].recipient, _tokenId, rewards[i].amount, \"\");\n        }\n    }","contract":"LostPoetPages","time":0},{"type":"external-function ","before":"function distributeRemainder(Reward[] memory rewards) external adminRequired {\n        require(endTimestamp > 0 && block.timestamp > endTimestamp, \"Can only distribute remainder after sale end\");\n        for (uint i = 0; i < rewards.length; i++) {\n            claimedPages += rewards[i].amount;\n            require(claimedPages <= maxPages, \"Too many requested\");\n            _mint(rewards[i].recipient, _tokenId, rewards[i].amount, \"\");\n        }\n    }","after":"function distributeRemainder(Reward[] calldata rewards) external adminRequired {\n        require(endTimestamp > 0 && block.timestamp > endTimestamp, \"Can only distribute remainder after sale end\");\n        for (uint i = 0; i < rewards.length; i++) {\n            claimedPages += rewards[i].amount;\n            require(claimedPages <= maxPages, \"Too many requested\");\n            _mint(rewards[i].recipient, _tokenId, rewards[i].amount, \"\");\n        }\n    }","contract":"LostPoetPages","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"LostPoetPages","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"LostPoetPages","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private _price = 320000000000000000;","after":"uint256 private constant _price = 320000000000000000;","contract":"LostPoetPages","time":0}]}
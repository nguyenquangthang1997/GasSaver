{"time":257,"results":[{"type":"external-function ","before":"function mint(\r\n        uint256 amount,\r\n        string memory name,\r\n        string memory creatorName,\r\n        string memory description,\r\n        string memory mediaUri,\r\n        bytes calldata data\r\n    ) external whenNotPaused returns(uint256) {\r\n        _tokenIds.increment();\r\n        uint256 tokenId = _tokenIds.current();\r\n        creators[tokenId] = msg.sender;\r\n        _mint(msg.sender, tokenId, amount, data);\r\n        emit TokenERC1155Mint(\r\n            msg.sender,\r\n            tokenId,\r\n            amount,\r\n            block.timestamp,\r\n            name,\r\n            creatorName,\r\n            description,\r\n            mediaUri\r\n        );\r\n        return tokenId;\r\n    }","after":"function mint(\r\n        uint256 amount,\r\n        string calldata name,\r\n        string calldata creatorName,\r\n        string calldata description,\r\n        string calldata mediaUri,\r\n        bytes calldata data\r\n    ) external whenNotPaused returns(uint256) {\r\n        _tokenIds.increment();\r\n        uint256 tokenId = _tokenIds.current();\r\n        creators[tokenId] = msg.sender;\r\n        _mint(msg.sender, tokenId, amount, data);\r\n        emit TokenERC1155Mint(\r\n            msg.sender,\r\n            tokenId,\r\n            amount,\r\n            block.timestamp,\r\n            name,\r\n            creatorName,\r\n            description,\r\n            mediaUri\r\n        );\r\n        return tokenId;\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function mintBatch(\r\n        uint256[] memory amounts,\r\n        string[] memory names,\r\n        string[] memory creatorNames,\r\n        string[] memory descriptions,\r\n        string[] memory mediaUris,\r\n        bytes calldata data\r\n    ) external whenNotPaused returns(uint256[] memory) {\r\n        require(amounts.length == names.length && amounts.length == creatorNames.length && amounts.length == descriptions.length && amounts.length == mediaUris.length, \"AniftyERC1155: Incorrect parameter length\");\r\n        uint256[] memory tokenIds = new uint256[](amounts.length);\r\n        for (uint256 j = 0; j < amounts.length; j++) {\r\n            _tokenIds.increment();\r\n            tokenIds[j] = _tokenIds.current();\r\n            creators[tokenIds[j]] = msg.sender;\r\n        }\r\n        _mintBatch(msg.sender, tokenIds, amounts, data);\r\n        emit TokenERC1155MintBatch(\r\n            msg.sender,\r\n            tokenIds,\r\n            amounts,\r\n            block.timestamp,\r\n            names,\r\n            creatorNames,\r\n            descriptions,\r\n            mediaUris\r\n        );\r\n        return tokenIds;\r\n    }","after":"function mintBatch(\r\n        uint256[] calldata amounts,\r\n        string[] calldata names,\r\n        string[] calldata creatorNames,\r\n        string[] calldata descriptions,\r\n        string[] calldata mediaUris,\r\n        bytes calldata data\r\n    ) external whenNotPaused returns(uint256[] memory) {\r\n        require(amounts.length == names.length && amounts.length == creatorNames.length && amounts.length == descriptions.length && amounts.length == mediaUris.length, \"AniftyERC1155: Incorrect parameter length\");\r\n        uint256[] memory tokenIds = new uint256[](amounts.length);\r\n        for (uint256 j = 0; j < amounts.length; j++) {\r\n            _tokenIds.increment();\r\n            tokenIds[j] = _tokenIds.current();\r\n            creators[tokenIds[j]] = msg.sender;\r\n        }\r\n        _mintBatch(msg.sender, tokenIds, amounts, data);\r\n        emit TokenERC1155MintBatch(\r\n            msg.sender,\r\n            tokenIds,\r\n            amounts,\r\n            block.timestamp,\r\n            names,\r\n            creatorNames,\r\n            descriptions,\r\n            mediaUris\r\n        );\r\n        return tokenIds;\r\n    }","contract":"AniftyERC1155","time":1},{"type":"external-function ","before":"function whitelistMint(\r\n        uint256 amount,\r\n        string memory name,\r\n        string memory creatorName,\r\n        string memory description,\r\n        string memory mediaUri,\r\n        bytes calldata data\r\n    ) external whenNotPaused onlyWhitelist returns(uint256) {\r\n        _adminTokenIds.increment();\r\n        uint256 tokenId = _adminTokenIds.current();\r\n        creators[tokenId] = msg.sender;\r\n        _mint(msg.sender, tokenId, amount, data);\r\n        emit TokenERC1155Mint(\r\n            msg.sender,\r\n            tokenId,\r\n            amount,\r\n            block.timestamp,\r\n            name,\r\n            creatorName,\r\n            description,\r\n            mediaUri\r\n        );\r\n        return tokenId;\r\n    }","after":"function whitelistMint(\r\n        uint256 amount,\r\n        string calldata name,\r\n        string calldata creatorName,\r\n        string calldata description,\r\n        string calldata mediaUri,\r\n        bytes calldata data\r\n    ) external whenNotPaused onlyWhitelist returns(uint256) {\r\n        _adminTokenIds.increment();\r\n        uint256 tokenId = _adminTokenIds.current();\r\n        creators[tokenId] = msg.sender;\r\n        _mint(msg.sender, tokenId, amount, data);\r\n        emit TokenERC1155Mint(\r\n            msg.sender,\r\n            tokenId,\r\n            amount,\r\n            block.timestamp,\r\n            name,\r\n            creatorName,\r\n            description,\r\n            mediaUri\r\n        );\r\n        return tokenId;\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function whitelistMintBatch(\r\n        uint256[] memory amounts,\r\n        string[] memory names,\r\n        string[] memory creatorNames,\r\n        string[] memory descriptions,\r\n        string[] memory mediaUris,\r\n        bytes calldata data\r\n    ) external whenNotPaused onlyWhitelist returns(uint256[] memory) {\r\n        require(amounts.length == names.length && amounts.length == creatorNames.length && amounts.length == descriptions.length && amounts.length == mediaUris.length, \"AniftyERC1155: Incorrect parameter length\");\r\n        uint256[] memory tokenIds = new uint256[](amounts.length);\r\n        for (uint256 j = 0; j < amounts.length; j++) {\r\n            _adminTokenIds.increment();\r\n            tokenIds[j] = _adminTokenIds.current();\r\n            creators[tokenIds[j]] = msg.sender;\r\n        }\r\n        _mintBatch(msg.sender, tokenIds, amounts, data);\r\n        emit TokenERC1155MintBatch(\r\n            msg.sender,\r\n            tokenIds,\r\n            amounts,\r\n            block.timestamp,\r\n            names,\r\n            creatorNames,\r\n            descriptions,\r\n            mediaUris\r\n        );\r\n        return tokenIds;\r\n    }","after":"function whitelistMintBatch(\r\n        uint256[] calldata amounts,\r\n        string[] calldata names,\r\n        string[] calldata creatorNames,\r\n        string[] calldata descriptions,\r\n        string[] calldata mediaUris,\r\n        bytes calldata data\r\n    ) external whenNotPaused onlyWhitelist returns(uint256[] memory) {\r\n        require(amounts.length == names.length && amounts.length == creatorNames.length && amounts.length == descriptions.length && amounts.length == mediaUris.length, \"AniftyERC1155: Incorrect parameter length\");\r\n        uint256[] memory tokenIds = new uint256[](amounts.length);\r\n        for (uint256 j = 0; j < amounts.length; j++) {\r\n            _adminTokenIds.increment();\r\n            tokenIds[j] = _adminTokenIds.current();\r\n            creators[tokenIds[j]] = msg.sender;\r\n        }\r\n        _mintBatch(msg.sender, tokenIds, amounts, data);\r\n        emit TokenERC1155MintBatch(\r\n            msg.sender,\r\n            tokenIds,\r\n            amounts,\r\n            block.timestamp,\r\n            names,\r\n            creatorNames,\r\n            descriptions,\r\n            mediaUris\r\n        );\r\n        return tokenIds;\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function burnBatch(uint256[] memory _ids, uint256[] memory _amounts) external whenNotPaused {\r\n        _burnBatch(msg.sender, _ids, _amounts);\r\n    }","after":"function burnBatch(uint256[] calldata _ids, uint256[] calldata _amounts) external whenNotPaused {\r\n        _burnBatch(msg.sender, _ids, _amounts);\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function setURI(string memory newuri) external onlyAdmin {\r\n        _setURI(newuri);\r\n    }","after":"function setURI(string calldata newuri) external onlyAdmin {\r\n        _setURI(newuri);\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function removeWhitelistAddress(address[] memory _whitelistAddresses)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n            whitelist[_whitelistAddresses[i]] = false;\r\n        }\r\n    }","after":"function removeWhitelistAddress(address[] calldata _whitelistAddresses)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n            whitelist[_whitelistAddresses[i]] = false;\r\n        }\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function addWhitelistAddress(address[] memory _whitelistAddresses)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n            whitelist[_whitelistAddresses[i]] = true;\r\n        }\r\n    }","after":"function addWhitelistAddress(address[] calldata _whitelistAddresses)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n            whitelist[_whitelistAddresses[i]] = true;\r\n        }\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\r\n        _balances[id][to] = _balances[id][to].add(amount);\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }","after":"function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\r\n        _balances[id][to] = _balances[id][to].add(amount);\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            _balances[id][from] = _balances[id][from].sub(\r\n                amount,\r\n                \"ERC1155: insufficient balance for transfer\"\r\n            );\r\n            _balances[id][to] = _balances[id][to].add(amount);\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }","after":"function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            _balances[id][from] = _balances[id][from].sub(\r\n                amount,\r\n                \"ERC1155: insufficient balance for transfer\"\r\n            );\r\n            _balances[id][to] = _balances[id][to].add(amount);\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }","contract":"AniftyERC1155","time":0},{"type":"external-function ","before":"function removeWhitelistAddress(address[] memory _whitelistAddresses) public onlyOwner {\r\n    for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n    whitelist[_whitelistAddresses[i]] = false;\r\n    }\r\n  }","after":"function removeWhitelistAddress(address[] calldata _whitelistAddresses) public onlyOwner {\r\n    for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n    whitelist[_whitelistAddresses[i]] = false;\r\n    }\r\n  }","contract":"AniftyERC20","time":0},{"type":"external-function ","before":"function addWhitelistAddress(address[] memory _whitelistAddresses) public onlyOwner {\r\n    for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n    whitelist[_whitelistAddresses[i]] = true;\r\n    }\r\n  }","after":"function addWhitelistAddress(address[] calldata _whitelistAddresses) public onlyOwner {\r\n    for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n    whitelist[_whitelistAddresses[i]] = true;\r\n    }\r\n  }","contract":"AniftyERC20","time":0}]}
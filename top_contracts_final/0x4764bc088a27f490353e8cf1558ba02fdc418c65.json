{"time":141,"results":[{"type":"external-function ","before":"function createToken(uint256 tokenId, string memory uuid, address to) public onlyOwner {\r\n        bytes32 uuidBytes32 = UUIDStringToBytes32(uuid);\r\n        createTokenWithId(tokenId, uuidBytes32, to);\r\n    }","after":"function createToken(uint256 tokenId, string calldata uuid, address to) public onlyOwner {\r\n        bytes32 uuidBytes32 = UUIDStringToBytes32(uuid);\r\n        createTokenWithId(tokenId, uuidBytes32, to);\r\n    }","contract":"KolectivToken","time":0},{"type":"external-function ","before":"function mintFor(address to, uint256 amount, bytes memory mintingBlob) public {\r\n        require(proxyMinter == _msgSender(), \"Caller is not the proxy minter.\");\r\n        (uint256[] memory tokenIds, bytes32[] memory uuids) = parseMintingBlob(mintingBlob, amount);\r\n        for (uint i; i < tokenIds.length; i++) {\r\n            createTokenWithId(tokenIds[i], uuids[i], to);\r\n        }\r\n    }","after":"function mintFor(address to, uint256 amount, bytes calldata mintingBlob) public {\r\n        require(proxyMinter == _msgSender(), \"Caller is not the proxy minter.\");\r\n        (uint256[] memory tokenIds, bytes32[] memory uuids) = parseMintingBlob(mintingBlob, amount);\r\n        for (uint i; i < tokenIds.length; i++) {\r\n            createTokenWithId(tokenIds[i], uuids[i], to);\r\n        }\r\n    }","contract":"KolectivToken","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory uri) public onlyOwner {\r\n        _baseTokenURI = uri;\r\n        emit BaseURISet(uri);\r\n    }","after":"function setBaseTokenURI(string calldata uri) public onlyOwner {\r\n        _baseTokenURI = uri;\r\n        emit BaseURISet(uri);\r\n    }","contract":"KolectivToken","time":0}]}
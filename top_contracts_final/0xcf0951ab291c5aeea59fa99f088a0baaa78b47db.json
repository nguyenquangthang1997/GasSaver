{"time":425,"results":[{"type":"immutable-restrict-modification ","before":"address private _trustedForwarder;","after":"address private immutable _trustedForwarder;","contract":"LazyMintERC721","time":1},{"type":"external-function ","before":"function initialize(\n        address _registry,\n        address _admin,\n        string memory _uri\n    ) external initializer {\n        // Set contract URI\n        contractURI = _uri;\n        // Set top level ap registry\n        registry = _registry;\n        // Set default royalty treasury address\n        royaltyTreasury = address(this);\n        // Set access control roles\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n    }","after":"function initialize(\n        address _registry,\n        address _admin,\n        string calldata _uri\n    ) external initializer {\n        // Set contract URI\n        contractURI = _uri;\n        // Set top level ap registry\n        registry = _registry;\n        // Set default royalty treasury address\n        royaltyTreasury = address(this);\n        // Set access control roles\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n    }","contract":"ProtocolControl","time":0},{"type":"external-function ","before":"function deployProtocol(string memory uri) external {\n        // Get deployer\n        address caller = _msgSender();\n        // Get version for deployment\n        uint256 version = getNextVersion(caller);\n        // Deploy contract and get deployment address.\n        address controlAddress = deployer.deployControl(version, caller, uri);\n\n        _protocolControls[caller].protocolControlAddress[version] = controlAddress;\n\n        emit NewProtocolControl(caller, version, controlAddress, address(deployer));\n    }","after":"function deployProtocol(string calldata uri) external {\n        // Get deployer\n        address caller = _msgSender();\n        // Get version for deployment\n        uint256 version = getNextVersion(caller);\n        // Deploy contract and get deployment address.\n        address controlAddress = deployer.deployControl(version, caller, uri);\n\n        _protocolControls[caller].protocolControlAddress[version] = controlAddress;\n\n        emit NewProtocolControl(caller, version, controlAddress, address(deployer));\n    }","contract":"Registry","time":0},{"type":"immutable-restrict-modification ","before":"address public forwarder;","after":"address public immutable forwarder;","contract":"Registry","time":0},{"type":"immutable-restrict-modification ","before":"address private _trustedForwarder;","after":"address private immutable _trustedForwarder;","contract":"Royalty","time":1}]}
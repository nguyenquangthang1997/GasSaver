{"time":273,"results":[{"type":"external-function ","before":"function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory poolsPath,\n        IERC20[] memory path,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        verifyPoolsPathSwap(poolsPath, path);\n        amounts = DMMLibrary.getAmountsOut(amountIn, poolsPath, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IERC20(path[0]).safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n        _swap(amounts, poolsPath, path, to);\n    }","after":"function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata poolsPath,\n        IERC20[] calldata path,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        verifyPoolsPathSwap(poolsPath, path);\n        amounts = DMMLibrary.getAmountsOut(amountIn, poolsPath, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IERC20(path[0]).safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n        _swap(amounts, poolsPath, path, to);\n    }","contract":"DMMRouter02","time":0},{"type":"external-function ","before":"function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] memory poolsPath,\n        IERC20[] memory path,\n        address to,\n        uint256 deadline\n    ) public override ensure(deadline) returns (uint256[] memory amounts) {\n        verifyPoolsPathSwap(poolsPath, path);\n        amounts = DMMLibrary.getAmountsIn(amountOut, poolsPath, path);\n        require(amounts[0] <= amountInMax, \"DMMRouter: EXCESSIVE_INPUT_AMOUNT\");\n        path[0].safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n        _swap(amounts, poolsPath, path, to);\n    }","after":"function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata poolsPath,\n        IERC20[] calldata path,\n        address to,\n        uint256 deadline\n    ) public override ensure(deadline) returns (uint256[] memory amounts) {\n        verifyPoolsPathSwap(poolsPath, path);\n        amounts = DMMLibrary.getAmountsIn(amountOut, poolsPath, path);\n        require(amounts[0] <= amountInMax, \"DMMRouter: EXCESSIVE_INPUT_AMOUNT\");\n        path[0].safeTransferFrom(msg.sender, poolsPath[0], amounts[0]);\n        _swap(amounts, poolsPath, path, to);\n    }","contract":"DMMRouter02","time":0},{"type":"external-function ","before":"function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory poolsPath,\n        IERC20[] memory path,\n        address to,\n        uint256 deadline\n    ) public override ensure(deadline) {\n        path[0].safeTransferFrom(msg.sender, poolsPath[0], amountIn);\n        uint256 balanceBefore = path[path.length - 1].balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(poolsPath, path, to);\n        uint256 balanceAfter = path[path.length - 1].balanceOf(to);\n        require(\n            balanceAfter >= balanceBefore.add(amountOutMin),\n            \"DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }","after":"function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata poolsPath,\n        IERC20[] calldata path,\n        address to,\n        uint256 deadline\n    ) public override ensure(deadline) {\n        path[0].safeTransferFrom(msg.sender, poolsPath[0], amountIn);\n        uint256 balanceBefore = path[path.length - 1].balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(poolsPath, path, to);\n        uint256 balanceAfter = path[path.length - 1].balanceOf(to);\n        require(\n            balanceAfter >= balanceBefore.add(amountOutMin),\n            \"DMMRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }","contract":"DMMRouter02","time":0}]}
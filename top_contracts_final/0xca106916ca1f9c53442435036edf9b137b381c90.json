{"time":74,"results":[{"type":"external-function ","before":"function setMinerSectorInitialPledge(string memory _minerId, uint256 _minerSectorInitialPledge) public onlyWhiteList{\n        require(_minerSectorInitialPledge>0, \"value should not be 0\");\n        emit MinerSectorInitialPledgeChanged(_minerId, minerSectorInitialPledge[_minerId], _minerSectorInitialPledge);\n        minerSectorInitialPledge[_minerId] = _minerSectorInitialPledge;\n    }","after":"function setMinerSectorInitialPledge(string calldata _minerId, uint256 _minerSectorInitialPledge) public onlyWhiteList{\n        require(_minerSectorInitialPledge>0, \"value should not be 0\");\n        emit MinerSectorInitialPledgeChanged(_minerId, minerSectorInitialPledge[_minerId], _minerSectorInitialPledge);\n        minerSectorInitialPledge[_minerId] = _minerSectorInitialPledge;\n    }","contract":"FilChainStatOracle","time":0},{"type":"external-function ","before":"function setMinerSectorInitialPledgeBatch(string[] memory _minerIdList, uint256[] memory _minerSectorInitialPledgeList) public onlyWhiteList{\n        require(_minerIdList.length>0, \"miner array should not be 0 length\");\n        require(_minerSectorInitialPledgeList.length>0, \"value array should not be 0 length\");\n        require(_minerIdList.length == _minerSectorInitialPledgeList.length, \"array length not equal\");\n\n        for(uint i=0; i<_minerIdList.length; i++){\n            require(_minerSectorInitialPledgeList[i]>0, \"value should not be 0\");\n            emit MinerSectorInitialPledgeChanged(_minerIdList[i], minerSectorInitialPledge[_minerIdList[i]], _minerSectorInitialPledgeList[i]);\n            minerSectorInitialPledge[_minerIdList[i]] = _minerSectorInitialPledgeList[i];\n        }\n    }","after":"function setMinerSectorInitialPledgeBatch(string[] calldata _minerIdList, uint256[] calldata _minerSectorInitialPledgeList) public onlyWhiteList{\n        require(_minerIdList.length>0, \"miner array should not be 0 length\");\n        require(_minerSectorInitialPledgeList.length>0, \"value array should not be 0 length\");\n        require(_minerIdList.length == _minerSectorInitialPledgeList.length, \"array length not equal\");\n\n        for(uint i=0; i<_minerIdList.length; i++){\n            require(_minerSectorInitialPledgeList[i]>0, \"value should not be 0\");\n            emit MinerSectorInitialPledgeChanged(_minerIdList[i], minerSectorInitialPledge[_minerIdList[i]], _minerSectorInitialPledgeList[i]);\n            minerSectorInitialPledge[_minerIdList[i]] = _minerSectorInitialPledgeList[i];\n        }\n    }","contract":"FilChainStatOracle","time":0},{"type":"external-function ","before":"function setMinerAdjustedPower(string memory _minerId, uint256 _minerAdjustedPower) public onlyWhiteList{\n        require(_minerId.notEmpty(), \"miner id should not be empty\");\n        require(_minerAdjustedPower>0, \"value should not be 0\");\n        minerTotalAdjustedPower = minerTotalAdjustedPower.sub(minerAdjustedPower[_minerId]).add(_minerAdjustedPower);\n        emit MinerAdjustedPowerChanged(_minerId, minerAdjustedPower[_minerId], _minerAdjustedPower);\n        minerAdjustedPower[_minerId] = _minerAdjustedPower;\n    }","after":"function setMinerAdjustedPower(string calldata _minerId, uint256 _minerAdjustedPower) public onlyWhiteList{\n        require(_minerId.notEmpty(), \"miner id should not be empty\");\n        require(_minerAdjustedPower>0, \"value should not be 0\");\n        minerTotalAdjustedPower = minerTotalAdjustedPower.sub(minerAdjustedPower[_minerId]).add(_minerAdjustedPower);\n        emit MinerAdjustedPowerChanged(_minerId, minerAdjustedPower[_minerId], _minerAdjustedPower);\n        minerAdjustedPower[_minerId] = _minerAdjustedPower;\n    }","contract":"FilChainStatOracle","time":0},{"type":"external-function ","before":"function setMinerAdjustedPowerBatch(string[] memory _minerIds, uint256[] memory _minerAdjustedPowers) public onlyWhiteList{\n        require(_minerIds.length == _minerAdjustedPowers.length, \"minerId list count is not equal to power list\");\n        for(uint i; i<_minerIds.length; i++){\n            require(_minerIds[i].notEmpty(), \"miner id should not be empty\");\n            require(_minerAdjustedPowers[i]>0, \"value should not be 0\");\n            minerTotalAdjustedPower = minerTotalAdjustedPower.sub(minerAdjustedPower[_minerIds[i]]).add(_minerAdjustedPowers[i]);\n            emit MinerAdjustedPowerChanged(_minerIds[i], minerAdjustedPower[_minerIds[i]], _minerAdjustedPowers[i]);\n            minerAdjustedPower[_minerIds[i]] = _minerAdjustedPowers[i];\n        }\n    }","after":"function setMinerAdjustedPowerBatch(string[] calldata _minerIds, uint256[] calldata _minerAdjustedPowers) public onlyWhiteList{\n        require(_minerIds.length == _minerAdjustedPowers.length, \"minerId list count is not equal to power list\");\n        for(uint i; i<_minerIds.length; i++){\n            require(_minerIds[i].notEmpty(), \"miner id should not be empty\");\n            require(_minerAdjustedPowers[i]>0, \"value should not be 0\");\n            minerTotalAdjustedPower = minerTotalAdjustedPower.sub(minerAdjustedPower[_minerIds[i]]).add(_minerAdjustedPowers[i]);\n            emit MinerAdjustedPowerChanged(_minerIds[i], minerAdjustedPower[_minerIds[i]], _minerAdjustedPowers[i]);\n            minerAdjustedPower[_minerIds[i]] = _minerAdjustedPowers[i];\n        }\n    }","contract":"FilChainStatOracle","time":0},{"type":"external-function ","before":"function removeMinerAdjustedPower(string memory _minerId) public onlyWhiteList{\n        uint256 adjustedPower = minerAdjustedPower[_minerId];\n        minerTotalAdjustedPower = minerTotalAdjustedPower.sub(adjustedPower);\n        delete minerAdjustedPower[_minerId];\n        emit MinerAdjustedPowerChanged(_minerId, adjustedPower, 0);\n    }","after":"function removeMinerAdjustedPower(string calldata _minerId) public onlyWhiteList{\n        uint256 adjustedPower = minerAdjustedPower[_minerId];\n        minerTotalAdjustedPower = minerTotalAdjustedPower.sub(adjustedPower);\n        delete minerAdjustedPower[_minerId];\n        emit MinerAdjustedPowerChanged(_minerId, adjustedPower, 0);\n    }","contract":"FilChainStatOracle","time":0},{"type":"external-function ","before":"function setMinerMiningEfficiency(string memory _minerId, uint256 _minerMiningEfficiency) public onlyWhiteList{\n        require(_minerId.notEmpty(), \"miner id should not be empty\");\n        require(_minerMiningEfficiency>0, \"value should not be 0\");\n        emit MinerMiningEfficiencyChanged(_minerId, minerMiningEfficiency[_minerId], _minerMiningEfficiency);\n        minerMiningEfficiency[_minerId] = _minerMiningEfficiency;\n    }","after":"function setMinerMiningEfficiency(string calldata _minerId, uint256 _minerMiningEfficiency) public onlyWhiteList{\n        require(_minerId.notEmpty(), \"miner id should not be empty\");\n        require(_minerMiningEfficiency>0, \"value should not be 0\");\n        emit MinerMiningEfficiencyChanged(_minerId, minerMiningEfficiency[_minerId], _minerMiningEfficiency);\n        minerMiningEfficiency[_minerId] = _minerMiningEfficiency;\n    }","contract":"FilChainStatOracle","time":0},{"type":"external-function ","before":"function setMinerMiningEfficiencyBatch(string[] memory _minerIds, uint256[] memory _minerMiningEfficiencys) public onlyWhiteList{\n        require(_minerIds.length == _minerMiningEfficiencys.length, \"minerId list count is not equal to power list\");\n        for(uint i; i<_minerIds.length; i++){\n            require(_minerIds[i].notEmpty(), \"miner id should not be empty\");\n            require(_minerMiningEfficiencys[i]>0, \"value should not be 0\");\n            emit MinerMiningEfficiencyChanged(_minerIds[i], minerMiningEfficiency[_minerIds[i]], _minerMiningEfficiencys[i]);\n            minerMiningEfficiency[_minerIds[i]] = _minerMiningEfficiencys[i];\n        }\n    }","after":"function setMinerMiningEfficiencyBatch(string[] calldata _minerIds, uint256[] calldata _minerMiningEfficiencys) public onlyWhiteList{\n        require(_minerIds.length == _minerMiningEfficiencys.length, \"minerId list count is not equal to power list\");\n        for(uint i; i<_minerIds.length; i++){\n            require(_minerIds[i].notEmpty(), \"miner id should not be empty\");\n            require(_minerMiningEfficiencys[i]>0, \"value should not be 0\");\n            emit MinerMiningEfficiencyChanged(_minerIds[i], minerMiningEfficiency[_minerIds[i]], _minerMiningEfficiencys[i]);\n            minerMiningEfficiency[_minerIds[i]] = _minerMiningEfficiencys[i];\n        }\n    }","contract":"FilChainStatOracle","time":0}]}
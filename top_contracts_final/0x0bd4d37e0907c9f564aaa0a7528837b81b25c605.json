{"time":145,"results":[{"type":"state-data-arrangement ","before":"\naddress private passwordSigner = 0xbBaA67D208F4c5fCa149060ff584DD0E88852C95;\nuint private constant GOLD_PASS_ID = 1;\nuint private constant SILVER_PASS_ID = 2;\nstring public name = \"Llama Pass\";\nstring public symbol = \"LLP\";\nuint16 private maxGoldPasses = 500;\nuint16 private maxSilverPasses = 3500;\nuint16 private currentGoldPassCount = 0;\nuint16 private currentSilverPassCount = 0;\nuint private silverPassPrice = 0.75 ether;\nuint private goldPassPrice = 5 ether;\nbool public sale = false;\nstring private baseUri = \"ipfs://QmZEMXDzfHDtEiYbHcUtyQ7gVmnvMT6VoNfDX7Ztsdc7b2/\";\nmapping (address => bool) public alreadyMinted;","after":"uint private constant GOLD_PASS_ID = 1;\nuint private constant SILVER_PASS_ID = 2;\nstring public name = \"Llama Pass\";\nstring public symbol = \"LLP\";\nuint private silverPassPrice = 0.75 ether;\nuint private goldPassPrice = 5 ether;\nstring private baseUri = \"ipfs://QmZEMXDzfHDtEiYbHcUtyQ7gVmnvMT6VoNfDX7Ztsdc7b2/\";\nmapping (address => bool) public alreadyMinted;\naddress private passwordSigner = 0xbBaA67D208F4c5fCa149060ff584DD0E88852C95;\nuint16 private maxGoldPasses = 500;\nuint16 private maxSilverPasses = 3500;\nuint16 private currentGoldPassCount = 0;\nuint16 private currentSilverPassCount = 0;\nbool public sale = false;\n","contract":"LlamaPass","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseUri) external onlyOwner {\n        baseUri = newBaseUri;\n    }","after":"function setBaseURI(string calldata newBaseUri) external onlyOwner {\n        baseUri = newBaseUri;\n    }","contract":"LlamaPass","time":0},{"type":"external-function ","before":"function mint(uint16 tokenId, bytes memory signature) public {\n        require(tokenId == 1 || tokenId == 2, \"Bad ID\");\n        require(tokenId == GOLD_PASS_ID ? currentGoldPassCount + 1 <= maxGoldPasses : currentSilverPassCount + 1 <= maxSilverPasses, \"Max supply\");\n\n        require(isWhitelisted(msg.sender, tokenId, signature), \"Not whitelisted\");\n        require(!alreadyMinted[msg.sender], \"Double mint\");\n\n        tokenId == GOLD_PASS_ID ? currentGoldPassCount++ : currentSilverPassCount++; \n        alreadyMinted[msg.sender] = true;\n\n        _mint(msg.sender, tokenId, 1, \"\");\n    }","after":"function mint(uint16 tokenId, bytes calldata signature) public {\n        require(tokenId == 1 || tokenId == 2, \"Bad ID\");\n        require(tokenId == GOLD_PASS_ID ? currentGoldPassCount + 1 <= maxGoldPasses : currentSilverPassCount + 1 <= maxSilverPasses, \"Max supply\");\n\n        require(isWhitelisted(msg.sender, tokenId, signature), \"Not whitelisted\");\n        require(!alreadyMinted[msg.sender], \"Double mint\");\n\n        tokenId == GOLD_PASS_ID ? currentGoldPassCount++ : currentSilverPassCount++; \n        alreadyMinted[msg.sender] = true;\n\n        _mint(msg.sender, tokenId, 1, \"\");\n    }","contract":"LlamaPass","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"LlamaPass","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"LlamaPass","time":0},{"type":"constant-restrict-modification  ","before":"address private passwordSigner = 0xbBaA67D208F4c5fCa149060ff584DD0E88852C95;","after":"address private constant passwordSigner = 0xbBaA67D208F4c5fCa149060ff584DD0E88852C95;","contract":"LlamaPass","time":1},{"type":"constant-restrict-modification  ","before":"string public name = \"Llama Pass\";","after":"string public constant name = \"Llama Pass\";","contract":"LlamaPass","time":1},{"type":"constant-restrict-modification  ","before":"string public symbol = \"LLP\";","after":"string public constant symbol = \"LLP\";","contract":"LlamaPass","time":1},{"type":"constant-restrict-modification  ","before":"uint16 private maxGoldPasses = 500;","after":"uint16 private constant maxGoldPasses = 500;","contract":"LlamaPass","time":1},{"type":"constant-restrict-modification  ","before":"uint16 private maxSilverPasses = 3500;","after":"uint16 private constant maxSilverPasses = 3500;","contract":"LlamaPass","time":1}]}
{"time":125,"results":[{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"PuppyMint","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"PuppyMint","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"PuppyCoin\";","after":"string public constant name = \"PuppyCoin\";","contract":"PuppyMint","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"PUP\";","after":"string public constant symbol = \"PUP\";","contract":"PuppyMint","time":0},{"type":"constant-restrict-modification  ","before":"string private _metadataURI = \"https://assets.puppycoin.fun/metadata/{id}.json\";","after":"string private constant _metadataURI = \"https://assets.puppycoin.fun/metadata/{id}.json\";","contract":"PuppyMint","time":0},{"type":"constant-restrict-modification  ","before":"uint private MILLI_PUP_PER_PUP = 1000;","after":"uint private constant MILLI_PUP_PER_PUP = 1000;","contract":"PuppyMint","time":0},{"type":"constant-restrict-modification  ","before":"uint private PUP_MAX_SUPPLY = 21696969696;","after":"uint private constant PUP_MAX_SUPPLY = 21696969696;","contract":"PuppyMint","time":0}]}
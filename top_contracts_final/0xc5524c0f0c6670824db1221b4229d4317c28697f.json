{"time":209,"results":[{"type":"external-function ","before":"function initialize(\n    address payable _creator,\n    string memory _name,\n    string memory _symbol\n  ) external {\n    require(msg.sender == address(collectionFactory), \"CollectionContract: Collection must be created via the factory\");\n\n    __ERC721_init_unchained(_name, _symbol);\n\n    owner = _creator;\n  }","after":"function initialize(\n    address payable _creator,\n    string calldata _name,\n    string calldata _symbol\n  ) external {\n    require(msg.sender == address(collectionFactory), \"CollectionContract: Collection must be created via the factory\");\n\n    __ERC721_init_unchained(_name, _symbol);\n\n    owner = _creator;\n  }","contract":"CollectionContract","time":0},{"type":"external-function ","before":"function mintAndApprove(string memory tokenCID, address operator) public returns (uint256 tokenId) {\n    tokenId = _mint(tokenCID);\n    setApprovalForAll(operator, true);\n  }","after":"function mintAndApprove(string calldata tokenCID, address operator) public returns (uint256 tokenId) {\n    tokenId = _mint(tokenCID);\n    setApprovalForAll(operator, true);\n  }","contract":"CollectionContract","time":0},{"type":"external-function ","before":"function mintWithCreatorPaymentAddressAndApprove(\n    string memory tokenCID,\n    address payable tokenCreatorPaymentAddress,\n    address operator\n  ) public returns (uint256 tokenId) {\n    tokenId = mintWithCreatorPaymentAddress(tokenCID, tokenCreatorPaymentAddress);\n    setApprovalForAll(operator, true);\n  }","after":"function mintWithCreatorPaymentAddressAndApprove(\n    string calldata tokenCID,\n    address payable tokenCreatorPaymentAddress,\n    address operator\n  ) public returns (uint256 tokenId) {\n    tokenId = mintWithCreatorPaymentAddress(tokenCID, tokenCreatorPaymentAddress);\n    setApprovalForAll(operator, true);\n  }","contract":"CollectionContract","time":0},{"type":"external-function ","before":"function mintWithCreatorPaymentFactoryAndApprove(\n    string memory tokenCID,\n    address paymentAddressFactory,\n    bytes memory paymentAddressCallData,\n    address operator\n  ) public returns (uint256 tokenId) {\n    tokenId = mintWithCreatorPaymentFactory(tokenCID, paymentAddressFactory, paymentAddressCallData);\n    setApprovalForAll(operator, true);\n  }","after":"function mintWithCreatorPaymentFactoryAndApprove(\n    string calldata tokenCID,\n    address paymentAddressFactory,\n    bytes calldata paymentAddressCallData,\n    address operator\n  ) public returns (uint256 tokenId) {\n    tokenId = mintWithCreatorPaymentFactory(tokenCID, paymentAddressFactory, paymentAddressCallData);\n    setApprovalForAll(operator, true);\n  }","contract":"CollectionContract","time":0},{"type":"external-function ","before":"function adminAccountMigrationForPaymentAddresses(\n    uint256[] calldata paymentAddressTokenIds,\n    address paymentAddressFactory,\n    bytes memory paymentAddressCallData,\n    uint256 addressLocationInCallData,\n    address originalAddress,\n    address payable newAddress,\n    bytes calldata signature\n  ) public onlyOperator {\n    originalAddress.requireAuthorizedAccountMigration(newAddress, signature);\n    _adminAccountRecoveryForPaymentAddresses(\n      paymentAddressTokenIds,\n      paymentAddressFactory,\n      paymentAddressCallData,\n      addressLocationInCallData,\n      originalAddress,\n      newAddress\n    );\n  }","after":"function adminAccountMigrationForPaymentAddresses(\n    uint256[] calldata paymentAddressTokenIds,\n    address paymentAddressFactory,\n    bytes calldata paymentAddressCallData,\n    uint256 addressLocationInCallData,\n    address originalAddress,\n    address payable newAddress,\n    bytes calldata signature\n  ) public onlyOperator {\n    originalAddress.requireAuthorizedAccountMigration(newAddress, signature);\n    _adminAccountRecoveryForPaymentAddresses(\n      paymentAddressTokenIds,\n      paymentAddressFactory,\n      paymentAddressCallData,\n      addressLocationInCallData,\n      originalAddress,\n      newAddress\n    );\n  }","contract":"CollectionContract","time":0}]}
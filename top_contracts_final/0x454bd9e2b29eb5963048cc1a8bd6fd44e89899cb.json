{"time":105,"results":[{"type":"external-function ","before":"function queueTransaction(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public returns (bytes32) {\n        require(msg.sender == operator, \"Operator only\");\n        require(votes[operator] * 2 > totalSupply, \"Not enough votes\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = block.timestamp + DELAY;\n        queuedTransactions[txHash] = eta;\n\n        emit QueueTransaction(txHash, target, value, data, eta);\n        return txHash;\n    }","after":"function queueTransaction(\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) public returns (bytes32) {\n        require(msg.sender == operator, \"Operator only\");\n        require(votes[operator] * 2 > totalSupply, \"Not enough votes\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = block.timestamp + DELAY;\n        queuedTransactions[txHash] = eta;\n\n        emit QueueTransaction(txHash, target, value, data, eta);\n        return txHash;\n    }","contract":"DictatorDAO","time":0},{"type":"external-function ","before":"function cancelTransaction(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public {\n        require(msg.sender == operator, \"Operator only\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        queuedTransactions[txHash] = 0;\n\n        emit CancelTransaction(txHash, target, value, data);\n    }","after":"function cancelTransaction(\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) public {\n        require(msg.sender == operator, \"Operator only\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        queuedTransactions[txHash] = 0;\n\n        emit CancelTransaction(txHash, target, value, data);\n    }","contract":"DictatorDAO","time":0},{"type":"external-function ","before":"function executeTransaction(\n        address target,\n        uint256 value,\n        bytes memory data\n    ) public payable returns (bytes memory) {\n        require(msg.sender == operator, \"Operator only\");\n        require(votes[operator] * 2 > totalSupply, \"Not enough votes\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = queuedTransactions[txHash];\n        require(block.timestamp >= eta, \"Too early\");\n        require(block.timestamp <= eta + GRACE_PERIOD, \"Tx stale\");\n\n        queuedTransactions[txHash] = 0;\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) =\n            target.call{value: value}(data);\n        require(success, \"Tx reverted :(\");\n\n        emit ExecuteTransaction(txHash, target, value, data);\n\n        return returnData;\n    }","after":"function executeTransaction(\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) public payable returns (bytes memory) {\n        require(msg.sender == operator, \"Operator only\");\n        require(votes[operator] * 2 > totalSupply, \"Not enough votes\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, data));\n        uint256 eta = queuedTransactions[txHash];\n        require(block.timestamp >= eta, \"Too early\");\n        require(block.timestamp <= eta + GRACE_PERIOD, \"Tx stale\");\n\n        queuedTransactions[txHash] = 0;\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) =\n            target.call{value: value}(data);\n        require(success, \"Tx reverted :(\");\n\n        emit ExecuteTransaction(txHash, target, value, data);\n\n        return returnData;\n    }","contract":"DictatorDAO","time":0}]}
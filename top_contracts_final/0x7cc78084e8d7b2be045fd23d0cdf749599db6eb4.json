{"time":147,"results":[{"type":"external-function ","before":"function setURIs(string memory _newBaseURI) external onlyOwner {\n\t\tbaseURI = _newBaseURI;\n    }","after":"function setURIs(string calldata _newBaseURI) external onlyOwner {\n\t\tbaseURI = _newBaseURI;\n    }","contract":"VeeDAO","time":0},{"type":"external-function ","before":"function mintWhitelist(uint256 _count, uint256 _timestamp, bytes memory _signature) public payable {\n\n        uint256 mintIndex = _tokenSupply.current();        \n        require(pre_sale_active, \"Pre-Sale is not active\" );\n        require(wl_mintedNFTs[msg.sender] + _count <= max_wl_wallet, \"Whitelist max mint per wallet is 10\");\n        require(_count >0 && _count <= maxPurchase, \"Minting more than allowed in a TX\");\n        require(mintIndex + _count <= totalCount-reserved_community, \"VeeDAO is Sold Out\");\n\t\trequire(msg.value == price.mul(_count), \"Must provide exact required ETH\");\n\n        address wallet = _msgSender();\n        address signerOwner = signatureWallet(wallet,_timestamp,_signature);\n        require(signerOwner == owner(), \"Not authorized to mint\");\n\n        wl_mintedNFTs[msg.sender] += _count;\n\n        for(uint256 i=0; i < _count; i++){\n            _tokenSupply.increment();\n            _safeMint(_msgSender(), _tokenSupply.current());\n        }\n\n        \n\n\n    }","after":"function mintWhitelist(uint256 _count, uint256 _timestamp, bytes calldata _signature) public payable {\n\n        uint256 mintIndex = _tokenSupply.current();        \n        require(pre_sale_active, \"Pre-Sale is not active\" );\n        require(wl_mintedNFTs[msg.sender] + _count <= max_wl_wallet, \"Whitelist max mint per wallet is 10\");\n        require(_count >0 && _count <= maxPurchase, \"Minting more than allowed in a TX\");\n        require(mintIndex + _count <= totalCount-reserved_community, \"VeeDAO is Sold Out\");\n\t\trequire(msg.value == price.mul(_count), \"Must provide exact required ETH\");\n\n        address wallet = _msgSender();\n        address signerOwner = signatureWallet(wallet,_timestamp,_signature);\n        require(signerOwner == owner(), \"Not authorized to mint\");\n\n        wl_mintedNFTs[msg.sender] += _count;\n\n        for(uint256 i=0; i < _count; i++){\n            _tokenSupply.increment();\n            _safeMint(_msgSender(), _tokenSupply.current());\n        }\n\n        \n\n\n    }","contract":"VeeDAO","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public totalCount = 10000;","after":"uint256 public constant totalCount = 10000;","contract":"VeeDAO","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public reserved_community = 150;","after":"uint256 public constant reserved_community = 150;","contract":"VeeDAO","time":1}]}
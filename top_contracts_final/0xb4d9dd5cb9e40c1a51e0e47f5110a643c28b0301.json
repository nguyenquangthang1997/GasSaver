{"time":225,"results":[{"type":"external-function ","before":"function addMultipleAddressWithAllocations(address[] memory beneficiaryAddresses, uint256[] memory amounts, uint256[] memory releases) public {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"only manager\");\n\n        require(beneficiaryAddresses.length > 0 && amounts.length > 0 && beneficiaryAddresses.length == amounts.length, \"Inconsistent length input\");\n\n        for (uint256 i = 0; i < beneficiaryAddresses.length; i++) {\n            require(_beneficiaryAllocations[beneficiaryAddresses[i]].isRegistered == false, \"The address exisits.\");\n            _beneficiaryAllocations[beneficiaryAddresses[i]].isRegistered = true;\n            _beneficiaryAllocations[beneficiaryAddresses[i]] = Allocation(amounts[i], releases[i], false, true);\n\n            emit AllocationRegistered(beneficiaryAddresses[i], amounts[i]);\n        }\n    }","after":"function addMultipleAddressWithAllocations(address[] calldata beneficiaryAddresses, uint256[] calldata amounts, uint256[] calldata releases) public {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"only manager\");\n\n        require(beneficiaryAddresses.length > 0 && amounts.length > 0 && beneficiaryAddresses.length == amounts.length, \"Inconsistent length input\");\n\n        for (uint256 i = 0; i < beneficiaryAddresses.length; i++) {\n            require(_beneficiaryAllocations[beneficiaryAddresses[i]].isRegistered == false, \"The address exisits.\");\n            _beneficiaryAllocations[beneficiaryAddresses[i]].isRegistered = true;\n            _beneficiaryAllocations[beneficiaryAddresses[i]] = Allocation(amounts[i], releases[i], false, true);\n\n            emit AllocationRegistered(beneficiaryAddresses[i], amounts[i]);\n        }\n    }","contract":"CookDistribution","time":0}]}
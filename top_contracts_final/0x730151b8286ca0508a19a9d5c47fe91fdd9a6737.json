{"time":116,"results":[{"type":"external-function ","before":"function mint(address to, uint256 id, uint256 amount, uint256 nonce, string memory metadata, uint8 v, bytes32 r, bytes32 s)\n        external {\n        require(usedNonces[nonce] == false, \"can't use the same signature twice\");\n        usedNonces[nonce] = true;\n\n        bytes32 payloadHash = keccak256(abi.encode(to, id, amount, nonce));\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", payloadHash));\n        address recovered = ecrecover(messageHash, v, r, s);\n        // Nifty Island must sign off on every mint\n        require(recovered == _signer, \"Signature failed to recover\");\n\n        _mint(to, id, amount, \"\");\n        tokenCount[id] += amount;\n        tokenMetadata[id] = metadata;\n    }","after":"function mint(address to, uint256 id, uint256 amount, uint256 nonce, string calldata metadata, uint8 v, bytes32 r, bytes32 s)\n        external {\n        require(usedNonces[nonce] == false, \"can't use the same signature twice\");\n        usedNonces[nonce] = true;\n\n        bytes32 payloadHash = keccak256(abi.encode(to, id, amount, nonce));\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", payloadHash));\n        address recovered = ecrecover(messageHash, v, r, s);\n        // Nifty Island must sign off on every mint\n        require(recovered == _signer, \"Signature failed to recover\");\n\n        _mint(to, id, amount, \"\");\n        tokenCount[id] += amount;\n        tokenMetadata[id] = metadata;\n    }","contract":"IslandERC1155","time":0},{"type":"external-function ","before":"function updateMetadata(uint256 tokenId, string memory metadata)\n        external\n        onlyOwner {\n        require(tokenCount[tokenId] > 0, \"Token does not exist\");\n        tokenMetadata[tokenId] = metadata;\n    }","after":"function updateMetadata(uint256 tokenId, string calldata metadata)\n        external\n        onlyOwner {\n        require(tokenCount[tokenId] > 0, \"Token does not exist\");\n        tokenMetadata[tokenId] = metadata;\n    }","contract":"IslandERC1155","time":0},{"type":"external-function ","before":"function updateBaseURI(string memory newURI) external onlyOwner {\n        _baseURI = newURI;\n    }","after":"function updateBaseURI(string calldata newURI) external onlyOwner {\n        _baseURI = newURI;\n    }","contract":"IslandERC1155","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"IslandERC1155","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"IslandERC1155","time":0}]}
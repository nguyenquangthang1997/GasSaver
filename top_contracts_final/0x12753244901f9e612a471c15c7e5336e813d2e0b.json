{"time":140,"results":[{"type":"external-function ","before":"      if (array[i] == tokenId) {\n                length--;\n                if (i < length) {\n                    array[i] = array[length];\n                }\n                array.pop();\n                break;\n            }\n        }\n    }\n\n    function buryVampsByIds(uint256[] memory tokenIds) public stakingEnabled {\n        require(getBuriedCount(msg.sender) + tokenIds.length <= MAX_WALLET_BURIED, \"MAX_TOKENS_BURRIED_PER_WALLET\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(_svsIERC721Enumerable.ownerOf(id) == msg.sender && SVSTokenIdToBurier[id] == address(0), \"TOKEN_IS_NOT_YOURS\");\n          ","after":"      if (array[i] == tokenId) {\n                length--;\n                if (i < length) {\n                    array[i] = array[length];\n                }\n                array.pop();\n                break;\n            }\n        }\n    }\n\n    function buryVampsByIds(uint256[] memory tokenIds) public stakingEnabled {\n        require(getBuriedCount(msg.sender) + tokenIds.length <= MAX_WALLET_BURIED, \"MAX_TOKENS_BURRIED_PER_WALLET\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(_svsIERC721Enumerable.ownerOf(id) == msg.sender && SVSTokenIdToBurier[id] == address(0), \"TOKEN_IS_NOT_YOURS\");\n          ","contract":"SVSGraveyard","time":0},{"type":"external-function ","before":"IERC721Enumerable.transferFrom(msg.sender, address(this), id);\n\n            burierToSVSTokenIds[msg.sender].push(id);\n            SVSTokenIdTimeStaked[id] = block.timestamp;\n            SVSTokenIdToBurier[id] = msg.sender;\n        }\n    }\n\n    function buryBatsByIds(uint256[] memory tokenIds) public stakingEnabled {\n        require(getBuriedCount(msg.sender) + tokenIds.length <= MAX_WALLET_BURIED, \"MAX_TOKENS_BURIED_PER_WALLET\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(_sbsIERC721Enumerable.ownerOf(id) == msg.sender && SBSTokenIdToBurier[id] == address(0), \"TOKEN_IS_NOT_YOURS\");\n          ","after":"IERC721Enumerable.transferFrom(msg.sender, address(this), id);\n\n            burierToSVSTokenIds[msg.sender].push(id);\n            SVSTokenIdTimeStaked[id] = block.timestamp;\n            SVSTokenIdToBurier[id] = msg.sender;\n        }\n    }\n\n    function buryBatsByIds(uint256[] memory tokenIds) public stakingEnabled {\n        require(getBuriedCount(msg.sender) + tokenIds.length <= MAX_WALLET_BURIED, \"MAX_TOKENS_BURIED_PER_WALLET\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(_sbsIERC721Enumerable.ownerOf(id) == msg.sender && SBSTokenIdToBurier[id] == address(0), \"TOKEN_IS_NOT_YOURS\");\n          ","contract":"SVSGraveyard","time":0},{"type":"external-function ","before":"= ((block.timestamp - SBSTokenIdTimeStaked[tokenId]) * SBS_EMISSIONS_RATE);\n            burierToSBSTokenIds[msg.sender].pop();\n            SBSTokenIdToBurier[tokenId] = address(0);\n        }\n\n        _mint(msg.sender, totalRewards);\n    }\n\n    function unstakeVampsByIds(uint256[] memory tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(SVSTokenIdToBurier[id] == msg.sender, \"NOT_ORIGINAL_BURIER\");\n\n            _svsIERC721Enumerable.transferFrom(address(this), msg.sender, id);\n            totalRewards += ((blo","after":"= ((block.timestamp - SBSTokenIdTimeStaked[tokenId]) * SBS_EMISSIONS_RATE);\n            burierToSBSTokenIds[msg.sender].pop();\n            SBSTokenIdToBurier[tokenId] = address(0);\n        }\n\n        _mint(msg.sender, totalRewards);\n    }\n\n    function unstakeVampsByIds(uint256[] memory tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(SVSTokenIdToBurier[id] == msg.sender, \"NOT_ORIGINAL_BURIER\");\n\n            _svsIERC721Enumerable.transferFrom(address(this), msg.sender, id);\n            totalRewards += ((blo","contract":"SVSGraveyard","time":0},{"type":"external-function ","before":"mp - SVSTokenIdTimeStaked[id]) * SVS_EMISSIONS_RATE);\n\n            removeTokenIdFromArray(burierToSVSTokenIds[msg.sender], id);\n            SVSTokenIdToBurier[id] = address(0);\n        }\n\n        _mint(msg.sender, totalRewards);\n    }\n    \n    function unstakeBatsByIds(uint256[] memory tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(SBSTokenIdToBurier[id] == msg.sender, \"NOT_ORIGINAL_BURIER\");\n\n            _sbsIERC721Enumerable.transferFrom(address(this), msg.sender, id);\n            totalRewards += ((blo","after":"mp - SVSTokenIdTimeStaked[id]) * SVS_EMISSIONS_RATE);\n\n            removeTokenIdFromArray(burierToSVSTokenIds[msg.sender], id);\n            SVSTokenIdToBurier[id] = address(0);\n        }\n\n        _mint(msg.sender, totalRewards);\n    }\n    \n    function unstakeBatsByIds(uint256[] memory tokenIds) public {\n        uint256 totalRewards = 0;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 id = tokenIds[i];\n            require(SBSTokenIdToBurier[id] == msg.sender, \"NOT_ORIGINAL_BURIER\");\n\n            _sbsIERC721Enumerable.transferFrom(address(this), msg.sender, id);\n            totalRewards += ((blo","contract":"SVSGraveyard","time":0}]}
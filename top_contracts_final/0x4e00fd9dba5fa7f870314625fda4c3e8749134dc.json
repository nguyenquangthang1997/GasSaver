{"time":744,"results":[{"type":"external-function ","before":"function purchaseTokenMintPass(\n        MintMethods mintMethod,\n        uint256 messageBoardingGroup,\n        string memory guid,\n        bytes memory signature,\n        uint256[] memory randomNumbers,\n        bytes[] memory signedRandomNumbers\n    ) external payable {\n        require(\n            isValidAccessMessage(\n                mintMethod,\n                messageBoardingGroup,\n                guid,\n                msg.sender,\n                signature\n            ),\n            \"Invalid token\"\n        );\n\n        require(\n            isValidSignedRandomNumber(randomNumbers[0], signedRandomNumbers[0], msg.sender),\n            \"Random number is invalid\"\n        );\n\n        require(!usedMintPasses[guid], \"Token has been used\");\n\n        require(\n            messageBoardingGroup <= boardingGroup,\n            \"This boarding group is not yet active\"\n        );\n        usedMintPasses[guid] = true;\n        mintCounts[msg.sender]++;\n\n\n        uint256 cost = 0 wei;\n        if (mintMethod == MintMethods.Whitelist) {\n            /// Otherwise free+gas\n            cost = priceWEI;\n        }\n\n        /// Ensuring we haven't minted more than the max reserved count\n        if (\n            mintMethod == MintMethods.Reserved ||\n            mintMethod == MintMethods.Giveaway\n        ) {\n            require(reservedCardsAvailable >= 5); /// 5 are special characters\n            reservedCardsAvailable--;\n        }\n        /// Checking if correct amount sent, could be zero for reserved or giveaway\n        require(msg.value == cost, ConstantsAF.INCORRECT_AMOUNT);\n        mintMultiple(1, randomNumbers, msg.sender);\n    }","after":"function purchaseTokenMintPass(\n        MintMethods mintMethod,\n        uint256 messageBoardingGroup,\n        string calldata guid,\n        bytes calldata signature,\n        uint256[] calldata randomNumbers,\n        bytes[] calldata signedRandomNumbers\n    ) external payable {\n        require(\n            isValidAccessMessage(\n                mintMethod,\n                messageBoardingGroup,\n                guid,\n                msg.sender,\n                signature\n            ),\n            \"Invalid token\"\n        );\n\n        require(\n            isValidSignedRandomNumber(randomNumbers[0], signedRandomNumbers[0], msg.sender),\n            \"Random number is invalid\"\n        );\n\n        require(!usedMintPasses[guid], \"Token has been used\");\n\n        require(\n            messageBoardingGroup <= boardingGroup,\n            \"This boarding group is not yet active\"\n        );\n        usedMintPasses[guid] = true;\n        mintCounts[msg.sender]++;\n\n\n        uint256 cost = 0 wei;\n        if (mintMethod == MintMethods.Whitelist) {\n            /// Otherwise free+gas\n            cost = priceWEI;\n        }\n\n        /// Ensuring we haven't minted more than the max reserved count\n        if (\n            mintMethod == MintMethods.Reserved ||\n            mintMethod == MintMethods.Giveaway\n        ) {\n            require(reservedCardsAvailable >= 5); /// 5 are special characters\n            reservedCardsAvailable--;\n        }\n        /// Checking if correct amount sent, could be zero for reserved or giveaway\n        require(msg.value == cost, ConstantsAF.INCORRECT_AMOUNT);\n        mintMultiple(1, randomNumbers, msg.sender);\n    }","contract":"AdultFantasySeasonOne","time":0},{"type":"external-function ","before":"function purchaseToken(\n        uint256 purchaseCount,\n        uint256[] memory randomNumbers,\n        bytes[] memory signedRandomNumbers\n    ) external payable {\n        /// Checking to make sure general sale is enabled\n        require(mintStarted, ConstantsAF.MINT_BEFORE_START);\n        /// Checking if general sale has sold out\n        require(totalSupply() < 9000, ConstantsAF.MAIN_SALE_ENDED);\n        /// Checking if correct amount sent\n        require(\n            msg.value == priceWEI * purchaseCount,\n            ConstantsAF.INCORRECT_AMOUNT\n        );\n        /// Checking if purchaseCount is under or equals 10\n        require(purchaseCount <= 10, ConstantsAF.PURCHACE_TOO_MANY);\n        for (uint256 index = 0; index < signedRandomNumbers.length; index++) {\n            uint256 randomNumber = randomNumbers[index];\n            bytes memory signedRandomNumber = signedRandomNumbers[index];\n            require(\n                isValidSignedRandomNumber(randomNumber, signedRandomNumber, msg.sender),\n                \"Random Number is invalid\"\n            );\n            mintCounts[msg.sender]++;\n        }\n\n        mintMultiple(purchaseCount, randomNumbers, msg.sender);\n    }","after":"function purchaseToken(\n        uint256 purchaseCount,\n        uint256[] calldata randomNumbers,\n        bytes[] calldata signedRandomNumbers\n    ) external payable {\n        /// Checking to make sure general sale is enabled\n        require(mintStarted, ConstantsAF.MINT_BEFORE_START);\n        /// Checking if general sale has sold out\n        require(totalSupply() < 9000, ConstantsAF.MAIN_SALE_ENDED);\n        /// Checking if correct amount sent\n        require(\n            msg.value == priceWEI * purchaseCount,\n            ConstantsAF.INCORRECT_AMOUNT\n        );\n        /// Checking if purchaseCount is under or equals 10\n        require(purchaseCount <= 10, ConstantsAF.PURCHACE_TOO_MANY);\n        for (uint256 index = 0; index < signedRandomNumbers.length; index++) {\n            uint256 randomNumber = randomNumbers[index];\n            bytes memory signedRandomNumber = signedRandomNumbers[index];\n            require(\n                isValidSignedRandomNumber(randomNumber, signedRandomNumber, msg.sender),\n                \"Random Number is invalid\"\n            );\n            mintCounts[msg.sender]++;\n        }\n\n        mintMultiple(purchaseCount, randomNumbers, msg.sender);\n    }","contract":"AdultFantasySeasonOne","time":0},{"type":"external-function ","before":"function batchPurchaseReservedTokenMintPass(\n        string[] memory guids,\n        uint256[] memory boardingGroups,\n        bytes[] memory signatures,\n        address _addr,\n        uint256[] memory randomNumbers,\n        bytes[] memory signedRandomNumbers\n    ) external payable {\n        require(\n            guids.length == signatures.length,\n            \"Guid length doesn't match signatures\"\n        );\n        require(\n            boardingGroups.length == signatures.length,\n            \"Boarding groups length doesn't match signatures\"\n        );\n\n        require(\n            randomNumbers.length == signatures.length,\n            \"Random numbers length doesn't match signatures\"\n        );\n\n        /// Ensuring we haven't minted more than the max reserved count\n        require(\n            int256(reservedCardsAvailable) - int256(guids.length) >= 0,\n            \"Not enough reserved cards available\"\n        );\n\n        /// Decrement the available reserved cards\n        reservedCardsAvailable -= guids.length;\n\n        /// Validating mint passes\n        for (uint256 index = 0; index < guids.length; index++) {\n            /// Validating mint each mint pass\n            string memory guid = guids[index];\n            bytes memory signature = signatures[index];\n            uint256 messageBoardingGroup = boardingGroups[index];\n            require(\n                isValidAccessMessage(\n                    MintMethods.Reserved,\n                    messageBoardingGroup,\n                    guid,\n                    _addr,\n                    signature\n                ),\n                \"Access message is invalid\"\n            );\n\n            uint256 randomNumber = randomNumbers[index];\n            bytes memory signedRandomNumber = signedRandomNumbers[index];\n\n            require(\n                isValidSignedRandomNumber(randomNumber, signedRandomNumber, _addr),\n                \"Random number is invalid\"\n            );\n            require(!usedMintPasses[guid], \"Mint pass is used\");\n\n            require(\n                boardingGroups[index] <= boardingGroup,\n                \"This boarding group is not yet active\"\n            );\n            usedMintPasses[guid] = true;\n            mintCounts[_addr]++;\n        }\n\n        mintMultiple(guids.length, randomNumbers, _addr);\n    }","after":"function batchPurchaseReservedTokenMintPass(\n        string[] calldata guids,\n        uint256[] calldata boardingGroups,\n        bytes[] calldata signatures,\n        address _addr,\n        uint256[] calldata randomNumbers,\n        bytes[] calldata signedRandomNumbers\n    ) external payable {\n        require(\n            guids.length == signatures.length,\n            \"Guid length doesn't match signatures\"\n        );\n        require(\n            boardingGroups.length == signatures.length,\n            \"Boarding groups length doesn't match signatures\"\n        );\n\n        require(\n            randomNumbers.length == signatures.length,\n            \"Random numbers length doesn't match signatures\"\n        );\n\n        /// Ensuring we haven't minted more than the max reserved count\n        require(\n            int256(reservedCardsAvailable) - int256(guids.length) >= 0,\n            \"Not enough reserved cards available\"\n        );\n\n        /// Decrement the available reserved cards\n        reservedCardsAvailable -= guids.length;\n\n        /// Validating mint passes\n        for (uint256 index = 0; index < guids.length; index++) {\n            /// Validating mint each mint pass\n            string memory guid = guids[index];\n            bytes memory signature = signatures[index];\n            uint256 messageBoardingGroup = boardingGroups[index];\n            require(\n                isValidAccessMessage(\n                    MintMethods.Reserved,\n                    messageBoardingGroup,\n                    guid,\n                    _addr,\n                    signature\n                ),\n                \"Access message is invalid\"\n            );\n\n            uint256 randomNumber = randomNumbers[index];\n            bytes memory signedRandomNumber = signedRandomNumbers[index];\n\n            require(\n                isValidSignedRandomNumber(randomNumber, signedRandomNumber, _addr),\n                \"Random number is invalid\"\n            );\n            require(!usedMintPasses[guid], \"Mint pass is used\");\n\n            require(\n                boardingGroups[index] <= boardingGroup,\n                \"This boarding group is not yet active\"\n            );\n            usedMintPasses[guid] = true;\n            mintCounts[_addr]++;\n        }\n\n        mintMultiple(guids.length, randomNumbers, _addr);\n    }","contract":"AdultFantasySeasonOne","time":0},{"type":"external-function ","before":"function setBaseURI(string memory uri) external onlyEditor {\n        customBaseURI = uri;\n    }","after":"function setBaseURI(string calldata uri) external onlyEditor {\n        customBaseURI = uri;\n    }","contract":"AdultFantasySeasonOne","time":0},{"type":"external-function ","before":"function setLicenseURI(string memory uri) external onlyEditor {\n        licenseAgreementURI = uri;\n    }","after":"function setLicenseURI(string calldata uri) external onlyEditor {\n        licenseAgreementURI = uri;\n    }","contract":"AdultFantasySeasonOne","time":0}]}
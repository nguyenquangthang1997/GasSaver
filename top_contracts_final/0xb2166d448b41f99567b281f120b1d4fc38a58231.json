{"time":118,"results":[{"type":"state-data-arrangement ","before":"\nstring public constant name = \"Abandoned Society\";\nstring public constant symbol = \"SOCIETY\";\nuint32 public totalSupply = 0;\nuint32 public constant maxSupply = 5500;\nuint32 public preSaleStart = 1641758400;\nuint32 public constant preSaleMaxPerWallet = 10;\nuint256 public constant preSaleUnitPrice = 0.08 ether;\nuint32 public publicSaleStart = 1641762000;\nuint32 public constant publicSaleMaxPerWallet = 24;\nuint256 public constant publicSaleUnitPrice = 0.09 ether;\nmapping(address => uint32) public minted;","after":"string public constant name = \"Abandoned Society\";\nstring public constant symbol = \"SOCIETY\";\nuint256 public constant preSaleUnitPrice = 0.08 ether;\nuint256 public constant publicSaleUnitPrice = 0.09 ether;\nmapping(address => uint32) public minted;\nuint32 public totalSupply = 0;\nuint32 public constant maxSupply = 5500;\nuint32 public preSaleStart = 1641758400;\nuint32 public constant preSaleMaxPerWallet = 10;\nuint32 public publicSaleStart = 1641762000;\nuint32 public constant publicSaleMaxPerWallet = 24;\n","contract":"AbandonedSociety","time":0},{"type":"external-function ","before":"function setURI(string memory uri) public onlyOwner {\n        _setURI(uri);\n    }","after":"function setURI(string calldata uri) public onlyOwner {\n        _setURI(uri);\n    }","contract":"AbandonedSociety","time":0},{"type":"external-function ","before":"function batchMint(address[] memory addresses) external onlyOwner {\n        require(\n            totalSupply + addresses.length <= maxSupply,\n            \"Count exceeds the maximum allowed supply.\"\n        );\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            internalMint(addresses[i], 1);\n        }\n    }","after":"function batchMint(address[] calldata addresses) external onlyOwner {\n        require(\n            totalSupply + addresses.length <= maxSupply,\n            \"Count exceeds the maximum allowed supply.\"\n        );\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            internalMint(addresses[i], 1);\n        }\n    }","contract":"AbandonedSociety","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"AbandonedSociety","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"AbandonedSociety","time":0}]}
{"time":226,"results":[{"type":"state-data-arrangement ","before":"\naddress public tttAddress;\nbytes32 remintRoot;\nbytes32 freeMintRoot;\nbytes32 whitelistRoot;\nbool isRemintOpen = true;\nuint256 price = 20000000000000000;\nuint256 totalQuantity = 7777;\nuint256 preSaleDate = 1643936400;\nuint256 publicSaleDate = 1644282000;\nuint256 preSaleMintLimit = 6;\nuint256 normalMintLimit = 21;\nmapping(address => bool) private holderHasReminted;\nmapping(address => uint) private holderFreeMintsUsed;\nmapping(address => bool) private wlHasMinted;","after":"bytes32 remintRoot;\nbytes32 freeMintRoot;\nbytes32 whitelistRoot;\nuint256 price = 20000000000000000;\nuint256 totalQuantity = 7777;\nuint256 preSaleDate = 1643936400;\nuint256 publicSaleDate = 1644282000;\nuint256 preSaleMintLimit = 6;\nuint256 normalMintLimit = 21;\nmapping(address => bool) private holderHasReminted;\nmapping(address => uint) private holderFreeMintsUsed;\nmapping(address => bool) private wlHasMinted;\naddress public tttAddress;\nbool isRemintOpen = true;\n","contract":"TTTSale","time":0},{"type":"immutable-restrict-modification ","before":"address public tttAddress;","after":"address public immutable tttAddress;","contract":"TTTSale","time":0},{"type":"constant-restrict-modification  ","before":"uint256 price = 20000000000000000;","after":"uint256 constant price = 20000000000000000;","contract":"TTTSale","time":0},{"type":"constant-restrict-modification  ","before":"uint256 preSaleDate = 1643936400;","after":"uint256 constant preSaleDate = 1643936400;","contract":"TTTSale","time":0},{"type":"external-function ","before":"function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","after":"function executeMetaTransaction(\n        address userAddress,\n        bytes calldata functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }","contract":"TTT","time":0},{"type":"immutable-restrict-modification ","before":"address proxyRegistryAddress;","after":"address immutable proxyRegistryAddress;","contract":"TTT","time":0},{"type":"constant-restrict-modification  ","before":"uint256 private _maxReservedTokenId = 350;","after":"uint256 private constant _maxReservedTokenId = 350;","contract":"TTT","time":0}]}
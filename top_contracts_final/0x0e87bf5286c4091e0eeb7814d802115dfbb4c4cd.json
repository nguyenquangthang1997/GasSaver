{"time":1218,"results":[{"type":"state-data-arrangement ","before":"\naddress public arbitrator;\naddress public owner;\naddress public relayer;\nuint32 public requestCancellationMinimumTime = 2 hours;\nuint256 public feesAvailableForWithdraw;\nuint8 constant INSTRUCTION_RELEASE = 0x01;\nuint8 constant INSTRUCTION_BUYER_CANCEL = 0x02;\nuint8 constant INSTRUCTION_RESOLVE = 0x03;\nmapping (bytes32 => Escrow) public escrows;\nuint16 constant GAS_doResolveDispute = 36100;\nuint16 constant GAS_batchRelayBaseCost = 28500;\nuint16 constant GAS_doRelease = 46588;\nuint16 constant GAS_doBuyerCancel = 46255;\nuint16 constant GAS_doSellerRequestCancel = 29507;","after":"uint256 public feesAvailableForWithdraw;\nmapping (bytes32 => Escrow) public escrows;\naddress public arbitrator;\naddress public owner;\naddress public relayer;\nuint32 public requestCancellationMinimumTime = 2 hours;\nuint16 constant GAS_doResolveDispute = 36100;\nuint16 constant GAS_batchRelayBaseCost = 28500;\nuint16 constant GAS_doRelease = 46588;\nuint16 constant GAS_doBuyerCancel = 46255;\nuint16 constant GAS_doSellerRequestCancel = 29507;\nuint8 constant INSTRUCTION_RELEASE = 0x01;\nuint8 constant INSTRUCTION_BUYER_CANCEL = 0x02;\nuint8 constant INSTRUCTION_RESOLVE = 0x03;\n","contract":"LocalCoinSwapEthereumEscrow","time":924},{"type":"external-function ","before":"function batchRelay(\n        bytes16[] memory _tradeID,\n        address payable[] memory _seller,\n        address payable[] memory _buyer,\n        uint256[] memory _value,\n        uint16[] memory _fee,\n        uint128[] memory _maximumGasPrice,\n        uint8[] memory _v,\n        bytes32[] memory _r,\n        bytes32[] memory _s,\n        uint8[] memory _instructionByte\n    ) public returns (bool[] memory) {\n        bool[] memory _results = new bool[](_tradeID.length);\n        uint128 _additionalGas = uint128(msg.sender == relayer ? GAS_batchRelayBaseCost / _tradeID.length : 0);\n        for (uint8 i = 0; i < _tradeID.length; i++) {\n            _results[i] = relay(\n                _tradeID[i],\n                _seller[i],\n                _buyer[i],\n                _value[i],\n                _fee[i],\n                _maximumGasPrice[i],\n                _v[i],\n                _r[i],\n                _s[i],\n                _instructionByte[i],\n                _additionalGas\n            );\n        }\n        return _results;\n    }","after":"function batchRelay(\n        bytes16[] calldata _tradeID,\n        address payable[] calldata _seller,\n        address payable[] calldata _buyer,\n        uint256[] calldata _value,\n        uint16[] calldata _fee,\n        uint128[] calldata _maximumGasPrice,\n        uint8[] calldata _v,\n        bytes32[] calldata _r,\n        bytes32[] calldata _s,\n        uint8[] calldata _instructionByte\n    ) public returns (bool[] memory) {\n        bool[] memory _results = new bool[](_tradeID.length);\n        uint128 _additionalGas = uint128(msg.sender == relayer ? GAS_batchRelayBaseCost / _tradeID.length : 0);\n        for (uint8 i = 0; i < _tradeID.length; i++) {\n            _results[i] = relay(\n                _tradeID[i],\n                _seller[i],\n                _buyer[i],\n                _value[i],\n                _fee[i],\n                _maximumGasPrice[i],\n                _v[i],\n                _r[i],\n                _s[i],\n                _instructionByte[i],\n                _additionalGas\n            );\n        }\n        return _results;\n    }","contract":"LocalCoinSwapEthereumEscrow","time":0},{"type":"constant-restrict-modification  ","before":"uint32 public requestCancellationMinimumTime = 2 hours;","after":"uint32 public constant requestCancellationMinimumTime = 2 hours;","contract":"LocalCoinSwapEthereumEscrow","time":0},{"type":"state-data-arrangement ","before":"\naddress public arbitrator;\naddress public owner;\naddress public relayer;\nuint16 public minimumTradeValue = 1;\nmapping (bytes32 => Escrow) public escrows;\nmapping (address => uint256) public feesAvailableForWithdraw;\nuint256 MAX_INT = 2**256 - 1;\nuint8 constant RELEASE_ESCROW = 0x01;\nuint8 constant BUYER_CANCELS = 0x02;\nuint8 constant RESOLVE_DISPUTE = 0x03;\nuint16 constant GAS_doRelease = 3658;\nuint16 constant GAS_doResolveDispute = 14060;\nuint16 constant GAS_doBuyerCancel = 2367;\nuint16 constant GAS_batchRelayBaseCost = 30000;","after":"mapping (bytes32 => Escrow) public escrows;\nmapping (address => uint256) public feesAvailableForWithdraw;\nuint256 MAX_INT = 2**256 - 1;\naddress public arbitrator;\naddress public owner;\naddress public relayer;\nuint16 public minimumTradeValue = 1;\nuint16 constant GAS_doRelease = 3658;\nuint16 constant GAS_doResolveDispute = 14060;\nuint16 constant GAS_doBuyerCancel = 2367;\nuint16 constant GAS_batchRelayBaseCost = 30000;\nuint8 constant RELEASE_ESCROW = 0x01;\nuint8 constant BUYER_CANCELS = 0x02;\nuint8 constant RESOLVE_DISPUTE = 0x03;\n","contract":"LocalCoinSwapV2Escrow","time":78},{"type":"external-function ","before":"function batchRelay(\n        bytes16[] memory _tradeID,\n        address payable[] memory _seller,\n        address payable[] memory _buyer,\n        uint256[] memory _value,\n        uint16[] memory _fee,\n        uint128[] memory _maximumGasPrice,\n        uint8[] memory _v,\n        bytes32[] memory _r,\n        bytes32[] memory _s,\n        uint8[] memory _instructionByte\n    ) public returns (bool[] memory) {\n        bool[] memory _results = new bool[](_tradeID.length);\n        uint128 _additionalGas = uint128(msg.sender == relayer ? GAS_batchRelayBaseCost / _tradeID.length : 0);\n        for (uint8 i = 0; i < _tradeID.length; i++) {\n            _results[i] = relay(\n                _tradeID[i],\n                _seller[i],\n                _buyer[i],\n                _value[i],\n                _fee[i],\n                _maximumGasPrice[i],\n                _v[i],\n                _r[i],\n                _s[i],\n                _instructionByte[i],\n                _additionalGas\n            );\n        }\n        return _results;\n    }","after":"function batchRelay(\n        bytes16[] calldata _tradeID,\n        address payable[] calldata _seller,\n        address payable[] calldata _buyer,\n        uint256[] calldata _value,\n        uint16[] calldata _fee,\n        uint128[] calldata _maximumGasPrice,\n        uint8[] calldata _v,\n        bytes32[] calldata _r,\n        bytes32[] calldata _s,\n        uint8[] calldata _instructionByte\n    ) public returns (bool[] memory) {\n        bool[] memory _results = new bool[](_tradeID.length);\n        uint128 _additionalGas = uint128(msg.sender == relayer ? GAS_batchRelayBaseCost / _tradeID.length : 0);\n        for (uint8 i = 0; i < _tradeID.length; i++) {\n            _results[i] = relay(\n                _tradeID[i],\n                _seller[i],\n                _buyer[i],\n                _value[i],\n                _fee[i],\n                _maximumGasPrice[i],\n                _v[i],\n                _r[i],\n                _s[i],\n                _instructionByte[i],\n                _additionalGas\n            );\n        }\n        return _results;\n    }","contract":"LocalCoinSwapV2Escrow","time":0},{"type":"constant-restrict-modification  ","before":"uint256 MAX_INT = 2**256 - 1;","after":"uint256 constant MAX_INT = 2**256 - 1;","contract":"LocalCoinSwapV2Escrow","time":0}]}
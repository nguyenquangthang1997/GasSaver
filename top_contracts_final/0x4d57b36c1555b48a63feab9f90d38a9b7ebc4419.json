{"time":160,"results":[{"type":"external-function ","before":"function setNewURI(string memory newURI) external onlyOwner {\r\n        _setURI(newURI);\r\n    }","after":"function setNewURI(string calldata newURI) external onlyOwner {\r\n        _setURI(newURI);\r\n    }","contract":"MoonrayPresalePass","time":0},{"type":"external-function ","before":"function mintPassFromClaim(bytes32[] memory claim) external payable {\r\n        require(block.number > startingBlockNumber, 'Not started');\r\n        require(mintingActive, 'Not active');\r\n\r\n        bytes32[][] memory claims = new bytes32[][](1);\r\n        claims[0] = claim;\r\n\r\n        _mintPassFromClaim(_msgSender(), claims, 1);\r\n    }","after":"function mintPassFromClaim(bytes32[] calldata claim) external payable {\r\n        require(block.number > startingBlockNumber, 'Not started');\r\n        require(mintingActive, 'Not active');\r\n\r\n        bytes32[][] memory claims = new bytes32[][](1);\r\n        claims[0] = claim;\r\n\r\n        _mintPassFromClaim(_msgSender(), claims, 1);\r\n    }","contract":"MoonrayPresalePass","time":0},{"type":"external-function ","before":"function redeemPresalePass(string memory stxWallet) external {\r\n        require(burningActive, 'Burning off');\r\n        require(bytes(stxWallet).length == 41, 'Invalid wallet length'); // sufficient for UTF-8 encoded strings.\r\n        require(bytes(stxWallet)[0] == 'S', 'Invalid wallet format');\r\n\r\n        _burn(_msgSender(), PRESALE_PASS_TOKEN, 1);\r\n\r\n        emit PassRedeemed(_msgSender(), stxWallet);\r\n    }","after":"function redeemPresalePass(string calldata stxWallet) external {\r\n        require(burningActive, 'Burning off');\r\n        require(bytes(stxWallet).length == 41, 'Invalid wallet length'); // sufficient for UTF-8 encoded strings.\r\n        require(bytes(stxWallet)[0] == 'S', 'Invalid wallet format');\r\n\r\n        _burn(_msgSender(), PRESALE_PASS_TOKEN, 1);\r\n\r\n        emit PassRedeemed(_msgSender(), stxWallet);\r\n    }","contract":"MoonrayPresalePass","time":0},{"type":"external-function ","before":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","after":"function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }","contract":"MoonrayPresalePass","time":0},{"type":"external-function ","before":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","after":"function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }","contract":"MoonrayPresalePass","time":0},{"type":"external-function ","before":"function whitelistWallets(address[] memory wallets) external onlyOwner {\r\n        require(wallets.length > 0, 'Empty list');\r\n\r\n        uint256 idx;\r\n        for (idx = 0; idx < wallets.length; idx++) {\r\n            _whitelist[wallets[idx]]++;\r\n        }\r\n    }","after":"function whitelistWallets(address[] calldata wallets) external onlyOwner {\r\n        require(wallets.length > 0, 'Empty list');\r\n\r\n        uint256 idx;\r\n        for (idx = 0; idx < wallets.length; idx++) {\r\n            _whitelist[wallets[idx]]++;\r\n        }\r\n    }","contract":"MoonrayPresalePass","time":0},{"type":"immutable-restrict-modification ","before":"uint256 public maxTokensForSale;","after":"uint256 public immutable maxTokensForSale;","contract":"MoonrayPresalePass","time":1}]}
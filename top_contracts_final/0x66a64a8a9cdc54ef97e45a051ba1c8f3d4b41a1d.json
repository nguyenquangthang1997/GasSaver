{"time":124,"results":[{"type":"de-morgan-condition ","before":"ender()][spender] + addedValue);\n        return tru","after":"!(ender()][spender] + addedValue);\n        return tru)","loc":{"start":{"line":522,"column":16},"end":{"line":522,"column":66}},"contract":"BabyShibaCoin","time":0},{"type":"de-morgan-condition ","before":"s (bool) {\n        uint256 currentAllowance","after":"!(s (bool) {\n        uint256 currentAllowance)","loc":{"start":{"line":524,"column":11},"end":{"line":524,"column":53}},"contract":"BabyShibaCoin","time":0},{"type":"de-morgan-condition ","before":"sender != pair && !exemptFee[recipient] && ","after":"!(sender = pair && exemptFee[recipient] && )","loc":{"start":{"line":553,"column":11},"end":{"line":553,"column":53}},"contract":"BabyShibaCoin","time":0},{"type":"external-function ","before":"s), block.timestamp);\n\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount)","after":"s), block.timestamp);\n\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount)","contract":"BabyShibaCoin","time":0},{"type":"external-function ","before":"\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(rout","after":"\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(rout","contract":"BabyShibaCoin","time":0},{"type":"external-function ","before":"wRouter);\n        pair = newPair;\n    }\n    \n    function updateTradingEnabled(bool state) external onlyOwner{\n        tradingEnabled = state;\n        providingLiquidity = state;\n    }\n    \n    function ","after":"wRouter);\n        pair = newPair;\n    }\n    \n    function updateTradingEnabled(bool state) external onlyOwner{\n        tradingEnabled = state;\n        providingLiquidity = state;\n    }\n    \n    function ","contract":"BabyShibaCoin","time":0},{"type":"external-function ","before":"ternal onlyOwner{\n        operationWallet = newWallet;\n    }\n    \n    function updateCooldown(bool state, uint256 time) external onlyOwner{\n        coolDownTime = time * 1 seconds;\n        coolDo","after":"ternal onlyOwner{\n        operationWallet = newWallet;\n    }\n    \n    function updateCooldown(bool state, uint256 time) external onlyOwner{\n        coolDownTime = time * 1 seconds;\n        coolDo","contract":"BabyShibaCoin","time":0}]}
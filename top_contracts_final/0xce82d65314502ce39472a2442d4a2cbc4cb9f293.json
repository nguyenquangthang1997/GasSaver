{"time":145,"results":[{"type":"state-data-arrangement ","before":"\n   uint256 public constant AS_GIFT = 3\n   uint256 public constant AS_SALE = 96\n   uint256 public constant AS_MAX = AS_GIFT + AS_SA\n   uint256 public constant AS_PRICE = 0.05 eth\n   uint256 public constant AS_MINT =\n   uint256 public constant MAX_3 = 10\n   uint256 public constant MAX_2 = 24\n   mapping(address => uint256) public listPurchas\n   mapping(string => bool) private _usedNonc\n   uint256 public use\n   uint256 public use\n   string private _contractU\n   string private _tokenBaseURI = \"https://animalsocietynft.com/api/metadata\n   address private _devAddress = 0xa65159C939FbED795164bb40F7507d9E5D54Ff\n   address private _signerAddress = 0xC3E4371297DEAF3eA9D78466d96b1D60981622\n   string public pro\n   uint256 public giftedAmou\n   uint256 public publicAmountMint\n   bool public saleLi\n   bool public lock","after":"   uint256 public constant AS_GIFT = 3\n   uint256 public constant AS_SALE = 96\n   uint256 public constant AS_MAX = AS_GIFT + AS_SA\n   uint256 public constant AS_PRICE = 0.05 eth\n   uint256 public constant AS_MINT =\n   uint256 public constant MAX_3 = 10\n   uint256 public constant MAX_2 = 24\n   mapping(address => uint256) public listPurchas\n   mapping(string => bool) private _usedNonc\n   uint256 public use\n   uint256 public use\n   string private _contractU\n   string private _tokenBaseURI = \"https://animalsocietynft.com/api/metadata\n   string public pro\n   uint256 public giftedAmou\n   uint256 public publicAmountMint\n   address private _devAddress = 0xa65159C939FbED795164bb40F7507d9E5D54Ff\n   address private _signerAddress = 0xC3E4371297DEAF3eA9D78466d96b1D60981622\n   bool public saleLi\n   bool public lock\n","contract":"AnimalSociety","time":0},{"type":"external-function ","before":"   function buy(bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity) external payable {\n        require(saleLive, \"SALE_CLOSED\");\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n        require(totalSupply() < AS_MAX, \"OUT_OF_STOCK\");\n        require(publicAmountMinted + tokenQuantity <= AS_MAX, \"EXCEED_PUBLIC\");\n        require(listPurchases[msg.sender] + tokenQuantity <= AS_MINT, \"EXCEED_ALLOC\");\n        require(tokenQuantity <= AS_MINT, \"EXCEED_AS_MINT\");\n        require(checkMaxMints(listPurchases[msg.sender] + tokenQuantity), \"EXCEED_MINT_LIMITS\");\n        require(AS_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n       \n        if(listPurchases[msg.sender] > 2){\n            used3--;\n        }else if(listPurchases[msg.sender] > 1){\n            used2--;\n        }\n        \n        for(uint256 i = 0; i < tokenQuantity; i++) {\n            publicAmountMinted++;\n             listPurchases[msg.sender]++;\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n        \n        if(listPurchases[msg.sender] > 2){\n            used3++;\n        }else if(listPurchases[msg.sender] > 1){\n            used2++;\n        }\n        \n        _usedNonces[nonce] = true;\n  ","after":"   function buy(bytes32 hash, bytes calldata signature, string calldata nonce, uint256 tokenQuantity) external payable {\n        require(saleLive, \"SALE_CLOSED\");\n        require(matchAddresSigner(hash, signature), \"DIRECT_MINT_DISALLOWED\");\n        require(!_usedNonces[nonce], \"HASH_USED\");\n        require(hashTransaction(msg.sender, tokenQuantity, nonce) == hash, \"HASH_FAIL\");\n        require(totalSupply() < AS_MAX, \"OUT_OF_STOCK\");\n        require(publicAmountMinted + tokenQuantity <= AS_MAX, \"EXCEED_PUBLIC\");\n        require(listPurchases[msg.sender] + tokenQuantity <= AS_MINT, \"EXCEED_ALLOC\");\n        require(tokenQuantity <= AS_MINT, \"EXCEED_AS_MINT\");\n        require(checkMaxMints(listPurchases[msg.sender] + tokenQuantity), \"EXCEED_MINT_LIMITS\");\n        require(AS_PRICE * tokenQuantity <= msg.value, \"INSUFFICIENT_ETH\");\n       \n        if(listPurchases[msg.sender] > 2){\n            used3--;\n        }else if(listPurchases[msg.sender] > 1){\n            used2--;\n        }\n        \n        for(uint256 i = 0; i < tokenQuantity; i++) {\n            publicAmountMinted++;\n             listPurchases[msg.sender]++;\n            _safeMint(msg.sender, totalSupply() + 1);\n        }\n        \n        if(listPurchases[msg.sender] > 2){\n            used3++;\n        }else if(listPurchases[msg.sender] > 1){\n            used2++;\n        }\n        \n        _usedNonces[nonce] = true;\n  ","contract":"AnimalSociety","time":0},{"type":"constant-restrict-modification  ","before":"   address private _devAddress = 0xa65159C939FbED795164bb40F7507d9E5D54Ff","after":"   address private constant _devAddress = 0xa65159C939FbED795164bb40F7507d9E5D54Ff","contract":"AnimalSociety","time":0}]}
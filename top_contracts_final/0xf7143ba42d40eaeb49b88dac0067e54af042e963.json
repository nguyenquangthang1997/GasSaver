{"time":168,"results":[{"type":"state-data-arrangement ","before":"\nstring private _baseTokenURI = \"https://api.metasaurs.com/metadata/\";\nstring private _contractURI = \"ipfs://QmeHMkGomVni2f4jPj3zHZykCsJqvi5PzC2VysFaXhXQ5A\";\nstring private ipfsProvenance;\nuint256 public maxSupply = 9999;\nuint256 public maxPresale = 8000;\nmapping(string => bool) private _usedNonces;\naddress private _signerAddress = 0xEAa3fD5F542b0c3501958F792028ED16aFA84e34;\nuint256 public pricePerToken = 70000000000000000;\nbool public saleLive = false;\nbool public saleLiveX2 = false;\nbool public presaleLive = false;\nbool public locked;","after":"string private _baseTokenURI = \"https://api.metasaurs.com/metadata/\";\nstring private _contractURI = \"ipfs://QmeHMkGomVni2f4jPj3zHZykCsJqvi5PzC2VysFaXhXQ5A\";\nstring private ipfsProvenance;\nuint256 public maxSupply = 9999;\nuint256 public maxPresale = 8000;\nmapping(string => bool) private _usedNonces;\nuint256 public pricePerToken = 70000000000000000;\naddress private _signerAddress = 0xEAa3fD5F542b0c3501958F792028ED16aFA84e34;\nbool public saleLive = false;\nbool public saleLiveX2 = false;\nbool public presaleLive = false;\nbool public locked;\n","contract":"Metasaurs","time":1},{"type":"external-function ","before":"function publicBuy(\n\t\tbytes32 hash,\n\t\tbytes memory sig,\n\t\tstring memory nonce\n\t) external payable {\n\t\trequire(saleLive, \"not live\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(totalSupply() + 1 <= maxSupply, \"out of stock\");\n\t\trequire(pricePerToken == msg.value, \"exact amount needed\");\n\t\trequire(!_usedNonces[nonce], \"nonce already used\");\n\t\trequire(hashTransaction(msg.sender, 1, nonce) == hash, \"hash check failed\");\n\t\t_usedNonces[nonce] = true;\n\t\t_safeMint(msg.sender, totalSupply() + 1);\n\t}","after":"function publicBuy(\n\t\tbytes32 hash,\n\t\tbytes calldata sig,\n\t\tstring calldata nonce\n\t) external payable {\n\t\trequire(saleLive, \"not live\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(totalSupply() + 1 <= maxSupply, \"out of stock\");\n\t\trequire(pricePerToken == msg.value, \"exact amount needed\");\n\t\trequire(!_usedNonces[nonce], \"nonce already used\");\n\t\trequire(hashTransaction(msg.sender, 1, nonce) == hash, \"hash check failed\");\n\t\t_usedNonces[nonce] = true;\n\t\t_safeMint(msg.sender, totalSupply() + 1);\n\t}","contract":"Metasaurs","time":0},{"type":"external-function ","before":"function presaleBuy(\n\t\tbytes32 hash,\n\t\tbytes memory sig,\n\t\tuint256 qty,\n\t\tstring memory nonce\n\t) external payable nonReentrant {\n\t\trequire(presaleLive, \"presale not live\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(qty <= 5, \"no more than 5\");\n\t\trequire(hashTransaction(msg.sender, qty, nonce) == hash, \"hash check failed\");\n\t\trequire(totalSupply() + qty <= maxPresale, \"presale out of stock\");\n\t\trequire(pricePerToken * qty == msg.value, \"exact amount needed\");\n\t\trequire(!_usedNonces[nonce], \"nonce already used\");\n\n\t\t_usedNonces[nonce] = true;\n\t\tfor (uint256 i = 0; i < qty; i++) {\n\t\t\t_safeMint(msg.sender, totalSupply() + 1);\n\t\t}\n\t}","after":"function presaleBuy(\n\t\tbytes32 hash,\n\t\tbytes calldata sig,\n\t\tuint256 qty,\n\t\tstring calldata nonce\n\t) external payable nonReentrant {\n\t\trequire(presaleLive, \"presale not live\");\n\t\trequire(matchAddresSigner(hash, sig), \"no direct mint\");\n\t\trequire(qty <= 5, \"no more than 5\");\n\t\trequire(hashTransaction(msg.sender, qty, nonce) == hash, \"hash check failed\");\n\t\trequire(totalSupply() + qty <= maxPresale, \"presale out of stock\");\n\t\trequire(pricePerToken * qty == msg.value, \"exact amount needed\");\n\t\trequire(!_usedNonces[nonce], \"nonce already used\");\n\n\t\t_usedNonces[nonce] = true;\n\t\tfor (uint256 i = 0; i < qty; i++) {\n\t\t\t_safeMint(msg.sender, totalSupply() + 1);\n\t\t}\n\t}","contract":"Metasaurs","time":0},{"type":"external-function ","before":"function customThing(\n\t\tuint256 nftID,\n\t\tuint256 id,\n\t\tstring memory what\n\t) external payable {\n\t\trequire(ownerOf(nftID) == msg.sender, \"NFT ownership required\");\n\t\temit CustomThing(nftID, msg.value, id, what);\n\t}","after":"function customThing(\n\t\tuint256 nftID,\n\t\tuint256 id,\n\t\tstring calldata what\n\t) external payable {\n\t\trequire(ownerOf(nftID) == msg.sender, \"NFT ownership required\");\n\t\temit CustomThing(nftID, msg.value, id, what);\n\t}","contract":"Metasaurs","time":0},{"type":"external-function ","before":"function setBaseURI(string memory newBaseURI) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_baseTokenURI = newBaseURI;\n\t}","after":"function setBaseURI(string calldata newBaseURI) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_baseTokenURI = newBaseURI;\n\t}","contract":"Metasaurs","time":0},{"type":"external-function ","before":"function setContractURI(string memory newuri) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_contractURI = newuri;\n\t}","after":"function setContractURI(string calldata newuri) public onlyOwner {\n\t\trequire(!locked, \"locked functions\");\n\t\t_contractURI = newuri;\n\t}","contract":"Metasaurs","time":0},{"type":"external-function ","before":"function setIPFSProvenance(string memory _ipfsProvenance) external onlyOwner {\n\t\tbytes memory tempEmptyStringTest = bytes(ipfsProvenance);\n\t\trequire(tempEmptyStringTest.length == 0, \"ipfs provenance already set\");\n\t\tipfsProvenance = _ipfsProvenance;\n\t}","after":"function setIPFSProvenance(string calldata _ipfsProvenance) external onlyOwner {\n\t\tbytes memory tempEmptyStringTest = bytes(ipfsProvenance);\n\t\trequire(tempEmptyStringTest.length == 0, \"ipfs provenance already set\");\n\t\tipfsProvenance = _ipfsProvenance;\n\t}","contract":"Metasaurs","time":0}]}
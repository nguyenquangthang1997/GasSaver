{"time":427,"results":[{"type":"de-morgan-condition ","before":"{\n        if (!balances[msg.sender].safeToSub(value) || !balances[to].sa","after":"!({\n        if (balances[msg.sender].safeToSub(value) || balances[to].sa)","loc":{"start":{"line":1071,"column":12},"end":{"line":1071,"column":83}},"contract":"GnosisStandardToken","time":0},{"type":"de-morgan-condition ","before":"{\n        if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(\n            v","after":"!({\n        if (balances[from].safeToSub(value) || allowances[from][msg.sender].safeToSub(\n            v)","loc":{"start":{"line":1087,"column":12},"end":{"line":1089,"column":8}},"contract":"GnosisStandardToken","time":0},{"type":"loop-duplication","before":"\nstart line 2519 column 12, end line 2525 column 12\n) {\n            for (uint256 i = 0; i < latestSolution.trades.length; i++) {\n                address owner = latestSolution.trades[i].owner;\n                uint256 orderId = latestSolution.trades[i].orderId;\n                Order memory order = orders[owner][orderId];\n                (, uint128 sellAmount) = getTradedAmounts(latestSolution.trades[i].volume, order);\n                addBalance(owner, tokenIdToAddressMap(order.sellToken), sellAmount\nstart line 2526 column 12, end line 2534 column 12\n  }\n            for (uint256 i = 0; i < latestSolution.trades.length; i++) {\n                address owner = latestSolution.trades[i].owner;\n                uint256 orderId = latestSolution.trades[i].orderId;\n                Order memory order = orders[owner][orderId];\n                (uint128 buyAmount, uint128 sellAmount) = getTradedAmounts(latestSolution.trades[i].volume, order);\n                revertRemainingOrder(owner, orderId, sellAmount);\n                subtractBalance(owner, tokenIdToAddressMap(order.buyToken), buyAmount);\n                emit TradeReversion(owner, orderId, sellAmount, buyAmount","after":"// merge loop\n\nstart line 2519 column 12, end line 2525 column 12\n) {\n            for (uint256 i = 0; i < latestSolution.trades.length; i++) {\n                address owner = latestSolution.trades[i].owner;\n                uint256 orderId = latestSolution.trades[i].orderId;\n                Order memory order = orders[owner][orderId];\n                (, uint128 sellAmount) = getTradedAmounts(latestSolution.trades[i].volume, order);\n                addBalance(owner, tokenIdToAddressMap(order.sellToken), sellAmount\nstart line 2526 column 12, end line 2534 column 12\n  }\n            for (uint256 i = 0; i < latestSolution.trades.length; i++) {\n                address owner = latestSolution.trades[i].owner;\n                uint256 orderId = latestSolution.trades[i].orderId;\n                Order memory order = orders[owner][orderId];\n                (uint128 buyAmount, uint128 sellAmount) = getTradedAmounts(latestSolution.trades[i].volume, order);\n                revertRemainingOrder(owner, orderId, sellAmount);\n                subtractBalance(owner, tokenIdToAddressMap(order.buyToken), buyAmount);\n                emit TradeReversion(owner, orderId, sellAmount, buyAmount","contract":"BatchExchange","time":0}]}
{"time":424,"results":[{"type":"external-function ","before":"eturn true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amount, note);\r\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMRecei","after":"eturn true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amount, note);\r\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMRecei","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"RM_MINT);\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmBurnFrom(from, value, note);\r\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMRecei","after":"RM_MINT);\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmBurnFrom(from, value, note);\r\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMRecei","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function drmMintTo(address to, uint256 amount, string memory note) public","after":" balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function drmMintTo(address to, uint256 amount, string memory note) public","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 v","after":" = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 v","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"et) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the C","after":"et) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the C","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(","after":"ferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"sferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The sizes of \\'to\\' and \\'values\\' arrays are different.\");\r\n        require(length == userIdHash.length, \"The sizes of \\'to\\' and \\'userIdHash\\' arrays are different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(t","after":"sferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러��� 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The sizes of \\'to\\' and \\'values\\' arrays are different.\");\r\n        require(length == userIdHash.length, \"The sizes of \\'to\\' and \\'userIdHash\\' arrays are different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(t","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"       unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!","after":"       unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"| unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) >= lockValues[addr], ","after":"| unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) >= lockValues[addr], ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"rable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string memory note) public onlyOwner {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r","after":"rable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string memory note) public onlyOwner {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"Value만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(address => uint256) p","after":"Value만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(address => uint256) p","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ckValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string not","after":"ckValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string not","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n  ","after":" event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n  ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ort \"./StandardToken.sol\";\r\nimport \"./MultiOwnable.sol\";\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is","after":"ort \"./StandardToken.sol\";\r\nimport \"./MultiOwnable.sol\";\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"dToken, MultiOwnable {\r\n    bool public locked = true;\r\n\r\n    /**\r\n     * dev 락 = TRUE  이여도  거래 가능한 언�","after":"dToken, MultiOwnable {\r\n    bool public locked = true;\r\n\r\n    /**\r\n     * dev 락 = TRUE  이여도  거래 가능한 언�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"�\r\n     */\r\n    mapping(address => bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev - 계정마다 lockValue만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(addres","after":"�\r\n     */\r\n    mapping(address => bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev - 계정마다 lockValue만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(addres","contract":"DoDreamChain","time":0},{"type":"external-function ","before":", note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 발행시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        requi","after":", note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 발행시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        requi","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(addres","after":" = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(addres","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"require(value <= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DR","after":"require(value <= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DR","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTr","after":"\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTr","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"�(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner retur","after":"�(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string calldata note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner retur","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ic returns (bool) {\r\n        return drmDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public re","after":"ic returns (bool) {\r\n        return drmDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public re","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"et is zero address(0). Check the input address.\");\r\n    \r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n  ","after":"et is zero address(0). Check the input address.\");\r\n    \r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n  ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"s to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value <= balances[from], \"Your balance is insufficie","after":"s to, uint256 amount, string calldata note) public onlyOwner returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value <= balances[from], \"Your balance is insufficie","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경�","after":"        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트�","after":"\n        string calldata note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ress.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint8)\", owner, spender, value, receiveType));\r\n            if (callOk) {\r\n                e","after":"ress.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint8)\", owner, spender, value, receiveType));\r\n            if (callOk) {\r\n                e","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"sferedToDRMDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amoun","after":"sferedToDRMDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amoun","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"blic returns (bool ret) {\r\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\r\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function postTransfer(address owner, address spender, address to","after":"blic returns (bool ret) {\r\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\r\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function postTransfer(address owner, address spender, address to","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"6 value,\r\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\r\n        if (Address.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint","after":"6 value,\r\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\r\n        if (Address.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"eturn true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amount, note);\r\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMRecei","after":"eturn true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amount, note);\r\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMRecei","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"RM_MINT);\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmBurnFrom(from, value, note);\r\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMRecei","after":"RM_MINT);\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmBurnFrom(from, value, note);\r\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMRecei","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function drmMintTo(address to, uint256 amount, string memory note) public","after":" balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function drmMintTo(address to, uint256 amount, string memory note) public","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 v","after":" = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 v","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"et) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the C","after":"et) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the C","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(","after":"ferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"sferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The sizes of \\'to\\' and \\'values\\' arrays are different.\");\r\n        require(length == userIdHash.length, \"The sizes of \\'to\\' and \\'userIdHash\\' arrays are different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(t","after":"sferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러��� 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The sizes of \\'to\\' and \\'values\\' arrays are different.\");\r\n        require(length == userIdHash.length, \"The sizes of \\'to\\' and \\'userIdHash\\' arrays are different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(t","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"       unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!","after":"       unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"| unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) >= lockValues[addr], ","after":"| unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) >= lockValues[addr], ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"rable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string memory note) public onlyOwner {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r","after":"rable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string memory note) public onlyOwner {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"Value만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(address => uint256) p","after":"Value만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(address => uint256) p","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ckValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string not","after":"ckValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string not","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n  ","after":" event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n  ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ort \"./StandardToken.sol\";\r\nimport \"./MultiOwnable.sol\";\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is","after":"ort \"./StandardToken.sol\";\r\nimport \"./MultiOwnable.sol\";\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"dToken, MultiOwnable {\r\n    bool public locked = true;\r\n\r\n    /**\r\n     * dev 락 = TRUE  이여도  거래 가능한 언�","after":"dToken, MultiOwnable {\r\n    bool public locked = true;\r\n\r\n    /**\r\n     * dev 락 = TRUE  이여도  거래 가능한 언�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"�\r\n     */\r\n    mapping(address => bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev - 계정마다 lockValue만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(addres","after":"�\r\n     */\r\n    mapping(address => bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev - 계정마다 lockValue만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(addres","contract":"DoDreamChain","time":0},{"type":"external-function ","before":", note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 발행시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        requi","after":", note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 발행시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        requi","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(addres","after":" = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(addres","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"require(value <= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DR","after":"require(value <= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DR","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTr","after":"\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTr","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"�(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner retur","after":"�(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string calldata note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner retur","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ic returns (bool) {\r\n        return drmDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public re","after":"ic returns (bool) {\r\n        return drmDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public re","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"et is zero address(0). Check the input address.\");\r\n    \r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n  ","after":"et is zero address(0). Check the input address.\");\r\n    \r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n  ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"s to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value <= balances[from], \"Your balance is insufficie","after":"s to, uint256 amount, string calldata note) public onlyOwner returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value <= balances[from], \"Your balance is insufficie","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경�","after":"        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트�","after":"\n        string calldata note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ress.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint8)\", owner, spender, value, receiveType));\r\n            if (callOk) {\r\n                e","after":"ress.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint8)\", owner, spender, value, receiveType));\r\n            if (callOk) {\r\n                e","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"sferedToDRMDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amoun","after":"sferedToDRMDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amoun","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"blic returns (bool ret) {\r\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\r\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function postTransfer(address owner, address spender, address to","after":"blic returns (bool ret) {\r\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\r\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function postTransfer(address owner, address spender, address to","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"6 value,\r\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\r\n        if (Address.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint","after":"6 value,\r\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\r\n        if (Address.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"eturn true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amount, note);\r\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMRecei","after":"eturn true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amount, note);\r\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMRecei","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"RM_MINT);\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmBurnFrom(from, value, note);\r\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMRecei","after":"RM_MINT);\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmBurnFrom(from, value, note);\r\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMRecei","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function drmMintTo(address to, uint256 amount, string memory note) public","after":" balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function drmMintTo(address to, uint256 amount, string memory note) public","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 v","after":" = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 v","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"et) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the C","after":"et) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the C","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(","after":"ferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"sferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The sizes of \\'to\\' and \\'values\\' arrays are different.\");\r\n        require(length == userIdHash.length, \"The sizes of \\'to\\' and \\'userIdHash\\' arrays are different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(t","after":"sferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러��� 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The sizes of \\'to\\' and \\'values\\' arrays are different.\");\r\n        require(length == userIdHash.length, \"The sizes of \\'to\\' and \\'userIdHash\\' arrays are different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(t","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"       unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!","after":"       unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"| unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) >= lockValues[addr], ","after":"| unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) >= lockValues[addr], ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"rable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string memory note) public onlyOwner {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r","after":"rable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string memory note) public onlyOwner {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"Value만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(address => uint256) p","after":"Value만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(address => uint256) p","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ckValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string not","after":"ckValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string not","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n  ","after":" event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n  ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ort \"./StandardToken.sol\";\r\nimport \"./MultiOwnable.sol\";\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is","after":"ort \"./StandardToken.sol\";\r\nimport \"./MultiOwnable.sol\";\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"dToken, MultiOwnable {\r\n    bool public locked = true;\r\n\r\n    /**\r\n     * dev 락 = TRUE  이여도  거래 가능한 언�","after":"dToken, MultiOwnable {\r\n    bool public locked = true;\r\n\r\n    /**\r\n     * dev 락 = TRUE  이여도  거래 가능한 언�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"�\r\n     */\r\n    mapping(address => bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev - 계정마다 lockValue만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(addres","after":"�\r\n     */\r\n    mapping(address => bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev - 계정마다 lockValue만큼 락이 걸린다.\r\n     * dev - lockValue = 0 > limit이 없음\r\n     */\r\n    mapping(addres","contract":"DoDreamChain","time":0},{"type":"external-function ","before":", note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 발행시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        requi","after":", note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 발행시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        requi","contract":"DoDreamChain","time":0},{"type":"external-function ","before":" = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(addres","after":" = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(addres","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"require(value <= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DR","after":"require(value <= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DR","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTr","after":"\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTr","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"�(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner retur","after":"�(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string calldata note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner retur","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ic returns (bool) {\r\n        return drmDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public re","after":"ic returns (bool) {\r\n        return drmDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public re","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"et is zero address(0). Check the input address.\");\r\n    \r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n  ","after":"et is zero address(0). Check the input address.\");\r\n    \r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n  ","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"s to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value <= balances[from], \"Your balance is insufficie","after":"s to, uint256 amount, string calldata note) public onlyOwner returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value <= balances[from], \"Your balance is insufficie","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경�","after":"        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트�","after":"\n        string calldata note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트�","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"ress.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint8)\", owner, spender, value, receiveType));\r\n            if (callOk) {\r\n                e","after":"ress.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint8)\", owner, spender, value, receiveType));\r\n            if (callOk) {\r\n                e","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"sferedToDRMDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amoun","after":"sferedToDRMDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amoun","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"blic returns (bool ret) {\r\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\r\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function postTransfer(address owner, address spender, address to","after":"blic returns (bool ret) {\r\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\r\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function postTransfer(address owner, address spender, address to","contract":"DoDreamChain","time":0},{"type":"external-function ","before":"6 value,\r\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\r\n        if (Address.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint","after":"6 value,\r\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\r\n        if (Address.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint","contract":"DoDreamChain","time":0}]}
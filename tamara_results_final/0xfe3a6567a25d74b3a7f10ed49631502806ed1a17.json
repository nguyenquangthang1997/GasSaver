{"time":247,"results":[{"type":"external-function ","before":"function matchMarketContractOrders(\n        OrderParam memory takerOrderParam,\n        OrderParam[] memory makerOrderParams,\n        uint256[] memory posFilledAmounts,\n        OrderAddressSet memory orderAddressSet\n    )\n        public\n    {\n        require(canMatchMarketContractOrdersFrom(orderAddressSet.relayer), INVALID_SENDER);\n        require(!isMakerOnly(takerOrderParam.data), MAKER_ONLY_ORDER_CANNOT_BE_TAKER);\n\n        validateMarketContract(orderAddressSet.marketContractAddress);\n        OrderContext memory orderContext = getOrderContext(orderAddressSet, takerOrderParam);\n        matchAndSettle(\n            takerOrderParam,\n            makerOrderParams,\n            posFilledAmounts,\n            orderAddressSet,\n            orderContext\n        );\n    }","after":"function matchMarketContractOrders(\n        OrderParam calldata takerOrderParam,\n        OrderParam[] calldata makerOrderParams,\n        uint256[] calldata posFilledAmounts,\n        OrderAddressSet calldata orderAddressSet\n    )\n        public\n    {\n        require(canMatchMarketContractOrdersFrom(orderAddressSet.relayer), INVALID_SENDER);\n        require(!isMakerOnly(takerOrderParam.data), MAKER_ONLY_ORDER_CANNOT_BE_TAKER);\n\n        validateMarketContract(orderAddressSet.marketContractAddress);\n        OrderContext memory orderContext = getOrderContext(orderAddressSet, takerOrderParam);\n        matchAndSettle(\n            takerOrderParam,\n            makerOrderParams,\n            posFilledAmounts,\n            orderAddressSet,\n            orderContext\n        );\n    }","contract":"MaiProtocol","time":0},{"type":"external-function ","before":"function cancelOrder(Order memory order) public {\n        require(msg.sender == order.trader || msg.sender == order.relayer, INVALID_TRADER);\n\n        bytes32 orderHash = getOrderHash(order);\n        cancelled[orderHash] = true;\n\n        emit Cancel(orderHash);\n    }","after":"function cancelOrder(Order calldata order) public {\n        require(msg.sender == order.trader || msg.sender == order.relayer, INVALID_TRADER);\n\n        bytes32 orderHash = getOrderHash(order);\n        cancelled[orderHash] = true;\n\n        emit Cancel(orderHash);\n    }","contract":"MaiProtocol","time":0}]}
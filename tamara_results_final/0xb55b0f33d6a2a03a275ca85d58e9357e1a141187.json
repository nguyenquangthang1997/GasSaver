{"time":448,"results":[{"type":"external-function ","before":"function lend(\n        bytes32 _id,\n        bytes memory _oracleData,\n        address _cosigner,\n        uint256 _cosignerLimit,\n        bytes memory _cosignerData,\n        bytes memory _callbackData\n    ) public returns (bool) {\n        Request storage request = requests[_id];\n        require(request.open, \"Request is no longer open\");\n        require(request.approved, \"The request is not approved by the borrower\");\n        require(request.expiration > now, \"The request is expired\");\n\n        request.open = false;\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n        require(\n            token.transferFrom(\n                msg.sender,\n                request.borrower,\n                tokens\n            ),\n            \"Error sending tokens to borrower\"\n        );\n\n        emit Lent(_id, msg.sender, tokens);\n\n        // Generate the debt\n        require(\n            debtEngine.create2(\n                Model(request.model),\n                msg.sender,\n                request.oracle,\n                _internalSalt(request),\n                request.loanData\n            ) == _id,\n            \"Error creating the debt\"\n        );\n\n        // Call the cosigner\n        if (_cosigner != address(0)) {\n            uint256 auxSalt = request.salt;\n            request.cosigner = address(uint256(_cosigner) + 2);\n            request.salt = _cosignerLimit; // Risky ?\n            require(\n                Cosigner(_cosigner).requestCosign(\n                    address(this),\n                    uint256(_id),\n                    _cosignerData,\n                    _oracleData\n                ),\n                \"Cosign method returned false\"\n            );\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n            request.salt = auxSalt;\n        }\n\n        // Call the loan callback\n        address callback = request.callback;\n        if (callback != address(0)) {\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n        }\n\n        return true;\n    }","after":"function lend(\n        bytes32 _id,\n        bytes calldata _oracleData,\n        address _cosigner,\n        uint256 _cosignerLimit,\n        bytes calldata _cosignerData,\n        bytes calldata _callbackData\n    ) public returns (bool) {\n        Request storage request = requests[_id];\n        require(request.open, \"Request is no longer open\");\n        require(request.approved, \"The request is not approved by the borrower\");\n        require(request.expiration > now, \"The request is expired\");\n\n        request.open = false;\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n        require(\n            token.transferFrom(\n                msg.sender,\n                request.borrower,\n                tokens\n            ),\n            \"Error sending tokens to borrower\"\n        );\n\n        emit Lent(_id, msg.sender, tokens);\n\n        // Generate the debt\n        require(\n            debtEngine.create2(\n                Model(request.model),\n                msg.sender,\n                request.oracle,\n                _internalSalt(request),\n                request.loanData\n            ) == _id,\n            \"Error creating the debt\"\n        );\n\n        // Call the cosigner\n        if (_cosigner != address(0)) {\n            uint256 auxSalt = request.salt;\n            request.cosigner = address(uint256(_cosigner) + 2);\n            request.salt = _cosignerLimit; // Risky ?\n            require(\n                Cosigner(_cosigner).requestCosign(\n                    address(this),\n                    uint256(_id),\n                    _cosignerData,\n                    _oracleData\n                ),\n                \"Cosign method returned false\"\n            );\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n            request.salt = auxSalt;\n        }\n\n        // Call the loan callback\n        address callback = request.callback;\n        if (callback != address(0)) {\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n        }\n\n        return true;\n    }","contract":"LoanManager","time":0},{"type":"external-function ","before":"function settleLend(\n        bytes memory _requestData,\n        bytes memory _loanData,\n        address _cosigner,\n        uint256 _maxCosignerCost,\n        bytes memory _cosignerData,\n        bytes memory _oracleData,\n        bytes memory _creatorSig,\n        bytes memory _borrowerSig,\n        bytes memory _callbackData\n    ) public returns (bytes32 id) {\n        // Validate request\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n        // Get id\n        uint256 innerSalt;\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n        // Transfer tokens to borrower\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n        require(\n            token.transferFrom(\n                msg.sender,\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n                tokens\n            ),\n            \"Error sending tokens to borrower\"\n        );\n\n        // Generate the debt\n        require(\n            _createDebt(\n                _requestData,\n                _loanData,\n                innerSalt\n            ) == id,\n            \"Error creating debt registry\"\n        );\n\n        emit SettledLend(id, msg.sender, tokens);\n\n        // Save the request info\n        requests[id] = Request({\n            open: false,\n            approved: true,\n            cosigner: _cosigner,\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n            loanData: _loanData,\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n        });\n\n        Request storage request = requests[id];\n\n        // Validate signatures\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n        // Call the cosigner\n        if (_cosigner != address(0)) {\n            request.cosigner = address(uint256(_cosigner) + 2);\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n        }\n\n        // Call the loan callback\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n        if (callback != address(0)) {\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n        }\n    }","after":"function settleLend(\n        bytes calldata _requestData,\n        bytes calldata _loanData,\n        address _cosigner,\n        uint256 _maxCosignerCost,\n        bytes calldata _cosignerData,\n        bytes calldata _oracleData,\n        bytes calldata _creatorSig,\n        bytes calldata _borrowerSig,\n        bytes calldata _callbackData\n    ) public returns (bytes32 id) {\n        // Validate request\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n        // Get id\n        uint256 innerSalt;\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n        // Transfer tokens to borrower\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n        require(\n            token.transferFrom(\n                msg.sender,\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n                tokens\n            ),\n            \"Error sending tokens to borrower\"\n        );\n\n        // Generate the debt\n        require(\n            _createDebt(\n                _requestData,\n                _loanData,\n                innerSalt\n            ) == id,\n            \"Error creating debt registry\"\n        );\n\n        emit SettledLend(id, msg.sender, tokens);\n\n        // Save the request info\n        requests[id] = Request({\n            open: false,\n            approved: true,\n            cosigner: _cosigner,\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n            loanData: _loanData,\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n        });\n\n        Request storage request = requests[id];\n\n        // Validate signatures\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n        // Call the cosigner\n        if (_cosigner != address(0)) {\n            request.cosigner = address(uint256(_cosigner) + 2);\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n        }\n\n        // Call the loan callback\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n        if (callback != address(0)) {\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n        }\n    }","contract":"LoanManager","time":0}]}
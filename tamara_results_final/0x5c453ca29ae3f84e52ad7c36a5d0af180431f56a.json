{"time":263,"results":[{"type":"external-function ","before":"function initialize(\n    uint _initReserve,\n    address _currencyAddress,\n    uint _initGoal,\n    uint _buySlopeNum,\n    uint _buySlopeDen,\n    uint _investmentReserveBasisPoints,\n    string memory _name,\n    string memory _symbol\n  ) public\n  {\n    require(control == address(0), \"ALREADY_INITIALIZED\");\n\n    ERC20Detailed.initialize(_name, _symbol, 18);\n\n    // Set initGoal, which in turn defines the initial state\n    if(_initGoal == 0)\n    {\n      emit StateChange(state, STATE_RUN);\n      state = STATE_RUN;\n    }\n    else\n    {\n      // Math: If this value got too large, the DAT would overflow on sell\n      require(_initGoal < MAX_SUPPLY, \"EXCESSIVE_GOAL\");\n      initGoal = _initGoal;\n    }\n\n    require(_buySlopeNum > 0, \"INVALID_SLOPE_NUM\");\n    require(_buySlopeDen > 0, \"INVALID_SLOPE_DEN\");\n    require(_buySlopeNum < MAX_BEFORE_SQUARE, \"EXCESSIVE_SLOPE_NUM\");\n    require(_buySlopeDen < MAX_BEFORE_SQUARE, \"EXCESSIVE_SLOPE_DEN\");\n    buySlopeNum = _buySlopeNum;\n    buySlopeDen = _buySlopeDen;\n    // 100% or less\n    require(_investmentReserveBasisPoints <= BASIS_POINTS_DEN, \"INVALID_RESERVE\");\n    investmentReserveBasisPoints = _investmentReserveBasisPoints;\n\n    // Set default values (which may be updated using `updateConfig`)\n    minInvestment = 100 ether;\n    beneficiary = msg.sender;\n    control = msg.sender;\n    feeCollector = msg.sender;\n\n    // Save currency\n    currency = IERC20(_currencyAddress);\n\n    // Mint the initial reserve\n    if(_initReserve > 0)\n    {\n      initReserve = _initReserve;\n      _mint(beneficiary, initReserve);\n    }\n  }","after":"function initialize(\n    uint _initReserve,\n    address _currencyAddress,\n    uint _initGoal,\n    uint _buySlopeNum,\n    uint _buySlopeDen,\n    uint _investmentReserveBasisPoints,\n    string calldata _name,\n    string calldata _symbol\n  ) public\n  {\n    require(control == address(0), \"ALREADY_INITIALIZED\");\n\n    ERC20Detailed.initialize(_name, _symbol, 18);\n\n    // Set initGoal, which in turn defines the initial state\n    if(_initGoal == 0)\n    {\n      emit StateChange(state, STATE_RUN);\n      state = STATE_RUN;\n    }\n    else\n    {\n      // Math: If this value got too large, the DAT would overflow on sell\n      require(_initGoal < MAX_SUPPLY, \"EXCESSIVE_GOAL\");\n      initGoal = _initGoal;\n    }\n\n    require(_buySlopeNum > 0, \"INVALID_SLOPE_NUM\");\n    require(_buySlopeDen > 0, \"INVALID_SLOPE_DEN\");\n    require(_buySlopeNum < MAX_BEFORE_SQUARE, \"EXCESSIVE_SLOPE_NUM\");\n    require(_buySlopeDen < MAX_BEFORE_SQUARE, \"EXCESSIVE_SLOPE_DEN\");\n    buySlopeNum = _buySlopeNum;\n    buySlopeDen = _buySlopeDen;\n    // 100% or less\n    require(_investmentReserveBasisPoints <= BASIS_POINTS_DEN, \"INVALID_RESERVE\");\n    investmentReserveBasisPoints = _investmentReserveBasisPoints;\n\n    // Set default values (which may be updated using `updateConfig`)\n    minInvestment = 100 ether;\n    beneficiary = msg.sender;\n    control = msg.sender;\n    feeCollector = msg.sender;\n\n    // Save currency\n    currency = IERC20(_currencyAddress);\n\n    // Mint the initial reserve\n    if(_initReserve > 0)\n    {\n      initReserve = _initReserve;\n      _mint(beneficiary, initReserve);\n    }\n  }","contract":"DecentralizedAutonomousTrust","time":0},{"type":"external-function ","before":"function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }","after":"function initialize(string calldata name, string calldata symbol, uint8 decimals) public initializer {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }","contract":"DecentralizedAutonomousTrust","time":0}]}
{"time":132,"results":[{"type":"state-data-arrangement ","before":"\n ambassadorAccumulatedQuota_[_cu\nrAddress] = SafeMath.add(amba\nrAccumulatedQuota_[_customerAddress]\nountOfEthereum);\n        \n            // \nte\n            _;\n        } else {\n            // in case the e\ncount drops low, the ambassador phase won't reinitiate\n            o\nbassadors = true;\n            _;    \n       \n=======\n    =            EVENTS            \n*/\n    event onTokenPurchase(\n        address i\nd customerAddress,\n        uint256 incomingEthereum,\n      \nt256 tokensMinted,\n        address indexed referredBy\nndexed customerAddress,\n        uint256 ethereumReinveste\n      uint256 tokensMinted\n    );\n    \n    event onWit\n(\n        address indexed customerAddress,\n    \nint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Trans\n        address indexed from,\n    \nddress indexed to,\n        uint25\n=\n    =            CONFIGURABLES            =\n \nuint8 constant internal dividendFee","after":" ambassadorAccumulatedQuota_[_cu\nrAddress] = SafeMath.add(amba\nte\n            _;\n        } else {\n            // in case the e\ncount drops low, the ambassador phase won't reinitiate\n            o\nbassadors = true;\n            _;    \n       \n=======\n    =            EVENTS            \n*/\n    event onTokenPurchase(\n        address i\nd customerAddress,\n        uint256 incomingEthereum,\n      \nt256 tokensMinted,\n        address indexed referredBy\nndexed customerAddress,\n        uint256 ethereumReinveste\n      uint256 tokensMinted\n    );\n    \n    event onWit\n(\n        address indexed customerAddress,\n    \nint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Trans\n        address indexed from,\n    \nddress indexed to,\n        uint25\n=\n    =            CONFIGURABLES            =\n \nrAccumulatedQuota_[_customerAddress]\nountOfEthereum);\n        \n            // \nuint8 constant internal dividendFee\n","contract":"Hourglass","time":0}]}
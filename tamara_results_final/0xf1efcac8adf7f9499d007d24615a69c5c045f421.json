{"time":210,"results":[{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":1},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function buySXPMultiple(address[] memory to, uint[] memory amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","after":"function buySXPMultiple(address[] calldata to, uint[] calldata amount) public onlyAdmin returns (bool success) {\r\n        uint total = 0;\r\n        for (uint i = 0; i < amount.length; i ++) {\r\n            total = total.add(amount[i]);\r\n        }\r\n\r\n        require(getBalance() >= total, 'not enough reserve balance');\r\n\r\n        for (uint j = 0; j < to.length; j ++) {\r\n            require(to[j] != address(0), 'invalid address');\r\n            if (!token.transfer(to[j], amount[j])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","contract":"SwipeNetwork","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }","contract":"SwipeToken","time":0}]}
{"time":402,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMint(\n      address[] memory beneficiaries,\n      uint[] memory types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","after":"function batchMint(\n      address[] calldata beneficiaries,\n      uint[] calldata types\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length);\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        uint tokenId = mint(beneficiaries[i], types[i]);\n        tokens[i] = tokenId;\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0},{"type":"external-function ","before":"function batchMintAllTypes(\n      address[] memory beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","after":"function batchMintAllTypes(\n      address[] calldata beneficiaries\n    ) public returns (uint[] memory) {\n      uint[] memory tokens = new uint[](beneficiaries.length*tokenTypes.length);\n      uint index = 0;\n      for (uint i = 0; i < beneficiaries.length; i++) {\n        for (uint j = 0; j < tokenTypes.length; j++) {\n          uint tokenId = mint(beneficiaries[i], tokenTypes[j]);\n          tokens[index] = tokenId;\n          index++;\n        }\n      }\n      return tokens;\n    }","contract":"XYProducts721","time":0}]}
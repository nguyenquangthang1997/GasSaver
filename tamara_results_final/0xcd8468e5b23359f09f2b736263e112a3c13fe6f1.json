{"time":77,"results":[{"type":"external-function ","before":"   function updateScore(bytes memory signature, address requestor, address userAddr, uint256 nonce, uint32 _score, bytes32 IPFSHash)\n    public hasValidProof(signature, userAddr, nonce) onlyScoreController\n    {\n        require(colendiToken.transferFrom(requestor, address(this), queryCost), \"Failed Token Transfer\");\n        bytes32 queryID = keccak256(abi.encodePacked(userAddr, nonce));\n        scoreQueries[queryID].requestor = requestor;\n        scoreQueries[queryID].user = userAddr;\n        scoreQueries[queryID].score = _score;\n        scoreQueries[queryID].updateTime = now;\n        scoreQueries[queryID].IPFSHash = IPFSHash;\n        currentNonce[userAddr] = nonce + 1;\n        emit LogScoreUpdate(queryID);\n\n  ","after":"   function updateScore(bytes calldata signature, address requestor, address userAddr, uint256 nonce, uint32 _score, bytes32 IPFSHash)\n    public hasValidProof(signature, userAddr, nonce) onlyScoreController\n    {\n        require(colendiToken.transferFrom(requestor, address(this), queryCost), \"Failed Token Transfer\");\n        bytes32 queryID = keccak256(abi.encodePacked(userAddr, nonce));\n        scoreQueries[queryID].requestor = requestor;\n        scoreQueries[queryID].user = userAddr;\n        scoreQueries[queryID].score = _score;\n        scoreQueries[queryID].updateTime = now;\n        scoreQueries[queryID].IPFSHash = IPFSHash;\n        currentNonce[userAddr] = nonce + 1;\n        emit LogScoreUpdate(queryID);\n\n  ","contract":"ColendiScore","time":0},{"type":"external-function ","before":"   function updateOwnScore(bytes memory signature, address userAddr, uint256 nonce, uint32 _score)\n    public hasValidProof(signature, userAddr, nonce) onlyScoreController\n    {\n        require(colendiToken.transferFrom(userAddr, address(this), queryCost), \"Failed Token Transfer\");\n        bytes32 queryID = keccak256(abi.encodePacked(userAddr, nonce));\n        ownScoreQueries[queryID].updateTime = now;\n        ownScoreQueries[queryID].user = userAddr;\n        ownScoreQueries[queryID].score = _score;\n        currentNonce[userAddr] = nonce + 1;\n        emit LogScoreUpdate(queryID);\n  ","after":"   function updateOwnScore(bytes calldata signature, address userAddr, uint256 nonce, uint32 _score)\n    public hasValidProof(signature, userAddr, nonce) onlyScoreController\n    {\n        require(colendiToken.transferFrom(userAddr, address(this), queryCost), \"Failed Token Transfer\");\n        bytes32 queryID = keccak256(abi.encodePacked(userAddr, nonce));\n        ownScoreQueries[queryID].updateTime = now;\n        ownScoreQueries[queryID].user = userAddr;\n        ownScoreQueries[queryID].score = _score;\n        currentNonce[userAddr] = nonce + 1;\n        emit LogScoreUpdate(queryID);\n  ","contract":"ColendiScore","time":0}]}
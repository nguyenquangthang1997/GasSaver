{"time":169,"results":[{"type":"constant-restrict-modification  ","before":" bytes32 FILE = \"Getters\"","after":" bytes32 constant FILE = \"Getters\"","contract":"SoloMargin","time":0},{"type":"external-function ","before":" function callFunction(\n        address /* sender */,\n        Account.Info memory account,\n        bytes memory data\n    )\n        public\n        onlySolo(msg.sender)\n    {\n        CallFunctionType callType = abi.decode(data, (CallFunctionType));\n        if (callType == CallFunctionType.SetExpiry) {\n            callFunctionSetExpiry(account.owner, data);\n        } else {\n            callFunctionSetApproval(account.owner, data);\n        }\n    ","after":" function callFunction(\n        address /* sender */,\n        Account.Info calldata account,\n        bytes calldata data\n    )\n        public\n        onlySolo(msg.sender)\n    {\n        CallFunctionType callType = abi.decode(data, (CallFunctionType));\n        if (callType == CallFunctionType.SetExpiry) {\n            callFunctionSetExpiry(account.owner, data);\n        } else {\n            callFunctionSetApproval(account.owner, data);\n        }\n    ","contract":"ExpiryV2","time":0},{"type":"external-function ","before":" function getTradeCost(\n        uint256 inputMarketId,\n        uint256 outputMarketId,\n        Account.Info memory makerAccount,\n        Account.Info memory /* takerAccount */,\n        Types.Par memory oldInputPar,\n        Types.Par memory newInputPar,\n        Types.Wei memory inputWei,\n        bytes memory data\n    )\n        public\n        onlySolo(msg.sender)\n        returns (Types.AssetAmount memory)\n    {\n        // return zero if input amount is zero\n        if (inputWei.isZero()) {\n            return Types.AssetAmount({\n                sign: true,\n                denomination: Types.AssetDenomination.Par,\n                ref: Types.AssetReference.Delta,\n                value: 0\n            });\n        }\n\n        (uint256 owedMarketId, uint32 maxExpiry) = abi.decode(data, (uint256, uint32));\n\n        uint32 expiry = getExpiry(makerAccount, owedMarketId);\n\n        // validate expiry\n        Require.that(\n            expiry != 0,\n            FILE,\n            \"Expiry not set\",\n            makerAccount.owner,\n            makerAccount.number,\n            owedMarketId\n        );\n        Require.that(\n            expiry <= Time.currentTime(),\n            FILE,\n            \"Borrow not yet expired\",\n            expiry\n        );\n        Require.that(\n            expiry <= maxExpiry,\n            FILE,\n            \"Expiry past maxExpiry\",\n            expiry\n        );\n\n        return getTradeCostInternal(\n            inputMarketId,\n            outputMarketId,\n            makerAccount,\n            oldInputPar,\n            newInputPar,\n            inputWei,\n            owedMarketId,\n            expiry\n        );\n    ","after":" function getTradeCost(\n        uint256 inputMarketId,\n        uint256 outputMarketId,\n        Account.Info calldata makerAccount,\n        Account.Info calldata /* takerAccount */,\n        Types.Par calldata oldInputPar,\n        Types.Par calldata newInputPar,\n        Types.Wei calldata inputWei,\n        bytes calldata data\n    )\n        public\n        onlySolo(msg.sender)\n        returns (Types.AssetAmount memory)\n    {\n        // return zero if input amount is zero\n        if (inputWei.isZero()) {\n            return Types.AssetAmount({\n                sign: true,\n                denomination: Types.AssetDenomination.Par,\n                ref: Types.AssetReference.Delta,\n                value: 0\n            });\n        }\n\n        (uint256 owedMarketId, uint32 maxExpiry) = abi.decode(data, (uint256, uint32));\n\n        uint32 expiry = getExpiry(makerAccount, owedMarketId);\n\n        // validate expiry\n        Require.that(\n            expiry != 0,\n            FILE,\n            \"Expiry not set\",\n            makerAccount.owner,\n            makerAccount.number,\n            owedMarketId\n        );\n        Require.that(\n            expiry <= Time.currentTime(),\n            FILE,\n            \"Borrow not yet expired\",\n            expiry\n        );\n        Require.that(\n            expiry <= maxExpiry,\n            FILE,\n            \"Expiry past maxExpiry\",\n            expiry\n        );\n\n        return getTradeCostInternal(\n            inputMarketId,\n            outputMarketId,\n            makerAccount,\n            oldInputPar,\n            newInputPar,\n            inputWei,\n            owedMarketId,\n            expiry\n        );\n    ","contract":"ExpiryV2","time":0}]}
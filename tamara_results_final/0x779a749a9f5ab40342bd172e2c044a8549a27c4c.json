{"time":110,"results":[{"type":"state-data-arrangement ","before":"\nmapping (address => uint256) private _balances;\nmapping (address => mapping (address => uint256)) private _allowed;\nstring constant tokenName = \"Tanzanite\";\nstring constant tokenSymbol = \"TGEM\";\nuint8  constant tokenDecimals = 18;\nuint256 _totalSupply = 0;\naddress public contractOwner;\nuint256 public fullUnitsStaked_total = 0;\nmapping (address => bool) public excludedFromStaking;\nuint256 _totalRewardsPerUnit = 0;\nmapping (address => uint256) private _totalRewardsPerUnit_positions;\nmapping (address => uint256) private _savedRewards;","after":"mapping (address => uint256) private _balances;\nmapping (address => mapping (address => uint256)) private _allowed;\nstring constant tokenName = \"Tanzanite\";\nstring constant tokenSymbol = \"TGEM\";\nuint256 _totalSupply = 0;\nuint256 public fullUnitsStaked_total = 0;\nmapping (address => bool) public excludedFromStaking;\nuint256 _totalRewardsPerUnit = 0;\nmapping (address => uint256) private _totalRewardsPerUnit_positions;\nmapping (address => uint256) private _savedRewards;\naddress public contractOwner;\nuint8  constant tokenDecimals = 18;\n","contract":"Tanzanite","time":0},{"type":"external-function ","before":"function multiTransfer(address[] memory receivers, uint256[] memory values) public\n    {\n        require(receivers.length == values.length);\n        for(uint256 i = 0; i < receivers.length; i++)\n            _executeTransfer(msg.sender, receivers[i], values[i]);\n    }","after":"function multiTransfer(address[] calldata receivers, uint256[] calldata values) public\n    {\n        require(receivers.length == values.length);\n        for(uint256 i = 0; i < receivers.length; i++)\n            _executeTransfer(msg.sender, receivers[i], values[i]);\n    }","contract":"Tanzanite","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) \n    {\n        _allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public returns (bool success) \n    {\n        _allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }","contract":"Tanzanite","time":0}]}
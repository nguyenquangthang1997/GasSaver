{"time":179,"results":[{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":1},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":2},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":2},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":0},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":0},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":0},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","after":"function payService(string calldata service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","after":"function sendTokens(address[] calldata _receivers, uint[] calldata _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }","contract":"Token","time":0},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":0},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":0},{"type":"constant-restrict-modification  ","before":"uint private lockTime = 2 * 365 days;","after":"uint private constant lockTime = 2 * 365 days;","contract":"Token","time":0}]}
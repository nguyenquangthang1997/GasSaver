{"time":95,"results":[{"type":"state-data-arrangement ","before":"\nfaceId) internal {\n        require(interfaceId != 0xff\nf);\n        _supportedInterfaces[interfaceId] = t\n    }\n}\n\npragma solidity ^0.5.0;\n\ncontract ERC721 is \n5, IERC721 {\n    using SafeMath for uint256;\n    using \nss for address;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02\n mapping (uint256 => address) private _tokenOwner;\n    map","after":"f);\n        _supportedInterfaces[interfaceId] = t\n    }\n}\n\npragma solidity ^0.5.0;\n\ncontract ERC721 is \n5, IERC721 {\n    using SafeMath for uint256;\n    using \nss for address;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02\nfaceId) internal {\n        require(interfaceId != 0xff\n mapping (uint256 => address) private _tokenOwner;\n    map\n","contract":"ERC721","time":0},{"type":"external-function ","before":"uctor (string memory _name, string memory _symbol) public\n        ERC721Mintable()\n        ERC721Full(_name, _symbol){\n    }\n\n    function transfer(address _to, uint256 _tokenId) public {\n        sa","after":"uctor (string calldata _name, string memory _symbol) public\n        ERC721Mintable()\n        ERC721Full(_name, _symbol){\n    }\n\n    function transfer(address _to, uint256 _tokenId) public {\n        sa","contract":"_1000eye","time":0},{"type":"external-function ","before":"sferFrom(msg.sender, _to, _tokenId);\n    }\n\n    function transferAll(address _to, uint256[] memory _tokenId) public {\n        for (uint i = 0; i < _tokenId.length; i++) {\n            ","after":"sferFrom(msg.sender, _to, _tokenId);\n    }\n\n    function transferAll(address _to, uint256[] memory _tokenId) public {\n        for (uint i = 0; i < _tokenId.length; i++) {\n            ","contract":"_1000eye","time":0}]}
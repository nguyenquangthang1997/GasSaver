{"time":334,"results":[{"type":"external-function ","before":"   require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _ip)\n        public\n        payable\n        isHuman()\n        isOpen()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1*ethWei && msg.value <= env.maxCoin()*ethWei, \"Coin Must Between 1 to maxCoin\");\n\n        _checkIsCreateNode(msg.sender, _code, _pCode);\n\n        uint8 level = uint8(env.getLv(msg.value));\n        uint8 queueLevel = uint8(env.getQueueLv(msg.value));\n        (address userAddress,,,,,uint frozenCoin,uint freeCoin,,,,,) = db.getUserMapping(msg.sender);\n        if(userAddress == address(0)) {\n            db.createUser(msg.sender, msg.value, 0, level, queueLevel, uint32(now)","after":"   require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _ip)\n        public\n        payable\n        isHuman()\n        isOpen()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1*ethWei && msg.value <= env.maxCoin()*ethWei, \"Coin Must Between 1 to maxCoin\");\n\n        _checkIsCreateNode(msg.sender, _code, _pCode);\n\n        uint8 level = uint8(env.getLv(msg.value));\n        uint8 queueLevel = uint8(env.getQueueLv(msg.value));\n        (address userAddress,,,,,uint frozenCoin,uint freeCoin,,,,,) = db.getUserMapping(msg.sender);\n        if(userAddress == address(0)) {\n            db.createUser(msg.sender, msg.value, 0, level, queueLevel, uint32(now)","contract":"Ev5","time":0},{"type":"external-function ","before":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","after":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","contract":"Ev5","time":0},{"type":"external-function ","before":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","after":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","contract":"Ev5","time":0},{"type":"external-function ","before":"(string memory _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","after":"(string calldata _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","contract":"Ev5","time":0},{"type":"external-function ","before":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","after":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","contract":"Ev5","time":0},{"type":"external-function ","before":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","after":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","contract":"Ev5","time":0},{"type":"external-function ","before":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","after":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","contract":"Ev5","time":0},{"type":"external-function ","before":"4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _i","after":"4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _i","contract":"Ev5","time":0},{"type":"external-function ","before":"ring _pCode, uint indexed _oid, uint _value, uint32 time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint32 time);\n\n    //base param setting\n    uint ethWei = 1 ether;\n    bool private reEntrancyMutex = false;\n    address[3] private _addrs;//_dAddr0,_envAddr1,feeAddr3\n\n    //platform setting\n    bool private _platformPower = true;\n    uint private _openTime = 0;\n\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //the content of contract is Beginning\n    constructor () public {\n        _addrs = [0xDe10dC3fE1303f09AB56F1e717a2d3993df35690, 0x0d2bD36Ecd9EBB959c8B1C5E87946eEd43c82dd1, 0x9732D32F4517A0A238441EcA4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n","after":"ring _pCode, uint indexed _oid, uint _value, uint32 time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint32 time);\n\n    //base param setting\n    uint ethWei = 1 ether;\n    bool private reEntrancyMutex = false;\n    address[3] private _addrs;//_dAddr0,_envAddr1,feeAddr3\n\n    //platform setting\n    bool private _platformPower = true;\n    uint private _openTime = 0;\n\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //the content of contract is Beginning\n    constructor () public {\n        _addrs = [0xDe10dC3fE1303f09AB56F1e717a2d3993df35690, 0x0d2bD36Ecd9EBB959c8B1C5E87946eEd43c82dd1, 0x9732D32F4517A0A238441EcA4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":"8,uint,uint,uint,uint,uint,uint,uint);\n    ","after":"8,uint,uint,uint,uint,uint,uint,uint);\n    ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"Coin(uint _coin, uint ","after":"Coin(uint _coin, uint ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"c4) public;\n    function updateLockCoin(add","after":"c4) public;\n    function updateLockCoin(add","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"nt8 _c2, uint8 _c3) pu","after":"nt8 _c2, uint8 _c3) pu","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"e) external view returns(uint);\n}\ncontract ","after":"e) external view returns(uint);\n}\ncontract ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"updateCoinLevel(addres","after":"updateCoinLevel(addres","contract":"Ev5","time":1},{"type":"external-function ","before":"   require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _ip)\n        public\n        payable\n        isHuman()\n        isOpen()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1*ethWei && msg.value <= env.maxCoin()*ethWei, \"Coin Must Between 1 to maxCoin\");\n\n        _checkIsCreateNode(msg.sender, _code, _pCode);\n\n        uint8 level = uint8(env.getLv(msg.value));\n        uint8 queueLevel = uint8(env.getQueueLv(msg.value));\n        (address userAddress,,,,,uint frozenCoin,uint freeCoin,,,,,) = db.getUserMapping(msg.sender);\n        if(userAddress == address(0)) {\n            db.createUser(msg.sender, msg.value, 0, level, queueLevel, uint32(now)","after":"   require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _ip)\n        public\n        payable\n        isHuman()\n        isOpen()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1*ethWei && msg.value <= env.maxCoin()*ethWei, \"Coin Must Between 1 to maxCoin\");\n\n        _checkIsCreateNode(msg.sender, _code, _pCode);\n\n        uint8 level = uint8(env.getLv(msg.value));\n        uint8 queueLevel = uint8(env.getQueueLv(msg.value));\n        (address userAddress,,,,,uint frozenCoin,uint freeCoin,,,,,) = db.getUserMapping(msg.sender);\n        if(userAddress == address(0)) {\n            db.createUser(msg.sender, msg.value, 0, level, queueLevel, uint32(now)","contract":"Ev5","time":0},{"type":"external-function ","before":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","after":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","contract":"Ev5","time":0},{"type":"external-function ","before":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","after":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","contract":"Ev5","time":0},{"type":"external-function ","before":"(string memory _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","after":"(string calldata _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","contract":"Ev5","time":0},{"type":"external-function ","before":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","after":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","contract":"Ev5","time":0},{"type":"external-function ","before":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","after":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","contract":"Ev5","time":0},{"type":"external-function ","before":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","after":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","contract":"Ev5","time":0},{"type":"external-function ","before":"4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _i","after":"4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _i","contract":"Ev5","time":0},{"type":"external-function ","before":"ring _pCode, uint indexed _oid, uint _value, uint32 time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint32 time);\n\n    //base param setting\n    uint ethWei = 1 ether;\n    bool private reEntrancyMutex = false;\n    address[3] private _addrs;//_dAddr0,_envAddr1,feeAddr3\n\n    //platform setting\n    bool private _platformPower = true;\n    uint private _openTime = 0;\n\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //the content of contract is Beginning\n    constructor () public {\n        _addrs = [0xDe10dC3fE1303f09AB56F1e717a2d3993df35690, 0x0d2bD36Ecd9EBB959c8B1C5E87946eEd43c82dd1, 0x9732D32F4517A0A238441EcA4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n","after":"ring _pCode, uint indexed _oid, uint _value, uint32 time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint32 time);\n\n    //base param setting\n    uint ethWei = 1 ether;\n    bool private reEntrancyMutex = false;\n    address[3] private _addrs;//_dAddr0,_envAddr1,feeAddr3\n\n    //platform setting\n    bool private _platformPower = true;\n    uint private _openTime = 0;\n\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //the content of contract is Beginning\n    constructor () public {\n        _addrs = [0xDe10dC3fE1303f09AB56F1e717a2d3993df35690, 0x0d2bD36Ecd9EBB959c8B1C5E87946eEd43c82dd1, 0x9732D32F4517A0A238441EcA4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":"8,uint,uint,uint,uint,uint,uint,uint);\n    ","after":"8,uint,uint,uint,uint,uint,uint,uint);\n    ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"Coin(uint _coin, uint ","after":"Coin(uint _coin, uint ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"c4) public;\n    function updateLockCoin(add","after":"c4) public;\n    function updateLockCoin(add","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"nt8 _c2, uint8 _c3) pu","after":"nt8 _c2, uint8 _c3) pu","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"e) external view returns(uint);\n}\ncontract ","after":"e) external view returns(uint);\n}\ncontract ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"updateCoinLevel(addres","after":"updateCoinLevel(addres","contract":"Ev5","time":1},{"type":"external-function ","before":"   require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _ip)\n        public\n        payable\n        isHuman()\n        isOpen()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1*ethWei && msg.value <= env.maxCoin()*ethWei, \"Coin Must Between 1 to maxCoin\");\n\n        _checkIsCreateNode(msg.sender, _code, _pCode);\n\n        uint8 level = uint8(env.getLv(msg.value));\n        uint8 queueLevel = uint8(env.getQueueLv(msg.value));\n        (address userAddress,,,,,uint frozenCoin,uint freeCoin,,,,,) = db.getUserMapping(msg.sender);\n        if(userAddress == address(0)) {\n            db.createUser(msg.sender, msg.value, 0, level, queueLevel, uint32(now)","after":"   require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _ip)\n        public\n        payable\n        isHuman()\n        isOpen()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1*ethWei && msg.value <= env.maxCoin()*ethWei, \"Coin Must Between 1 to maxCoin\");\n\n        _checkIsCreateNode(msg.sender, _code, _pCode);\n\n        uint8 level = uint8(env.getLv(msg.value));\n        uint8 queueLevel = uint8(env.getQueueLv(msg.value));\n        (address userAddress,,,,,uint frozenCoin,uint freeCoin,,,,,) = db.getUserMapping(msg.sender);\n        if(userAddress == address(0)) {\n            db.createUser(msg.sender, msg.value, 0, level, queueLevel, uint32(now)","contract":"Ev5","time":0},{"type":"external-function ","before":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","after":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","contract":"Ev5","time":0},{"type":"external-function ","before":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","after":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","contract":"Ev5","time":0},{"type":"external-function ","before":"(string memory _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","after":"(string calldata _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","contract":"Ev5","time":0},{"type":"external-function ","before":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","after":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","contract":"Ev5","time":0},{"type":"external-function ","before":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","after":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","contract":"Ev5","time":0},{"type":"external-function ","before":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","after":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","contract":"Ev5","time":0},{"type":"external-function ","before":"4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _i","after":"4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function _checkIsCreateNode(address _owner, string memory _code, string memory _pCode)\n        private\n    {\n        if(db.getNodeCounter(_owner) == 0){\n            require(!compareStr(_code, \"\") && db.getCodeMapping(_code) == address(0), \"Empty Code Or Code Existed\");\n            require(compareStr(_pCode, db.sysCode()) || db.getCodeMapping(_pCode) != address(0),\"Parent User Is Not Exist\");\n            require(db.getCodeMapping(_pCode) != _owner, \"Parent User Is Not Owner\");\n            //create node first\n            db.createNode(_owner, _code, _pCode, 0);\n        }\n    }\n    function invest(string memory _code, string memory _pCode, string memory _i","contract":"Ev5","time":0},{"type":"external-function ","before":"ring _pCode, uint indexed _oid, uint _value, uint32 time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint32 time);\n\n    //base param setting\n    uint ethWei = 1 ether;\n    bool private reEntrancyMutex = false;\n    address[3] private _addrs;//_dAddr0,_envAddr1,feeAddr3\n\n    //platform setting\n    bool private _platformPower = true;\n    uint private _openTime = 0;\n\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //the content of contract is Beginning\n    constructor () public {\n        _addrs = [0xDe10dC3fE1303f09AB56F1e717a2d3993df35690, 0x0d2bD36Ecd9EBB959c8B1C5E87946eEd43c82dd1, 0x9732D32F4517A0A238441EcA4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n","after":"ring _pCode, uint indexed _oid, uint _value, uint32 time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint32 time);\n\n    //base param setting\n    uint ethWei = 1 ether;\n    bool private reEntrancyMutex = false;\n    address[3] private _addrs;//_dAddr0,_envAddr1,feeAddr3\n\n    //platform setting\n    bool private _platformPower = true;\n    uint private _openTime = 0;\n\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //the content of contract is Beginning\n    constructor () public {\n        _addrs = [0xDe10dC3fE1303f09AB56F1e717a2d3993df35690, 0x0d2bD36Ecd9EBB959c8B1C5E87946eEd43c82dd1, 0x9732D32F4517A0A238441EcA4E45C1584A832fE0];\n        db = DB(_addrs[0]);\n        env = Vendor(_addrs[1]);\n        _openTime = uint32(now);\n    }\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_openTime > 0 && _platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":"8,uint,uint,uint,uint,uint,uint,uint);\n    ","after":"8,uint,uint,uint,uint,uint,uint,uint);\n    ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"Coin(uint _coin, uint ","after":"Coin(uint _coin, uint ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"c4) public;\n    function updateLockCoin(add","after":"c4) public;\n    function updateLockCoin(add","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"nt8 _c2, uint8 _c3) pu","after":"nt8 _c2, uint8 _c3) pu","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"e) external view returns(uint);\n}\ncontract ","after":"e) external view returns(uint);\n}\ncontract ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"updateCoinLevel(addres","after":"updateCoinLevel(addres","contract":"Ev5","time":1}]}
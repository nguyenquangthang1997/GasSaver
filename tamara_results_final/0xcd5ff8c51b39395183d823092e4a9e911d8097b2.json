{"time":124,"results":[{"type":"external-function ","before":"function sendTokensToList(address[] memory recipients, uint256 amount) public onlyAdmin {\n        require(recipients.length > 0);\n        for (uint256 i = 0; i < recipients.length; i++) {\n            _sendTokens(recipients[i], amount);\n        }\n        _tokensPurchased = _tokensPurchased.add(amount.mul(recipients.length));\n    }","after":"function sendTokensToList(address[] calldata recipients, uint256 amount) public onlyAdmin {\n        require(recipients.length > 0);\n        for (uint256 i = 0; i < recipients.length; i++) {\n            _sendTokens(recipients[i], amount);\n        }\n        _tokensPurchased = _tokensPurchased.add(amount.mul(recipients.length));\n    }","contract":"Crowdsale","time":1},{"type":"external-function ","before":"function sendTokensPerWeiToList(address[] memory recipients, uint256 weiAmount) public onlyAdmin {\n         require(recipients.length > 0);\n         for (uint256 i = 0; i < recipients.length; i++) {\n             _sendTokens(recipients[i], weiToTokens(weiAmount));\n         }\n         _tokensPurchased = _tokensPurchased.add(weiToTokens(weiAmount).mul(recipients.length));\n     }","after":"function sendTokensPerWeiToList(address[] calldata recipients, uint256 weiAmount) public onlyAdmin {\n         require(recipients.length > 0);\n         for (uint256 i = 0; i < recipients.length; i++) {\n             _sendTokens(recipients[i], weiToTokens(weiAmount));\n         }\n         _tokensPurchased = _tokensPurchased.add(weiToTokens(weiAmount).mul(recipients.length));\n     }","contract":"Crowdsale","time":0},{"type":"external-function ","before":"function addListToWhitelisted(address[] memory accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            addWhitelisted(accounts[i]);\n        }\n    }","after":"function addListToWhitelisted(address[] calldata accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            addWhitelisted(accounts[i]);\n        }\n    }","contract":"Crowdsale","time":0},{"type":"external-function ","before":"function removeListWhitelisted(address[] memory accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            removeWhitelisted(accounts[i]);\n        }\n    }","after":"function removeListWhitelisted(address[] calldata accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            removeWhitelisted(accounts[i]);\n        }\n    }","contract":"Crowdsale","time":0},{"type":"external-function ","before":"function addListToEnlisted(address[] memory accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            addEnlisted(accounts[i]);\n        }\n    }","after":"function addListToEnlisted(address[] calldata accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            addEnlisted(accounts[i]);\n        }\n    }","contract":"Crowdsale","time":0},{"type":"external-function ","before":"function removeListEnlisted(address[] memory accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            removeEnlisted(accounts[i]);\n        }\n    }","after":"function removeListEnlisted(address[] calldata accounts) public {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            removeEnlisted(accounts[i]);\n        }\n    }","contract":"Crowdsale","time":0}]}
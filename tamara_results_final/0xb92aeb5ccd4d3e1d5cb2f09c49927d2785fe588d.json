{"time":101,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function mintAndSell(MintableToken token, string memory tokenUri, uint256 price) public {\n        uint256 tokenId = token.mint(msg.sender, address(this), tokenUri);\n        bytes32 key = getPositionKey(token, tokenId);\n        positions[key] = Position(msg.sender, price);\n        emit Sell(key, msg.sender, address(token), tokenId, price);\n    }","after":"function mintAndSell(MintableToken token, string calldata tokenUri, uint256 price) public {\n        uint256 tokenId = token.mint(msg.sender, address(this), tokenUri);\n        bytes32 key = getPositionKey(token, tokenId);\n        positions[key] = Position(msg.sender, price);\n        emit Sell(key, msg.sender, address(token), tokenId, price);\n    }","contract":"TokenSale","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"TokenSale","time":0}]}
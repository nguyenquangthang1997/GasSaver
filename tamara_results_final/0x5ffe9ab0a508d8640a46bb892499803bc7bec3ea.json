{"time":48,"results":[{"type":"external-function ","before":"function initialize(address _logic, address _admin, bytes memory _data) public payable {\n    require(_implementation() == address(0));\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(_admin);\n  }","after":"function initialize(address _logic, address _admin, bytes calldata _data) public payable {\n    require(_implementation() == address(0));\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(_admin);\n  }","contract":"InitializableAdminUpgradeabilityProxy","time":0},{"type":"external-function ","before":"function initialize(address _logic, bytes memory _data) public payable {\n    require(_implementation() == address(0));\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if(_data.length > 0) {\n      (bool success,) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }","after":"function initialize(address _logic, bytes calldata _data) public payable {\n    require(_implementation() == address(0));\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if(_data.length > 0) {\n      (bool success,) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }","contract":"InitializableAdminUpgradeabilityProxy","time":0},{"type":"external-function ","before":"\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n    bytes20 targetBytes = bytes20(_logic);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(clone, 0x14), targetBytes)\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      proxy := create(0, clone, 0x37)\n    }\n    \n    emit ProxyCreated(address(proxy));\n\n    if(_data.length > 0) {\n      (bool success,) = proxy.call(_data);\n      require(success);\n    }    \n","after":"\n  function deployMinimal(address _logic, bytes calldata _data) public returns (address proxy) {\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n    bytes20 targetBytes = bytes20(_logic);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(clone, 0x14), targetBytes)\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      proxy := create(0, clone, 0x37)\n    }\n    \n    emit ProxyCreated(address(proxy));\n\n    if(_data.length > 0) {\n      (bool success,) = proxy.call(_data);\n      require(success);\n    }    \n","contract":"ProxyFactory","time":0},{"type":"external-function ","before":"\n  function deploy(uint256 _salt, address _logic, address _admin, bytes memory _data) public returns (address) {\n    return _deployProxy(_salt, _logic, _admin, _data, msg.sender);\n","after":"\n  function deploy(uint256 _salt, address _logic, address _admin, bytes calldata _data) public returns (address) {\n    return _deployProxy(_salt, _logic, _admin, _data, msg.sender);\n","contract":"ProxyFactory","time":0},{"type":"external-function ","before":"\n  function deploySigned(uint256 _salt, address _logic, address _admin, bytes memory _data, bytes memory _signature) public returns (address) {\n    address signer = getSigner(_salt, _logic, _admin, _data, _signature);\n    require(signer != address(0), \"Invalid signature\");\n    return _deployProxy(_salt, _logic, _admin, _data, signer);\n","after":"\n  function deploySigned(uint256 _salt, address _logic, address _admin, bytes calldata _data, bytes calldata _signature) public returns (address) {\n    address signer = getSigner(_salt, _logic, _admin, _data, _signature);\n    require(signer != address(0), \"Invalid signature\");\n    return _deployProxy(_salt, _logic, _admin, _data, signer);\n","contract":"ProxyFactory","time":0}]}
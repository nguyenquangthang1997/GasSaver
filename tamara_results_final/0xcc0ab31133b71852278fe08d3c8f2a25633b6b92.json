{"time":391,"results":[{"type":"external-function ","before":"function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buy(_from, false);\n    }","after":"function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buy(_from, false);\n    }","contract":"ArbitrationLicense","time":0},{"type":"external-function ","before":"function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buyFrom(_from);\n    }","after":"function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buyFrom(_from);\n    }","contract":"ArbitrationLicense","time":0},{"type":"struct-data-arrangement ","before":"\nint16 margin\nuint[] paymentMethods\nuint limitL\nuint limitU\naddress asset\nstring currency\naddress payable owner\naddress payable arbitrator\nbool deleted","after":"uint[] paymentMethods\nuint limitL\nuint limitU\nstring currency\naddress asset\naddress payable owner\naddress payable arbitrator\nint16 margin\nbool deleted\n","contract":"MetadataStore","time":1},{"type":"external-function ","before":"function addOffer(\n        address _asset,\n        string memory _contactData,\n        string memory _location,\n        string memory _currency,\n        string memory _username,\n        uint[] memory _paymentMethods,\n        uint _limitL,\n        uint _limitU,\n        int16 _margin,\n        address payable _arbitrator\n    ) public payable {\n        //require(sellingLicenses.isLicenseOwner(msg.sender), \"Not a license owner\");\n        // @TODO: limit number of offers if the sender is unlicensed?\n\n        require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), \"Arbitrator does not allow this transaction\");\n\n        require(_limitL <= _limitU, \"Invalid limits\");\n        require(msg.sender != _arbitrator, \"Cannot arbitrate own offers\");\n\n        _addOrUpdateUser(\n            msg.sender,\n            _contactData,\n            _location,\n            _username\n        );\n\n        Offer memory newOffer = Offer(\n            _margin,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _asset,\n            _currency,\n            msg.sender,\n            _arbitrator,\n            false\n        );\n\n        uint256 offerId = offers.push(newOffer) - 1;\n        offerWhitelist[msg.sender][offerId] = true;\n        addressToOffers[msg.sender].push(offerId);\n\n        emit OfferAdded(\n            msg.sender,\n            offerId,\n            _asset,\n            _location,\n            _currency,\n            _username,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _margin);\n\n        _stake(offerId, msg.sender, _asset);\n    }","after":"function addOffer(\n        address _asset,\n        string calldata _contactData,\n        string calldata _location,\n        string calldata _currency,\n        string calldata _username,\n        uint[] calldata _paymentMethods,\n        uint _limitL,\n        uint _limitU,\n        int16 _margin,\n        address payable _arbitrator\n    ) public payable {\n        //require(sellingLicenses.isLicenseOwner(msg.sender), \"Not a license owner\");\n        // @TODO: limit number of offers if the sender is unlicensed?\n\n        require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), \"Arbitrator does not allow this transaction\");\n\n        require(_limitL <= _limitU, \"Invalid limits\");\n        require(msg.sender != _arbitrator, \"Cannot arbitrate own offers\");\n\n        _addOrUpdateUser(\n            msg.sender,\n            _contactData,\n            _location,\n            _username\n        );\n\n        Offer memory newOffer = Offer(\n            _margin,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _asset,\n            _currency,\n            msg.sender,\n            _arbitrator,\n            false\n        );\n\n        uint256 offerId = offers.push(newOffer) - 1;\n        offerWhitelist[msg.sender][offerId] = true;\n        addressToOffers[msg.sender].push(offerId);\n\n        emit OfferAdded(\n            msg.sender,\n            offerId,\n            _asset,\n            _location,\n            _currency,\n            _username,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _margin);\n\n        _stake(offerId, msg.sender, _asset);\n    }","contract":"MetadataStore","time":0},{"type":"external-function ","before":"function createEscrow(\n        uint _offerId,\n        uint _tokenAmount,\n        uint _fiatAmount,\n        string memory _contactData,\n        string memory _location,\n        string memory _username\n    ) public returns(uint escrowId) {\n        metadataStore.addOrUpdateUser(msg.sender, _contactData, _location, _username);\n        escrowId = _createTransaction(msg.sender, _offerId, _tokenAmount, _fiatAmount);\n    }","after":"function createEscrow(\n        uint _offerId,\n        uint _tokenAmount,\n        uint _fiatAmount,\n        string calldata _contactData,\n        string calldata _location,\n        string calldata _username\n    ) public returns(uint escrowId) {\n        metadataStore.addOrUpdateUser(msg.sender, _contactData, _location, _username);\n        escrowId = _createTransaction(msg.sender, _offerId, _tokenAmount, _fiatAmount);\n    }","contract":"Escrow","time":0},{"type":"external-function ","before":"function createEscrow(\n        uint _offerId,\n        uint _tokenAmount,\n        uint _fiatAmount,\n        string memory _contactData,\n        string memory _location,\n        string memory _username,\n        uint _nonce,\n        bytes memory _signature\n    ) public returns(uint escrowId) {\n        address payable _buyer = metadataStore.addOrUpdateUser(_signature, _contactData, _location, _username, _nonce);\n        escrowId = _createTransaction(_buyer, _offerId, _tokenAmount, _fiatAmount);\n    }","after":"function createEscrow(\n        uint _offerId,\n        uint _tokenAmount,\n        uint _fiatAmount,\n        string calldata _contactData,\n        string calldata _location,\n        string calldata _username,\n        uint _nonce,\n        bytes calldata _signature\n    ) public returns(uint escrowId) {\n        address payable _buyer = metadataStore.addOrUpdateUser(_signature, _contactData, _location, _username, _nonce);\n        escrowId = _createTransaction(_buyer, _offerId, _tokenAmount, _fiatAmount);\n    }","contract":"Escrow","time":0},{"type":"external-function ","before":"function createAndFund (\n        uint _offerId,\n        uint _tokenAmount,\n        uint _fiatAmount,\n        string memory _bContactData,\n        string memory _bLocation,\n        string memory _bUsername,\n        uint _bNonce,\n        bytes memory _bSignature\n    ) public payable returns(uint escrowId) {\n        address payable _buyer = metadataStore.addOrUpdateUser(_bSignature, _bContactData, _bLocation, _bUsername, _bNonce);\n        escrowId = _createTransaction(_buyer, _offerId, _tokenAmount, _fiatAmount);\n        _fund(msg.sender, escrowId);\n    }","after":"function createAndFund (\n        uint _offerId,\n        uint _tokenAmount,\n        uint _fiatAmount,\n        string calldata _bContactData,\n        string calldata _bLocation,\n        string calldata _bUsername,\n        uint _bNonce,\n        bytes calldata _bSignature\n    ) public payable returns(uint escrowId) {\n        address payable _buyer = metadataStore.addOrUpdateUser(_bSignature, _bContactData, _bLocation, _bUsername, _bNonce);\n        escrowId = _createTransaction(_buyer, _offerId, _tokenAmount, _fiatAmount);\n        _fund(msg.sender, escrowId);\n    }","contract":"Escrow","time":0},{"type":"external-function ","before":"function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 36, \"Wrong data length\");\n\n        bytes4 sig;\n        uint256 escrowId;\n\n        (sig, escrowId) = _abiDecodeFundCall(_data);\n\n        if (sig == bytes4(0xca1d209d)){ // fund(uint256)\n            uint tokenAmount = transactions[escrowId].tokenAmount;\n            require(_amount == tokenAmount + _getValueOffMillipercent(tokenAmount, feeMilliPercent), \"Invalid amount\");\n            _fund(_from, escrowId);\n        } else {\n            revert(\"Wrong method selector\");\n        }\n    }","after":"function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _data) public {\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 36, \"Wrong data length\");\n\n        bytes4 sig;\n        uint256 escrowId;\n\n        (sig, escrowId) = _abiDecodeFundCall(_data);\n\n        if (sig == bytes4(0xca1d209d)){ // fund(uint256)\n            uint tokenAmount = transactions[escrowId].tokenAmount;\n            require(_amount == tokenAmount + _getValueOffMillipercent(tokenAmount, feeMilliPercent), \"Invalid amount\");\n            _fund(_from, escrowId);\n        } else {\n            revert(\"Wrong method selector\");\n        }\n    }","contract":"Escrow","time":0}]}
{"time":99,"results":[{"type":"external-function ","before":"function withdrawRaffleTickets(uint256 raffleId, uint256[] memory indexes)\n        public\n    {\n        // Reference the raffle\n        Raffle storage raffle = raffles[raffleId];\n\n        // Require a valid raffle\n        require(raffle.host != address(0), \"invalid raffle\");\n\n        // Require a least one ticket to withdraw\n        require(indexes.length > 0, \"must be greater than 0\");\n\n        // Loop through each ticket to withdraw\n        for(uint256 i = 0; i < indexes.length; i++) {\n            // Require sender to be the owner of the ticket\n            require(raffle.participants[indexes[i]] == msg.sender, \"must be ticket owner\");\n\n            // Require indexes are sorted from highest index to lowest index\n            if (i > 0) {\n                require(indexes[i] < indexes[i - 1], \"must be sorted from highest index to lowest index\");\n            }\n\n            // Set the ticket's index to equal the value of the last ticket\n            raffle.participants[indexes[i]] = raffle.participants[raffle.participants.length - 1];\n\n            // Delete the last index\n            raffle.participants.pop();\n        }\n\n        emit OnWithdrawRaffleTickets(raffleId, msg.sender, indexes);\n\n        // Send refund to the ticket holder\n        msg.sender.transfer(indexes.length * raffle.costPerTicket);\n    }","after":"function withdrawRaffleTickets(uint256 raffleId, uint256[] calldata indexes)\n        public\n    {\n        // Reference the raffle\n        Raffle storage raffle = raffles[raffleId];\n\n        // Require a valid raffle\n        require(raffle.host != address(0), \"invalid raffle\");\n\n        // Require a least one ticket to withdraw\n        require(indexes.length > 0, \"must be greater than 0\");\n\n        // Loop through each ticket to withdraw\n        for(uint256 i = 0; i < indexes.length; i++) {\n            // Require sender to be the owner of the ticket\n            require(raffle.participants[indexes[i]] == msg.sender, \"must be ticket owner\");\n\n            // Require indexes are sorted from highest index to lowest index\n            if (i > 0) {\n                require(indexes[i] < indexes[i - 1], \"must be sorted from highest index to lowest index\");\n            }\n\n            // Set the ticket's index to equal the value of the last ticket\n            raffle.participants[indexes[i]] = raffle.participants[raffle.participants.length - 1];\n\n            // Delete the last index\n            raffle.participants.pop();\n        }\n\n        emit OnWithdrawRaffleTickets(raffleId, msg.sender, indexes);\n\n        // Send refund to the ticket holder\n        msg.sender.transfer(indexes.length * raffle.costPerTicket);\n    }","contract":"RaffleMarket","time":0}]}
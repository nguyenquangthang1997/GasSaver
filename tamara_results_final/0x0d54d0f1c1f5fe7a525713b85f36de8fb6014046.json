{"time":23,"results":[{"type":"external-function ","before":"function createProxy(\n        uint256 _salt, \n        string memory _label,\n        bytes[] memory _initData\n    ) \n        public \n        onlyOwner\n        returns (AuthereumProxy)\n    {\n        address payable addr;\n        bytes memory _initCode = initCode;\n        bytes32 salt = _getSalt(_salt, msg.sender);\n\n        // Create proxy\n        assembly {\n            addr := create2(0, add(_initCode, 0x20), mload(_initCode), salt)\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        // Loop through initializations of each version of the logic contract\n        bool success;\n        for (uint256 i = 0; i < _initData.length; i++) {\n            if(_initData.length > 0) {\n                (success,) = addr.call(_initData[i]);\n                require(success);\n            }\n        }\n\n        // Set ENS name\n        authereumEnsManager.register(_label, addr);\n\n        return AuthereumProxy(addr);\n    }","after":"function createProxy(\n        uint256 _salt, \n        string calldata _label,\n        bytes[] calldata _initData\n    ) \n        public \n        onlyOwner\n        returns (AuthereumProxy)\n    {\n        address payable addr;\n        bytes memory _initCode = initCode;\n        bytes32 salt = _getSalt(_salt, msg.sender);\n\n        // Create proxy\n        assembly {\n            addr := create2(0, add(_initCode, 0x20), mload(_initCode), salt)\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        // Loop through initializations of each version of the logic contract\n        bool success;\n        for (uint256 i = 0; i < _initData.length; i++) {\n            if(_initData.length > 0) {\n                (success,) = addr.call(_initData[i]);\n                require(success);\n            }\n        }\n\n        // Set ENS name\n        authereumEnsManager.register(_label, addr);\n\n        return AuthereumProxy(addr);\n    }","contract":"AuthereumProxyFactory","time":0}]}
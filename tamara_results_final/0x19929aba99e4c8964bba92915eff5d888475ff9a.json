{"time":186,"results":[{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payEth(string memory _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","after":"function payEth(string calldata _orderId) public payable {\n        require(msg.value > 0, \"PaymentsCollector: Cannot Pay 0 ETH\");\n        emit EthPayment(msg.sender, msg.value, _orderId);\n    }","contract":"PaymentsCollector","time":0},{"type":"external-function ","before":"function payToken(address _tokenAddr, uint256 _amount, string memory _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","after":"function payToken(address _tokenAddr, uint256 _amount, string calldata _orderId) public isWhitelisted(_tokenAddr) {\n        require(_amount > 0, \"PaymentsCollector: Cannot Pay 0 Tokens\");\n\n        IERC20 token = IERC20(_tokenAddr);\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);\n\n        emit TokenPayment(_tokenAddr, msg.sender, _amount, _orderId);\n    }","contract":"PaymentsCollector","time":0}]}
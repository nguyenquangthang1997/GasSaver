{"time":36,"results":[{"type":"external-function ","before":"function createInvoice(  uint256 refNumber, string memory description,  address token, uint256 amountDue, address payTo, uint256 ethBlockExpiresAt ) public returns (uint uuid) {\n\n\n\n\n      uint256 ethBlockCreatedAt = block.number;\n\n      bytes32 newuuid = keccak256( abi.encodePacked(msg.sender, refNumber, description,  token, amountDue, payTo ) );\n\n      require( invoices[newuuid].uuid == 0 );  //make sure you do not overwrite invoices\n\n      invoices[newuuid] = Invoice({\n       uuid: newuuid,\n       description: description,\n       refNumber: refNumber,\n       token: token,\n       amountDue: amountDue,\n       payTo: payTo,\n       ethBlockCreatedAt: ethBlockCreatedAt,\n       paidBy: address(0),\n       amountPaid: 0,\n       ethBlockPaidAt: 0,\n       ethBlockExpiresAt: ethBlockExpiresAt\n\n      });\n\n\n       emit CreatedInvoice(newuuid);\n\n       return uuid;\n   }","after":"function createInvoice(  uint256 refNumber, string calldata description,  address token, uint256 amountDue, address payTo, uint256 ethBlockExpiresAt ) public returns (uint uuid) {\n\n\n\n\n      uint256 ethBlockCreatedAt = block.number;\n\n      bytes32 newuuid = keccak256( abi.encodePacked(msg.sender, refNumber, description,  token, amountDue, payTo ) );\n\n      require( invoices[newuuid].uuid == 0 );  //make sure you do not overwrite invoices\n\n      invoices[newuuid] = Invoice({\n       uuid: newuuid,\n       description: description,\n       refNumber: refNumber,\n       token: token,\n       amountDue: amountDue,\n       payTo: payTo,\n       ethBlockCreatedAt: ethBlockCreatedAt,\n       paidBy: address(0),\n       amountPaid: 0,\n       ethBlockPaidAt: 0,\n       ethBlockExpiresAt: ethBlockExpiresAt\n\n      });\n\n\n       emit CreatedInvoice(newuuid);\n\n       return uuid;\n   }","contract":"PaySpec","time":0},{"type":"external-function ","before":"function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public returns (bool) {\n\n        //can only be called by the token contract\n        require(msg.sender == token);\n\n        //transfer the tokens into escrow into this contract to stage for paying the invoice\n        require( ERC20Interface(token).transferFrom(from, address(this), tokens)   );\n\n        require(  _payInvoiceInternal(bytesToBytes32(data,0), from)  );\n\n        return true;\n\n     }","after":"function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) public returns (bool) {\n\n        //can only be called by the token contract\n        require(msg.sender == token);\n\n        //transfer the tokens into escrow into this contract to stage for paying the invoice\n        require( ERC20Interface(token).transferFrom(from, address(this), tokens)   );\n\n        require(  _payInvoiceInternal(bytesToBytes32(data,0), from)  );\n\n        return true;\n\n     }","contract":"PaySpec","time":0}]}
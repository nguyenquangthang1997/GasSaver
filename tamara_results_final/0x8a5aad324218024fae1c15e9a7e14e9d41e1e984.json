{"time":71,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function initialize(string memory name, string memory symbol, string memory tokenURI) public onlyOwner {\n        _name = name;\n        _symbol = symbol;\n        _tokenURI = tokenURI;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }","after":"function initialize(string calldata name, string calldata symbol, string calldata tokenURI) public onlyOwner {\n        _name = name;\n        _symbol = symbol;\n        _tokenURI = tokenURI;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }","contract":"ERC721WithMessage","time":0},{"type":"external-function ","before":"function mintWithMessage(address to, uint256 tokenId, string memory message, bool encrypted) public onlyOwner returns (bool) {\n        _mint(to, tokenId);\n        _tokenMessages[tokenId] = Message(message, encrypted);\n        return true;\n    }","after":"function mintWithMessage(address to, uint256 tokenId, string calldata message, bool encrypted) public onlyOwner returns (bool) {\n        _mint(to, tokenId);\n        _tokenMessages[tokenId] = Message(message, encrypted);\n        return true;\n    }","contract":"ERC721WithMessage","time":0}]}
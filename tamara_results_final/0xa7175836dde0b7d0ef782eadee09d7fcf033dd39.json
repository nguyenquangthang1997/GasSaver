{"time":93,"results":[{"type":"external-function ","before":"function pay(\n        address payable receiver,\n        address sourceToken,\n        address destinationToken,\n        uint256 sourceAmount,\n        uint256 destinationAmount,\n        address[] memory callees,\n        bytes memory exchangeData,\n        uint256[] memory startIndexes,\n        uint256[] memory values,\n        uint256 mintPrice\n    )\n    public\n    payable\n    whenNotPaused\n    nonReentrant\n    {\n        uint receivedAmount = performSwap(\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            destinationAmount,\n            callees,\n            exchangeData,\n            startIndexes,\n            values,\n            mintPrice\n        );\n\n        address payable payer = msg.sender;\n\n        transferTokens(destinationToken, receiver, destinationAmount);\n\n        //Transfers the rest of destinationToken, if any, to the sender\n        if (receivedAmount > destinationAmount) {\n            uint rest = receivedAmount.sub(destinationAmount);\n\n            transferTokens(destinationToken, payer, rest);\n        }\n\n        emit Payed(\n            receiver,\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            receivedAmount\n        );\n    }","after":"function pay(\n        address payable receiver,\n        address sourceToken,\n        address destinationToken,\n        uint256 sourceAmount,\n        uint256 destinationAmount,\n        address[] calldata callees,\n        bytes calldata exchangeData,\n        uint256[] calldata startIndexes,\n        uint256[] calldata values,\n        uint256 mintPrice\n    )\n    public\n    payable\n    whenNotPaused\n    nonReentrant\n    {\n        uint receivedAmount = performSwap(\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            destinationAmount,\n            callees,\n            exchangeData,\n            startIndexes,\n            values,\n            mintPrice\n        );\n\n        address payable payer = msg.sender;\n\n        transferTokens(destinationToken, receiver, destinationAmount);\n\n        //Transfers the rest of destinationToken, if any, to the sender\n        if (receivedAmount > destinationAmount) {\n            uint rest = receivedAmount.sub(destinationAmount);\n\n            transferTokens(destinationToken, payer, rest);\n        }\n\n        emit Payed(\n            receiver,\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            receivedAmount\n        );\n    }","contract":"AugustusSwapper","time":0},{"type":"external-function ","before":"function swap(\n        address sourceToken,\n        address destinationToken,\n        uint256 sourceAmount,\n        uint256 minDestinationAmount,\n        address[] memory callees,\n        bytes memory exchangeData,\n        uint256[] memory startIndexes,\n        uint256[] memory values,\n        uint256 mintPrice\n    )\n    public\n    payable\n    whenNotPaused\n    nonReentrant\n    {\n        uint receivedAmount = performSwap(\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            minDestinationAmount,\n            callees,\n            exchangeData,\n            startIndexes,\n            values,\n            mintPrice\n        );\n\n        transferTokens(destinationToken, msg.sender, receivedAmount);\n\n        emit Swapped(\n            msg.sender,\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            receivedAmount\n        );\n    }","after":"function swap(\n        address sourceToken,\n        address destinationToken,\n        uint256 sourceAmount,\n        uint256 minDestinationAmount,\n        address[] calldata callees,\n        bytes calldata exchangeData,\n        uint256[] calldata startIndexes,\n        uint256[] calldata values,\n        uint256 mintPrice\n    )\n    public\n    payable\n    whenNotPaused\n    nonReentrant\n    {\n        uint receivedAmount = performSwap(\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            minDestinationAmount,\n            callees,\n            exchangeData,\n            startIndexes,\n            values,\n            mintPrice\n        );\n\n        transferTokens(destinationToken, msg.sender, receivedAmount);\n\n        emit Swapped(\n            msg.sender,\n            sourceToken,\n            destinationToken,\n            sourceAmount,\n            receivedAmount\n        );\n    }","contract":"AugustusSwapper","time":0}]}
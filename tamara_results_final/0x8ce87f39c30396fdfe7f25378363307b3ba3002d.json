{"time":27,"results":[{"type":"state-data-arrangement ","before":"\naddress payable public owner;\nuint256 private vigBalance;\nuint256 public ethVig;\nuint256 public minEthDeposit;\nuint256 public maxEthDeposit;\nbool public areSubmissionsLocked;\nmapping(address => Submission[]) submissions;","after":"uint256 private vigBalance;\nuint256 public ethVig;\nuint256 public minEthDeposit;\nuint256 public maxEthDeposit;\nmapping(address => Submission[]) submissions;\naddress payable public owner;\nbool public areSubmissionsLocked;\n","contract":"Bankshot","time":0},{"type":"external-function ","before":"function revealSubmission(uint _subID, bytes memory _revelation) public {\n        Submission storage sub = submissions[msg.sender][_subID];\n        require(!sub.isRevealed, \"ALREADY_REVEALED\");\n\n        bytes32 revealHash = keccak256(abi.encodePacked(_revelation));\n        require(revealHash == sub.sHash, \"INVALID_REVEAL\");\n\n        sub.isRevealed = true;\n        emit Revelation(msg.sender, _subID, block.timestamp, _revelation);\n\n        msg.sender.transfer(sub.deposit);\n    }","after":"function revealSubmission(uint _subID, bytes calldata _revelation) public {\n        Submission storage sub = submissions[msg.sender][_subID];\n        require(!sub.isRevealed, \"ALREADY_REVEALED\");\n\n        bytes32 revealHash = keccak256(abi.encodePacked(_revelation));\n        require(revealHash == sub.sHash, \"INVALID_REVEAL\");\n\n        sub.isRevealed = true;\n        emit Revelation(msg.sender, _subID, block.timestamp, _revelation);\n\n        msg.sender.transfer(sub.deposit);\n    }","contract":"Bankshot","time":0}]}
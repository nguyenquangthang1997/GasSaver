{"time":94,"results":[{"type":"external-function ","before":"function getTradeCost(\n        uint256 inputMarketId,\n        uint256 /* outputMarketId */,\n        Account.Info memory makerAccount,\n        Account.Info memory takerAccount,\n        Types.Par memory /* oldInputPar */,\n        Types.Par memory /* newInputPar */,\n        Types.Wei memory inputWei,\n        bytes memory /* data */\n    )\n        public\n        onlySolo(msg.sender)\n        returns (Types.AssetAmount memory)\n    {\n        Require.that(\n            g_givers[takerAccount.owner],\n            FILE,\n            \"Giver not approved\",\n            takerAccount.owner\n        );\n\n        Require.that(\n            inputWei.isPositive(),\n            FILE,\n            \"Refund must be positive\"\n        );\n\n        emit LogRefund(\n            makerAccount,\n            inputMarketId,\n            inputWei.value\n        );\n\n        return Types.AssetAmount({\n            sign: false,\n            denomination: Types.AssetDenomination.Par,\n            ref: Types.AssetReference.Delta,\n            value: 0\n        });\n    }","after":"function getTradeCost(\n        uint256 inputMarketId,\n        uint256 /* outputMarketId */,\n        Account.Info calldata makerAccount,\n        Account.Info calldata takerAccount,\n        Types.Par calldata /* oldInputPar */,\n        Types.Par calldata /* newInputPar */,\n        Types.Wei calldata inputWei,\n        bytes calldata /* data */\n    )\n        public\n        onlySolo(msg.sender)\n        returns (Types.AssetAmount memory)\n    {\n        Require.that(\n            g_givers[takerAccount.owner],\n            FILE,\n            \"Giver not approved\",\n            takerAccount.owner\n        );\n\n        Require.that(\n            inputWei.isPositive(),\n            FILE,\n            \"Refund must be positive\"\n        );\n\n        emit LogRefund(\n            makerAccount,\n            inputMarketId,\n            inputWei.value\n        );\n\n        return Types.AssetAmount({\n            sign: false,\n            denomination: Types.AssetDenomination.Par,\n            ref: Types.AssetReference.Delta,\n            value: 0\n        });\n    }","contract":"Refunder","time":0}]}
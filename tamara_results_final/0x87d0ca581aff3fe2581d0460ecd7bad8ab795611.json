{"time":133,"results":[{"type":"external-function ","before":"function multiTransfer(address[] memory to, uint256[] memory value) public returns (bool) {\n        require(to.length > 0 && to.length == value.length, \"Invalid params\");\n\n        for(uint i = 0; i < to.length; i++) {\n            _transfer(msg.sender, to[i], value[i]);\n        }\n\n        return true;\n    }","after":"function multiTransfer(address[] calldata to, uint256[] calldata value) public returns (bool) {\n        require(to.length > 0 && to.length == value.length, \"Invalid params\");\n\n        for(uint i = 0; i < to.length; i++) {\n            _transfer(msg.sender, to[i], value[i]);\n        }\n\n        return true;\n    }","contract":"Token","time":0},{"type":"external-function ","before":"function tokenFallback(address from, uint value, bytes memory data) public {\n        require(msg.sender == address(token), \"Invalid token\");\n\n        uint eth = value.mul(1e14).div(rate);\n        address payable to = from.toPayable();\n\n        require(address(this).balance >= eth, \"Insufficient funds\");\n        to.transfer(eth);\n\n        if(tokenHolder != address(0)) {\n            token.transfer(tokenHolder, value);\n        }\n \n        emit Operation(to, value, eth);\n    }","after":"function tokenFallback(address from, uint value, bytes calldata data) public {\n        require(msg.sender == address(token), \"Invalid token\");\n\n        uint eth = value.mul(1e14).div(rate);\n        address payable to = from.toPayable();\n\n        require(address(this).balance >= eth, \"Insufficient funds\");\n        to.transfer(eth);\n\n        if(tokenHolder != address(0)) {\n            token.transfer(tokenHolder, value);\n        }\n \n        emit Operation(to, value, eth);\n    }","contract":"ExchangerToken","time":0}]}
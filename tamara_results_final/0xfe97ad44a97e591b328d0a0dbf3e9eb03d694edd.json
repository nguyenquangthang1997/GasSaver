{"time":73,"results":[{"type":"struct-data-arrangement ","before":"\naddress token\naddress recipient\nuint amount\nbool unwrap","after":"uint amount\naddress token\naddress recipient\nbool unwrap\n","contract":"Types","time":0},{"type":"external-function ","before":"function transfer(Types.Request memory request) public {\n    validateRequest(request);\n    \n    Types.TransferRequest memory transferRequest = request.decodeTransferRequest();\n    address payable depositAddress = registry.depositAddressOf(request.owner);\n\n    _transfer(\n      transferRequest.token, \n      depositAddress, \n      transferRequest.recipient, \n      transferRequest.amount, \n      transferRequest.unwrap\n    );\n\n    completeRequest(request);\n  }","after":"function transfer(Types.Request calldata request) public {\n    validateRequest(request);\n    \n    Types.TransferRequest memory transferRequest = request.decodeTransferRequest();\n    address payable depositAddress = registry.depositAddressOf(request.owner);\n\n    _transfer(\n      transferRequest.token, \n      depositAddress, \n      transferRequest.recipient, \n      transferRequest.amount, \n      transferRequest.unwrap\n    );\n\n    completeRequest(request);\n  }","contract":"DolomiteDirectV1","time":0},{"type":"external-function ","before":"function brokerRequestAllowance(LoopringTypes.BrokerApprovalRequest memory request) public returns (bool) {\n    require(msg.sender == loopringProtocolAddress);\n\n    LoopringTypes.BrokerOrder[] memory mergedOrders = new LoopringTypes.BrokerOrder[](request.orders.length);\n    uint numMergedOrders = 1;\n\n    mergedOrders[0] = request.orders[0];\n    \n    if (request.orders.length > 1) {\n      for (uint i = 1; i < request.orders.length; i++) {\n        bool isDuplicate = false;\n\n        for (uint b = 0; b < numMergedOrders; b++) {\n          if (request.orders[i].owner == mergedOrders[b].owner) {\n            mergedOrders[b].requestedAmountS += request.orders[i].requestedAmountS;\n            mergedOrders[b].requestedFeeAmount += request.orders[i].requestedFeeAmount;\n            isDuplicate = true;\n            break;\n          }\n        }\n\n        if (!isDuplicate) {\n          mergedOrders[numMergedOrders] = request.orders[i];\n          numMergedOrders += 1;\n        }\n      }\n    }\n\n    for (uint j = 0; j < numMergedOrders; j++) {\n      LoopringTypes.BrokerOrder memory order = mergedOrders[j];\n      address payable depositAddress = registry.depositAddressOf(order.owner);\n      \n      _transfer(request.tokenS, depositAddress, address(this), order.requestedAmountS, false);\n      if (order.requestedFeeAmount > 0) _transfer(request.feeToken, depositAddress, address(this), order.requestedFeeAmount, false);\n    }\n\n    return false; // Does not use onOrderFillReport\n  }","after":"function brokerRequestAllowance(LoopringTypes.BrokerApprovalRequest calldata request) public returns (bool) {\n    require(msg.sender == loopringProtocolAddress);\n\n    LoopringTypes.BrokerOrder[] memory mergedOrders = new LoopringTypes.BrokerOrder[](request.orders.length);\n    uint numMergedOrders = 1;\n\n    mergedOrders[0] = request.orders[0];\n    \n    if (request.orders.length > 1) {\n      for (uint i = 1; i < request.orders.length; i++) {\n        bool isDuplicate = false;\n\n        for (uint b = 0; b < numMergedOrders; b++) {\n          if (request.orders[i].owner == mergedOrders[b].owner) {\n            mergedOrders[b].requestedAmountS += request.orders[i].requestedAmountS;\n            mergedOrders[b].requestedFeeAmount += request.orders[i].requestedFeeAmount;\n            isDuplicate = true;\n            break;\n          }\n        }\n\n        if (!isDuplicate) {\n          mergedOrders[numMergedOrders] = request.orders[i];\n          numMergedOrders += 1;\n        }\n      }\n    }\n\n    for (uint j = 0; j < numMergedOrders; j++) {\n      LoopringTypes.BrokerOrder memory order = mergedOrders[j];\n      address payable depositAddress = registry.depositAddressOf(order.owner);\n      \n      _transfer(request.tokenS, depositAddress, address(this), order.requestedAmountS, false);\n      if (order.requestedFeeAmount > 0) _transfer(request.feeToken, depositAddress, address(this), order.requestedFeeAmount, false);\n    }\n\n    return false; // Does not use onOrderFillReport\n  }","contract":"DolomiteDirectV1","time":0}]}
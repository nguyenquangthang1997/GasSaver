{"time":891,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function setDynamicBaseURI(string memory _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","after":"function setDynamicBaseURI(string calldata _newBaseURI) public onlyOwner {\n        dynamicBaseURI = _newBaseURI;\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function mintCard(string memory _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","after":"function mintCard(string calldata _splinterId, address _holder) public onlyMinter {\n        require(0 == ethIds[_splinterId], \"Splinterlands: Card Exists\");\n\n        uint256 newEthId = _getNextTokenId();\n\n        cards[newEthId].splinterlandsId = _splinterId;\n        ethIds[_splinterId] = newEthId;\n\n        mintTo(_holder);\n        require(_getNextTokenId() == newEthId + 1, \"Splinterlands: Safety Check\");\n\n        emit MintCard(_holder, _splinterId, newEthId);\n    }","contract":"Splinterlands","time":0},{"type":"external-function ","before":"function lockCard(uint256 _ethId, string memory _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","after":"function lockCard(uint256 _ethId, string calldata _steemAddr) public {\n        require(ownerOf(_ethId) == msg.sender, \"Splinterlands: Not Holder\");\n\n        string memory cardId = cardIdForTokenId(_ethId);\n        transferFrom(msg.sender, address(this), _ethId);\n\n        emit LockCard(msg.sender, cardId, _steemAddr, _ethId);\n    }","contract":"Splinterlands","time":0}]}
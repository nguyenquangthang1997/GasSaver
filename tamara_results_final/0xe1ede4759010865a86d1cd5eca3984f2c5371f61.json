{"time":68,"results":[{"type":"external-function ","before":"function submit( string memory _desc,\n                   uint256 _price,\n                   address _token,\n                   uint256 _bond,\n                   uint256 _timeoutBlocks ) payable public {\n\n    require( bytes(_desc).length > 1, \"needs description\" );\n    require( _price > 0, \"needs price\" );\n    require( _token == address(0x0) || isContract(_token), \"bad token\" );\n    require( _price + _bond >= _price, \"safemath\" );\n    require( _timeoutBlocks > 0, \"needs timeout\" );\n    require( msg.value >= fee, \"needs fee\" );\n\n    bytes32 orderId = keccak256( abi.encodePacked(\n      counter++, _desc, _price, _token, _bond, _timeoutBlocks, now) );\n\n    orders[orderId].seller = msg.sender;\n    orders[orderId].description = _desc;\n    orders[orderId].price = _price;\n    orders[orderId].token = _token;\n    orders[orderId].bond = _bond;\n    orders[orderId].timeoutBlocks = _timeoutBlocks;\n    orders[orderId].status = State.SUBMITTED;\n\n    emit Submitted( orderId, msg.sender );\n    admin.transfer( msg.value );\n  }","after":"function submit( string calldata _desc,\n                   uint256 _price,\n                   address _token,\n                   uint256 _bond,\n                   uint256 _timeoutBlocks ) payable public {\n\n    require( bytes(_desc).length > 1, \"needs description\" );\n    require( _price > 0, \"needs price\" );\n    require( _token == address(0x0) || isContract(_token), \"bad token\" );\n    require( _price + _bond >= _price, \"safemath\" );\n    require( _timeoutBlocks > 0, \"needs timeout\" );\n    require( msg.value >= fee, \"needs fee\" );\n\n    bytes32 orderId = keccak256( abi.encodePacked(\n      counter++, _desc, _price, _token, _bond, _timeoutBlocks, now) );\n\n    orders[orderId].seller = msg.sender;\n    orders[orderId].description = _desc;\n    orders[orderId].price = _price;\n    orders[orderId].token = _token;\n    orders[orderId].bond = _bond;\n    orders[orderId].timeoutBlocks = _timeoutBlocks;\n    orders[orderId].status = State.SUBMITTED;\n\n    emit Submitted( orderId, msg.sender );\n    admin.transfer( msg.value );\n  }","contract":"escrobot","time":0},{"type":"external-function ","before":"function ship( bytes32 _orderId, string memory _shipRef )\n  public isSeller(_orderId) {\n\n    require(   orders[_orderId].status == State.PAID\n            || orders[_orderId].status == State.SHIPPED, \"ship state invalid\" );\n\n    require( bytes(_shipRef).length > 1, \"Ref invalid\" );\n\n    orders[_orderId].shipRef = _shipRef;\n    orders[_orderId].status = State.SHIPPED;\n    emit Shipped( _orderId, _shipRef, msg.sender );\n  }","after":"function ship( bytes32 _orderId, string calldata _shipRef )\n  public isSeller(_orderId) {\n\n    require(   orders[_orderId].status == State.PAID\n            || orders[_orderId].status == State.SHIPPED, \"ship state invalid\" );\n\n    require( bytes(_shipRef).length > 1, \"Ref invalid\" );\n\n    orders[_orderId].shipRef = _shipRef;\n    orders[_orderId].status = State.SHIPPED;\n    emit Shipped( _orderId, _shipRef, msg.sender );\n  }","contract":"escrobot","time":0},{"type":"external-function ","before":"function note( bytes32 _orderId, string memory _noteplaintxt ) public {\n\n    require(    msg.sender == orders[_orderId].buyer\n             || msg.sender == orders[_orderId].seller, \"parties only\" );\n\n    emit Noted( _orderId, _noteplaintxt, msg.sender );\n  }","after":"function note( bytes32 _orderId, string calldata _noteplaintxt ) public {\n\n    require(    msg.sender == orders[_orderId].buyer\n             || msg.sender == orders[_orderId].seller, \"parties only\" );\n\n    emit Noted( _orderId, _noteplaintxt, msg.sender );\n  }","contract":"escrobot","time":0},{"type":"external-function ","before":"function publish( string memory _version, string memory _link,\n    string memory _sig ) public isAdmin {\n\n    externalLink = _link;\n    hexSignature = _sig;\n    emit UIReleased( _version, _link, _sig );\n  }","after":"function publish( string calldata _version, string calldata _link,\n    string calldata _sig ) public isAdmin {\n\n    externalLink = _link;\n    hexSignature = _sig;\n    emit UIReleased( _version, _link, _sig );\n  }","contract":"escrobot","time":0}]}
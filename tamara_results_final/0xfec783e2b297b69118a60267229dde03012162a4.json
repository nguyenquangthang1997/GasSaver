{"time":132,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function setBaseTokenURI(string memory tokenURI) public payable onlyOwner {\n    _baseTokenURI = tokenURI;\n  }","after":"function setBaseTokenURI(string calldata tokenURI) public payable onlyOwner {\n    _baseTokenURI = tokenURI;\n  }","contract":"PeoplesCasino","time":0},{"type":"external-function ","before":"function setExtraData(uint tokenId, string memory data) public payable {\n    require(msg.sender == ownerOf(tokenId), \"Account is not the owner of the casino\");\n    extraData[tokenId] = data;\n  }","after":"function setExtraData(uint tokenId, string calldata data) public payable {\n    require(msg.sender == ownerOf(tokenId), \"Account is not the owner of the casino\");\n    extraData[tokenId] = data;\n  }","contract":"PeoplesCasino","time":0}]}
{"time":203,"results":[{"type":"de-morgan-condition ","before":"!approveLock && !blacklist[msg.sender]","after":"!(approveLock && blacklist[msg.sender])","loc":{"start":{"line":565,"column":12},"end":{"line":565,"column":49}},"contract":"Zero_x_butt_v2","time":0},{"type":"de-morgan-condition ","before":"!approveLock && !blacklist[msg.sender]","after":"!(approveLock && blacklist[msg.sender])","loc":{"start":{"line":577,"column":12},"end":{"line":577,"column":49}},"contract":"Zero_x_butt_v2","time":0},{"type":"de-morgan-condition ","before":"!approveLock && !blacklist[msg.sender]","after":"!(approveLock && blacklist[msg.sender])","loc":{"start":{"line":589,"column":12},"end":{"line":589,"column":49}},"contract":"Zero_x_butt_v2","time":0},{"type":"de-morgan-condition ","before":"!approveAndCallLock && !blacklist[msg.sender]","after":"!(approveAndCallLock && blacklist[msg.sender])","loc":{"start":{"line":645,"column":12},"end":{"line":645,"column":56}},"contract":"Zero_x_butt_v2","time":0},{"type":"external-function ","before":"function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n     for (uint256 i = 0; i < receivers.length; i++) {\n       transfer(receivers[i], amounts[i]);\n     }\n   }","after":"function multiTransfer(address[] calldata receivers, uint256[] calldata amounts) public {\n     for (uint256 i = 0; i < receivers.length; i++) {\n       transfer(receivers[i], amounts[i]);\n     }\n   }","contract":"Zero_x_butt_v2","time":0},{"type":"external-function ","before":"function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\n     assert(!approveAndCallLock && !blacklist[msg.sender]); //Must be unlocked, cannot be a blacklisted\n\n     allowed[msg.sender][spender] = tokens;\n     emit Approval(msg.sender, spender, tokens);\n     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n     totalGasSpent = totalGasSpent.add(tx.gasprice);\n     return true;\n   }","after":"function approveAndCall(address spender, uint tokens, bytes calldata data) public returns(bool success) {\n     assert(!approveAndCallLock && !blacklist[msg.sender]); //Must be unlocked, cannot be a blacklisted\n\n     allowed[msg.sender][spender] = tokens;\n     emit Approval(msg.sender, spender, tokens);\n     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n     totalGasSpent = totalGasSpent.add(tx.gasprice);\n     return true;\n   }","contract":"Zero_x_butt_v2","time":0},{"type":"constant-restrict-modification  ","before":"uint public _BLOCKS_PER_ERA = 20999999;","after":"uint public constant _BLOCKS_PER_ERA = 20999999;","contract":"Zero_x_butt_v2","time":0},{"type":"constant-restrict-modification  ","before":"uint public _MAXIMUM_TARGET = (2 ** 234);","after":"uint public constant _MAXIMUM_TARGET = (2 ** 234);","contract":"Zero_x_butt_v2","time":0}]}
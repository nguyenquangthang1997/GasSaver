{"time":132,"results":[{"type":"external-function ","before":"8,28]\n * @param  _r r数组，如[\"\",\"\",\"\"]\n * @param  _s s数组，如[\"\",\"\",\"\"]\n * @return {[type]}\n */\n    function submitTransaction(address payable _destination, string memory _value, string memory _strTransactionData, uint8[] memory _v, bytes32[] memory _r, bytes32[] memory _s)  public {\n        IVTUserInterface userTemp = IVTUserInterface(address(this)); \n\n        processAndCheckParam(_destination, _strTransactionData, _v, _r, _s, userTemp);\n\n        uint256 transactionValue = RLPEncode.stringToUint(_value);\n        bytes32 _msgHash = getMsgHash(_destination, _value, _strTransactionData);\n        verifySignatures(userTemp, _msgHash, _v, _r, _s);\n\n        _destination.transfer(t","after":"8,28]\n * @param  _r r数组，如[\"\",\"\",\"\"]\n * @param  _s s数组，如[\"\",\"\",\"\"]\n * @return {[type]}\n */\n    function submitTransaction(address payable _destination, string memory _value, string memory _strTransactionData, uint8[] memory _v, bytes32[] memory _r, bytes32[] memory _s)  public {\n        IVTUserInterface userTemp = IVTUserInterface(address(this)); \n\n        processAndCheckParam(_destination, _strTransactionData, _v, _r, _s, userTemp);\n\n        uint256 transactionValue = RLPEncode.stringToUint(_value);\n        bytes32 _msgHash = getMsgHash(_destination, _value, _strTransactionData);\n        verifySignatures(userTemp, _msgHash, _v, _r, _s);\n\n        _destination.transfer(t","contract":"IVTImplementation","time":0},{"type":"external-function ","before":"��数据，v4版本数据结构 [User地址]+[时间戳]\n * @param  _v v数组，如[27,28,28]\n * @param  _r r数组，如[\"\",\"\",\"\"]\n * @param  _s s数组，如[\"\",\"\",\"\"]\n * @param  _tokenType Token版本，v4使用两种规范\n * @return {[type]}\n */\n    function submitTransactionToken(address _destination, address _tokenAddress, string memory _value, string memory _strTransactionData, uint8[] memory _v, bytes32[] memory _r,bytes32[] memory _s, uint256  _tokenType)  public {\n        IVTUserInterface userTemp = IVTUserInterface(address(this)); \n\n        processAndCheckParam(_destination, _strTransactionData, _v, _r, _s, userTemp);\n\n        uint256 transactionValue = RLPEncode.stringToUint(_value);\n        _strTransactionData = RLPEncode.strConcat(_strTransactionData, RLPEncode.addressToString(_tokenAddress));\n        bytes32 _msgHash = getMsgHash(_destination, _value, _strTransactionData);\n        verifySignatures(userTemp, _msgHash, _v, _r, _s);\n\n        //此时的上下文仍为user合约--enum update to uint8 param by shitao. 10001 is ERC20_STANDARD ,10002 is ERC20_NONSTANDARD;\n        if(10001 == _tokenType){\n            ERC20StandardInterface instanceStandard = ERC20StandardInterface(_tokenAddress);\n            require(instanceStandard.transfer(_destination, transactionValue));\n        }else if(10002 == _tokenType){\n            ERC20NonStandardInterface instanceNonStandard ","after":"��数据，v4版本数据结构 [User地址]+[时间戳]\n * @param  _v v数组，如[27,28,28]\n * @param  _r r数组，如[\"\",\"\",\"\"]\n * @param  _s s数组，如[\"\",\"\",\"\"]\n * @param  _tokenType Token版本，v4使���两种规范\n * @return {[type]}\n */\n    function submitTransactionToken(address _destination, address _tokenAddress, string memory _value, string memory _strTransactionData, uint8[] memory _v, bytes32[] memory _r,bytes32[] memory _s, uint256  _tokenType)  public {\n        IVTUserInterface userTemp = IVTUserInterface(address(this)); \n\n        processAndCheckParam(_destination, _strTransactionData, _v, _r, _s, userTemp);\n\n        uint256 transactionValue = RLPEncode.stringToUint(_value);\n        _strTransactionData = RLPEncode.strConcat(_strTransactionData, RLPEncode.addressToString(_tokenAddress));\n        bytes32 _msgHash = getMsgHash(_destination, _value, _strTransactionData);\n        verifySignatures(userTemp, _msgHash, _v, _r, _s);\n\n        //此时的上下文仍为user合约--enum update to uint8 param by shitao. 10001 is ERC20_STANDARD ,10002 is ERC20_NONSTANDARD;\n        if(10001 == _tokenType){\n            ERC20StandardInterface instanceStandard = ERC20StandardInterface(_tokenAddress);\n            require(instanceStandard.transfer(_destination, transactionValue));\n        }else if(10002 == _tokenType){\n            ERC20NonStandardInterface instanceNonStandard ","contract":"IVTImplementation","time":0}]}
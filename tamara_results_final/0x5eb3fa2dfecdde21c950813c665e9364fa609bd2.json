{"time":11,"results":[{"type":"external-function ","before":"function aggregate(Call[] memory calls, bool strict) public returns (uint256 blockNumber, Return[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new Return[](calls.length);\n        for(uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n            if (strict) {\n              require(success);\n            }\n            returnData[i] = Return(success, ret);\n        }\n    }","after":"function aggregate(Call[] calldata calls, bool strict) public returns (uint256 blockNumber, Return[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new Return[](calls.length);\n        for(uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n            if (strict) {\n              require(success);\n            }\n            returnData[i] = Return(success, ret);\n        }\n    }","contract":"Multicall","time":0}]}
{"time":17,"results":[{"type":"external-function ","before":"function payout(address payable[] memory payees, uint256[] memory amounts, address token) public payable {\n    uint256 _i;\n    IERC20 _token_interface;\n\n    if (token != address(0)) {\n      _token_interface = IERC20(token);\n    }\n\n    require(payees.length <= 100, 'Max addresses');\n    require(payees.length == amounts.length, 'Wrong amounts length');\n\n    for (_i = 0; _i < amounts.length; _i++) {\n      if (token == address(0)) {\n        payees[_i].transfer(amounts[_i]);\n      } else {\n        _token_interface.transferFrom(msg.sender, payees[_i], amounts[_i]);\n      }\n    }\n  }","after":"function payout(address payable[] calldata payees, uint256[] calldata amounts, address token) public payable {\n    uint256 _i;\n    IERC20 _token_interface;\n\n    if (token != address(0)) {\n      _token_interface = IERC20(token);\n    }\n\n    require(payees.length <= 100, 'Max addresses');\n    require(payees.length == amounts.length, 'Wrong amounts length');\n\n    for (_i = 0; _i < amounts.length; _i++) {\n      if (token == address(0)) {\n        payees[_i].transfer(amounts[_i]);\n      } else {\n        _token_interface.transferFrom(msg.sender, payees[_i], amounts[_i]);\n      }\n    }\n  }","contract":"TxBatching","time":0}]}
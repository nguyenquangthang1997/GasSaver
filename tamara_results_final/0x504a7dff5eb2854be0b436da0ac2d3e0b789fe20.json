{"time":7469,"results":[{"type":"struct-data-arrangement ","before":"\naddress voter\nuint tokens\nuint claimId\nint8 verdict\nbool rewardClaimed","after":"uint tokens\nuint claimId\naddress voter\nint8 verdict\nbool rewardClaimed\n","contract":"ClaimsData","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"state-data-arrangement ","before":"\nIARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint64 internal lastDate;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;","after":"IARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint64 internal lastDate;\n","contract":"PoolData","time":0},{"type":"struct-data-arrangement ","before":"\nbytes4 typeOf\nbytes4 currency\nuint id\nuint64 dateAdd\nuint64 dateUpd","after":"uint id\nuint64 dateAdd\nuint64 dateUpd\nbytes4 typeOf\nbytes4 currency\n","contract":"PoolData","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"struct-data-arrangement ","before":"\naddress payable memberAddress\nbytes4 currencyCode\nuint sumAssured\nuint16 coverPeriod\nuint validUntil\naddress scAddress\nuint premiumNXM","after":"uint sumAssured\nuint validUntil\nuint premiumNXM\naddress payable memberAddress\naddress scAddress\nbytes4 currencyCode\nuint16 coverPeriod\n","contract":"QuotationData","time":0},{"type":"struct-data-arrangement ","before":"\nuint holdCoverId\naddress payable userAddress\naddress scAddress\nbytes4 coverCurr\nuint[] coverDetails\nuint16 coverPeriod","after":"uint holdCoverId\nuint[] coverDetails\naddress payable userAddress\naddress scAddress\nbytes4 coverCurr\nuint16 coverPeriod\n","contract":"QuotationData","time":0},{"type":"struct-data-arrangement ","before":"\naddress voter\nuint tokens\nuint claimId\nint8 verdict\nbool rewardClaimed","after":"uint tokens\nuint claimId\naddress voter\nint8 verdict\nbool rewardClaimed\n","contract":"ClaimsData","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"state-data-arrangement ","before":"\nIARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint64 internal lastDate;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;","after":"IARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint64 internal lastDate;\n","contract":"PoolData","time":1},{"type":"struct-data-arrangement ","before":"\nbytes4 typeOf\nbytes4 currency\nuint id\nuint64 dateAdd\nuint64 dateUpd","after":"uint id\nuint64 dateAdd\nuint64 dateUpd\nbytes4 typeOf\nbytes4 currency\n","contract":"PoolData","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"struct-data-arrangement ","before":"\naddress payable memberAddress\nbytes4 currencyCode\nuint sumAssured\nuint16 coverPeriod\nuint validUntil\naddress scAddress\nuint premiumNXM","after":"uint sumAssured\nuint validUntil\nuint premiumNXM\naddress payable memberAddress\naddress scAddress\nbytes4 currencyCode\nuint16 coverPeriod\n","contract":"QuotationData","time":0},{"type":"struct-data-arrangement ","before":"\nuint holdCoverId\naddress payable userAddress\naddress scAddress\nbytes4 coverCurr\nuint[] coverDetails\nuint16 coverPeriod","after":"uint holdCoverId\nuint[] coverDetails\naddress payable userAddress\naddress scAddress\nbytes4 coverCurr\nuint16 coverPeriod\n","contract":"QuotationData","time":0},{"type":"struct-data-arrangement ","before":"\naddress voter\nuint tokens\nuint claimId\nint8 verdict\nbool rewardClaimed","after":"uint tokens\nuint claimId\naddress voter\nint8 verdict\nbool rewardClaimed\n","contract":"ClaimsData","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string memory _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","after":"function addRole( //solhint-disable-line\r\n        bytes32 _roleName,\r\n        string calldata _roleDescription,\r\n        address _authorized\r\n    )\r\n    public\r\n    onlyAuthorizedToGovern {\r\n        _addRole(_roleName, _roleDescription, _authorized);\r\n    }","contract":"MemberRoles","time":0},{"type":"external-function ","before":"function addMembersBeforeLaunch(address[] memory userArray, uint[] memory tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","after":"function addMembersBeforeLaunch(address[] calldata userArray, uint[] calldata tokens) public onlyOwner {\r\n        require(!launched);\r\n\r\n        for (uint i=0; i < userArray.length; i++) {\r\n            require(!ms.isMember(userArray[i]));\r\n            dAppToken.addToWhitelist(userArray[i]);\r\n            _updateRole(userArray[i], uint(Role.Member), true);\r\n            dAppToken.mint(userArray[i], tokens[i]);\r\n        }\r\n        launched = true;\r\n        launchedOn = now;\r\n\r\n    }","contract":"MemberRoles","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"string public name = \"NXM\";","after":"string public constant name = \"NXM\";","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"string public symbol = \"NXM\";","after":"string public constant symbol = \"NXM\";","contract":"NXMToken","time":1},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"NXMToken","time":1},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMember\r\n        checkPause\r\n        payable\r\n    {\r\n        require(msg.value == coverDetails[1]);\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"external-function ","before":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        isMember\r\n        checkPause\r\n    {\r\n        IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n        require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]), \"Transfer failed\");\r\n        q2.verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Pool1","time":0},{"type":"state-data-arrangement ","before":"\nIARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint64 internal lastDate;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;","after":"IARankDetails[] internal allIARankDetails;\nMcrData[] public allMCRData;\nbytes4[] internal allInvestmentCurrencies;\nbytes4[] internal allCurrencies;\nbytes32[] public allAPIcall;\nmapping(bytes32 => ApiId) public allAPIid;\nmapping(uint64 => uint) internal datewiseId;\nmapping(bytes16 => uint) internal currencyLastIndex;\nmapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\nmapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\nmapping(bytes4 => uint) internal caAvgRate;\nmapping(bytes4 => uint) internal iaAvgRate;\nuint private constant DECIMAL1E18 = uint(10) ** 18;\nuint public uniswapDeadline;\nuint public liquidityTradeCallbackTime;\nuint public lastLiquidityTradeTrigger;\nuint public variationPercX100;\nuint public iaRatesTime;\nuint public minCap;\nuint public mcrTime;\nuint public a;\nuint public shockParameter;\nuint public c;\nuint public mcrFailTime;\nuint public ethVolumeLimit;\nuint public capReached;\nuint public capacityLimit;\naddress public notariseMCR;\naddress public daiFeedAddress;\nuint64 internal lastDate;\n","contract":"PoolData","time":0},{"type":"struct-data-arrangement ","before":"\nbytes4 typeOf\nbytes4 currency\nuint id\nuint64 dateAdd\nuint64 dateUpd","after":"uint id\nuint64 dateAdd\nuint64 dateUpd\nbytes4 typeOf\nbytes4 currency\n","contract":"PoolData","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function updateCategory(\r\n        uint _categoryId, \r\n        string memory _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] memory _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string memory _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] memory _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","after":"function updateCategory(\r\n        uint _categoryId, \r\n        string calldata _name, \r\n        uint _memberRoleToVote, \r\n        uint _majorityVotePerc, \r\n        uint _quorumPerc,\r\n        uint[] calldata _allowedToCreateProposal,\r\n        uint _closingTime,\r\n        string calldata _actionHash,\r\n        address _contractAddress,\r\n        bytes2 _contractName,\r\n        uint[] calldata _incentives\r\n    )\r\n        public\r\n        onlyAuthorizedToGovern\r\n    {\r\n        require(_verifyMemberRoles(_memberRoleToVote, _allowedToCreateProposal) == 0, \"Invalid Role\");\r\n        allCategory[_categoryId].memberRoleToVote = _memberRoleToVote;\r\n        allCategory[_categoryId].majorityVotePerc = _majorityVotePerc;\r\n        allCategory[_categoryId].closingTime = _closingTime;\r\n        allCategory[_categoryId].allowedToCreateProposal = _allowedToCreateProposal;\r\n        allCategory[_categoryId].minStake = _incentives[0];\r\n        allCategory[_categoryId].quorumPerc = _quorumPerc;\r\n        categoryActionData[_categoryId].defaultIncentive = _incentives[1];\r\n        categoryActionData[_categoryId].contractName = _contractName;\r\n        categoryActionData[_categoryId].contractAddress = _contractAddress;\r\n        categoryABReq[_categoryId] = _incentives[2];\r\n        emit Category(_categoryId, _name, _actionHash);\r\n    }","contract":"ProposalCategory","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function makeCoverUsingNXMTokens(\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","after":"function makeCoverUsingNXMTokens(\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        bytes4 coverCurr,\r\n        address smartCAdd,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        isMemberAndcheckPause\r\n    {\r\n        \r\n        tc.burnFrom(msg.sender, coverDetails[2]); //need burn allowance\r\n        _verifyCoverDetails(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod, _v, _r, _s);\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","after":"function verifyCoverDetails(\r\n        address payable from,\r\n        address scAddress,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        onlyInternal\r\n    {\r\n        _verifyCoverDetails(\r\n            from,\r\n            scAddress,\r\n            coverCurr,\r\n            coverDetails,\r\n            coverPeriod,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }","contract":"Quotation","time":0},{"type":"external-function ","before":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] memory coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","after":"function initiateMembershipAndCover(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public\r\n        payable\r\n        checkPause\r\n    {\r\n        require(coverDetails[3] > now);\r\n        require(!qd.timestampRepeated(coverDetails[4]));\r\n        qd.setTimestampRepeated(coverDetails[4]);\r\n        require(!ms.isMember(msg.sender));\r\n        require(qd.refundEligible(msg.sender) == false);\r\n        uint joinFee = td.joiningFee();\r\n        uint totalFee = joinFee;\r\n        if (coverCurr == \"ETH\") {\r\n            totalFee = joinFee.add(coverDetails[1]);\r\n        } else {\r\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(coverCurr));\r\n            require(erc20.transferFrom(msg.sender, address(this), coverDetails[1]));\r\n        }\r\n        require(msg.value == totalFee);\r\n        require(verifySign(coverDetails, coverPeriod, coverCurr, smartCAdd, _v, _r, _s));\r\n        qd.addHoldCover(msg.sender, smartCAdd, coverCurr, coverDetails, coverPeriod);\r\n        qd.setRefundEligible(msg.sender, true);\r\n    }","contract":"Quotation","time":0},{"type":"struct-data-arrangement ","before":"\naddress payable memberAddress\nbytes4 currencyCode\nuint sumAssured\nuint16 coverPeriod\nuint validUntil\naddress scAddress\nuint premiumNXM","after":"uint sumAssured\nuint validUntil\nuint premiumNXM\naddress payable memberAddress\naddress scAddress\nbytes4 currencyCode\nuint16 coverPeriod\n","contract":"QuotationData","time":0},{"type":"struct-data-arrangement ","before":"\nuint holdCoverId\naddress payable userAddress\naddress scAddress\nbytes4 coverCurr\nuint[] coverDetails\nuint16 coverPeriod","after":"uint holdCoverId\nuint[] coverDetails\naddress payable userAddress\naddress scAddress\nbytes4 coverCurr\nuint16 coverPeriod\n","contract":"QuotationData","time":0}]}
{"time":1386,"results":[{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0},{"type":"external-function ","before":"function setVerse(string memory concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","after":"function setVerse(string calldata concatenatedReference) public payable {\n    require(\n      msg.value >= versePrice,\n      'Please send at least as much ETH as the versePrice with your transaction'\n    );\n\n    if (provable_getPrice(\"URL\") > address(this).balance) {\n      emit LogNewProvableQuery(\n        \"Provable query was NOT sent, please add some ETH to cover the Provable query fee\"\n      );\n      \n      emit LogError(1);\n\n      revert('Address balance is not enough to cover Provable fee');\n    }\n    \n    require(\n      textIsEmpty(concatenatedReference) == false,\n      'A concatenatedReference must be provided in the format book/chapter/verse'\n    );\n\n    bytes32 queryId = provable_query(\n      \"URL\",\n      \"json(https://api.ourbible.io/verses/\"\n        .toSlice()\n        .concat(concatenatedReference.toSlice())\n        .toSlice()\n        .concat(\").provableText\".toSlice()),\n      provableGasLimit\n    );\n    \n    emit LogNewProvableQuery(\"Provable query was sent, standing by for the answer\");\n\n    validProvableQueryIds[queryId] = true;\n  }","contract":"TheBible","time":0}]}
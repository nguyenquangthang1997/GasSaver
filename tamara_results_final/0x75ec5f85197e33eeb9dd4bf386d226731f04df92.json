{"time":544,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"state-data-arrangement ","before":"\naddress artist;\nstring private _name = \"BitsForAI\";\nstring private _symbol = \"BFA\";\nstring private _tokenURI = \"https://api.bitsforai.com/tokenid/\";\nuint private _currentTokenId;\nuint constant private GWEI = 1000000000;\nuint private gasPrice      = 4010000000;\nuint private gasAmount = 250000;\nuint constant private BASIS_POINTS = 10000;\nuint constant private NUM_RANDOM_BYTES_REQUESTED = 2;\naddress proxyRegistryAddress;\nuint constant mintFeeStart = 8 finney;\nuint constant mintFeeIncrementPer1k = 1 finney;\nuint constant mintEndChanceStart = 0;\nuint constant mintEndChanceAt10k = 10;\nuint constant mintEndChanceAt12k = 25;\nuint constant mintEndChanceAt14k = 50;\nuint constant mintEndChanceAt16k = 75;\nuint constant mintEndChanceAt18k = 100;\nuint constant mintEndChanceAt20k = 1000;\nuint constant jackpotBP = 1000;\nuint constant burnFundBP = 3000;\nuint constant socialBP = 2000;\nbool public isBurnActive = false;\nuint public burnReward = 15 finney;\nbool public isMinting = false;\nuint public jackpot;\nuint public burnFund;\nuint public social;\nuint public totalSocialShares;\nuint public totalMinted;\nuint public finalWeiPerSocialShare;\nuint public finalWeiPerJackpotWinner;\naddress[10] public lastMinters;\nuint lastMintersIndex;\nuint public endTimer;\nuint constant endTimerMaximum  = 1 days;\nuint constant endTimerIncrease = 1 minutes;\nuint constant endTimerMininum  = 1 hours;\nuint public claimTimer;\nuint constant claimTime = 1 days;\nmapping(address => uint) lastMintersCurrentIndex;\nmapping(address => uint) public socialShares;\nmapping(bytes32 => uint16) public provableQueryToSeed;\nmapping(bytes32 => address) public provableQueryToAddress;\nmapping(bytes32 => uint) public provableQueryToTokenId;\nmapping(uint => bytes2) public nftBits;\nmapping(uint => uint) public nftColorSeed;","after":"string private _name = \"BitsForAI\";\nstring private _symbol = \"BFA\";\nstring private _tokenURI = \"https://api.bitsforai.com/tokenid/\";\nuint private _currentTokenId;\nuint constant private GWEI = 1000000000;\nuint private gasPrice      = 4010000000;\nuint private gasAmount = 250000;\nuint constant private BASIS_POINTS = 10000;\nuint constant private NUM_RANDOM_BYTES_REQUESTED = 2;\nuint constant mintFeeStart = 8 finney;\nuint constant mintFeeIncrementPer1k = 1 finney;\nuint constant mintEndChanceStart = 0;\nuint constant mintEndChanceAt10k = 10;\nuint constant mintEndChanceAt12k = 25;\nuint constant mintEndChanceAt14k = 50;\nuint constant mintEndChanceAt16k = 75;\nuint constant mintEndChanceAt18k = 100;\nuint constant mintEndChanceAt20k = 1000;\nuint constant jackpotBP = 1000;\nuint constant burnFundBP = 3000;\nuint constant socialBP = 2000;\nuint public burnReward = 15 finney;\nuint public jackpot;\nuint public burnFund;\nuint public social;\nuint public totalSocialShares;\nuint public totalMinted;\nuint public finalWeiPerSocialShare;\nuint public finalWeiPerJackpotWinner;\naddress[10] public lastMinters;\nuint lastMintersIndex;\nuint public endTimer;\nuint constant endTimerMaximum  = 1 days;\nuint constant endTimerIncrease = 1 minutes;\nuint constant endTimerMininum  = 1 hours;\nuint public claimTimer;\nuint constant claimTime = 1 days;\nmapping(address => uint) lastMintersCurrentIndex;\nmapping(address => uint) public socialShares;\nmapping(bytes32 => uint16) public provableQueryToSeed;\nmapping(bytes32 => address) public provableQueryToAddress;\nmapping(bytes32 => uint) public provableQueryToTokenId;\nmapping(uint => bytes2) public nftBits;\nmapping(uint => uint) public nftColorSeed;\naddress artist;\naddress proxyRegistryAddress;\nbool public isBurnActive = false;\nbool public isMinting = false;\n","contract":"BitsForAI","time":0},{"type":"external-function ","before":"function onlyArtist_changeBaseUIR(string memory newURI) public onlyArtist{\n        _tokenURI = newURI;\n    }","after":"function onlyArtist_changeBaseUIR(string calldata newURI) public onlyArtist{\n        _tokenURI = newURI;\n    }","contract":"BitsForAI","time":0}]}
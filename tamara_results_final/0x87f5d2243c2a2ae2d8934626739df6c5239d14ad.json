{"time":472,"results":[{"type":"loop-duplication","before":"\nstart line 2111 column 8, end line 2119 column 8\nfor (i = 0; i < ring.size; i++) {\n            // Check if the fill amounts of the participation are valid\n            ring.valid = ring.valid && ring.participations[i].checkFills();\n\n            // Reserve the total amount tokenS used for all the orders\n            // (e.g. the owner of order 0 could use LRC as feeToken in order 0, while\n            // the same owner can also sell LRC in order 2).\n            ring.participations[i].order.reserveAmountS(ring.participations[i].fillAmountS);\n        }\nstart line 2121 column 8, end line 2134 column 8\nfor (i = 0; i < ring.size; i++) {\n            prevIndex = (i + ring.size - 1) % ring.size;\n\n            bool valid = ring.participations[i].calculateFees(ring.participations[prevIndex], ctx);\n            if (!valid) {\n                ring.valid = false;\n                break;\n            }\n\n            int16 waiveFeePercentage = ring.participations[i].order.waiveFeePercentage;\n            if (waiveFeePercentage < 0) {\n                ring.minerFeesToOrdersPercentage += uint(-waiveFeePercentage);\n            }\n        }","after":"// merge loop\n\nstart line 2111 column 8, end line 2119 column 8\nfor (i = 0; i < ring.size; i++) {\n            // Check if the fill amounts of the participation are valid\n            ring.valid = ring.valid && ring.participations[i].checkFills();\n\n            // Reserve the total amount tokenS used for all the orders\n            // (e.g. the owner of order 0 could use LRC as feeToken in order 0, while\n            // the same owner can also sell LRC in order 2).\n            ring.participations[i].order.reserveAmountS(ring.participations[i].fillAmountS);\n        }\nstart line 2121 column 8, end line 2134 column 8\nfor (i = 0; i < ring.size; i++) {\n            prevIndex = (i + ring.size - 1) % ring.size;\n\n            bool valid = ring.participations[i].calculateFees(ring.participations[prevIndex], ctx);\n            if (!valid) {\n                ring.valid = false;\n                break;\n            }\n\n            int16 waiveFeePercentage = ring.participations[i].order.waiveFeePercentage;\n            if (waiveFeePercentage < 0) {\n                ring.minerFeesToOrdersPercentage += uint(-waiveFeePercentage);\n            }\n        }","contract":"RingHelper","time":0},{"type":"loop-duplication","before":"\nstart line 3777 column 4, end line 3785 column 8\nfor (i = 0; i < rings.length; i++) {\n            Data.Ring memory ring = rings[i];\n            ring.checkOrdersValid();\n            // ring.checkForSubRings(); // We only submit rings of size 2 - there's no need to check for sub-rings\n            ring.calculateFillAmountAndFee(ctx);\n            if (ring.valid) {\n                ring.adjustOrderStates();\n            }\n        }\nstart line 3787 column 8, end line 3800 column 8\nfor (i = 0; i < rings.length; i++) {\n            Data.Ring memory ring = rings[i];\n            if (ring.valid) {\n                // Only settle rings we have checked to be valid\n                ring.doPayments(ctx, mining);\n                emitRingMinedEvent(\n                    ring,\n                    ctx.ringIndex++,\n                    mining.feeRecipient\n                );\n            } else {\n                emit InvalidRing(ring.hash);\n            }\n        }","after":"// merge loop\n\nstart line 3777 column 4, end line 3785 column 8\nfor (i = 0; i < rings.length; i++) {\n            Data.Ring memory ring = rings[i];\n            ring.checkOrdersValid();\n            // ring.checkForSubRings(); // We only submit rings of size 2 - there's no need to check for sub-rings\n            ring.calculateFillAmountAndFee(ctx);\n            if (ring.valid) {\n                ring.adjustOrderStates();\n            }\n        }\nstart line 3787 column 8, end line 3800 column 8\nfor (i = 0; i < rings.length; i++) {\n            Data.Ring memory ring = rings[i];\n            if (ring.valid) {\n                // Only settle rings we have checked to be valid\n                ring.doPayments(ctx, mining);\n                emitRingMinedEvent(\n                    ring,\n                    ctx.ringIndex++,\n                    mining.feeRecipient\n                );\n            } else {\n                emit InvalidRing(ring.hash);\n            }\n        }","contract":"RingSubmitter","time":0}]}
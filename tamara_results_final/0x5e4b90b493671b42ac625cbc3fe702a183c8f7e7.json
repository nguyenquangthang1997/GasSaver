{"time":308,"results":[{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"struct-data-arrangement ","before":"\naddress destination\nuint256 value\nbytes data\nbool executed\nuint256 timestamp","after":"uint256 value\nbytes data\nuint256 timestamp\naddress destination\nbool executed\n","contract":"MultiSigWallet","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"struct-data-arrangement ","before":"\naddress destination\nuint256 value\nbytes data\nbool executed\nuint256 timestamp","after":"uint256 value\nbytes data\nuint256 timestamp\naddress destination\nbool executed\n","contract":"MultiSigWallet","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function deploy(address[] memory _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","after":"function deploy(address[] calldata _owners, uint256 _required) public {\r\n        ERC20MultiSigWallet multisigWallet = new ERC20MultiSigWallet(_owners, _required);\r\n        contracts.push(address(multisigWallet));\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            contractsByUser[_owners[i]].push(address(multisigWallet));\r\n        }\r\n    }","contract":"ERC20MultiSigDeployer","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"external-function ","before":"function submitTransaction(address destination, uint256 value, bytes memory data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","after":"function submitTransaction(address destination, uint256 value, bytes calldata data) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }","contract":"ERC20MultiSigWallet","time":0},{"type":"struct-data-arrangement ","before":"\naddress destination\nuint256 value\nbytes data\nbool executed\nuint256 timestamp","after":"uint256 value\nbytes data\nuint256 timestamp\naddress destination\nbool executed\n","contract":"MultiSigWallet","time":0}]}
{"time":58,"results":[{"type":"struct-data-arrangement ","before":"\naddress requester\nstring leethRequest\nstring leethResponse\nstring leethReview\nuint256 lrNumber\nuint256 timeStamp\nbool leethProvided","after":"string leethRequest\nstring leethResponse\nstring leethReview\nuint256 lrNumber\nuint256 timeStamp\naddress requester\nbool leethProvided\n","contract":"leethSWAP","time":0},{"type":"external-function ","before":"function writeLEETHrequest(string memory leethRequest) public {\n        _burn(_msgSender(), 1000000000000000000); // 1 LEETH burned on writing leethRequest to OpenESQ\n        \n        uint256 lrNumber = LR.add(1); \n        \n        LR = LR.add(1); // counts new entry to LR counter \n        \n        leethRequests[lrNumber] = leethRedemption( \n                msg.sender,\n                leethRequest,\n                \"PENDING\",\n                \"RESERVED\",\n                lrNumber,\n                now,\n                false);\n    }","after":"function writeLEETHrequest(string calldata leethRequest) public {\n        _burn(_msgSender(), 1000000000000000000); // 1 LEETH burned on writing leethRequest to OpenESQ\n        \n        uint256 lrNumber = LR.add(1); \n        \n        LR = LR.add(1); // counts new entry to LR counter \n        \n        leethRequests[lrNumber] = leethRedemption( \n                msg.sender,\n                leethRequest,\n                \"PENDING\",\n                \"RESERVED\",\n                lrNumber,\n                now,\n                false);\n    }","contract":"leethSWAP","time":0},{"type":"external-function ","before":"function writeLEETHresponse(uint256 lrNumber, string memory leethResponse) public {\n        require(msg.sender == 0x1C0Aa8cCD568d90d61659F060D1bFb1e6f855A20 || msg.sender == 0xcC4Dc8e92A6E30b6F5F6E65156b121D9f83Ca18F);\n        \n        leethRedemption storage lr = leethRequests[lrNumber]; // retrieve LR data\n        \n        leethRequests[lrNumber] = leethRedemption( \n                lr.requester,\n                lr.leethRequest,\n                leethResponse,\n                lr.leethReview,\n                lrNumber,\n                lr.timeStamp,\n                true);\n    }","after":"function writeLEETHresponse(uint256 lrNumber, string calldata leethResponse) public {\n        require(msg.sender == 0x1C0Aa8cCD568d90d61659F060D1bFb1e6f855A20 || msg.sender == 0xcC4Dc8e92A6E30b6F5F6E65156b121D9f83Ca18F);\n        \n        leethRedemption storage lr = leethRequests[lrNumber]; // retrieve LR data\n        \n        leethRequests[lrNumber] = leethRedemption( \n                lr.requester,\n                lr.leethRequest,\n                leethResponse,\n                lr.leethReview,\n                lrNumber,\n                lr.timeStamp,\n                true);\n    }","contract":"leethSWAP","time":0},{"type":"external-function ","before":"function writeLEETHreview(uint256 lrNumber, string memory leethReview) public {\n        leethRedemption storage lr = leethRequests[lrNumber]; // retrieve LR data\n        \n        require(msg.sender == lr.requester);\n        require(lr.leethProvided == true);\n        \n        leethRequests[lrNumber] = leethRedemption( \n                msg.sender,\n                lr.leethRequest,\n                lr.leethResponse,\n                leethReview,\n                lrNumber,\n                lr.timeStamp,\n                true);\n                \n        _mint(msg.sender, 100000000000000000); // mint 0.1 LEETH to reviewing msg.sender\n    }","after":"function writeLEETHreview(uint256 lrNumber, string calldata leethReview) public {\n        leethRedemption storage lr = leethRequests[lrNumber]; // retrieve LR data\n        \n        require(msg.sender == lr.requester);\n        require(lr.leethProvided == true);\n        \n        leethRequests[lrNumber] = leethRedemption( \n                msg.sender,\n                lr.leethRequest,\n                lr.leethResponse,\n                leethReview,\n                lrNumber,\n                lr.timeStamp,\n                true);\n                \n        _mint(msg.sender, 100000000000000000); // mint 0.1 LEETH to reviewing msg.sender\n    }","contract":"leethSWAP","time":0},{"type":"constant-restrict-modification  ","before":"address public leethContractAddress = address(this);","after":"address public constant leethContractAddress = address(this);","contract":"leethSWAP","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"Legal Engineering on Ethereum\";","after":"string public constant name = \"Legal Engineering on Ethereum\";","contract":"leethSWAP","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"LEETH\";","after":"string public constant symbol = \"LEETH\";","contract":"leethSWAP","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"leethSWAP","time":0},{"type":"constant-restrict-modification  ","before":"string public openESQopenOFFER = \"Open, ESQ LLC shall provide legal engineering on Ethereum services at the rate of 1 hour per 1 LEETH upon redemption of such LEETH hereby on calling the writeLEETHrequest function.\";","after":"string public constant openESQopenOFFER = \"Open, ESQ LLC shall provide legal engineering on Ethereum services at the rate of 1 hour per 1 LEETH upon redemption of such LEETH hereby on calling the writeLEETHrequest function.\";","contract":"leethSWAP","time":0}]}
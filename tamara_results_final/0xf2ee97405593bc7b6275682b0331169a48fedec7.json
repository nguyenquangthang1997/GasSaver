{"time":130,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, string memory tokenURI) public {\n        require(owner() == ecrecover(keccak256(abi.encodePacked(tokenId)), v, r, s), \"owner should sign tokenId\");\n        _mint(msg.sender, tokenId);\n        _setTokenURI(tokenId, tokenURI);\n    }","after":"function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, string calldata tokenURI) public {\n        require(owner() == ecrecover(keccak256(abi.encodePacked(tokenId)), v, r, s), \"owner should sign tokenId\");\n        _mint(msg.sender, tokenId);\n        _setTokenURI(tokenId, tokenURI);\n    }","contract":"MintableToken","time":0},{"type":"external-function ","before":"function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","after":"function onERC721Received(address, address, uint256, bytes calldata) public returns (bytes4) {\n        return this.onERC721Received.selector;\n    }","contract":"TokenSale","time":0}]}
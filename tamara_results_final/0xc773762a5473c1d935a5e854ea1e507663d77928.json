{"time":12,"results":[{"type":"external-function ","before":"function setContenthashBySignature (\n        bytes32 node,\n        bytes memory hash,\n        uint64 version,\n        Signature memory signature\n    ) public\n    {\n        require(\n            signer == verify(\n                keccak256(\n                    abi.encodePacked(\n                        hash,\n                        version\n                    )\n                ),\n                signature\n            ),\n            \"Invalid signature\"\n        );\n\n        // update only if new version is higher than current version\n        if (version > records[node].version) {\n            records[node].contenthash = hash;\n            records[node].version = version;\n            emit ContenthashChanged(node, hash);\n        }\n    }","after":"function setContenthashBySignature (\n        bytes32 node,\n        bytes calldata hash,\n        uint64 version,\n        Signature calldata signature\n    ) public\n    {\n        require(\n            signer == verify(\n                keccak256(\n                    abi.encodePacked(\n                        hash,\n                        version\n                    )\n                ),\n                signature\n            ),\n            \"Invalid signature\"\n        );\n\n        // update only if new version is higher than current version\n        if (version > records[node].version) {\n            records[node].contenthash = hash;\n            records[node].version = version;\n            emit ContenthashChanged(node, hash);\n        }\n    }","contract":"ResolverContenthashSignerENS","time":0}]}
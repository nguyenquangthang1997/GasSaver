{"time":229,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function addBuyOrder(\n        uint    _id,\n        string memory _name,\n        uint   _price\n        ) public{\n    Product memory _product = Product({\n        id: _id,\n        name: _name,\n        price: _price\n      });\n    IERC20 iERC20 = IERC20(egorasEUSD);\n    require(iERC20.balanceOf(msg.sender) >= _price, \" Insufficient funds\");\n    uint256 newProductID = products.push(_product) - 1;\n    require(iERC20.transferFrom(msg.sender, address(this), _price), \"Fail to transfer\");\n    accountBalance[msg.sender] = accountBalance[msg.sender].add(_price);\n    uint256 serverId = _id;\n   _mint(msg.sender, newProductID);\n   string memory uri = Strings.strConcat(\n            egorasBaseImageUri,\n            Strings.uint2str(serverId),\n            Strings.uint2str(newProductID)\n        );\n   _setTokenURI(newProductID, uri);\n   emit productAdded(\n        _id,\n        _price,\n        newProductID\n         );\n\n\n    }","after":"function addBuyOrder(\n        uint    _id,\n        string calldata _name,\n        uint   _price\n        ) public{\n    Product memory _product = Product({\n        id: _id,\n        name: _name,\n        price: _price\n      });\n    IERC20 iERC20 = IERC20(egorasEUSD);\n    require(iERC20.balanceOf(msg.sender) >= _price, \" Insufficient funds\");\n    uint256 newProductID = products.push(_product) - 1;\n    require(iERC20.transferFrom(msg.sender, address(this), _price), \"Fail to transfer\");\n    accountBalance[msg.sender] = accountBalance[msg.sender].add(_price);\n    uint256 serverId = _id;\n   _mint(msg.sender, newProductID);\n   string memory uri = Strings.strConcat(\n            egorasBaseImageUri,\n            Strings.uint2str(serverId),\n            Strings.uint2str(newProductID)\n        );\n   _setTokenURI(newProductID, uri);\n   emit productAdded(\n        _id,\n        _price,\n        newProductID\n         );\n\n\n    }","contract":"EgorasMarket","time":0},{"type":"external-function ","before":"function setEgorasBaseImageUri(string memory _newEgorasBaseImageUri) public onlyCEO{\n     egorasBaseImageUri = _newEgorasBaseImageUri;\n    }","after":"function setEgorasBaseImageUri(string calldata _newEgorasBaseImageUri) public onlyCEO{\n     egorasBaseImageUri = _newEgorasBaseImageUri;\n    }","contract":"EgorasMarket","time":0}]}
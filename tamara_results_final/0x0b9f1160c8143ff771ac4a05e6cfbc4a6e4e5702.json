{"time":58,"results":[{"type":"state-data-arrangement ","before":"\nstring public constant name = \"WTK\";\nstring public constant symbol = \"WTK\";\nuint8 public constant decimals = 2;\nuint256 constant internal salesPool = 27400000000;\nuint256 constant internal retainedPool = 18400000000;\nuint256 internal salesIssued = 0;\nuint256 internal retainedIssued = 0;\nbool public isIcoRunning = false;\nbool public isTransferAllowed = false;\naddress public owner;\nmapping(address => uint256) balances;\nmapping(address => mapping (address => uint256)) internal allowed;\nmapping(address => bool) admins;\nmapping(address => bool) whitelist;","after":"string public constant name = \"WTK\";\nstring public constant symbol = \"WTK\";\nuint256 constant internal salesPool = 27400000000;\nuint256 constant internal retainedPool = 18400000000;\nuint256 internal salesIssued = 0;\nuint256 internal retainedIssued = 0;\nmapping(address => uint256) balances;\nmapping(address => mapping (address => uint256)) internal allowed;\nmapping(address => bool) admins;\nmapping(address => bool) whitelist;\naddress public owner;\nuint8 public constant decimals = 2;\nbool public isIcoRunning = false;\nbool public isTransferAllowed = false;\n","contract":"WADZToken","time":0},{"type":"external-function ","before":"function setAdministrators(address[] memory _addresses) public onlyOwner {\n        for(uint i=0; i < _addresses.length; i++) {\n            admins[_addresses[i]] = true;\n        }\n       \n        emit AdminsAdded(_addresses);\n    }","after":"function setAdministrators(address[] calldata _addresses) public onlyOwner {\n        for(uint i=0; i < _addresses.length; i++) {\n            admins[_addresses[i]] = true;\n        }\n       \n        emit AdminsAdded(_addresses);\n    }","contract":"WADZToken","time":0},{"type":"external-function ","before":"function whitelistAddresses(address[] memory _addresses) public onlyAdmin {\n        for(uint i=0; i < _addresses.length; i++) {\n            whitelist[_addresses[i]] = true;\n        }\n       \n        emit Whitelisted(_addresses);\n    }","after":"function whitelistAddresses(address[] calldata _addresses) public onlyAdmin {\n        for(uint i=0; i < _addresses.length; i++) {\n            whitelist[_addresses[i]] = true;\n        }\n       \n        emit Whitelisted(_addresses);\n    }","contract":"WADZToken","time":0}]}
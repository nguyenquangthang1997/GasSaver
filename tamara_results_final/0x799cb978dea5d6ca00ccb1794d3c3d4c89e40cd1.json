{"time":55,"results":[{"type":"external-function ","before":" function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","after":" function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":"  function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n   ","after":"  function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n   ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":"   function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n  ","after":"   function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n  ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":" function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","after":" function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":"  function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n   ","after":"  function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n   ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":"   function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n  ","after":"   function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n  ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":" function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","after":" function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":"  function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n   ","after":"  function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n   ","contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":"   function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n  ","after":"   function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n  ","contract":"BinaryArbitrableProxy","time":0}]}
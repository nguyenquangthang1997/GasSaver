{"time":141,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function mintStamps(address _to, uint256 _amount, string memory _stamp) public returns (uint256[] memory) {\n        address _self = address(this);\n        uint256 i;\n        uint256 _tokenId;\n        uint256 _totalDai;\n        uint256[] memory _tokenIds = new uint256[](_amount);\n\n        for (i = 0; i < _amount; ++i) {\n            _totalDai = requiredFunding.add(_totalDai);\n\n            _tokenId = (totalMintedTokens.add(i+1));\n            _tokenIds[i] = _tokenId;\n            _mint(_to, _tokenId);\n    \t    _setTokenURI(_tokenId, _stamp);\n        }\n        totalMintedTokens = totalMintedTokens.add(_amount);\n\n        if (_totalDai > 0) {\n            // Transfer DAI from User to Contract\n            _collectRequiredDai(msg.sender, _totalDai);\n\n            uint256 _balance = chai.balanceOf(_self);\n            for (i = 0; i < _amount; ++i) {\n                _tokenId = _tokenIds[i];\n\n                // Tokenize Interest\n                chai.join(_self, requiredFunding);\n\n                // Track Chai in each Token\n                 chaiBalanceByTokenId[_tokenId] = _totalChaiForToken(chai.balanceOf(_self).sub(_balance));\n                _balance = chai.balanceOf(_self);\n            }\n        }\n        return _tokenIds;\n    }","after":"function mintStamps(address _to, uint256 _amount, string calldata _stamp) public returns (uint256[] memory) {\n        address _self = address(this);\n        uint256 i;\n        uint256 _tokenId;\n        uint256 _totalDai;\n        uint256[] memory _tokenIds = new uint256[](_amount);\n\n        for (i = 0; i < _amount; ++i) {\n            _totalDai = requiredFunding.add(_totalDai);\n\n            _tokenId = (totalMintedTokens.add(i+1));\n            _tokenIds[i] = _tokenId;\n            _mint(_to, _tokenId);\n    \t    _setTokenURI(_tokenId, _stamp);\n        }\n        totalMintedTokens = totalMintedTokens.add(_amount);\n\n        if (_totalDai > 0) {\n            // Transfer DAI from User to Contract\n            _collectRequiredDai(msg.sender, _totalDai);\n\n            uint256 _balance = chai.balanceOf(_self);\n            for (i = 0; i < _amount; ++i) {\n                _tokenId = _tokenIds[i];\n\n                // Tokenize Interest\n                chai.join(_self, requiredFunding);\n\n                // Track Chai in each Token\n                 chaiBalanceByTokenId[_tokenId] = _totalChaiForToken(chai.balanceOf(_self).sub(_balance));\n                _balance = chai.balanceOf(_self);\n            }\n        }\n        return _tokenIds;\n    }","contract":"MoneyStampsERC721","time":1},{"type":"external-function ","before":"function burnStamps(uint256[] memory _tokenIds) public {\n        uint256 _tokenId;\n        uint256 _totalChai;\n        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n            _tokenId = _tokenIds[i];\n\n            // Burn Token\n            _burn(msg.sender, _tokenId);\n\n            // Payout Dai + Interest\n            _totalChai = chaiBalanceByTokenId[_tokenId].add(_totalChai);\n            chaiBalanceByTokenId[_tokenId] = 0;\n        }\n        _payoutFundedDai(msg.sender, _totalChai);\n    }","after":"function burnStamps(uint256[] calldata _tokenIds) public {\n        uint256 _tokenId;\n        uint256 _totalChai;\n        for (uint256 i = 0; i < _tokenIds.length; ++i) {\n            _tokenId = _tokenIds[i];\n\n            // Burn Token\n            _burn(msg.sender, _tokenId);\n\n            // Payout Dai + Interest\n            _totalChai = chaiBalanceByTokenId[_tokenId].add(_totalChai);\n            chaiBalanceByTokenId[_tokenId] = 0;\n        }\n        _payoutFundedDai(msg.sender, _totalChai);\n    }","contract":"MoneyStampsERC721","time":0},{"type":"constant-restrict-modification  ","before":"bytes16 public version = \"v0.0.1\";","after":"bytes16 public constant version = \"v0.0.1\";","contract":"MoneyStampsERC721","time":0}]}
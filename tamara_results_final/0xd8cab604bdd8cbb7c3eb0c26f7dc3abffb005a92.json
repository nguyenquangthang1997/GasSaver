{"time":120,"results":[{"type":"external-function ","before":"\n    function executeTransaction(\n        address _destination,\n        uint256 _value,\n        bytes memory _data,\n        uint256 _gasLimit\n    )\n        public\n        onlyValidAuthKeyOrSelf\n        returns (bytes memory)\n    {\n        return _executeTransaction(_destination, _value, _data, _gasLimit);\n","after":"\n    function executeTransaction(\n        address _destination,\n        uint256 _value,\n        bytes calldata _data,\n        uint256 _gasLimit\n    )\n        public\n        onlyValidAuthKeyOrSelf\n        returns (bytes memory)\n    {\n        return _executeTransaction(_destination, _value, _data, _gasLimit);\n","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"\n    function addMultipleAuthKeys(address[] memory _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            addAuthKey(_authKeys[i]);\n        }\n","after":"\n    function addMultipleAuthKeys(address[] calldata _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            addAuthKey(_authKeys[i]);\n        }\n","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"\n    function removeMultipleAuthKeys(address[] memory _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            removeAuthKey(_authKeys[i]);\n        }\n","after":"\n    function removeMultipleAuthKeys(address[] calldata _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            removeAuthKey(_authKeys[i]);\n        }\n","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"\n    function swapMultipleAuthKeys(\n        address[] memory _oldAuthKeys,\n        address[] memory _newAuthKeys\n    )\n        public\n    {\n        require(_oldAuthKeys.length == _newAuthKeys.length, \"Input arrays not equal length\");\n        for (uint256 i = 0; i < _oldAuthKeys.length; i++) {\n            swapAuthKeys(_oldAuthKeys[i], _newAuthKeys[i]);\n        }\n","after":"\n    function swapMultipleAuthKeys(\n        address[] calldata _oldAuthKeys,\n        address[] calldata _newAuthKeys\n    )\n        public\n    {\n        require(_oldAuthKeys.length == _newAuthKeys.length, \"Input arrays not equal length\");\n        for (uint256 i = 0; i < _oldAuthKeys.length; i++) {\n            swapAuthKeys(_oldAuthKeys[i], _newAuthKeys[i]);\n        }\n","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"\n    function executeMultipleLoginKeyMetaTx(\n        address[] memory _destinations,\n        bytes[] memory _datas,\n        uint256[] memory _values,\n        uint256[] memory _gasLimits,\n        bytes[] memory _transactionDataSignatures,\n        bytes memory _loginKeyAuthorizationSignature\n    )\n        public\n        returns (bytes[] memory)\n    {\n        uint256 startGas = gasleft();\n\n        // Verify data length\n        verifyLoginKeyParamDataLength(\n            _destinations, _datas, _values, _gasLimits, _transactionDataSignatures\n        );\n\n        // Execute transactions individually\n        bytes[] memory returnValues = new bytes[](_destinations.length);\n        for(uint i = 0; i < _destinations.length; i++) {\n            returnValues[i] = _executeLoginKeyMetaTx(\n                _destinations[i], _datas[i], _values[i], _gasLimits[i], _transactionDataSignatures[i], _loginKeyAuthorizationSignature\n            );\n        }\n\n        // Refund gas costs\n        _issueRefund(startGas, tx.gasprice);\n\n        return returnValues;\n","after":"\n    function executeMultipleLoginKeyMetaTx(\n        address[] calldata _destinations,\n        bytes[] calldata _datas,\n        uint256[] calldata _values,\n        uint256[] calldata _gasLimits,\n        bytes[] calldata _transactionDataSignatures,\n        bytes calldata _loginKeyAuthorizationSignature\n    )\n        public\n        returns (bytes[] memory)\n    {\n        uint256 startGas = gasleft();\n\n        // Verify data length\n        verifyLoginKeyParamDataLength(\n            _destinations, _datas, _values, _gasLimits, _transactionDataSignatures\n        );\n\n        // Execute transactions individually\n        bytes[] memory returnValues = new bytes[](_destinations.length);\n        for(uint i = 0; i < _destinations.length; i++) {\n            returnValues[i] = _executeLoginKeyMetaTx(\n                _destinations[i], _datas[i], _values[i], _gasLimits[i], _transactionDataSignatures[i], _loginKeyAuthorizationSignature\n            );\n        }\n\n        // Refund gas costs\n        _issueRefund(startGas, tx.gasprice);\n\n        return returnValues;\n","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"\n    function executeMultipleAuthKeyMetaTx(\n        address[] memory _destinations,\n        bytes[] memory _datas,\n        uint256[] memory _values,\n        uint256[] memory _gasLimits,\n        bytes[] memory _transactionDataSignatures\n    )\n        public\n        returns (bytes[] memory)\n    {\n        uint256 startGas = gasleft();\n\n        // Verify data length\n        verifyAuthKeyParamDataLength(\n            _destinations, _datas, _values, _gasLimits, _transactionDataSignatures\n        );\n\n        // Execute transactions individually\n        bytes[] memory returnValues = new bytes[](_destinations.length);\n        for(uint i = 0; i < _destinations.length; i++) {\n            returnValues[i] = _executeAuthKeyMetaTx(\n                _destinations[i], _datas[i], _values[i], _gasLimits[i], _transactionDataSignatures[i]\n            );\n        }\n\n        // Refund gas costs\n        _issueRefund(startGas, tx.gasprice);\n\n        return returnValues;\n","after":"\n    function executeMultipleAuthKeyMetaTx(\n        address[] calldata _destinations,\n        bytes[] calldata _datas,\n        uint256[] calldata _values,\n        uint256[] calldata _gasLimits,\n        bytes[] calldata _transactionDataSignatures\n    )\n        public\n        returns (bytes[] memory)\n    {\n        uint256 startGas = gasleft();\n\n        // Verify data length\n        verifyAuthKeyParamDataLength(\n            _destinations, _datas, _values, _gasLimits, _transactionDataSignatures\n        );\n\n        // Execute transactions individually\n        bytes[] memory returnValues = new bytes[](_destinations.length);\n        for(uint i = 0; i < _destinations.length; i++) {\n            returnValues[i] = _executeAuthKeyMetaTx(\n                _destinations[i], _datas[i], _values[i], _gasLimits[i], _transactionDataSignatures[i]\n            );\n        }\n\n        // Refund gas costs\n        _issueRefund(startGas, tx.gasprice);\n\n        return returnValues;\n","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"\n    function upgradeToAndCall(\n        address _newImplementation, \n        bytes memory _data\n    ) \n        public \n        onlySelf\n    {\n        setImplementation(_newImplementation);\n        (bool success,) = _newImplementation.delegatecall(_data);\n        require(success);\n        emit Upgraded(_newImplementation);\n","after":"\n    function upgradeToAndCall(\n        address _newImplementation, \n        bytes calldata _data\n    ) \n        public \n        onlySelf\n    {\n        setImplementation(_newImplementation);\n        (bool success,) = _newImplementation.delegatecall(_data);\n        require(success);\n        emit Upgraded(_newImplementation);\n","contract":"AuthereumAccount","time":0}]}
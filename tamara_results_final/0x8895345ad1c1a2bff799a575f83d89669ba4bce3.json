{"time":65,"results":[{"type":"de-morgan-condition ","before":"!(char >= 0x31 && char <= 0x39) &&\n               !(char >= 0x41 && char <= 0x48)","after":"!((char >= 0x31 && char <= 0x39) &&\n               (char >= 0x41 && char <= 0x48))","loc":{"start":{"line":442,"column":15},"end":{"line":443,"column":45}},"contract":"Bridge","time":0},{"type":"de-morgan-condition ","before":"!(char >= 0x61 && char <= 0x7A) && \n               !(char >= 0x31 && char <= 0x35)","after":"!((char >= 0x61 && char <= 0x7A) && \n               (char >= 0x31 && char <= 0x35))","loc":{"start":{"line":462,"column":15},"end":{"line":463,"column":45}},"contract":"Bridge","time":0},{"type":"external-function ","before":"function convert(string memory _accountName, string memory _accountOpenkey, uint256 _amount)\n    stageAfter(Stage.Deployed)\n    stageBefore(Stage.Finished)\n    public {\n\n        require(currentStage != Stage.Pause, \"You can't convert tokens during a pause\");        \n        // openkey and account name validation check \n        require(isValidAccountName(_accountName), \"invalid account name\");\n        require(isValidOpenkey(_accountOpenkey), \"invalid openkey\");\n        // can not convert less that minimum amount\n        require(_amount >= minTransferAmount, \"too few tokens\");\n\n        string memory openkey = nameToOpenkey[_accountName];\n        \n        require(\n                keccak256(abi.encodePacked(openkey)) == keccak256(abi.encodePacked(_accountOpenkey)) || \n                bytes(openkey).length == 0,\n                \"account already exist with another openkey\"\n            );\n    \n        // round tokens amount to 4 decimals\n        uint256 intValue = _amount.div(border);\n        uint256 roundedValue = intValue.mul(border);\n        \n        // transfer tokens\n        require(token.transferFrom(msg.sender, address(this), roundedValue), \"transferFrom failed\");\n\n        if (currentStage == Stage.Claim) {\n            \n            string memory registeredAccountName = claims[msg.sender].accountName;\n            require(\n                keccak256(abi.encodePacked(registeredAccountName)) == keccak256(abi.encodePacked(_accountName)) || \n                bytes(registeredAccountName).length == 0,\n                \"you have already registered an account\"\n            );\n\n            // Claim stage            \n            addNewClaimParticipant(msg.sender);\n            uint256 previousAmount = claims[msg.sender].amount;\n            claims[msg.sender] = Transfer(_accountName, _accountOpenkey, roundedValue.add(previousAmount));\n            emit Claim(msg.sender, _accountName, _accountOpenkey, roundedValue, now);\n        \n        } else if(currentStage == Stage.Swap) {\n            // Swap stage\n            addNewSwapParticipant(msg.sender);\n            swaps[msg.sender].push(Transfer(_accountName, _accountOpenkey, roundedValue));\n            emit Swap(msg.sender, _accountName, _accountOpenkey, roundedValue, now);\n        }\n        \n        if(bytes(openkey).length == 0) {\n            nameToOpenkey[_accountName] = _accountOpenkey;\n        }\n    }","after":"function convert(string calldata _accountName, string calldata _accountOpenkey, uint256 _amount)\n    stageAfter(Stage.Deployed)\n    stageBefore(Stage.Finished)\n    public {\n\n        require(currentStage != Stage.Pause, \"You can't convert tokens during a pause\");        \n        // openkey and account name validation check \n        require(isValidAccountName(_accountName), \"invalid account name\");\n        require(isValidOpenkey(_accountOpenkey), \"invalid openkey\");\n        // can not convert less that minimum amount\n        require(_amount >= minTransferAmount, \"too few tokens\");\n\n        string memory openkey = nameToOpenkey[_accountName];\n        \n        require(\n                keccak256(abi.encodePacked(openkey)) == keccak256(abi.encodePacked(_accountOpenkey)) || \n                bytes(openkey).length == 0,\n                \"account already exist with another openkey\"\n            );\n    \n        // round tokens amount to 4 decimals\n        uint256 intValue = _amount.div(border);\n        uint256 roundedValue = intValue.mul(border);\n        \n        // transfer tokens\n        require(token.transferFrom(msg.sender, address(this), roundedValue), \"transferFrom failed\");\n\n        if (currentStage == Stage.Claim) {\n            \n            string memory registeredAccountName = claims[msg.sender].accountName;\n            require(\n                keccak256(abi.encodePacked(registeredAccountName)) == keccak256(abi.encodePacked(_accountName)) || \n                bytes(registeredAccountName).length == 0,\n                \"you have already registered an account\"\n            );\n\n            // Claim stage            \n            addNewClaimParticipant(msg.sender);\n            uint256 previousAmount = claims[msg.sender].amount;\n            claims[msg.sender] = Transfer(_accountName, _accountOpenkey, roundedValue.add(previousAmount));\n            emit Claim(msg.sender, _accountName, _accountOpenkey, roundedValue, now);\n        \n        } else if(currentStage == Stage.Swap) {\n            // Swap stage\n            addNewSwapParticipant(msg.sender);\n            swaps[msg.sender].push(Transfer(_accountName, _accountOpenkey, roundedValue));\n            emit Swap(msg.sender, _accountName, _accountOpenkey, roundedValue, now);\n        }\n        \n        if(bytes(openkey).length == 0) {\n            nameToOpenkey[_accountName] = _accountOpenkey;\n        }\n    }","contract":"Bridge","time":0}]}
{"time":16,"results":[{"type":"external-function ","before":"function registerDDR(\n    \taddress client,\n    \taddress provider,\n    \tERC20 ddrToken,\n    \tstring memory deliverable,\n    \tstring memory governingLawForum,\n    \tuint256 retainerDuration,\n    \tuint256 deliverableRate,\n    \tuint256 payCap) public {\n        \trequire(deliverableRate <= payCap, \"constructor: deliverableRate cannot exceed payCap\"); // **program safety check / economics**\n        \tuint256 ddrNumber = RDDR + 1; // **reflects new rddr value for tracking payments**\n        \tuint256 paid = 0; // **initial zero value for rddr** \n        \tuint256 timeStamp = now; // **block.timestamp of rddr**\n        \tuint256 retainerTermination = timeStamp + retainerDuration; // **rddr termination date in UnixTime**\n    \n        \tRDDR = RDDR + 1; // counts new entry to RDDR\n    \n        \trddr[ddrNumber] = DDR( // populate rddr data \n                \tclient,\n                \tprovider,\n                \tddrToken,\n                \tdeliverable,\n                \tgoverningLawForum,\n                \tddrNumber,\n                \ttimeStamp,\n                \tretainerDuration,\n                \tretainerTermination,\n                \tdeliverableRate,\n                \tpaid,\n                \tpayCap);\n        \t \n            \temit Registered(client, provider); \n        \t}","after":"function registerDDR(\n    \taddress client,\n    \taddress provider,\n    \tERC20 ddrToken,\n    \tstring calldata deliverable,\n    \tstring calldata governingLawForum,\n    \tuint256 retainerDuration,\n    \tuint256 deliverableRate,\n    \tuint256 payCap) public {\n        \trequire(deliverableRate <= payCap, \"constructor: deliverableRate cannot exceed payCap\"); // **program safety check / economics**\n        \tuint256 ddrNumber = RDDR + 1; // **reflects new rddr value for tracking payments**\n        \tuint256 paid = 0; // **initial zero value for rddr** \n        \tuint256 timeStamp = now; // **block.timestamp of rddr**\n        \tuint256 retainerTermination = timeStamp + retainerDuration; // **rddr termination date in UnixTime**\n    \n        \tRDDR = RDDR + 1; // counts new entry to RDDR\n    \n        \trddr[ddrNumber] = DDR( // populate rddr data \n                \tclient,\n                \tprovider,\n                \tddrToken,\n                \tdeliverable,\n                \tgoverningLawForum,\n                \tddrNumber,\n                \ttimeStamp,\n                \tretainerDuration,\n                \tretainerTermination,\n                \tdeliverableRate,\n                \tpaid,\n                \tpayCap);\n        \t \n            \temit Registered(client, provider); \n        \t}","contract":"DigitalDollarRetainerRegistry","time":0},{"type":"constant-restrict-modification  ","before":"string public ddrTerms = \"|| Establishing a digital retainer hereby as [[ddrNumber]] and acknowledging mutual consideration and agreement, Client, identified by ethereum address 0x[[client]], commits to perform under this digital payment transactional script capped at $[[payCap]] digital dollar value denominated in 0x[[ddrToken]] for benefit of Provider, identified by ethereum address 0x[[provider]], in exchange for prompt satisfaction of the following, [[deliverable]], to Client by Provider upon scripted payments set at the rate of $[[deliverableRate]] per deliverable, with such retainer relationship not to exceed [[retainerDuration]] seconds and to be governed by choice of [[governingLawForum]] law and 'either/or' arbitration rules in [[governingLawForum]]. ||\";","after":"string public constant ddrTerms = \"|| Establishing a digital retainer hereby as [[ddrNumber]] and acknowledging mutual consideration and agreement, Client, identified by ethereum address 0x[[client]], commits to perform under this digital payment transactional script capped at $[[payCap]] digital dollar value denominated in 0x[[ddrToken]] for benefit of Provider, identified by ethereum address 0x[[provider]], in exchange for prompt satisfaction of the following, [[deliverable]], to Client by Provider upon scripted payments set at the rate of $[[deliverableRate]] per deliverable, with such retainer relationship not to exceed [[retainerDuration]] seconds and to be governed by choice of [[governingLawForum]] law and 'either/or' arbitration rules in [[governingLawForum]]. ||\";","contract":"DigitalDollarRetainerRegistry","time":0}]}
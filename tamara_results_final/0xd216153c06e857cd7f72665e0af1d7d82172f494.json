{"time":210,"results":[{"type":"external-function ","before":"   function registerRelay(uint256 transactionFee, string memory url) public {\n        address relay = msg.sender;\n\n        require(relay == tx.origin, \"Contracts cannot register as relays\");\n        require(relays[relay].state == RelayState.Staked || relays[relay].state == RelayState.Registered, \"wrong state for stake\");\n        require(relay.balance >= minimumRelayBalance, \"balance lower than minimum\");\n\n        if (relays[relay].state != RelayState.Registered) {\n            relays[relay].state = RelayState.Registered;\n        }\n\n        emit RelayAdded(relay, relays[relay].owner, transactionFee, relays[relay].stake, relays[relay].unstakeDelay, url);\n  ","after":"   function registerRelay(uint256 transactionFee, string calldata url) public {\n        address relay = msg.sender;\n\n        require(relay == tx.origin, \"Contracts cannot register as relays\");\n        require(relays[relay].state == RelayState.Staked || relays[relay].state == RelayState.Registered, \"wrong state for stake\");\n        require(relay.balance >= minimumRelayBalance, \"balance lower than minimum\");\n\n        if (relays[relay].state != RelayState.Registered) {\n            relays[relay].state = RelayState.Registered;\n        }\n\n        emit RelayAdded(relay, relays[relay].owner, transactionFee, relays[relay].stake, relays[relay].unstakeDelay, url);\n  ","contract":"RelayHub","time":0},{"type":"external-function ","before":"   function relayCall(\n        address from,\n        address recipient,\n        bytes memory encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes memory signature,\n        bytes memory approvalData\n    )\n    public\n    {\n        uint256 initialGas = gasleft();\n\n        // Initial soundness checks - the relay must make sure these pass, or it will pay for a reverted transaction.\n\n        // The relay must be registered\n        require(relays[msg.sender].state == RelayState.Registered, \"Unknown relay\");\n\n        // A relay may use a higher gas price than the one requested by the signer (to e.g. get the transaction in a\n        // block faster), but it must not be lower. The recipient will be charged for the requested gas price, not the\n        // one used in the transaction.\n        require(gasPrice <= tx.gasprice, \"Invalid gas price\");\n\n        // This transaction must have enough gas to forward the call to the recipient with the requested amount, and not\n        // run out of gas later in this function.\n        require(initialGas >= SafeMath.sub(requiredGas(gasLimit), gasOverhead), \"Not enough gasleft()\");\n\n        // We don't yet know how much gas will be used by the recipient, so we make sure there are enough funds to pay\n        // for the maximum possible charge.\n        require(maxPossibleCharge(gasLimit, gasPrice, transactionFee) <= balances[recipient], \"Recipient balance too low\");\n\n        bytes4 functionSelector = LibBytes.readBytes4(encodedFunction, 0);\n\n        bytes memory recipientContext;\n        {\n            // We now verify the legitimacy of the transaction (it must be signed by the sender, and not be replayed),\n            // and that the recpient will accept to be charged by it.\n            uint256 preconditionCheck;\n            (preconditionCheck, recipientContext) = canRelay(msg.sender, from, recipient, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData);\n\n            if (preconditionCheck != uint256(PreconditionCheck.OK)) {\n                emit CanRelayFailed(msg.sender, from, recipient, functionSelector, preconditionCheck);\n                return;\n            }\n        }\n\n        // From this point on, this transaction will not revert nor run out of gas, and the recipient will be charged\n        // for the gas spent.\n\n        // The sender's nonce is advanced to prevent transaction replays.\n        nonces[from]++;\n\n        // Calls to the recipient are performed atomically inside an inner transaction which may revert in case of\n        // errors in the recipient. In either case (revert or regular execution) the return data encodes the\n        // RelayCallStatus value.\n        RelayCallStatus status;\n        {\n            uint256 preChecksGas = initialGas - gasleft();\n            bytes memory encodedFunctionWithFrom = abi.encodePacked(encodedFunction, from);\n            bytes memory data = abi.encodeWithSelector(this.recipientCallsAtomic.selector, recipient, encodedFunctionWithFrom, transactionFee, gasPrice, gasLimit, preChecksGas, recipientContext);\n            (, bytes memory relayCallStatus) = address(this).call(data);\n            status = abi.decode(relayCallStatus, (RelayCallStatus));\n        }\n\n        // We now perform the actual charge calculation, based on the measured gas used\n        uint256 charge = calculateCharge(\n            getChargeableGas(initialGas - gasleft(), false),\n            gasPrice,\n            transactionFee\n        );\n\n        // We've already checked that the recipient has enough balance to pay for the relayed transaction, this is only\n        // a sanity check to prevent overflows in case of bugs.\n        require(balances[recipient] >= charge, \"Should not get here\");\n        balances[recipient] -= charge;\n        balances[relays[msg.sender].owner] += charge;\n\n        emit TransactionRelayed(msg.sender, from, recipient, functionSelector, status, charge);\n  ","after":"   function relayCall(\n        address from,\n        address recipient,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata signature,\n        bytes calldata approvalData\n    )\n    public\n    {\n        uint256 initialGas = gasleft();\n\n        // Initial soundness checks - the relay must make sure these pass, or it will pay for a reverted transaction.\n\n        // The relay must be registered\n        require(relays[msg.sender].state == RelayState.Registered, \"Unknown relay\");\n\n        // A relay may use a higher gas price than the one requested by the signer (to e.g. get the transaction in a\n        // block faster), but it must not be lower. The recipient will be charged for the requested gas price, not the\n        // one used in the transaction.\n        require(gasPrice <= tx.gasprice, \"Invalid gas price\");\n\n        // This transaction must have enough gas to forward the call to the recipient with the requested amount, and not\n        // run out of gas later in this function.\n        require(initialGas >= SafeMath.sub(requiredGas(gasLimit), gasOverhead), \"Not enough gasleft()\");\n\n        // We don't yet know how much gas will be used by the recipient, so we make sure there are enough funds to pay\n        // for the maximum possible charge.\n        require(maxPossibleCharge(gasLimit, gasPrice, transactionFee) <= balances[recipient], \"Recipient balance too low\");\n\n        bytes4 functionSelector = LibBytes.readBytes4(encodedFunction, 0);\n\n        bytes memory recipientContext;\n        {\n            // We now verify the legitimacy of the transaction (it must be signed by the sender, and not be replayed),\n            // and that the recpient will accept to be charged by it.\n            uint256 preconditionCheck;\n            (preconditionCheck, recipientContext) = canRelay(msg.sender, from, recipient, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData);\n\n            if (preconditionCheck != uint256(PreconditionCheck.OK)) {\n                emit CanRelayFailed(msg.sender, from, recipient, functionSelector, preconditionCheck);\n                return;\n            }\n        }\n\n        // From this point on, this transaction will not revert nor run out of gas, and the recipient will be charged\n        // for the gas spent.\n\n        // The sender's nonce is advanced to prevent transaction replays.\n        nonces[from]++;\n\n        // Calls to the recipient are performed atomically inside an inner transaction which may revert in case of\n        // errors in the recipient. In either case (revert or regular execution) the return data encodes the\n        // RelayCallStatus value.\n        RelayCallStatus status;\n        {\n            uint256 preChecksGas = initialGas - gasleft();\n            bytes memory encodedFunctionWithFrom = abi.encodePacked(encodedFunction, from);\n            bytes memory data = abi.encodeWithSelector(this.recipientCallsAtomic.selector, recipient, encodedFunctionWithFrom, transactionFee, gasPrice, gasLimit, preChecksGas, recipientContext);\n            (, bytes memory relayCallStatus) = address(this).call(data);\n            status = abi.decode(relayCallStatus, (RelayCallStatus));\n        }\n\n        // We now perform the actual charge calculation, based on the measured gas used\n        uint256 charge = calculateCharge(\n            getChargeableGas(initialGas - gasleft(), false),\n            gasPrice,\n            transactionFee\n        );\n\n        // We've already checked that the recipient has enough balance to pay for the relayed transaction, this is only\n        // a sanity check to prevent overflows in case of bugs.\n        require(balances[recipient] >= charge, \"Should not get here\");\n        balances[recipient] -= charge;\n        balances[relays[msg.sender].owner] += charge;\n\n        emit TransactionRelayed(msg.sender, from, recipient, functionSelector, status, charge);\n  ","contract":"RelayHub","time":0},{"type":"external-function ","before":"   function penalizeRepeatedNonce(bytes memory unsignedTx1, bytes memory signature1, bytes memory unsignedTx2, bytes memory signature2) public {\n        // Can be called by anyone.\n        // If a relay attacked the system by signing multiple transactions with the same nonce (so only one is accepted), anyone can grab both transactions from the blockchain and submit them here.\n        // Check whether unsignedTx1 != unsignedTx2, that both are signed by the same address, and that unsignedTx1.nonce == unsignedTx2.nonce.  If all conditions are met, relay is considered an \"offending relay\".\n        // The offending relay will be unregistered immediately, its stake will be forfeited and given to the address who reported it (msg.sender), thus incentivizing anyone to report offending relays.\n        // If reported via a relay, the forfeited stake is split between msg.sender (the relay used for reporting) and the address that reported it.\n\n        address addr1 = keccak256(abi.encodePacked(unsignedTx1)).recover(signature1);\n        address addr2 = keccak256(abi.encodePacked(unsignedTx2)).recover(signature2);\n\n        require(addr1 == addr2, \"Different signer\");\n\n        Transaction memory decodedTx1 = decodeTransaction(unsignedTx1);\n        Transaction memory decodedTx2 = decodeTransaction(unsignedTx2);\n\n        //checking that the same nonce is used in both transaction, with both signed by the same address and the actual data is different\n        // note: we compare the hash of the tx to save gas over iterating both byte arrays\n        require(decodedTx1.nonce == decodedTx2.nonce, \"Different nonce\");\n\n        bytes memory dataToCheck1 = abi.encodePacked(decodedTx1.data, decodedTx1.gasLimit, decodedTx1.to, decodedTx1.value);\n        bytes memory dataToCheck2 = abi.encodePacked(decodedTx2.data, decodedTx2.gasLimit, decodedTx2.to, decodedTx2.value);\n        require(keccak256(dataToCheck1) != keccak256(dataToCheck2), \"tx is equal\");\n\n        penalize(addr1);\n  ","after":"   function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) public {\n        // Can be called by anyone.\n        // If a relay attacked the system by signing multiple transactions with the same nonce (so only one is accepted), anyone can grab both transactions from the blockchain and submit them here.\n        // Check whether unsignedTx1 != unsignedTx2, that both are signed by the same address, and that unsignedTx1.nonce == unsignedTx2.nonce.  If all conditions are met, relay is considered an \"offending relay\".\n        // The offending relay will be unregistered immediately, its stake will be forfeited and given to the address who reported it (msg.sender), thus incentivizing anyone to report offending relays.\n        // If reported via a relay, the forfeited stake is split between msg.sender (the relay used for reporting) and the address that reported it.\n\n        address addr1 = keccak256(abi.encodePacked(unsignedTx1)).recover(signature1);\n        address addr2 = keccak256(abi.encodePacked(unsignedTx2)).recover(signature2);\n\n        require(addr1 == addr2, \"Different signer\");\n\n        Transaction memory decodedTx1 = decodeTransaction(unsignedTx1);\n        Transaction memory decodedTx2 = decodeTransaction(unsignedTx2);\n\n        //checking that the same nonce is used in both transaction, with both signed by the same address and the actual data is different\n        // note: we compare the hash of the tx to save gas over iterating both byte arrays\n        require(decodedTx1.nonce == decodedTx2.nonce, \"Different nonce\");\n\n        bytes memory dataToCheck1 = abi.encodePacked(decodedTx1.data, decodedTx1.gasLimit, decodedTx1.to, decodedTx1.value);\n        bytes memory dataToCheck2 = abi.encodePacked(decodedTx2.data, decodedTx2.gasLimit, decodedTx2.to, decodedTx2.value);\n        require(keccak256(dataToCheck1) != keccak256(dataToCheck2), \"tx is equal\");\n\n        penalize(addr1);\n  ","contract":"RelayHub","time":0},{"type":"external-function ","before":"   function penalizeIllegalTransaction(bytes memory unsignedTx, bytes memory signature) public {\n        Transaction memory decodedTx = decodeTransaction(unsignedTx);\n        if (decodedTx.to == address(this)) {\n            bytes4 selector = GsnUtils.getMethodSig(decodedTx.data);\n            // Note: If RelayHub's relay API is extended, the selectors must be added to the ones listed here\n            require(selector != this.relayCall.selector && selector != this.registerRelay.selector, \"Legal relay transaction\");\n        }\n\n        address relay = keccak256(abi.encodePacked(unsignedTx)).recover(signature);\n\n        penalize(relay);\n  ","after":"   function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) public {\n        Transaction memory decodedTx = decodeTransaction(unsignedTx);\n        if (decodedTx.to == address(this)) {\n            bytes4 selector = GsnUtils.getMethodSig(decodedTx.data);\n            // Note: If RelayHub's relay API is extended, the selectors must be added to the ones listed here\n            require(selector != this.relayCall.selector && selector != this.registerRelay.selector, \"Legal relay transaction\");\n        }\n\n        address relay = keccak256(abi.encodePacked(unsignedTx)).recover(signature);\n\n        penalize(relay);\n  ","contract":"RelayHub","time":0},{"type":"constant-restrict-modification  ","before":"   string public version = \"1.0.","after":"   string public constant version = \"1.0.","contract":"RelayHub","time":1}]}
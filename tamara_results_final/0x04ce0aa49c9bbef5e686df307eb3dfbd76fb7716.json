{"time":167,"results":[{"type":"state-data-arrangement ","before":"\n   string public constant symbol = \"KT\n   string public constant name = \"Kittiefigh\n   uint8 public constant decimals = \n   uint256 public constant amountOfTokenToMint = 10**8 * 10**uint256(decimal\n   bool public isTransferWhitelistOnly = fal\n   mapping (address => bool) transfersWhiteli","after":"   string public constant symbol = \"KT\n   string public constant name = \"Kittiefigh\n   uint256 public constant amountOfTokenToMint = 10**8 * 10**uint256(decimal\n   mapping (address => bool) transfersWhiteli\n   uint8 public constant decimals = \n   bool public isTransferWhitelistOnly = fal\n","contract":"KittiefightToken","time":1},{"type":"external-function ","before":"   function transferPreSigned(\n        bytes memory _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        whenNotPaused\n        public\n        returns (bool)\n    {\n        if (isTransferWhitelistOnly) {\n            bytes32 hashedTx = super.transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n            address from = recover(hashedTx, _signature);\n            require(isUserAllowedToTransfer(from));\n        }\n        return super.transferPreSigned(_signature, _to, _value, _fee, _nonce);\n  ","after":"   function transferPreSigned(\n        bytes calldata _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        whenNotPaused\n        public\n        returns (bool)\n    {\n        if (isTransferWhitelistOnly) {\n            bytes32 hashedTx = super.transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n            address from = recover(hashedTx, _signature);\n            require(isUserAllowedToTransfer(from));\n        }\n        return super.transferPreSigned(_signature, _to, _value, _fee, _nonce);\n  ","contract":"KittiefightToken","time":0},{"type":"external-function ","before":"   function approvePreSigned(\n        bytes memory _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        whenNotPaused\n        public\n        returns (bool)\n    {\n        if (isTransferWhitelistOnly) {\n            bytes32 hashedTx = super.approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n            address from = recover(hashedTx, _signature);\n            require(isUserAllowedToTransfer(from));\n        }\n        return super.approvePreSigned(_signature, _spender, _value, _fee, _nonce);\n  ","after":"   function approvePreSigned(\n        bytes calldata _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        whenNotPaused\n        public\n        returns (bool)\n    {\n        if (isTransferWhitelistOnly) {\n            bytes32 hashedTx = super.approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n            address from = recover(hashedTx, _signature);\n            require(isUserAllowedToTransfer(from));\n        }\n        return super.approvePreSigned(_signature, _spender, _value, _fee, _nonce);\n  ","contract":"KittiefightToken","time":0},{"type":"external-function ","before":"   function transferPreSigned(\n        bytes memory _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0), \"No address provided\");\n        require(signatures[_signature] == false, \"No signature\");\n\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n  ","after":"   function transferPreSigned(\n        bytes calldata _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0), \"No address provided\");\n        require(signatures[_signature] == false, \"No signature\");\n\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n  ","contract":"KittiefightToken","time":0},{"type":"external-function ","before":"   function approvePreSigned(\n        bytes memory _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender is not provided\");\n        require(signatures[_signature] == false, \"No signature\");\n\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From addres is not provided\");\n\n        allowed[from][_spender] = _value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n  ","after":"   function approvePreSigned(\n        bytes calldata _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender is not provided\");\n        require(signatures[_signature] == false, \"No signature\");\n\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From addres is not provided\");\n\n        allowed[from][_spender] = _value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n  ","contract":"KittiefightToken","time":0},{"type":"external-function ","before":"   function increaseApprovalPreSigned(\n        bytes memory _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender address is not provided\");\n        require(signatures[_signature] == false, \"No Signature\");\n\n        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, allowed[from][_spender]);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n  ","after":"   function increaseApprovalPreSigned(\n        bytes calldata _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender address is not provided\");\n        require(signatures[_signature] == false, \"No Signature\");\n\n        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, allowed[from][_spender]);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n  ","contract":"KittiefightToken","time":0},{"type":"external-function ","before":"   function decreaseApprovalPreSigned(\n        bytes memory _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender address is not provided\");\n        require(signatures[_signature] == false, \"No sognature\");\n\n        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n  ","after":"   function decreaseApprovalPreSigned(\n        bytes calldata _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender address is not provided\");\n        require(signatures[_signature] == false, \"No sognature\");\n\n        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n  ","contract":"KittiefightToken","time":0},{"type":"external-function ","before":"   function transferFromPreSigned(\n        bytes memory _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0), \"No [to] address provided\");\n        require(signatures[_signature] == false, \"No signature provided\");\n\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n\n        address spender = recover(hashedTx, _signature);\n        require(spender != address(0), \"Spender address is not provided\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n\n        balances[spender] = balances[spender].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Transfer(_from, _to, _value);\n        emit Transfer(spender, msg.sender, _fee);\n        return true;\n  ","after":"   function transferFromPreSigned(\n        bytes calldata _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0), \"No [to] address provided\");\n        require(signatures[_signature] == false, \"No signature provided\");\n\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n\n        address spender = recover(hashedTx, _signature);\n        require(spender != address(0), \"Spender address is not provided\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n\n        balances[spender] = balances[spender].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Transfer(_from, _to, _value);\n        emit Transfer(spender, msg.sender, _fee);\n        return true;\n  ","contract":"KittiefightToken","time":0}]}
{"time":1419,"results":[{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":7},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":7},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":7},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":7},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":7},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":7},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":1},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":1},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":1},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":1},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":1},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"external-function ","before":"function Roll(address token, uint256 amount, bool[6] memory picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","after":"function Roll(address token, uint256 amount, bool[6] calldata picks) payable public {\n    require(amount <= backershares[msg.sender][token]);\n\n    if (minrndpay > msg.value) {\n      emit LogNewProvableQuery(\"you need to pay for gas, bitch\");\n    }\n    else {\n\n      uint8 c;\n      for (uint8 i = 0; i < 6; i++) {\n        if (picks[i] == true) {\n          c = c + 1;\n        }\n      }\n\n      if (max * amount * 6 / c > backervol[token]) {\n        revert();\n      }\n\n      bytes32 _queryId =  provable_newRandomDSQuery(\n        QUERY_EXECUTION_DELAY,\n        NUM_RANDOM_BYTES_REQUESTED,\n        GAS_FOR_CALLBACK\n      );\n\n      playerrolls[_queryId].addr = msg.sender;\n      playerrolls[_queryId].token = token;\n      playerrolls[_queryId].amount = amount;\n      playerrolls[_queryId].picks = picks;\n      playerrolls[_queryId].count = c;\n\n      emit startroll(msg.sender, token, amount, picks, c,  _queryId);\n    }\n  }","contract":"ERCDICE","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":2},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":2},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":2},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":2},{"type":"constant-restrict-modification  ","before":"uint256 public QUERY_EXECUTION_DELAY = 0;","after":"uint256 public constant QUERY_EXECUTION_DELAY = 0;","contract":"ERCDICE","time":2},{"type":"constant-restrict-modification  ","before":"address ETH = 0x0000000000000000000000000000000000000000;","after":"address constant ETH = 0x0000000000000000000000000000000000000000;","contract":"ERCDICE","time":3}]}
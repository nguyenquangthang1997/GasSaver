{"time":109,"results":[{"type":"external-function ","before":"function mintAtOnce(address _token, address[] memory, uint256[] memory)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","after":"function mintAtOnce(address _token, address[] calldata, uint256[] calldata)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function freezeManyAddresses(\n    address _token,\n    address[] memory,\n    uint256) public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","after":"function freezeManyAddresses(\n    address _token,\n    address[] calldata,\n    uint256) public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function defineLock(address _token, uint256, uint256, address[] memory)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","after":"function defineLock(address _token, uint256, uint256, address[] calldata)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function defineRules(address _token, IRule[] memory)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","after":"function defineRules(address _token, IRule[] calldata)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function defineClaimables(address _token, IClaimable[] memory)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","after":"function defineClaimables(address _token, IClaimable[] calldata)\n    public onlyProxyOp(_token) returns (bool)\n  {\n    return delegateCall(_token);\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function defineToken(\n    address _token,\n    uint256 _delegateId,\n    string memory _name,\n    string memory _symbol,\n    uint256 _decimals)\n    public onlyCoreOp returns (bool)\n  {\n    defineProxy(_token, _delegateId);\n    TokenData storage tokenData = tokens_[_token];\n    tokenData.name = _name;\n    tokenData.symbol = _symbol;\n    tokenData.decimals = _decimals;\n\n    emit TokenDefined(_token, _delegateId, _name, _symbol, _decimals);\n    return true;\n  }","after":"function defineToken(\n    address _token,\n    uint256 _delegateId,\n    string calldata _name,\n    string calldata _symbol,\n    uint256 _decimals)\n    public onlyCoreOp returns (bool)\n  {\n    defineProxy(_token, _delegateId);\n    TokenData storage tokenData = tokens_[_token];\n    tokenData.name = _name;\n    tokenData.symbol = _symbol;\n    tokenData.decimals = _decimals;\n\n    emit TokenDefined(_token, _delegateId, _name, _symbol, _decimals);\n    return true;\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function defineOracles(\n    IUserRegistry _userRegistry,\n    IRatesProvider _ratesProvider,\n    uint256[] memory _userKeys)\n    public onlyCoreOp returns (bool)\n  {\n    if (currency != bytes32(0)) {\n      // Updating the core currency is not yet supported\n      require(_userRegistry.currency() == currency, \"TC01\");\n    } else {\n      currency = _userRegistry.currency();\n    }\n    userRegistry = _userRegistry;\n    ratesProvider = _ratesProvider;\n    userKeys = _userKeys;\n\n    emit OraclesDefined(userRegistry, ratesProvider, currency, userKeys);\n    return true;\n  }","after":"function defineOracles(\n    IUserRegistry _userRegistry,\n    IRatesProvider _ratesProvider,\n    uint256[] calldata _userKeys)\n    public onlyCoreOp returns (bool)\n  {\n    if (currency != bytes32(0)) {\n      // Updating the core currency is not yet supported\n      require(_userRegistry.currency() == currency, \"TC01\");\n    } else {\n      currency = _userRegistry.currency();\n    }\n    userRegistry = _userRegistry;\n    ratesProvider = _ratesProvider;\n    userKeys = _userKeys;\n\n    emit OraclesDefined(userRegistry, ratesProvider, currency, userKeys);\n    return true;\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function defineAuditSelector(\n    address _scope,\n    uint256 _scopeId,\n    address[] memory _selectorAddresses,\n    bool[] memory _selectorValues) public onlyCoreOp returns (bool)\n  {\n    require(_selectorAddresses.length == _selectorValues.length, \"TC02\");\n\n    AuditStorage storage auditStorage = audits[_scope][_scopeId];\n    for (uint256 i=0; i < _selectorAddresses.length; i++) {\n      auditStorage.selector[_selectorAddresses[i]] = _selectorValues[i];\n    }\n\n    emit AuditSelectorDefined(_scope, _scopeId, _selectorAddresses, _selectorValues);\n    return true;\n  }","after":"function defineAuditSelector(\n    address _scope,\n    uint256 _scopeId,\n    address[] calldata _selectorAddresses,\n    bool[] calldata _selectorValues) public onlyCoreOp returns (bool)\n  {\n    require(_selectorAddresses.length == _selectorValues.length, \"TC02\");\n\n    AuditStorage storage auditStorage = audits[_scope][_scopeId];\n    for (uint256 i=0; i < _selectorAddresses.length; i++) {\n      auditStorage.selector[_selectorAddresses[i]] = _selectorValues[i];\n    }\n\n    emit AuditSelectorDefined(_scope, _scopeId, _selectorAddresses, _selectorValues);\n    return true;\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function defineRole(bytes32 _role, bytes4[] memory _privileges)\n    public onlySysOp returns (bool)\n  {\n    require(_role != ALL_PRIVILEGES, \"OC04\");\n    delete roles[_role];\n    for (uint256 i=0; i < _privileges.length; i++) {\n      roles[_role].privileges[_privileges[i]] = true;\n    }\n    emit RoleDefined(_role);\n    return true;\n  }","after":"function defineRole(bytes32 _role, bytes4[] calldata _privileges)\n    public onlySysOp returns (bool)\n  {\n    require(_role != ALL_PRIVILEGES, \"OC04\");\n    delete roles[_role];\n    for (uint256 i=0; i < _privileges.length; i++) {\n      roles[_role].privileges[_privileges[i]] = true;\n    }\n    emit RoleDefined(_role);\n    return true;\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function assignOperators(bytes32 _role, address[] memory _operators)\n    public onlySysOp returns (bool)\n  {\n    for (uint256 i=0; i < _operators.length; i++) {\n      operators[_operators[i]].coreRole = _role;\n      emit OperatorAssigned(_role, _operators[i]);\n    }\n    return true;\n  }","after":"function assignOperators(bytes32 _role, address[] calldata _operators)\n    public onlySysOp returns (bool)\n  {\n    for (uint256 i=0; i < _operators.length; i++) {\n      operators[_operators[i]].coreRole = _role;\n      emit OperatorAssigned(_role, _operators[i]);\n    }\n    return true;\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function assignProxyOperators(\n    address _proxy, bytes32 _role, address[] memory _operators)\n    public onlySysOp returns (bool)\n  {\n    for (uint256 i=0; i < _operators.length; i++) {\n      operators[_operators[i]].proxyRoles[_proxy] = _role;\n      emit ProxyOperatorAssigned(_proxy, _role, _operators[i]);\n    }\n    return true;\n  }","after":"function assignProxyOperators(\n    address _proxy, bytes32 _role, address[] calldata _operators)\n    public onlySysOp returns (bool)\n  {\n    for (uint256 i=0; i < _operators.length; i++) {\n      operators[_operators[i]].proxyRoles[_proxy] = _role;\n      emit ProxyOperatorAssigned(_proxy, _role, _operators[i]);\n    }\n    return true;\n  }","contract":"TokenCore","time":0},{"type":"external-function ","before":"function revokeOperators(address[] memory _operators)\n    public onlySysOp returns (bool)\n  {\n    for (uint256 i=0; i < _operators.length; i++) {\n      delete operators[_operators[i]];\n      emit OperatorRevoked(_operators[i]);\n    }\n    return true;\n  }","after":"function revokeOperators(address[] calldata _operators)\n    public onlySysOp returns (bool)\n  {\n    for (uint256 i=0; i < _operators.length; i++) {\n      delete operators[_operators[i]];\n      emit OperatorRevoked(_operators[i]);\n    }\n    return true;\n  }","contract":"TokenCore","time":0}]}
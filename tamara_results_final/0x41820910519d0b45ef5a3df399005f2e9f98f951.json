{"time":264,"results":[{"type":"external-function ","before":"function exit(string memory inviteCode, string memory beCode) public isHuman() payable {\n\t\trequire(donnotimitate(), \"no, donnotimitate\");\n\t\trequire(msg.value >= 1 * ethWei && msg.value <= 15 * ethWei, \"between 1 and 15\");\n\t\trequire(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\n\n\t\tUserGlobal storage userGlobal = userMapping[msg.sender];\n\t\tif (userGlobal.id == 0) {\n\t\t\trequire(!compareStr(inviteCode, \"\") && bytes(inviteCode).length == 6, \"invalid invite code\");\n\t\t\taddress beCodeAddr = addressMapping[beCode];\n\t\t\trequire(isUsed(beCode), \"beCode not exist\");\n\t\t\trequire(beCodeAddr != msg.sender, \"beCodeAddr can't be self\");\n\t\t\trequire(!isUsed(inviteCode), \"invite code is used\");\n\t\t\tregisterUser(msg.sender, inviteCode, beCode);\n\t\t}\n\t\tuint investAmout;\n\t\tuint lineAmount;\n\t\tif (isLine()) {\n\t\t\tlineAmount = msg.value;\n\t\t} else {\n\t\t\tinvestAmout = msg.value;\n\t\t}\n\t\tUser storage user = userRoundMapping[rid][msg.sender];\n\t\tif (user.id != 0) {\n\t\t\trequire(user.freezeAmount.add(user.lineAmount) == 0, \"only once invest\");\n\t\t\tuser.freezeAmount = investAmout;\n\t\t\tuser.lineAmount = lineAmount;\n\t\t\tuser.level = getLevel(user.freezeAmount);\n\t\t\tuser.lineLevel = getNodeLevel(user.freezeAmount.add(user.freeAmount).add(user.lineAmount));\n\t\t} else {\n\t\t\tuser.id = userGlobal.id;\n\t\t\tuser.userAddress = msg.sender;\n\t\t\tuser.freezeAmount = investAmout;\n\t\t\tuser.level = getLevel(investAmout);\n\t\t\tuser.lineAmount = lineAmount;\n\t\t\tuser.lineLevel = getNodeLevel(user.freezeAmount.add(user.freeAmount).add(user.lineAmount));\n\t\t\tuser.inviteCode = userGlobal.inviteCode;\n\t\t\tuser.beCode = userGlobal.beCode;\n\t\t}\n\n\t\trInvestCount[rid] = rInvestCount[rid].add(1);\n\t\trInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\n\t\tif (!isLine()) {\n\t\t\tsendFeetoAdmin(msg.value);\n\t\t\tcountBonus(user.userAddress);\n\t\t} else {\n\t\t\tlineArrayMapping[rid].push(user.id);\n\t\t}\n\t}","after":"function exit(string calldata inviteCode, string calldata beCode) public isHuman() payable {\n\t\trequire(donnotimitate(), \"no, donnotimitate\");\n\t\trequire(msg.value >= 1 * ethWei && msg.value <= 15 * ethWei, \"between 1 and 15\");\n\t\trequire(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\n\n\t\tUserGlobal storage userGlobal = userMapping[msg.sender];\n\t\tif (userGlobal.id == 0) {\n\t\t\trequire(!compareStr(inviteCode, \"\") && bytes(inviteCode).length == 6, \"invalid invite code\");\n\t\t\taddress beCodeAddr = addressMapping[beCode];\n\t\t\trequire(isUsed(beCode), \"beCode not exist\");\n\t\t\trequire(beCodeAddr != msg.sender, \"beCodeAddr can't be self\");\n\t\t\trequire(!isUsed(inviteCode), \"invite code is used\");\n\t\t\tregisterUser(msg.sender, inviteCode, beCode);\n\t\t}\n\t\tuint investAmout;\n\t\tuint lineAmount;\n\t\tif (isLine()) {\n\t\t\tlineAmount = msg.value;\n\t\t} else {\n\t\t\tinvestAmout = msg.value;\n\t\t}\n\t\tUser storage user = userRoundMapping[rid][msg.sender];\n\t\tif (user.id != 0) {\n\t\t\trequire(user.freezeAmount.add(user.lineAmount) == 0, \"only once invest\");\n\t\t\tuser.freezeAmount = investAmout;\n\t\t\tuser.lineAmount = lineAmount;\n\t\t\tuser.level = getLevel(user.freezeAmount);\n\t\t\tuser.lineLevel = getNodeLevel(user.freezeAmount.add(user.freeAmount).add(user.lineAmount));\n\t\t} else {\n\t\t\tuser.id = userGlobal.id;\n\t\t\tuser.userAddress = msg.sender;\n\t\t\tuser.freezeAmount = investAmout;\n\t\t\tuser.level = getLevel(investAmout);\n\t\t\tuser.lineAmount = lineAmount;\n\t\t\tuser.lineLevel = getNodeLevel(user.freezeAmount.add(user.freeAmount).add(user.lineAmount));\n\t\t\tuser.inviteCode = userGlobal.inviteCode;\n\t\t\tuser.beCode = userGlobal.beCode;\n\t\t}\n\n\t\trInvestCount[rid] = rInvestCount[rid].add(1);\n\t\trInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\n\t\tif (!isLine()) {\n\t\t\tsendFeetoAdmin(msg.value);\n\t\t\tcountBonus(user.userAddress);\n\t\t} else {\n\t\t\tlineArrayMapping[rid].push(user.id);\n\t\t}\n\t}","contract":"FairWin","time":0},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"FairWin","time":0},{"type":"constant-restrict-modification  ","before":"address payable private devAddr = address(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);","after":"address payable private constant devAddr = address(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);","contract":"FairWin","time":0},{"type":"constant-restrict-modification  ","before":"address payable private comfortAddr = address(0x6b00afC5a90ac2305Ae223e7FB50898027Aa5862);","after":"address payable private constant comfortAddr = address(0x6b00afC5a90ac2305Ae223e7FB50898027Aa5862);","contract":"FairWin","time":0},{"type":"constant-restrict-modification  ","before":"uint period = 1 days;","after":"uint constant period = 1 days;","contract":"FairWin","time":0},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"FairWin","time":0}]}
{"time":415,"results":[{"type":"state-data-arrangement ","before":"\naddress payable constant public ZERO_ADDR = address(0x00);\nuint public _dailyInvest = 0;\nuint public _staticPool = 0;\nuint public _outInvest = 0;\nuint public _safePool = 0;\nuint public _gloryPool = 0;\nmapping(address => Player) allPlayers;\naddress[] public allAddress = new address[](0);\nuint[] public lockedRound = new uint[](0);\nuint investCount = 0;\nmapping(uint => Investment) investments;\naddress[] public dailyPlayers = new address[](0);\nuint _rand = 88;\nuint _safeIndex = 0;\nuint _endTime = 0;\nuint _startTime = 0;\nbool public _active = true;","after":"uint public _dailyInvest = 0;\nuint public _staticPool = 0;\nuint public _outInvest = 0;\nuint public _safePool = 0;\nuint public _gloryPool = 0;\nmapping(address => Player) allPlayers;\naddress[] public allAddress = new address[](0);\nuint[] public lockedRound = new uint[](0);\nuint investCount = 0;\nmapping(uint => Investment) investments;\naddress[] public dailyPlayers = new address[](0);\nuint _rand = 88;\nuint _safeIndex = 0;\nuint _endTime = 0;\nuint _startTime = 0;\naddress payable constant public ZERO_ADDR = address(0x00);\nbool public _active = true;\n","contract":"League","time":0},{"type":"external-function ","before":"function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], selfAmount[i], now);\n        }\n    }","after":"function sendGloryAward(address[] calldata plays, uint[] calldata selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], selfAmount[i], now);\n        }\n    }","contract":"League","time":0},{"type":"external-function ","before":"      _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<locks.length; i++) {\n            lockedR","after":"      _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<locks.length; i++) {\n            lockedR","contract":"League","time":0},{"type":"external-function ","before":"ush(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = allAddress.length;\n            allAdd","after":"ush(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] calldata totalBonus,\n        uint[] calldata totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = allAddress.length;\n            allAdd","contract":"League","time":0},{"type":"external-function ","before":"        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], ","after":"        return retreat;\n    }\n\n\n    function sendGloryAward(address[] calldata plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], ","contract":"League","time":0},{"type":"external-function ","before":"uire(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<lock","after":"uire(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<lock","contract":"League","time":0},{"type":"external-function ","before":"th; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = a","after":"th; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] calldata totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = a","contract":"League","time":0},{"type":"external-function ","before":"\n        emit logRandom(rand, now);\n        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n","after":"\n        emit logRandom(rand, now);\n        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n","contract":"League","time":0},{"type":"external-function ","before":") external onlyAdmin() {\n        require(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safe","after":") external onlyAdmin() {\n        require(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safe","contract":"League","time":0},{"type":"external-function ","before":"        for(uint i = 0; i<locks.length; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = ","after":"        for(uint i = 0; i<locks.length; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = ","contract":"League","time":0},{"type":"struct-data-arrangement ","before":"\n }\n\n    stru\nent {\n     \n self;\n  \n amount;\n \nt time;\n      ","after":"ent {\n     \n self;\n  \n amount;\n \n }\n\n    stru\nt time;\n      \n","contract":"LeagueBase","time":0},{"type":"state-data-arrangement ","before":"\n {\n    using SafeMath for uint;\n    address payable consta\nblic ZERO_ADDR = address(0x00\n  uint public _dailyInvest =\n   uint public _staticPool \n    uint public _outInvest\n\n    uint public _safePool \n    uint public _gloryPool = 0;\n    ma\n(address => Player) allPlayers;\n    address[] p\n allAddress = new address[](0);\n    uint[]\nic lockedRound = new \n](0);\n    uint investCount = 0;\n    mapp\nint => Investment) investments;\n    address[] pub\nailyPlayers = ne\nress[](0);\n    uint \n = 88;\n    uint _s\ndex = 0;\n    uint _e\ne = 0;\n    uint _startTime ","after":"blic ZERO_ADDR = address(0x00\n  uint public _dailyInvest =\n   uint public _staticPool \n    uint public _outInvest\n\n    uint public _safePool \n    uint public _gloryPool = 0;\n    ma\n(address => Player) allPlayers;\n    address[] p\n allAddress = new address[](0);\n    uint[]\nic lockedRound = new \n](0);\n    uint investCount = 0;\n    mapp\nint => Investment) investments;\n    address[] pub\nailyPlayers = ne\nress[](0);\n    uint \n = 88;\n    uint _s\ndex = 0;\n    uint _e\n {\n    using SafeMath for uint;\n    address payable consta\ne = 0;\n    uint _startTime \n","contract":"League","time":0},{"type":"external-function ","before":"function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], selfAmount[i], now);\n        }\n    }","after":"function sendGloryAward(address[] calldata plays, uint[] calldata selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], selfAmount[i], now);\n        }\n    }","contract":"League","time":0},{"type":"external-function ","before":"      _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<locks.length; i++) {\n            lockedR","after":"      _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<locks.length; i++) {\n            lockedR","contract":"League","time":0},{"type":"external-function ","before":"ush(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = allAddress.length;\n            allAdd","after":"ush(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] calldata totalBonus,\n        uint[] calldata totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = allAddress.length;\n            allAdd","contract":"League","time":0},{"type":"external-function ","before":"        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], ","after":"        return retreat;\n    }\n\n\n    function sendGloryAward(address[] calldata plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], ","contract":"League","time":0},{"type":"external-function ","before":"uire(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<lock","after":"uire(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<lock","contract":"League","time":0},{"type":"external-function ","before":"th; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = a","after":"th; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] calldata totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = a","contract":"League","time":0},{"type":"external-function ","before":"\n        emit logRandom(rand, now);\n        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n","after":"\n        emit logRandom(rand, now);\n        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n","contract":"League","time":0},{"type":"external-function ","before":") external onlyAdmin() {\n        require(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safe","after":") external onlyAdmin() {\n        require(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safe","contract":"League","time":0},{"type":"external-function ","before":"        for(uint i = 0; i<locks.length; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = ","after":"        for(uint i = 0; i<locks.length; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = ","contract":"League","time":0},{"type":"struct-data-arrangement ","before":"\n uint round;\nint index;\n\n struct I\n{\n        \nlf;\n        ui","after":"int index;\n\n struct I\n{\n        \n uint round;\nlf;\n        ui\n","contract":"LeagueBase","time":0},{"type":"state-data-arrangement ","before":"\ntract League is LeagueBase,AdminBase {\n    using SafeMath \nint;\n    address payable cons\npublic ZERO_ADDR = address(0\n\n    uint public _dailyInve\n0;\n    uint public _static\n= 0;\n    uint public _outIn\n= 0;\n    uint public _safePool = 0;\n  \nt public _gloryPool = 0;\n    mapping(address =>\ner) allPlayers;\n    address[] public allAd\n = new address[](0);\n\nint[] public lockedRound = new uint[](0)\n uint investCount = 0;\n    mapping(uint => Invest\n investments;\n  \nress[] public dailyP\ns = new address[](\n   uint _rand = 88;\n\nint _safeIndex = 0;\n    uin","after":"int;\n    address payable cons\npublic ZERO_ADDR = address(0\n\n    uint public _dailyInve\n0;\n    uint public _static\n= 0;\n    uint public _outIn\n= 0;\n    uint public _safePool = 0;\n  \nt public _gloryPool = 0;\n    mapping(address =>\ner) allPlayers;\n    address[] public allAd\n = new address[](0);\n\nint[] public lockedRound = new uint[](0)\n uint investCount = 0;\n    mapping(uint => Invest\n investments;\n  \nress[] public dailyP\ns = new address[](\n   uint _rand = 88;\n\ntract League is LeagueBase,AdminBase {\n    using SafeMath \nint _safeIndex = 0;\n    uin\n","contract":"League","time":0},{"type":"external-function ","before":"function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], selfAmount[i], now);\n        }\n    }","after":"function sendGloryAward(address[] calldata plays, uint[] calldata selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], selfAmount[i], now);\n        }\n    }","contract":"League","time":0},{"type":"external-function ","before":"      _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<locks.length; i++) {\n            lockedR","after":"      _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<locks.length; i++) {\n            lockedR","contract":"League","time":0},{"type":"external-function ","before":"ush(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = allAddress.length;\n            allAdd","after":"ush(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] calldata totalBonus,\n        uint[] calldata totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = allAddress.length;\n            allAdd","contract":"League","time":0},{"type":"external-function ","before":"        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], ","after":"        return retreat;\n    }\n\n\n    function sendGloryAward(address[] calldata plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n            emit logGlory(plays[i], ","contract":"League","time":0},{"type":"external-function ","before":"uire(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<lock","after":"uire(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safePool;\n        for(uint i = 0; i<lock","contract":"League","time":0},{"type":"external-function ","before":"th; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = a","after":"th; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] calldata totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = round[i];\n            user.index = a","contract":"League","time":1},{"type":"external-function ","before":"\n        emit logRandom(rand, now);\n        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n","after":"\n        emit logRandom(rand, now);\n        return retreat;\n    }\n\n\n    function sendGloryAward(address[] memory plays, uint[] memory selfAmount, uint totalAmount)\n    public onlyAdmin() {\n        _gloryPool = _gloryPool.sub(totalAmount);\n        for(uint i = 0; i < plays.length; i++){\n            investBonus(plays[i], selfAmount[i], false, 0);\n","contract":"League","time":0},{"type":"external-function ","before":") external onlyAdmin() {\n        require(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safe","after":") external onlyAdmin() {\n        require(time > now, \"Invalid Time\");\n        _startTime = time;\n    }\n\n    function startArgs(uint staticPool, uint safePool, uint[] memory locks) public {\n        require(!isStart(), \"Game Not Start Limit\");\n        _staticPool = staticPool;\n        _safePool = safe","contract":"League","time":0},{"type":"external-function ","before":"        for(uint i = 0; i<locks.length; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] memory plays, address[] memory parents,\n        uint[] memory bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = ","after":"        for(uint i = 0; i<locks.length; i++) {\n            lockedRound.push(locks[i]);\n        }\n    }\n\n    function league(\n        address[] calldata plays, address[] calldata parents,\n        uint[] calldata bonus, uint[] memory totalBonus,\n        uint[] memory totalInvests, uint[] memory sons, uint[] memory round)\n    public {\n        require(!isStart(), \"Game Not Start Limit\");\n        for(uint i = 0; i<plays.length; i++) {\n            Player storage user = allPlayers[plays[i]];\n            user.self = plays[i];\n            user.parent = parents[i];\n            user.bonus = bonus[i];\n            user.totalBonus = totalBonus[i];\n            user.invest = totalInvests[i];\n            user.sons = sons[i];\n            user.round = ","contract":"League","time":0},{"type":"struct-data-arrangement ","before":"\nt invest;\n  \n sons;\n    \nound;\n   \nindex;\n   \nruct Investmen","after":" sons;\n    \nound;\n   \nindex;\n   \nt invest;\n  \nruct Investmen\n","contract":"LeagueBase","time":0}]}
{"time":57,"results":[{"type":"external-function ","before":"function createRevolution(string memory _criteria, string memory _hashtag, uint _distributionBlockPeriod, uint _distributionAmount, bool _testingMode) public {\n    // check that we don't already have a revolution with this hashtag\n    if (revolutions[_hashtag].factory() != address(0)) {\n      revolutions[_hashtag] = new Revolution(msg.sender, _criteria, _hashtag, _distributionBlockPeriod, _distributionAmount, _testingMode);\n      hashtags.push(_hashtag);\n    }\n  }","after":"function createRevolution(string calldata _criteria, string calldata _hashtag, uint _distributionBlockPeriod, uint _distributionAmount, bool _testingMode) public {\n    // check that we don't already have a revolution with this hashtag\n    if (revolutions[_hashtag].factory() != address(0)) {\n      revolutions[_hashtag] = new Revolution(msg.sender, _criteria, _hashtag, _distributionBlockPeriod, _distributionAmount, _testingMode);\n      hashtags.push(_hashtag);\n    }\n  }","contract":"RevolutionFactory","time":0},{"type":"external-function ","before":"function lockRevolution(string memory _hashtag) public {\n    // will irreversibly lock a Revolution given by its hashtag\n\n    // only factory contract owner can make it lock a revolution\n    require(msg.sender == owner);\n    revolutions[_hashtag].lock();\n  }","after":"function lockRevolution(string calldata _hashtag) public {\n    // will irreversibly lock a Revolution given by its hashtag\n\n    // only factory contract owner can make it lock a revolution\n    require(msg.sender == owner);\n    revolutions[_hashtag].lock();\n  }","contract":"RevolutionFactory","time":0},{"type":"constant-restrict-modification  ","before":"address public owner = msg.sender;","after":"address public constant owner = msg.sender;","contract":"RevolutionFactory","time":0},{"type":"state-data-arrangement ","before":"\naddress public owner;\naddress public factory;\nstring public criteria;\nstring public hashtag;\nuint public distributionBlockPeriod;\nuint public distributionAmount;\nuint public lastDistributionBlockNumber;\nbool public testingMode;\nbool public locked;\naddress payable [] public citizens;\nmapping (address => Trial) private trials;\nuint public bastilleBalance;","after":"string public criteria;\nstring public hashtag;\nuint public distributionBlockPeriod;\nuint public distributionAmount;\nuint public lastDistributionBlockNumber;\naddress payable [] public citizens;\nmapping (address => Trial) private trials;\nuint public bastilleBalance;\naddress public owner;\naddress public factory;\nbool public testingMode;\nbool public locked;\n","contract":"Revolution","time":0}]}
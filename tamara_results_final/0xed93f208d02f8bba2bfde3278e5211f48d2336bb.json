{"time":107,"results":[{"type":"state-data-arrangement ","before":"\n�� 8 */\n    uint8 public d\n代币总量 */\n    uint256\n* 查看某一地址代币余额 */\n    mapping (\ntokenAmount;\n    /** 代币交易代理人授权列表 */\n    mapping (addr\nddress => uint256)) pr\nMapping;\n    //合约所有者\n    address priva","after":"代币总量 */\n    uint256\n* 查看某一地址代币余额 */\n    mapping (\ntokenAmount;\n    /** 代币交易代理人授权列表 */\n    mapping (addr\nMapping;\n    //合约所有者\n    address priva\nddress => uint256)) pr\n�� 8 */\n    uint8 public d\n","contract":"LUKTokenStore","time":1},{"type":"constant-restrict-modification  ","before":"�� 8 */\n    uint8 public d","after":"�� 8 */\n    uint8 public d","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"s 是否交易成功\n     ","after":"s 是否交易成功\n     ","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"_value the max amount they","after":"_value the max amount they","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":") public view returns (uint256){\n ","after":") public view returns (uint256){\n ","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"dress(0x0),\"Address can't is ","after":"dress(0x0),\"Address can't is ","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"   \n        // Check if the sender","after":"   \n        // Check if the sender","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"(allowanceMapping[_from][_spe","after":"(allowanceMapping[_from][_spe","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"      require(tokenAmount[_to] + _","after":"      require(tokenAmount[_to] + _","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"arget account cannot be recei","after":"arget account cannot be recei","contract":"LUKToken","time":0},{"type":"state-data-arrangement ","before":"\ns 是否交易成功\n     \noBlackList(address _addr) p\nol success) {\n        require(_addr != address(0x\n    blackList[_addr] = true;\n        success = true;\n    }\n\n    /**\n      *\n��出一个地址\n    \nr 代币接收者.\n      * @return success 是�","after":"oBlackList(address _addr) p\nol success) {\n        require(_addr != address(0x\n    blackList[_addr] = true;\n        success = true;\n    }\n\n    /**\n      *\nr 代币接收者.\n      * @return success 是�\n��出一个地址\n    \ns 是否交易成功\n     \n","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"�� 8 */\n    uint8 public d","after":"�� 8 */\n    uint8 public d","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"s 是否交易成功\n     ","after":"s 是否交易成功\n     ","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"_value the max amount they","after":"_value the max amount they","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":") public view returns (uint256){\n ","after":") public view returns (uint256){\n ","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"dress(0x0),\"Address can't is ","after":"dress(0x0),\"Address can't is ","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"   \n        // Check if the sender","after":"   \n        // Check if the sender","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"(allowanceMapping[_from][_spe","after":"(allowanceMapping[_from][_spe","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"      require(tokenAmount[_to] + _","after":"      require(tokenAmount[_to] + _","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"arget account cannot be recei","after":"arget account cannot be recei","contract":"LUKToken","time":0},{"type":"state-data-arrangement ","before":"\n_value the max amount they\n  function approve(address \nublic returns (bool success) {\n        if (tokenS\nnder,_value)){\n            emit Approval(msg.sender,_spender,_value); \n    \n true;\n        } else \nuccess = false;\n        }\n    }\n\n    function al","after":"  function approve(address \nublic returns (bool success) {\n        if (tokenS\nnder,_value)){\n            emit Approval(msg.sender,_spender,_value); \n    \nuccess = false;\n        }\n    }\n\n    function al\n true;\n        } else \n_value the max amount they\n","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"�� 8 */\n    uint8 public d","after":"�� 8 */\n    uint8 public d","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"s 是否交易成功\n     ","after":"s 是否交易成功\n     ","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":"_value the max amount they","after":"_value the max amount they","contract":"LUKTokenStore","time":0},{"type":"constant-restrict-modification  ","before":") public view returns (uint256){\n ","after":") public view returns (uint256){\n ","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"dress(0x0),\"Address can't is ","after":"dress(0x0),\"Address can't is ","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"   \n        // Check if the sender","after":"   \n        // Check if the sender","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"(allowanceMapping[_from][_spe","after":"(allowanceMapping[_from][_spe","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"      require(tokenAmount[_to] + _","after":"      require(tokenAmount[_to] + _","contract":"LUKToken","time":0},{"type":"constant-restrict-modification  ","before":"arget account cannot be recei","after":"arget account cannot be recei","contract":"LUKToken","time":0}]}
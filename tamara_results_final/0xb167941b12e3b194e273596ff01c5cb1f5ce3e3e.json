{"time":64,"results":[{"type":"external-function ","before":"function bulkIssue(bytes32[] memory documents) public {\n        for (uint256 i = 0; i < documents.length; i++) {\n            issue(documents[i]);\n        }\n    }","after":"function bulkIssue(bytes32[] calldata documents) public {\n        for (uint256 i = 0; i < documents.length; i++) {\n            issue(documents[i]);\n        }\n    }","contract":"DocumentStore","time":0},{"type":"external-function ","before":"function bulkRevoke(bytes32[] memory documents) public {\n        for (uint256 i = 0; i < documents.length; i++) {\n            revoke(documents[i]);\n        }\n    }","after":"function bulkRevoke(bytes32[] calldata documents) public {\n        for (uint256 i = 0; i < documents.length; i++) {\n            revoke(documents[i]);\n        }\n    }","contract":"DocumentStore","time":0},{"type":"constant-restrict-modification  ","before":"string public version = \"2.3.0\";","after":"string public constant version = \"2.3.0\";","contract":"DocumentStore","time":0},{"type":"external-function ","before":"function issueMultiSig(\n        bytes32 hash,\n        uint expireTime,\n        uint sequenceId,\n        bytes memory signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"ISSUE\", hash, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.issue(hash);\n            \n            emit Issued(msg.sender, otherSigner, operationHash, hash);\n        }","after":"function issueMultiSig(\n        bytes32 hash,\n        uint expireTime,\n        uint sequenceId,\n        bytes calldata signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"ISSUE\", hash, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.issue(hash);\n            \n            emit Issued(msg.sender, otherSigner, operationHash, hash);\n        }","contract":"DocumentMultiSigWalletCertStore","time":0},{"type":"external-function ","before":"function bulkIssueMultiSig(\n        bytes32[] memory hashes,\n        uint expireTime,\n        uint sequenceId,\n        bytes memory signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"BULKISSUE\", hashes, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.bulkIssue(hashes);\n            \n            emit BulkIssue(msg.sender, otherSigner, operationHash, hashes);\n        }","after":"function bulkIssueMultiSig(\n        bytes32[] calldata hashes,\n        uint expireTime,\n        uint sequenceId,\n        bytes calldata signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"BULKISSUE\", hashes, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.bulkIssue(hashes);\n            \n            emit BulkIssue(msg.sender, otherSigner, operationHash, hashes);\n        }","contract":"DocumentMultiSigWalletCertStore","time":0},{"type":"external-function ","before":"function revokeMultiSig(\n        bytes32 hash,\n        uint expireTime,\n        uint sequenceId,\n        bytes memory signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"REVOKE\", hash, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.revoke(hash);\n            \n            emit Revoked(msg.sender, otherSigner, operationHash, hash);\n        }","after":"function revokeMultiSig(\n        bytes32 hash,\n        uint expireTime,\n        uint sequenceId,\n        bytes calldata signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"REVOKE\", hash, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.revoke(hash);\n            \n            emit Revoked(msg.sender, otherSigner, operationHash, hash);\n        }","contract":"DocumentMultiSigWalletCertStore","time":0},{"type":"external-function ","before":"function bulkRevokeMultiSig(\n        bytes32[] memory hashes,\n        uint expireTime,\n        uint sequenceId,\n        bytes memory signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"BULKREVOKE\", hashes, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.bulkRevoke(hashes);\n            \n            emit BulkRevoke(msg.sender, otherSigner, operationHash, hashes);\n        }","after":"function bulkRevokeMultiSig(\n        bytes32[] calldata hashes,\n        uint expireTime,\n        uint sequenceId,\n        bytes calldata signature\n        ) public onlyCustodian {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"BULKREVOKE\", hashes, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.bulkRevoke(hashes);\n            \n            emit BulkRevoke(msg.sender, otherSigner, operationHash, hashes);\n        }","contract":"DocumentMultiSigWalletCertStore","time":0},{"type":"external-function ","before":"function transferMultiSig(\n        address newOwner,\n        uint expireTime,\n        uint sequenceId,\n        bytes memory signature\n        ) public onlyBackup {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"TRANSFER\", newOwner, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.transferOwnership(newOwner);\n            \n            emit Transferred(msg.sender, otherSigner, newOwner);\n        }","after":"function transferMultiSig(\n        address newOwner,\n        uint expireTime,\n        uint sequenceId,\n        bytes calldata signature\n        ) public onlyBackup {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"TRANSFER\", newOwner, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore.transferOwnership(newOwner);\n            \n            emit Transferred(msg.sender, otherSigner, newOwner);\n        }","contract":"DocumentMultiSigWalletCertStore","time":0},{"type":"external-function ","before":"function changeStoreMultiSig(\n        address newStore,\n        uint expireTime,\n        uint sequenceId,\n        bytes memory signature\n        ) public onlyBackup {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"CHANGE\", newStore, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore = DocumentStore(newStore);\n            \n            emit Change(msg.sender, otherSigner, newStore);\n        }","after":"function changeStoreMultiSig(\n        address newStore,\n        uint expireTime,\n        uint sequenceId,\n        bytes calldata signature\n        ) public onlyBackup {\n            bytes32 operationHash = keccak256(abi.encodePacked(\"CHANGE\", newStore, expireTime, sequenceId));\n            \n            address otherSigner = verifyMultiSig(operationHash, signature, expireTime, sequenceId);\n            \n            documentStore = DocumentStore(newStore);\n            \n            emit Change(msg.sender, otherSigner, newStore);\n        }","contract":"DocumentMultiSigWalletCertStore","time":0}]}
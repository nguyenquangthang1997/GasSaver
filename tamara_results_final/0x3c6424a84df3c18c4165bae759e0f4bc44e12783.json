{"time":198,"results":[{"type":"external-function ","before":"veAndCall(msg.sender, _spender, _value, _data);\n        return true;\n    }\n\n    function _approveAndCall(address _owner, address _spender, uint _value, bytes memory _data) internal {\n        require(_spender != address(0), \"Spender cannot be address(0)\");\n\n        _allowed[_owner][_spender] = _value;\n        emit Approval(_owner, _spender, _value);\n\n        ITokenReceiver(_spender).receiveApproval(_owner, _value, address(this), _data);\n        emit ApprovalAndCall(_owner, _spender, _value, _data);\n    }\n    \n}\n \n/**\n * @title Meta transactions wrapper around ERC20X\n *  Rewards relayer with native tokens\n */\ncontrac","after":"veAndCall(msg.sender, _spender, _value, _data);\n        return true;\n    }\n\n    function _approveAndCall(address _owner, address _spender, uint _value, bytes memory _data) internal {\n        require(_spender != address(0), \"Spender cannot be address(0)\");\n\n        _allowed[_owner][_spender] = _value;\n        emit Approval(_owner, _spender, _value);\n\n        ITokenReceiver(_spender).receiveApproval(_owner, _value, address(this), _data);\n        emit ApprovalAndCall(_owner, _spender, _value, _data);\n    }\n    \n}\n \n/**\n * @title Meta transactions wrapper around ERC20X\n *  Rewards relayer with native tokens\n */\ncontrac","contract":"ALBToken","time":0},{"type":"external-function ","before":"0Meta is ERC20X, ECRecover {\n\n    function metaApproveAndCall(bytes memory _signature, uint _nonce, address _spender, uint _value, bytes memory _data, uint _reward)\n    public returns (bool) \n    {   \n        require(_spender != address(0), \"Invalid spender address\");\n\n        bytes32 messageHash = metaApproveAndCallHash(_nonce, _spender, _value, _data, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n","after":"0Meta is ERC20X, ECRecover {\n\n    function metaApproveAndCall(bytes calldata _signature, uint _nonce, address _spender, uint _value, bytes memory _data, uint _reward)\n    public returns (bool) \n    {   \n        require(_spender != address(0), \"Invalid spender address\");\n\n        bytes32 messageHash = metaApproveAndCallHash(_nonce, _spender, _value, _data, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n","contract":"ALBToken","time":0},{"type":"external-function ","before":"   _approveAndCall(signer, _spender, _value, _data);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n            \n        return true;\n    }\n\n    function metaTransfer(bytes memory _signature, uint _nonce, address _to, uint _value, uint _reward) \n    public returns (bool) \n    {\n        bytes32 messageHash = metaTransferHash(_nonce, _to, _value, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n        _transfer(signer, _to, _value);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n        \n        return true;\n","after":"   _approveAndCall(signer, _spender, _value, _data);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n            \n        return true;\n    }\n\n    function metaTransfer(bytes memory _signature, uint _nonce, address _to, uint _value, uint _reward) \n    public returns (bool) \n    {\n        bytes32 messageHash = metaTransferHash(_nonce, _to, _value, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n        _transfer(signer, _to, _value);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n        \n        return true;\n","contract":"ALBToken","time":0},{"type":"external-function ","before":"\n    function metaTransferFrom(bytes memory _signature, uint _nonce, address _from, address _to, uint _value, uint _reward) \n    public returns (bool) \n    {\n        bytes32 messageHash = metaTransferFromHash(_nonce, _from, _to, _value, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n\n        _allowed[_from][signer] = _allowed[_from][signer].sub(_value); //error\n        _transfer(_from, _to, _value);\n        emit Approval(_from, signer, _allowed[_from][signer]);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _re","after":"\n    function metaTransferFrom(bytes calldata _signature, uint _nonce, address _from, address _to, uint _value, uint _reward) \n    public returns (bool) \n    {\n        bytes32 messageHash = metaTransferFromHash(_nonce, _from, _to, _value, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n\n        _allowed[_from][signer] = _allowed[_from][signer].sub(_value); //error\n        _transfer(_from, _to, _value);\n        emit Approval(_from, signer, _allowed[_from][signer]);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _re","contract":"ALBToken","time":0},{"type":"external-function ","before":"\n        \n        return true;\n    }\n\n    function metaApprove(bytes memory _signature, uint _nonce, address _spender, uint _value, uint _reward) \n    public returns (bool) \n    {\n        require(_spender != address(0), \"Invalid spender address\");\n\n        bytes32 messageHash = metaApproveHash(_nonce, _spender, _value, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n    \n        _allowed[signer][_spender] = _value;\n       \n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n\n        emit Approval(signer, _spender, _value);\n        return true;\n    }\n\n    function metaIncreaseAllowance(","after":"\n        \n        return true;\n    }\n\n    function metaApprove(bytes calldata _signature, uint _nonce, address _spender, uint _value, uint _reward) \n    public returns (bool) \n    {\n        require(_spender != address(0), \"Invalid spender address\");\n\n        bytes32 messageHash = metaApproveHash(_nonce, _spender, _value, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n    \n        _allowed[signer][_spender] = _value;\n       \n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n\n        emit Approval(signer, _spender, _value);\n        return true;\n    }\n\n    function metaIncreaseAllowance(","contract":"ALBToken","time":0},{"type":"external-function ","before":"memory _signature, uint _nonce, address _spender, uint256 _addedValue, uint _reward) \n    public returns (bool) \n    {\n        require(_spender != address(0), \"Invalid spender address\");\n\n        bytes32 messageHash = metaIncreaseAllowanceHash(_nonce, _spender, _addedValue, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n\n        _allowed[signer][_spender] = _allowed[signer][_spender].add(_addedValue);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n\n        emit Approval(signer, _spender, _allowed[signer][_spender]);\n        return true;\n    }\n\n    function metaDecreaseAllowance(bytes memory _signature","after":"calldata _signature, uint _nonce, address _spender, uint256 _addedValue, uint _reward) \n    public returns (bool) \n    {\n        require(_spender != address(0), \"Invalid spender address\");\n\n        bytes32 messageHash = metaIncreaseAllowanceHash(_nonce, _spender, _addedValue, _reward);\n        address signer = recoverSigner(messageHash, _signature);\n        validateNonceForSigner(signer, _nonce);\n\n        _allowed[signer][_spender] = _allowed[signer][_spender].add(_addedValue);\n\n        if (_reward > 0) \n            _transfer(signer, msg.sender, _reward);\n\n        emit Approval(signer, _spender, _allowed[signer][_spender]);\n        return true;\n    }\n\n    function metaDecreaseAllowance(bytes memory _signature","contract":"ALBToken","time":0},{"type":"external-function ","before":"    emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n} \n\n/**\n * @title ERC20 Extended interface\n */\ninterface IERC20X {\n\n    function approveAndCall(address _spend","after":"    emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n} \n\n/**\n * @title ERC20 Extended interface\n */\ninterface IERC20X {\n\n    function approveAndCall(address _spend","contract":"ALBToken","time":0}]}
{"time":102,"results":[{"type":"external-function ","before":"function executeAllowanceTransfer(\n        GnosisSafe safe,\n        address token,\n        address payable to,\n        uint96 amount,\n        address paymentToken,\n        uint96 payment,\n        address delegate,\n        bytes memory signature\n    ) public {\n        // Get current state\n        Allowance memory allowance = getAllowance(address(safe), delegate, token);\n        bytes memory transferHashData = generateTransferHashData(address(safe), token, to, amount, paymentToken, payment, allowance.nonce);\n        // Update state\n        allowance.nonce = allowance.nonce + 1;\n        uint96 newSpent = allowance.spent + amount;\n        // Check new spent amount and overflow\n        require(newSpent > allowance.spent && newSpent <= allowance.amount, \"newSpent > allowance.spent && newSpent <= allowance.amount\");\n        allowance.spent = newSpent;\n        if (payment > 0) {\n            // Use updated allowance if token and paymentToken are the same\n            Allowance memory paymentAllowance = paymentToken == token ? allowance : getAllowance(address(safe), delegate, paymentToken);\n            newSpent = paymentAllowance.spent + payment;\n            // Check new spent amount and overflowf\n            require(newSpent > paymentAllowance.spent && newSpent <= paymentAllowance.amount, \"newSpent > paymentAllowance.spent && newSpent <= paymentAllowance.amount\");\n            paymentAllowance.spent = newSpent;\n            // Update payment allowance if different from allowance\n            if (paymentToken != token) updateAllowance(address(safe), delegate, paymentToken, paymentAllowance);\n        }\n        updateAllowance(address(safe), delegate, token, allowance);\n        // Check signature (this contains a potential call -> EIP-1271)\n        checkSignature(delegate, signature, transferHashData, safe);\n        // Perform\n        if (payment > 0) {\n            // Transfer payment\n            // solium-disable-next-line security/no-tx-origin\n            transfer(safe, paymentToken, tx.origin, payment);\n        }\n        // Transfer token\n        transfer(safe, token, to, amount);\n        emit ExecuteAllowanceTransfer(address(safe), delegate, token, to, amount, allowance.nonce - 1);\n    }","after":"function executeAllowanceTransfer(\n        GnosisSafe safe,\n        address token,\n        address payable to,\n        uint96 amount,\n        address paymentToken,\n        uint96 payment,\n        address delegate,\n        bytes calldata signature\n    ) public {\n        // Get current state\n        Allowance memory allowance = getAllowance(address(safe), delegate, token);\n        bytes memory transferHashData = generateTransferHashData(address(safe), token, to, amount, paymentToken, payment, allowance.nonce);\n        // Update state\n        allowance.nonce = allowance.nonce + 1;\n        uint96 newSpent = allowance.spent + amount;\n        // Check new spent amount and overflow\n        require(newSpent > allowance.spent && newSpent <= allowance.amount, \"newSpent > allowance.spent && newSpent <= allowance.amount\");\n        allowance.spent = newSpent;\n        if (payment > 0) {\n            // Use updated allowance if token and paymentToken are the same\n            Allowance memory paymentAllowance = paymentToken == token ? allowance : getAllowance(address(safe), delegate, paymentToken);\n            newSpent = paymentAllowance.spent + payment;\n            // Check new spent amount and overflowf\n            require(newSpent > paymentAllowance.spent && newSpent <= paymentAllowance.amount, \"newSpent > paymentAllowance.spent && newSpent <= paymentAllowance.amount\");\n            paymentAllowance.spent = newSpent;\n            // Update payment allowance if different from allowance\n            if (paymentToken != token) updateAllowance(address(safe), delegate, paymentToken, paymentAllowance);\n        }\n        updateAllowance(address(safe), delegate, token, allowance);\n        // Check signature (this contains a potential call -> EIP-1271)\n        checkSignature(delegate, signature, transferHashData, safe);\n        // Perform\n        if (payment > 0) {\n            // Transfer payment\n            // solium-disable-next-line security/no-tx-origin\n            transfer(safe, paymentToken, tx.origin, payment);\n        }\n        // Transfer token\n        transfer(safe, token, to, amount);\n        emit ExecuteAllowanceTransfer(address(safe), delegate, token, to, amount, allowance.nonce - 1);\n    }","contract":"AllowanceModule","time":0}]}
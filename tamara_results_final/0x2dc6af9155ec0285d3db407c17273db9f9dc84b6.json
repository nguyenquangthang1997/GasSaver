{"time":36,"results":[{"type":"external-function ","before":"function htlc(\n\t\tbytes32 _randomNumberHash,\n\t\tuint64 _timestamp,\n\t\tuint256 _heightSpan,\n\t\tuint256 _outAmount,\n\t\tuint256 _praAmount,\n\t\tstring memory _receiverAddr\n\t) public whenNotPaused returns (bool) {\n\t\tbytes32 swapID = calSwapID(_randomNumberHash, _receiverAddr);\n\t\trequire(swapStates[swapID] == States.INVALID, \"swap is opened previously\");\n\t\t// Assume average eth block time interval is 15 second\n\t\t// The heightSpan period should be more than 15 minutes\n\t\trequire(_heightSpan >= 60 && _heightSpan <= 60480, \"_heightSpan should be in [60, 60480]\");\n\t\trequire(_outAmount >= 100000000000000000, \"_outAmount must be more than 0.1\");\n\t\trequire(\n\t\t\t_timestamp > now - 1800 && _timestamp < now + 1800,\n\t\t\t\"Timestamp must be 30 minutes between current time\"\n\t\t);\n\t\trequire(_outAmount == _praAmount, \"_outAmount must be equal _praAmount\");\n\n\t\t// Store the details of the swap.\n\t\tSwap memory swap = Swap({\n\t\t\toutAmount: _outAmount,\n\t\t\texpireHeight: _heightSpan + block.number,\n\t\t\trandomNumberHash: _randomNumberHash,\n\t\t\ttimestamp: _timestamp,\n\t\t\tsenderAddr: msg.sender,\n\t\t\tsenderChainType: uint256(ChainTypes.ETH),\n\t\t\treceiverAddr: _receiverAddr,\n\t\t\treceiverChainType: uint256(ChainTypes.PRA),\n\t\t\trecipientAddr: praRecipientAddr\n\t\t});\n\n\t\t//step 1: Init\n\t\tswaps[swapID] = swap;\n\t\tswapStates[swapID] = States.OPEN;\n\n\t\t// Transfer pra token to the swap contract\n\t\trequire(\n\t\t\tERC20(praContractAddr).transferFrom(msg.sender, address(this), _outAmount),\n\t\t\t\"failed to transfer client asset to swap contract\"\n\t\t);\n\n\t\t// Emit initialization event\n\t\temit HTLC(\n\t\t\tmsg.sender,\n\t\t\tpraRecipientAddr,\n\t\t\tswapID,\n\t\t\t_randomNumberHash,\n\t\t\t_timestamp,\n\t\t\tswap.expireHeight,\n\t\t\t_outAmount,\n\t\t\t_praAmount,\n\t\t\t_receiverAddr\n\t\t);\n\n\t\t//step 2: Claim\n\t\t// Complete the swap.\n\t\tswapStates[swapID] = States.COMPLETED;\n\n\t\t// Pay erc20 token to recipient\n\t\trequire(\n\t\t\tERC20(praContractAddr).transfer(praRecipientAddr, _outAmount),\n\t\t\t\"Failed to transfer locked asset to recipient\"\n\t\t);\n\n\t\t// delete closed swap\n\t\tdelete swaps[swapID];\n\n\t\t// Emit completion event\n\t\temit Claimed(msg.sender, praRecipientAddr, swapID, _randomNumberHash, _receiverAddr);\n\n\t\treturn true;\n\t}","after":"function htlc(\n\t\tbytes32 _randomNumberHash,\n\t\tuint64 _timestamp,\n\t\tuint256 _heightSpan,\n\t\tuint256 _outAmount,\n\t\tuint256 _praAmount,\n\t\tstring calldata _receiverAddr\n\t) public whenNotPaused returns (bool) {\n\t\tbytes32 swapID = calSwapID(_randomNumberHash, _receiverAddr);\n\t\trequire(swapStates[swapID] == States.INVALID, \"swap is opened previously\");\n\t\t// Assume average eth block time interval is 15 second\n\t\t// The heightSpan period should be more than 15 minutes\n\t\trequire(_heightSpan >= 60 && _heightSpan <= 60480, \"_heightSpan should be in [60, 60480]\");\n\t\trequire(_outAmount >= 100000000000000000, \"_outAmount must be more than 0.1\");\n\t\trequire(\n\t\t\t_timestamp > now - 1800 && _timestamp < now + 1800,\n\t\t\t\"Timestamp must be 30 minutes between current time\"\n\t\t);\n\t\trequire(_outAmount == _praAmount, \"_outAmount must be equal _praAmount\");\n\n\t\t// Store the details of the swap.\n\t\tSwap memory swap = Swap({\n\t\t\toutAmount: _outAmount,\n\t\t\texpireHeight: _heightSpan + block.number,\n\t\t\trandomNumberHash: _randomNumberHash,\n\t\t\ttimestamp: _timestamp,\n\t\t\tsenderAddr: msg.sender,\n\t\t\tsenderChainType: uint256(ChainTypes.ETH),\n\t\t\treceiverAddr: _receiverAddr,\n\t\t\treceiverChainType: uint256(ChainTypes.PRA),\n\t\t\trecipientAddr: praRecipientAddr\n\t\t});\n\n\t\t//step 1: Init\n\t\tswaps[swapID] = swap;\n\t\tswapStates[swapID] = States.OPEN;\n\n\t\t// Transfer pra token to the swap contract\n\t\trequire(\n\t\t\tERC20(praContractAddr).transferFrom(msg.sender, address(this), _outAmount),\n\t\t\t\"failed to transfer client asset to swap contract\"\n\t\t);\n\n\t\t// Emit initialization event\n\t\temit HTLC(\n\t\t\tmsg.sender,\n\t\t\tpraRecipientAddr,\n\t\t\tswapID,\n\t\t\t_randomNumberHash,\n\t\t\t_timestamp,\n\t\t\tswap.expireHeight,\n\t\t\t_outAmount,\n\t\t\t_praAmount,\n\t\t\t_receiverAddr\n\t\t);\n\n\t\t//step 2: Claim\n\t\t// Complete the swap.\n\t\tswapStates[swapID] = States.COMPLETED;\n\n\t\t// Pay erc20 token to recipient\n\t\trequire(\n\t\t\tERC20(praContractAddr).transfer(praRecipientAddr, _outAmount),\n\t\t\t\"Failed to transfer locked asset to recipient\"\n\t\t);\n\n\t\t// delete closed swap\n\t\tdelete swaps[swapID];\n\n\t\t// Emit completion event\n\t\temit Claimed(msg.sender, praRecipientAddr, swapID, _randomNumberHash, _receiverAddr);\n\n\t\treturn true;\n\t}","contract":"ERC20HTLCLite","time":0}]}
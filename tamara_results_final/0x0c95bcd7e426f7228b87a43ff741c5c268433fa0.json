{"time":67,"results":[{"type":"external-function ","before":"function defineCurrencies(\n    bytes32[] memory _currencies,\n    uint256[] memory _decimals,\n    uint256 _rateOffset) public onlyOperator returns (bool)\n  {\n    require(_currencies.length == _decimals.length, \"RP01\");\n    require(_rateOffset != 0, \"RP02\");\n\n    for (uint256 i= _currencies.length; i < currencies_.length; i++) {\n      delete ratesMap[currencies_[i]];\n      emit Rate(currencies_[i], 0);\n    }\n    rates_.length = _currencies.length-1;\n\n    bool hasBaseCurrencyChanged = _currencies[0] != currencies_[0];\n    for (uint256 i=1; i < _currencies.length; i++) {\n      bytes32 currency = _currencies[i];\n      if (rateOffset_ != _rateOffset\n        || ratesMap[currency] != i\n        || hasBaseCurrencyChanged)\n      {\n        ratesMap[currency] = i;\n        rates_[i-1] = 0;\n\n        if (i < currencies_.length) {\n          emit Rate(currencies_[i], 0);\n        }\n      }\n    }\n\n    if (rateOffset_ != _rateOffset) {\n      emit RateOffset(_rateOffset);\n      rateOffset_ = _rateOffset;\n    }\n\n    // solhint-disable-next-line not-rely-on-time\n    updatedAt_ = now;\n    currencies_ = _currencies;\n    decimals_ = _decimals;\n\n    emit Currencies(_currencies, _decimals);\n    return true;\n  }","after":"function defineCurrencies(\n    bytes32[] calldata _currencies,\n    uint256[] calldata _decimals,\n    uint256 _rateOffset) public onlyOperator returns (bool)\n  {\n    require(_currencies.length == _decimals.length, \"RP01\");\n    require(_rateOffset != 0, \"RP02\");\n\n    for (uint256 i= _currencies.length; i < currencies_.length; i++) {\n      delete ratesMap[currencies_[i]];\n      emit Rate(currencies_[i], 0);\n    }\n    rates_.length = _currencies.length-1;\n\n    bool hasBaseCurrencyChanged = _currencies[0] != currencies_[0];\n    for (uint256 i=1; i < _currencies.length; i++) {\n      bytes32 currency = _currencies[i];\n      if (rateOffset_ != _rateOffset\n        || ratesMap[currency] != i\n        || hasBaseCurrencyChanged)\n      {\n        ratesMap[currency] = i;\n        rates_[i-1] = 0;\n\n        if (i < currencies_.length) {\n          emit Rate(currencies_[i], 0);\n        }\n      }\n    }\n\n    if (rateOffset_ != _rateOffset) {\n      emit RateOffset(_rateOffset);\n      rateOffset_ = _rateOffset;\n    }\n\n    // solhint-disable-next-line not-rely-on-time\n    updatedAt_ = now;\n    currencies_ = _currencies;\n    decimals_ = _decimals;\n\n    emit Currencies(_currencies, _decimals);\n    return true;\n  }","contract":"RatesProvider","time":0},{"type":"external-function ","before":"function defineRates(uint256[] memory _rates)\n    public onlyOperator returns (bool)\n  {\n    require(_rates.length < currencies_.length, \"RP03\");\n\n    // solhint-disable-next-line not-rely-on-time\n    updatedAt_ = now;\n    for (uint256 i=0; i < _rates.length; i++) {\n      if (rates_[i] != _rates[i]) {\n        rates_[i] = _rates[i];\n        emit Rate(currencies_[i+1], _rates[i]);\n      }\n    }\n    return true;\n  }","after":"function defineRates(uint256[] calldata _rates)\n    public onlyOperator returns (bool)\n  {\n    require(_rates.length < currencies_.length, \"RP03\");\n\n    // solhint-disable-next-line not-rely-on-time\n    updatedAt_ = now;\n    for (uint256 i=0; i < _rates.length; i++) {\n      if (rates_[i] != _rates[i]) {\n        rates_[i] = _rates[i];\n        emit Rate(currencies_[i+1], _rates[i]);\n      }\n    }\n    return true;\n  }","contract":"RatesProvider","time":0}]}
{"time":789,"results":[{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":1},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":1},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":1},{"type":"struct-data-arrangement ","before":"\naddress user\nuint256 amount\nstring inviteCode\nstring referrer\nbool execute","after":"uint256 amount\nstring inviteCode\nstring referrer\naddress user\nbool execute\n","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":1},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":1},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":1},{"type":"struct-data-arrangement ","before":"\naddress user\nuint256 amount\nstring inviteCode\nstring referrer\nbool execute","after":"uint256 amount\nstring inviteCode\nstring referrer\naddress user\nbool execute\n","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":0},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":0},{"type":"constant-restrict-modification  ","before":"uint256 amount = 2100000000;","after":"uint256 constant amount = 2100000000;","contract":"SFtoken","time":0},{"type":"struct-data-arrangement ","before":"\naddress user\nuint256 amount\nstring inviteCode\nstring referrer\nbool execute","after":"uint256 amount\nstring inviteCode\nstring referrer\naddress user\nbool execute\n","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"external-function ","before":"function waitInvest(string memory inviteCode, string memory referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","after":"function waitInvest(string calldata inviteCode, string calldata referrer)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(gameStart(), \"game not start\");\r\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        require(codeRegister[inviteCode] == address(0) || codeRegister[inviteCode] == msg.sender, \"can not repeat invite\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n        }\r\n\r\n        Order storage order = waitOrder[rid][numOrder];\r\n        order.user = msg.sender;\r\n        order.amount = msg.value;\r\n        order.inviteCode = inviteCode;\r\n        order.referrer = referrer;\r\n\r\n        WaitInfo storage info = waitInfo[rid][msg.sender];\r\n        info.totalAmount += msg.value;\r\n        require(info.totalAmount <= 15 ether, \"eth amount between 1 and 15\");\r\n        info.isWait = true;\r\n        info.seq.push(numOrder);\r\n        info.time = now;\r\n\r\n        codeRegister[inviteCode] = msg.sender;\r\n\r\n        if(!waitLine){\r\n            if(numOrder!=1){\r\n                require(waitOrder[rid][numOrder - 1].execute, \"last order not execute\");\r\n            }\r\n            investIn(order.user, order.amount, order.inviteCode, order.referrer);\r\n            order.execute = true;\r\n            info.isWait = false;\r\n            startNum += 1;\r\n        }\r\n\r\n        numOrder += 1;\r\n    }","contract":"SuperFair","time":0},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","after":"address payable public constant eggAddress = 0x9ddc752e3D59Cd16e4360743C6eB9608d39e6119;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","after":"address payable public constant fivePercentWallet = 0x76594F0FA263Ac33aa28E3AdbFebBcBaf7Db76A9;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","after":"address payable public constant twoPercentWallet =  0x4200DBbda245be2b04a0a82eB1e08C6580D81C9b;","contract":"SuperFair","time":1},{"type":"constant-restrict-modification  ","before":"address payable public threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","after":"address payable public constant threePercentWallet = 0x07BeEec61D7B28177521bFDd0fdA5A07d992e51F;","contract":"SuperFair","time":1}]}
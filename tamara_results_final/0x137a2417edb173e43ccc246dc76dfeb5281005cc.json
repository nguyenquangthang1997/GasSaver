{"time":176,"results":[{"type":"external-function ","before":"function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buy(_from, false);\n    }","after":"function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buy(_from, false);\n    }","contract":"ArbitrationLicense","time":0},{"type":"external-function ","before":"function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buyFrom(_from);\n    }","after":"function receiveApproval(address _from, uint256 _amount, address _token, bytes calldata _data) public {\n        require(_amount == price, \"Wrong value\");\n        require(_token == address(token), \"Wrong token\");\n        require(_token == address(msg.sender), \"Wrong call\");\n        require(_data.length == 4, \"Wrong data length\");\n\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\n\n        _buyFrom(_from);\n    }","contract":"ArbitrationLicense","time":0},{"type":"struct-data-arrangement ","before":"\nint16 margin\nuint[] paymentMethods\nuint limitL\nuint limitU\naddress asset\nstring currency\naddress payable owner\naddress payable arbitrator\nbool deleted","after":"uint[] paymentMethods\nuint limitL\nuint limitU\nstring currency\naddress asset\naddress payable owner\naddress payable arbitrator\nint16 margin\nbool deleted\n","contract":"MetadataStore","time":0},{"type":"external-function ","before":"function addOffer(\n        address _asset,\n        string memory _contactData,\n        string memory _location,\n        string memory _currency,\n        string memory _username,\n        uint[] memory _paymentMethods,\n        uint _limitL,\n        uint _limitU,\n        int16 _margin,\n        address payable _arbitrator\n    ) public payable {\n        //require(sellingLicenses.isLicenseOwner(msg.sender), \"Not a license owner\");\n        // @TODO: limit number of offers if the sender is unlicensed?\n\n        require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), \"Arbitrator does not allow this transaction\");\n\n        require(_limitL <= _limitU, \"Invalid limits\");\n        require(msg.sender != _arbitrator, \"Cannot arbitrate own offers\");\n\n        _addOrUpdateUser(\n            msg.sender,\n            _contactData,\n            _location,\n            _username\n        );\n\n        Offer memory newOffer = Offer(\n            _margin,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _asset,\n            _currency,\n            msg.sender,\n            _arbitrator,\n            false\n        );\n\n        uint256 offerId = offers.push(newOffer) - 1;\n        offerWhitelist[msg.sender][offerId] = true;\n        addressToOffers[msg.sender].push(offerId);\n\n        emit OfferAdded(\n            msg.sender,\n            offerId,\n            _asset,\n            _location,\n            _currency,\n            _username,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _margin);\n\n        _stake(offerId, msg.sender, _asset);\n    }","after":"function addOffer(\n        address _asset,\n        string calldata _contactData,\n        string calldata _location,\n        string calldata _currency,\n        string calldata _username,\n        uint[] calldata _paymentMethods,\n        uint _limitL,\n        uint _limitU,\n        int16 _margin,\n        address payable _arbitrator\n    ) public payable {\n        //require(sellingLicenses.isLicenseOwner(msg.sender), \"Not a license owner\");\n        // @TODO: limit number of offers if the sender is unlicensed?\n\n        require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), \"Arbitrator does not allow this transaction\");\n\n        require(_limitL <= _limitU, \"Invalid limits\");\n        require(msg.sender != _arbitrator, \"Cannot arbitrate own offers\");\n\n        _addOrUpdateUser(\n            msg.sender,\n            _contactData,\n            _location,\n            _username\n        );\n\n        Offer memory newOffer = Offer(\n            _margin,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _asset,\n            _currency,\n            msg.sender,\n            _arbitrator,\n            false\n        );\n\n        uint256 offerId = offers.push(newOffer) - 1;\n        offerWhitelist[msg.sender][offerId] = true;\n        addressToOffers[msg.sender].push(offerId);\n\n        emit OfferAdded(\n            msg.sender,\n            offerId,\n            _asset,\n            _location,\n            _currency,\n            _username,\n            _paymentMethods,\n            _limitL,\n            _limitU,\n            _margin);\n\n        _stake(offerId, msg.sender, _asset);\n    }","contract":"MetadataStore","time":0}]}
{"time":210,"results":[{"type":"external-function ","before":"function brokerRequestAllowance(BrokerData.BrokerApprovalRequest memory request) public returns (bool) {\n    require(msg.sender == loopringDelegate, \"LRCBurner MakerBroker: Unauthorized caller\");\n    require(request.tokenB == lrcAddress, \"LRCBurner MakerBroker: Must purchase LRC\");\n\n    for (uint i = 0; i < request.orders.length; i++) {\n      require(request.orders[i].tokenRecipient == address(this), \"LRCBurner MakerBroker: Order tokenRecipient must be this broker\");\n      require(request.orders[i].owner == owner, \"LRCBurner MakerBroker: Order owner must be the owner of this contract\");\n    }\n\n    IFeeHolder(feeHolderAddress).withdrawBurned(request.tokenS, request.totalRequestedAmountS);\n\n    return true;\n    // we want to call fill report, so we can burn the purchased LRC\n  }","after":"function brokerRequestAllowance(BrokerData.BrokerApprovalRequest calldata request) public returns (bool) {\n    require(msg.sender == loopringDelegate, \"LRCBurner MakerBroker: Unauthorized caller\");\n    require(request.tokenB == lrcAddress, \"LRCBurner MakerBroker: Must purchase LRC\");\n\n    for (uint i = 0; i < request.orders.length; i++) {\n      require(request.orders[i].tokenRecipient == address(this), \"LRCBurner MakerBroker: Order tokenRecipient must be this broker\");\n      require(request.orders[i].owner == owner, \"LRCBurner MakerBroker: Order owner must be the owner of this contract\");\n    }\n\n    IFeeHolder(feeHolderAddress).withdrawBurned(request.tokenS, request.totalRequestedAmountS);\n\n    return true;\n    // we want to call fill report, so we can burn the purchased LRC\n  }","contract":"LrcBurnerMakerBroker","time":0},{"type":"external-function ","before":"function onOrderFillReport(BrokerData.BrokerInterceptorReport memory fillReport) public {\n    // We burn the LRC that's being held in this contract now.\n    // NOTE: We don't care about checking who the caller is, because any LRC that's ever held in this contract is\n    // always burnable.\n    ILRC(lrcAddress).burn(fillReport.fillAmountB);\n  }","after":"function onOrderFillReport(BrokerData.BrokerInterceptorReport calldata fillReport) public {\n    // We burn the LRC that's being held in this contract now.\n    // NOTE: We don't care about checking who the caller is, because any LRC that's ever held in this contract is\n    // always burnable.\n    ILRC(lrcAddress).burn(fillReport.fillAmountB);\n  }","contract":"LrcBurnerMakerBroker","time":0}]}
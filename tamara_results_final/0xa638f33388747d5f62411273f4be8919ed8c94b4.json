{"time":413,"results":[{"type":"external-function ","before":"function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes memory _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"Shifter: nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"Shifter: invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = _amount.mul(shiftInFee).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID, signedMessageHash);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }","after":"function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"Shifter: nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"Shifter: invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = _amount.mul(shiftInFee).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID, signedMessageHash);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }","contract":"BTCShifter","time":0},{"type":"external-function ","before":"function shiftOut(bytes memory _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"Shifter: to address is empty\");\n        require(_amount >= minShiftAmount, \"Shifter: amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = _amount.mul(shiftOutFee).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }","after":"function shiftOut(bytes calldata _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"Shifter: to address is empty\");\n        require(_amount >= minShiftAmount, \"Shifter: amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = _amount.mul(shiftOutFee).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }","contract":"BTCShifter","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public version = 2;","after":"uint8 public constant version = 2;","contract":"BTCShifter","time":1},{"type":"external-function ","before":"function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes memory _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"Shifter: nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"Shifter: invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = _amount.mul(shiftInFee).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID, signedMessageHash);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }","after":"function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"Shifter: nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"Shifter: invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = _amount.mul(shiftInFee).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID, signedMessageHash);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }","contract":"ZECShifter","time":0},{"type":"external-function ","before":"function shiftOut(bytes memory _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"Shifter: to address is empty\");\n        require(_amount >= minShiftAmount, \"Shifter: amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = _amount.mul(shiftOutFee).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }","after":"function shiftOut(bytes calldata _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"Shifter: to address is empty\");\n        require(_amount >= minShiftAmount, \"Shifter: amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = _amount.mul(shiftOutFee).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }","contract":"ZECShifter","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public version = 2;","after":"uint8 public constant version = 2;","contract":"ZECShifter","time":0},{"type":"external-function ","before":"function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes memory _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"Shifter: nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"Shifter: invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = _amount.mul(shiftInFee).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID, signedMessageHash);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }","after":"function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"Shifter: nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"Shifter: invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = _amount.mul(shiftInFee).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID, signedMessageHash);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }","contract":"BCHShifter","time":0},{"type":"external-function ","before":"function shiftOut(bytes memory _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"Shifter: to address is empty\");\n        require(_amount >= minShiftAmount, \"Shifter: amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = _amount.mul(shiftOutFee).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }","after":"function shiftOut(bytes calldata _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"Shifter: to address is empty\");\n        require(_amount >= minShiftAmount, \"Shifter: amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = _amount.mul(shiftOutFee).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }","contract":"BCHShifter","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public version = 2;","after":"uint8 public constant version = 2;","contract":"BCHShifter","time":0}]}
{"time":80,"results":[{"type":"state-data-arrangement ","before":"\nmapping(address => uint256) public rightFromPaymentCycle;\nmapping(bytes32 => bool) public useablePasswordHashes;\nmapping(bytes32 => bool) public usedPasswordHashes;\nuint8 public amountOfBasicIncomeCanBeIncreased;\nuint256 public amountOfBasicIncome;\nuint256 public amountOfCitizens;\nuint256 public euroCentInWei;\nuint256 public availableEther;\naddress payable public maintenancePool;\nuint256 public minimumPeriod;\nuint256 public promisedEther;\nuint256 lastPayout;\nuint256[] public paymentsCycle;","after":"mapping(address => uint256) public rightFromPaymentCycle;\nmapping(bytes32 => bool) public useablePasswordHashes;\nmapping(bytes32 => bool) public usedPasswordHashes;\nuint256 public amountOfBasicIncome;\nuint256 public amountOfCitizens;\nuint256 public euroCentInWei;\nuint256 public availableEther;\nuint256 public minimumPeriod;\nuint256 public promisedEther;\nuint256 lastPayout;\nuint256[] public paymentsCycle;\naddress payable public maintenancePool;\nuint8 public amountOfBasicIncomeCanBeIncreased;\n","contract":"UBIVault","time":0},{"type":"external-function ","before":"function claimUBIOwner(address payable[] memory citizens, bool onlyOne) public onlyOwner returns(bool) {\n        bool allRequestedCitizensGotPayout = true;\n        for(uint256 i = 0; i < citizens.length; i++) {\n            if(!claimUBI(citizens[i], onlyOne)) {\n              allRequestedCitizensGotPayout = false;\n            }\n        }\n        return allRequestedCitizensGotPayout;\n    }","after":"function claimUBIOwner(address payable[] calldata citizens, bool onlyOne) public onlyOwner returns(bool) {\n        bool allRequestedCitizensGotPayout = true;\n        for(uint256 i = 0; i < citizens.length; i++) {\n            if(!claimUBI(citizens[i], onlyOne)) {\n              allRequestedCitizensGotPayout = false;\n            }\n        }\n        return allRequestedCitizensGotPayout;\n    }","contract":"UBIVault","time":0},{"type":"external-function ","before":"function createUseablePasswords(bytes32[] memory _useablePasswordHashes) public onlyOwner {\n        for(uint256 i = 0; i < _useablePasswordHashes.length; i++) {\n            bytes32 usablePasswordHash = _useablePasswordHashes[i];\n            require(!useablePasswordHashes[usablePasswordHash], \"One of your useablePasswords was already registered\");\n            useablePasswordHashes[usablePasswordHash] = true;\n            emit LogUseablePasswordCreated(usablePasswordHash);\n        }\n    }","after":"function createUseablePasswords(bytes32[] calldata _useablePasswordHashes) public onlyOwner {\n        for(uint256 i = 0; i < _useablePasswordHashes.length; i++) {\n            bytes32 usablePasswordHash = _useablePasswordHashes[i];\n            require(!useablePasswordHashes[usablePasswordHash], \"One of your useablePasswords was already registered\");\n            useablePasswordHashes[usablePasswordHash] = true;\n            emit LogUseablePasswordCreated(usablePasswordHash);\n        }\n    }","contract":"UBIVault","time":0}]}
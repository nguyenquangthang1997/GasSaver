{"time":76,"results":[{"type":"struct-data-arrangement ","before":"\n address requeste\n string detail\n string respons\n string revie\n uint256 rNumbe\n uint256 timeStam\n bool responde","after":" string detail\n string respons\n string revie\n uint256 rNumbe\n uint256 timeStam\n address requeste\n bool responde\n","contract":"offerToken","time":0},{"type":"external-function ","before":"\n    function redeemOfferToken(string memory details) public {\n        _burn(_msgSender(), min); // redeem Offertoken at minimum burn rate \n        \n        uint256 rNumber = RR.add(1); \n        \n        RR = RR.add(1); // counts new entry to redemption counter \n        \n        redemptions[rNumber] = requests( \n            msg.sender,\n            details,\n            \"PENDING\",\n            \"RESERVED\",\n            rNumber,\n            now,\n            false);\n","after":"\n    function redeemOfferToken(string calldata details) public {\n        _burn(_msgSender(), min); // redeem Offertoken at minimum burn rate \n        \n        uint256 rNumber = RR.add(1); \n        \n        RR = RR.add(1); // counts new entry to redemption counter \n        \n        redemptions[rNumber] = requests( \n            msg.sender,\n            details,\n            \"PENDING\",\n            \"RESERVED\",\n            rNumber,\n            now,\n            false);\n","contract":"offerToken","time":0},{"type":"external-function ","before":"\n    function writeRedemptionResponse(uint256 rNumber, string memory response) public onlyOfferor {\n        requests storage rr = redemptions[rNumber]; // retrieve RR data\n        \n        redemptions[rNumber] = requests( \n            rr.requester,\n            rr.details,\n            response,\n            rr.review,\n            rNumber,\n            rr.timeStamp,\n            true);\n","after":"\n    function writeRedemptionResponse(uint256 rNumber, string calldata response) public onlyOfferor {\n        requests storage rr = redemptions[rNumber]; // retrieve RR data\n        \n        redemptions[rNumber] = requests( \n            rr.requester,\n            rr.details,\n            response,\n            rr.review,\n            rNumber,\n            rr.timeStamp,\n            true);\n","contract":"offerToken","time":0},{"type":"external-function ","before":"\n    function writeRedemptionReview(uint256 rNumber, string memory review) public {\n        requests storage rr = redemptions[rNumber]; // retrieve RR data\n        \n        require(msg.sender == rr.requester); // only requester can store review of redemption responses\n        require(rr.responded == true); // offeror response must be provided prior to review\n\n        redemptions[rNumber] = requests( \n            rr.requester,\n            rr.details,\n            rr.response,\n            review,\n            rNumber,\n            rr.timeStamp,\n            true);","after":"\n    function writeRedemptionReview(uint256 rNumber, string calldata review) public {\n        requests storage rr = redemptions[rNumber]; // retrieve RR data\n        \n        require(msg.sender == rr.requester); // only requester can store review of redemption responses\n        require(rr.responded == true); // offeror response must be provided prior to review\n\n        redemptions[rNumber] = requests( \n            rr.requester,\n            rr.details,\n            rr.response,\n            review,\n            rNumber,\n            rr.timeStamp,\n            true);","contract":"offerToken","time":0}]}
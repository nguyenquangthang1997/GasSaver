{"time":828,"results":[{"type":"constant-restrict-modification  ","before":"uint8 public decimals = 18;","after":"uint8 public constant decimals = 18;","contract":"Reputation","time":0},{"type":"external-function ","before":"function genericCall(address _contract, bytes memory _data, uint256 _value)\n    public\n    onlyOwner\n    returns(bool success, bytes memory returnValue) {\n      // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }","after":"function genericCall(address _contract, bytes calldata _data, uint256 _value)\n    public\n    onlyOwner\n    returns(bool success, bytes memory returnValue) {\n      // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }","contract":"Avatar","time":0},{"type":"external-function ","before":"function metaData(string memory _metaData) public onlyOwner returns(bool) {\n        emit MetaData(_metaData);\n        return true;\n    }","after":"function metaData(string calldata _metaData) public onlyOwner returns(bool) {\n        emit MetaData(_metaData);\n        return true;\n    }","contract":"Avatar","time":0},{"type":"external-function ","before":"   function proposeContributionReward(\n        string memory _descriptionHash,\n        int256 _reputationChange,\n        uint[3] memory _rewards,\n        IERC20 _externalToken,\n        address payable _beneficiary,\n        address _proposer\n    )\n    public\n    returns(bytes32 proposalId)\n    {\n        address proposer = _proposer;\n        if (proposer == address(0)) {\n            proposer = msg.sender;\n        }\n        proposalId = votingMachine.propose(2, voteParams, proposer, address(avatar));\n        address payable beneficiary = _beneficiary;\n        if (beneficiary == address(0)) {\n            beneficiary = msg.sender;\n        }\n\n        ContributionProposal memory proposal = ContributionProposal({\n            nativeTokenReward: _rewards[0],\n            reputationChange: _reputationChange,\n            ethReward: _rewards[1],\n            externalToken: _externalToken,\n            externalTokenReward: _rewards[2],\n            beneficiary: beneficiary,\n            nativeTokenRewardLeft: 0,\n            reputationChangeLeft: 0,\n            ethRewardLeft: 0,\n            externalTokenRewardLeft: 0,\n            acceptedByVotingMachine: false\n        });\n        organizationProposals[proposalId] = proposal;\n\n        emit NewContributionProposal(\n            address(avatar),\n            proposalId,\n            address(votingMachine),\n            _descriptionHash,\n            _reputationChange,\n            _rewards,\n            _externalToken,\n            beneficiary,\n            proposer\n        );\n\n        proposalsInfo[address(votingMachine)][proposalId] = ProposalInfo({\n            blockNumber:block.number,\n            avatar:avatar\n        });\n  ","after":"   function proposeContributionReward(\n        string calldata _descriptionHash,\n        int256 _reputationChange,\n        uint[3] calldata _rewards,\n        IERC20 _externalToken,\n        address payable _beneficiary,\n        address _proposer\n    )\n    public\n    returns(bytes32 proposalId)\n    {\n        address proposer = _proposer;\n        if (proposer == address(0)) {\n            proposer = msg.sender;\n        }\n        proposalId = votingMachine.propose(2, voteParams, proposer, address(avatar));\n        address payable beneficiary = _beneficiary;\n        if (beneficiary == address(0)) {\n            beneficiary = msg.sender;\n        }\n\n        ContributionProposal memory proposal = ContributionProposal({\n            nativeTokenReward: _rewards[0],\n            reputationChange: _reputationChange,\n            ethReward: _rewards[1],\n            externalToken: _externalToken,\n            externalTokenReward: _rewards[2],\n            beneficiary: beneficiary,\n            nativeTokenRewardLeft: 0,\n            reputationChangeLeft: 0,\n            ethRewardLeft: 0,\n            externalTokenRewardLeft: 0,\n            acceptedByVotingMachine: false\n        });\n        organizationProposals[proposalId] = proposal;\n\n        emit NewContributionProposal(\n            address(avatar),\n            proposalId,\n            address(votingMachine),\n            _descriptionHash,\n            _reputationChange,\n            _rewards,\n            _externalToken,\n            beneficiary,\n            proposer\n        );\n\n        proposalsInfo[address(votingMachine)][proposalId] = ProposalInfo({\n            blockNumber:block.number,\n            avatar:avatar\n        });\n  ","contract":"ContributionRewardExt","time":0},{"type":"external-function ","before":"   function redeem(bytes32 _proposalId, bool[4] memory _whatToRedeem)\n    public\n    returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)\n    {\n\n        if (_whatToRedeem[0]) {\n            reputationReward = redeemReputation(_proposalId);\n        }\n\n        if (_whatToRedeem[1]) {\n            nativeTokenReward = redeemNativeToken(_proposalId);\n        }\n\n        if (_whatToRedeem[2]) {\n            etherReward = redeemEther(_proposalId);\n        }\n\n        if (_whatToRedeem[3]) {\n            externalTokenReward = redeemExternalToken(_proposalId);\n        }\n  ","after":"   function redeem(bytes32 _proposalId, bool[4] calldata _whatToRedeem)\n    public\n    returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)\n    {\n\n        if (_whatToRedeem[0]) {\n            reputationReward = redeemReputation(_proposalId);\n        }\n\n        if (_whatToRedeem[1]) {\n            nativeTokenReward = redeemNativeToken(_proposalId);\n        }\n\n        if (_whatToRedeem[2]) {\n            etherReward = redeemEther(_proposalId);\n        }\n\n        if (_whatToRedeem[3]) {\n            externalTokenReward = redeemExternalToken(_proposalId);\n        }\n  ","contract":"ContributionRewardExt","time":0}]}
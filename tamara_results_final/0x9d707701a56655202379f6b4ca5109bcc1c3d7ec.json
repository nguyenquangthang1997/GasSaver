{"time":115,"results":[{"type":"external-function ","before":"function batchTransfer(address[] memory _recipients, uint[] memory _values) public onlyOwner returns(bool) {\n        require(_recipients.length > 0 && _recipients.length == _values.length);\n\n        uint total = 0;\n        for (uint i = 0; i < _values.length; i++) {\n            total = total.add(_values[i]);\n        }\n        require(total <= balances[msg.sender]);\n\n        uint64 _now = uint64(now);\n        for (uint j = 0; j < _recipients.length; j++) {\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]), _now));\n            emit Transfer(msg.sender, _recipients[j], _values[j]);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(total);\n        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n        if (balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), _now));\n\n        return true;\n    }","after":"function batchTransfer(address[] calldata _recipients, uint[] calldata _values) public onlyOwner returns(bool) {\n        require(_recipients.length > 0 && _recipients.length == _values.length);\n\n        uint total = 0;\n        for (uint i = 0; i < _values.length; i++) {\n            total = total.add(_values[i]);\n        }\n        require(total <= balances[msg.sender]);\n\n        uint64 _now = uint64(now);\n        for (uint j = 0; j < _recipients.length; j++) {\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]), _now));\n            emit Transfer(msg.sender, _recipients[j], _values[j]);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(total);\n        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n        if (balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), _now));\n\n        return true;\n    }","contract":"STAKDToken","time":0},{"type":"constant-restrict-modification  ","before":"string public name = \"STAKD\";","after":"string public constant name = \"STAKD\";","contract":"STAKDToken","time":0},{"type":"constant-restrict-modification  ","before":"string public symbol = \"SKD\";","after":"string public constant symbol = \"SKD\";","contract":"STAKDToken","time":0},{"type":"constant-restrict-modification  ","before":"uint public decimals = 18;","after":"uint public constant decimals = 18;","contract":"STAKDToken","time":0},{"type":"constant-restrict-modification  ","before":"uint public stakeMinAge = 2 days;","after":"uint public constant stakeMinAge = 2 days;","contract":"STAKDToken","time":0},{"type":"constant-restrict-modification  ","before":"uint public stakeMaxAge = 90 days;","after":"uint public constant stakeMaxAge = 90 days;","contract":"STAKDToken","time":0},{"type":"constant-restrict-modification  ","before":"uint public maxMintProofOfStake = 10 ** 17;","after":"uint public constant maxMintProofOfStake = 10 ** 17;","contract":"STAKDToken","time":0}]}
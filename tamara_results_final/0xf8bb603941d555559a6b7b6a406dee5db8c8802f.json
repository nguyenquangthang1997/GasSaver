{"time":21,"results":[{"type":"state-data-arrangement ","before":"\naddress payable public buyer;\naddress payable public seller;\naddress payable public arbitrator;\nuint256 public price;\nstring public details;\nstring public complaint;\nbool public disputed;\nbool public closed;","after":"uint256 public price;\nstring public details;\nstring public complaint;\naddress payable public buyer;\naddress payable public seller;\naddress payable public arbitrator;\nbool public disputed;\nbool public closed;\n","contract":"lexDAOetherEscrow","time":0},{"type":"external-function ","before":"function dispute(string memory _complaint) public {\n        require(msg.sender == buyer || msg.sender == seller);\n        require(closed == false);\n        disputed = true;\n        complaint = _complaint;\n        emit Disputed(msg.sender);\n    }","after":"function dispute(string calldata _complaint) public {\n        require(msg.sender == buyer || msg.sender == seller);\n        require(closed == false);\n        disputed = true;\n        complaint = _complaint;\n        emit Disputed(msg.sender);\n    }","contract":"lexDAOetherEscrow","time":0},{"type":"external-function ","before":"function newLEE(\n        address payable _seller, \n        string memory _details) payable public {\n        require(arbitrator != address(0));\n           \n        LEE = (new lexDAOetherEscrow).value(msg.value)(\n            msg.sender,\n            _seller,\n            arbitrator,\n            _details);\n        \n        escrows.push(address(LEE));\n        \n        emit Deployed(address(LEE), msg.sender, _seller);\n\n    }","after":"function newLEE(\n        address payable _seller, \n        string calldata _details) payable public {\n        require(arbitrator != address(0));\n           \n        LEE = (new lexDAOetherEscrow).value(msg.value)(\n            msg.sender,\n            _seller,\n            arbitrator,\n            _details);\n        \n        escrows.push(address(LEE));\n        \n        emit Deployed(address(LEE), msg.sender, _seller);\n\n    }","contract":"lexDAOetherEscrowFactory","time":0},{"type":"constant-restrict-modification  ","before":"uint8 public LEEversion = 2;","after":"uint8 public constant LEEversion = 2;","contract":"lexDAOetherEscrowFactory","time":0}]}
{"time":91,"results":[{"type":"external-function ","before":"function addToken(string memory symbolName, address erc20TokenAddress) public onlyowner {\n        require(!hasToken(symbolName));\n        require(tokenIndex + 1 > tokenIndex);\n        tokenIndex++;\n\n        tokens[tokenIndex].symbolName = symbolName;\n        tokens[tokenIndex].tokenContract = erc20TokenAddress;\n        emit TokenAddedToSystem(tokenIndex, symbolName, now);\n    }","after":"function addToken(string calldata symbolName, address erc20TokenAddress) public onlyowner {\n        require(!hasToken(symbolName));\n        require(tokenIndex + 1 > tokenIndex);\n        tokenIndex++;\n\n        tokens[tokenIndex].symbolName = symbolName;\n        tokens[tokenIndex].tokenContract = erc20TokenAddress;\n        emit TokenAddedToSystem(tokenIndex, symbolName, now);\n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function addTicker(string memory ticker) public onlyowner {\n        require(!hasTicker(ticker));\n        require(tickerIndex + 1 > tickerIndex);\n        tickerIndex++;\n\n        tickers[tickerIndex].ticker = ticker;\n        \n        emit TokenAddedToSystem(tickerIndex, ticker, now);\n    }","after":"function addTicker(string calldata ticker) public onlyowner {\n        require(!hasTicker(ticker));\n        require(tickerIndex + 1 > tickerIndex);\n        tickerIndex++;\n\n        tickers[tickerIndex].ticker = ticker;\n        \n        emit TokenAddedToSystem(tickerIndex, ticker, now);\n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function depositToken(string memory symbolName, uint amount) public {\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n        require(tokens[symbolNameIndex].tokenContract != address(0));\n\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n        \n        require(token.transferFrom(msg.sender, address(this), amount) == true);\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] + amount >= tokenBalanceForAddress[msg.sender][symbolNameIndex]);\n        tokenBalanceForAddress[msg.sender][symbolNameIndex] += amount;\n        emit DepositForTokenReceived(msg.sender, symbolNameIndex, amount, now);\n    }","after":"function depositToken(string calldata symbolName, uint amount) public {\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n        require(tokens[symbolNameIndex].tokenContract != address(0));\n\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n        \n        require(token.transferFrom(msg.sender, address(this), amount) == true);\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] + amount >= tokenBalanceForAddress[msg.sender][symbolNameIndex]);\n        tokenBalanceForAddress[msg.sender][symbolNameIndex] += amount;\n        emit DepositForTokenReceived(msg.sender, symbolNameIndex, amount, now);\n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function depositTokenByAdmin(string memory symbolName, uint amount, address who)  public onlyowner {\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n        require(tokens[symbolNameIndex].tokenContract != address(0));\n\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n\n        require(token.transferFrom(who, address(this), amount) == true);\n        require(tokenBalanceForAddress[who][symbolNameIndex] + amount >= tokenBalanceForAddress[who][symbolNameIndex]);\n        tokenBalanceForAddress[who][symbolNameIndex] += amount;\n        emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\n    }","after":"function depositTokenByAdmin(string calldata symbolName, uint amount, address who)  public onlyowner {\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n        require(tokens[symbolNameIndex].tokenContract != address(0));\n\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n\n        require(token.transferFrom(who, address(this), amount) == true);\n        require(tokenBalanceForAddress[who][symbolNameIndex] + amount >= tokenBalanceForAddress[who][symbolNameIndex]);\n        tokenBalanceForAddress[who][symbolNameIndex] += amount;\n        emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function increaseTokenBlance(string memory symbolName,  address who, uint amount) public onlyowner {\n       uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n     require(tokens[symbolNameIndex].tokenContract != address(0)); \n      require(tokenBalanceForAddress[who][symbolNameIndex] + amount >= tokenBalanceForAddress[who][symbolNameIndex]);\n       emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\n     \n    }","after":"function increaseTokenBlance(string calldata symbolName,  address who, uint amount) public onlyowner {\n       uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n     require(tokens[symbolNameIndex].tokenContract != address(0)); \n      require(tokenBalanceForAddress[who][symbolNameIndex] + amount >= tokenBalanceForAddress[who][symbolNameIndex]);\n       emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\n     \n    }","contract":"Instafinex_V1","time":1},{"type":"external-function ","before":"function decreaseTokenBlance(string memory symbolName,  address who, uint amount) public onlyowner {\n       uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n     require(tokens[symbolNameIndex].tokenContract != address(0)); \n      tokenBalanceForAddress[who][symbolNameIndex] - amount;\n       emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\n     \n    }","after":"function decreaseTokenBlance(string calldata symbolName,  address who, uint amount) public onlyowner {\n       uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n     require(tokens[symbolNameIndex].tokenContract != address(0)); \n      tokenBalanceForAddress[who][symbolNameIndex] - amount;\n       emit DepositForTokenReceived(who, symbolNameIndex, amount, now);\n     \n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function withdrawAllTokenByOwner(string memory symbolName) public onlyowner {\n    uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n    require(tokens[symbolNameIndex].tokenContract != address(0));\n    ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n    uint balance = token.balanceOf(address(this));\n    token.transfer(msg.sender, balance);\n    }","after":"function withdrawAllTokenByOwner(string calldata symbolName) public onlyowner {\n    uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n    require(tokens[symbolNameIndex].tokenContract != address(0));\n    ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n    uint balance = token.balanceOf(address(this));\n    token.transfer(msg.sender, balance);\n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function withdrawTokenByOwner(string memory symbolName, uint amount) public onlyowner {\n    uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n    require(tokens[symbolNameIndex].tokenContract != address(0));\n    ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n    uint balance = token.balanceOf(address(this));\n    require(balance >= amount, \"Insuficient fund\");\n    token.transfer(msg.sender, amount);\n    }","after":"function withdrawTokenByOwner(string calldata symbolName, uint amount) public onlyowner {\n    uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n    require(tokens[symbolNameIndex].tokenContract != address(0));\n    ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n    uint balance = token.balanceOf(address(this));\n    require(balance >= amount, \"Insuficient fund\");\n    token.transfer(msg.sender, amount);\n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function withdrawToken(string memory symbolName, uint amount) public{\n        require(isWithdrawalEnabled() == true, \"Transfer is not enabled\");\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n        require(tokens[symbolNameIndex].tokenContract != address(0));\n\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] - amount >= 0);\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] - amount <= tokenBalanceForAddress[msg.sender][symbolNameIndex]);\n\n        tokenBalanceForAddress[msg.sender][symbolNameIndex] -= amount;\n        require(token.transfer(msg.sender, amount) == true);\n        emit WithdrawalToken(msg.sender, symbolNameIndex, amount, now);\n        \n        \n        \n    \n    }","after":"function withdrawToken(string calldata symbolName, uint amount) public{\n        require(isWithdrawalEnabled() == true, \"Transfer is not enabled\");\n        uint8 symbolNameIndex = getSymbolIndexOrThrow(symbolName);\n        require(tokens[symbolNameIndex].tokenContract != address(0));\n\n        ERC20Interface token = ERC20Interface(tokens[symbolNameIndex].tokenContract);\n\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] - amount >= 0);\n        require(tokenBalanceForAddress[msg.sender][symbolNameIndex] - amount <= tokenBalanceForAddress[msg.sender][symbolNameIndex]);\n\n        tokenBalanceForAddress[msg.sender][symbolNameIndex] -= amount;\n        require(token.transfer(msg.sender, amount) == true);\n        emit WithdrawalToken(msg.sender, symbolNameIndex, amount, now);\n        \n        \n        \n    \n    }","contract":"Instafinex_V1","time":0},{"type":"external-function ","before":"function offChainFilledTrades(string memory tokenGet, string memory tokenGive, uint \n     price, uint valueGet, uint  valueGive, string memory ticker\n     , string memory date\n     , string memory trade_type\n     , address  buyer_address\n     , address seller_address\n   ) public{\n        \n\n        \n      uint tickerNameIndex = getTickerIndexOrThrow(ticker);\n      Trade memory t;\n      t.ticker = ticker;\n      t.trade_type = trade_type;\n      t.tokenGet  = tokenGet;\n      t.tokenGive = tokenGive;\n      t.price     = price;\n      t.valueGet  = valueGet;\n      t.valueGive = valueGive;\n      t.buyer_address =buyer_address;\n      t.seller_address = seller_address;\n      t.date = date;\n     \n      \n      trades[tickerNameIndex].push(t);\n\n \n    }","after":"function offChainFilledTrades(string calldata tokenGet, string calldata tokenGive, uint \n     price, uint valueGet, uint  valueGive, string calldata ticker\n     , string calldata date\n     , string calldata trade_type\n     , address  buyer_address\n     , address seller_address\n   ) public{\n        \n\n        \n      uint tickerNameIndex = getTickerIndexOrThrow(ticker);\n      Trade memory t;\n      t.ticker = ticker;\n      t.trade_type = trade_type;\n      t.tokenGet  = tokenGet;\n      t.tokenGive = tokenGive;\n      t.price     = price;\n      t.valueGet  = valueGet;\n      t.valueGive = valueGive;\n      t.buyer_address =buyer_address;\n      t.seller_address = seller_address;\n      t.date = date;\n     \n      \n      trades[tickerNameIndex].push(t);\n\n \n    }","contract":"Instafinex_V1","time":0}]}
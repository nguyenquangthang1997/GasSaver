{"time":38,"results":[{"type":"external-function ","before":"function bountyFunds(address[] memory beneficiary, uint256[] memory tokens) onlyOwner whenNotPaused public {\n        for (uint256 i = 0; i < beneficiary.length; i++) {\n            tokens[i] = SafeMath.mul(tokens[i],1 ether); \n            \n            require(bountySupply >= tokens[i], \"Remaining bounty supply is less\");\n            \n            bountySupply = SafeMath.sub(bountySupply,tokens[i]);\n            NannakTokenAddress.transfer(beneficiary[i], tokens[i]);\n        }\n    \n    emit TransferBountyTokens(beneficiary, tokens);\n    }","after":"function bountyFunds(address[] calldata beneficiary, uint256[] memory tokens) onlyOwner whenNotPaused public {\n        for (uint256 i = 0; i < beneficiary.length; i++) {\n            tokens[i] = SafeMath.mul(tokens[i],1 ether); \n            \n            require(bountySupply >= tokens[i], \"Remaining bounty supply is less\");\n            \n            bountySupply = SafeMath.sub(bountySupply,tokens[i]);\n            NannakTokenAddress.transfer(beneficiary[i], tokens[i]);\n        }\n    \n    emit TransferBountyTokens(beneficiary, tokens);\n    }","contract":"NanakShahiDistribution","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public totalSupply = SafeMath.mul(1000000000, 1 ether);","after":"uint256 public constant totalSupply = SafeMath.mul(1000000000, 1 ether);","contract":"NanakShahiDistribution","time":0}]}
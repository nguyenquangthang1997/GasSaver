{"time":63,"results":[{"type":"state-data-arrangement ","before":"\nstring public name;\nstring public symbol;\nuint8 public decimals;\nuint256 public totalSupply;\nuint256 public tokenLeft;\naddress public tokenAddress;\nmapping (address => uint256) public balanceOf;\nmapping (address => mapping (address => uint256)) public allowance;","after":"string public name;\nstring public symbol;\nuint256 public totalSupply;\nuint256 public tokenLeft;\nmapping (address => uint256) public balanceOf;\nmapping (address => mapping (address => uint256)) public allowance;\naddress public tokenAddress;\nuint8 public decimals;\n","contract":"TZVC","time":0},{"type":"external-function ","before":"function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) whenNotPaused public returns (bool success) {\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n        return false;\n    }","after":"function approveAndCall(address _spender, uint256 _value, bytes calldata _extraData) whenNotPaused public returns (bool success) {\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n        return false;\n    }","contract":"TZVC","time":0},{"type":"external-function ","before":"function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        require(_token == tokenAddress);\n        require(_value > 0);\n        require(_value <= tokenLeft);\n        ERC20 token = ERC20(_token);\n        if (token.transferFrom(_from, address(this), _value)) {\n            balanceOf[_from] = SafeMath.safeAdd(balanceOf[_from], _value);\n            tokenLeft = SafeMath.safeSub(tokenLeft, _value);\n            emit Mapping(_from, _value, _extraData);\n        }\n    }","after":"function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) public {\n        require(_token == tokenAddress);\n        require(_value > 0);\n        require(_value <= tokenLeft);\n        ERC20 token = ERC20(_token);\n        if (token.transferFrom(_from, address(this), _value)) {\n            balanceOf[_from] = SafeMath.safeAdd(balanceOf[_from], _value);\n            tokenLeft = SafeMath.safeSub(tokenLeft, _value);\n            emit Mapping(_from, _value, _extraData);\n        }\n    }","contract":"TZVC","time":0},{"type":"external-function ","before":"function burn(uint256 _value, string memory _zvAddr) public {\n        require(_value > 0);\n        require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);// Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply, _value);\n        emit Burn(msg.sender, _value, _zvAddr);// Notify\n    }","after":"function burn(uint256 _value, string calldata _zvAddr) public {\n        require(_value > 0);\n        require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);// Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply, _value);\n        emit Burn(msg.sender, _value, _zvAddr);// Notify\n    }","contract":"TZVC","time":0}]}
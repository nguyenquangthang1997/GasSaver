{"time":550,"results":[{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function multiPartySend(address[] memory _toAddresses, uint256[] memory _amounts, bytes memory _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","after":"function multiPartySend(address[] calldata _toAddresses, uint256[] calldata _amounts, bytes calldata _userData) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255, \"Unsupported number of addresses.\");\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length, \"Provided addresses does not equal to provided sums.\");\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            doSend(msg.sender,  msg.sender, _toAddresses[i], _amounts[i], _userData, \"\", true);\n        }\n    }","contract":"CALL","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0},{"type":"external-function ","before":"function executeTransaction(address destination, uint value, bytes memory data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","after":"function executeTransaction(address destination, uint value, bytes calldata data)\n    public\n    onlyOwner\n    {\n        require(externalCall(destination, value, data.length, data));\n        emit Transaction(destination, value, data);\n    }","contract":"CStore","time":0}]}
{"time":23,"results":[{"type":"external-function ","before":"function multisend(address _tokenAddr, bytes32 paymentId, address[] memory dests, uint256[] memory values)\n    public onlyPayoutWallet\n    returns (uint256)\n    {\n        require(dests.length > 0, \"Must have more than 1 destination address\");\n        require(values.length >= dests.length, \"Address to Value array size mismatch\");\n        require(successfulPayments[paymentId] != true, \"Payment ID already exists and was successful\");\n\n        uint256 i = 0;\n        while (i < dests.length) {\n           require(ERC20Interface(_tokenAddr).transfer(dests[i], values[i]));\n           i += 1;\n        }\n\n        successfulPayments[paymentId] = true;\n        emit Payment(paymentId);\n        return (i);\n    }","after":"function multisend(address _tokenAddr, bytes32 paymentId, address[] calldata dests, uint256[] calldata values)\n    public onlyPayoutWallet\n    returns (uint256)\n    {\n        require(dests.length > 0, \"Must have more than 1 destination address\");\n        require(values.length >= dests.length, \"Address to Value array size mismatch\");\n        require(successfulPayments[paymentId] != true, \"Payment ID already exists and was successful\");\n\n        uint256 i = 0;\n        while (i < dests.length) {\n           require(ERC20Interface(_tokenAddr).transfer(dests[i], values[i]));\n           i += 1;\n        }\n\n        successfulPayments[paymentId] = true;\n        emit Payment(paymentId);\n        return (i);\n    }","contract":"PoolHelper","time":0}]}
{"time":84,"results":[{"type":"external-function ","before":"function grab(\n        bytes32 reveal, bytes32 commit,\n        uint8 v, bytes32 r, bytes32 s,\n        bytes32 nonce, address funder,\n        uint128 amount, uint128 ratio,\n        uint256 start, uint128 range,\n        address payable target, bytes memory receipt,\n        bytes32[] memory old\n    ) public {\n        require(keccak256(abi.encodePacked(reveal)) == commit);\n        require(uint256(keccak256(abi.encodePacked(reveal, nonce))) >> 128 <= ratio);\n\n        // XXX: support EIP-712\n        bytes32 ticket = keccak256(abi.encode(commit, nonce, funder, amount, ratio, start, range, target, receipt));\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", ticket)), v, r, s);\n        require(signer != address(0));\n\n        {\n            mapping(bytes32 => Track) storage tracks = tracks_[target];\n\n            {\n                Track storage track = tracks[keccak256(abi.encodePacked(signer, ticket))];\n                uint256 until = start + range;\n                require(until > block.timestamp);\n                require(track.until_ == 0);\n                track.until_ = until;\n            }\n\n            for (uint256 i = 0; i != old.length; ++i) {\n                Track storage track = tracks[old[i]];\n                if (track.until_ <= block.timestamp)\n                    delete track.until_;\n            }\n        }\n\n        if (start < block.timestamp) {\n            uint128 limit = uint128(uint256(amount) * (range - (block.timestamp - start)) / range);\n            if (amount > limit)\n                amount = limit;\n        }\n\n        take(funder, signer, amount, target, receipt);\n    }","after":"function grab(\n        bytes32 reveal, bytes32 commit,\n        uint8 v, bytes32 r, bytes32 s,\n        bytes32 nonce, address funder,\n        uint128 amount, uint128 ratio,\n        uint256 start, uint128 range,\n        address payable target, bytes calldata receipt,\n        bytes32[] calldata old\n    ) public {\n        require(keccak256(abi.encodePacked(reveal)) == commit);\n        require(uint256(keccak256(abi.encodePacked(reveal, nonce))) >> 128 <= ratio);\n\n        // XXX: support EIP-712\n        bytes32 ticket = keccak256(abi.encode(commit, nonce, funder, amount, ratio, start, range, target, receipt));\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", ticket)), v, r, s);\n        require(signer != address(0));\n\n        {\n            mapping(bytes32 => Track) storage tracks = tracks_[target];\n\n            {\n                Track storage track = tracks[keccak256(abi.encodePacked(signer, ticket))];\n                uint256 until = start + range;\n                require(until > block.timestamp);\n                require(track.until_ == 0);\n                track.until_ = until;\n            }\n\n            for (uint256 i = 0; i != old.length; ++i) {\n                Track storage track = tracks[old[i]];\n                if (track.until_ <= block.timestamp)\n                    delete track.until_;\n            }\n        }\n\n        if (start < block.timestamp) {\n            uint128 limit = uint128(uint256(amount) * (range - (block.timestamp - start)) / range);\n            if (amount > limit)\n                amount = limit;\n        }\n\n        take(funder, signer, amount, target, receipt);\n    }","contract":"OrchidLottery","time":0}]}
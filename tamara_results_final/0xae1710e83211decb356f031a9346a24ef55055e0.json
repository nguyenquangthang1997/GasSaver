{"time":100,"results":[{"type":"external-function ","before":"   function initialize(\n        address _authKey,\n        address _authereumENSManager,\n        string memory _label,\n        uint256 _salt\n    )\n        public\n        initializer\n    {\n        // Set the CHAIN_ID\n        Account.initialize();\n        TransactionLimit.initialize();\n\n        // Add self as an authKey\n        authKeys[_authKey] = true;\n        authKeysArray.push(_authKey);\n        authKeysArrayIndex[_authKey] = authKeysArray.length - 1;\n        emit AddedAuthKey(_authKey);\n\n        // Register user in ENS\n        AuthereumENSManager(_authereumENSManager).register(_label, address(this), _salt);\n  ","after":"   function initialize(\n        address _authKey,\n        address _authereumENSManager,\n        string calldata _label,\n        uint256 _salt\n    )\n        public\n        initializer\n    {\n        // Set the CHAIN_ID\n        Account.initialize();\n        TransactionLimit.initialize();\n\n        // Add self as an authKey\n        authKeys[_authKey] = true;\n        authKeysArray.push(_authKey);\n        authKeysArrayIndex[_authKey] = authKeysArray.length - 1;\n        emit AddedAuthKey(_authKey);\n\n        // Register user in ENS\n        AuthereumENSManager(_authereumENSManager).register(_label, address(this), _salt);\n  ","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"   function executeTransaction(\n        address _destination,\n        uint256 _value,\n        bytes memory _data,\n        uint256 _gasLimit\n    )\n        public\n        onlyValidAuthKeyOrSelf\n        returns (bytes memory)\n    {\n        return _executeTransaction(_destination, _value, _data, _gasLimit);\n  ","after":"   function executeTransaction(\n        address _destination,\n        uint256 _value,\n        bytes calldata _data,\n        uint256 _gasLimit\n    )\n        public\n        onlyValidAuthKeyOrSelf\n        returns (bytes memory)\n    {\n        return _executeTransaction(_destination, _value, _data, _gasLimit);\n  ","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"   function addMultipleAuthKeys(address[] memory _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            addAuthKey(_authKeys[i]);\n        }\n  ","after":"   function addMultipleAuthKeys(address[] calldata _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            addAuthKey(_authKeys[i]);\n        }\n  ","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"   function removeMultipleAuthKeys(address[] memory _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            removeAuthKey(_authKeys[i]);\n        }\n  ","after":"   function removeMultipleAuthKeys(address[] calldata _authKeys) public onlyValidAuthKeyOrSelf {\n        for (uint256 i = 0; i < _authKeys.length; i++) {\n            removeAuthKey(_authKeys[i]);\n        }\n  ","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"   function swapMultipleAuthKeys(\n        address[] memory _oldAuthKeys,\n        address[] memory _newAuthKeys\n    )\n        public\n    {\n        require(_oldAuthKeys.length == _newAuthKeys.length, \"Input arrays not equal length\");\n        for (uint256 i = 0; i < _oldAuthKeys.length; i++) {\n            swapAuthKeys(_oldAuthKeys[i], _newAuthKeys[i]);\n        }\n  ","after":"   function swapMultipleAuthKeys(\n        address[] calldata _oldAuthKeys,\n        address[] calldata _newAuthKeys\n    )\n        public\n    {\n        require(_oldAuthKeys.length == _newAuthKeys.length, \"Input arrays not equal length\");\n        for (uint256 i = 0; i < _oldAuthKeys.length; i++) {\n            swapAuthKeys(_oldAuthKeys[i], _newAuthKeys[i]);\n        }\n  ","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"   function executeAuthKeyMetaTx(\n        address _destination,\n        bytes memory _data,\n        uint256 _value,\n        uint256 _gasLimit,\n        bytes memory _transactionDataSignature\n    )\n        public\n        returns (bytes memory)\n    {\n        uint256 startGas = gasleft();\n\n        bytes32 _txDataMessageHash = keccak256(abi.encodePacked(\n            address(this),\n            msg.sig,\n            CHAIN_ID,\n            _destination,\n            _data,\n            _value,\n            nonce,\n            tx.gasprice,\n            _gasLimit\n        )).toEthSignedMessageHash();\n\n        address transactionDataSigner = _validateAuthKeyMetaTxSigs(\n            _txDataMessageHash, _transactionDataSignature\n        );\n\n        bytes memory response = _executeTransactionWithRefund(\n            _destination, _value, _data, tx.gasprice, _gasLimit, startGas\n        );\n\n        return response;\n  ","after":"   function executeAuthKeyMetaTx(\n        address _destination,\n        bytes calldata _data,\n        uint256 _value,\n        uint256 _gasLimit,\n        bytes calldata _transactionDataSignature\n    )\n        public\n        returns (bytes memory)\n    {\n        uint256 startGas = gasleft();\n\n        bytes32 _txDataMessageHash = keccak256(abi.encodePacked(\n            address(this),\n            msg.sig,\n            CHAIN_ID,\n            _destination,\n            _data,\n            _value,\n            nonce,\n            tx.gasprice,\n            _gasLimit\n        )).toEthSignedMessageHash();\n\n        address transactionDataSigner = _validateAuthKeyMetaTxSigs(\n            _txDataMessageHash, _transactionDataSignature\n        );\n\n        bytes memory response = _executeTransactionWithRefund(\n            _destination, _value, _data, tx.gasprice, _gasLimit, startGas\n        );\n\n        return response;\n  ","contract":"AuthereumAccount","time":0},{"type":"external-function ","before":"   function executeLoginKeyMetaTx(\n        address _destination,\n        bytes memory _data,\n        uint256 _value,\n        uint256 _gasLimit,\n        bytes memory _transactionDataSignature,\n        bytes memory _loginKeyAuthorizationSignature\n    )\n        public\n        returns (bytes memory)\n    {\n        uint256 startGas = gasleft();\n\n        // This is only in loginKey because authKeys are not restricted by firewalls\n        require(checkFirewall(_value), \"Transaction blocked by the firewall\");\n\n        // Login key cannot upgrade the contract\n        require(checkDestination(_destination), \"Login key is not able to upgrade to proxy\");\n\n        // Update daily limits\n        updateEthDailyTransactionLimit(_value);\n\n        bytes32 _txDataMessageHash = keccak256(abi.encodePacked(\n            address(this),\n            msg.sig,\n            CHAIN_ID,\n            _destination,\n            _data,\n            _value,\n            nonce,\n            tx.gasprice,\n            _gasLimit\n        )).toEthSignedMessageHash();\n\n        address transactionDataSigner = validateLoginKeyMetaTxSigs(\n            _txDataMessageHash, _transactionDataSignature, _loginKeyAuthorizationSignature\n        );\n\n        bytes memory response = _executeTransactionWithRefund(\n            _destination, _value, _data, tx.gasprice, _gasLimit, startGas\n        );\n\n        return response;\n  ","after":"   function executeLoginKeyMetaTx(\n        address _destination,\n        bytes calldata _data,\n        uint256 _value,\n        uint256 _gasLimit,\n        bytes calldata _transactionDataSignature,\n        bytes calldata _loginKeyAuthorizationSignature\n    )\n        public\n        returns (bytes memory)\n    {\n        uint256 startGas = gasleft();\n\n        // This is only in loginKey because authKeys are not restricted by firewalls\n        require(checkFirewall(_value), \"Transaction blocked by the firewall\");\n\n        // Login key cannot upgrade the contract\n        require(checkDestination(_destination), \"Login key is not able to upgrade to proxy\");\n\n        // Update daily limits\n        updateEthDailyTransactionLimit(_value);\n\n        bytes32 _txDataMessageHash = keccak256(abi.encodePacked(\n            address(this),\n            msg.sig,\n            CHAIN_ID,\n            _destination,\n            _data,\n            _value,\n            nonce,\n            tx.gasprice,\n            _gasLimit\n        )).toEthSignedMessageHash();\n\n        address transactionDataSigner = validateLoginKeyMetaTxSigs(\n            _txDataMessageHash, _transactionDataSignature, _loginKeyAuthorizationSignature\n        );\n\n        bytes memory response = _executeTransactionWithRefund(\n            _destination, _value, _data, tx.gasprice, _gasLimit, startGas\n        );\n\n        return response;\n  ","contract":"AuthereumAccount","time":0}]}
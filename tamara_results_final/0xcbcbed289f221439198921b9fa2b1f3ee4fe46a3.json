{"time":355,"results":[{"type":"external-function ","before":"= DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"Coin Must Between 1 to maxCoin\");\n\n        uint lastInTime = now;\n        (uint uid,uint frozenCoin,uint freeCoin,,uint grantTime,) = db.getUserInfo(msg.sender);\n        if(uid == 0) {\n            //the checking condition\n            require(!compareStr(_code,\"\") && bytes(_code).length == 6, \"invalid invite code\");\n            require(db.getCodeMapping(_code) == address(0), \"code must different\");\n            address _parentAddr = db.getCodeMapping(_pCode);\n            require(compareStr(_pCode, \"000000\") || _parentAddr != address(0), \"Parent User not exist\");\n            require(_parentAddr != msg.sender, \"Parent User Is Not Owner\");\n            \n         ","after":"= DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"Coin Must Between 1 to maxCoin\");\n\n        uint lastInTime = now;\n        (uint uid,uint frozenCoin,uint freeCoin,,uint grantTime,) = db.getUserInfo(msg.sender);\n        if(uid == 0) {\n            //the checking condition\n            require(!compareStr(_code,\"\") && bytes(_code).length == 6, \"invalid invite code\");\n            require(db.getCodeMapping(_code) == address(0), \"code must different\");\n            address _parentAddr = db.getCodeMapping(_pCode);\n            require(compareStr(_pCode, \"000000\") || _parentAddr != address(0), \"Parent User not exist\");\n            require(_parentAddr != msg.sender, \"Parent User Is Not Owner\");\n            \n         ","contract":"Ev5","time":0},{"type":"external-function ","before":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","after":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","contract":"Ev5","time":0},{"type":"external-function ","before":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","after":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","contract":"Ev5","time":0},{"type":"external-function ","before":"(string memory _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","after":"(string calldata _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","contract":"Ev5","time":0},{"type":"external-function ","before":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","after":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","contract":"Ev5","time":0},{"type":"external-function ","before":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","after":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","contract":"Ev5","time":0},{"type":"external-function ","before":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","after":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","contract":"Ev5","time":0},{"type":"external-function ","before":"int minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"","after":"int minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"","contract":"Ev5","time":0},{"type":"external-function ","before":"tart, uint _end, uint _onlyOne) public;\n}\n\ncontract Ev5 is Whitelist {\n    string public EV5_NAME = \"Ev5.win GameFather\";\n    //lib using list\n    using SafeMath for *;\n\n    //Loglist\n    event InvestEvent(address indexed _addr, string _code, string _pCode, uint _value, uint time);\n    event ReInEvent(address indexed _addr, uint _value, uint _value1, uint time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint time);\n\n    //platform setting\n    bool private _platformPower = true;\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //base param setting\n    uint ethWei = 1 ether;\n    uint maxCoin = 30 ether;\n    uint minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing o","after":"tart, uint _end, uint _onlyOne) public;\n}\n\ncontract Ev5 is Whitelist {\n    string public EV5_NAME = \"Ev5.win GameFather\";\n    //lib using list\n    using SafeMath for *;\n\n    //Loglist\n    event InvestEvent(address indexed _addr, string _code, string _pCode, uint _value, uint time);\n    event ReInEvent(address indexed _addr, uint _value, uint _value1, uint time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint time);\n\n    //platform setting\n    bool private _platformPower = true;\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //base param setting\n    uint ethWei = 1 ether;\n    uint maxCoin = 30 ether;\n    uint minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing o","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":" uint, uint);\n    function getUserOut(address ","after":" uint, uint);\n    function getUserOut(address ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"nt _onlyOne) public;\n ","after":"nt _onlyOne) public;\n ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"ateUser2(address _addr, uint _frozenCoin, uint","after":"ateUser2(address _addr, uint _frozenCoin, uint","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"ing memory _code) publ","after":"ing memory _code) publ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"=====\n*\n*\n╔═╗╦  ╦ ┬ ┬┬┌┐�","after":"=====\n*\n*\n╔═╗╦  ╦ ┬ ┬┬┌┐�","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":" (uint);\n}\ncontract DB","after":" (uint);\n}\ncontract DB","contract":"Ev5","time":1},{"type":"external-function ","before":"= DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"Coin Must Between 1 to maxCoin\");\n\n        uint lastInTime = now;\n        (uint uid,uint frozenCoin,uint freeCoin,,uint grantTime,) = db.getUserInfo(msg.sender);\n        if(uid == 0) {\n            //the checking condition\n            require(!compareStr(_code,\"\") && bytes(_code).length == 6, \"invalid invite code\");\n            require(db.getCodeMapping(_code) == address(0), \"code must different\");\n            address _parentAddr = db.getCodeMapping(_pCode);\n            require(compareStr(_pCode, \"000000\") || _parentAddr != address(0), \"Parent User not exist\");\n            require(_parentAddr != msg.sender, \"Parent User Is Not Owner\");\n            \n         ","after":"= DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"Coin Must Between 1 to maxCoin\");\n\n        uint lastInTime = now;\n        (uint uid,uint frozenCoin,uint freeCoin,,uint grantTime,) = db.getUserInfo(msg.sender);\n        if(uid == 0) {\n            //the checking condition\n            require(!compareStr(_code,\"\") && bytes(_code).length == 6, \"invalid invite code\");\n            require(db.getCodeMapping(_code) == address(0), \"code must different\");\n            address _parentAddr = db.getCodeMapping(_pCode);\n            require(compareStr(_pCode, \"000000\") || _parentAddr != address(0), \"Parent User not exist\");\n            require(_parentAddr != msg.sender, \"Parent User Is Not Owner\");\n            \n         ","contract":"Ev5","time":0},{"type":"external-function ","before":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","after":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","contract":"Ev5","time":0},{"type":"external-function ","before":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","after":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","contract":"Ev5","time":0},{"type":"external-function ","before":"(string memory _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","after":"(string calldata _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","contract":"Ev5","time":0},{"type":"external-function ","before":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","after":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","contract":"Ev5","time":0},{"type":"external-function ","before":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","after":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","contract":"Ev5","time":0},{"type":"external-function ","before":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","after":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","contract":"Ev5","time":0},{"type":"external-function ","before":"int minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"","after":"int minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"","contract":"Ev5","time":0},{"type":"external-function ","before":"tart, uint _end, uint _onlyOne) public;\n}\n\ncontract Ev5 is Whitelist {\n    string public EV5_NAME = \"Ev5.win GameFather\";\n    //lib using list\n    using SafeMath for *;\n\n    //Loglist\n    event InvestEvent(address indexed _addr, string _code, string _pCode, uint _value, uint time);\n    event ReInEvent(address indexed _addr, uint _value, uint _value1, uint time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint time);\n\n    //platform setting\n    bool private _platformPower = true;\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //base param setting\n    uint ethWei = 1 ether;\n    uint maxCoin = 30 ether;\n    uint minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing o","after":"tart, uint _end, uint _onlyOne) public;\n}\n\ncontract Ev5 is Whitelist {\n    string public EV5_NAME = \"Ev5.win GameFather\";\n    //lib using list\n    using SafeMath for *;\n\n    //Loglist\n    event InvestEvent(address indexed _addr, string _code, string _pCode, uint _value, uint time);\n    event ReInEvent(address indexed _addr, uint _value, uint _value1, uint time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint time);\n\n    //platform setting\n    bool private _platformPower = true;\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //base param setting\n    uint ethWei = 1 ether;\n    uint maxCoin = 30 ether;\n    uint minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing o","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":" uint, uint);\n    function getUserOut(address ","after":" uint, uint);\n    function getUserOut(address ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"nt _onlyOne) public;\n ","after":"nt _onlyOne) public;\n ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"ateUser2(address _addr, uint _frozenCoin, uint","after":"ateUser2(address _addr, uint _frozenCoin, uint","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"ing memory _code) publ","after":"ing memory _code) publ","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":"=====\n*\n*\n╔═╗╦  ╦ ┬ ┬┬┌┐�","after":"=====\n*\n*\n╔═╗╦  ╦ ┬ ┬┬┌┐�","contract":"Ev5","time":1},{"type":"constant-restrict-modification  ","before":" (uint);\n}\ncontract DB","after":" (uint);\n}\ncontract DB","contract":"Ev5","time":1},{"type":"external-function ","before":"= DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"Coin Must Between 1 to maxCoin\");\n\n        uint lastInTime = now;\n        (uint uid,uint frozenCoin,uint freeCoin,,uint grantTime,) = db.getUserInfo(msg.sender);\n        if(uid == 0) {\n            //the checking condition\n            require(!compareStr(_code,\"\") && bytes(_code).length == 6, \"invalid invite code\");\n            require(db.getCodeMapping(_code) == address(0), \"code must different\");\n            address _parentAddr = db.getCodeMapping(_pCode);\n            require(compareStr(_pCode, \"000000\") || _parentAddr != address(0), \"Parent User not exist\");\n            require(_parentAddr != msg.sender, \"Parent User Is Not Owner\");\n            \n         ","after":"= DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"Coin Must Between 1 to maxCoin\");\n\n        uint lastInTime = now;\n        (uint uid,uint frozenCoin,uint freeCoin,,uint grantTime,) = db.getUserInfo(msg.sender);\n        if(uid == 0) {\n            //the checking condition\n            require(!compareStr(_code,\"\") && bytes(_code).length == 6, \"invalid invite code\");\n            require(db.getCodeMapping(_code) == address(0), \"code must different\");\n            address _parentAddr = db.getCodeMapping(_pCode);\n            require(compareStr(_pCode, \"000000\") || _parentAddr != address(0), \"Parent User not exist\");\n            require(_parentAddr != msg.sender, \"Parent User Is Not Owner\");\n            \n         ","contract":"Ev5","time":0},{"type":"external-function ","before":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","after":" * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n  ","contract":"Ev5","time":0},{"type":"external-function ","before":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","after":"th; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n    /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whit","contract":"Ev5","time":0},{"type":"external-function ","before":"(string memory _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","after":"(string calldata _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n}\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization contr","contract":"Ev5","time":0},{"type":"external-function ","before":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","after":"ssToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _","contract":"Ev5","time":0},{"type":"external-function ","before":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","after":"aram _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string memory _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_o","contract":"Ev5","time":0},{"type":"external-function ","before":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","after":"a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant RO","contract":"Ev5","time":0},{"type":"external-function ","before":"int minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"","after":"int minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing or wait to starting!\");\n        _;\n    }\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        require(tx.origin == msg.sender, \"sorry human only\");\n        _;\n    }\n\n    function invest(string memory _code, string memory _pCode)\n        public\n        payable\n        isHuman()\n    {\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"Coin Must Integer\");\n        require(msg.value >= 1 * ethWei && msg.value <= maxCoin, \"","contract":"Ev5","time":0},{"type":"external-function ","before":"tart, uint _end, uint _onlyOne) public;\n}\n\ncontract Ev5 is Whitelist {\n    string public EV5_NAME = \"Ev5.win GameFather\";\n    //lib using list\n    using SafeMath for *;\n\n    //Loglist\n    event InvestEvent(address indexed _addr, string _code, string _pCode, uint _value, uint time);\n    event ReInEvent(address indexed _addr, uint _value, uint _value1, uint time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint time);\n\n    //platform setting\n    bool private _platformPower = true;\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //base param setting\n    uint ethWei = 1 ether;\n    uint maxCoin = 30 ether;\n    uint minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing o","after":"tart, uint _end, uint _onlyOne) public;\n}\n\ncontract Ev5 is Whitelist {\n    string public EV5_NAME = \"Ev5.win GameFather\";\n    //lib using list\n    using SafeMath for *;\n\n    //Loglist\n    event InvestEvent(address indexed _addr, string _code, string _pCode, uint _value, uint time);\n    event ReInEvent(address indexed _addr, uint _value, uint _value1, uint time);\n    event TransferEvent(address indexed _from, address indexed _to, uint _value, uint time);\n\n    //platform setting\n    bool private _platformPower = true;\n    //include other contract\n    DB db;\n    Vendor env;\n\n    //base param setting\n    uint ethWei = 1 ether;\n    uint maxCoin = 30 ether;\n    uint minSelf = 1;\n    uint maxSelf = 5;\n    uint withdrawRadix = 1;\n    bool private reEntrancyMutex = false;\n    address[5] private _addrs;  //_dAddr0,_envAddr1,feeAddr1,feeAddr2,feeAddr3\n    uint[3] feeRo = [15,10,10]; //div(1000)\n\n    //the content of contract is Beginning\n    constructor (address _dAddr, address _envAddr) public {\n        //address _dAddr = 0x1C74569c9f2228EBcfAF5147d3F4377be015d615;\n        //address _envAddr = 0x4b3F56ad747872a87282360DBE2300E347090e57;\n        _addrs = [0x9732D32F4517A0A238441EcA4E45C1584A832fE0, 0x484A88721bD0e0280faC74F6261F9f340555F785, 0x0e8b5fb9673091C5368316595f77c7E3CBe11Bc6, _dAddr, _envAddr];\n    \n        db = DB(_addrs[3]);\n        env = Vendor(_addrs[4]);\n    }\n\n    function deposit() public payable {\n    }\n\n    /**\n    * @dev prevents contracts from interacting with Ev5.win\n    */\n    modifier isOpen() {\n        require(_platformPower == true,\"platform is repairing o","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":" uint, uint);\n    function getUserOut(address ","after":" uint, uint);\n    function getUserOut(address ","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":"nt _onlyOne) public;\n ","after":"nt _onlyOne) public;\n ","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":"ateUser2(address _addr, uint _frozenCoin, uint","after":"ateUser2(address _addr, uint _frozenCoin, uint","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":"ing memory _code) publ","after":"ing memory _code) publ","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":"=====\n*\n*\n╔═╗╦  ╦ ┬ ┬┬┌┐�","after":"=====\n*\n*\n╔═╗╦  ╦ ┬ ┬┬┌┐�","contract":"Ev5","time":0},{"type":"constant-restrict-modification  ","before":" (uint);\n}\ncontract DB","after":" (uint);\n}\ncontract DB","contract":"Ev5","time":0}]}
{"time":33,"results":[{"type":"struct-data-arrangement ","before":"\nstring cpf\nstring codigoCurso\nstring nomeAluno\nstring nomeCurso\nstring dataInicioFim\nuint8 cargaHoraria\nbytes32 hashCertificado\nbool exists","after":"string cpf\nstring codigoCurso\nstring nomeAluno\nstring nomeCurso\nstring dataInicioFim\nbytes32 hashCertificado\nuint8 cargaHoraria\nbool exists\n","contract":"Laurea","time":0},{"type":"external-function ","before":"function editSchool(string memory _name, string memory _taxID, address _schoolAddress) public {\n        require (msg.sender == school.schoolAddress || msg.sender == laurea);\n        school = School(_name, _taxID, _schoolAddress);\n    }","after":"function editSchool(string calldata _name, string calldata _taxID, address _schoolAddress) public {\n        require (msg.sender == school.schoolAddress || msg.sender == laurea);\n        school = School(_name, _taxID, _schoolAddress);\n    }","contract":"Laurea","time":0},{"type":"external-function ","before":"function addCertificado(string memory _cpf, string memory _codigoCurso, string memory _nomeAluno, string memory _nomeCurso, string memory  _dataInicioFim,  uint8 _cargaHoraria) public returns (bytes32) {\n        require (msg.sender == school.schoolAddress || msg.sender == laurea);\n        bytes32 hashCertificado = keccak256(abi.encodePacked(_cpf, _codigoCurso));\n        CertificadoAluno memory ca = CertificadoAluno(_cpf, _codigoCurso, _nomeAluno, _nomeCurso, _dataInicioFim, _cargaHoraria, hashCertificado, true);\n        certificados[hashCertificado] = ca;\n        emit StudentLaurated (ca.codigoCurso, ca.cpf, ca.nomeAluno, ca.nomeCurso, hashCertificado);\n        return hashCertificado;\n    }","after":"function addCertificado(string calldata _cpf, string calldata _codigoCurso, string calldata _nomeAluno, string calldata _nomeCurso, string calldata  _dataInicioFim,  uint8 _cargaHoraria) public returns (bytes32) {\n        require (msg.sender == school.schoolAddress || msg.sender == laurea);\n        bytes32 hashCertificado = keccak256(abi.encodePacked(_cpf, _codigoCurso));\n        CertificadoAluno memory ca = CertificadoAluno(_cpf, _codigoCurso, _nomeAluno, _nomeCurso, _dataInicioFim, _cargaHoraria, hashCertificado, true);\n        certificados[hashCertificado] = ca;\n        emit StudentLaurated (ca.codigoCurso, ca.cpf, ca.nomeAluno, ca.nomeCurso, hashCertificado);\n        return hashCertificado;\n    }","contract":"Laurea","time":0},{"type":"external-function ","before":"function alterarCertificado (bytes32 _hash, string memory _nomeAluno, string memory _nomeCurso, string memory  _dataInicioFim,  uint8 _cargaHoraria ) public returns(bool) {\n        require (msg.sender == school.schoolAddress || msg.sender == laurea);\n        CertificadoAluno storage ca = certificados[_hash];\n        ca.nomeAluno = _nomeAluno;\n        ca.nomeCurso = _nomeCurso;\n        ca.dataInicioFim = _dataInicioFim;\n        ca.cargaHoraria = _cargaHoraria;\n        emit StudentLaurated (ca.codigoCurso, ca.cpf, ca.nomeAluno, ca.nomeCurso, _hash);\n        return true;\n    }","after":"function alterarCertificado (bytes32 _hash, string calldata _nomeAluno, string calldata _nomeCurso, string calldata  _dataInicioFim,  uint8 _cargaHoraria ) public returns(bool) {\n        require (msg.sender == school.schoolAddress || msg.sender == laurea);\n        CertificadoAluno storage ca = certificados[_hash];\n        ca.nomeAluno = _nomeAluno;\n        ca.nomeCurso = _nomeCurso;\n        ca.dataInicioFim = _dataInicioFim;\n        ca.cargaHoraria = _cargaHoraria;\n        emit StudentLaurated (ca.codigoCurso, ca.cpf, ca.nomeAluno, ca.nomeCurso, _hash);\n        return true;\n    }","contract":"Laurea","time":0}]}
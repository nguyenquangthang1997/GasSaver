{"time":71,"results":[{"type":"state-data-arrangement ","before":"\naddress private _beneficiary;\nuint256 private _cliff;\nuint256 private _start;\nuint256 private _duration;\nbool private _revocable;\nmapping (address => uint256) private _released;\nmapping (address => bool) private _revoked;","after":"uint256 private _cliff;\nuint256 private _start;\nuint256 private _duration;\nmapping (address => uint256) private _released;\nmapping (address => bool) private _revoked;\naddress private _beneficiary;\nbool private _revocable;\n","contract":"TokenVesting","time":0},{"type":"external-function ","before":"function createVestingContracts(\n        address token,\n        address[] memory beneficiaries,\n        uint256[] memory startTimes,\n        uint256[] memory cliffDurations,\n        uint256[] memory durations,\n        uint256[] memory amounts\n    ) public {\n        require(token != address(0), \"Token cannot be zero\");\n        require(beneficiaries.length > 0, \"No beneficiaries\");\n        require(\n            beneficiaries.length == startTimes.length &&\n            startTimes.length == cliffDurations.length &&\n            cliffDurations.length == durations.length &&\n            durations.length == amounts.length,\n            \"All inputs must have the same length\"\n        );\n\n        IERC20 erc20 = IERC20(token);\n\n        bool revocable = false;\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            require(beneficiaries[i] != address(0), \"Beneficiary cannot be zero\");\n            TokenVesting vesting = new TokenVesting(\n                beneficiaries[i],\n                startTimes[i],\n                cliffDurations[i],\n                durations[i],\n                revocable\n            );\n\n            // Transfer tokens from sender (TokenDistribution) and forward them to the vesting contract(s)\n            require(erc20.transferFrom(msg.sender, address(this), amounts[i]), \"Failed to transfer from Distribution\");\n            require(erc20.transfer(address(vesting), amounts[i]), \"Token failed to transfer\");\n\n            emit TokenVestingCreated(address(vesting), token, amounts[i], beneficiaries[i], startTimes[i], cliffDurations[i], durations[i]);\n        }\n    }","after":"function createVestingContracts(\n        address token,\n        address[] calldata beneficiaries,\n        uint256[] calldata startTimes,\n        uint256[] calldata cliffDurations,\n        uint256[] calldata durations,\n        uint256[] calldata amounts\n    ) public {\n        require(token != address(0), \"Token cannot be zero\");\n        require(beneficiaries.length > 0, \"No beneficiaries\");\n        require(\n            beneficiaries.length == startTimes.length &&\n            startTimes.length == cliffDurations.length &&\n            cliffDurations.length == durations.length &&\n            durations.length == amounts.length,\n            \"All inputs must have the same length\"\n        );\n\n        IERC20 erc20 = IERC20(token);\n\n        bool revocable = false;\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            require(beneficiaries[i] != address(0), \"Beneficiary cannot be zero\");\n            TokenVesting vesting = new TokenVesting(\n                beneficiaries[i],\n                startTimes[i],\n                cliffDurations[i],\n                durations[i],\n                revocable\n            );\n\n            // Transfer tokens from sender (TokenDistribution) and forward them to the vesting contract(s)\n            require(erc20.transferFrom(msg.sender, address(this), amounts[i]), \"Failed to transfer from Distribution\");\n            require(erc20.transfer(address(vesting), amounts[i]), \"Token failed to transfer\");\n\n            emit TokenVestingCreated(address(vesting), token, amounts[i], beneficiaries[i], startTimes[i], cliffDurations[i], durations[i]);\n        }\n    }","contract":"TokenVestingFactory","time":0}]}
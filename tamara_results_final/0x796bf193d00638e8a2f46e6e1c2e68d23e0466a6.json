{"time":210,"results":[{"type":"external-function ","before":"function preRegAdmins(address [] memory _adminAddress) public onlyOwner{\n\n        require(currUserID <= 100, \"No more admins can be registered\");\n\n        UserStruct memory userStruct;\n\n        for(uint i = 0; i < _adminAddress.length; i++){\n\n            require(!users[_adminAddress[i]].isExist, 'One of the users exist');\n            currUserID++;\n\n            if(currUserID == 1){\n                userStruct = UserStruct({\n                isExist: true,\n                id: currUserID,\n                referrerIDMatrix1: 1,\n                referrerIDMatrix2: 1,\n                referralCounter: 2,\n                referralMatrix1: new address[](0),\n                referralMatrix2: new address[](0)\n        });\n\n            users[_adminAddress[i]] = userStruct;\n            userList[currUserID] = _adminAddress[i];\n\n            for(uint j = 1; j <= 6; j++) {\n                users[_adminAddress[i]].levelExpiredMatrix1[j] = 66666666666;\n                users[_adminAddress[i]].levelExpiredMatrix2[j] = 66666666666;\n            }\n            \n        }\n            else {\n                    uint _referrerIDMatrix1;\n                    uint _referrerIDMatrix2 = 1;\n\n                    _referrerIDMatrix1 = findAvailablePersonMatrix1();\n\n                    if(users[userList[_referrerIDMatrix2]].referralMatrix2.length >= REFERRER_1_LEVEL_LIMIT) \n                        _referrerIDMatrix2 = users[findAvailablePersonMatrix2(userList[_referrerIDMatrix2])].id;\n\n                                       \n                    userStruct = UserStruct({\n                        isExist: true,\n                        id: currUserID,\n                        referrerIDMatrix1: _referrerIDMatrix1,\n                        referrerIDMatrix2: _referrerIDMatrix2,\n                        referralCounter: 2,\n                        referralMatrix1: new address[](0),\n                        referralMatrix2: new address[](0)\n                    });\n\n                    users[_adminAddress[i]] = userStruct;\n                    userList[currUserID] = _adminAddress[i];\n\n                    for(uint j = 1; j <= 6; j++) {\n                        users[_adminAddress[i]].levelExpiredMatrix1[j] = 66666666666;\n                        users[_adminAddress[i]].levelExpiredMatrix2[j] = 66666666666;\n                    }\n\n                    users[userList[_referrerIDMatrix1]].referralMatrix1.push(_adminAddress[i]);\n                    users[userList[_referrerIDMatrix2]].referralMatrix2.push(_adminAddress[i]);\n\n                }\n    }\n}","after":"function preRegAdmins(address [] calldata _adminAddress) public onlyOwner{\n\n        require(currUserID <= 100, \"No more admins can be registered\");\n\n        UserStruct memory userStruct;\n\n        for(uint i = 0; i < _adminAddress.length; i++){\n\n            require(!users[_adminAddress[i]].isExist, 'One of the users exist');\n            currUserID++;\n\n            if(currUserID == 1){\n                userStruct = UserStruct({\n                isExist: true,\n                id: currUserID,\n                referrerIDMatrix1: 1,\n                referrerIDMatrix2: 1,\n                referralCounter: 2,\n                referralMatrix1: new address[](0),\n                referralMatrix2: new address[](0)\n        });\n\n            users[_adminAddress[i]] = userStruct;\n            userList[currUserID] = _adminAddress[i];\n\n            for(uint j = 1; j <= 6; j++) {\n                users[_adminAddress[i]].levelExpiredMatrix1[j] = 66666666666;\n                users[_adminAddress[i]].levelExpiredMatrix2[j] = 66666666666;\n            }\n            \n        }\n            else {\n                    uint _referrerIDMatrix1;\n                    uint _referrerIDMatrix2 = 1;\n\n                    _referrerIDMatrix1 = findAvailablePersonMatrix1();\n\n                    if(users[userList[_referrerIDMatrix2]].referralMatrix2.length >= REFERRER_1_LEVEL_LIMIT) \n                        _referrerIDMatrix2 = users[findAvailablePersonMatrix2(userList[_referrerIDMatrix2])].id;\n\n                                       \n                    userStruct = UserStruct({\n                        isExist: true,\n                        id: currUserID,\n                        referrerIDMatrix1: _referrerIDMatrix1,\n                        referrerIDMatrix2: _referrerIDMatrix2,\n                        referralCounter: 2,\n                        referralMatrix1: new address[](0),\n                        referralMatrix2: new address[](0)\n                    });\n\n                    users[_adminAddress[i]] = userStruct;\n                    userList[currUserID] = _adminAddress[i];\n\n                    for(uint j = 1; j <= 6; j++) {\n                        users[_adminAddress[i]].levelExpiredMatrix1[j] = 66666666666;\n                        users[_adminAddress[i]].levelExpiredMatrix2[j] = 66666666666;\n                    }\n\n                    users[userList[_referrerIDMatrix1]].referralMatrix1.push(_adminAddress[i]);\n                    users[userList[_referrerIDMatrix2]].referralMatrix2.push(_adminAddress[i]);\n\n                }\n    }\n}","contract":"Etrix","time":0},{"type":"external-function ","before":"function addShareHolder(address [] memory _shareHolderAddress) public onlyOwner returns(address[] memory){\n\n        for(uint i=0; i < _shareHolderAddress.length; i++){\n\n            if(shareHolders.length < 20) {\n                shareHolders.push(_shareHolderAddress[i]);\n            }\n        }\n        return shareHolders;\n    }","after":"function addShareHolder(address [] calldata _shareHolderAddress) public onlyOwner returns(address[] memory){\n\n        for(uint i=0; i < _shareHolderAddress.length; i++){\n\n            if(shareHolders.length < 20) {\n                shareHolders.push(_shareHolderAddress[i]);\n            }\n        }\n        return shareHolders;\n    }","contract":"Etrix","time":0}]}
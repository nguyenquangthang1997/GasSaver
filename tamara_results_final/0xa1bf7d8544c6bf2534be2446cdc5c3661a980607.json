{"time":65,"results":[{"type":"de-morgan-condition ","before":"(!round.hasPaid[requester] || !round.hasPaid[respondent","after":"!((round.hasPaid[requester] || round.hasPaid[respondent)","loc":{"start":{"line":319,"column":12},"end":{"line":319,"column":66}},"contract":"BinaryArbitrableProxy","time":0},{"type":"external-function ","before":" function submitEvidence(uint _localDisputeID, string memory _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","after":" function submitEvidence(uint _localDisputeID, string calldata _evidenceURI) public {\n        DisputeStruct storage dispute = disputes[_localDisputeID];\n\n        require(dispute.isRuled == false, \"Is ruled already.\");\n\n        emit Evidence(dispute.arbitrator, _localDisputeID, msg.sender, _evidenceURI);\n    ","contract":"BinaryArbitrableProxy","time":0},{"type":"constant-restrict-modification  ","before":" uint8 requester = uint8(Party.Requester)","after":" uint8 constant requester = uint8(Party.Requester)","contract":"BinaryArbitrableProxy","time":0},{"type":"constant-restrict-modification  ","before":" uint8 respondent = uint8(Party.Respondent)","after":" uint8 constant respondent = uint8(Party.Respondent)","contract":"BinaryArbitrableProxy","time":0}]}
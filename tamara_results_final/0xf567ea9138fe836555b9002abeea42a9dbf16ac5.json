{"time":35,"results":[{"type":"external-function ","before":"function newContract(\n    uint256 outputAmount,\n    uint256 expiration,\n    bytes32 hashLock,\n    address payable receiver,\n    string memory outputNetwork,\n    string memory outputAddress\n  ) public payable {\n    address payable sender = msg.sender;\n    uint256 inputAmount = msg.value;\n\n    require(expiration > block.timestamp, 'INVALID_TIME');\n\n    require(inputAmount > 0, 'INVALID_AMOUNT');\n\n    bytes32 id = sha256(\n      abi.encodePacked(sender, receiver, inputAmount, hashLock, expiration)\n    );\n\n    contracts[id] = LockContract(\n      inputAmount,\n      outputAmount,\n      expiration,\n      hashLock,\n      SwapStatus.ACTIVE,\n      sender,\n      receiver,\n      outputNetwork,\n      outputAddress\n    );\n\n    emit NewContract(\n      inputAmount,\n      outputAmount,\n      expiration,\n      id,\n      hashLock,\n      sender,\n      receiver,\n      outputNetwork,\n      outputAddress\n    );\n  }","after":"function newContract(\n    uint256 outputAmount,\n    uint256 expiration,\n    bytes32 hashLock,\n    address payable receiver,\n    string calldata outputNetwork,\n    string calldata outputAddress\n  ) public payable {\n    address payable sender = msg.sender;\n    uint256 inputAmount = msg.value;\n\n    require(expiration > block.timestamp, 'INVALID_TIME');\n\n    require(inputAmount > 0, 'INVALID_AMOUNT');\n\n    bytes32 id = sha256(\n      abi.encodePacked(sender, receiver, inputAmount, hashLock, expiration)\n    );\n\n    contracts[id] = LockContract(\n      inputAmount,\n      outputAmount,\n      expiration,\n      hashLock,\n      SwapStatus.ACTIVE,\n      sender,\n      receiver,\n      outputNetwork,\n      outputAddress\n    );\n\n    emit NewContract(\n      inputAmount,\n      outputAmount,\n      expiration,\n      id,\n      hashLock,\n      sender,\n      receiver,\n      outputNetwork,\n      outputAddress\n    );\n  }","contract":"HashTimeLock","time":0}]}
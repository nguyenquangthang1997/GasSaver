{"time":50,"results":[{"type":"external-function ","before":"function registerPullPayment(\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes32[2] memory _paymentDetails, /// [0] paymentID, [1] businessID\n        address[2] memory _addresses, /// [0] customerAddress, [1] receiverAddress\n        uint256 _paymentAmount,\n        string memory _uniqueReferenceID\n    )\n    public\n    isExecutor()\n    isValidByte32(_paymentDetails[0])\n    isValidByte32(_paymentDetails[1])\n    isValidNumber(_paymentAmount)\n    isValidAddress(_addresses[0])\n    isValidAddress(_addresses[1])\n    pullPaymentDoesNotExists(_addresses[0], _paymentDetails[0])\n    {\n        bytes32[2] memory paymentDetails = _paymentDetails;\n\n        pullPayments[paymentDetails[0]].paymentDetails = _paymentDetails;\n        pullPayments[paymentDetails[0]].paymentAmount = _paymentAmount;\n        pullPayments[paymentDetails[0]].customerAddress = _addresses[0];\n        pullPayments[paymentDetails[0]].receiverAddress = _addresses[1];\n        pullPayments[paymentDetails[0]].uniqueReferenceID = _uniqueReferenceID;\n\n        require(isValidRegistration(\n                v,\n                r,\n                s,\n                pullPayments[paymentDetails[0]]),\n            \"Invalid pull payment registration - ECRECOVER_FAILED\"\n        );\n\n        token.transferFrom(\n            _addresses[0],\n            _addresses[1],\n            _paymentAmount\n        );\n\n        emit LogPullPaymentExecuted(\n            _addresses[0],\n            _addresses[1],\n            _paymentAmount,\n            paymentDetails[0],\n            paymentDetails[1],\n            _uniqueReferenceID\n        );\n    }","after":"function registerPullPayment(\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes32[2] calldata _paymentDetails, /// [0] paymentID, [1] businessID\n        address[2] calldata _addresses, /// [0] customerAddress, [1] receiverAddress\n        uint256 _paymentAmount,\n        string calldata _uniqueReferenceID\n    )\n    public\n    isExecutor()\n    isValidByte32(_paymentDetails[0])\n    isValidByte32(_paymentDetails[1])\n    isValidNumber(_paymentAmount)\n    isValidAddress(_addresses[0])\n    isValidAddress(_addresses[1])\n    pullPaymentDoesNotExists(_addresses[0], _paymentDetails[0])\n    {\n        bytes32[2] memory paymentDetails = _paymentDetails;\n\n        pullPayments[paymentDetails[0]].paymentDetails = _paymentDetails;\n        pullPayments[paymentDetails[0]].paymentAmount = _paymentAmount;\n        pullPayments[paymentDetails[0]].customerAddress = _addresses[0];\n        pullPayments[paymentDetails[0]].receiverAddress = _addresses[1];\n        pullPayments[paymentDetails[0]].uniqueReferenceID = _uniqueReferenceID;\n\n        require(isValidRegistration(\n                v,\n                r,\n                s,\n                pullPayments[paymentDetails[0]]),\n            \"Invalid pull payment registration - ECRECOVER_FAILED\"\n        );\n\n        token.transferFrom(\n            _addresses[0],\n            _addresses[1],\n            _paymentAmount\n        );\n\n        emit LogPullPaymentExecuted(\n            _addresses[0],\n            _addresses[1],\n            _paymentAmount,\n            paymentDetails[0],\n            paymentDetails[1],\n            _uniqueReferenceID\n        );\n    }","contract":"SinglePullPayment","time":0}]}
{"time":112,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => uint256) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => uint256) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"external-function ","before":"function batchTokenizeAssets(uint256[] memory _assetId, bytes memory _sig) public {\n    bytes32 messageHash = keccak256(abi.encodePacked(msg.sender, _assetId));\n    address recoveredAddress = messageHash.toEthSignedMessageHash().recover(_sig);\n    \n    require(recoveredAddress == serverAddress);\n    \n    for (uint256 index = 0; index < _assetId.length; index++) {\n        _mint(msg.sender, _assetId[index]);\n    }\n  }","after":"function batchTokenizeAssets(uint256[] calldata _assetId, bytes calldata _sig) public {\n    bytes32 messageHash = keccak256(abi.encodePacked(msg.sender, _assetId));\n    address recoveredAddress = messageHash.toEthSignedMessageHash().recover(_sig);\n    \n    require(recoveredAddress == serverAddress);\n    \n    for (uint256 index = 0; index < _assetId.length; index++) {\n        _mint(msg.sender, _assetId[index]);\n    }\n  }","contract":"KingdomsBeyond","time":0}]}
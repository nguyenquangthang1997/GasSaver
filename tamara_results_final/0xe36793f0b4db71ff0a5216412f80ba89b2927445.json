{"time":39,"results":[{"type":"external-function ","before":"\n  */\n  function createLock(\n    uint _expirationDuration,\n    address _tokenAddress,\n    uint _keyPrice,\n    uint _maxNumberOfKeys,\n    string memory _lockName,\n    bytes12 _salt\n  ) public\n  {\n    require(publicLockAddress != address(0), 'MISSING_LOCK_TEMPLATE');\n\n    // create lock\n    address newLock = _createClone2(publicLockAddress, _salt);\n    IPublicLock(newLock).initialize(\n      msg.sender,\n      _expirationDuration,\n      _tokenAddress,\n      _keyPrice,\n      _maxNumberOfKeys,\n      _lockName\n    );\n\n    // Assign the new Lock\n    locks[newLock] = LockBalances({\n      deployed: true,\n      totalSales: 0,\n      yieldedDiscountTokens: 0\n    });\n\n    // trigger event\n    emit NewLock(msg.sender, newLo","after":"\n  */\n  function createLock(\n    uint _expirationDuration,\n    address _tokenAddress,\n    uint _keyPrice,\n    uint _maxNumberOfKeys,\n    string calldata _lockName,\n    bytes12 _salt\n  ) public\n  {\n    require(publicLockAddress != address(0), 'MISSING_LOCK_TEMPLATE');\n\n    // create lock\n    address newLock = _createClone2(publicLockAddress, _salt);\n    IPublicLock(newLock).initialize(\n      msg.sender,\n      _expirationDuration,\n      _tokenAddress,\n      _keyPrice,\n      _maxNumberOfKeys,\n      _lockName\n    );\n\n    // Assign the new Lock\n    locks[newLock] = LockBalances({\n      deployed: true,\n      totalSales: 0,\n      yieldedDiscountTokens: 0\n    });\n\n    // trigger event\n    emit NewLock(msg.sender, newLo","contract":"Unlock","time":0}]}
{"time":80,"results":[{"type":"state-data-arrangement ","before":"\nmapping (address => uint256) private _balances;\nmapping (address => mapping (address => uint256)) private _allowed;\nstring constant tokenName = \"Unipot\";\nstring constant tokenSymbol = \"UNI\";\nuint8  constant tokenDecimals = 8;\nuint256 _totalSupply = 10000000 * 100000000;\nuint256 public basePercent = 100;\naddress public lastWinner;\naddress public burnAddress = 0x0000000000000000000000000000000000000000;","after":"mapping (address => uint256) private _balances;\nmapping (address => mapping (address => uint256)) private _allowed;\nstring constant tokenName = \"Unipot\";\nstring constant tokenSymbol = \"UNI\";\nuint256 _totalSupply = 10000000 * 100000000;\nuint256 public basePercent = 100;\naddress public lastWinner;\naddress public burnAddress = 0x0000000000000000000000000000000000000000;\nuint8  constant tokenDecimals = 8;\n","contract":"jackpot","time":0},{"type":"external-function ","before":"function pickWinner(address[] memory randomEntries) public onlyOwner returns (bool) {\n        uint winner = (uint(keccak256(abi.encodePacked(now, msg.sender, block.number))) % (randomEntries.length)) -1;\n        lastWinner = randomEntries[winner];\n        transferFromContract(lastWinner, findOnePercent(balanceOf(address(this))));\n        return true;\n\n    }","after":"function pickWinner(address[] calldata randomEntries) public onlyOwner returns (bool) {\n        uint winner = (uint(keccak256(abi.encodePacked(now, msg.sender, block.number))) % (randomEntries.length)) -1;\n        lastWinner = randomEntries[winner];\n        transferFromContract(lastWinner, findOnePercent(balanceOf(address(this))));\n        return true;\n\n    }","contract":"jackpot","time":0},{"type":"external-function ","before":"function airdrop(address  source, address[] memory dests, uint256[] memory values) public  {\n        // This simple validation will catch most mistakes without consuming\n        // too much gas.\n        require(dests.length == values.length);\n\n        for (uint256 i = 0; i < dests.length; i++) {\n            require(transferFrom(source, dests[i], values[i]));\n        }\n    }","after":"function airdrop(address  source, address[] calldata dests, uint256[] calldata values) public  {\n        // This simple validation will catch most mistakes without consuming\n        // too much gas.\n        require(dests.length == values.length);\n\n        for (uint256 i = 0; i < dests.length; i++) {\n            require(transferFrom(source, dests[i], values[i]));\n        }\n    }","contract":"jackpot","time":0},{"type":"constant-restrict-modification  ","before":"uint256 public basePercent = 100;","after":"uint256 public constant basePercent = 100;","contract":"jackpot","time":0},{"type":"constant-restrict-modification  ","before":"address public burnAddress = 0x0000000000000000000000000000000000000000;","after":"address public constant burnAddress = 0x0000000000000000000000000000000000000000;","contract":"jackpot","time":0}]}
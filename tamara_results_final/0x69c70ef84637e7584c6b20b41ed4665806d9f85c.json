{"time":202,"results":[{"type":"state-data-arrangement ","before":"\nress,\n        uint256 incomingEth\n,\n        uint256 tokensMinted,\n    address indexed referredBy\n    )\n \n    event onTokenSell(\n        address indexed customerAddress\n     uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \nevent onReinvestment(\n        address indexe\n      uint256 tokensMinted\n    );\n    \n    \ndexed customerAddress,\n        uint256 ethereum\nrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        a\ns indexed from,\n        address indexed to,\n        ui\nns\n    );\n\n \n JackPot\n    event onJackpot(\n      \nNFIGURABLES            =\n    ============================\n====*/\n    string public name = \"HEX3D.WIN\";\n    strin\nlic symbol = \"HEX3D\";\n    uint8 constant public\nmals = 18;\n    uint256 constant internal tokenPriceInitial_ = 0.0\n01 ether;\n    uint256 constant int\n tokenPriceIncremental_ = 0.00000\nther;\n    uint256 constant internal magnitude = \n\n    \n    // proof of stake (defau\n    uint256 public stakingRequireme\n0e18;\n    \n    // ambassador program\ness => bool) internal ambassadors_;\n   \n uint256 constant internal ambassadorQuota_ = 2\n============================*/\n    \n    mapping(address => uint256) internal referral\naddress => uint256) internal ambassadorA\nlatedQuota_;\n    uint256 intern\nkenSupply_ = 0;\n    uint256 inter\nShare_;\n\n    mapping(address => u\n ownerAccounts;\n\n    bool public allowReferra","after":"ress,\n        uint256 incomingEth\n,\n        uint256 tokensMinted,\n \n    event onTokenSell(\n        address indexed customerAddress\n     uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \nevent onReinvestment(\n        address indexe\n      uint256 tokensMinted\n    );\n    \n    \ndexed customerAddress,\n        uint256 ethereum\nrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        a\ns indexed from,\n        address indexed to,\n        ui\nNFIGURABLES            =\n    ============================\n====*/\n    string public name = \"HEX3D.WIN\";\n    strin\nlic symbol = \"HEX3D\";\n    uint8 constant public\nmals = 18;\n    uint256 constant internal tokenPriceInitial_ = 0.0\n01 ether;\n    uint256 constant int\n tokenPriceIncremental_ = 0.00000\nther;\n    uint256 constant internal magnitude = \n uint256 constant internal ambassadorQuota_ = 2\n    mapping(address => uint256) internal referral\naddress => uint256) internal ambassadorA\nlatedQuota_;\n    uint256 intern\nkenSupply_ = 0;\n    uint256 inter\nShare_;\n\n    mapping(address => u\n ownerAccounts;\n\n    bool public allowReferra\nns\n    );\n\n \n    address indexed referredBy\n    )\n JackPot\n    event onJackpot(\n      \n\n    \n    // proof of stake (defau\n    uint256 public stakingRequireme\n0e18;\n    \n    // ambassador program\ness => bool) internal ambassadors_;\n   \n============================*/\n    \n","contract":"HEX3D","time":0},{"type":"constant-restrict-modification  ","before":" JackPot\n    event onJackpot(\n      ","after":" JackPot\n    event onJackpot(\n      ","contract":"HEX3D","time":0},{"type":"constant-restrict-modification  ","before":"\n    \n    // proof of stake (defau","after":"\n    \n    // proof of stake (defau","contract":"HEX3D","time":0},{"type":"constant-restrict-modification  ","before":"    uint256 public stakingRequireme","after":"    uint256 public stakingRequireme","contract":"HEX3D","time":0},{"type":"constant-restrict-modification  ","before":"0e18;\n    \n    // ambassador program","after":"0e18;\n    \n    // ambassador program","contract":"HEX3D","time":0}]}
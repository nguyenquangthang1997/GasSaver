{"time":114,"results":[{"type":"struct-data-arrangement ","before":"\nstring uuid\nstring name\nuint256 budget\naddress funder\nuint256 funding\nbool initialized","after":"string uuid\nstring name\nuint256 budget\nuint256 funding\naddress funder\nbool initialized\n","contract":"CampaignFund","time":1},{"type":"external-function ","before":"function registerCampaign(\n        string memory uuid,\n        string memory name,\n        uint256 budget,\n        address funder\n    ) public onlyOwner isNotLocked {\n        require(funder != address(0), \"Funder address cannot be null\");\n        require(budget != 0, \"Budget amount cannot be zero\");\n        require(\n            !_campaignInfoMap[uuid].initialized,\n            \"A campaign with the specified identifier already exists\"\n        );\n\n        CampaignInfo storage ci = _campaignInfoMap[uuid];\n        ci.uuid = uuid;\n        ci.name = name;\n        ci.budget = budget;\n        ci.funder = funder;\n        ci.funding = 0;\n        ci.initialized = true;\n    }","after":"function registerCampaign(\n        string calldata uuid,\n        string calldata name,\n        uint256 budget,\n        address funder\n    ) public onlyOwner isNotLocked {\n        require(funder != address(0), \"Funder address cannot be null\");\n        require(budget != 0, \"Budget amount cannot be zero\");\n        require(\n            !_campaignInfoMap[uuid].initialized,\n            \"A campaign with the specified identifier already exists\"\n        );\n\n        CampaignInfo storage ci = _campaignInfoMap[uuid];\n        ci.uuid = uuid;\n        ci.name = name;\n        ci.budget = budget;\n        ci.funder = funder;\n        ci.funding = 0;\n        ci.initialized = true;\n    }","contract":"CampaignFund","time":0},{"type":"external-function ","before":"function fundCampaign(\n        string memory uuid,\n        uint256 amount,\n        bytes32 hash,\n        string memory subcampaignUuid,\n        string memory name,\n        uint256 startTimestamp,\n        uint256 endTimestamp\n    ) public isNotLocked {\n        require(msg.sender != address(0), \"Funder address cannot be null\");\n        require(\n            _campaignInfoMap[uuid].initialized,\n            \"A campaign with the specified identifier does not exist\"\n        );\n        require(\n            _campaignInfoMap[uuid].funder == msg.sender,\n            \"Only registered funder can call this function\"\n        );\n\n        uint256 newBalance = amount.add(_campaignInfoMap[uuid].funding);\n        require(\n            newBalance <= _campaignInfoMap[uuid].budget,\n            \"Campaign funding cannot exceed the agreed budget amount\"\n        );\n\n        _registerSubcampaign(hash, subcampaignUuid, name, startTimestamp, endTimestamp);\n\n        _campaignInfoMap[uuid].funding = newBalance;\n        _totalBalance = amount.add(_totalBalance);\n        require(\n            olyToken.transferFrom(msg.sender, address(this), amount),\n            \"token.transferFrom call must succeed\"\n        );\n    }","after":"function fundCampaign(\n        string calldata uuid,\n        uint256 amount,\n        bytes32 hash,\n        string calldata subcampaignUuid,\n        string calldata name,\n        uint256 startTimestamp,\n        uint256 endTimestamp\n    ) public isNotLocked {\n        require(msg.sender != address(0), \"Funder address cannot be null\");\n        require(\n            _campaignInfoMap[uuid].initialized,\n            \"A campaign with the specified identifier does not exist\"\n        );\n        require(\n            _campaignInfoMap[uuid].funder == msg.sender,\n            \"Only registered funder can call this function\"\n        );\n\n        uint256 newBalance = amount.add(_campaignInfoMap[uuid].funding);\n        require(\n            newBalance <= _campaignInfoMap[uuid].budget,\n            \"Campaign funding cannot exceed the agreed budget amount\"\n        );\n\n        _registerSubcampaign(hash, subcampaignUuid, name, startTimestamp, endTimestamp);\n\n        _campaignInfoMap[uuid].funding = newBalance;\n        _totalBalance = amount.add(_totalBalance);\n        require(\n            olyToken.transferFrom(msg.sender, address(this), amount),\n            \"token.transferFrom call must succeed\"\n        );\n    }","contract":"CampaignFund","time":0},{"type":"external-function ","before":"function initialize(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 totalSupply,\n        address tokenHolder\n    ) public {\n        require(!_initialized, \"This contract is already initialized\");\n        require(totalSupply > 0, \"Total supply must be greater than 0\");\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _mint(tokenHolder, totalSupply);\n        _initialized = true;\n    }","after":"function initialize(\n        string calldata name,\n        string calldata symbol,\n        uint8 decimals,\n        uint256 totalSupply,\n        address tokenHolder\n    ) public {\n        require(!_initialized, \"This contract is already initialized\");\n        require(totalSupply > 0, \"Total supply must be greater than 0\");\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _mint(tokenHolder, totalSupply);\n        _initialized = true;\n    }","contract":"OlyToken","time":0},{"type":"external-function ","before":"function publishMessages(\n        uint256[] memory nonces,\n        uint256[] memory paymentAmounts,\n        address[] memory paymentCollectors,\n        uint256[] memory paymentFees,\n        address[] memory feeCollectors,\n        bytes32[] memory sigsR,\n        bytes32[] memory sigsS,\n        uint8[] memory sigsV\n    ) public {\n        require(\n            nonces.length == paymentAmounts.length &&\n                paymentAmounts.length == paymentCollectors.length &&\n                paymentCollectors.length == paymentFees.length &&\n                paymentFees.length == feeCollectors.length &&\n                feeCollectors.length == sigsR.length &&\n                sigsR.length == sigsS.length &&\n                sigsS.length == sigsV.length,\n            \"Inconsistent message data received\"\n        );\n\n        for (uint256 i = 0; i < nonces.length; i++) {\n            executeMessage(\n                nonces[i],\n                paymentAmounts[i],\n                paymentCollectors[i],\n                paymentFees[i],\n                feeCollectors[i],\n                sigsR[i],\n                sigsS[i],\n                sigsV[i]\n            );\n        }\n    }","after":"function publishMessages(\n        uint256[] calldata nonces,\n        uint256[] calldata paymentAmounts,\n        address[] calldata paymentCollectors,\n        uint256[] calldata paymentFees,\n        address[] calldata feeCollectors,\n        bytes32[] calldata sigsR,\n        bytes32[] calldata sigsS,\n        uint8[] calldata sigsV\n    ) public {\n        require(\n            nonces.length == paymentAmounts.length &&\n                paymentAmounts.length == paymentCollectors.length &&\n                paymentCollectors.length == paymentFees.length &&\n                paymentFees.length == feeCollectors.length &&\n                feeCollectors.length == sigsR.length &&\n                sigsR.length == sigsS.length &&\n                sigsS.length == sigsV.length,\n            \"Inconsistent message data received\"\n        );\n\n        for (uint256 i = 0; i < nonces.length; i++) {\n            executeMessage(\n                nonces[i],\n                paymentAmounts[i],\n                paymentCollectors[i],\n                paymentFees[i],\n                feeCollectors[i],\n                sigsR[i],\n                sigsS[i],\n                sigsV[i]\n            );\n        }\n    }","contract":"OlyToken","time":0}]}
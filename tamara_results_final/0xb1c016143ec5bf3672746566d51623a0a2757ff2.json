{"time":163,"results":[{"type":"de-morgan-condition ","before":"(!isOpen() && !hasClosed(","after":"!((isOpen() && hasClosed()","loc":{"start":{"line":1241,"column":12},"end":{"line":1241,"column":36}},"contract":"AsureBonusesCrowdsale","time":0},{"type":"external-function ","before":" function addWhitelistedAccounts(address[] memory accounts) public onlyWhitelistAdmin {\n    for (uint i = 0; i < accounts.length; i++) {\n      _addWhitelisted(accounts[i]);\n    }\n  ","after":" function addWhitelistedAccounts(address[] calldata accounts) public onlyWhitelistAdmin {\n    for (uint i = 0; i < accounts.length; i++) {\n      _addWhitelisted(accounts[i]);\n    }\n  ","contract":"AsureCrowdsale","time":0},{"type":"state-data-arrangement ","before":"\n address private _beneficiary\n uint256 private _cliff\n uint256 private _start\n uint256 private _duration\n bool private _revocable\n mapping (address => uint256) private _released\n mapping (address => bool) private _revoked","after":" uint256 private _cliff\n uint256 private _start\n uint256 private _duration\n mapping (address => uint256) private _released\n mapping (address => bool) private _revoked\n address private _beneficiary\n bool private _revocable\n","contract":"TokenVesting","time":0},{"type":"external-function ","before":" function mint(\n    address payable foundationWallet,\n    address payable bountyWallet,\n    address payable familyFriendsWallet,\n    address[] memory teamAddr,\n    uint256[] memory teamAmounts,\n    address[] memory advisorAddr,\n    uint256[] memory advisorAmounts\n  ) onlyOwner public returns (bool) {\n    require(teamAddr.length == teamAmounts.length);\n    require(advisorAddr.length == advisorAmounts.length);\n\n    token.mint(foundationWallet, AVAILABLE_FOUNDATION_SUPPLY);\n    token.mint(bountyWallet, AVAILABLE_BOUNTY_SUPPLY);\n    token.mint(familyFriendsWallet, AVAILABLE_FAMILYFRIENDS_SUPPLY);\n    require(\n      token.totalSupply() == AVAILABLE_TOTAL_SUPPLY.sub(AVAILABLE_MAINSALE_SUPPLY).sub(AVAILABLE_PRESALE_SUPPLY).sub(AVAILABLE_ADVISOR_SUPPLY).sub(AVAILABLE_TEAM_SUPPLY),\n      \"AVAILABLE_FAMILYFRIENDS_SUPPLY\"\n    );\n\n\n    for (uint i = 0; i < teamAddr.length; i++) {\n      TokenVesting vesting = TokenVesting(teamAddr[i]);\n      require(vesting.duration() == TOKEN_VESTING_DURATION_SECONDS);\n      token.mint(teamAddr[i], teamAmounts[i].mul(decimalFactor));\n    }\n    require(\n      token.totalSupply() == AVAILABLE_TOTAL_SUPPLY.sub(AVAILABLE_MAINSALE_SUPPLY).sub(AVAILABLE_PRESALE_SUPPLY).sub(AVAILABLE_ADVISOR_SUPPLY),\n      \"AVAILABLE_TEAM_SUPPLY\"\n    );\n\n\n    for (uint i = 0; i < advisorAddr.length; i++) {\n      TokenVesting vesting = TokenVesting(advisorAddr[i]);\n      require(vesting.duration() == TOKEN_VESTING_DURATION_SECONDS);\n      token.mint(advisorAddr[i], advisorAmounts[i].mul(decimalFactor));\n    }\n    require(\n      token.totalSupply() == AVAILABLE_TOTAL_SUPPLY.sub(AVAILABLE_MAINSALE_SUPPLY).sub(AVAILABLE_PRESALE_SUPPLY),\n      \"AVAILABLE_ADVISOR_SUPPLY\"\n    );\n\n    return true;\n  ","after":" function mint(\n    address payable foundationWallet,\n    address payable bountyWallet,\n    address payable familyFriendsWallet,\n    address[] calldata teamAddr,\n    uint256[] calldata teamAmounts,\n    address[] calldata advisorAddr,\n    uint256[] calldata advisorAmounts\n  ) onlyOwner public returns (bool) {\n    require(teamAddr.length == teamAmounts.length);\n    require(advisorAddr.length == advisorAmounts.length);\n\n    token.mint(foundationWallet, AVAILABLE_FOUNDATION_SUPPLY);\n    token.mint(bountyWallet, AVAILABLE_BOUNTY_SUPPLY);\n    token.mint(familyFriendsWallet, AVAILABLE_FAMILYFRIENDS_SUPPLY);\n    require(\n      token.totalSupply() == AVAILABLE_TOTAL_SUPPLY.sub(AVAILABLE_MAINSALE_SUPPLY).sub(AVAILABLE_PRESALE_SUPPLY).sub(AVAILABLE_ADVISOR_SUPPLY).sub(AVAILABLE_TEAM_SUPPLY),\n      \"AVAILABLE_FAMILYFRIENDS_SUPPLY\"\n    );\n\n\n    for (uint i = 0; i < teamAddr.length; i++) {\n      TokenVesting vesting = TokenVesting(teamAddr[i]);\n      require(vesting.duration() == TOKEN_VESTING_DURATION_SECONDS);\n      token.mint(teamAddr[i], teamAmounts[i].mul(decimalFactor));\n    }\n    require(\n      token.totalSupply() == AVAILABLE_TOTAL_SUPPLY.sub(AVAILABLE_MAINSALE_SUPPLY).sub(AVAILABLE_PRESALE_SUPPLY).sub(AVAILABLE_ADVISOR_SUPPLY),\n      \"AVAILABLE_TEAM_SUPPLY\"\n    );\n\n\n    for (uint i = 0; i < advisorAddr.length; i++) {\n      TokenVesting vesting = TokenVesting(advisorAddr[i]);\n      require(vesting.duration() == TOKEN_VESTING_DURATION_SECONDS);\n      token.mint(advisorAddr[i], advisorAmounts[i].mul(decimalFactor));\n    }\n    require(\n      token.totalSupply() == AVAILABLE_TOTAL_SUPPLY.sub(AVAILABLE_MAINSALE_SUPPLY).sub(AVAILABLE_PRESALE_SUPPLY),\n      \"AVAILABLE_ADVISOR_SUPPLY\"\n    );\n\n    return true;\n  ","contract":"AsureCrowdsaleDeployer","time":0}]}
{"time":199,"results":[{"type":"external-function ","before":"function investIn(string memory inviteCode, string memory referrer)\n        public\n        isHuman()\n        payable\n    {\n        require(gameStart(), \"game not start\");\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\n\n        UserGlobal storage userGlobal = userMapping[msg.sender];\n        if (userGlobal.id == 0) {\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\n            address referrerAddr = getUserAddressByCode(referrer);\n            require(uint(referrerAddr) != 0, \"referer not exist\");\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\n            require(!isUsed(inviteCode), \"invite code is used\");\n\n            registerUser(msg.sender, inviteCode, referrer);\n        }\n\n        User storage user = userRoundMapping[rid][msg.sender];\n        if (uint(user.userAddress) != 0) {\n            require(user.freezeAmount.add(msg.value) <= 15*ethWei, \"can not beyond 15 eth\");\n            user.allInvest = user.allInvest.add(msg.value);\n            user.freezeAmount = user.freezeAmount.add(msg.value);\n            user.staticLevel = getLevel(user.freezeAmount);\n            user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\n        } else {\n            user.id = userGlobal.id;\n            user.userAddress = msg.sender;\n            user.freezeAmount = msg.value;\n            user.staticLevel = getLevel(msg.value);\n            user.allInvest = msg.value;\n            user.dynamicLevel = getLineLevel(msg.value);\n            user.inviteCode = userGlobal.inviteCode;\n            user.referrer = userGlobal.referrer;\n\n            if (!compareStr(userGlobal.referrer, \"\")) {\n                address referrerAddr = getUserAddressByCode(userGlobal.referrer);\n                userRoundMapping[rid][referrerAddr].inviteAmount++;\n            }\n        }\n\n        Invest memory invest = Invest(msg.sender, msg.value, now, 0);\n        user.invests.push(invest);\n\n        if (rInvestMoney[rid] != 0 && (rInvestMoney[rid].div(10000).div(ethWei) != rInvestMoney[rid].add(msg.value).div(10000).div(ethWei))) {\n            bool isEnough;\n            uint sendMoney;\n            (isEnough, sendMoney) = isEnoughBalance(rInfo[rid].luckPort);\n            if (sendMoney > 0) {\n                sendMoneyToUser(msg.sender, sendMoney);\n            }\n            rInfo[rid].luckPort = 0;\n            if (!isEnough) {\n                endRound();\n                return;\n            }\n        }\n\n        investCount = investCount.add(1);\n        investMoney = investMoney.add(msg.value);\n        rInvestCount[rid] = rInvestCount[rid].add(1);\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\n        rInfo[rid].luckPort = rInfo[rid].luckPort.add(msg.value.mul(2).div(1000));\n\n        sendFeetoAdmin(msg.value);\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, userGlobal.inviteCode, userGlobal.referrer, 0);\n    }","after":"function investIn(string calldata inviteCode, string calldata referrer)\n        public\n        isHuman()\n        payable\n    {\n        require(gameStart(), \"game not start\");\n        require(msg.value >= 1*ethWei && msg.value <= 15*ethWei, \"between 1 and 15\");\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\n\n        UserGlobal storage userGlobal = userMapping[msg.sender];\n        if (userGlobal.id == 0) {\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\n            address referrerAddr = getUserAddressByCode(referrer);\n            require(uint(referrerAddr) != 0, \"referer not exist\");\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\n            require(!isUsed(inviteCode), \"invite code is used\");\n\n            registerUser(msg.sender, inviteCode, referrer);\n        }\n\n        User storage user = userRoundMapping[rid][msg.sender];\n        if (uint(user.userAddress) != 0) {\n            require(user.freezeAmount.add(msg.value) <= 15*ethWei, \"can not beyond 15 eth\");\n            user.allInvest = user.allInvest.add(msg.value);\n            user.freezeAmount = user.freezeAmount.add(msg.value);\n            user.staticLevel = getLevel(user.freezeAmount);\n            user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\n        } else {\n            user.id = userGlobal.id;\n            user.userAddress = msg.sender;\n            user.freezeAmount = msg.value;\n            user.staticLevel = getLevel(msg.value);\n            user.allInvest = msg.value;\n            user.dynamicLevel = getLineLevel(msg.value);\n            user.inviteCode = userGlobal.inviteCode;\n            user.referrer = userGlobal.referrer;\n\n            if (!compareStr(userGlobal.referrer, \"\")) {\n                address referrerAddr = getUserAddressByCode(userGlobal.referrer);\n                userRoundMapping[rid][referrerAddr].inviteAmount++;\n            }\n        }\n\n        Invest memory invest = Invest(msg.sender, msg.value, now, 0);\n        user.invests.push(invest);\n\n        if (rInvestMoney[rid] != 0 && (rInvestMoney[rid].div(10000).div(ethWei) != rInvestMoney[rid].add(msg.value).div(10000).div(ethWei))) {\n            bool isEnough;\n            uint sendMoney;\n            (isEnough, sendMoney) = isEnoughBalance(rInfo[rid].luckPort);\n            if (sendMoney > 0) {\n                sendMoneyToUser(msg.sender, sendMoney);\n            }\n            rInfo[rid].luckPort = 0;\n            if (!isEnough) {\n                endRound();\n                return;\n            }\n        }\n\n        investCount = investCount.add(1);\n        investMoney = investMoney.add(msg.value);\n        rInvestCount[rid] = rInvestCount[rid].add(1);\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\n        rInfo[rid].luckPort = rInfo[rid].luckPort.add(msg.value.mul(2).div(1000));\n\n        sendFeetoAdmin(msg.value);\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, userGlobal.inviteCode, userGlobal.referrer, 0);\n    }","contract":"ETHMaglc","time":0},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"ETHMaglc","time":1},{"type":"constant-restrict-modification  ","before":"address payable private devAddr = address(0x34F3D97F1d1794b8BD963AB0D817Bc136a87056F);","after":"address payable private constant devAddr = address(0x34F3D97F1d1794b8BD963AB0D817Bc136a87056F);","contract":"ETHMaglc","time":1},{"type":"constant-restrict-modification  ","before":"address payable private savingAddr = address(0x2a4a4baB2F50FF69606cA17Ad9BF37B356640CE5);","after":"address payable private constant savingAddr = address(0x2a4a4baB2F50FF69606cA17Ad9BF37B356640CE5);","contract":"ETHMaglc","time":1},{"type":"constant-restrict-modification  ","before":"address payable private follow = address(0x473459991E1A56acB042d992CFf77254405d7972);","after":"address payable private constant follow = address(0x473459991E1A56acB042d992CFf77254405d7972);","contract":"ETHMaglc","time":1},{"type":"constant-restrict-modification  ","before":"uint period = 3 days;","after":"uint constant period = 3 days;","contract":"ETHMaglc","time":1},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"ETHMaglc","time":1}]}
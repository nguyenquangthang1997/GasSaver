{"time":830,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"struct-data-arrangement ","before":"\nAustral {\n  \n32 valor;\n        \norLetras;\n        \neroSerie;\n    ","after":"32 valor;\n        \norLetras;\n        \nAustral {\n  \neroSerie;\n    \n","contract":"CriptoAustral","time":0},{"type":"state-data-arrangement ","before":"\ned.selector`\r\n    bytes4 private constant _ERC721_RECE\n ID to owner\r\n    mapping (uint256 => address) pr\noved address\r\n    mapping (uint256 => address) privat\n owned token\r\n    mapping (address => Counters.Counter) private \nor approvals\r\n    mapping (address => mapping (address => bool)) private _\n8cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ER","after":" ID to owner\r\n    mapping (uint256 => address) pr\noved address\r\n    mapping (uint256 => address) privat\n owned token\r\n    mapping (address => Counters.Counter) private \nor approvals\r\n    mapping (address => mapping (address => bool)) private _\ned.selector`\r\n    bytes4 private constant _ERC721_RECE\n8cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ER\n","contract":"ERC721","time":1},{"type":"struct-data-arrangement ","before":"\n    }\n\n    s\nral {\n        uint\n        string val\n        string","after":"ral {\n        uint\n        string val\n    }\n\n    s\n        string\n","contract":"CriptoAustral","time":0},{"type":"state-data-arrangement ","before":"\n(0).onERC721Received.selector`\r\n    bytes4 private con\nMapping from token ID to owner\r\n    mapping (uint\nm token ID to approved address\r\n    mapping (uint256 \nowner to number of owned token\r\n    mapping (address => Counters\nom owner to operator approvals\r\n    mapping (address => mapping (address =\n88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constan","after":"Mapping from token ID to owner\r\n    mapping (uint\nm token ID to approved address\r\n    mapping (uint256 \nowner to number of owned token\r\n    mapping (address => Counters\nom owner to operator approvals\r\n    mapping (address => mapping (address =\n(0).onERC721Received.selector`\r\n    bytes4 private con\n88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constan\n","contract":"ERC721","time":0},{"type":"struct-data-arrangement ","before":"\nRFACE_ID_ERC\n}\n\n    struct Aust\n    uint32 valor;\n\nring valorLetr","after":"}\n\n    struct Aust\n    uint32 valor;\n\nRFACE_ID_ERC\nring valorLetr\n","contract":"CriptoAustral","time":0}]}
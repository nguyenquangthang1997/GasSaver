{"time":21,"results":[{"type":"struct-data-arrangement ","before":"\n    address o\n    mapping(address => bytes) signat\n    uint is\n    uint exp\n    bool ex","after":"    mapping(address => bytes) signat\n    uint is\n    uint exp\n    address o\n    bool ex\n","contract":"Certifications","time":0},{"type":"external-function ","before":"    function addSignatureToCertificate(address _signer, bytes32 _fingerprint, bytes memory _signature) onlyOwner() public returns(bool) {\n       address signer = _fingerprint.recoverAddress(_signature);\n       require(fingerprints[_fingerprint].exists, \"Certificate does not exists\");\n       require(_signer == signer, \"Signature does not corresponds to signer\");\n       fingerprints[_fingerprint].signatures[_signer] = _signature;\n       return true;\n ","after":"    function addSignatureToCertificate(address _signer, bytes32 _fingerprint, bytes calldata _signature) onlyOwner() public returns(bool) {\n       address signer = _fingerprint.recoverAddress(_signature);\n       require(fingerprints[_fingerprint].exists, \"Certificate does not exists\");\n       require(_signer == signer, \"Signature does not corresponds to signer\");\n       fingerprints[_fingerprint].signatures[_signer] = _signature;\n       return true;\n ","contract":"Certifications","time":0}]}
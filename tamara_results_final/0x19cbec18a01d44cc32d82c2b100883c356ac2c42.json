{"time":1092,"results":[{"type":"state-data-arrangement ","before":"\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nmapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;","after":"mapping (uint256 => address) private _tokenOwner;\nmapping (uint256 => address) private _tokenApprovals;\nmapping (address => Counters.Counter) private _ownedTokensCount;\nmapping (address => mapping (address => bool)) private _operatorApprovals;\nbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\nbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n","contract":"ERC721","time":0},{"type":"constant-restrict-modification  ","before":"uint256  public  decimals = 18;","after":"uint256  public  constant decimals = 18;","contract":"DSToken","time":0},{"type":"external-function ","before":"function safeTransferFrom721(address token, address from, address to, uint256 tokenId, bytes memory _data) public auth {\n        TrustedErci721Wallet(token).safeTransferFrom(from, to, tokenId, _data);\n    }","after":"function safeTransferFrom721(address token, address from, address to, uint256 tokenId, bytes calldata _data) public auth {\n        TrustedErci721Wallet(token).safeTransferFrom(from, to, tokenId, _data);\n    }","contract":"Liquidity","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public name = \"Liq\";","after":"bytes32 public constant name = \"Liq\";","contract":"Liquidity","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public symbol = \"Liq\";","after":"bytes32 public constant symbol = \"Liq\";","contract":"Liquidity","time":0},{"type":"constant-restrict-modification  ","before":"address public eth = address(0xee);","after":"address public constant eth = address(0xee);","contract":"Liquidity","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public name = \"Wal\";","after":"bytes32 public constant name = \"Wal\";","contract":"Liquidity","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public symbol = \"Wal\";","after":"bytes32 public constant symbol = \"Wal\";","contract":"Liquidity","time":0},{"type":"state-data-arrangement ","before":"\nmapping(\n        address => mapping(\n            uint => uint)) public basePrice;\nmapping(address => bool) public custodians;\nmapping(address => uint)                                // total base currency value of custodians collaterals\n        public totalDpassCustV;\nmapping(address => uint) private rate;\nmapping(address => uint) public cdcV;\nmapping(address => uint) public dcdcV;\nmapping(address => uint) public totalDcdcCustV;\nmapping(\n        address => mapping(\n            address => uint)) public dcdcCustV;\nmapping(address => bool) public payTokens;\nmapping(address => bool) public dpasses;\nmapping(address => bool) public dcdcs;\nmapping(address => bool) public cdcs;\nmapping(address => uint) public decimals;\nmapping(address => bool) public decimalsSet;\nmapping(address => address) public priceFeed;\nmapping(address => uint) public tokenPurchaseRate;\nmapping(address => uint) public totalPaidCustV;\nmapping(address => uint) public dpassSoldCustV;\nmapping(address => bool) public manualRate;\nmapping(address => uint) public capCustV;\nmapping(address => uint) public cdcPurchaseV;\nuint public totalDpassV;\nuint public totalDcdcV;\nuint public totalCdcV;\nuint public totalCdcPurchaseV;\nuint public overCollRatio;\nuint public overCollRemoveRatio;\nuint public dust = 1000;\nbool public locked;\naddress public eth = address(0xee);\nbytes32 public name = \"Asm\";\nbytes32 public symbol = \"Asm\";\naddress public dex;\nmapping(address => Audit) public audit;\nuint32 public auditInterval = 1776000;\nuint constant WAD = 10 ** 18;","after":"mapping(\n        address => mapping(\n            uint => uint)) public basePrice;\nmapping(address => bool) public custodians;\nmapping(address => uint)                                // total base currency value of custodians collaterals\n        public totalDpassCustV;\nmapping(address => uint) private rate;\nmapping(address => uint) public cdcV;\nmapping(address => uint) public dcdcV;\nmapping(address => uint) public totalDcdcCustV;\nmapping(\n        address => mapping(\n            address => uint)) public dcdcCustV;\nmapping(address => bool) public payTokens;\nmapping(address => bool) public dpasses;\nmapping(address => bool) public dcdcs;\nmapping(address => bool) public cdcs;\nmapping(address => uint) public decimals;\nmapping(address => bool) public decimalsSet;\nmapping(address => address) public priceFeed;\nmapping(address => uint) public tokenPurchaseRate;\nmapping(address => uint) public totalPaidCustV;\nmapping(address => uint) public dpassSoldCustV;\nmapping(address => bool) public manualRate;\nmapping(address => uint) public capCustV;\nmapping(address => uint) public cdcPurchaseV;\nuint public totalDpassV;\nuint public totalDcdcV;\nuint public totalCdcV;\nuint public totalCdcPurchaseV;\nuint public overCollRatio;\nuint public overCollRemoveRatio;\nuint public dust = 1000;\nbytes32 public name = \"Asm\";\nbytes32 public symbol = \"Asm\";\nmapping(address => Audit) public audit;\nuint constant WAD = 10 ** 18;\naddress public eth = address(0xee);\naddress public dex;\nuint32 public auditInterval = 1776000;\nbool public locked;\n","contract":"SimpleAssetManagement","time":1},{"type":"constant-restrict-modification  ","before":"address public eth = address(0xee);","after":"address public constant eth = address(0xee);","contract":"SimpleAssetManagement","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public name = \"Asm\";","after":"bytes32 public constant name = \"Asm\";","contract":"SimpleAssetManagement","time":0},{"type":"constant-restrict-modification  ","before":"bytes32 public symbol = \"Asm\";","after":"bytes32 public constant symbol = \"Asm\";","contract":"SimpleAssetManagement","time":0},{"type":"constant-restrict-modification  ","before":"uint32 public auditInterval = 1776000;","after":"uint32 public constant auditInterval = 1776000;","contract":"SimpleAssetManagement","time":0},{"type":"constant-restrict-modification  ","before":"address public eth = address(0xee);","after":"address public constant eth = address(0xee);","contract":"Redeemer","time":1},{"type":"constant-restrict-modification  ","before":"bytes32 public name = \"Red\";","after":"bytes32 public constant name = \"Red\";","contract":"Redeemer","time":1},{"type":"constant-restrict-modification  ","before":"bytes32 public symbol = \"Red\";","after":"bytes32 public constant symbol = \"Red\";","contract":"Redeemer","time":1},{"type":"constant-restrict-modification  ","before":"bytes32 public name = \"Dex\";","after":"bytes32 public constant name = \"Dex\";","contract":"DiamondExchange","time":1},{"type":"constant-restrict-modification  ","before":"bytes32 public symbol = \"Dex\";","after":"bytes32 public constant symbol = \"Dex\";","contract":"DiamondExchange","time":1},{"type":"constant-restrict-modification  ","before":"address eth = address(0xee);","after":"address constant eth = address(0xee);","contract":"DiamondExchange","time":1}]}
{"time":144,"results":[{"type":"external-function ","before":"function invest(string memory superiorInviteString, string memory myInviteString)\n    public\n    isHuman()\n    isStart()\n    payable\n    {\n\n        address investor = msg.sender;\n        uint256 investAmount = msg.value;\n        uint256 inviteCode = string2Code[superiorInviteString];\n        address inviterAddress = codeForInvite[inviteCode];\n        bool isNew = false;\n        countDownOverIf();\n        require(!aoqUtil.compareStr(myInviteString, \"\"), 'can not be none');\n        require(over == false, 'Game Over');\n        require(msg.value >= 1 * ethWei && msg.value <= 31 * ethWei, \"between 1 and 31\");\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\n\n        Invest storage currentInvest = user[investor].invest[user[investor].currentInvestTimes];\n        require(currentInvest.freeze == 0, 'in a invest cycle');\n\n        uint256 recommendGain;\n        if (user[investor].inviter == address(0)) {\n            require(inviteCode >= 999 && inviterAddress != address(0) && inviterAddress != msg.sender, 'must be a vaild inviter dddress');\n            user[investor].inviter = inviterAddress;\n            user[investor].superiorCode = inviteCode;\n            user[investor].superiorCodeString = superiorInviteString;\n\n            require(string2Code[myInviteString] == user[investor].inviteCode, 'invaild  my invite string');\n            user[investor].inviteCodeString = myInviteString;\n\n            recommendGain = caclInviterGain(inviterAddress, investAmount);\n\n            user[investor].inviteCode = inviteCodeCount + 1;\n            string2Code[myInviteString] = inviteCodeCount + 1;\n\n            inviteCodeCount = inviteCodeCount + 1;\n            codeForInvite[inviteCodeCount] = investor;\n            isNew = true;\n        }\n\n        user[investor].currentInvestTimes = user[investor].currentInvestTimes.add(1);\n        Invest storage newInvest = user[investor].invest[user[investor].currentInvestTimes];\n        newInvest.freeze = investAmount.mul(3);\n        newInvest.inputAmount = investAmount;\n\n        uint256 projectGain = investAmount.div(10);\n        projectAddress.transfer(projectGain);\n\n        if (countDown.open == true) {\n            emit CloseCountDownEvent(now, countDown.openTime, fund.balance, address(this).balance);\n        }\n        countDown.open = false;\n        countDown.openTime = 0;\n\n        uint256 level = aoqUtil.getLevel(investAmount);\n        emit InvestEvent(investor, investAmount, inviterAddress, user[investor].currentInvestTimes, recommendGain);\n\n        AOQFund aoqFund = AOQFund(fund);\n        aoqFund.receiveInvest(investor, level, isNew);\n\n        investCountTotal = investCountTotal.add(1);\n        investAmountTotal = investAmountTotal.add(investAmount);\n\n    }","after":"function invest(string calldata superiorInviteString, string calldata myInviteString)\n    public\n    isHuman()\n    isStart()\n    payable\n    {\n\n        address investor = msg.sender;\n        uint256 investAmount = msg.value;\n        uint256 inviteCode = string2Code[superiorInviteString];\n        address inviterAddress = codeForInvite[inviteCode];\n        bool isNew = false;\n        countDownOverIf();\n        require(!aoqUtil.compareStr(myInviteString, \"\"), 'can not be none');\n        require(over == false, 'Game Over');\n        require(msg.value >= 1 * ethWei && msg.value <= 31 * ethWei, \"between 1 and 31\");\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\n\n        Invest storage currentInvest = user[investor].invest[user[investor].currentInvestTimes];\n        require(currentInvest.freeze == 0, 'in a invest cycle');\n\n        uint256 recommendGain;\n        if (user[investor].inviter == address(0)) {\n            require(inviteCode >= 999 && inviterAddress != address(0) && inviterAddress != msg.sender, 'must be a vaild inviter dddress');\n            user[investor].inviter = inviterAddress;\n            user[investor].superiorCode = inviteCode;\n            user[investor].superiorCodeString = superiorInviteString;\n\n            require(string2Code[myInviteString] == user[investor].inviteCode, 'invaild  my invite string');\n            user[investor].inviteCodeString = myInviteString;\n\n            recommendGain = caclInviterGain(inviterAddress, investAmount);\n\n            user[investor].inviteCode = inviteCodeCount + 1;\n            string2Code[myInviteString] = inviteCodeCount + 1;\n\n            inviteCodeCount = inviteCodeCount + 1;\n            codeForInvite[inviteCodeCount] = investor;\n            isNew = true;\n        }\n\n        user[investor].currentInvestTimes = user[investor].currentInvestTimes.add(1);\n        Invest storage newInvest = user[investor].invest[user[investor].currentInvestTimes];\n        newInvest.freeze = investAmount.mul(3);\n        newInvest.inputAmount = investAmount;\n\n        uint256 projectGain = investAmount.div(10);\n        projectAddress.transfer(projectGain);\n\n        if (countDown.open == true) {\n            emit CloseCountDownEvent(now, countDown.openTime, fund.balance, address(this).balance);\n        }\n        countDown.open = false;\n        countDown.openTime = 0;\n\n        uint256 level = aoqUtil.getLevel(investAmount);\n        emit InvestEvent(investor, investAmount, inviterAddress, user[investor].currentInvestTimes, recommendGain);\n\n        AOQFund aoqFund = AOQFund(fund);\n        aoqFund.receiveInvest(investor, level, isNew);\n\n        investCountTotal = investCountTotal.add(1);\n        investAmountTotal = investAmountTotal.add(investAmount);\n\n    }","contract":"AOQ","time":0},{"type":"constant-restrict-modification  ","before":"uint ethWei = 1 ether;","after":"uint constant ethWei = 1 ether;","contract":"AOQ","time":0},{"type":"constant-restrict-modification  ","before":"uint allCount = 0;","after":"uint constant allCount = 0;","contract":"AOQ","time":0}]}